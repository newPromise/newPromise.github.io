{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"1beb6370d30df3caac5e51beff6bb25ca5d9a8a5","modified":1600065386022},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1600065386050},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1600065386051},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1600065386052},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1600065386052},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1600065386052},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1600065386053},{"_id":"themes/next/_config.yml","hash":"3b166f99c4ef8daac67cd17680d77b85ab2e680c","modified":1600065386053},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1600065386053},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1600065386070},{"_id":"source/_posts/Blob.md","hash":"fa6c4b2f9648bce00764e6e4638fcb162e0e5b4d","modified":1600065385963},{"_id":"source/_posts/BFC.md","hash":"ee8fe56cffe5bb2c33d8d5c87e096b5feaeb83db","modified":1600065385963},{"_id":"source/_posts/CSS层叠上下文.md","hash":"c34f1836bc1daed0fb5d23343558830e4d9cfdd9","modified":1600065385964},{"_id":"source/_posts/CSS-未知高度内文本居中.md","hash":"2d15af0b605fe861666d10e3e22ff05c81318c00","modified":1600065385963},{"_id":"source/_posts/CSS居中效果.md","hash":"10043bf1027ed73bba0ac9010346354209780fca","modified":1600065385964},{"_id":"source/_posts/JSONP跨域-ajax请求.md","hash":"a5dea02a1c6e33d3786ac3631367a272ae744505","modified":1600065385964},{"_id":"source/_posts/JavaScript-中的函数式编程（译）.md","hash":"140dd4ef88085c3ed75a2c222dbe26f194267937","modified":1600065385964},{"_id":"source/_posts/Vue响应原理.md","hash":"96c2ee677fe46bdac2c47db441ee04706844ab55","modified":1600065385965},{"_id":"source/_posts/Vue-组件之间的传值.md","hash":"be03e138cb5e1af4567d0de41b5e01e9060c9d9f","modified":1600065385965},{"_id":"source/_posts/PromisifyCallback.md","hash":"711dddd2b9ecdd1a7135e2d37b2347c39a39a5c7","modified":1600065385965},{"_id":"source/_posts/base64.md","hash":"92ce8a5f7f7f8c1fa6a8b0a6122848245da7c9a3","modified":1600065385966},{"_id":"source/_posts/css-modules-前端模块化.md","hash":"bfa3252bbfe2c5ed69c72cfaa0b9e4dc1af00b1a","modified":1600065385970},{"_id":"source/_posts/encode & decode.md","hash":"ec3ff50cf96db186ab7c4a4da001396d51abda44","modified":1600065385971},{"_id":"source/_posts/es6-Map-and-Set.md","hash":"875259e347519d32290db9951bd52ea89ad252fc","modified":1600065385973},{"_id":"source/_posts/es6-promise.md","hash":"e90234e9dc174f5ad113e569e2c58dd4f23add90","modified":1600065385973},{"_id":"source/_posts/es6-变量的解构赋值.md","hash":"6a1052c9c5a7612e6331425111eefebff763d63a","modified":1600065385973},{"_id":"source/_posts/es6-对象的扩展.md","hash":"4c60ab42adbc41e7d9a009572cdcf8c941b47726","modified":1600065385974},{"_id":"source/_posts/grid-布局（一）.md","hash":"83bb560680cd5ef5412be2ce69b14a05ffc79a49","modified":1600065385975},{"_id":"source/_posts/event Emitter.md","hash":"c286001096dcfa1b69a2cb0be90bcda95661cfe0","modified":1600065385974},{"_id":"source/_posts/js-中数据结构的实现.md","hash":"0a5ea48e04b98bf68e7fa977ce7667071a6f28cf","modified":1600065385976},{"_id":"source/_posts/js-Worker.md","hash":"9013a0c0440485d3fa5b4bde528d0b3c4ed903be","modified":1600065385975},{"_id":"source/_posts/my-first-blog.md","hash":"a8616a8b9159fc30708144a64242ee3aa4ee0b17","modified":1600065385977},{"_id":"source/_posts/js-文件上传与下载.md","hash":"56b57257bccac90a1a1c699e8eddff16a7952657","modified":1600065385977},{"_id":"source/_posts/nextTick in vue.md","hash":"36c9cd16aea0ec94b17390dd8b2ec0dd51cbe854","modified":1600065385978},{"_id":"source/_posts/node-js-EventEmitter.md","hash":"5e346f00ab64efc77979c6cd7081bc7c4919809a","modified":1600065385978},{"_id":"source/_posts/node-js基础-基本服务器构建.md","hash":"db6b2935c2f1acefd127e439e5fe57bf42e26813","modified":1600065385979},{"_id":"source/_posts/node-js-Timers.md","hash":"e8c9a5ce7d3abe4a04e3d322323fbab7064b5ca6","modified":1600065385979},{"_id":"source/_posts/node中的 events 模块.md","hash":"faab2556e6343d9ddc245b8f3effa9794ea42140","modified":1600065385980},{"_id":"source/_posts/promise中的错误捕获.md","hash":"ac2eca86dd3cb6fef71db4ae2cc3f8c205d644dc","modified":1600065385982},{"_id":"source/_posts/prop in vue（prop 的初始化）.md","hash":"1ced23d022221d484e80481ba1c01862362993e7","modified":1600065385982},{"_id":"source/_posts/promise.md","hash":"8d1c4e536c1e9be4f6df499fbaca3de5b2bc1d8b","modified":1600065385981},{"_id":"source/_posts/this-nextTick-in-vue-js.md","hash":"80aa5c5f0fc8d12cde6ed97e2f48a076bad78b2f","modified":1600065385982},{"_id":"source/_posts/tooltip-的实现.md","hash":"bcf36e61fb6929e273d421641901536f2b3abb02","modified":1600065385983},{"_id":"source/_posts/translate3d.md","hash":"103c23316783993e8b8d9e7c26ef4ccd84a25792","modified":1600065385983},{"_id":"source/_posts/underscore-js-源码分析-九.md","hash":"64d7eeba951ce49d255713236b2f8ad66149f347","modified":1600065385983},{"_id":"source/_posts/underscore-js-源码分析-十三.md","hash":"89d1ecc409d17e8a231260abe167fc21ea86df5d","modified":1600065385983},{"_id":"source/_posts/underscore-js-源码分析-五.md","hash":"771e03620fc2af7f99c5ab678f9c9fa4bdede56b","modified":1600065385983},{"_id":"source/_posts/underscore-js-源码分析-十五.md","hash":"0f8957f8bbe15f03f5f098bccdfc5d9979b80d07","modified":1600065385984},{"_id":"source/_posts/underscore-js-源码分析-十六.md","hash":"99c36211950f636eb0c0dcc7984d6acb542f925c","modified":1600065385984},{"_id":"source/_posts/underscore-js-源码解析-六.md","hash":"c2d2e26d57b692d9934ad344d8123a2705cad261","modified":1600065385984},{"_id":"source/_posts/underscore-js源码分析-一.md","hash":"858d3cf4c61279089cb0f358d109c9e3cf0fb88a","modified":1600065385984},{"_id":"source/_posts/underscore-js源码分析-七.md","hash":"cc2b6a5e3c41c0bdbe7ac7bbc4c4d68584aa2ee5","modified":1600065385984},{"_id":"source/_posts/underscore-js源码分析-三.md","hash":"0a482c90ccd7722f800a8d9a619e6cae45ef7e1b","modified":1600065385985},{"_id":"source/_posts/underscore-js源码分析-二.md","hash":"417930355129312dce7e86df0c2d9ddb7feaa4f1","modified":1600065385985},{"_id":"source/_posts/underscore-js源码分析-十.md","hash":"fbf17e4488e1c965ed164bce408f1e1d062aea80","modified":1600065385986},{"_id":"source/_posts/underscore-js源码分析-八.md","hash":"5c043a47d69390b951c7dffab59bb366bfd668ee","modified":1600065385985},{"_id":"source/_posts/underscore-js源码分析-十二.md","hash":"9a3cc3b139cc704c1b82253144f5e58ea0996951","modified":1600065385986},{"_id":"source/_posts/underscore-js源码分析-十一.md","hash":"60451934b18ab29a948188e9fda3b76e3a1ccbe7","modified":1600065385986},{"_id":"source/_posts/underscore-js源码分析-四.md","hash":"de8cec369607f8b26624cba264e1525d239693a9","modified":1600065385986},{"_id":"source/_posts/underscore-js源码分析-十四.md","hash":"22b3dd29be11b62498388c4c0d8be3728b7b2101","modified":1600065385986},{"_id":"source/_posts/vertical-align.md","hash":"59e49ac549a8ad220502c79bd023dc5d4184fbec","modified":1600065385987},{"_id":"source/_posts/vue 源码：utils 函数.md","hash":"06f2a433f26ccd43de2aae006e213b866b6d476a","modified":1600065385987},{"_id":"source/_posts/vue 知识总结.md","hash":"4083b9c416dc0c43813f04f5076f45bfd7f67d2c","modified":1600065385989},{"_id":"source/_posts/while-and-do.md","hash":"7ef6c56560259654165777323755510078f62be0","modified":1600065385991},{"_id":"source/_posts/事件监听代码.md","hash":"3f94283891aa8e32dd0f2b9cdf1c66d2c3cf6044","modified":1600065385991},{"_id":"source/_posts/watch in vue.md","hash":"b1232062ff109d42182c8c37c543df35f47b5626","modified":1600065385990},{"_id":"source/_posts/作用域.md","hash":"58c2fe1d6cd0f5f8fcc92a9bb3b6bd547e1224d3","modified":1600065385991},{"_id":"source/_posts/作用域：函数作用域和块作用域.md","hash":"6088af44fef8b0ed38a8f15012b28f8d23102df5","modified":1600065385991},{"_id":"source/_posts/使用 browserify 处理virtual-dom模块的一个例子.md","hash":"cfe9bac7386a51db77d397ed322faf3cdd97cb6b","modified":1600065385992},{"_id":"source/_posts/函数式编程（1）.md","hash":"f4932ebf2cc36ad80feac9e23c1dbf1f9040235f","modified":1600065385992},{"_id":"source/_posts/函数节流.md","hash":"2f4c74a74b321766ec1714a684076abd7cea8694","modified":1600065385993},{"_id":"source/_posts/前端路由的实现方式.md","hash":"65663c50e81a5311804c18dc6df33f88e585a72c","modified":1600065385993},{"_id":"source/_posts/实现machine函数.md","hash":"e9d4ba9be7b6ebce23e551cb923ff7b2c94e3392","modified":1600065385993},{"_id":"source/_posts/对象复制.md","hash":"a2b1ad380f086901432646895670e2a8c30d9c77","modified":1600065385994},{"_id":"source/_posts/排序算法.md","hash":"fc957c77c385277852f99b865335e46f20436ca7","modified":1600065385994},{"_id":"source/_posts/数据结构：栈和队列.md","hash":"eaf1147f45f6237be71046f25019a3d0fe3bbef4","modified":1600065385995},{"_id":"source/_posts/数据结构：树.md","hash":"49b3f23b4158b9389659405de8cbd5bccc617f9f","modified":1600065385998},{"_id":"source/_posts/数据结构：线性表.md","hash":"6cfa8bb0aee83c332246ea6b245e483d13d91c3f","modified":1600065386007},{"_id":"source/_posts/日历.md","hash":"a76de2973e30125fcf5ed7ae2223b1b143b4c626","modified":1600065386015},{"_id":"source/_posts/正则表达式（一）：理论基础部分.md","hash":"c2550a9a025711ac918bad2eec206d7e6c633c2c","modified":1600065386015},{"_id":"source/_posts/正则表达式（三）：一些例子.md","hash":"4cd61ece121621b45121ce6790618ef0cb8d13ae","modified":1600065386015},{"_id":"source/_posts/正则表达式（五）：括号.md","hash":"4c25acc160033844fc0242bf7b14966bc106c13e","modified":1600065386016},{"_id":"source/_posts/正则表达式（四）：正则表达式进阶，-匹配位置.md","hash":"60a985ab2e89ce1ed30aaeac352234f348dd3dc0","modified":1600065386016},{"_id":"source/_posts/正则表达式：基础方法.md","hash":"a6a31bde87d7330e9708bc03517ab976bd872b07","modified":1600065386016},{"_id":"source/_posts/浏览器渲染过程.md","hash":"8efab0601608afa80e0bf955a686523cf61aeef9","modified":1600065386017},{"_id":"source/_posts/生活.md","hash":"bd81e013a2672f6908cdb69f062fd8629e882983","modified":1600065386017},{"_id":"source/_posts/由目录搜索想到的多叉树向二叉树的转换.md","hash":"d6458ac8266bf99d280c50bdafbd8b3a848d33f9","modified":1600065386017},{"_id":"source/_posts/移动端touch事件.md","hash":"941895e3ad41c60040fc981d77ec290c2bf83a6d","modified":1600065386018},{"_id":"source/_posts/聊聊js中的类.md","hash":"de01934fa2f7c9025b791cb348b80f73b029dfd0","modified":1600065386018},{"_id":"source/_posts/获取数组中特定值的数组.md","hash":"678da068aa068fa24f5922291b2baa56875dbd2b","modified":1600065386018},{"_id":"source/_posts/设计模式：单例模式.md","hash":"72709fa624bbb8c0660ca2990afec24257615881","modified":1600065386019},{"_id":"source/_posts/设计模式：观察者模式.md","hash":"96a675aae9284a420ec8088e5d4bc0371725ba64","modified":1600065386019},{"_id":"source/_posts/详解js中的线程，进程.md","hash":"479539b56826c38df6bb01ebc0f56e0fcf82de2e","modified":1600065386020},{"_id":"source/_posts/谈谈-window-location-对象.md","hash":"a0bf32cd57ccef7d5118de346885fdf40f01c1be","modified":1600065386020},{"_id":"source/_posts/阅读函数式编程（一）.md","hash":"1a082860b02aec075344562134b23cd314725077","modified":1600065386021},{"_id":"source/_posts/阅读函数式编程（二）.md","hash":"fbcb46bfc58abbfb4946d821531aa28b3105c8e2","modified":1600065386021},{"_id":"source/categories/index.md","hash":"98ba6b39641d0b8ebf4b6073df16435b7eca3cee","modified":1600065386021},{"_id":"source/tags/index.md","hash":"72d4fea58a13fe2a2228e1fb264c0a1e8eabbb40","modified":1600065386022},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"77a688c5dd33ba6d39493ef28c7aaf2191f22a88","modified":1554525130000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554428384000},{"_id":"themes/next/.git/config","hash":"40060afe37ce847ba4f87d86c2a40806e2e151c3","modified":1554428384000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554428384000},{"_id":"themes/next/.git/index","hash":"fe939fafb0b17328196abc5e11ee3559e24722fd","modified":1554525130000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1600065386053},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1600065386053},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1600065386053},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1600065386054},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1600065386054},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1600065386054},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1600065386054},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1600065386054},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1600065386055},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1600065386055},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1600065386055},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1600065386055},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1600065386055},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1600065386055},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1600065386055},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1600065386056},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1600065386056},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1600065386068},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1600065386069},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1600065386069},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1600065386069},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1600065386069},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1600065386069},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1600065386069},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1600065386070},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1600065386070},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1600065386137},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1600065386137},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1600065386137},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386094},{"_id":"source/_posts/base64/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiVg8Od2s3kAhVt8HMBHf5kBKUQjRx6BAgBEAQ&url=https%3A%2F%2Fwww.sparkfun.com%2Fnews%2F2121&psig=AOvVaw0in67YrpqGf7GuI48ZJQEE&ust=1568460848436280","hash":"ce92f6d38f8f1757c9972e619124087a34b9eeb3","modified":1600065385970},{"_id":"source/_posts/js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg","hash":"873e3cb2e3eb609d09473bbe6410fc50db2da539","modified":1600065385976},{"_id":"source/_posts/nextTick in vue/1.jpg","hash":"5f1d43f50fa5918ce7e2f04c0fec25937622a26b","modified":1600065385978},{"_id":"source/_posts/node中的 events 模块/eventsPic.jpg","hash":"22f5492a94578fe46caae218d6ae792512077b38","modified":1600065385980},{"_id":"source/_posts/node中的 events 模块/image-20200803102619367.png","hash":"ca44e361a21eec51ad27e20802f5941023e1bebd","modified":1600065385981},{"_id":"source/_posts/实现machine函数/imageconsole.png","hash":"8ed745331df1d0794412c6f0c5e0b500603037cd","modified":1600065385994},{"_id":"source/_posts/实现machine函数/mechine.png","hash":"f91fd01a6212578e3c9d27498a708ce7369bc97a","modified":1600065385994},{"_id":"source/_posts/数据结构：栈和队列/image-20191002141645991.png","hash":"1a544fe737d8fa45cb5cd4c743aff879980148de","modified":1600065385997},{"_id":"source/_posts/数据结构：栈和队列/image-20191002114710061.png","hash":"e7d63da756d0bb912ff3d917ae53c07b28063c95","modified":1600065385996},{"_id":"source/_posts/数据结构：栈和队列/image-20191002141645991-9997006.png","hash":"1a544fe737d8fa45cb5cd4c743aff879980148de","modified":1600065385997},{"_id":"source/_posts/数据结构：树/image-20191003112501951.png","hash":"04525aec4f4c7903f5a854a37e86aeb36805738b","modified":1600065385998},{"_id":"source/_posts/数据结构：树/image-20191003120639803.png","hash":"7b7325790b31ec303422048fe1426b1b7914c6de","modified":1600065385998},{"_id":"source/_posts/数据结构：树/image-20191003131943353.png","hash":"dbc7c1b5f724c40ec240750a7fe788f01ee8c284","modified":1600065386000},{"_id":"source/_posts/数据结构：树/image-20191003190231702.png","hash":"a6143b697da63515b2a8fa68be0682509aa86a44","modified":1600065386001},{"_id":"source/_posts/数据结构：树/image-20191003132343485.png","hash":"ca56858400d6454aed9f092da0c98c7efab34d40","modified":1600065386000},{"_id":"source/_posts/数据结构：树/image-20191003190415734.png","hash":"e8abd403264919e26fb6c9240afaa03214ee5228","modified":1600065386002},{"_id":"source/_posts/数据结构：树/image-20191003190824306.png","hash":"44e5e5b27b0c6b6d4d96caeb4ecba4a581bc7076","modified":1600065386002},{"_id":"source/_posts/数据结构：树/image-20191003190805122.png","hash":"566fa4eadbd6e72db74ed16b88c561212486c814","modified":1600065386002},{"_id":"source/_posts/数据结构：树/image-20191003191644018.png","hash":"e25df3d772c1500d2b54ab78f94c15129b5755f4","modified":1600065386004},{"_id":"source/_posts/数据结构：树/image-20191003191659327.png","hash":"e25df3d772c1500d2b54ab78f94c15129b5755f4","modified":1600065386004},{"_id":"source/_posts/数据结构：树/image-20191003191435274.png","hash":"539d1de72ad32a20b8193af551b39bffe04f0c6b","modified":1600065386003},{"_id":"source/_posts/数据结构：树/image-20191003131750956.png","hash":"c71b16ac03a41fef654112bc35f96638cf6088a7","modified":1600065386000},{"_id":"source/_posts/数据结构：树/image-20191014162511259-1041511.png","hash":"7d9aed99ba7eb83433f5536b83f55477b865c1a0","modified":1600065386006},{"_id":"source/_posts/数据结构：树/image-20191012122817189-0854497.png","hash":"ed4c5f119678c749303542cf671e5bbf6e0090f2","modified":1600065386005},{"_id":"source/_posts/数据结构：树/image-20191012122817189.png","hash":"ed4c5f119678c749303542cf671e5bbf6e0090f2","modified":1600065386005},{"_id":"source/_posts/数据结构：树/image-20191014162511259.png","hash":"7d9aed99ba7eb83433f5536b83f55477b865c1a0","modified":1600065386006},{"_id":"source/_posts/数据结构：树/image-20191014163237408.png","hash":"b721a0c293a54eb554f2682a40cc4531ef16b7eb","modified":1600065386007},{"_id":"source/_posts/数据结构：树/image-20191014163237408-1041957.png","hash":"b721a0c293a54eb554f2682a40cc4531ef16b7eb","modified":1600065386006},{"_id":"source/_posts/数据结构：线性表/image-20190921211634571-9071794.png","hash":"628d19747037f4166e8860f69d1823dd33bb5cac","modified":1600065386009},{"_id":"source/_posts/数据结构：线性表/image-20190921203850921-9069530.png","hash":"5708c04f153851f73fbbcc17ccc18db6ccacc749","modified":1600065386008},{"_id":"source/_posts/数据结构：线性表/image-20190921203850921.png","hash":"5708c04f153851f73fbbcc17ccc18db6ccacc749","modified":1600065386008},{"_id":"source/_posts/数据结构：线性表/image-20190921211634571.png","hash":"628d19747037f4166e8860f69d1823dd33bb5cac","modified":1600065386009},{"_id":"source/_posts/数据结构：线性表/image-20190921211723626-9071843.png","hash":"610e5bb0e831e9f81284611257f32604a5b57e0c","modified":1600065386009},{"_id":"source/_posts/数据结构：线性表/image-20190921211723626.png","hash":"610e5bb0e831e9f81284611257f32604a5b57e0c","modified":1600065386010},{"_id":"source/_posts/数据结构：线性表/image-20190921230012405-9078012.png","hash":"38c5f3b0cc5d5e52e431fb876eb3004a38ea5f71","modified":1600065386010},{"_id":"source/_posts/数据结构：线性表/image-20190921230012405.png","hash":"38c5f3b0cc5d5e52e431fb876eb3004a38ea5f71","modified":1600065386011},{"_id":"source/_posts/数据结构：线性表/image-20190921231032685-9078632.png","hash":"472909272f89607bca6d025fae1f3987d4d35244","modified":1600065386011},{"_id":"source/_posts/数据结构：线性表/image-20190921231032685.png","hash":"472909272f89607bca6d025fae1f3987d4d35244","modified":1600065386011},{"_id":"source/_posts/数据结构：线性表/image-20190922101043201-9118243.png","hash":"ba72fcbdf84e82e4c55c8b812f3f942ad9274037","modified":1600065386012},{"_id":"source/_posts/数据结构：线性表/image-20190922101526386-9118526.png","hash":"456cd2f2309d08d82098c37d89368af8b36f74ab","modified":1600065386012},{"_id":"source/_posts/数据结构：线性表/image-20190922101526386.png","hash":"456cd2f2309d08d82098c37d89368af8b36f74ab","modified":1600065386013},{"_id":"source/_posts/数据结构：线性表/image-20190922101043201.png","hash":"ba72fcbdf84e82e4c55c8b812f3f942ad9274037","modified":1600065386012},{"_id":"source/_posts/数据结构：线性表/image-20190922102047839-9118847.png","hash":"a43371500b7d76e4ddda83534371f374ab7bea50","modified":1600065386013},{"_id":"source/_posts/数据结构：线性表/image-20190923224009682-9249609.png","hash":"ac4df00be425b328c3ea1822dec0731bda33d516","modified":1600065386014},{"_id":"source/_posts/数据结构：线性表/image-20190922102047839.png","hash":"a43371500b7d76e4ddda83534371f374ab7bea50","modified":1600065386013},{"_id":"source/_posts/数据结构：线性表/image-20190923224009682.png","hash":"ac4df00be425b328c3ea1822dec0731bda33d516","modified":1600065386014},{"_id":"source/_posts/数据结构：线性表/image-20190923224650271-9250010.png","hash":"af1072310cd4b1492b6afc4dc9158da558587704","modified":1600065386014},{"_id":"source/_posts/数据结构：线性表/image-20190923224650271.png","hash":"af1072310cd4b1492b6afc4dc9158da558587704","modified":1600065386014},{"_id":"source/_posts/数据结构：线性表/image-顺序表.jpg","hash":"b715f5a0bd3bec21b77659c054a3e3426d885410","modified":1600065386015},{"_id":"source/_posts/正则表达式：基础方法/replace.jpg","hash":"0359e058a08b5d36445c500ebb9af433f6239101","modified":1600065386016},{"_id":"source/_posts/正则表达式：基础方法/vueCodeReplace1.jpg","hash":"0dccf5e2f049a17835a21a23f1c47c85a01d4fd7","modified":1600065386017},{"_id":"source/_posts/设计模式：观察者模式/observer.jpg","hash":"b0ea79107c31059dc35a65052c017e81ece3119b","modified":1600065386019},{"_id":"source/_posts/设计模式：观察者模式/vue.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1600065386020},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554428384000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554428384000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554428384000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554428384000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554428384000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554428384000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554428384000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554428384000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554428384000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554428384000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554428384000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1554428384000},{"_id":"themes/next/.git/logs/HEAD","hash":"285384ddb77f51722e30ecd51286fb57ab537ee8","modified":1554525130000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1600065386056},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1600065386056},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1600065386057},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1600065386057},{"_id":"themes/next/layout/_macro/post.swig","hash":"80ff1ab79dbec9a5c845dfd62ce87cbb21266522","modified":1600065386057},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1600065386057},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1600065386057},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1600065386057},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1600065386057},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1600065386058},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1600065386058},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1600065386058},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1600065386059},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1600065386059},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1600065386059},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1600065386061},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1600065386061},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1600065386062},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1600065386066},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1600065386066},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1600065386066},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1600065386066},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1600065386067},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1600065386067},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1600065386067},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1600065386094},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1600065386071},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1600065386071},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1600065386071},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1600065386071},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1600065386071},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1600065386071},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1600065386072},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1600065386072},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1600065386072},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1600065386094},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1600065386095},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1600065386095},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1600065386098},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1600065386098},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1600065386098},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1600065386099},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1600065386099},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1600065386099},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1600065386100},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1600065386100},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1600065386100},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1600065386100},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1600065386100},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1600065386100},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1600065386100},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1600065386100},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1600065386101},{"_id":"source/_posts/base64/ascii.png","hash":"5ec115dbe22e61373b51c6ae07d21b09b831cf9d","modified":1600065385967},{"_id":"source/_posts/encode & decode/replaceFn.png","hash":"1b5a4233d16bcd7ca336edbaaabe085e17e4c608","modified":1600065385972},{"_id":"source/_posts/vue 源码：utils 函数/code.png","hash":"20e1a1dc70c17d63f231e7ded13ec44c088bf497","modified":1600065385988},{"_id":"source/_posts/watch in vue/image-20190514150916088.png","hash":"f70a1201aee168d90a3377ecf4d3e554973b1a12","modified":1600065385990},{"_id":"source/_posts/数据结构：栈和队列/image-20191002114710061-9988030.png","hash":"e7d63da756d0bb912ff3d917ae53c07b28063c95","modified":1600065385996},{"_id":"source/_posts/数据结构：树/image-20191003132738591.png","hash":"c91089c558d94e9a7ebf2e69d0daed93c3b0e1e0","modified":1600065386001},{"_id":"source/_posts/数据结构：树/image-20191003191127941.png","hash":"caa531e4255afea1168ef9c29a0cf852d417e0eb","modified":1600065386003},{"_id":"source/_posts/数据结构：树/image-20191003120919003.png","hash":"717963337b3712ae193466636bc3311bfed119cd","modified":1600065385999},{"_id":"source/_posts/数据结构：树/image-20191003131535048.png","hash":"c8f51b8fcf53774df7ad625c5561332c1eddb67f","modified":1600065386000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386061},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386062},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386088},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386088},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386088},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386093},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600065386094},{"_id":"source/_posts/base64/base64.jpg","hash":"b690ad48f65a7dde0fbb2da5c0b5d2a49b546f98","modified":1600065385968},{"_id":"themes/next/.git/objects/00/06016d4271160dd06319bd5f89154eca5b27b2","hash":"ac5474869b4bacf2717a485b9eb3a57c27d24b02","modified":1554525130000},{"_id":"themes/next/.git/objects/00/7a6bf1cd0051c904d7491c5ef40276e1e91115","hash":"2072ccd9425fdec1958c0f7c5718ad463207778a","modified":1554525130000},{"_id":"themes/next/.git/refs/heads/master","hash":"9c7169e3f77936ec7051b03a47fc725de482b833","modified":1554525130000},{"_id":"themes/next/.git/objects/01/0747229a1e9ada0f50cfccf1d0d7489fb63a5d","hash":"ba7daf274ad4742d6228ff0ba4771a5cd7b2505b","modified":1554428537000},{"_id":"themes/next/.git/objects/00/c4953744042b452b4646aa3ff28f0ea37eb367","hash":"a10cc7c12ecf83fe2b2c8e3f26aa7284623755b8","modified":1554525130000},{"_id":"themes/next/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1554428537000},{"_id":"themes/next/.git/objects/03/8a8b017f6e19dcd1a501ed37251bff154b2dc7","hash":"30444e6cf9501177fcff34ef2904c1257a8b7b4e","modified":1554428537000},{"_id":"themes/next/.git/objects/03/e2ff7672ab1045a72fb431890ec889163cc4d8","hash":"b979f520563a325d805ebaa39c7040cf0992d5a8","modified":1554525130000},{"_id":"themes/next/.git/objects/02/ada816ceb1639625bedb3274e85be105d17912","hash":"59f81604a03552fce40770950b46f1a23c136ac9","modified":1554525130000},{"_id":"themes/next/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1554428537000},{"_id":"themes/next/.git/objects/01/f7f8af0ae9b56853286db99a220d4ba9a46a41","hash":"f5a304554f6976ffe5aa2e84eb2927bb4efa4d84","modified":1554428537000},{"_id":"themes/next/.git/objects/06/9504f9723ab5a6e636938654ac4a23624d7c40","hash":"17e26e34e9eb19703eb23910aae22e46190f10ee","modified":1554428537000},{"_id":"themes/next/.git/objects/07/4895dc45b21455a0cc5bdf9229e6d75e70853a","hash":"c99fdaa190b8153981a0003767c76b7c82411948","modified":1554428537000},{"_id":"themes/next/.git/objects/07/872072704114b91681e2e6f9697ce1521b64d2","hash":"e1e853424fa012a1c0eb1cba9da3f0916b80538a","modified":1554428537000},{"_id":"themes/next/.git/objects/08/67ab931de579eb0d4cc95a6afd5d6c6ff8a2bb","hash":"fc35b5090d7064ef44624421f97f067bffb9887e","modified":1554428537000},{"_id":"themes/next/.git/objects/0a/352bcc8ebb35ff47aed3751ab22ff06fb36d6d","hash":"b475c53ed318c6f2ecf4956cfef550c289fe007d","modified":1554428537000},{"_id":"themes/next/.git/objects/08/dc358e4c09230d6b8506d787d72b26761509eb","hash":"b820388a5dcf87af6b8b5e1460bc0ae7869f2d21","modified":1554525130000},{"_id":"themes/next/.git/objects/0c/55acb8e7669ae6b3948d21857d1c4fd115d6f5","hash":"5e3ec2d32761a296efcf526f4e982bea25a9771a","modified":1554525129000},{"_id":"themes/next/.git/objects/0e/6e4267e15126f2f9c174b307f6466e662cc589","hash":"e4f06c0ee0b07817f3868e871904eef0e78f6a08","modified":1554428537000},{"_id":"themes/next/.git/objects/0f/ed2d787ce3f960ddf070a20b6ab31d064f64ff","hash":"eee8d29799585952787666744b83c48f1f51ce42","modified":1554525130000},{"_id":"themes/next/.git/objects/10/c1eb6e1777954207b4da55e7537c7402272713","hash":"5c2e7198e06e31fdd212fe2dc05760d8dd3ca4bf","modified":1554428537000},{"_id":"themes/next/.git/objects/0e/787f794819cb52a465ec2b668946f55f358e10","hash":"84c59d45f9338e5e8fd6eb040e04fca99078c845","modified":1554428537000},{"_id":"themes/next/.git/objects/0e/81fe4d05a9b729cbd7a8fdb47aba054ead2c46","hash":"001e3965d4c66536ff2338dba6d00cde3312333b","modified":1554428537000},{"_id":"themes/next/.git/objects/0b/f8716848c21ea36361271fa3693afb7b051df5","hash":"baec4c1a8c8f7a2a3d23fe901b5f085d284238f6","modified":1554428537000},{"_id":"themes/next/.git/objects/11/59864fbd45f8ef1c1864425a92c22b54fb178c","hash":"061cb3c573206c18b6e0248ab5ac769ac9fea37c","modified":1554428537000},{"_id":"themes/next/.git/objects/12/c0bae253df0eb2b20b7c88e7cb1b93935b4610","hash":"73a45cf75d95853a361e9fd38ea239758c53946f","modified":1554428537000},{"_id":"themes/next/.git/objects/11/2917917ecde60b65c9b7edf9946ad0dfd39c1a","hash":"fb4c14d1b9a4b65be80ce7603d2a9f77b2a54a5d","modified":1554428537000},{"_id":"themes/next/.git/objects/11/a3d39a0dcbb2f0c95f6aaf1795c708bb541b54","hash":"4f66596e23350369171578db7cad377387d881cb","modified":1554428537000},{"_id":"themes/next/.git/objects/11/ae578362d5d97179712065ce64f83f07101fea","hash":"5d7343ae6596c53056e77c7608ca196f03e8aac6","modified":1554428537000},{"_id":"themes/next/.git/objects/14/ac7172f4dc29d965ece7306047f8f7aa784274","hash":"751c1ea96446c45dd7fc53389f1d77c88c4baefa","modified":1554428537000},{"_id":"themes/next/.git/objects/14/a16cad3e0722952bae78768f4ef457dbfb4c0d","hash":"d3484d2946700bb7de29d20018611dee1277d5f6","modified":1554428537000},{"_id":"themes/next/.git/objects/18/94d2466d5c26ea004c5527c664426295ced116","hash":"4954294f84e525a0c7cbb731ac500e68eba85179","modified":1554428537000},{"_id":"themes/next/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1554428537000},{"_id":"themes/next/.git/objects/18/ec9334adfc4c52a350e6254bea3ed613da3e8e","hash":"e18b4d0f9731c888e7a8a734c2aad2d405960456","modified":1554428537000},{"_id":"themes/next/.git/objects/1a/2f6598bdc5fc0bba0e14cb4d9313b05f5f1edd","hash":"91f43c83ac9fac2b702821fd25b93306516b5d9f","modified":1554428537000},{"_id":"themes/next/.git/objects/1a/69f3d2cf3a42c2d0f53ba92227e60c89a592d3","hash":"98e555ead5f708fa660eedc9f983d6a3682c859a","modified":1554525130000},{"_id":"themes/next/.git/objects/1a/e463a7da37d18ceaa09cf67dcc1310e0eb7cc2","hash":"5ca7b67946b8e4b0a730f7f2ef7939c7db41e675","modified":1554428537000},{"_id":"themes/next/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1554428537000},{"_id":"themes/next/.git/objects/1b/b7068cf441f5e7a12396d9350dbf64a6c1a855","hash":"e7395d080bb83be792300371a2ae5b2a3454b71f","modified":1554525130000},{"_id":"themes/next/.git/objects/1b/87af5f14cf54a1d133c3a1671d4a56c0af0d50","hash":"d7286226cfb2ad17e2ff9c4a06cd754fa8925a11","modified":1554428537000},{"_id":"themes/next/.git/objects/1d/46c266906e2067b06b4d39cce9cdd4994ac226","hash":"a4a2719cd33520789d01caa160689a005fa6746f","modified":1554428537000},{"_id":"themes/next/.git/objects/1d/0437aefdbb848e3b0f500bf0e319b993786977","hash":"acad9da4d95e9e77601523c061989b4aae4890e4","modified":1554428537000},{"_id":"themes/next/.git/objects/1b/fb0a5b1145e1e3f972015fe03ebf2246d46dff","hash":"09bc444d4712053bba385d729fa575f07e31953f","modified":1554525129000},{"_id":"themes/next/.git/objects/19/1fbfdaa426dd0fbbb8f1a0106caef2d6aa97df","hash":"c9de5100498b2b67d88ef28df8c53db6fa2f2651","modified":1554428537000},{"_id":"themes/next/.git/objects/1e/03db6875d0fe7e643e3c70dd8522fcb1eaf5bf","hash":"518eec6115336edbfb00255f3b68e1aa13b91a05","modified":1554428537000},{"_id":"themes/next/.git/objects/1e/1f890dbe72e88552df0502d04d16478c27a2da","hash":"dc0172fba3621671ebccd74d6d7dfbd8fa7f65fa","modified":1554428537000},{"_id":"themes/next/.git/objects/1f/82a742adf99972ba1d422973ecfaecac055441","hash":"752b64277790ff8a1b29acd24e33ef17576201cf","modified":1554525129000},{"_id":"themes/next/.git/objects/21/986ace250d7121c6b9ee0b4459deec3b5f0f6e","hash":"75d174fd4b8ba31565d3a3a3f3e5580996cb65eb","modified":1554428537000},{"_id":"themes/next/.git/objects/21/6dfea5a11cf7bd27053bcf81019911d10e2d45","hash":"5081aeb63db6b8bc589b839e4a0f82ac6852d0b8","modified":1554428537000},{"_id":"themes/next/.git/objects/22/7e839fecc0ec722a8033728e983e684d692227","hash":"c97057ca98ab7e6934865daee69c3de54b13e0ea","modified":1554428537000},{"_id":"themes/next/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1554428537000},{"_id":"themes/next/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1554428537000},{"_id":"themes/next/.git/objects/26/fa4e4de59e2fb4290d5641658b340c79050d5b","hash":"15a5f41afb2057d40637abbdf7cd70908a1746ac","modified":1554428537000},{"_id":"themes/next/.git/objects/26/8436e4894f6a0270c177ba87fea61b2d724651","hash":"ffe565ff5094451017d5ba5491c473818cfb728c","modified":1554428537000},{"_id":"themes/next/.git/objects/2a/27dea875630eb4faa5bc8d8a9334d5b43eaffb","hash":"b52740a8e0246c4e293214ff535979be43855992","modified":1554525129000},{"_id":"themes/next/.git/objects/27/e15f0ef90cb6486c49896bb408c4f4085e490d","hash":"6f97ba9227190a6b2f037e658c9a9f7550a48906","modified":1554428537000},{"_id":"themes/next/.git/objects/2c/aae446f9ccbd8b77e35dbb150ff0c730de9af2","hash":"faff222390dfa581682f014f81766efc9488c7d5","modified":1554428537000},{"_id":"themes/next/.git/objects/2d/1088d0ded8722806509f50f4c8aa7fe2397055","hash":"4915c9b3287d68e246d9e93b96867348b1a2a5c8","modified":1554428537000},{"_id":"themes/next/.git/objects/2d/14907c6943d0f3815068a1a0ed2dc674248e82","hash":"db10c44986a8c896c5c836a0e8bd6049f56e5473","modified":1554428537000},{"_id":"themes/next/.git/objects/2d/fa3e3175c97d93b0238f49e5e9048ae4e3a95a","hash":"9dd76d111a75890f9feda9d2d436bc1eb2c45d35","modified":1554428537000},{"_id":"themes/next/.git/objects/30/b01c6427ac840bd865c0ee4b75582c410f1c0a","hash":"e00f6a011f4f78bebe2d0f50c84476b8a85ac582","modified":1554428537000},{"_id":"themes/next/.git/objects/30/b67e021f37cc606d592949d75301919fcfd60e","hash":"b479cb41d178b71c2009bfc3848e627a09542068","modified":1554428537000},{"_id":"themes/next/.git/objects/31/db88014c65791c6f90ac0bc2ec05cf357dcb42","hash":"e03e5c46b9cdc5d7dcbf2c605d398e2c5a0a6774","modified":1554428537000},{"_id":"themes/next/.git/objects/2e/8bb98e4e22fc04fec6758a723cc64ae087ad6a","hash":"f1667684f62018a70fcc33b37ae738ba4ccb110a","modified":1554428537000},{"_id":"themes/next/.git/objects/32/9ab506d72d0f5ae571b9685b91c16ad6fbfe15","hash":"070ffbcc6daa888b3283a1bc127eeffa8bc1fd5b","modified":1554428537000},{"_id":"themes/next/.git/objects/32/0aeb1d84cc96cb5538085479d5e8d13d1c55d6","hash":"7b91e93e0526bad94b10f00752c6cfa88e7577b0","modified":1554428537000},{"_id":"themes/next/.git/objects/32/5135220adb1f85b421e2af2a0459a18a37013e","hash":"17a2155f4a0fd79ab67cb5e1cafc4e3fdf7b898e","modified":1554428537000},{"_id":"themes/next/.git/objects/34/253879e21c6ce800b7cb4bceee400ce33fbe60","hash":"017bed925af4a610278c22605cac6bfb321b888f","modified":1554428537000},{"_id":"themes/next/.git/objects/34/543b17a31a8c64ace9cb6087b46d897c986d66","hash":"657a29e69d1f20d71a3422d7e454db699f87eb66","modified":1554428537000},{"_id":"themes/next/.git/objects/34/787333a66595ae0aa0b875385b17cddaec7c28","hash":"9c18cfaabd2da41034e7369af371493ae8191345","modified":1554525129000},{"_id":"themes/next/.git/objects/34/ff200bdcce6553d13597de347ab97758125bf7","hash":"3f3db6e0bfd651d49b68acc7b5ffc6e8ee1d082b","modified":1554428537000},{"_id":"themes/next/.git/objects/35/84c8a781abd6116ed585d50a4586e485491860","hash":"31d5a4a413f1a67480ea02878389be367a2e2e68","modified":1554428537000},{"_id":"themes/next/.git/objects/33/595189be97031db6536c7d8242c3a02aa1f8b9","hash":"04afd0f559d281bee0b17b00b933c69a11fa5ff3","modified":1554428537000},{"_id":"themes/next/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1554428537000},{"_id":"themes/next/.git/objects/35/d42e808f0a8017b8d52a06be2f8fec0b466a66","hash":"78537d1ed6c5d74a9db86a7c127b3d0fccb15b2f","modified":1554428537000},{"_id":"themes/next/.git/objects/35/effe878d4ec55bca6a949a1ef886fb671b67a9","hash":"92353469fec892910167fae10b80b07a820b0b4a","modified":1554428537000},{"_id":"themes/next/.git/objects/37/fe1dbc6d00f510ddd4f86da0f0a6d53a4246f9","hash":"5c386119107507b6184d11bd79a6435a227c5d04","modified":1554428537000},{"_id":"themes/next/.git/objects/38/2dbd9cddb71f14557dd07dd4bee4d199eb36e2","hash":"0be62abd44c5f70d78d527ec999b3fca9dc7aaf1","modified":1554428537000},{"_id":"themes/next/.git/objects/36/7890a4af658d073d2b79c06829337d45434b84","hash":"6668ecb7c9d769947940486cfa3fa79b548cf2db","modified":1554428537000},{"_id":"themes/next/.git/objects/39/8779e77303557735a1cffe6aeac4b9b02eac5e","hash":"49e901155563a38fdb4cb8befe481b11a1017355","modified":1554428537000},{"_id":"themes/next/.git/objects/39/aa40ed91c800ba0985bb5c1c6e5c3c51b371b9","hash":"6dbcdb6ebf32acbcd2037e68d7855d065b5fdc67","modified":1554428537000},{"_id":"themes/next/.git/objects/39/c4f20b707d65c2c3543defc53bf9f56863cc55","hash":"182d01e519499f887fbf074a368c7e35bb41ce88","modified":1554428537000},{"_id":"themes/next/.git/objects/3a/4d51a19c11843fe55a3f4920ead1ad5e6e412b","hash":"5e24fbcff2b227258c099e8dcd772dd9220f1328","modified":1554525130000},{"_id":"themes/next/.git/objects/3b/376ce317579a97b0fe78120851671e7fdc8157","hash":"30160b806f78ee0d8cdc2e81b118e4ff2d49c57a","modified":1554428537000},{"_id":"themes/next/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1554428537000},{"_id":"themes/next/.git/objects/3e/0ddc53c1ff48463ab949b17939828464e5facd","hash":"aa392999f63c5897c90949d189d254a10d7f8062","modified":1554525130000},{"_id":"themes/next/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1554428537000},{"_id":"themes/next/.git/objects/3e/a6ab54b2bfbfe8d8f070d33e17d1bb26a5c7f5","hash":"c6ce0fab3f4b411ebfcef29e602ab23e453e8abf","modified":1554525130000},{"_id":"themes/next/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1554428537000},{"_id":"themes/next/.git/objects/3f/26afdb299278921e41f06600545697d8bb8978","hash":"adec8a4b36a357c9e89a9cef272d3717c2d221c9","modified":1554428537000},{"_id":"themes/next/.git/objects/42/994d515bcf19c78fcbac53f6a075d791267e5e","hash":"51f57c00227dbcc339edd308c16624491a571fdc","modified":1554525130000},{"_id":"themes/next/.git/objects/43/9b878fcc130303c16f8debdaf37035a60b6668","hash":"b756528410464852169103436d5735404e8030b5","modified":1554525130000},{"_id":"themes/next/.git/objects/44/27c690422528e4d7a484fb614e1e23528a9afe","hash":"bb734838ac62eed2cb08623f9322e7c6eacf0d4f","modified":1554525130000},{"_id":"themes/next/.git/objects/44/7793bcc907dc738a877afe8518ac0e68b05728","hash":"f96f8f70dd139437e2e0208aa66160b9a1063c18","modified":1554428537000},{"_id":"themes/next/.git/objects/45/0a104eade0b514136be9d8b8812195b505c94c","hash":"7c533f4c9c5b0f4434160cdb9dc8fe4823a970bc","modified":1554428537000},{"_id":"themes/next/.git/objects/45/9a20dbcce4e1ecc4891b56617304db0bb5cf20","hash":"c75f73c5dd494ba4be4c00a8bf3134817dda90b8","modified":1554428537000},{"_id":"themes/next/.git/objects/47/9158b9ba41be5a26fa26b8ed879fe728e584af","hash":"9f979a69f1ba434c7128970edbeab4c3f1fa93cb","modified":1554525129000},{"_id":"themes/next/.git/objects/46/830f6f6bd37a5170127a85a89c8c7e0f62ab38","hash":"3ed5d587a8fb146c3f01af1fe37670fb49d2daf5","modified":1554525130000},{"_id":"themes/next/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1554428537000},{"_id":"themes/next/.git/objects/48/28216f238bdd9bd5a2ec70d6a65440ee679c6d","hash":"10f7b8566ce1c0a301cb3cdd71d2d08674b2f0c7","modified":1554428537000},{"_id":"themes/next/.git/objects/49/8409d9ce8750d32f21d1e80e9a25a9f0513509","hash":"f3b0a3dc15020b851559c31d72764b0826676cc7","modified":1554428537000},{"_id":"themes/next/.git/objects/49/14c5a1547aace1655e5b1ecfbd8cb65e40cc97","hash":"1648b80ea4850ee8695e92029e9b824b89f4344c","modified":1554428537000},{"_id":"themes/next/.git/objects/49/a1684f9b8d615f416eba7be97e0ca6ccf49f41","hash":"27c747f3c652fcbd9c33f203ff1a3f3ed5156420","modified":1554428537000},{"_id":"themes/next/.git/objects/4a/5fb22afc445df3fc08cbfe9e0c788d0b58d272","hash":"ec4b1d7a35f15f59f5e05b4a8a8d1566227a869a","modified":1554428537000},{"_id":"themes/next/.git/objects/4a/cd83699923c907ba9a211a2a051588324f44ed","hash":"d7b2f4e643425feb020dd1d1204dafe411ac46d9","modified":1554428537000},{"_id":"themes/next/.git/objects/4a/d0490c802338d1265934ddc4af70dba0b4c88b","hash":"25ffb3d62f7d867f2b2679d85580184f48e917ce","modified":1554428537000},{"_id":"themes/next/.git/objects/4b/1afcebfb516c4f197c7962c672d3616b2d43da","hash":"984a8d052f68e180d3fbd00f2f84d50c537b924f","modified":1554525130000},{"_id":"themes/next/.git/objects/4b/234b0d38a3cd9fef4202a88914b97f193f1273","hash":"5ec658a0eab7b237ca604f001cf0befade60820d","modified":1554428537000},{"_id":"themes/next/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1554428537000},{"_id":"themes/next/.git/objects/4c/a1b298fe02f5f812d6a4ef0f8ea9b6e2ee3aa1","hash":"55268d861444fdca341da96a368340c8ea03d4dd","modified":1554428537000},{"_id":"themes/next/.git/objects/4d/6e7e01a3ab2e6bf6452ae9a1283d7b670dac76","hash":"65fd81bb02f383b24cc4ade1dd73850d97836420","modified":1554428537000},{"_id":"themes/next/.git/objects/51/19eba656e540fcd15781c12cbe26f3bdb52dd6","hash":"4f046a05cf62a396389edd29e4cec2cdcec22599","modified":1554428537000},{"_id":"themes/next/.git/objects/51/53f958e30a457b3c02b772f10cafd13848a1bb","hash":"744cb3dd9d8aed2e9a42f39dd868a3591c04494d","modified":1554525130000},{"_id":"themes/next/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1554428537000},{"_id":"themes/next/.git/objects/52/babf0baa931f4767c2900fee312b65784a11b1","hash":"4fdefb7657d2a2decae22cbc287fc5035ca5220b","modified":1554428537000},{"_id":"themes/next/.git/objects/54/1dd2dac820f3525e08ae3273c6bce553383b1c","hash":"acdda539d18f090cf7d1624298519276c1bf86a2","modified":1554428537000},{"_id":"themes/next/.git/objects/54/0440ce89f2a408aa699b65100e18f15e0f09ca","hash":"2e363893fc6ce9c409347af769daffb3d335096f","modified":1554428537000},{"_id":"themes/next/.git/objects/54/a691f81598172c378f35c30774b0d428294d37","hash":"f0119d1e14ee480cecf273e0458ddba152315f45","modified":1554428537000},{"_id":"themes/next/.git/objects/55/b6df1540598c0a1c0a142978a0d2d688141814","hash":"a44aec003f003736c315de477e1e09d836233c02","modified":1554428537000},{"_id":"themes/next/.git/objects/57/1b407073db8ad3fa529b41b88e80e10be2f92d","hash":"3f0256f959aa200be1c8c0e2f3727567ed50f2b8","modified":1554428537000},{"_id":"themes/next/.git/objects/57/e54ddc30613fa806ef83140cf77bad1432e6c0","hash":"a58aff6eaa4ef141a1ede8276fee2e96170c444d","modified":1554428537000},{"_id":"themes/next/.git/objects/58/244c80e39818c221deba344cd0867f7fc0881e","hash":"1dd1d66392bf08f60943bb54dda0a023495cde7b","modified":1554428537000},{"_id":"themes/next/.git/objects/59/0f6f985f6018c397b2499bb49e599b7109ec06","hash":"650b4b24a81daa3b02646b7ffd5ccdac11ab6be8","modified":1554428537000},{"_id":"themes/next/.git/objects/59/6d6fe73bd693d74cf2b95d530b12e6266e7bea","hash":"a6b90cce3f32adfa2c47c8c2dec9bb9a45c70942","modified":1554525129000},{"_id":"themes/next/.git/objects/59/a64495ca928261e27cb4f49419f1f8d08ebe5a","hash":"c2c65be7552c4f52e3fdd05ebeaf06f3e4616f20","modified":1554428537000},{"_id":"themes/next/.git/objects/5b/20887d579a6d1a6aba4f77f59c14e4aaa0df49","hash":"4a6be5d7a913691c129bb4cb64eefa3dfcf9f62f","modified":1554525130000},{"_id":"themes/next/.git/objects/5d/b3d4ac2e42459be7f72b6ce88f697d42b931b4","hash":"13c3052cf9b64c5e6f396eb23556931f5fed2bbc","modified":1554428537000},{"_id":"themes/next/.git/objects/60/763a8640f1c7e3d2f839d41775806a2ad2caa7","hash":"4638b932f094d5f808eaee77b6ac71c2b57122b7","modified":1554428537000},{"_id":"themes/next/.git/objects/5e/950905b18f9c5645c4a32c8713c7998566bcba","hash":"18fcf5965b980e10b13772ff9a336c292caf63a6","modified":1554428537000},{"_id":"themes/next/.git/objects/5f/5d29df515383928fbce398de3f0dbea9e060a0","hash":"19050459605d5c52e3c5a8d297fc411c07adf948","modified":1554525129000},{"_id":"themes/next/.git/objects/5f/96b99a1e23849fc0a7ce286e71e5eed48aa08e","hash":"57c818415fe4b018c8f53c2398b9ef91d6ec5468","modified":1554428537000},{"_id":"themes/next/.git/objects/61/e1fd314678b2d7888e054538e53d6ff56f51f2","hash":"3fa005c5793fe0bcea1e05c6d72242bd6ba67a69","modified":1554525129000},{"_id":"themes/next/.git/objects/63/d294368d9e280e976902648209486ffd056a1a","hash":"0dca77e6355e04537383b9362d4f239168d16f39","modified":1554428537000},{"_id":"themes/next/.git/objects/63/5cc94fd0e35c98de8821e9eba59dae034f6dca","hash":"19525af581f172f58fe72eedcafdc82895072f6d","modified":1554428537000},{"_id":"themes/next/.git/objects/64/f2da06698f9f4d7b147b91d05144b6ae9ba20d","hash":"3815ebd066a3501ed5382be4772f78e9c9c5913a","modified":1554428537000},{"_id":"themes/next/.git/objects/63/937f7cf4339298b4bdac963f094dcef83eadda","hash":"040fec0826e38d834d9f61821f10040780c8b104","modified":1554428537000},{"_id":"themes/next/.git/objects/66/33a450dac450f702fc15118ba73959836abcc9","hash":"1612fc61ee22346e2d2b8905476bb2b6c0389528","modified":1554428537000},{"_id":"themes/next/.git/objects/66/612acd9693e72b43de0d8032caa299afbfa2fd","hash":"e48eaa91c247d06272ff0b4bd6cd753cd42cfd9d","modified":1554525130000},{"_id":"themes/next/.git/objects/66/c5e15d446316d4a6eb3539bdcfd1a103faf000","hash":"b0568b9c8b21f00a5e173602fc1a26c52fcdc57c","modified":1554525130000},{"_id":"themes/next/.git/objects/65/0d57a2cce2dd216dac87eb2c7d387dc6df5452","hash":"e55570854b0a6d27e2d157bf374b2224770d7c54","modified":1554428537000},{"_id":"themes/next/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1554428537000},{"_id":"themes/next/.git/objects/69/38779753f9ee9eae163f02c6ad5cd38b170cf1","hash":"1aacbd790febe7a75d1e24d7de787ca66e909df9","modified":1554428537000},{"_id":"themes/next/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1554428537000},{"_id":"themes/next/.git/objects/68/e7e5ef30c5e6f4063e7d954a288f8bcf5c8e2c","hash":"168ec4fe7462dafcf4127fa4b4a4905cd68cf678","modified":1554428537000},{"_id":"themes/next/.git/objects/6a/3d2aed130db952bd89a481a910d7d7088b4693","hash":"32c603671b87e3179cfe36ca3383670779280960","modified":1554428537000},{"_id":"themes/next/.git/objects/6a/ed40d5e221940eb9db7c9aaa9da61ae7855859","hash":"324c17dffff7d60a8a6199152e7636529ec0fc1b","modified":1554428537000},{"_id":"themes/next/.git/objects/6a/ed650a0e79955af24065688c040efdfb9f0485","hash":"ad0df0e958ac4fb604e4e2aa81176ab8262d16db","modified":1554525130000},{"_id":"themes/next/.git/objects/6b/540fdc3e2c177492b1b4c85952d95232d722a7","hash":"d8f91f888983e2fc5be73d876bcadc8c2fd289e4","modified":1554428537000},{"_id":"themes/next/.git/objects/6b/e489844e616ac1a444be4f09df77275e595f31","hash":"ac0f985fec9ef3d6ee24c93c0847ca0f1f80ac46","modified":1554428537000},{"_id":"themes/next/.git/objects/6d/b1ed79ba427c0977a6dbb79fdcba79e370ed3c","hash":"39348f9b177e991fe0f75621a2645cc6fa7d21dd","modified":1554428537000},{"_id":"themes/next/.git/objects/6d/b3a3c46e6e06318d288de6d5dbb00015a74b9a","hash":"fa388aa109beaad7ac8e0088efa49e7090e78128","modified":1554428537000},{"_id":"themes/next/.git/objects/6d/e3dac8f32563aedd6bd6b38f3e219a556db1a0","hash":"9b865c93ac94d5e0fcfe029b687cdbe0457956fb","modified":1554525130000},{"_id":"themes/next/.git/objects/6c/d7b2c9601a802ad675c3bb1a216f749130b72f","hash":"03989720c0cc41633cf025ab004ac3868d2e47c4","modified":1554428537000},{"_id":"themes/next/.git/objects/6e/186847abc6568a3c9ba8766bae91edd00a8eeb","hash":"32b13233622af97306bf7fc84ce79e35709a2837","modified":1554428537000},{"_id":"themes/next/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1554428537000},{"_id":"themes/next/.git/objects/6f/9f4869c43645df7a2ffdf06919e22202cfae9f","hash":"f97e1298479ac2bbd560aa674550d0ebe92deb1e","modified":1554525130000},{"_id":"themes/next/.git/objects/71/9d8249c920a95b5f1bb22f412efafe9e34e43f","hash":"3ab68cecf204071f3770b559b6d283eee2299b18","modified":1554525129000},{"_id":"themes/next/.git/objects/70/04f3c8d2149ef5045a94bfbc496fc15883c637","hash":"c16c048b770731d27faa5f29455142db92995b6e","modified":1554525130000},{"_id":"themes/next/.git/objects/72/1b2c8060dd3effcb93af3f31e6789373562a43","hash":"4eac201ca3d04b6edf156581725ddcd233071c7a","modified":1554428537000},{"_id":"themes/next/.git/objects/73/2e0c14ba916e9566fdf88dce57c72dc6997b80","hash":"f493c4e786782dcfe6c897c6ad1c1a84f37f4c7e","modified":1554428537000},{"_id":"themes/next/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1554428537000},{"_id":"themes/next/.git/objects/73/c10dc064ab67cacf0ca19d2075e84783f21e77","hash":"91b12a4995f0dae1cc4c67bf739b9d94e713a268","modified":1554525130000},{"_id":"themes/next/.git/objects/73/37e18235a9ead9c8c93b3d67cdf96035e3921c","hash":"1e2c688f9044c2bc0c75f50f32fe1c59f3cbd20b","modified":1554428537000},{"_id":"themes/next/.git/objects/73/d8e4b74bb35061da156256c8f066b441718c90","hash":"0009068938afceb7180d541fbca328fa13ab6951","modified":1554428537000},{"_id":"themes/next/.git/objects/73/f23a3987098ca7ccff61b3205982fbebcd21a0","hash":"833d764f071720620175154bf4d60f47ca017796","modified":1554525130000},{"_id":"themes/next/.git/objects/74/5cfd202847e909084561385fa815aac331232c","hash":"b11b1cd64f1ed12bb5dd290c156b4e4607a17145","modified":1554525129000},{"_id":"themes/next/.git/objects/74/93c75f2b2ccf04f46d037dd824f265566a1174","hash":"5d3b344842f6ce8a3f91478fe644d0177839b8f4","modified":1554428537000},{"_id":"themes/next/.git/objects/74/c77e32973c0945b453697c50b51fd4b50f9804","hash":"dfe2bc325df1fb9416e5515576a2068b1262390e","modified":1554428537000},{"_id":"themes/next/.git/objects/73/f757843855f1eb0b23d8c81a8fb7f001989b66","hash":"84152c7efd120a5c51a8a60cea9cc39616f6ad1a","modified":1554428537000},{"_id":"themes/next/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1554428537000},{"_id":"themes/next/.git/objects/76/8ee613945f9c4b465b9b4cfe40134fcee613ad","hash":"936f65bc896093c2fd67c757a8ad0b888451acf8","modified":1554428537000},{"_id":"themes/next/.git/objects/77/1264651f5536ab0a380df37fea85241695bdac","hash":"5b7966d000314843df9b4bb58b12090b65663526","modified":1554428537000},{"_id":"themes/next/.git/objects/78/ae38eecb42d382a66e6bf3a5956465cca08969","hash":"1a17e7fe28c0ec28ccf2f015d5936cf0b20b323b","modified":1554428537000},{"_id":"themes/next/.git/objects/7b/5a2918763fda3c78122c7944ca84b7d458b212","hash":"1095a6548c8216df4f589db48d513a1253851ec2","modified":1554428537000},{"_id":"themes/next/.git/objects/7d/047f4db2eab08a840d263ac86eb2115664b4f4","hash":"9e144d04167bc6c5f8c9110b3237a87a2ba2082a","modified":1554428537000},{"_id":"themes/next/.git/objects/7e/feee9e23e71ca323f11f9ea35d56c5ed342114","hash":"b88e9c493fceaf87c3d72f31d39ce017b1c66c1f","modified":1554525130000},{"_id":"themes/next/.git/objects/7f/cb66865f17f48724f76a3371db29150019c6eb","hash":"520885ca1f2f4119d943d729ebba67dca82eb862","modified":1554525129000},{"_id":"themes/next/.git/objects/80/13f263db0e7db06cf67483aafe12b1968140b1","hash":"ce8bc006c1bd693ce7f0c00cd81961e3727bdf1e","modified":1554428537000},{"_id":"themes/next/.git/objects/80/d80128b1c21d6529458fdca361dfcfbc655767","hash":"78ca8eb3f4bbf20e5a3e1d6fa430829f01ec7250","modified":1554525129000},{"_id":"themes/next/.git/objects/81/75daab081114c93aed8d7e106cbbafeb896da3","hash":"10f336d87203f58f396930b24339e4e2e000a33f","modified":1554428537000},{"_id":"themes/next/.git/objects/81/c6f31ea4b8d36d19133c690c0701c240200e7e","hash":"0345b9520587fed41046ae057b90a60bb4552143","modified":1554428537000},{"_id":"themes/next/.git/objects/81/d5d74613a1845a017be00edaed5990f8526d2f","hash":"1e365430270ae5936b200d0c2e3dcdf36e6cce28","modified":1554428537000},{"_id":"themes/next/.git/objects/82/7463050066b74b1b95fa4098042df4b33b3849","hash":"f391502a47053e4fb1c17269c4b9cba4efc6f850","modified":1554428537000},{"_id":"themes/next/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1554428537000},{"_id":"themes/next/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1554428537000},{"_id":"themes/next/.git/objects/82/9c524e9fbe5e35b2d1d5680988ed4d873cebdd","hash":"091a80e3365eb3538353b9fe318438c45ab9573b","modified":1554525130000},{"_id":"themes/next/.git/objects/85/f43cf9a6e1fdee63618683f157cb6237c0de43","hash":"f894c7df2c6a8062f5721d5fddbbdc06b5d110ba","modified":1554428537000},{"_id":"themes/next/.git/objects/83/ad7bdc32c370f90eb52c933b092731740935d2","hash":"7fee66caabbe85a723eb633b2a7431ae9f6af90e","modified":1554428537000},{"_id":"themes/next/.git/objects/83/d083dd770c94ee238774e2df508094ff5cc3a1","hash":"dc212df6983111482746a310bf37147cdcfa142b","modified":1554428537000},{"_id":"themes/next/.git/objects/83/f51d044ca29455945f8def1e71759ad45112b1","hash":"167107a699dfcf59af1be032840a7082b224c12d","modified":1554428537000},{"_id":"themes/next/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1554428537000},{"_id":"themes/next/.git/objects/86/a0d1d33bc2ae8a0416ebba67d1bbb60aa29c38","hash":"bd43c9c09391d16195ff79338cbe5fd36f6a53f3","modified":1554428537000},{"_id":"themes/next/.git/objects/86/c3d4aeba88b97f37cd9f6b70bf2d57a7a21826","hash":"fff2a0379207fb85c1508fc1c63bed957c294202","modified":1554525130000},{"_id":"themes/next/.git/objects/89/4981bf95ba70b780d5d719bd807e3846e14377","hash":"63388f760a8bedae60a1bdb031d5664afa6d65a1","modified":1554525130000},{"_id":"themes/next/.git/objects/89/db7b4bcc2e6350572a0cbdbecd8f5936e0fb7b","hash":"21db4d659af11f62b3425d98d660d79d77b9986a","modified":1554428537000},{"_id":"themes/next/.git/objects/87/0694530b1f12ac6d6c5c03dac2d3ace06c9b9a","hash":"bcd72bd22ab1d953b73f1fc48886b82e1f7bb2d8","modified":1554428537000},{"_id":"themes/next/.git/objects/87/6e12e7bb1cc41c298a41cb56f887d23195c2ba","hash":"61035d3d8a0a4771bfb4d68f6bca6e01dbd70f22","modified":1554428537000},{"_id":"themes/next/.git/objects/8a/1363d68461b9ff77b43c4778a46e84731ada16","hash":"2aef0230cf3eed0a90b78e1422fd1f70d40df5aa","modified":1554428537000},{"_id":"themes/next/.git/objects/8a/905e47580f198ea0308088edc8efcd749a06cc","hash":"92d31778266ed27dcdefbe51e7064e1df6a8b75f","modified":1554428537000},{"_id":"themes/next/.git/objects/8d/44b4eea88754b8a8649266fc3a9a6f0b15a164","hash":"9d1087af080f0964881eadc55ebf4943d538713a","modified":1554525130000},{"_id":"themes/next/.git/objects/8c/04ec7f07659076d3da5b0aafed1188af7746de","hash":"f3ab408b7b3a5bc185e2738cbd74c67d22e69b7f","modified":1554428537000},{"_id":"themes/next/.git/objects/8c/4e1dbd9da755a1d00a4d8a8995419b33208b3a","hash":"265514d41568d513dabee1e3c7ac70359d6865d4","modified":1554525130000},{"_id":"themes/next/.git/objects/8d/e10902c36fa0e2d988fd7b58f9294c9b978606","hash":"7ffeef7a5134260da356dd7e7526e35dbfa334eb","modified":1554428537000},{"_id":"themes/next/.git/objects/8c/6d8a5b97202630cc871671670ec7fe92e5f21b","hash":"4c44ef3fd196e105ed8d76475dcfc3b2ccb47b27","modified":1554428537000},{"_id":"themes/next/.git/objects/8c/74a69c2b12edaf026bf63c807517dbdb5a0602","hash":"8db47caee123eb2bfbc610e2b4ad5b3d3122fd8d","modified":1554428537000},{"_id":"themes/next/.git/objects/8e/3aa72c96d015c6e61652783b498f515650daa9","hash":"f640830c85857721fcb5660f64f7ae421fbefeae","modified":1554428537000},{"_id":"themes/next/.git/objects/8e/a7708790e861c6570468d949c8e1a2ec605940","hash":"a08cdbaccbb37e252a938bfe4ab1e40473c40c81","modified":1554525130000},{"_id":"themes/next/.git/objects/8e/ad36ee012cf53e0b2a81dd3c63e841a3236f47","hash":"a31222f4ad98eb61d34ee74b9c95be8c7e69a69c","modified":1554428537000},{"_id":"themes/next/.git/objects/8e/fcf2c7ffc62430d171721b2491b46adeec89f5","hash":"2b91800288bb3329723a7729eae11baacfe65f85","modified":1554525129000},{"_id":"themes/next/.git/objects/8b/137891791fe96927ad78e64b0aad7bded08bdc","hash":"f946f0b86718bcb3fc14465917bc2bf116e0c8ff","modified":1554428537000},{"_id":"themes/next/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1554428537000},{"_id":"themes/next/.git/objects/8f/1229a56595e6835421be8872ddce6fb4b53639","hash":"010ecb0057838e2560e6d808c5779dc8e5e8508c","modified":1554428537000},{"_id":"themes/next/.git/objects/8f/b3b04923e10c2527b2db12e3c2441834c97651","hash":"2fa7f80a59a4ab9204a398f7ec0f620dcd7fa70c","modified":1554428537000},{"_id":"themes/next/.git/objects/90/0b8fd94b01a40e788d614926b91d919b640ae9","hash":"936d7cea6bb5e52f97d08201004b278300ab67cb","modified":1554525129000},{"_id":"themes/next/.git/objects/90/1a9cef4a9e19849c5dfe0a2799a49bd7484c6c","hash":"03ddfa896a3edb20bca8f0275e3e09f5d5912b67","modified":1554428537000},{"_id":"themes/next/.git/objects/91/3a8fc9023f1a200702fe80860a71e16efe06d9","hash":"ca6a3edd84cc6176b3c929a9acaaec94c6e2f39e","modified":1554428537000},{"_id":"themes/next/.git/objects/92/05aeb09fffa6b571b4c6beee30b18400829c03","hash":"7108489bba664f36612804a465c2910a6efe85a8","modified":1554428537000},{"_id":"themes/next/.git/objects/92/9d3c446aba8ac3a7854bca3fa99071ec0f1b0a","hash":"324298d9a7b50c2a0640053f01aeaa53e8d1a7ca","modified":1554428537000},{"_id":"themes/next/.git/objects/93/c52583958110aa505c247db5d68fe8fae4c735","hash":"74c5849b4f017f32f88e3e131263811d56e1af3c","modified":1554428537000},{"_id":"themes/next/.git/objects/95/dd34dc4c939a7d456aa9f78a292cccbe2a3ef5","hash":"280e3c69ddc4dfe1f2b764469815c0764f26790b","modified":1554428537000},{"_id":"themes/next/.git/objects/96/0fef6868dc54d23f83934b8628265cf743dbc9","hash":"0907d179409e5d43b69080b4379f3b595a4c09bc","modified":1554428537000},{"_id":"themes/next/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1554428537000},{"_id":"themes/next/.git/objects/97/0491fab879670f6d185ee0962e2a969a80d658","hash":"5423c72eebf1154c685c6fe75c2ac3834b3d6573","modified":1554428537000},{"_id":"themes/next/.git/objects/98/9902574302a6378709709f7baab789b242ebbb","hash":"03552ed184c063d02aa69f9082dcc5c9ca7649e1","modified":1554428537000},{"_id":"themes/next/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1554428537000},{"_id":"themes/next/.git/objects/97/3eda70f1918bd58e0fe0dfb309dde6231e62bd","hash":"0e04be79ceb64c92c047284207b6d4d0542790f7","modified":1554428537000},{"_id":"themes/next/.git/objects/97/dc4cb795a3458bcaafce22bd79471242bda5db","hash":"1bee2d1c74f6c975b5511b2def29b51a85bcad14","modified":1554428537000},{"_id":"themes/next/.git/objects/97/87e2ac3681145e7f74818c5def0681e68a61c2","hash":"869b372bdfd22b5dddfab2d39646d90a5f8a24ad","modified":1554428537000},{"_id":"themes/next/.git/objects/99/0e5f212f68981cbe5b6508bcd1499830abc9f6","hash":"94f697f70c2e5c43897f8d032994ce3823d5a087","modified":1554428537000},{"_id":"themes/next/.git/objects/99/5c28a868515bbca5406dee8b20da410c946dc3","hash":"6fc1c009a917b0a6fc5bedb4c923cae830ff54c4","modified":1554428537000},{"_id":"themes/next/.git/objects/99/798717899a3f6550cef0d6f2ea472e34fe0065","hash":"b3d65fcb458515a54c8e228196a87c6081279f11","modified":1554525129000},{"_id":"themes/next/.git/objects/99/99f3981a0f624ec98a63f2bef6b59ab5a4a130","hash":"e3318de2933bd40a6b707e06d63d97a72d2a41b6","modified":1554428537000},{"_id":"themes/next/.git/objects/9a/dfb55a257735c64f586b7680545d928ff3c979","hash":"3a2ebe556d09fe6c29b26253e4ab053622370e31","modified":1554428537000},{"_id":"themes/next/.git/objects/9a/e1d8349f2971018d75714cafdb354535fe944c","hash":"61d10950ed6d8cc37fe98747852e70837c6cec7e","modified":1554428537000},{"_id":"themes/next/.git/objects/9a/f8f682849757a782087558f6fb1060ab29e10f","hash":"27e19eddf41e411efd37dab531d70af38e8f4741","modified":1554428537000},{"_id":"themes/next/.git/objects/9c/83699f2394cd767178f03d39ce89526a1cbf71","hash":"1b8da86781f4bb4fea6df4bae29dd1a567492a63","modified":1554428537000},{"_id":"themes/next/.git/objects/9e/1e1656302dddfe338effdf18f6b804c62851d1","hash":"f1260abb1cd6c18aeaaed65b6d51ca353ea310a0","modified":1554428537000},{"_id":"themes/next/.git/objects/9e/2112659b01fcfc385bd070c0d2fb1d6bbb80a8","hash":"3feb7b3c95632a29ff5ded73a26a735b366d2bd4","modified":1554428537000},{"_id":"themes/next/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1554428537000},{"_id":"themes/next/.git/objects/9b/52671663ef764fd472b6174d8324b370c44470","hash":"bd4049132ac34b9be7909e17f2c22c1f8dc79575","modified":1554428537000},{"_id":"themes/next/.git/objects/9b/f56633d4f67014d3a603d1225df0263d68b9cd","hash":"67b33ce8efa58749b63c4002c89dfc65ce5ba782","modified":1554428537000},{"_id":"themes/next/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1554428537000},{"_id":"themes/next/.git/objects/a0/0d0bb4ffa89ec02dddd8810b61bdf7f1ebb15c","hash":"a30e482282d196c0774e1ac8d59f56a7d5de93f9","modified":1554428537000},{"_id":"themes/next/.git/objects/a0/54ef009a7f68236214f4cf02c116074a5e8036","hash":"a4c8ec88b0c24518349eaa2ae9ac7e4054d39a10","modified":1554428537000},{"_id":"themes/next/.git/objects/a0/3a40c097ee728709f65d4ea7397903a389d484","hash":"260ab091942f1d6279b3933b22db30b5efcc9d50","modified":1554428537000},{"_id":"themes/next/.git/objects/a0/bb6371002f36c275d90ef0a78f4e951c1b36a4","hash":"e73b2d57d9528243fa4163d4078ff74f274aa159","modified":1554428537000},{"_id":"themes/next/.git/objects/9f/044fce4aa37703cdc7a603a8b2ee432881a730","hash":"1896a4f482c068254e8e91a0bdf69ffc92bf806b","modified":1554525130000},{"_id":"themes/next/.git/objects/a1/916490733ae0ace912e00a320bdb2a78d45ef8","hash":"ae2fb9c2d260fd37822c87cb0443de44f441fb2b","modified":1554428537000},{"_id":"themes/next/.git/objects/9f/b32a396ff5bf843ad55abd80d51a129d0b7418","hash":"fb7b5b287971dfe4638a9d6ea6f9dde1bc8bcf21","modified":1554428537000},{"_id":"themes/next/.git/objects/9f/bb0ebd58e049dc881bbd58599f54a57ef4eb52","hash":"dd16317bc071d36bc08479c7d34b0b6e4f9e9f2c","modified":1554428537000},{"_id":"themes/next/.git/objects/a2/6273af232562db60229e75809403a784e36d28","hash":"57f280327903563e205ed329a365ee91b44dc17c","modified":1554428537000},{"_id":"themes/next/.git/objects/a4/391396a9d6b6d7ff3b781f16904732fea40bdd","hash":"20fc3d5b4c6f0f72a178e61d15a8589bf475678d","modified":1554428537000},{"_id":"themes/next/.git/objects/a4/465a0bb24e30476b9e53d4c7ff86a1a6a6bbc1","hash":"a4c37f65aea2c4519401582b7d7c8301da6cd2a6","modified":1554428537000},{"_id":"themes/next/.git/objects/a5/07d27b6d34c48a4d3e7db18465c89535d83bd6","hash":"76193baa23a02106bb316598f40dc8a78065f0d4","modified":1554428537000},{"_id":"themes/next/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1554428537000},{"_id":"themes/next/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1554428537000},{"_id":"themes/next/.git/objects/a5/58349ea1cd4ed5f077e35c724025223da632b7","hash":"2f3ba852b318aaa888e52163e4d76c6695f20654","modified":1554428537000},{"_id":"themes/next/.git/objects/a5/690a30b32f8d21634399b7fc8f05d9910b7f34","hash":"f7ec96e837dfb6361468c0abcd74e7ab8f86d02e","modified":1554428537000},{"_id":"themes/next/.git/objects/a7/33bb179d59c1102d8ce023317cc489ce6a5913","hash":"08c63e1991646bb3ceac69daa25f41592ff25b31","modified":1554428537000},{"_id":"themes/next/.git/objects/a9/26804dfe94137aed3c8bdfeef5a86e97d401a7","hash":"9187bfcbbf9228b248f69a6ca85a71be92006632","modified":1554525130000},{"_id":"themes/next/.git/objects/a9/626eeff67784f009017d35d90de1926d2adda8","hash":"f67c4ea672b26e232bbdaf594dcfd1ac0e54e588","modified":1554428537000},{"_id":"themes/next/.git/objects/aa/cec972b764ada3e465a332835d00530f141ca3","hash":"82dc5273dd048b83993e8562e4b1ebbd731004ab","modified":1554525130000},{"_id":"themes/next/.git/objects/a8/2bcc2281f627006a3c80c7b630b7a32f517013","hash":"1b286c56eb27b7ee9a2fb36760d569c060e9b0eb","modified":1554428537000},{"_id":"themes/next/.git/objects/ab/c29714258049fbda0af8ce76c3b49f7316899f","hash":"2273668f999d0ca001dc04a833d7e09c9598fdf5","modified":1554428537000},{"_id":"themes/next/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1554428537000},{"_id":"themes/next/.git/objects/ae/0a6b4f50f852d87370ea9fa1bab4c225327a43","hash":"7aff36a95e2467a1f20d4a0b4efa36b64256e253","modified":1554428537000},{"_id":"themes/next/.git/objects/ac/3f7bdacbdbd777834c22994741b44239a67729","hash":"3b75cb1f32fd08dba8c299e013b67df310693ca7","modified":1554525129000},{"_id":"themes/next/.git/objects/ae/4a793aee87a10a871219a3618adda58fb723e9","hash":"e1d308449d1ac6481169340af651d44f173287a8","modified":1554525129000},{"_id":"themes/next/.git/objects/b0/f3bccaa0a6b449509e95a4331abf9bb1efbd09","hash":"5e6b69463a87a0b167cd02f9bf70ee1e51a4e16c","modified":1554428537000},{"_id":"themes/next/.git/objects/af/7ce8c839d2ac3dcaa1a8a5c5d5577ab6820418","hash":"db46af0e7aa16aecd8cef7265cda21f11afede05","modified":1554428537000},{"_id":"themes/next/.git/objects/b1/d43644195570cb46d49a756ae30d6e3546d89b","hash":"20bf9b4a325a5e7715348cc2bf110c7f22e655c0","modified":1554428537000},{"_id":"themes/next/.git/objects/b1/fec615c8dfc8ca88f128332b4cae806e304580","hash":"d20e9c3c3964a81a45f20e01f2f2ab549f90df96","modified":1554428537000},{"_id":"themes/next/.git/objects/b2/385ae3f7f588d7ade9cf835b38548431d0ad49","hash":"338ca347bd28b12e4a7c291370dcc64b08afaec0","modified":1554428537000},{"_id":"themes/next/.git/objects/b2/da2320af821a1c95fa667da8aeff4fa1064191","hash":"7e3c550b711fe3a0ecb04ba82137263d746fd42d","modified":1554428537000},{"_id":"themes/next/.git/objects/b2/da3cec2d9668d3b7cbf25194bde0b44a776b03","hash":"9c7bae521d85c08b22f982e55c9cee8f9661bb64","modified":1554428537000},{"_id":"themes/next/.git/objects/b4/f4ae8be26d92cf3ffa57ecae204bd2f64adfa0","hash":"5ac333af7c53748d9ecf73b7aab471a6ada3edcb","modified":1554428537000},{"_id":"themes/next/.git/objects/b3/868a8584401c1b8a847f34b2439eb0c70ee623","hash":"520bb499f2fd4e69b9036978ae9dd5c59895bb28","modified":1554428537000},{"_id":"themes/next/.git/objects/b6/77e6868be2396264156be6cc60de123126ff1f","hash":"993b38fcbb0d28043331944a0a833730e6e742be","modified":1554428537000},{"_id":"themes/next/.git/objects/b5/d350025065ea12653b836e2a0a3703a292d6fa","hash":"9b00789ecbf82be56f2c34b2d86f3ff043b8a831","modified":1554428537000},{"_id":"themes/next/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1554428537000},{"_id":"themes/next/.git/objects/bb/9e1d25923cd6b471a2114fd2e01fdb687f486d","hash":"23a52c4c24235573912d40a1f50e3d5c55019003","modified":1554525129000},{"_id":"themes/next/.git/objects/b8/5062ad4d2ce4457eb1d7db916d0a8d8cdfa177","hash":"115a06a80011b0faf4d5ad0761170ff1d51606c4","modified":1554428537000},{"_id":"themes/next/.git/objects/bf/3edb945c31eb8a5cb38905ad213b1de14d7b14","hash":"17c351ad78b26a8337ae0a3c6bc74957603998d7","modified":1554428537000},{"_id":"themes/next/.git/objects/bf/a26f4651e64f3fdea538af5cd4ab70ee7f98ac","hash":"0ae22a28dc869b4f29963d5923f4e47ebdc157b2","modified":1554428537000},{"_id":"themes/next/.git/objects/bf/fb73cdcb27faf6bd4ab5dabc27eabe19f9d88e","hash":"8a5eef620a7b3d5e0dbbbf5b219437c4ff7ad22f","modified":1554428537000},{"_id":"themes/next/.git/objects/c1/621ef4875413658c7e1e854d441e3f898e2422","hash":"c693f362fdc60fa785fb2304005428fffccd1fc7","modified":1554428537000},{"_id":"themes/next/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1554428537000},{"_id":"themes/next/.git/objects/c0/af16faddb99bb7bdf05760cb02dac1a193f2df","hash":"7930d11a7afc691b32410077748ad45522a064bc","modified":1554428537000},{"_id":"themes/next/.git/objects/c2/298d002a6c586656eb4c7c6a74a1f0321c99b3","hash":"1c615bf0083cebb18e234f44958d6113a03cf17e","modified":1554428537000},{"_id":"themes/next/.git/objects/c2/fab35ec675478b8f2f18995d4678005c3484c6","hash":"efb364947069b1235b1e2e168e948805d3412b43","modified":1554428537000},{"_id":"themes/next/.git/objects/c0/5b0ea09bea918883da6d9549b559a86c6ecbc7","hash":"8eb1ab0732be3ef543fe48516061714087bb1eaf","modified":1554428537000},{"_id":"themes/next/.git/objects/c3/0267ce3277647fe353ddc96935aa6874338d20","hash":"359fc8b0cde11e9ef67a16ce3b25882bc8da7db5","modified":1554525130000},{"_id":"themes/next/.git/objects/c3/73e5c4f895049c9d033df979fd3d6a2facb497","hash":"296e63c26d2b24e8f2107bd6314e73cc3368a07c","modified":1554428537000},{"_id":"themes/next/.git/objects/c3/c27c4e9b1e7431e53c83b9b97e2a367cbf4bbc","hash":"6b568fac99033cdc5b6baf320028b9626e2b26e4","modified":1554428537000},{"_id":"themes/next/.git/objects/c3/d2510b90036876d5ea2e5f0af5916811d5ed62","hash":"9dac098bfbf9ee0b9d918e1bca211f81146a8ef5","modified":1554428537000},{"_id":"themes/next/.git/objects/c6/446e73f4f2a7aaf8eafd3c9787548b10074a84","hash":"290e0c8207bd151512df06f6b2f75e2b71fa0f28","modified":1554428537000},{"_id":"themes/next/.git/objects/c6/53b812f1af6f1b422c181049db44c8383be798","hash":"fe720ad3e1295b869e3863944577d8782f914367","modified":1554428537000},{"_id":"themes/next/.git/objects/c6/c397583170762cabbcbdd69fcbea01d92d92d5","hash":"9e04e53cc68e6110e0da67399d81fa8a080c221d","modified":1554428537000},{"_id":"themes/next/.git/objects/c6/6d461ff7908fa7a4505e886f50d8d102c3dd1c","hash":"37e60fc023422b12d81160d7cd8a19105ec82dc7","modified":1554428537000},{"_id":"themes/next/.git/objects/c7/d706bde1a6464c2fa6ea06c8affec3b15fe246","hash":"a5638a9d503e30bbfd9c4f210cab0f0e2492f06a","modified":1554428537000},{"_id":"themes/next/.git/objects/c8/499b2bd4668dbb631beb3cbcec058febf10ad3","hash":"edbb98b80c14fdca6e8603062db84c9badff8ecd","modified":1554428537000},{"_id":"themes/next/.git/objects/c4/b6a06b11437dae93a1024bb9e79378bbf12f55","hash":"be8f50da022abd6f41f0affe2816bf98537e891d","modified":1554428537000},{"_id":"themes/next/.git/objects/c4/2328591c4b5037421536317d7a1c39229ffe7a","hash":"2377aa0541dc1b79fd38ffaea60f85f98f4f9198","modified":1554428537000},{"_id":"themes/next/.git/objects/c8/5ee8f506fc47a84b616eb3ba67cfa3d2f248a9","hash":"fa15965f0c70e31219b60374ada989c5285334e8","modified":1554428537000},{"_id":"themes/next/.git/objects/cc/3ef8aef6123fc09cfbe1d2cde9e630527250c4","hash":"eb5e51ddeb037f6e0e05de7760d105f32636b9e7","modified":1554525130000},{"_id":"themes/next/.git/objects/ca/64dbd048fb7c6263afd9f24d1af00a443cf791","hash":"fed423938aebc85e4bbe58d66b2b430c78f0a7f5","modified":1554428537000},{"_id":"themes/next/.git/objects/cc/57685fe1e1bacb34fe4979945fc49d5a3a47c8","hash":"760536790a6e65d3ca2d04ad305cf0d8cb7365fd","modified":1554525129000},{"_id":"themes/next/.git/objects/cb/14d04cbb3d1b6aeac7e33e4a142b8be19d0fb2","hash":"60176a820f417dfa4ba23f492eb3f689d2a6fd58","modified":1554428537000},{"_id":"themes/next/.git/objects/cb/682b44c33716d22e1b0499dc3c3215d9563c90","hash":"ba2d212776cb87456d1b04dc8053e5d711034d90","modified":1554525130000},{"_id":"themes/next/.git/objects/cb/b3937ecd20c4fb28a50e969f9a9f93d5dca1f4","hash":"d022e48b2a8d773a410f394abeab9ba9b99d47d4","modified":1554428537000},{"_id":"themes/next/.git/objects/cb/3f7da0cf2c2ef71bb4eac06029a6352808a324","hash":"6a296215fefc0c7348890ad4e6d527bdd337ef36","modified":1554525130000},{"_id":"themes/next/.git/objects/cd/a4936e38b9b238acdf4e1248a23d5d69f5e6fd","hash":"39fb853460114f3660bbb91229e420b3820184f0","modified":1554428537000},{"_id":"themes/next/.git/objects/cd/5e4fd000efe302d4505c38ec617f64cffe7962","hash":"11e900361d350a326a422f7672c7aa4595de10bc","modified":1554428537000},{"_id":"themes/next/.git/objects/ce/e31144c91d1a3e007ec5e46c7f04f83f58a80d","hash":"56aa23329a1e2cb4a4126580c35d05f232cb8346","modified":1554428537000},{"_id":"themes/next/.git/objects/ce/1461ddf61c383228f944c28bb3e1b6122f9e61","hash":"39c8cb133e898ed45f3ec52409457f5d43f1fb4c","modified":1554428537000},{"_id":"themes/next/.git/objects/cf/7659e7a8d513914b37c0b86db1b35a33aeb64f","hash":"571d2fc8dfca03f9089b306b7aa9d1353867da7b","modified":1554428537000},{"_id":"themes/next/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1554428537000},{"_id":"themes/next/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1554428537000},{"_id":"themes/next/.git/objects/cf/fcf6231c2234e72c59cbf7bdb7a8abc4ca599f","hash":"40d6ce69961fd2e37b9bd2d79e892bfe0a4cb617","modified":1554525130000},{"_id":"themes/next/.git/objects/d2/3d35d572d179a146398875a9f9aa88b5c28e1a","hash":"34b4857a338ac91198e260c0960494462ec432eb","modified":1554428537000},{"_id":"themes/next/.git/objects/d2/61d27d1d7e3d0dd0f676f779171283f1e9938d","hash":"87cbcb670e6259813a7d3def25b91d86d90404af","modified":1554525130000},{"_id":"themes/next/.git/objects/d2/b0f055d2bccc335bf86b051bd2a51b3b904def","hash":"a9c8efff5ef5f63be2566813bf633a66bd0755ec","modified":1554428537000},{"_id":"themes/next/.git/objects/d0/2c9697bc2cc8070615b6682c49bb9133537b71","hash":"9e4996d92b34bfa3bac608605e1f5e3adce1df32","modified":1554428537000},{"_id":"themes/next/.git/objects/d0/b86fdf7b2e7fc5cdeaa460a2598e38d63a6351","hash":"d8a58a6f3a7ea6f802e34d2c025a0540abd5094d","modified":1554428537000},{"_id":"themes/next/.git/objects/d0/e4779f4bed43fe339f0cf1eb045d8cb9430c87","hash":"89fdecf64fedf2cca040f73464d56ef834945733","modified":1554428537000},{"_id":"themes/next/.git/objects/d4/6298de6242694814a7a219b407adc5cbe05513","hash":"ab43c051a218156c45e9bb698570c5b8e2b93f1f","modified":1554428537000},{"_id":"themes/next/.git/objects/d4/e0e4f9b299db3a48fb1a1e5bcf14c63c52214b","hash":"c0a13f4f0a7ca35ec396eb4930bc964589f9b22d","modified":1554428537000},{"_id":"themes/next/.git/objects/d5/64d0bc3dd917926892c55e3706cc116d5b165e","hash":"63de011560d2ad048f607fa2f51395e3ee0981ef","modified":1554525130000},{"_id":"themes/next/.git/objects/d5/01fb5034b83386a0978b7415eaa498f36683a7","hash":"bf37e4971f510c6c08c4c9c503ba1b94253ff1ff","modified":1554428537000},{"_id":"themes/next/.git/objects/d7/15203ca86517a223746564fbee2a6bb310d500","hash":"88f1511a81d53957809311f2cf06554ceddba79a","modified":1554428537000},{"_id":"themes/next/.git/objects/d5/c0cde09b0bd66009adaa989e3fcf0c6d6f289a","hash":"8108821d2efe6327054932cf0e3445483731313d","modified":1554428537000},{"_id":"themes/next/.git/objects/d7/fe378902717b1d9b466ab904845bb9144bb2f5","hash":"f220ea55ab1d3179c58d8b47a57b0cd19d8c1d32","modified":1554525130000},{"_id":"themes/next/.git/objects/d8/16b2cba1e824ae78ba655a4ad6372571daf784","hash":"a6a51afde96bec10192fa8930fd6f959b4b23e93","modified":1554428537000},{"_id":"themes/next/.git/objects/d8/84845eab89ac5c6797e5b2e4ba918c9b832d8d","hash":"3f984e18ed733e30ff7893f316e3f8d010e56c26","modified":1554428537000},{"_id":"themes/next/.git/objects/d8/60cfeed5442cea3c775ab35d2cd97aeee2cc18","hash":"0d70be8397167d422826bd2c11f4f1ce4e394553","modified":1554525130000},{"_id":"themes/next/.git/objects/d8/a1552c4566e8ec5af8dcfc062f2f85d99ede97","hash":"5864819e4d446c200212f425d4e698b74f1a27e1","modified":1554525130000},{"_id":"themes/next/.git/objects/d9/c33ed0fc4a505873e0c7b6baaf0963eb6515df","hash":"11b76cdca5efea97feaa886e8713310a4b68118a","modified":1554428537000},{"_id":"themes/next/.git/objects/db/115c76abefbb8d8492a9c6a56eb412b68d88db","hash":"ae408b9d4ae2e37a91c1b55e9d4badd784a3529d","modified":1554428537000},{"_id":"themes/next/.git/objects/dd/dc1f3d202235bf29edb75ceea986e8a5daa0aa","hash":"092a31be56e81cc645d25512d72c7774242a91e2","modified":1554428537000},{"_id":"themes/next/.git/objects/db/3bb10a342cc39f226cd34cfaa6c2a2b7e17c96","hash":"7884c83e5277d1ebebc3e1ca3600cd1f428a6d40","modified":1554428537000},{"_id":"themes/next/.git/objects/db/f3e8a853d625f08bfb81f762cd08da132574f2","hash":"9d72be7446d65c9f73f8b0f793607b6140289478","modified":1554428537000},{"_id":"themes/next/.git/objects/de/693e43318c2c4fb7b51a83d28c38c662681e73","hash":"f2c9dd73e592207e5fd00518218b2da737b4f331","modified":1554428537000},{"_id":"themes/next/.git/objects/dc/d1c06713351a33d9770085a0e76c31c498d3b6","hash":"99a03655a72df0d4044c784ad2b903f0bff1b9c3","modified":1554428537000},{"_id":"themes/next/.git/objects/de/8c5d3a5f8215c3f7b095c9e284e061bda65f86","hash":"b15adc327d5c0e7234deb51721f1868e25e7984c","modified":1554428537000},{"_id":"themes/next/.git/objects/de/ecd34564277f9d086e1a854f168ca65e28550f","hash":"0854c4bd39f9930c539a2aea83f2c6a9e2ebe9f1","modified":1554525130000},{"_id":"themes/next/.git/objects/df/4e736d013bdaba293b174a008498c772471804","hash":"0dd3a3644c001d9c70c90dbbf992ad178e648450","modified":1554428537000},{"_id":"themes/next/.git/objects/df/7774be2ccfd1762968dd19aa75e809dbf73dd2","hash":"00077538882bb4e13b5fefc799e0ba477de769ba","modified":1554428537000},{"_id":"themes/next/.git/objects/df/c096202154f66e695a01be4a53068b1223264a","hash":"004f8ecf1f275e561dbb82de60da58c31d30ca64","modified":1554428537000},{"_id":"themes/next/.git/objects/e0/2f5f4d5c43e3e179083b1eb287b47e1ded6b08","hash":"6ac51942b992e414519b14cd3c21cd3176432fc9","modified":1554428537000},{"_id":"themes/next/.git/objects/e4/303252ea7ead999ccf23b4a1aa205276c9811c","hash":"9bc44de462045fe9b3b17750e2647a47358a2d9e","modified":1554428537000},{"_id":"themes/next/.git/objects/e0/4839a272af305372498d311e7dd95319fb8808","hash":"baea0e75989853f82e88529ec1ecf478d8efaed1","modified":1554525120000},{"_id":"themes/next/.git/objects/e2/e98280df8873741319cc77874758d84ba70194","hash":"c33f1d1402aaebbea0a55e0d0e8cffe53fe09976","modified":1554428537000},{"_id":"themes/next/.git/objects/e3/91116a687ac8b3bb26b47a683d8d4f637fcd3e","hash":"44b490128754e07035daa06afcaf58ade05e1672","modified":1554525130000},{"_id":"themes/next/.git/objects/e5/70ce83dffb265077a86af66099e5ba89aa8297","hash":"5b9ea55e693aecc2d79406c8f963b90838d21e3a","modified":1554428537000},{"_id":"themes/next/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391","hash":"c2baae88d6364d878fd67e778c6a5d8306ad4ab0","modified":1554428537000},{"_id":"themes/next/.git/objects/e7/e027ad8caac8e2273e377098a987ae2ba946f0","hash":"cbf9f622b0ff6de726541be1e0cb3251fd83064e","modified":1554428537000},{"_id":"themes/next/.git/objects/e8/e1987c6cbd752cf39f724e084865a85b56ac9f","hash":"3516f2621bf9d94d803163a2aeb6f3c4efc36d81","modified":1554428537000},{"_id":"themes/next/.git/objects/ea/048b9f0361f15bd92748c1671dcc0f08b49d7b","hash":"c6e0ab251c395809ddb70707c8b9a3e83a0a7e8b","modified":1554428537000},{"_id":"themes/next/.git/objects/ea/a0eae2c3f506254b623fdeedba7b872f4af189","hash":"4b88e54c7917210a812400aa0a0c2def5fcd4d17","modified":1554428537000},{"_id":"themes/next/.git/objects/eb/4102ee2ee8e164ba67f28e806adef55039ff84","hash":"3caed3c003945ac8083eb9068ad968ab7a7eff5f","modified":1554428537000},{"_id":"themes/next/.git/objects/ee/6838f3a68c923b601e479f2794a7fe7992c23a","hash":"78c993621a9f5ac5e017cec5117dc1ace9eb7334","modified":1554428537000},{"_id":"themes/next/.git/objects/ee/906a8196d0fbd581c27a9d5615db4c250860f2","hash":"befed115d962d2da4b6346309224f5d7d521fd37","modified":1554428537000},{"_id":"themes/next/.git/objects/ef/e31ec26ffd75a68fe20a33c02ef297c2cc5794","hash":"e0965a6d9b679883e0a6ccb94def9f9d031b97ae","modified":1554428537000},{"_id":"themes/next/.git/objects/ef/b6768db9d768e6c7322905ed131b4f184c23f8","hash":"05656d771b406d3d835ac54d0a2740955a6a0198","modified":1554428537000},{"_id":"themes/next/.git/objects/f0/627b937bf9cd1fe8f0d2fe0b2a8ee6ab8f7c19","hash":"be8fb5033f8a6fcb54512595a222410a57fa801d","modified":1554428537000},{"_id":"themes/next/.git/objects/f0/a4c70151adb083ad0874ac5d43082ae85f1c07","hash":"a3bf7849fe1af1d5b69a1b62c829318487a11ee4","modified":1554525129000},{"_id":"themes/next/.git/objects/f1/06aa06a2357775a633452c6d228929e0144c84","hash":"de17c9d9453c504682cd1cea91719931f85dd4e2","modified":1554428537000},{"_id":"themes/next/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1554428537000},{"_id":"themes/next/.git/objects/f1/cc7cbab7a7bae49327bda75295fa70693c3232","hash":"61733b8131422bf32f137f42a3ac84163a40d8a6","modified":1554428537000},{"_id":"themes/next/.git/objects/f2/a40490d974c5490a13e4666c5910011342bc15","hash":"7bf7171d0e4bbac291168891d9d9e28a43a223ed","modified":1554428537000},{"_id":"themes/next/.git/objects/f4/b64701571e48f0512e586ccbe6cab866c387ad","hash":"8d66b6726642397da20c0b357a0754e92d6e7527","modified":1554428537000},{"_id":"themes/next/.git/objects/f6/d3557cb51bfdb666c619709dfa1f026be4a9ee","hash":"53ebe0784748c37e083969a7719b91ed96bd496a","modified":1554525130000},{"_id":"themes/next/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1554428537000},{"_id":"themes/next/.git/objects/f5/c5c6cb8d3391fca4bf4555a935ed54af223cd8","hash":"3b87d4e2620ac9b619ae3ad225c29bc9437d811e","modified":1554428537000},{"_id":"themes/next/.git/objects/f7/e5e0de9eb9fe1c10fa772b71be2d617419cbf0","hash":"1bab10fa1717beb87cdf38df6fc614f864397a6d","modified":1554428537000},{"_id":"themes/next/.git/objects/f8/a05f7cffff695c843c0920f2e95ea785665a0b","hash":"12dec58483fadb6288dba7b14148874efd04f631","modified":1554428537000},{"_id":"themes/next/.git/objects/f7/7949909d4be6b7b5aa45996e249be31d626dc6","hash":"2f4b59df167e11ab33b55c354b259cfa4f521006","modified":1554428537000},{"_id":"themes/next/.git/objects/f9/64663d53cac1a4d3953de8ea0b88dcde0e9690","hash":"986b10f3d67a0e2f47ed0c5f39223154c341202d","modified":1554428537000},{"_id":"themes/next/.git/objects/fa/0cd4e4dabcf8422179fe2ff7aea016ba87b061","hash":"fb97d4b9fbc621513fd278fa40f353d3fd409cd7","modified":1554428537000},{"_id":"themes/next/.git/objects/fa/85838d23b46def3fad98eb732ddf9d89f3b45d","hash":"f78d569e0e104edd8714bc2a35e1ec30f205d5da","modified":1554428537000},{"_id":"themes/next/.git/objects/fb/9325919881b10240e03fd3d0e4a099a57b6071","hash":"6ab326e21f6bf0c04b9e373f9afcef1ed9128c97","modified":1554525129000},{"_id":"themes/next/.git/objects/fb/98b1d6d037c34e89dd1dabfc1e76fff0d8603a","hash":"11ab59ca616ca592e31772176903977afca0520f","modified":1554428537000},{"_id":"themes/next/.git/objects/fc/33664afad01471eddb8d0d47f1264f56235253","hash":"d2e972f6577124065e89ebf370bc34cc992d94c5","modified":1554525129000},{"_id":"themes/next/.git/objects/fc/42b713d4849030b0aad921f29b29473f2eadb3","hash":"172b08efff5aa576b627862c95b57aada5b7f336","modified":1554428537000},{"_id":"themes/next/.git/objects/fc/d78303580a9db4d06f7e58093a69b1c212b38b","hash":"be045e3c5c28b23f8df4191ce7a6780340b51dce","modified":1554428537000},{"_id":"themes/next/.git/objects/fd/0809f81c606c5828e07026571d889e58979a00","hash":"be21c8760d3cff0b3c4635bf267a4d60e07cadb9","modified":1554428537000},{"_id":"themes/next/.git/objects/fd/1569187a4bfe5ef229f64792f1f4cc00c1e2c0","hash":"7ebe65f3ae2e3894f923ff118a9e90ca38aebd7b","modified":1554428537000},{"_id":"themes/next/.git/objects/fd/865ec4ce5d0161aa1800bc9af3053752818f54","hash":"1a11a356d8283a38244e1f28a8c5650575592572","modified":1554525130000},{"_id":"themes/next/.git/objects/fd/8d5ca566d47a77d9562168617bb2f6482bf9be","hash":"93d5b016ddd99f514ae6e718357d83f14e22077a","modified":1554428537000},{"_id":"themes/next/.git/objects/fd/8b95566800f8d70399b94728d6e4ba476641f9","hash":"5794953cab53637cdd39ddd6b4f732a98cf92c57","modified":1554428537000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1600065386058},{"_id":"themes/next/.git/objects/fe/4a160d90b22b10716d745eab88f5911247350e","hash":"32468f6e17efab6af44a4bbae03e9f579a4f3b35","modified":1554428537000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1600065386058},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1600065386059},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1600065386059},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1600065386060},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1600065386060},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1600065386060},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1600065386060},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1600065386061},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1600065386061},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1600065386061},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1600065386062},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1600065386062},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1600065386062},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1600065386063},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1600065386064},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1600065386064},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1600065386064},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1600065386064},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1600065386064},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1600065386064},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1600065386065},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1600065386066},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1600065386066},{"_id":"themes/next/.git/objects/fe/9e08652d9aba310f292865f050f4fca58dc11c","hash":"9d9e76a5ec7d62502a6f701b0dda109ac37e8bb7","modified":1554428537000},{"_id":"themes/next/.git/objects/ff/1f4be005da65410f7496e30a0370e336621cb4","hash":"5517a94e9c7e40ac84961562841a5746c91c66f7","modified":1554428537000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1600065386068},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1600065386068},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1600065386068},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1600065386068},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1600065386088},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1600065386087},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1600065386088},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1600065386088},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1600065386093},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1600065386093},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1600065386093},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1600065386094},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1600065386101},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1600065386101},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1600065386101},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1600065386101},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1600065386102},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1600065386102},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1600065386102},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1600065386102},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1600065386103},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1600065386103},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1600065386103},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1600065386107},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1600065386111},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1600065386111},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1600065386111},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1600065386111},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1600065386115},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1600065386115},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1600065386115},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1600065386115},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1600065386116},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1600065386117},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1600065386117},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1600065386117},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1600065386117},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1600065386123},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1600065386124},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1600065386124},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1600065386124},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1600065386125},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1600065386125},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1600065386125},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1600065386125},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1600065386125},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1600065386126},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1600065386127},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1600065386127},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1600065386128},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1600065386128},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1600065386128},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1600065386134},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1600065386134},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1600065386136},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1600065386137},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1600065386137},{"_id":"themes/next/.git/objects/1e/6843316b3b3be83c6296e38edbcf7a1a389eaa","hash":"b85a7e69e5655a3e37e9fc6d0f7e2bacdbff58fc","modified":1554428537000},{"_id":"themes/next/.git/objects/25/714ed29ab6fcf0355da4b45ac602fac0154efb","hash":"333809419ce99e47ee80ea6c61bd6361b2dd4f6a","modified":1554428537000},{"_id":"themes/next/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1554428537000},{"_id":"themes/next/.git/objects/35/acda2fa1196aad98c2adf4378a7611dd713aa3","hash":"c57681ba2ea020d954be3f1723d4626187e66b1f","modified":1554428537000},{"_id":"themes/next/.git/objects/4d/13fc60404b91e398a37200c4a77b645cfd9586","hash":"213ccde6a68f47c08264f135847ea5a8c3c05905","modified":1554428537000},{"_id":"themes/next/.git/objects/e9/f60ca953f93e35eab4108bd414bc02ddcf3928","hash":"797a4014c9739ab8a1f5bb96e18b7062a53e2f8e","modified":1554428537000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1600065386124},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"285384ddb77f51722e30ecd51286fb57ab537ee8","modified":1554525130000},{"_id":"themes/next/.git/objects/40/0014a4b06eee3d0c0d54402a47ab2601b2862b","hash":"c145ad3ab1a3efcb1c3df4a470813b1b74ea43b8","modified":1554428537000},{"_id":"themes/next/.git/objects/40/1ec0f36e4f73b8efa40bd6f604fe80d286db70","hash":"0688cfde8cff71150bbccd59c4da4aa5f3597a08","modified":1554428537000},{"_id":"themes/next/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1554428537000},{"_id":"themes/next/.git/objects/85/5c845e538b65548118279537a04eab2ec6ef0d","hash":"cab9b55bf59bf50fe5d95610e0b53f20a7e5c1bf","modified":1554428537000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1600065386067},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1600065386067},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1600065386072},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1600065386076},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1600065386081},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1600065386086},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1600065386086},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1600065386086},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1600065386087},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1600065386087},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1600065386087},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1600065386087},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1600065386089},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1600065386089},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1600065386089},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1600065386089},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1600065386089},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1600065386090},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1600065386090},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1600065386090},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1600065386092},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1600065386092},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1600065386092},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1600065386092},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1600065386093},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1600065386093},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1600065386102},{"_id":"themes/next/source/images/avatar.jpg","hash":"828c8f220cb6a36f285d40c8449d851ad96427f8","modified":1600065386098},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1600065386107},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1600065386107},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1600065386111},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1600065386114},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1600065386114},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1600065386114},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1600065386116},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1600065386116},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1600065386117},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1600065386117},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1600065386118},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1600065386134},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1600065386134},{"_id":"source/_posts/encode & decode/操作符.jpg","hash":"f3bd8323e249fc6991d109ec22f3e0be51713ad2","modified":1600065385973},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1600065386106},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1600065386122},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1600065386123},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1600065386136},{"_id":"themes/next/.git/objects/53/a6baa2fea3079740c9479244b0ae006ddbd28b","hash":"f69beaf34a4769daa889553373afed83ee19eb07","modified":1554428537000},{"_id":"themes/next/.git/objects/2b/d5d590d07a161741477ace2339eb37c07cc40c","hash":"10a1f52729a36d3b9d594e93473fef26fed768e1","modified":1554428537000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1600065386074},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1600065386074},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1600065386075},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1600065386073},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1600065386074},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1600065386074},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1600065386074},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1600065386075},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1600065386075},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1600065386075},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1600065386076},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1600065386076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1600065386080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1600065386080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1600065386080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1600065386080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1600065386080},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1600065386081},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1600065386081},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1600065386081},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1600065386081},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1600065386081},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1600065386077},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1600065386077},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1600065386077},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1600065386077},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1600065386078},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1600065386078},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1600065386078},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1600065386078},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1600065386078},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1600065386079},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1600065386082},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1600065386082},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1600065386082},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1600065386082},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1600065386083},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1600065386083},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1600065386083},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1600065386083},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1600065386084},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1600065386084},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1600065386084},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1600065386084},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1600065386085},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1600065386086},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1600065386090},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1600065386091},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1600065386092},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1600065386104},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1600065386104},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1600065386104},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1600065386105},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1600065386105},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1600065386106},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1600065386112},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1600065386113},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1600065386113},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1600065386113},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1600065386113},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1600065386113},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1600065386118},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1600065386121},{"_id":"source/_posts/base64/image-20190914095537734.png","hash":"0c0d8846eca56689972b06d9f364c9d85e914562","modified":1600065385969},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1600065386120},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1600065386110},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1600065386121},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1600065386133}],"Category":[{"name":"js","_id":"ckf268t5c0004i2os29gv7i12"},{"name":"CSS","_id":"ckf268t5k0009i2os0gkdj2v6"},{"name":"代码集","_id":"ckf268t67000wi2os7i1tie4f"},{"name":"Vue","_id":"ckf268t6b0013i2osol59l62h"},{"name":"翻译文集","_id":"ckf268t6k001fi2osvfvf7lhv"},{"name":"promsie","_id":"ckf268t6r001oi2osh0mxjmlh"},{"name":"基础知识","_id":"ckf268t6v001ui2oswtkhb7c2"},{"name":"Base64","_id":"ckf268t6y0021i2osndx2fohl"},{"name":"es6","_id":"ckf268t730028i2osrd4k2ifo"},{"name":"node module","_id":"ckf268t7m002yi2os7mlvnafi"},{"name":"数据结构","_id":"ckf268t7q0036i2osx8pceuqk"},{"name":"node.js","_id":"ckf268t7t003ci2oszjtf31an"},{"name":"vue 源码阅读","_id":"ckf268t7w003ii2osh9jw3yhs"},{"name":"promise","_id":"ckf268t8a0040i2os8iyk43wk"},{"name":"源码阅读","_id":"ckf268t8d0047i2oscsnvnud9"},{"name":"underscore.js 源码分析","_id":"ckf268t8l004ji2os2367cei3"},{"name":"vue","_id":"ckf268ta0007qi2os61yxg1pd"},{"name":"笔记","_id":"ckf268ta2007wi2osizg5fg3m"},{"name":"js读书总结","_id":"ckf268ta40084i2osq1x1he96"},{"name":"生活","_id":"ckf268ta6008di2osf9oea6cx"},{"name":"设计模式","_id":"ckf268ta9008li2oswd2qmk6y"},{"name":"html5","_id":"ckf268taa008qi2osovyj91up"},{"name":"读书笔记","_id":"ckf268tad008xi2osje5owiyn"},{"name":"js理论基础","_id":"ckf268tae0092i2osn1l0zyep"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-20T02:20:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-20 10:20:44\ntype: \"categories\"\n---\n","updated":"2020-09-14T06:36:26.021Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckf268t550001i2osvbmqxnez","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-08-20T02:16:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-20 10:16:58\ntype: 'tags'\n---\n","updated":"2020-09-14T06:36:26.022Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckf268t590003i2os9v00dtsf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"blob 对象","date":"2019-01-12T08:44:49.000Z","_content":"\njs 中的 blob 数据类型：\n\n### Blob\n\n###### 什么是 blob ？\n\nblob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。\n\n在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。\n\n\n\n###### 创建 blob：\n\n```javascript\nnew Blob(array, [,options]);\n// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.\n// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型\n```\n\n如下， 将字符串保存到 blob 中， type 为 “text／plain”\n\n```\nconst blob = new Blob([\"hello world\"], { type: 'text/plain' });\n```\n\n\n\n###### 读取blob\n\n如果我们直接打印出 blob 是不能打印出来的\n\n```javascript\nBlob(11) {size: 11, type: \"text/plain\"}\n```\n\n我们可以通过使用 FileReader 读取 blob 中的数据：\n\n> FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n\n```javascript\nconst reader = new FileReader();\nreader.readAsText(blob);\nrader.onloadend = () => {\n  console.log(\"result\", reader.result);\n};\n// result \"hello world\"\n```\n\n\n\n###### 我们可以使用 blob来做什么？\n\nblob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。","source":"_posts/Blob.md","raw":"---\ntitle: blob 对象\ndate: 2019-01-12 16:44:49\ntags: blob\ncategories: js\n---\n\njs 中的 blob 数据类型：\n\n### Blob\n\n###### 什么是 blob ？\n\nblob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。\n\n在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。\n\n\n\n###### 创建 blob：\n\n```javascript\nnew Blob(array, [,options]);\n// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.\n// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型\n```\n\n如下， 将字符串保存到 blob 中， type 为 “text／plain”\n\n```\nconst blob = new Blob([\"hello world\"], { type: 'text/plain' });\n```\n\n\n\n###### 读取blob\n\n如果我们直接打印出 blob 是不能打印出来的\n\n```javascript\nBlob(11) {size: 11, type: \"text/plain\"}\n```\n\n我们可以通过使用 FileReader 读取 blob 中的数据：\n\n> FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n\n```javascript\nconst reader = new FileReader();\nreader.readAsText(blob);\nrader.onloadend = () => {\n  console.log(\"result\", reader.result);\n};\n// result \"hello world\"\n```\n\n\n\n###### 我们可以使用 blob来做什么？\n\nblob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。","slug":"Blob","published":1,"updated":"2020-09-14T06:36:25.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t4v0000i2os1tls9ro2","content":"<p>js 中的 blob 数据类型：</p>\n<h3 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h3><h6 id=\"什么是-blob-？\"><a href=\"#什么是-blob-？\" class=\"headerlink\" title=\"什么是 blob ？\"></a>什么是 blob ？</h6><p>blob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。</p>\n<p>在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。</p>\n<h6 id=\"创建-blob：\"><a href=\"#创建-blob：\" class=\"headerlink\" title=\"创建 blob：\"></a>创建 blob：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Blob(array, [,options]);</span><br><span class=\"line\"><span class=\"comment\">// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.</span></span><br><span class=\"line\"><span class=\"comment\">// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n<p>如下， 将字符串保存到 blob 中， type 为 “text／plain”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blob = new Blob([&quot;hello world&quot;], &#123; type: &apos;text/plain&apos; &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"读取blob\"><a href=\"#读取blob\" class=\"headerlink\" title=\"读取blob\"></a>读取blob</h6><p>如果我们直接打印出 blob 是不能打印出来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blob(<span class=\"number\">11</span>) &#123;<span class=\"attr\">size</span>: <span class=\"number\">11</span>, <span class=\"attr\">type</span>: <span class=\"string\">\"text/plain\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过使用 FileReader 读取 blob 中的数据：</p>\n<blockquote>\n<p>FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsText(blob);</span><br><span class=\"line\">rader.onloadend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result\"</span>, reader.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result \"hello world\"</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"我们可以使用-blob来做什么？\"><a href=\"#我们可以使用-blob来做什么？\" class=\"headerlink\" title=\"我们可以使用 blob来做什么？\"></a>我们可以使用 blob来做什么？</h6><p>blob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>js 中的 blob 数据类型：</p>\n<h3 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h3><h6 id=\"什么是-blob-？\"><a href=\"#什么是-blob-？\" class=\"headerlink\" title=\"什么是 blob ？\"></a>什么是 blob ？</h6><p>blob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。</p>\n<p>在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。</p>\n<h6 id=\"创建-blob：\"><a href=\"#创建-blob：\" class=\"headerlink\" title=\"创建 blob：\"></a>创建 blob：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Blob(array, [,options]);</span><br><span class=\"line\"><span class=\"comment\">// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.</span></span><br><span class=\"line\"><span class=\"comment\">// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n<p>如下， 将字符串保存到 blob 中， type 为 “text／plain”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blob = new Blob([&quot;hello world&quot;], &#123; type: &apos;text/plain&apos; &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"读取blob\"><a href=\"#读取blob\" class=\"headerlink\" title=\"读取blob\"></a>读取blob</h6><p>如果我们直接打印出 blob 是不能打印出来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blob(<span class=\"number\">11</span>) &#123;<span class=\"attr\">size</span>: <span class=\"number\">11</span>, <span class=\"attr\">type</span>: <span class=\"string\">\"text/plain\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过使用 FileReader 读取 blob 中的数据：</p>\n<blockquote>\n<p>FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsText(blob);</span><br><span class=\"line\">rader.onloadend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result\"</span>, reader.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result \"hello world\"</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"我们可以使用-blob来做什么？\"><a href=\"#我们可以使用-blob来做什么？\" class=\"headerlink\" title=\"我们可以使用 blob来做什么？\"></a>我们可以使用 blob来做什么？</h6><p>blob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。</p>\n"},{"title":"CSS块状格式化上下文(BFC)","date":"2017-09-17T01:37:10.000Z","_content":"\n### BFC 的概念\n\nbfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 `blcok-level` 块状水平的 `box` 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。\n\n### BFC 的创建\n\n创建块状格式化上下文的方式有以下几种:\n\n* `float` 的值不为 `none`\n* `position` 的值不为 `static` 或者 `relative`\n* `display` 的值为 `table-cell`  `table-caption` `inline-block` `flex` `inline-flex` 中的其中一个\n* `overflow` 的值不为 `visible` (通过设置 `overflow: hidden`)\n\n我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素\n\n### BFC 的布局规则\n\n>In a block formatting context:\n>\n>- boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block boxes in a block formatting context collapse.\n>- each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n在BFC 中: \n\n* 垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 `margin` 特性决定的，在相邻的块状元素的垂直 `margin` 上会出现外边距折叠的问题\n* 每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC\n\n### BFC 的应用\n\n#### 1. 使用 BFC 用来解决外边距折叠问题\n\n****\n\n外边距折叠是特定的相邻的外边距会形成一个单独的外边距，`collpase margin` 发生在下面的这些情况:\n\n* 元素为空元素\n* `padding` 或者 `border` 为 0\n* `no clearance to seperate them` ? 什么意思\n\n更多详细的的内容 :  https://www.w3.org/TR/css3-box/#compact-boxes\n\n对于外边距坍塌，最终形成的外边距遵循的是 `M-N` 原则: \n\n如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 `M`\n\n如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 `N`\n\n如果外边距是 `none` , 得到的坍塌之后的外边距是 0\n\n\n\n存在边距坍塌的几种情况\n\n1. 相邻的块状元素之间出现外边距坍塌\n2. 父元素和内部的子元素出现的外边距坍塌\n\n****\n\n使用块状格式化上下文解决外边距层叠:\n\ncss 代码如下 :\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b2\">\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n}\n.b1, .b2 {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png)\n\n如上图所示, 父元素`container` 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 `div` `margin`  都设为 10, 最后出现折叠之后的 `margin` 也变成了 10 ，出现了元素折叠的现象\n\n如何解决： 使用 `overflow: hidden` 创建 bfc\n\n当我们给父元素创建 bfc 之后, \n\n```\n.container {\n  overflow: hidden\n}\n```\n\n可以看到:\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png)\n\n这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象\n\n但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b3\">\n\t\t<div class=\"b2\">\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n.b3 {\n  overflow: hidden\n}\n</style>\n```\n\n上面的代码中, 我们给子元素 `b2` 上创建了一个父元素，给这个父元素创建bfc \n\n最终结果如下:\n\n ![](http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png)  \n\n最终我们可以看到，因为对于 `b3` 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  \n\n#### 2.使用 BFC 进行浮动的清除\n\n使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t我是浮动元素\n\t</div>\n\t<div class=\"b2\">\n\t我是浮动的元素\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n  overflow: hidden;\n}\n.b1, .b2 {\n  float: left;\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n结果如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png)  \n\n如上图所示，使用了 bfc 清除了由于使用 `float:left` 造成的浮动现象  浮动元素的父元素高度依然存在\n\n#### 3. 使用 BFC 实现两栏自适应布局 \n\n在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：\n\n```\n<body>\n   <div class=\"container\">\n       <div class=\"aside\"></div>\n       <div class=\"main\"></div>\n   </div>\n</body>\n<style type=\"text/css\">\n   .container  {\n        width: 300px;\n   }\n   .aside {\n    width: 20%;\n    float: left;\n    height: 100px;\n    background-color: red;\n   }\n   .main {\n    width: 80%;\n    height: 200px;\n    background-color: blue;\n   }\n</style>\n```\n\n\n\n图片如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)\n\n即使 `aside` 浮动，`main` 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？\n\n根据上面的布局规则， 我们可以给 `main` 创建一个块状格式化上下文，这样，`main` 的布局就不会受到 `aside` 元素的影响\n\n```\n.main {\n  width: 80%;\n  height: 200px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n最终，我们得到了自适应布局: 从而得到了一个两栏布局\n\n![](http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)","source":"_posts/BFC.md","raw":"---\ntitle: CSS块状格式化上下文(BFC)\ndate: 2017-09-17 09:37:10\ntags: bfc\ncategories: CSS\n---\n\n### BFC 的概念\n\nbfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 `blcok-level` 块状水平的 `box` 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。\n\n### BFC 的创建\n\n创建块状格式化上下文的方式有以下几种:\n\n* `float` 的值不为 `none`\n* `position` 的值不为 `static` 或者 `relative`\n* `display` 的值为 `table-cell`  `table-caption` `inline-block` `flex` `inline-flex` 中的其中一个\n* `overflow` 的值不为 `visible` (通过设置 `overflow: hidden`)\n\n我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素\n\n### BFC 的布局规则\n\n>In a block formatting context:\n>\n>- boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block boxes in a block formatting context collapse.\n>- each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n在BFC 中: \n\n* 垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 `margin` 特性决定的，在相邻的块状元素的垂直 `margin` 上会出现外边距折叠的问题\n* 每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC\n\n### BFC 的应用\n\n#### 1. 使用 BFC 用来解决外边距折叠问题\n\n****\n\n外边距折叠是特定的相邻的外边距会形成一个单独的外边距，`collpase margin` 发生在下面的这些情况:\n\n* 元素为空元素\n* `padding` 或者 `border` 为 0\n* `no clearance to seperate them` ? 什么意思\n\n更多详细的的内容 :  https://www.w3.org/TR/css3-box/#compact-boxes\n\n对于外边距坍塌，最终形成的外边距遵循的是 `M-N` 原则: \n\n如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 `M`\n\n如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 `N`\n\n如果外边距是 `none` , 得到的坍塌之后的外边距是 0\n\n\n\n存在边距坍塌的几种情况\n\n1. 相邻的块状元素之间出现外边距坍塌\n2. 父元素和内部的子元素出现的外边距坍塌\n\n****\n\n使用块状格式化上下文解决外边距层叠:\n\ncss 代码如下 :\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b2\">\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n}\n.b1, .b2 {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png)\n\n如上图所示, 父元素`container` 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 `div` `margin`  都设为 10, 最后出现折叠之后的 `margin` 也变成了 10 ，出现了元素折叠的现象\n\n如何解决： 使用 `overflow: hidden` 创建 bfc\n\n当我们给父元素创建 bfc 之后, \n\n```\n.container {\n  overflow: hidden\n}\n```\n\n可以看到:\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png)\n\n这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象\n\n但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b3\">\n\t\t<div class=\"b2\">\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n.b3 {\n  overflow: hidden\n}\n</style>\n```\n\n上面的代码中, 我们给子元素 `b2` 上创建了一个父元素，给这个父元素创建bfc \n\n最终结果如下:\n\n ![](http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png)  \n\n最终我们可以看到，因为对于 `b3` 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  \n\n#### 2.使用 BFC 进行浮动的清除\n\n使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t我是浮动元素\n\t</div>\n\t<div class=\"b2\">\n\t我是浮动的元素\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n  overflow: hidden;\n}\n.b1, .b2 {\n  float: left;\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n结果如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png)  \n\n如上图所示，使用了 bfc 清除了由于使用 `float:left` 造成的浮动现象  浮动元素的父元素高度依然存在\n\n#### 3. 使用 BFC 实现两栏自适应布局 \n\n在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：\n\n```\n<body>\n   <div class=\"container\">\n       <div class=\"aside\"></div>\n       <div class=\"main\"></div>\n   </div>\n</body>\n<style type=\"text/css\">\n   .container  {\n        width: 300px;\n   }\n   .aside {\n    width: 20%;\n    float: left;\n    height: 100px;\n    background-color: red;\n   }\n   .main {\n    width: 80%;\n    height: 200px;\n    background-color: blue;\n   }\n</style>\n```\n\n\n\n图片如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)\n\n即使 `aside` 浮动，`main` 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？\n\n根据上面的布局规则， 我们可以给 `main` 创建一个块状格式化上下文，这样，`main` 的布局就不会受到 `aside` 元素的影响\n\n```\n.main {\n  width: 80%;\n  height: 200px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n最终，我们得到了自适应布局: 从而得到了一个两栏布局\n\n![](http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)","slug":"BFC","published":1,"updated":"2020-09-14T06:36:25.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t570002i2osgowu5r8w","content":"<h3 id=\"BFC-的概念\"><a href=\"#BFC-的概念\" class=\"headerlink\" title=\"BFC 的概念\"></a>BFC 的概念</h3><p>bfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 <code>blcok-level</code> 块状水平的 <code>box</code> 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。</p>\n<h3 id=\"BFC-的创建\"><a href=\"#BFC-的创建\" class=\"headerlink\" title=\"BFC 的创建\"></a>BFC 的创建</h3><p>创建块状格式化上下文的方式有以下几种:</p>\n<ul>\n<li><code>float</code> 的值不为 <code>none</code></li>\n<li><code>position</code> 的值不为 <code>static</code> 或者 <code>relative</code></li>\n<li><code>display</code> 的值为 <code>table-cell</code>  <code>table-caption</code> <code>inline-block</code> <code>flex</code> <code>inline-flex</code> 中的其中一个</li>\n<li><code>overflow</code> 的值不为 <code>visible</code> (通过设置 <code>overflow: hidden</code>)</li>\n</ul>\n<p>我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素</p>\n<h3 id=\"BFC-的布局规则\"><a href=\"#BFC-的布局规则\" class=\"headerlink\" title=\"BFC 的布局规则\"></a>BFC 的布局规则</h3><blockquote>\n<p>In a block formatting context:</p>\n<ul>\n<li>boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block boxes in a block formatting context collapse.</li>\n<li>each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</li>\n</ul>\n</blockquote>\n<p>在BFC 中: </p>\n<ul>\n<li>垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 <code>margin</code> 特性决定的，在相邻的块状元素的垂直 <code>margin</code> 上会出现外边距折叠的问题</li>\n<li>每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC</li>\n</ul>\n<h3 id=\"BFC-的应用\"><a href=\"#BFC-的应用\" class=\"headerlink\" title=\"BFC 的应用\"></a>BFC 的应用</h3><h4 id=\"1-使用-BFC-用来解决外边距折叠问题\"><a href=\"#1-使用-BFC-用来解决外边距折叠问题\" class=\"headerlink\" title=\"1. 使用 BFC 用来解决外边距折叠问题\"></a>1. 使用 BFC 用来解决外边距折叠问题</h4><hr>\n<p>外边距折叠是特定的相邻的外边距会形成一个单独的外边距，<code>collpase margin</code> 发生在下面的这些情况:</p>\n<ul>\n<li>元素为空元素</li>\n<li><code>padding</code> 或者 <code>border</code> 为 0</li>\n<li><code>no clearance to seperate them</code> ? 什么意思</li>\n</ul>\n<p>更多详细的的内容 :  <a href=\"https://www.w3.org/TR/css3-box/#compact-boxes\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/css3-box/#compact-boxes</a></p>\n<p>对于外边距坍塌，最终形成的外边距遵循的是 <code>M-N</code> 原则: </p>\n<p>如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 <code>M</code></p>\n<p>如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 <code>N</code></p>\n<p>如果外边距是 <code>none</code> , 得到的坍塌之后的外边距是 0</p>\n<p>存在边距坍塌的几种情况</p>\n<ol>\n<li>相邻的块状元素之间出现外边距坍塌</li>\n<li>父元素和内部的子元素出现的外边距坍塌</li>\n</ol>\n<hr>\n<p>使用块状格式化上下文解决外边距层叠:</p>\n<p>css 代码如下 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png\" alt></p>\n<p>如上图所示, 父元素<code>container</code> 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 <code>div</code> <code>margin</code>  都设为 10, 最后出现折叠之后的 <code>margin</code> 也变成了 10 ，出现了元素折叠的现象</p>\n<p>如何解决： 使用 <code>overflow: hidden</code> 创建 bfc</p>\n<p>当我们给父元素创建 bfc 之后, </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png\" alt></p>\n<p>这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象</p>\n<p>但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b3&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.b3 &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中, 我们给子元素 <code>b2</code> 上创建了一个父元素，给这个父元素创建bfc </p>\n<p>最终结果如下:</p>\n<p> <img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png\" alt>  </p>\n<p>最终我们可以看到，因为对于 <code>b3</code> 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  </p>\n<h4 id=\"2-使用-BFC-进行浮动的清除\"><a href=\"#2-使用-BFC-进行浮动的清除\" class=\"headerlink\" title=\"2.使用 BFC 进行浮动的清除\"></a>2.使用 BFC 进行浮动的清除</h4><p>使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t我是浮动元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t我是浮动的元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>结果如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png\" alt>  </p>\n<p>如上图所示，使用了 bfc 清除了由于使用 <code>float:left</code> 造成的浮动现象  浮动元素的父元素高度依然存在</p>\n<h4 id=\"3-使用-BFC-实现两栏自适应布局\"><a href=\"#3-使用-BFC-实现两栏自适应布局\" class=\"headerlink\" title=\"3. 使用 BFC 实现两栏自适应布局\"></a>3. 使用 BFC 实现两栏自适应布局</h4><p>在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">   .container  &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .aside &#123;</span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .main &#123;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>图片如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt></p>\n<p>即使 <code>aside</code> 浮动，<code>main</code> 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？</p>\n<p>根据上面的布局规则， 我们可以给 <code>main</code> 创建一个块状格式化上下文，这样，<code>main</code> 的布局就不会受到 <code>aside</code> 元素的影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  width: 80%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终，我们得到了自适应布局: 从而得到了一个两栏布局</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BFC-的概念\"><a href=\"#BFC-的概念\" class=\"headerlink\" title=\"BFC 的概念\"></a>BFC 的概念</h3><p>bfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 <code>blcok-level</code> 块状水平的 <code>box</code> 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。</p>\n<h3 id=\"BFC-的创建\"><a href=\"#BFC-的创建\" class=\"headerlink\" title=\"BFC 的创建\"></a>BFC 的创建</h3><p>创建块状格式化上下文的方式有以下几种:</p>\n<ul>\n<li><code>float</code> 的值不为 <code>none</code></li>\n<li><code>position</code> 的值不为 <code>static</code> 或者 <code>relative</code></li>\n<li><code>display</code> 的值为 <code>table-cell</code>  <code>table-caption</code> <code>inline-block</code> <code>flex</code> <code>inline-flex</code> 中的其中一个</li>\n<li><code>overflow</code> 的值不为 <code>visible</code> (通过设置 <code>overflow: hidden</code>)</li>\n</ul>\n<p>我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素</p>\n<h3 id=\"BFC-的布局规则\"><a href=\"#BFC-的布局规则\" class=\"headerlink\" title=\"BFC 的布局规则\"></a>BFC 的布局规则</h3><blockquote>\n<p>In a block formatting context:</p>\n<ul>\n<li>boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block boxes in a block formatting context collapse.</li>\n<li>each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</li>\n</ul>\n</blockquote>\n<p>在BFC 中: </p>\n<ul>\n<li>垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 <code>margin</code> 特性决定的，在相邻的块状元素的垂直 <code>margin</code> 上会出现外边距折叠的问题</li>\n<li>每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC</li>\n</ul>\n<h3 id=\"BFC-的应用\"><a href=\"#BFC-的应用\" class=\"headerlink\" title=\"BFC 的应用\"></a>BFC 的应用</h3><h4 id=\"1-使用-BFC-用来解决外边距折叠问题\"><a href=\"#1-使用-BFC-用来解决外边距折叠问题\" class=\"headerlink\" title=\"1. 使用 BFC 用来解决外边距折叠问题\"></a>1. 使用 BFC 用来解决外边距折叠问题</h4><hr>\n<p>外边距折叠是特定的相邻的外边距会形成一个单独的外边距，<code>collpase margin</code> 发生在下面的这些情况:</p>\n<ul>\n<li>元素为空元素</li>\n<li><code>padding</code> 或者 <code>border</code> 为 0</li>\n<li><code>no clearance to seperate them</code> ? 什么意思</li>\n</ul>\n<p>更多详细的的内容 :  <a href=\"https://www.w3.org/TR/css3-box/#compact-boxes\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/css3-box/#compact-boxes</a></p>\n<p>对于外边距坍塌，最终形成的外边距遵循的是 <code>M-N</code> 原则: </p>\n<p>如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 <code>M</code></p>\n<p>如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 <code>N</code></p>\n<p>如果外边距是 <code>none</code> , 得到的坍塌之后的外边距是 0</p>\n<p>存在边距坍塌的几种情况</p>\n<ol>\n<li>相邻的块状元素之间出现外边距坍塌</li>\n<li>父元素和内部的子元素出现的外边距坍塌</li>\n</ol>\n<hr>\n<p>使用块状格式化上下文解决外边距层叠:</p>\n<p>css 代码如下 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png\" alt></p>\n<p>如上图所示, 父元素<code>container</code> 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 <code>div</code> <code>margin</code>  都设为 10, 最后出现折叠之后的 <code>margin</code> 也变成了 10 ，出现了元素折叠的现象</p>\n<p>如何解决： 使用 <code>overflow: hidden</code> 创建 bfc</p>\n<p>当我们给父元素创建 bfc 之后, </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png\" alt></p>\n<p>这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象</p>\n<p>但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b3&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.b3 &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中, 我们给子元素 <code>b2</code> 上创建了一个父元素，给这个父元素创建bfc </p>\n<p>最终结果如下:</p>\n<p> <img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png\" alt>  </p>\n<p>最终我们可以看到，因为对于 <code>b3</code> 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  </p>\n<h4 id=\"2-使用-BFC-进行浮动的清除\"><a href=\"#2-使用-BFC-进行浮动的清除\" class=\"headerlink\" title=\"2.使用 BFC 进行浮动的清除\"></a>2.使用 BFC 进行浮动的清除</h4><p>使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t我是浮动元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t我是浮动的元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>结果如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png\" alt>  </p>\n<p>如上图所示，使用了 bfc 清除了由于使用 <code>float:left</code> 造成的浮动现象  浮动元素的父元素高度依然存在</p>\n<h4 id=\"3-使用-BFC-实现两栏自适应布局\"><a href=\"#3-使用-BFC-实现两栏自适应布局\" class=\"headerlink\" title=\"3. 使用 BFC 实现两栏自适应布局\"></a>3. 使用 BFC 实现两栏自适应布局</h4><p>在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">   .container  &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .aside &#123;</span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .main &#123;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>图片如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt></p>\n<p>即使 <code>aside</code> 浮动，<code>main</code> 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？</p>\n<p>根据上面的布局规则， 我们可以给 <code>main</code> 创建一个块状格式化上下文，这样，<code>main</code> 的布局就不会受到 <code>aside</code> 元素的影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  width: 80%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终，我们得到了自适应布局: 从而得到了一个两栏布局</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt></p>\n"},{"title":"CSS: 未知高度内文本居中","date":"2017-12-11T15:01:45.000Z","_content":"\n在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 `line-height = height` 可以解决问题，对于未知高度，下面有几种方法。\n\n例如下面的 `HTML` 以及 `CSS` 如下:\n\n```\n<div class=\"wrapper\">\n  <span class=\"first\">我是第一个需要居中的文字</span>\n  <span class=\"second\">我是第二个需要居中的文字</span>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 100px;\n}\n.wrapper span {\n  width: 100%;\n  display: inline-block;\n}\n.first {\n  height: 30%;\n}\n.second {\n  height: 70%;\n}\n```\n\n我们期望得到下面的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png)\n\n但是, 因为我们无法使用 `line-height = height` (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png)\n\n为了实现居中效果，我们可以采用下面的方式:\n\n1. 暴力 `flex`\n\n```css\n.wrapper span {\n  display: flex;\n  align-items: center;\n}\n```\n\n[table](http://www.jianshu.com/p/8aa3f1030908)\n\n","source":"_posts/CSS-未知高度内文本居中.md","raw":"---\ntitle: 'CSS: 未知高度内文本居中'\ndate: 2017-12-11 23:01:45\ntags: 垂直居中\ncategories: CSS\n---\n\n在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 `line-height = height` 可以解决问题，对于未知高度，下面有几种方法。\n\n例如下面的 `HTML` 以及 `CSS` 如下:\n\n```\n<div class=\"wrapper\">\n  <span class=\"first\">我是第一个需要居中的文字</span>\n  <span class=\"second\">我是第二个需要居中的文字</span>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 100px;\n}\n.wrapper span {\n  width: 100%;\n  display: inline-block;\n}\n.first {\n  height: 30%;\n}\n.second {\n  height: 70%;\n}\n```\n\n我们期望得到下面的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png)\n\n但是, 因为我们无法使用 `line-height = height` (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png)\n\n为了实现居中效果，我们可以采用下面的方式:\n\n1. 暴力 `flex`\n\n```css\n.wrapper span {\n  display: flex;\n  align-items: center;\n}\n```\n\n[table](http://www.jianshu.com/p/8aa3f1030908)\n\n","slug":"CSS-未知高度内文本居中","published":1,"updated":"2020-09-14T06:36:25.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5f0006i2os4vxlrjh5","content":"<p>在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 <code>line-height = height</code> 可以解决问题，对于未知高度，下面有几种方法。</p>\n<p>例如下面的 <code>HTML</code> 以及 <code>CSS</code> 如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;first&quot;&gt;我是第一个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;second&quot;&gt;我是第二个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们期望得到下面的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png\" alt></p>\n<p>但是, 因为我们无法使用 <code>line-height = height</code> (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png\" alt></p>\n<p>为了实现居中效果，我们可以采用下面的方式:</p>\n<ol>\n<li>暴力 <code>flex</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jianshu.com/p/8aa3f1030908\" target=\"_blank\" rel=\"noopener\">table</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 <code>line-height = height</code> 可以解决问题，对于未知高度，下面有几种方法。</p>\n<p>例如下面的 <code>HTML</code> 以及 <code>CSS</code> 如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;first&quot;&gt;我是第一个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;second&quot;&gt;我是第二个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们期望得到下面的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png\" alt></p>\n<p>但是, 因为我们无法使用 <code>line-height = height</code> (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png\" alt></p>\n<p>为了实现居中效果，我们可以采用下面的方式:</p>\n<ol>\n<li>暴力 <code>flex</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jianshu.com/p/8aa3f1030908\" target=\"_blank\" rel=\"noopener\">table</a></p>\n"},{"title":"CSS层叠上下文","date":"2017-08-21T16:19:29.000Z","_content":"\n​\t最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。\n\n###  层叠上下文\n\n普通元素使用css的特殊属性可以创建层叠上下文，~~创建层叠上下文的元素的层级会高于普通的元素~~ ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。\n\n在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。\n\n###  层叠水平\n\n层叠水平类似 'level' , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。\n\n普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。\n\n### 层叠顺序\n\n层叠顺序定义的是在相同的层叠上下文中  **元素发生层叠的时候** ，特定的显示顺序, 层叠顺序图表引入顺序如下:\n\n![ ]( http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png ) \n\n> 注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 `dispplay: inline-block` 是个例外，我想是因为在 CSS 中 `内容主要，样式次之`的原因吧， `inline-block`  会被认为是内容 ， `block` 会被认为属于布局的样式\n\n如下代码所示:\n\n```\n<div class=\"con\">\n    <div class=\"block2\">\n    </div>\n    <div class=\"block1\">\n    </div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n    .block2 {\n        display: inline-block;\n        margin-bottom: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n</style>\n```\n\n效果如下:\n\n![''](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png)\n\n如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？\n\n因为我们给 block2元素添加了 `display: inline-block` 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。\n\n> 下面是两条非常重要的层叠准则如下 :\n>\n> 1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）\n>\n> 2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素\n\n### 创建层叠上下文\n\n如何创建层叠上下文呢？这里有三种途径：\n\n1.页面的根元素( html )本身带有层叠上下文\n\n对于页面的根元素 ` html` 本身具有层叠上下文的\n\n2.对于包含有 `position: absolute`  `position: relative ` 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)\n\n例如代码如下:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n    <div class=\"block1\"></div>\n    <div class=\"block2\"></div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n   .block2 {\n        margin-top: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n   }\n   // 第一种情况\n   .block1 {\n      z-index: 2;\n   } \n   .blcok2 {\n      z-index: 1;\n   }\n   // 第二种情况\n   .block1 {\n      position: relative;\n      z-index: 0;\n   } \n   .blcok2 {\n      z-index: 1000;\n   }\n</style>\n</body>\n</html>\n```\n\n我们通过对于css样式的改变出现下面的这几种情况：\n\n第一种情况:\n\n这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 `z-index` 进行比较没有起作用   **使用 `z-index`只对于层叠上下文的元素起作用**\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png)\n\n\n\n第二种情况：\n\n使用 `position: relative`  和 `z-index` 创建了层叠上下文， ~~在层次上，层叠上下文的要高于普通元素~~，因为使用 `z-index: 0` 的层叠水平会高于 display:block  元素，因此会出现下面的效果\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png)\n\n\n\n3.使用其他特殊的 css3  属性创建的层叠上下文。\n\n使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:\n\n1.当一个元素的 **父元素** 声明 `display: flex | display: inline-flex` 的时候，并且该元素的 `z-index` 不是 `auto` 而是数数值的时候，该元素变为层叠上下文元素；\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n   <div class=\"block1\">\n\n   </div>\n    <div class=\"block2\">\n\n    </div>\n</div>\n<style>\n    .con {\n        display: flex;\n    }\n    .block1 {\n        width: 200px;\n        height: 200px;\n        background-color: blue;\n    }\n    .block2 {\n        margin-left: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n     .block2 {\n       }\n     .block1 {\n         z-index: 1;\n    }\n</style>\n</body>\n</html>\n```\n\n正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面\n\n但是，当我们给 block1 添加了一个 `z-index`  不为 auto的值的时候，情况发生变化了, Magic !\n\n如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png)\n\n这是因为添加了 `z-index` 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 `display: block` 的普通元素，如果 `z-index` 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 `display: block` 元素的。\n\n2. 使用 CSS 中的 `opacity` 创建的层叠上下文元素:\n\n   我们有时候会出现想让 不透明元素内的元素显示正常，\n\n   ```\n   <div class='con'>\n   \t<div class= 'text'>我是一段文字</div>\n   <div>\n   <sytle>\n   .con{\n     width: 100px;\n     height: 100px;\n     background-color: blue;\n     opacity: 0.5;\n   }\n   .text {\n     width: 100px;\n     height: 100px;\n     background-color: red;\n     position: relative;\n     z-index: -1;\n   }\n   </style>\n   ```\n\n   在实际上，元素内的文字也会被透明度影响，这被认为是 使用 `opacity` 创建了层叠上下文元素\n\n   因为，在没有使用 `opacity` 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 `z-index` 小于零，在层叠规则上小于 `block` 元素，所以会被遮盖掉。当我们对于 `class='con'` 的元素没有设置 `opacity`的时候，效果如下：\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png)\n\n   这样效果的原因是因为：使用了 `position: relative` 和 `z-index: -1` 形成的层叠上下文，在层叠规则上要低于 其他的`block` 元素，因此图片中的红色方块就被遮挡住了；\n\n   然而，当我们对元素应用 `opacity` 当 `opacity` 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  \n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png)\n\n   Magic!\n\n   如上,\n\n   因为我们对于 `class = 'con'` 设置了 `opacity: 0.7` 创建了层叠上下文，其子元素 `class ='text' ` 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；\n\n   >上面对于使用 `opacity` 创建的层叠上下文，来解释子元素会受到父元素 `opacity` 的影响，实际上，我们也可以认为属性 `opacity` 具有继承性，子元素会继承父元素的 `opacity` 属性\n\n   对于使用  `opacity` 会影响到子元素的效果，如果我们想让子元素不受到父元素  `opacity` 的影响， 解决办法有下面的几种方法：\n\n   >借用 `background: rgba()` 了来实现\n\n   使用 这个属性可以避免 后代子元素使用 `opacity` 造成的干扰效果，\n\n   ```\n   background: rgba(R,G,B,A)\n   // R: 代表红色取值\n   // G: 代表绿色取值\n   // B: 代表蓝色取值\n   // A: 代表透明度\n   // R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色\n   ```\n\n   因此，上面的问题，我们使用 `rgba` 来解决：\n\n   `background: rgba(0,0,255,0.5)` \n\n   >还有一种方法，是让被 `opacity` 不作用在父元素上\n\n   html: \n\n   ```\n   <div class='con'>\n   \t<div class='text'>\n   \t\t<p>我是要进行显示的元素</p>\n   \t</div>\n   \t<div class='back'></div>\n   </div>\n   ```\n\n   CSS:\n\n   ```\n   .blo {\n           position: relative;\n           width: 100px;\n           height: 100px;\n       }\n   .back {\n           position: absolute;\n           top: 0;\n           left: 0;\n           width: 100%;\n           height: 100%;\n           background-color: blue;\n           opacity: 0.2;\n       }\n   ```\n\n   ​\n\n    效果如下:\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png)\n\n   #### 层叠上下文的特性：\n\n   层叠上下文元素有如下特性：\n\n   - 层叠上下文的层叠水平要比普通元素高；\n   - 层叠上下文可以阻断元素的混合模式；\n   - 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n   - 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n   - 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 ","source":"_posts/CSS层叠上下文.md","raw":"---\ntitle: CSS层叠上下文\ndate: 2017-08-22 00:19:29\ntags: CSS层叠\ncategories: CSS\n---\n\n​\t最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。\n\n###  层叠上下文\n\n普通元素使用css的特殊属性可以创建层叠上下文，~~创建层叠上下文的元素的层级会高于普通的元素~~ ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。\n\n在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。\n\n###  层叠水平\n\n层叠水平类似 'level' , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。\n\n普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。\n\n### 层叠顺序\n\n层叠顺序定义的是在相同的层叠上下文中  **元素发生层叠的时候** ，特定的显示顺序, 层叠顺序图表引入顺序如下:\n\n![ ]( http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png ) \n\n> 注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 `dispplay: inline-block` 是个例外，我想是因为在 CSS 中 `内容主要，样式次之`的原因吧， `inline-block`  会被认为是内容 ， `block` 会被认为属于布局的样式\n\n如下代码所示:\n\n```\n<div class=\"con\">\n    <div class=\"block2\">\n    </div>\n    <div class=\"block1\">\n    </div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n    .block2 {\n        display: inline-block;\n        margin-bottom: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n</style>\n```\n\n效果如下:\n\n![''](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png)\n\n如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？\n\n因为我们给 block2元素添加了 `display: inline-block` 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。\n\n> 下面是两条非常重要的层叠准则如下 :\n>\n> 1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）\n>\n> 2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素\n\n### 创建层叠上下文\n\n如何创建层叠上下文呢？这里有三种途径：\n\n1.页面的根元素( html )本身带有层叠上下文\n\n对于页面的根元素 ` html` 本身具有层叠上下文的\n\n2.对于包含有 `position: absolute`  `position: relative ` 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)\n\n例如代码如下:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n    <div class=\"block1\"></div>\n    <div class=\"block2\"></div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n   .block2 {\n        margin-top: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n   }\n   // 第一种情况\n   .block1 {\n      z-index: 2;\n   } \n   .blcok2 {\n      z-index: 1;\n   }\n   // 第二种情况\n   .block1 {\n      position: relative;\n      z-index: 0;\n   } \n   .blcok2 {\n      z-index: 1000;\n   }\n</style>\n</body>\n</html>\n```\n\n我们通过对于css样式的改变出现下面的这几种情况：\n\n第一种情况:\n\n这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 `z-index` 进行比较没有起作用   **使用 `z-index`只对于层叠上下文的元素起作用**\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png)\n\n\n\n第二种情况：\n\n使用 `position: relative`  和 `z-index` 创建了层叠上下文， ~~在层次上，层叠上下文的要高于普通元素~~，因为使用 `z-index: 0` 的层叠水平会高于 display:block  元素，因此会出现下面的效果\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png)\n\n\n\n3.使用其他特殊的 css3  属性创建的层叠上下文。\n\n使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:\n\n1.当一个元素的 **父元素** 声明 `display: flex | display: inline-flex` 的时候，并且该元素的 `z-index` 不是 `auto` 而是数数值的时候，该元素变为层叠上下文元素；\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n   <div class=\"block1\">\n\n   </div>\n    <div class=\"block2\">\n\n    </div>\n</div>\n<style>\n    .con {\n        display: flex;\n    }\n    .block1 {\n        width: 200px;\n        height: 200px;\n        background-color: blue;\n    }\n    .block2 {\n        margin-left: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n     .block2 {\n       }\n     .block1 {\n         z-index: 1;\n    }\n</style>\n</body>\n</html>\n```\n\n正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面\n\n但是，当我们给 block1 添加了一个 `z-index`  不为 auto的值的时候，情况发生变化了, Magic !\n\n如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png)\n\n这是因为添加了 `z-index` 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 `display: block` 的普通元素，如果 `z-index` 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 `display: block` 元素的。\n\n2. 使用 CSS 中的 `opacity` 创建的层叠上下文元素:\n\n   我们有时候会出现想让 不透明元素内的元素显示正常，\n\n   ```\n   <div class='con'>\n   \t<div class= 'text'>我是一段文字</div>\n   <div>\n   <sytle>\n   .con{\n     width: 100px;\n     height: 100px;\n     background-color: blue;\n     opacity: 0.5;\n   }\n   .text {\n     width: 100px;\n     height: 100px;\n     background-color: red;\n     position: relative;\n     z-index: -1;\n   }\n   </style>\n   ```\n\n   在实际上，元素内的文字也会被透明度影响，这被认为是 使用 `opacity` 创建了层叠上下文元素\n\n   因为，在没有使用 `opacity` 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 `z-index` 小于零，在层叠规则上小于 `block` 元素，所以会被遮盖掉。当我们对于 `class='con'` 的元素没有设置 `opacity`的时候，效果如下：\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png)\n\n   这样效果的原因是因为：使用了 `position: relative` 和 `z-index: -1` 形成的层叠上下文，在层叠规则上要低于 其他的`block` 元素，因此图片中的红色方块就被遮挡住了；\n\n   然而，当我们对元素应用 `opacity` 当 `opacity` 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  \n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png)\n\n   Magic!\n\n   如上,\n\n   因为我们对于 `class = 'con'` 设置了 `opacity: 0.7` 创建了层叠上下文，其子元素 `class ='text' ` 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；\n\n   >上面对于使用 `opacity` 创建的层叠上下文，来解释子元素会受到父元素 `opacity` 的影响，实际上，我们也可以认为属性 `opacity` 具有继承性，子元素会继承父元素的 `opacity` 属性\n\n   对于使用  `opacity` 会影响到子元素的效果，如果我们想让子元素不受到父元素  `opacity` 的影响， 解决办法有下面的几种方法：\n\n   >借用 `background: rgba()` 了来实现\n\n   使用 这个属性可以避免 后代子元素使用 `opacity` 造成的干扰效果，\n\n   ```\n   background: rgba(R,G,B,A)\n   // R: 代表红色取值\n   // G: 代表绿色取值\n   // B: 代表蓝色取值\n   // A: 代表透明度\n   // R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色\n   ```\n\n   因此，上面的问题，我们使用 `rgba` 来解决：\n\n   `background: rgba(0,0,255,0.5)` \n\n   >还有一种方法，是让被 `opacity` 不作用在父元素上\n\n   html: \n\n   ```\n   <div class='con'>\n   \t<div class='text'>\n   \t\t<p>我是要进行显示的元素</p>\n   \t</div>\n   \t<div class='back'></div>\n   </div>\n   ```\n\n   CSS:\n\n   ```\n   .blo {\n           position: relative;\n           width: 100px;\n           height: 100px;\n       }\n   .back {\n           position: absolute;\n           top: 0;\n           left: 0;\n           width: 100%;\n           height: 100%;\n           background-color: blue;\n           opacity: 0.2;\n       }\n   ```\n\n   ​\n\n    效果如下:\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png)\n\n   #### 层叠上下文的特性：\n\n   层叠上下文元素有如下特性：\n\n   - 层叠上下文的层叠水平要比普通元素高；\n   - 层叠上下文可以阻断元素的混合模式；\n   - 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n   - 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n   - 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 ","slug":"CSS层叠上下文","published":1,"updated":"2020-09-14T06:36:25.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5h0007i2ostirvccan","content":"<p>​    最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。</p>\n<h3 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h3><p>普通元素使用css的特殊属性可以创建层叠上下文，<del>创建层叠上下文的元素的层级会高于普通的元素</del> ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。</p>\n<p>在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。</p>\n<h3 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h3><p>层叠水平类似 ‘level’ , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。</p>\n<p>普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。</p>\n<h3 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><p>层叠顺序定义的是在相同的层叠上下文中  <strong>元素发生层叠的时候</strong> ，特定的显示顺序, 层叠顺序图表引入顺序如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png\" alt=\" \"> </p>\n<blockquote>\n<p>注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 <code>dispplay: inline-block</code> 是个例外，我想是因为在 CSS 中 <code>内容主要，样式次之</code>的原因吧， <code>inline-block</code>  会被认为是内容 ， <code>block</code> 会被认为属于布局的样式</p>\n</blockquote>\n<p>如下代码所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin-bottom: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png\" alt=\"&#39;&#39;\"></p>\n<p>如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？</p>\n<p>因为我们给 block2元素添加了 <code>display: inline-block</code> 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。</p>\n<blockquote>\n<p>下面是两条非常重要的层叠准则如下 :</p>\n<p>1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）</p>\n<p>2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素</p>\n</blockquote>\n<h3 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h3><p>如何创建层叠上下文呢？这里有三种途径：</p>\n<p>1.页面的根元素( html )本身带有层叠上下文</p>\n<p>对于页面的根元素 <code>html</code> 本身具有层叠上下文的</p>\n<p>2.对于包含有 <code>position: absolute</code>  <code>position: relative</code> 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)</p>\n<p>例如代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .block2 &#123;</span><br><span class=\"line\">        margin-top: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第一种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      z-index: 2;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第二种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      z-index: 0;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1000;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过对于css样式的改变出现下面的这几种情况：</p>\n<p>第一种情况:</p>\n<p>这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 <code>z-index</code> 进行比较没有起作用   <strong>使用 <code>z-index</code>只对于层叠上下文的元素起作用</strong></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png\" alt></p>\n<p>第二种情况：</p>\n<p>使用 <code>position: relative</code>  和 <code>z-index</code> 创建了层叠上下文， <del>在层次上，层叠上下文的要高于普通元素</del>，因为使用 <code>z-index: 0</code> 的层叠水平会高于 display:block  元素，因此会出现下面的效果</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png\" alt></p>\n<p>3.使用其他特殊的 css3  属性创建的层叠上下文。</p>\n<p>使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:</p>\n<p>1.当一个元素的 <strong>父元素</strong> 声明 <code>display: flex | display: inline-flex</code> 的时候，并且该元素的 <code>z-index</code> 不是 <code>auto</code> 而是数数值的时候，该元素变为层叠上下文元素；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">   &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .con &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block1 &#123;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     .block2 &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     .block1 &#123;</span><br><span class=\"line\">         z-index: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面</p>\n<p>但是，当我们给 block1 添加了一个 <code>z-index</code>  不为 auto的值的时候，情况发生变化了, Magic !</p>\n<p>如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png\" alt></p>\n<p>这是因为添加了 <code>z-index</code> 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 <code>display: block</code> 的普通元素，如果 <code>z-index</code> 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 <code>display: block</code> 元素的。</p>\n<ol start=\"2\">\n<li><p>使用 CSS 中的 <code>opacity</code> 创建的层叠上下文元素:</p>\n<p>我们有时候会出现想让 不透明元素内的元素显示正常，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class= &apos;text&apos;&gt;我是一段文字&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;sytle&gt;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在实际上，元素内的文字也会被透明度影响，这被认为是 使用 <code>opacity</code> 创建了层叠上下文元素</p>\n<p>因为，在没有使用 <code>opacity</code> 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 <code>z-index</code> 小于零，在层叠规则上小于 <code>block</code> 元素，所以会被遮盖掉。当我们对于 <code>class=&#39;con&#39;</code> 的元素没有设置 <code>opacity</code>的时候，效果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png\" alt></p>\n<p>这样效果的原因是因为：使用了 <code>position: relative</code> 和 <code>z-index: -1</code> 形成的层叠上下文，在层叠规则上要低于 其他的<code>block</code> 元素，因此图片中的红色方块就被遮挡住了；</p>\n<p>然而，当我们对元素应用 <code>opacity</code> 当 <code>opacity</code> 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  </p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png\" alt></p>\n<p>Magic!</p>\n<p>如上,</p>\n<p>因为我们对于 <code>class = &#39;con&#39;</code> 设置了 <code>opacity: 0.7</code> 创建了层叠上下文，其子元素 <code>class =&#39;text&#39;</code> 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；</p>\n<blockquote>\n<p>上面对于使用 <code>opacity</code> 创建的层叠上下文，来解释子元素会受到父元素 <code>opacity</code> 的影响，实际上，我们也可以认为属性 <code>opacity</code> 具有继承性，子元素会继承父元素的 <code>opacity</code> 属性</p>\n</blockquote>\n<p>对于使用  <code>opacity</code> 会影响到子元素的效果，如果我们想让子元素不受到父元素  <code>opacity</code> 的影响， 解决办法有下面的几种方法：</p>\n<blockquote>\n<p>借用 <code>background: rgba()</code> 了来实现</p>\n</blockquote>\n<p>使用 这个属性可以避免 后代子元素使用 <code>opacity</code> 造成的干扰效果，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(R,G,B,A)</span><br><span class=\"line\">// R: 代表红色取值</span><br><span class=\"line\">// G: 代表绿色取值</span><br><span class=\"line\">// B: 代表蓝色取值</span><br><span class=\"line\">// A: 代表透明度</span><br><span class=\"line\">// R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色</span><br></pre></td></tr></table></figure>\n<p>因此，上面的问题，我们使用 <code>rgba</code> 来解决：</p>\n<p><code>background: rgba(0,0,255,0.5)</code> </p>\n<blockquote>\n<p>还有一种方法，是让被 <code>opacity</code> 不作用在父元素上</p>\n</blockquote>\n<p>html: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;text&apos;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是要进行显示的元素&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;back&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blo &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.back &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">        opacity: 0.2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p> 效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png\" alt></p>\n<h4 id=\"层叠上下文的特性：\"><a href=\"#层叠上下文的特性：\" class=\"headerlink\" title=\"层叠上下文的特性：\"></a>层叠上下文的特性：</h4><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高；</li>\n<li>层叠上下文可以阻断元素的混合模式；</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 </li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>​    最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。</p>\n<h3 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h3><p>普通元素使用css的特殊属性可以创建层叠上下文，<del>创建层叠上下文的元素的层级会高于普通的元素</del> ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。</p>\n<p>在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。</p>\n<h3 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h3><p>层叠水平类似 ‘level’ , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。</p>\n<p>普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。</p>\n<h3 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><p>层叠顺序定义的是在相同的层叠上下文中  <strong>元素发生层叠的时候</strong> ，特定的显示顺序, 层叠顺序图表引入顺序如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png\" alt=\" \"> </p>\n<blockquote>\n<p>注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 <code>dispplay: inline-block</code> 是个例外，我想是因为在 CSS 中 <code>内容主要，样式次之</code>的原因吧， <code>inline-block</code>  会被认为是内容 ， <code>block</code> 会被认为属于布局的样式</p>\n</blockquote>\n<p>如下代码所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin-bottom: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png\" alt=\"&#39;&#39;\"></p>\n<p>如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？</p>\n<p>因为我们给 block2元素添加了 <code>display: inline-block</code> 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。</p>\n<blockquote>\n<p>下面是两条非常重要的层叠准则如下 :</p>\n<p>1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）</p>\n<p>2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素</p>\n</blockquote>\n<h3 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h3><p>如何创建层叠上下文呢？这里有三种途径：</p>\n<p>1.页面的根元素( html )本身带有层叠上下文</p>\n<p>对于页面的根元素 <code>html</code> 本身具有层叠上下文的</p>\n<p>2.对于包含有 <code>position: absolute</code>  <code>position: relative</code> 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)</p>\n<p>例如代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .block2 &#123;</span><br><span class=\"line\">        margin-top: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第一种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      z-index: 2;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第二种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      z-index: 0;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1000;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过对于css样式的改变出现下面的这几种情况：</p>\n<p>第一种情况:</p>\n<p>这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 <code>z-index</code> 进行比较没有起作用   <strong>使用 <code>z-index</code>只对于层叠上下文的元素起作用</strong></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png\" alt></p>\n<p>第二种情况：</p>\n<p>使用 <code>position: relative</code>  和 <code>z-index</code> 创建了层叠上下文， <del>在层次上，层叠上下文的要高于普通元素</del>，因为使用 <code>z-index: 0</code> 的层叠水平会高于 display:block  元素，因此会出现下面的效果</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png\" alt></p>\n<p>3.使用其他特殊的 css3  属性创建的层叠上下文。</p>\n<p>使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:</p>\n<p>1.当一个元素的 <strong>父元素</strong> 声明 <code>display: flex | display: inline-flex</code> 的时候，并且该元素的 <code>z-index</code> 不是 <code>auto</code> 而是数数值的时候，该元素变为层叠上下文元素；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">   &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .con &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block1 &#123;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     .block2 &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     .block1 &#123;</span><br><span class=\"line\">         z-index: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面</p>\n<p>但是，当我们给 block1 添加了一个 <code>z-index</code>  不为 auto的值的时候，情况发生变化了, Magic !</p>\n<p>如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png\" alt></p>\n<p>这是因为添加了 <code>z-index</code> 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 <code>display: block</code> 的普通元素，如果 <code>z-index</code> 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 <code>display: block</code> 元素的。</p>\n<ol start=\"2\">\n<li><p>使用 CSS 中的 <code>opacity</code> 创建的层叠上下文元素:</p>\n<p>我们有时候会出现想让 不透明元素内的元素显示正常，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class= &apos;text&apos;&gt;我是一段文字&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;sytle&gt;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在实际上，元素内的文字也会被透明度影响，这被认为是 使用 <code>opacity</code> 创建了层叠上下文元素</p>\n<p>因为，在没有使用 <code>opacity</code> 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 <code>z-index</code> 小于零，在层叠规则上小于 <code>block</code> 元素，所以会被遮盖掉。当我们对于 <code>class=&#39;con&#39;</code> 的元素没有设置 <code>opacity</code>的时候，效果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png\" alt></p>\n<p>这样效果的原因是因为：使用了 <code>position: relative</code> 和 <code>z-index: -1</code> 形成的层叠上下文，在层叠规则上要低于 其他的<code>block</code> 元素，因此图片中的红色方块就被遮挡住了；</p>\n<p>然而，当我们对元素应用 <code>opacity</code> 当 <code>opacity</code> 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  </p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png\" alt></p>\n<p>Magic!</p>\n<p>如上,</p>\n<p>因为我们对于 <code>class = &#39;con&#39;</code> 设置了 <code>opacity: 0.7</code> 创建了层叠上下文，其子元素 <code>class =&#39;text&#39;</code> 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；</p>\n<blockquote>\n<p>上面对于使用 <code>opacity</code> 创建的层叠上下文，来解释子元素会受到父元素 <code>opacity</code> 的影响，实际上，我们也可以认为属性 <code>opacity</code> 具有继承性，子元素会继承父元素的 <code>opacity</code> 属性</p>\n</blockquote>\n<p>对于使用  <code>opacity</code> 会影响到子元素的效果，如果我们想让子元素不受到父元素  <code>opacity</code> 的影响， 解决办法有下面的几种方法：</p>\n<blockquote>\n<p>借用 <code>background: rgba()</code> 了来实现</p>\n</blockquote>\n<p>使用 这个属性可以避免 后代子元素使用 <code>opacity</code> 造成的干扰效果，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(R,G,B,A)</span><br><span class=\"line\">// R: 代表红色取值</span><br><span class=\"line\">// G: 代表绿色取值</span><br><span class=\"line\">// B: 代表蓝色取值</span><br><span class=\"line\">// A: 代表透明度</span><br><span class=\"line\">// R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色</span><br></pre></td></tr></table></figure>\n<p>因此，上面的问题，我们使用 <code>rgba</code> 来解决：</p>\n<p><code>background: rgba(0,0,255,0.5)</code> </p>\n<blockquote>\n<p>还有一种方法，是让被 <code>opacity</code> 不作用在父元素上</p>\n</blockquote>\n<p>html: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;text&apos;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是要进行显示的元素&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;back&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blo &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.back &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">        opacity: 0.2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p> 效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png\" alt></p>\n<h4 id=\"层叠上下文的特性：\"><a href=\"#层叠上下文的特性：\" class=\"headerlink\" title=\"层叠上下文的特性：\"></a>层叠上下文的特性：</h4><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高；</li>\n<li>层叠上下文可以阻断元素的混合模式；</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 </li>\n</ul>\n</li>\n</ol>\n"},{"title":"CSS居中效果","date":"2017-09-02T02:53:26.000Z","_content":"\n使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。\n\n### 居中方法\n\n#### 水平居中\n\n##### 行内元素的水平居中\n\n使用 `text-align` 的方法实现行内元素的水平居中\n\n1. `text-align: center` : 实现块状元素内部 行元素的水平居中\n\n```\n<div id = 'content'>\n\t<span>我是一段文字</span>\n</div>\n<style>\n\t#content {\n      text-align: center;\n\t}\n</style>\n```\n\n\n\n##### 块状元素的水平居中方法\n\n1.使用 `margin` 进行定位\n\n```\n<div id='content'>\n\t<div id = 'block'>\n\t</div>\n</div>\n<style>\n\t#content {\n    \twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: blue;\n\t}\n\t#block {\n       width: 50px;\n       height: 50px;\n       margin: auto;\n\t}\n</style>\n```\n\n* 注意， 对于块状元素使用 `margin: auto` 只能实现块状元素在父级块状元素内的水平居中\n\n  >如果在正常流中一个块元素的 `margin-top   margin-bottom ` 设为 `auto` 的时候，这个元素的 margin  会自动计算为 0\n  >\n  >​\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png)\n\n在上面的图片中，尽管设置了 `margin-top : 20px`  但是由于 `margin: auto` 的存在，将块元素的 `margin-top` 重新计算为 0\n\n2.借用定位元素  `position: absolute`\n\n借用定位元素实现的居中，可以实现水平，垂直居中的效果\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auto;\n```\n\n水平居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\nleft: 0;\nright: 0;\nmargin: auto;\n```\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auot;\n```\n\n完全居中:\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin: auto\n```\n\n3.借用 `display: inline-block`  来实现\n\n`display: inline-block` 这个属性很有意思:\n\n>使用了 `display: inline-block` 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列\n\n因此，我们的思路是：\n\n对于要进行水平居中的块状元素应用 `display:inline-block` , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 `text-align: center`\n\n#### 垂直居中\n\n##### 行内元素的垂直居中\n\n1.对于单行元素，使用 `line-height: height` 实现\n\n2.对于多行元素的垂直居中方法，使用 `display: table-cell`\n\n```\n<div class = 'content'>\n\t<p>我是一段文字</p>\n\t<p>我是另一段文字</p>\n</div>\n\nCSS:\n\n.content {\n  display: table-cell;\n  vertical-align: middle\n}\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png)\n\n\n\n##### 块状元素的垂直居中\n\n1.使用 `position: absolute` 来实现\n\n2.子元素声明  `display: table-cell`  `display: inline-block`  `vertical-align: middle` 来实现\n\n#### 完全居中\n\n1. `position: absolute` 来实现\n\n2. 使用  `display: table-cell`, 这时候 子元素必须要声明  `display: inline-block`\n\n   ```\n   <div id='good'>\n   \t<div class='child'></div>\n   </div>\n   <style>\n   \t#good{\n   \t\tdisplay:table-cell;\n   \t\tvertical-align: middle;\n   \t\ttext-align: center;\n   \t\twidth: 200px;\n   \t\theight: 200px;\n   \t\tbackground-color: blue;\n   \t}\n   \t.child {\n   \t\tdisplay: inline-block;\n   \t\twidth: 50px;\n   \t\theight: 50px;\n   \t\tbackground-color: red;\n   \t}\n   \t\n   ```\n\n2.使用 `display: flex` 实现居中的效果\n\n```html\n<div class=\"parent\">\n  <div class=\"children\">\n  </div>\n</div>\n```\n\n```css\n.parent {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n\n\n\n","source":"_posts/CSS居中效果.md","raw":"---\ntitle: CSS居中效果\ndate: 2017-09-02 10:53:26\ntags: CSS 居中\ncategories: CSS\n---\n\n使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。\n\n### 居中方法\n\n#### 水平居中\n\n##### 行内元素的水平居中\n\n使用 `text-align` 的方法实现行内元素的水平居中\n\n1. `text-align: center` : 实现块状元素内部 行元素的水平居中\n\n```\n<div id = 'content'>\n\t<span>我是一段文字</span>\n</div>\n<style>\n\t#content {\n      text-align: center;\n\t}\n</style>\n```\n\n\n\n##### 块状元素的水平居中方法\n\n1.使用 `margin` 进行定位\n\n```\n<div id='content'>\n\t<div id = 'block'>\n\t</div>\n</div>\n<style>\n\t#content {\n    \twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: blue;\n\t}\n\t#block {\n       width: 50px;\n       height: 50px;\n       margin: auto;\n\t}\n</style>\n```\n\n* 注意， 对于块状元素使用 `margin: auto` 只能实现块状元素在父级块状元素内的水平居中\n\n  >如果在正常流中一个块元素的 `margin-top   margin-bottom ` 设为 `auto` 的时候，这个元素的 margin  会自动计算为 0\n  >\n  >​\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png)\n\n在上面的图片中，尽管设置了 `margin-top : 20px`  但是由于 `margin: auto` 的存在，将块元素的 `margin-top` 重新计算为 0\n\n2.借用定位元素  `position: absolute`\n\n借用定位元素实现的居中，可以实现水平，垂直居中的效果\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auto;\n```\n\n水平居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\nleft: 0;\nright: 0;\nmargin: auto;\n```\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auot;\n```\n\n完全居中:\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin: auto\n```\n\n3.借用 `display: inline-block`  来实现\n\n`display: inline-block` 这个属性很有意思:\n\n>使用了 `display: inline-block` 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列\n\n因此，我们的思路是：\n\n对于要进行水平居中的块状元素应用 `display:inline-block` , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 `text-align: center`\n\n#### 垂直居中\n\n##### 行内元素的垂直居中\n\n1.对于单行元素，使用 `line-height: height` 实现\n\n2.对于多行元素的垂直居中方法，使用 `display: table-cell`\n\n```\n<div class = 'content'>\n\t<p>我是一段文字</p>\n\t<p>我是另一段文字</p>\n</div>\n\nCSS:\n\n.content {\n  display: table-cell;\n  vertical-align: middle\n}\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png)\n\n\n\n##### 块状元素的垂直居中\n\n1.使用 `position: absolute` 来实现\n\n2.子元素声明  `display: table-cell`  `display: inline-block`  `vertical-align: middle` 来实现\n\n#### 完全居中\n\n1. `position: absolute` 来实现\n\n2. 使用  `display: table-cell`, 这时候 子元素必须要声明  `display: inline-block`\n\n   ```\n   <div id='good'>\n   \t<div class='child'></div>\n   </div>\n   <style>\n   \t#good{\n   \t\tdisplay:table-cell;\n   \t\tvertical-align: middle;\n   \t\ttext-align: center;\n   \t\twidth: 200px;\n   \t\theight: 200px;\n   \t\tbackground-color: blue;\n   \t}\n   \t.child {\n   \t\tdisplay: inline-block;\n   \t\twidth: 50px;\n   \t\theight: 50px;\n   \t\tbackground-color: red;\n   \t}\n   \t\n   ```\n\n2.使用 `display: flex` 实现居中的效果\n\n```html\n<div class=\"parent\">\n  <div class=\"children\">\n  </div>\n</div>\n```\n\n```css\n.parent {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n\n\n\n","slug":"CSS居中效果","published":1,"updated":"2020-09-14T06:36:25.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5i0008i2osebtj8kd1","content":"<p>使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。</p>\n<h3 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><h5 id=\"行内元素的水平居中\"><a href=\"#行内元素的水平居中\" class=\"headerlink\" title=\"行内元素的水平居中\"></a>行内元素的水平居中</h5><p>使用 <code>text-align</code> 的方法实现行内元素的水平居中</p>\n<ol>\n<li><code>text-align: center</code> : 实现块状元素内部 行元素的水平居中</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;span&gt;我是一段文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"块状元素的水平居中方法\"><a href=\"#块状元素的水平居中方法\" class=\"headerlink\" title=\"块状元素的水平居中方法\"></a>块状元素的水平居中方法</h5><p>1.使用 <code>margin</code> 进行定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;div id = &apos;block&apos;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">    \twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#block &#123;</span><br><span class=\"line\">       width: 50px;</span><br><span class=\"line\">       height: 50px;</span><br><span class=\"line\">       margin: auto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注意， 对于块状元素使用 <code>margin: auto</code> 只能实现块状元素在父级块状元素内的水平居中</p>\n<blockquote>\n<p>如果在正常流中一个块元素的 <code>margin-top   margin-bottom</code> 设为 <code>auto</code> 的时候，这个元素的 margin  会自动计算为 0</p>\n<p>​</p>\n</blockquote>\n</li>\n</ul>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png\" alt></p>\n<p>在上面的图片中，尽管设置了 <code>margin-top : 20px</code>  但是由于 <code>margin: auto</code> 的存在，将块元素的 <code>margin-top</code> 重新计算为 0</p>\n<p>2.借用定位元素  <code>position: absolute</code></p>\n<p>借用定位元素实现的居中，可以实现水平，垂直居中的效果</p>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>水平居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auot;</span><br></pre></td></tr></table></figure>\n<p>完全居中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto</span><br></pre></td></tr></table></figure>\n<p>3.借用 <code>display: inline-block</code>  来实现</p>\n<p><code>display: inline-block</code> 这个属性很有意思:</p>\n<blockquote>\n<p>使用了 <code>display: inline-block</code> 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列</p>\n</blockquote>\n<p>因此，我们的思路是：</p>\n<p>对于要进行水平居中的块状元素应用 <code>display:inline-block</code> , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 <code>text-align: center</code></p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><h5 id=\"行内元素的垂直居中\"><a href=\"#行内元素的垂直居中\" class=\"headerlink\" title=\"行内元素的垂直居中\"></a>行内元素的垂直居中</h5><p>1.对于单行元素，使用 <code>line-height: height</code> 实现</p>\n<p>2.对于多行元素的垂直居中方法，使用 <code>display: table-cell</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是一段文字&lt;/p&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是另一段文字&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png\" alt></p>\n<h5 id=\"块状元素的垂直居中\"><a href=\"#块状元素的垂直居中\" class=\"headerlink\" title=\"块状元素的垂直居中\"></a>块状元素的垂直居中</h5><p>1.使用 <code>position: absolute</code> 来实现</p>\n<p>2.子元素声明  <code>display: table-cell</code>  <code>display: inline-block</code>  <code>vertical-align: middle</code> 来实现</p>\n<h4 id=\"完全居中\"><a href=\"#完全居中\" class=\"headerlink\" title=\"完全居中\"></a>完全居中</h4><ol>\n<li><p><code>position: absolute</code> 来实现</p>\n</li>\n<li><p>使用  <code>display: table-cell</code>, 这时候 子元素必须要声明  <code>display: inline-block</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;good&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;child&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#good&#123;</span><br><span class=\"line\">\t\tdisplay:table-cell;</span><br><span class=\"line\">\t\tvertical-align: middle;</span><br><span class=\"line\">\t\ttext-align: center;</span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.child &#123;</span><br><span class=\"line\">\t\tdisplay: inline-block;</span><br><span class=\"line\">\t\twidth: 50px;</span><br><span class=\"line\">\t\theight: 50px;</span><br><span class=\"line\">\t\tbackground-color: red;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>display: flex</code> 实现居中的效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"children\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。</p>\n<h3 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><h5 id=\"行内元素的水平居中\"><a href=\"#行内元素的水平居中\" class=\"headerlink\" title=\"行内元素的水平居中\"></a>行内元素的水平居中</h5><p>使用 <code>text-align</code> 的方法实现行内元素的水平居中</p>\n<ol>\n<li><code>text-align: center</code> : 实现块状元素内部 行元素的水平居中</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;span&gt;我是一段文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"块状元素的水平居中方法\"><a href=\"#块状元素的水平居中方法\" class=\"headerlink\" title=\"块状元素的水平居中方法\"></a>块状元素的水平居中方法</h5><p>1.使用 <code>margin</code> 进行定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;div id = &apos;block&apos;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">    \twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#block &#123;</span><br><span class=\"line\">       width: 50px;</span><br><span class=\"line\">       height: 50px;</span><br><span class=\"line\">       margin: auto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注意， 对于块状元素使用 <code>margin: auto</code> 只能实现块状元素在父级块状元素内的水平居中</p>\n<blockquote>\n<p>如果在正常流中一个块元素的 <code>margin-top   margin-bottom</code> 设为 <code>auto</code> 的时候，这个元素的 margin  会自动计算为 0</p>\n<p>​</p>\n</blockquote>\n</li>\n</ul>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png\" alt></p>\n<p>在上面的图片中，尽管设置了 <code>margin-top : 20px</code>  但是由于 <code>margin: auto</code> 的存在，将块元素的 <code>margin-top</code> 重新计算为 0</p>\n<p>2.借用定位元素  <code>position: absolute</code></p>\n<p>借用定位元素实现的居中，可以实现水平，垂直居中的效果</p>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>水平居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auot;</span><br></pre></td></tr></table></figure>\n<p>完全居中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto</span><br></pre></td></tr></table></figure>\n<p>3.借用 <code>display: inline-block</code>  来实现</p>\n<p><code>display: inline-block</code> 这个属性很有意思:</p>\n<blockquote>\n<p>使用了 <code>display: inline-block</code> 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列</p>\n</blockquote>\n<p>因此，我们的思路是：</p>\n<p>对于要进行水平居中的块状元素应用 <code>display:inline-block</code> , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 <code>text-align: center</code></p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><h5 id=\"行内元素的垂直居中\"><a href=\"#行内元素的垂直居中\" class=\"headerlink\" title=\"行内元素的垂直居中\"></a>行内元素的垂直居中</h5><p>1.对于单行元素，使用 <code>line-height: height</code> 实现</p>\n<p>2.对于多行元素的垂直居中方法，使用 <code>display: table-cell</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是一段文字&lt;/p&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是另一段文字&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png\" alt></p>\n<h5 id=\"块状元素的垂直居中\"><a href=\"#块状元素的垂直居中\" class=\"headerlink\" title=\"块状元素的垂直居中\"></a>块状元素的垂直居中</h5><p>1.使用 <code>position: absolute</code> 来实现</p>\n<p>2.子元素声明  <code>display: table-cell</code>  <code>display: inline-block</code>  <code>vertical-align: middle</code> 来实现</p>\n<h4 id=\"完全居中\"><a href=\"#完全居中\" class=\"headerlink\" title=\"完全居中\"></a>完全居中</h4><ol>\n<li><p><code>position: absolute</code> 来实现</p>\n</li>\n<li><p>使用  <code>display: table-cell</code>, 这时候 子元素必须要声明  <code>display: inline-block</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;good&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;child&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#good&#123;</span><br><span class=\"line\">\t\tdisplay:table-cell;</span><br><span class=\"line\">\t\tvertical-align: middle;</span><br><span class=\"line\">\t\ttext-align: center;</span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.child &#123;</span><br><span class=\"line\">\t\tdisplay: inline-block;</span><br><span class=\"line\">\t\twidth: 50px;</span><br><span class=\"line\">\t\theight: 50px;</span><br><span class=\"line\">\t\tbackground-color: red;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>display: flex</code> 实现居中的效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"children\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JSONP跨域 ajax请求","date":"2017-09-03T04:01:26.000Z","_content":"\n使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 `jsonp` 实现的跨域请求\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<div id=\"div\"></div>\n<body>\n<div>\n    号码归属地查询<input id='phone' type='text' ><button id = 'btn'>查询手机号归属地</button>\n    <p>您的手机号码归属地是  <span id='city'></span></p>\n</div>\n<script type=\"text/javascript\">\n   function doFunction (data) {\n            if (!data.result) {\n                return;\n            } \n            document.getElementById('city').innerHTML = data.result.city;\n        \n        }\n    window.onload = function () {\n        var sendObj = {\n            url: 'http://apis.juhe.cn/mobile/get',\n            phone: '13429667914',\n            key: '4ebdd2325a4ce36fa7ca55e910c185e9',\n            callback: 'doFunction'\n        };\n        function sendLink (obj) {\n            var link = obj.url;\n            for (var key in obj) {\n                if (key !== 'url') {\n                    link = link + (~link.indexOf('?') ? '&' : '?' );\n                    link = link + key + '=' + obj[key];\n                }\n            }\n            return link;\n        }\n        document.getElementById('btn').addEventListener('click', function () {\n            var body = document.getElementsByTagName('body')[0];\n            var script = document.createElement('script');\n            sendObj.phone = document.getElementById('phone').value;\n            script.setAttribute('src', sendLink(sendObj));\n            if (body.getElementsByTagName('script').length === 2) {\n                body.replaceChild( script ,body.lastChild);\n            } else {\n                document.getElementsByTagName('body')[0].appendChild(script);\n            }\n        });\n    }\n</script>\n<!--\n   <script src=\"http://apis.juhe.cn/mobile/get?phone=13429667914&key=4ebdd2325a4ce36fa7ca55e910c185e9&callback=doFunction\"></script>\n-->\n</body>\n</html>\n```\n\n#### ajax 请求\n\n原生的 ajax 请求如下:\n\n```\nvar request;\nif (window.XMLHttpRequest) {\n\trequest = new XMLHttpRequest();  \n} else {\n// for IE\n    request = new ActiveObject();\n}\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    console.log(request.responseText);\n  }\n};\nrequest.open('get', url, false / true);\nrequest.send();\n```\n\n使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；\n\n`open` 方法\n\n使用 `open` 方法接收三个参数:\n\n要发送的请求类型:  'get '    或者 'post'  \n\n请求的url : 注意 `只能向同一个域中使用相同端口和协议 URL 发出请求`，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；\n\n什么是跨域？\n\n***\n\n只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:\n\n一个 URL 地址如下:\n\n`https://www.baidu.com:8080`\n\n`https`  协议， 用来定义浏览器打开文件的形式\n\n`www.baidu.com` 域名,  其中     `baidu.com`  主域     `www.baidu.com`  子域\n\n`:8080` 端口\n\n当两个 `URL` 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  \n\n但是这种情况:\n\n`https:// www.a.com/javascript/a.js`\n\n`https:// www.a.com/b.js`\n\n这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到\n\nhttps://segmentfault.com/a/1190000000718840\n\n\n\nhttp://blog.csdn.net/seebetpro/article/details/51326260\n\n***\n\n布尔值：表示是否进行异步\n\n在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:\n\n```\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    // 表示请求成功之后，并且有返回数据之后要进行的动作\n  }\n}\n```\n\n`status` : 表示响应的 `http` 状态,对于  http 的状态码， 要记住几个重要的：[http状态码]('http://www.cnblogs.com/sprinng/p/6559431.html')\n\n2XX :  表示请求成功  \n\n`200` 请求成功， `201` 已创建  `202` 接收   `204` 无内容  \n\n3XX: 表示重定向  \n\n`300` 多路选择  `301` 永久转移  `302` 暂时转移  `304` 未修改\n\n4XX: 客户方错误  \n\n`400` 错误请求  `401` 未认证   `408` 请求超时  `410` 失败\n\n5XX: 服务器错误\n\n`500` 服务器内部错误  `501` 未实现   `504` 网关超时  \n\n关于这些请求的具体情况：\n\n2XX: 表示已经接受到了请求\n\n| 状态码  | 含义                   |\n| ---- | -------------------- |\n| 200  | 表示请求已经成功             |\n| 201  | 表示请求已经被创建            |\n| 202  | 服务器已经接收到了请求， 但是尚未处理  |\n| 204  | 服务器已经处理了请求， 但是没有返回任何 |\n\n3XX:资源重定向\n\n| 状态码  | 含义                                       |\n| ---- | ---------------------------------------- |\n| 301  | 表示永久性重定向， 请求的资源分配到新的 url                 |\n| 302  | 表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问 |\n| 304  | 表示请求的资源已经找到， 但是不符合条件要求                   |\n\n4XX:客户端请求错误\n\n| 状态码  | 说明                                |\n| :--- | --------------------------------- |\n| 400  | 表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。 |\n| 401  | 表示发送的请求需要通过使用 HTTP 认证             |\n| 403  | 表示客户端想要请求的资源被服务器拒绝访问              |\n| 404  | 表示在服务器上没有找到请求的资源                  |\n\n5XX: 服务器错误\n\n| 状态码        | 说明                    |\n| ---------- | --------------------- |\n| 500（服务器错误） | 表示服务器在执行请求的时候发生了错误    |\n| 503（服务器正忙） | 表示现在服务器正在处于超负载状态，无法处理 |\n\n`readyState` 表示 `request` 对象的  `readyState` 对象，属性可取的值如下：\n\n`0` : 未初始化，尚未调用 open() 方法\n\n`1` : 启动， 已经调用 open  方法，尚未调用 send() 方法\n\n`2` : 发送，已经调用 send() 方法，但是尚未接收到响应\n\n`3`: 接收，表示已经接受到部分数据\n\n`4`: 完成, 已经接收到全部的响应数据\n\n> 使用 `get` 和 `post` 请求的区别\n\n##### 1. 两种方式传递参数的方式不同\n\n`Get` 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 \n\n`post` 请求是将作为 HTTP  消息的实体内容发送给服务器\n\n##### 2. 两者缓存不同\n\n使用 `get` 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据\n\n##### 3.服务器端 针对这两种方式的获取参数是不同的\n\n在客户端通过使用 `get` 请求的时候，服务器端通过使用 `Request.QueryString`  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 `Request.Form` 来进行获取到参数\n\n为什么要使用两种方式:\n\n当请求没有副作用的时候， 例如进行搜索数据， 可以使用 `get` 方法， 当请求存在副作用的时候，使用 `post `进行请求\n\n使用 `post ` 的情况:\n\n* 请求的结果存在副作用，例如，向数据库内添加新的数据行\n* 使用 GET 方法, 使用表单上添加的数据使得 URL太长\n* 进行传送的数据不是7 位的 ASCII 编码\n\n使用 `get` 的情况\n\n* 请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索\n* 请求结果无持续性的副作用\n* 收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符\n\n\n\n### 如何使用 ajax 实现跨域？\n\n对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？\n\n#### 1.使用跨源资源共享(CORS)\n\n跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:\n\n浏览器向服务器发送请求的时候，添加一个额外的 `origin` 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)\n\n如果服务器认为请求可以接受，可以在 `Access-Control-Allow-Origin` 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png)\n\n如上图所示，实现了公共资源的共享\n\n#### 2.使用 JSONP\n\n使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求\n\n缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 `get` 请求进行\n\n","source":"_posts/JSONP跨域-ajax请求.md","raw":"---\ntitle: JSONP跨域 ajax请求\ndate: 2017-09-03 12:01:26\ntags: ajax\ncategories: 代码集\n---\n\n使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 `jsonp` 实现的跨域请求\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<div id=\"div\"></div>\n<body>\n<div>\n    号码归属地查询<input id='phone' type='text' ><button id = 'btn'>查询手机号归属地</button>\n    <p>您的手机号码归属地是  <span id='city'></span></p>\n</div>\n<script type=\"text/javascript\">\n   function doFunction (data) {\n            if (!data.result) {\n                return;\n            } \n            document.getElementById('city').innerHTML = data.result.city;\n        \n        }\n    window.onload = function () {\n        var sendObj = {\n            url: 'http://apis.juhe.cn/mobile/get',\n            phone: '13429667914',\n            key: '4ebdd2325a4ce36fa7ca55e910c185e9',\n            callback: 'doFunction'\n        };\n        function sendLink (obj) {\n            var link = obj.url;\n            for (var key in obj) {\n                if (key !== 'url') {\n                    link = link + (~link.indexOf('?') ? '&' : '?' );\n                    link = link + key + '=' + obj[key];\n                }\n            }\n            return link;\n        }\n        document.getElementById('btn').addEventListener('click', function () {\n            var body = document.getElementsByTagName('body')[0];\n            var script = document.createElement('script');\n            sendObj.phone = document.getElementById('phone').value;\n            script.setAttribute('src', sendLink(sendObj));\n            if (body.getElementsByTagName('script').length === 2) {\n                body.replaceChild( script ,body.lastChild);\n            } else {\n                document.getElementsByTagName('body')[0].appendChild(script);\n            }\n        });\n    }\n</script>\n<!--\n   <script src=\"http://apis.juhe.cn/mobile/get?phone=13429667914&key=4ebdd2325a4ce36fa7ca55e910c185e9&callback=doFunction\"></script>\n-->\n</body>\n</html>\n```\n\n#### ajax 请求\n\n原生的 ajax 请求如下:\n\n```\nvar request;\nif (window.XMLHttpRequest) {\n\trequest = new XMLHttpRequest();  \n} else {\n// for IE\n    request = new ActiveObject();\n}\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    console.log(request.responseText);\n  }\n};\nrequest.open('get', url, false / true);\nrequest.send();\n```\n\n使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；\n\n`open` 方法\n\n使用 `open` 方法接收三个参数:\n\n要发送的请求类型:  'get '    或者 'post'  \n\n请求的url : 注意 `只能向同一个域中使用相同端口和协议 URL 发出请求`，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；\n\n什么是跨域？\n\n***\n\n只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:\n\n一个 URL 地址如下:\n\n`https://www.baidu.com:8080`\n\n`https`  协议， 用来定义浏览器打开文件的形式\n\n`www.baidu.com` 域名,  其中     `baidu.com`  主域     `www.baidu.com`  子域\n\n`:8080` 端口\n\n当两个 `URL` 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  \n\n但是这种情况:\n\n`https:// www.a.com/javascript/a.js`\n\n`https:// www.a.com/b.js`\n\n这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到\n\nhttps://segmentfault.com/a/1190000000718840\n\n\n\nhttp://blog.csdn.net/seebetpro/article/details/51326260\n\n***\n\n布尔值：表示是否进行异步\n\n在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:\n\n```\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    // 表示请求成功之后，并且有返回数据之后要进行的动作\n  }\n}\n```\n\n`status` : 表示响应的 `http` 状态,对于  http 的状态码， 要记住几个重要的：[http状态码]('http://www.cnblogs.com/sprinng/p/6559431.html')\n\n2XX :  表示请求成功  \n\n`200` 请求成功， `201` 已创建  `202` 接收   `204` 无内容  \n\n3XX: 表示重定向  \n\n`300` 多路选择  `301` 永久转移  `302` 暂时转移  `304` 未修改\n\n4XX: 客户方错误  \n\n`400` 错误请求  `401` 未认证   `408` 请求超时  `410` 失败\n\n5XX: 服务器错误\n\n`500` 服务器内部错误  `501` 未实现   `504` 网关超时  \n\n关于这些请求的具体情况：\n\n2XX: 表示已经接受到了请求\n\n| 状态码  | 含义                   |\n| ---- | -------------------- |\n| 200  | 表示请求已经成功             |\n| 201  | 表示请求已经被创建            |\n| 202  | 服务器已经接收到了请求， 但是尚未处理  |\n| 204  | 服务器已经处理了请求， 但是没有返回任何 |\n\n3XX:资源重定向\n\n| 状态码  | 含义                                       |\n| ---- | ---------------------------------------- |\n| 301  | 表示永久性重定向， 请求的资源分配到新的 url                 |\n| 302  | 表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问 |\n| 304  | 表示请求的资源已经找到， 但是不符合条件要求                   |\n\n4XX:客户端请求错误\n\n| 状态码  | 说明                                |\n| :--- | --------------------------------- |\n| 400  | 表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。 |\n| 401  | 表示发送的请求需要通过使用 HTTP 认证             |\n| 403  | 表示客户端想要请求的资源被服务器拒绝访问              |\n| 404  | 表示在服务器上没有找到请求的资源                  |\n\n5XX: 服务器错误\n\n| 状态码        | 说明                    |\n| ---------- | --------------------- |\n| 500（服务器错误） | 表示服务器在执行请求的时候发生了错误    |\n| 503（服务器正忙） | 表示现在服务器正在处于超负载状态，无法处理 |\n\n`readyState` 表示 `request` 对象的  `readyState` 对象，属性可取的值如下：\n\n`0` : 未初始化，尚未调用 open() 方法\n\n`1` : 启动， 已经调用 open  方法，尚未调用 send() 方法\n\n`2` : 发送，已经调用 send() 方法，但是尚未接收到响应\n\n`3`: 接收，表示已经接受到部分数据\n\n`4`: 完成, 已经接收到全部的响应数据\n\n> 使用 `get` 和 `post` 请求的区别\n\n##### 1. 两种方式传递参数的方式不同\n\n`Get` 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 \n\n`post` 请求是将作为 HTTP  消息的实体内容发送给服务器\n\n##### 2. 两者缓存不同\n\n使用 `get` 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据\n\n##### 3.服务器端 针对这两种方式的获取参数是不同的\n\n在客户端通过使用 `get` 请求的时候，服务器端通过使用 `Request.QueryString`  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 `Request.Form` 来进行获取到参数\n\n为什么要使用两种方式:\n\n当请求没有副作用的时候， 例如进行搜索数据， 可以使用 `get` 方法， 当请求存在副作用的时候，使用 `post `进行请求\n\n使用 `post ` 的情况:\n\n* 请求的结果存在副作用，例如，向数据库内添加新的数据行\n* 使用 GET 方法, 使用表单上添加的数据使得 URL太长\n* 进行传送的数据不是7 位的 ASCII 编码\n\n使用 `get` 的情况\n\n* 请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索\n* 请求结果无持续性的副作用\n* 收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符\n\n\n\n### 如何使用 ajax 实现跨域？\n\n对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？\n\n#### 1.使用跨源资源共享(CORS)\n\n跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:\n\n浏览器向服务器发送请求的时候，添加一个额外的 `origin` 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)\n\n如果服务器认为请求可以接受，可以在 `Access-Control-Allow-Origin` 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png)\n\n如上图所示，实现了公共资源的共享\n\n#### 2.使用 JSONP\n\n使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求\n\n缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 `get` 请求进行\n\n","slug":"JSONP跨域-ajax请求","published":1,"updated":"2020-09-14T06:36:25.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5l000ci2osh8e15llr","content":"<p>使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 <code>jsonp</code> 实现的跨域请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    号码归属地查询&lt;input id=&apos;phone&apos; type=&apos;text&apos; &gt;&lt;button id = &apos;btn&apos;&gt;查询手机号归属地&lt;/button&gt;</span><br><span class=\"line\">    &lt;p&gt;您的手机号码归属地是  &lt;span id=&apos;city&apos;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   function doFunction (data) &#123;</span><br><span class=\"line\">            if (!data.result) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            document.getElementById(&apos;city&apos;).innerHTML = data.result.city;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    window.onload = function () &#123;</span><br><span class=\"line\">        var sendObj = &#123;</span><br><span class=\"line\">            url: &apos;http://apis.juhe.cn/mobile/get&apos;,</span><br><span class=\"line\">            phone: &apos;13429667914&apos;,</span><br><span class=\"line\">            key: &apos;4ebdd2325a4ce36fa7ca55e910c185e9&apos;,</span><br><span class=\"line\">            callback: &apos;doFunction&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        function sendLink (obj) &#123;</span><br><span class=\"line\">            var link = obj.url;</span><br><span class=\"line\">            for (var key in obj) &#123;</span><br><span class=\"line\">                if (key !== &apos;url&apos;) &#123;</span><br><span class=\"line\">                    link = link + (~link.indexOf(&apos;?&apos;) ? &apos;&amp;&apos; : &apos;?&apos; );</span><br><span class=\"line\">                    link = link + key + &apos;=&apos; + obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return link;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">            var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\">            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">            sendObj.phone = document.getElementById(&apos;phone&apos;).value;</span><br><span class=\"line\">            script.setAttribute(&apos;src&apos;, sendLink(sendObj));</span><br><span class=\"line\">            if (body.getElementsByTagName(&apos;script&apos;).length === 2) &#123;</span><br><span class=\"line\">                body.replaceChild( script ,body.lastChild);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                document.getElementsByTagName(&apos;body&apos;)[0].appendChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">   &lt;script src=&quot;http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=4ebdd2325a4ce36fa7ca55e910c185e9&amp;callback=doFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ajax-请求\"><a href=\"#ajax-请求\" class=\"headerlink\" title=\"ajax 请求\"></a>ajax 请求</h4><p>原生的 ajax 请求如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request;</span><br><span class=\"line\">if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">\trequest = new XMLHttpRequest();  </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// for IE</span><br><span class=\"line\">    request = new ActiveObject();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    console.log(request.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.open(&apos;get&apos;, url, false / true);</span><br><span class=\"line\">request.send();</span><br></pre></td></tr></table></figure>\n<p>使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；</p>\n<p><code>open</code> 方法</p>\n<p>使用 <code>open</code> 方法接收三个参数:</p>\n<p>要发送的请求类型:  ‘get ‘    或者 ‘post’  </p>\n<p>请求的url : 注意 <code>只能向同一个域中使用相同端口和协议 URL 发出请求</code>，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；</p>\n<p>什么是跨域？</p>\n<hr>\n<p>只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:</p>\n<p>一个 URL 地址如下:</p>\n<p><code>https://www.baidu.com:8080</code></p>\n<p><code>https</code>  协议， 用来定义浏览器打开文件的形式</p>\n<p><code>www.baidu.com</code> 域名,  其中     <code>baidu.com</code>  主域     <code>www.baidu.com</code>  子域</p>\n<p><code>:8080</code> 端口</p>\n<p>当两个 <code>URL</code> 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  </p>\n<p>但是这种情况:</p>\n<p><code>https:// www.a.com/javascript/a.js</code></p>\n<p><code>https:// www.a.com/b.js</code></p>\n<p>这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到</p>\n<p><a href=\"https://segmentfault.com/a/1190000000718840\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000718840</a></p>\n<p><a href=\"http://blog.csdn.net/seebetpro/article/details/51326260\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/seebetpro/article/details/51326260</a></p>\n<hr>\n<p>布尔值：表示是否进行异步</p>\n<p>在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    // 表示请求成功之后，并且有返回数据之后要进行的动作</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>status</code> : 表示响应的 <code>http</code> 状态,对于  http 的状态码， 要记住几个重要的：<a href=\"&#39;http://www.cnblogs.com/sprinng/p/6559431.html&#39;\">http状态码</a></p>\n<p>2XX :  表示请求成功  </p>\n<p><code>200</code> 请求成功， <code>201</code> 已创建  <code>202</code> 接收   <code>204</code> 无内容  </p>\n<p>3XX: 表示重定向  </p>\n<p><code>300</code> 多路选择  <code>301</code> 永久转移  <code>302</code> 暂时转移  <code>304</code> 未修改</p>\n<p>4XX: 客户方错误  </p>\n<p><code>400</code> 错误请求  <code>401</code> 未认证   <code>408</code> 请求超时  <code>410</code> 失败</p>\n<p>5XX: 服务器错误</p>\n<p><code>500</code> 服务器内部错误  <code>501</code> 未实现   <code>504</code> 网关超时  </p>\n<p>关于这些请求的具体情况：</p>\n<p>2XX: 表示已经接受到了请求</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>表示请求已经成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>表示请求已经被创建</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已经接收到了请求， 但是尚未处理</td>\n</tr>\n<tr>\n<td>204</td>\n<td>服务器已经处理了请求， 但是没有返回任何</td>\n</tr>\n</tbody>\n</table>\n<p>3XX:资源重定向</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td>表示永久性重定向， 请求的资源分配到新的 url</td>\n</tr>\n<tr>\n<td>302</td>\n<td>表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问</td>\n</tr>\n<tr>\n<td>304</td>\n<td>表示请求的资源已经找到， 但是不符合条件要求</td>\n</tr>\n</tbody>\n</table>\n<p>4XX:客户端请求错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">400</td>\n<td>表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401</td>\n<td>表示发送的请求需要通过使用 HTTP 认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403</td>\n<td>表示客户端想要请求的资源被服务器拒绝访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404</td>\n<td>表示在服务器上没有找到请求的资源</td>\n</tr>\n</tbody>\n</table>\n<p>5XX: 服务器错误</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500（服务器错误）</td>\n<td>表示服务器在执行请求的时候发生了错误</td>\n</tr>\n<tr>\n<td>503（服务器正忙）</td>\n<td>表示现在服务器正在处于超负载状态，无法处理</td>\n</tr>\n</tbody>\n</table>\n<p><code>readyState</code> 表示 <code>request</code> 对象的  <code>readyState</code> 对象，属性可取的值如下：</p>\n<p><code>0</code> : 未初始化，尚未调用 open() 方法</p>\n<p><code>1</code> : 启动， 已经调用 open  方法，尚未调用 send() 方法</p>\n<p><code>2</code> : 发送，已经调用 send() 方法，但是尚未接收到响应</p>\n<p><code>3</code>: 接收，表示已经接受到部分数据</p>\n<p><code>4</code>: 完成, 已经接收到全部的响应数据</p>\n<blockquote>\n<p>使用 <code>get</code> 和 <code>post</code> 请求的区别</p>\n</blockquote>\n<h5 id=\"1-两种方式传递参数的方式不同\"><a href=\"#1-两种方式传递参数的方式不同\" class=\"headerlink\" title=\"1. 两种方式传递参数的方式不同\"></a>1. 两种方式传递参数的方式不同</h5><p><code>Get</code> 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 </p>\n<p><code>post</code> 请求是将作为 HTTP  消息的实体内容发送给服务器</p>\n<h5 id=\"2-两者缓存不同\"><a href=\"#2-两者缓存不同\" class=\"headerlink\" title=\"2. 两者缓存不同\"></a>2. 两者缓存不同</h5><p>使用 <code>get</code> 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据</p>\n<h5 id=\"3-服务器端-针对这两种方式的获取参数是不同的\"><a href=\"#3-服务器端-针对这两种方式的获取参数是不同的\" class=\"headerlink\" title=\"3.服务器端 针对这两种方式的获取参数是不同的\"></a>3.服务器端 针对这两种方式的获取参数是不同的</h5><p>在客户端通过使用 <code>get</code> 请求的时候，服务器端通过使用 <code>Request.QueryString</code>  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 <code>Request.Form</code> 来进行获取到参数</p>\n<p>为什么要使用两种方式:</p>\n<p>当请求没有副作用的时候， 例如进行搜索数据， 可以使用 <code>get</code> 方法， 当请求存在副作用的时候，使用 <code>post</code>进行请求</p>\n<p>使用 <code>post</code> 的情况:</p>\n<ul>\n<li>请求的结果存在副作用，例如，向数据库内添加新的数据行</li>\n<li>使用 GET 方法, 使用表单上添加的数据使得 URL太长</li>\n<li>进行传送的数据不是7 位的 ASCII 编码</li>\n</ul>\n<p>使用 <code>get</code> 的情况</p>\n<ul>\n<li>请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索</li>\n<li>请求结果无持续性的副作用</li>\n<li>收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符</li>\n</ul>\n<h3 id=\"如何使用-ajax-实现跨域？\"><a href=\"#如何使用-ajax-实现跨域？\" class=\"headerlink\" title=\"如何使用 ajax 实现跨域？\"></a>如何使用 ajax 实现跨域？</h3><p>对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？</p>\n<h4 id=\"1-使用跨源资源共享-CORS\"><a href=\"#1-使用跨源资源共享-CORS\" class=\"headerlink\" title=\"1.使用跨源资源共享(CORS)\"></a>1.使用跨源资源共享(CORS)</h4><p>跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:</p>\n<p>浏览器向服务器发送请求的时候，添加一个额外的 <code>origin</code> 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)</p>\n<p>如果服务器认为请求可以接受，可以在 <code>Access-Control-Allow-Origin</code> 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png\" alt></p>\n<p>如上图所示，实现了公共资源的共享</p>\n<h4 id=\"2-使用-JSONP\"><a href=\"#2-使用-JSONP\" class=\"headerlink\" title=\"2.使用 JSONP\"></a>2.使用 JSONP</h4><p>使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求</p>\n<p>缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 <code>get</code> 请求进行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 <code>jsonp</code> 实现的跨域请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    号码归属地查询&lt;input id=&apos;phone&apos; type=&apos;text&apos; &gt;&lt;button id = &apos;btn&apos;&gt;查询手机号归属地&lt;/button&gt;</span><br><span class=\"line\">    &lt;p&gt;您的手机号码归属地是  &lt;span id=&apos;city&apos;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   function doFunction (data) &#123;</span><br><span class=\"line\">            if (!data.result) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            document.getElementById(&apos;city&apos;).innerHTML = data.result.city;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    window.onload = function () &#123;</span><br><span class=\"line\">        var sendObj = &#123;</span><br><span class=\"line\">            url: &apos;http://apis.juhe.cn/mobile/get&apos;,</span><br><span class=\"line\">            phone: &apos;13429667914&apos;,</span><br><span class=\"line\">            key: &apos;4ebdd2325a4ce36fa7ca55e910c185e9&apos;,</span><br><span class=\"line\">            callback: &apos;doFunction&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        function sendLink (obj) &#123;</span><br><span class=\"line\">            var link = obj.url;</span><br><span class=\"line\">            for (var key in obj) &#123;</span><br><span class=\"line\">                if (key !== &apos;url&apos;) &#123;</span><br><span class=\"line\">                    link = link + (~link.indexOf(&apos;?&apos;) ? &apos;&amp;&apos; : &apos;?&apos; );</span><br><span class=\"line\">                    link = link + key + &apos;=&apos; + obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return link;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">            var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\">            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">            sendObj.phone = document.getElementById(&apos;phone&apos;).value;</span><br><span class=\"line\">            script.setAttribute(&apos;src&apos;, sendLink(sendObj));</span><br><span class=\"line\">            if (body.getElementsByTagName(&apos;script&apos;).length === 2) &#123;</span><br><span class=\"line\">                body.replaceChild( script ,body.lastChild);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                document.getElementsByTagName(&apos;body&apos;)[0].appendChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">   &lt;script src=&quot;http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=4ebdd2325a4ce36fa7ca55e910c185e9&amp;callback=doFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ajax-请求\"><a href=\"#ajax-请求\" class=\"headerlink\" title=\"ajax 请求\"></a>ajax 请求</h4><p>原生的 ajax 请求如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request;</span><br><span class=\"line\">if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">\trequest = new XMLHttpRequest();  </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// for IE</span><br><span class=\"line\">    request = new ActiveObject();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    console.log(request.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.open(&apos;get&apos;, url, false / true);</span><br><span class=\"line\">request.send();</span><br></pre></td></tr></table></figure>\n<p>使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；</p>\n<p><code>open</code> 方法</p>\n<p>使用 <code>open</code> 方法接收三个参数:</p>\n<p>要发送的请求类型:  ‘get ‘    或者 ‘post’  </p>\n<p>请求的url : 注意 <code>只能向同一个域中使用相同端口和协议 URL 发出请求</code>，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；</p>\n<p>什么是跨域？</p>\n<hr>\n<p>只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:</p>\n<p>一个 URL 地址如下:</p>\n<p><code>https://www.baidu.com:8080</code></p>\n<p><code>https</code>  协议， 用来定义浏览器打开文件的形式</p>\n<p><code>www.baidu.com</code> 域名,  其中     <code>baidu.com</code>  主域     <code>www.baidu.com</code>  子域</p>\n<p><code>:8080</code> 端口</p>\n<p>当两个 <code>URL</code> 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  </p>\n<p>但是这种情况:</p>\n<p><code>https:// www.a.com/javascript/a.js</code></p>\n<p><code>https:// www.a.com/b.js</code></p>\n<p>这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到</p>\n<p><a href=\"https://segmentfault.com/a/1190000000718840\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000718840</a></p>\n<p><a href=\"http://blog.csdn.net/seebetpro/article/details/51326260\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/seebetpro/article/details/51326260</a></p>\n<hr>\n<p>布尔值：表示是否进行异步</p>\n<p>在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    // 表示请求成功之后，并且有返回数据之后要进行的动作</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>status</code> : 表示响应的 <code>http</code> 状态,对于  http 的状态码， 要记住几个重要的：<a href=\"&#39;http://www.cnblogs.com/sprinng/p/6559431.html&#39;\">http状态码</a></p>\n<p>2XX :  表示请求成功  </p>\n<p><code>200</code> 请求成功， <code>201</code> 已创建  <code>202</code> 接收   <code>204</code> 无内容  </p>\n<p>3XX: 表示重定向  </p>\n<p><code>300</code> 多路选择  <code>301</code> 永久转移  <code>302</code> 暂时转移  <code>304</code> 未修改</p>\n<p>4XX: 客户方错误  </p>\n<p><code>400</code> 错误请求  <code>401</code> 未认证   <code>408</code> 请求超时  <code>410</code> 失败</p>\n<p>5XX: 服务器错误</p>\n<p><code>500</code> 服务器内部错误  <code>501</code> 未实现   <code>504</code> 网关超时  </p>\n<p>关于这些请求的具体情况：</p>\n<p>2XX: 表示已经接受到了请求</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>表示请求已经成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>表示请求已经被创建</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已经接收到了请求， 但是尚未处理</td>\n</tr>\n<tr>\n<td>204</td>\n<td>服务器已经处理了请求， 但是没有返回任何</td>\n</tr>\n</tbody>\n</table>\n<p>3XX:资源重定向</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td>表示永久性重定向， 请求的资源分配到新的 url</td>\n</tr>\n<tr>\n<td>302</td>\n<td>表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问</td>\n</tr>\n<tr>\n<td>304</td>\n<td>表示请求的资源已经找到， 但是不符合条件要求</td>\n</tr>\n</tbody>\n</table>\n<p>4XX:客户端请求错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">400</td>\n<td>表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401</td>\n<td>表示发送的请求需要通过使用 HTTP 认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403</td>\n<td>表示客户端想要请求的资源被服务器拒绝访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404</td>\n<td>表示在服务器上没有找到请求的资源</td>\n</tr>\n</tbody>\n</table>\n<p>5XX: 服务器错误</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500（服务器错误）</td>\n<td>表示服务器在执行请求的时候发生了错误</td>\n</tr>\n<tr>\n<td>503（服务器正忙）</td>\n<td>表示现在服务器正在处于超负载状态，无法处理</td>\n</tr>\n</tbody>\n</table>\n<p><code>readyState</code> 表示 <code>request</code> 对象的  <code>readyState</code> 对象，属性可取的值如下：</p>\n<p><code>0</code> : 未初始化，尚未调用 open() 方法</p>\n<p><code>1</code> : 启动， 已经调用 open  方法，尚未调用 send() 方法</p>\n<p><code>2</code> : 发送，已经调用 send() 方法，但是尚未接收到响应</p>\n<p><code>3</code>: 接收，表示已经接受到部分数据</p>\n<p><code>4</code>: 完成, 已经接收到全部的响应数据</p>\n<blockquote>\n<p>使用 <code>get</code> 和 <code>post</code> 请求的区别</p>\n</blockquote>\n<h5 id=\"1-两种方式传递参数的方式不同\"><a href=\"#1-两种方式传递参数的方式不同\" class=\"headerlink\" title=\"1. 两种方式传递参数的方式不同\"></a>1. 两种方式传递参数的方式不同</h5><p><code>Get</code> 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 </p>\n<p><code>post</code> 请求是将作为 HTTP  消息的实体内容发送给服务器</p>\n<h5 id=\"2-两者缓存不同\"><a href=\"#2-两者缓存不同\" class=\"headerlink\" title=\"2. 两者缓存不同\"></a>2. 两者缓存不同</h5><p>使用 <code>get</code> 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据</p>\n<h5 id=\"3-服务器端-针对这两种方式的获取参数是不同的\"><a href=\"#3-服务器端-针对这两种方式的获取参数是不同的\" class=\"headerlink\" title=\"3.服务器端 针对这两种方式的获取参数是不同的\"></a>3.服务器端 针对这两种方式的获取参数是不同的</h5><p>在客户端通过使用 <code>get</code> 请求的时候，服务器端通过使用 <code>Request.QueryString</code>  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 <code>Request.Form</code> 来进行获取到参数</p>\n<p>为什么要使用两种方式:</p>\n<p>当请求没有副作用的时候， 例如进行搜索数据， 可以使用 <code>get</code> 方法， 当请求存在副作用的时候，使用 <code>post</code>进行请求</p>\n<p>使用 <code>post</code> 的情况:</p>\n<ul>\n<li>请求的结果存在副作用，例如，向数据库内添加新的数据行</li>\n<li>使用 GET 方法, 使用表单上添加的数据使得 URL太长</li>\n<li>进行传送的数据不是7 位的 ASCII 编码</li>\n</ul>\n<p>使用 <code>get</code> 的情况</p>\n<ul>\n<li>请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索</li>\n<li>请求结果无持续性的副作用</li>\n<li>收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符</li>\n</ul>\n<h3 id=\"如何使用-ajax-实现跨域？\"><a href=\"#如何使用-ajax-实现跨域？\" class=\"headerlink\" title=\"如何使用 ajax 实现跨域？\"></a>如何使用 ajax 实现跨域？</h3><p>对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？</p>\n<h4 id=\"1-使用跨源资源共享-CORS\"><a href=\"#1-使用跨源资源共享-CORS\" class=\"headerlink\" title=\"1.使用跨源资源共享(CORS)\"></a>1.使用跨源资源共享(CORS)</h4><p>跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:</p>\n<p>浏览器向服务器发送请求的时候，添加一个额外的 <code>origin</code> 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)</p>\n<p>如果服务器认为请求可以接受，可以在 <code>Access-Control-Allow-Origin</code> 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png\" alt></p>\n<p>如上图所示，实现了公共资源的共享</p>\n<h4 id=\"2-使用-JSONP\"><a href=\"#2-使用-JSONP\" class=\"headerlink\" title=\"2.使用 JSONP\"></a>2.使用 JSONP</h4><p>使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求</p>\n<p>缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 <code>get</code> 请求进行</p>\n"},{"title":"Vue.js学习（一）","date":"2017-09-09T03:32:30.000Z","_content":"\n### Vue的响应原理\n\n![](https://cn.vuejs.org/images/data.png)\n\n上面这张图表示的就是 vue 的响应原理:\n\n当我们将数据添加入 vue 实例中的 `data` 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 `Object.defineProperty` 方法将属性记录为依赖。当数据发生改变的时候,就会调用 `object.defineProperty` 中的 `setter` 方法,\n\n在组件实例中存在一个 `watcher` 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 `setter` 被调用的时候，会通知`watcher` 对象进行重新渲染组件\n\n### Object.defineProperty\n\n```\nObject.defineProperty(Object, property, {\n  get () {\n  \t// 读取对象Object 的属性 property 的时候调用的函数\n  },\n  set (newVal) {\n   // 设置对象 Object 的属性 property 的时候调用的函数\n  }\n})\n```\n\n通过使用这种方法，调用 `getter` 和 `setter` 可以实现追踪对象属性的变化  \n\n### `vue.js` 中的 生命周期\n\n在 `vue.js` 中\n\n","source":"_posts/Vue响应原理.md","raw":"---\ntitle: Vue.js学习（一）\ndate: 2017-09-09 11:32:30\ntags: vue 响应原理\ncategories: Vue\n---\n\n### Vue的响应原理\n\n![](https://cn.vuejs.org/images/data.png)\n\n上面这张图表示的就是 vue 的响应原理:\n\n当我们将数据添加入 vue 实例中的 `data` 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 `Object.defineProperty` 方法将属性记录为依赖。当数据发生改变的时候,就会调用 `object.defineProperty` 中的 `setter` 方法,\n\n在组件实例中存在一个 `watcher` 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 `setter` 被调用的时候，会通知`watcher` 对象进行重新渲染组件\n\n### Object.defineProperty\n\n```\nObject.defineProperty(Object, property, {\n  get () {\n  \t// 读取对象Object 的属性 property 的时候调用的函数\n  },\n  set (newVal) {\n   // 设置对象 Object 的属性 property 的时候调用的函数\n  }\n})\n```\n\n通过使用这种方法，调用 `getter` 和 `setter` 可以实现追踪对象属性的变化  \n\n### `vue.js` 中的 生命周期\n\n在 `vue.js` 中\n\n","slug":"Vue响应原理","published":1,"updated":"2020-09-14T06:36:25.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5n000di2oslja9hdz3","content":"<h3 id=\"Vue的响应原理\"><a href=\"#Vue的响应原理\" class=\"headerlink\" title=\"Vue的响应原理\"></a>Vue的响应原理</h3><p><img src=\"https://cn.vuejs.org/images/data.png\" alt></p>\n<p>上面这张图表示的就是 vue 的响应原理:</p>\n<p>当我们将数据添加入 vue 实例中的 <code>data</code> 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 <code>Object.defineProperty</code> 方法将属性记录为依赖。当数据发生改变的时候,就会调用 <code>object.defineProperty</code> 中的 <code>setter</code> 方法,</p>\n<p>在组件实例中存在一个 <code>watcher</code> 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 <code>setter</code> 被调用的时候，会通知<code>watcher</code> 对象进行重新渲染组件</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(Object, property, &#123;</span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">  \t// 读取对象Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (newVal) &#123;</span><br><span class=\"line\">   // 设置对象 Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过使用这种方法，调用 <code>getter</code> 和 <code>setter</code> 可以实现追踪对象属性的变化  </p>\n<h3 id=\"vue-js-中的-生命周期\"><a href=\"#vue-js-中的-生命周期\" class=\"headerlink\" title=\"vue.js 中的 生命周期\"></a><code>vue.js</code> 中的 生命周期</h3><p>在 <code>vue.js</code> 中</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Vue的响应原理\"><a href=\"#Vue的响应原理\" class=\"headerlink\" title=\"Vue的响应原理\"></a>Vue的响应原理</h3><p><img src=\"https://cn.vuejs.org/images/data.png\" alt></p>\n<p>上面这张图表示的就是 vue 的响应原理:</p>\n<p>当我们将数据添加入 vue 实例中的 <code>data</code> 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 <code>Object.defineProperty</code> 方法将属性记录为依赖。当数据发生改变的时候,就会调用 <code>object.defineProperty</code> 中的 <code>setter</code> 方法,</p>\n<p>在组件实例中存在一个 <code>watcher</code> 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 <code>setter</code> 被调用的时候，会通知<code>watcher</code> 对象进行重新渲染组件</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(Object, property, &#123;</span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">  \t// 读取对象Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (newVal) &#123;</span><br><span class=\"line\">   // 设置对象 Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过使用这种方法，调用 <code>getter</code> 和 <code>setter</code> 可以实现追踪对象属性的变化  </p>\n<h3 id=\"vue-js-中的-生命周期\"><a href=\"#vue-js-中的-生命周期\" class=\"headerlink\" title=\"vue.js 中的 生命周期\"></a><code>vue.js</code> 中的 生命周期</h3><p>在 <code>vue.js</code> 中</p>\n"},{"title":"Vue 组件之间的传值","date":"2017-09-10T15:09:48.000Z","_content":"\n在 `vue` 中，进行组件通信有下面几种形式:\n\n### 父子组件通信  \n\n在 `vue` 中, 实现父子组件通信的方法主要是 :  props down,  emit up\n\n使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据\n\n```\n父组件中：\n<child  :propsData = 'localData'></child>\n子组件中：\n<template>\n</template>\n<script>\n  export default {\n    name: 'child',\n    // 子组件中通过使用 props 声明需要进行接受的数据\n    props: ['propsData'],\n    data () {\n      return {\n        localData: ''\n      }\n    }\n  }\n</script>\n```\n\n对于实现子组件向父组件的传值操作，使用 `emit()` 操作实现:\n\n\n\n### 兄弟组件通信  \n\n### Vuex\n\n使用 `vuex` 实现多个组件之间状态的共享\n\n![](http://ov3b9jngp.bkt.clouddn.com/vuex.png)\n\n上图是使用 vuex 的工作流程，下面是我对于 `vuex` 的一些个人理解\n\n`vuex` 主要是有三个部分组成: \n\n`actions` : 用来执行提交 mutations 操作  \n\n`mutations` : 用来对于 `state` 中存储的数据进行改变操作  \n\n`state` : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  \n\n总的来说： 要执行一次进行改变 `state` 中状态的数据，要进行以下操作\n\n`state` 中保存了要进行改变的数据状态  \n\n`mutations` 中定义了要进行改变数据状态的操作，这是函数\n\n我们通过 `actions`  中的函数对于在`mutations` 中定义的函数进行提交, 相当于执行函数，从而实现对于`state` 中保存数据的改变\n\n ","source":"_posts/Vue-组件之间的传值.md","raw":"---\ntitle: Vue 组件之间的传值\ndate: 2017-09-10 23:09:48\ntags: 组件通信\ncategories: Vue\n---\n\n在 `vue` 中，进行组件通信有下面几种形式:\n\n### 父子组件通信  \n\n在 `vue` 中, 实现父子组件通信的方法主要是 :  props down,  emit up\n\n使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据\n\n```\n父组件中：\n<child  :propsData = 'localData'></child>\n子组件中：\n<template>\n</template>\n<script>\n  export default {\n    name: 'child',\n    // 子组件中通过使用 props 声明需要进行接受的数据\n    props: ['propsData'],\n    data () {\n      return {\n        localData: ''\n      }\n    }\n  }\n</script>\n```\n\n对于实现子组件向父组件的传值操作，使用 `emit()` 操作实现:\n\n\n\n### 兄弟组件通信  \n\n### Vuex\n\n使用 `vuex` 实现多个组件之间状态的共享\n\n![](http://ov3b9jngp.bkt.clouddn.com/vuex.png)\n\n上图是使用 vuex 的工作流程，下面是我对于 `vuex` 的一些个人理解\n\n`vuex` 主要是有三个部分组成: \n\n`actions` : 用来执行提交 mutations 操作  \n\n`mutations` : 用来对于 `state` 中存储的数据进行改变操作  \n\n`state` : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  \n\n总的来说： 要执行一次进行改变 `state` 中状态的数据，要进行以下操作\n\n`state` 中保存了要进行改变的数据状态  \n\n`mutations` 中定义了要进行改变数据状态的操作，这是函数\n\n我们通过 `actions`  中的函数对于在`mutations` 中定义的函数进行提交, 相当于执行函数，从而实现对于`state` 中保存数据的改变\n\n ","slug":"Vue-组件之间的传值","published":1,"updated":"2020-09-14T06:36:25.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5r000hi2osipisterc","content":"<p>在 <code>vue</code> 中，进行组件通信有下面几种形式:</p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><p>在 <code>vue</code> 中, 实现父子组件通信的方法主要是 :  props down,  emit up</p>\n<p>使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;child  :propsData = &apos;localData&apos;&gt;&lt;/child&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name: &apos;child&apos;,</span><br><span class=\"line\">    // 子组件中通过使用 props 声明需要进行接受的数据</span><br><span class=\"line\">    props: [&apos;propsData&apos;],</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        localData: &apos;&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>对于实现子组件向父组件的传值操作，使用 <code>emit()</code> 操作实现:</p>\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>使用 <code>vuex</code> 实现多个组件之间状态的共享</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vuex.png\" alt></p>\n<p>上图是使用 vuex 的工作流程，下面是我对于 <code>vuex</code> 的一些个人理解</p>\n<p><code>vuex</code> 主要是有三个部分组成: </p>\n<p><code>actions</code> : 用来执行提交 mutations 操作  </p>\n<p><code>mutations</code> : 用来对于 <code>state</code> 中存储的数据进行改变操作  </p>\n<p><code>state</code> : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  </p>\n<p>总的来说： 要执行一次进行改变 <code>state</code> 中状态的数据，要进行以下操作</p>\n<p><code>state</code> 中保存了要进行改变的数据状态  </p>\n<p><code>mutations</code> 中定义了要进行改变数据状态的操作，这是函数</p>\n<p>我们通过 <code>actions</code>  中的函数对于在<code>mutations</code> 中定义的函数进行提交, 相当于执行函数，从而实现对于<code>state</code> 中保存数据的改变</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>vue</code> 中，进行组件通信有下面几种形式:</p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><p>在 <code>vue</code> 中, 实现父子组件通信的方法主要是 :  props down,  emit up</p>\n<p>使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;child  :propsData = &apos;localData&apos;&gt;&lt;/child&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name: &apos;child&apos;,</span><br><span class=\"line\">    // 子组件中通过使用 props 声明需要进行接受的数据</span><br><span class=\"line\">    props: [&apos;propsData&apos;],</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        localData: &apos;&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>对于实现子组件向父组件的传值操作，使用 <code>emit()</code> 操作实现:</p>\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>使用 <code>vuex</code> 实现多个组件之间状态的共享</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vuex.png\" alt></p>\n<p>上图是使用 vuex 的工作流程，下面是我对于 <code>vuex</code> 的一些个人理解</p>\n<p><code>vuex</code> 主要是有三个部分组成: </p>\n<p><code>actions</code> : 用来执行提交 mutations 操作  </p>\n<p><code>mutations</code> : 用来对于 <code>state</code> 中存储的数据进行改变操作  </p>\n<p><code>state</code> : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  </p>\n<p>总的来说： 要执行一次进行改变 <code>state</code> 中状态的数据，要进行以下操作</p>\n<p><code>state</code> 中保存了要进行改变的数据状态  </p>\n<p><code>mutations</code> 中定义了要进行改变数据状态的操作，这是函数</p>\n<p>我们通过 <code>actions</code>  中的函数对于在<code>mutations</code> 中定义的函数进行提交, 相当于执行函数，从而实现对于<code>state</code> 中保存数据的改变</p>\n"},{"title":"JavaScript 中的函数式编程（译）","date":"2018-06-16T15:59:58.000Z","_content":"\n在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。\n\n## 什么是函数式编程？\n\n- 在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）\n- 函数式编程将计算机运算视为数学概念中函数的计算。\n- 函数式编程避免改变状态以及使用可变的数据。\n\n上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。\n\n## 其他主要的编程规范或模式：\n\n- 过程式编程\n- 面向对象的编程\n- 元编程\n- 命令式编程\n- 声明式编程\n\n过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO\n\n面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。\n\n元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。\n\n命令模式 vs 声明模式\n\n- 命令模式关心描述程序如何运行, 由计算机执行的命令组成\n- 声明模式关心程序能够做什么而无需确定程序应该如何完成。\n- 函数式编程遵循声明模式。\n\n```javascript\nvar books = [\n  {name:'JavaScript', pages:450}, \n  {name:'Angular', pages:902},\n  {name:'Node', pages:732}\n];\n/* Imperative Pattern */\nfor (var i = 0; i < books.length; i++) {\n  books[i].lastRead =  new Date();\n}\n/* Declarative Pattern */\nbooks.map((book)=> {\n  book.lastReadBy = 'me';\n  return book;\n});\nconsole.log(books);\n```\n\n- 在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。\n- 第一段中借用 `for 循环`，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。\n- 第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。\n\n## 数学意义上的函数或者纯函数\n\n在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。\n\n这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。\n\nMath.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。\n\nMath.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。\n\n## 为什么要使用函数式编程\n\n- 函数式编程中的纯函数确保了不会改变在其范围之外的数据。\n- 其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。\n- 易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。\n- 让代码更具有易读性。\n- 函数式编程让代码更易于理解。\n\n## 函数式编程的例子\n\n数组函数\n\n![img](https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg)\n\n在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心\"程序如何运行\"，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。\n\n相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。\n\n- find\n- reduce\n- map\n- some\n- every\n\n## 函数链\n\n函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。\n\n![img](https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg)\n\n在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。\n\n## 支持 FP 的库\n\n下面这些库中提供了一些让代码看起来更加声明式的有用函数。\n\n- RamadaJS\n- UnderscoreJS\n- lodash\n\n## 副作用\n\n函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。\n\n```javascript\nlet meetup = {name:'JS',isActive:true,members:49};\nconst scheduleMeetup = (date, place) => {\n  meetup.date = date;\n  meetup.place = place;\n  if (meetup.members < 50)\n    meetup.isActive = false;\n}\nconst publishMeetup = () => {\n  if (meetup.isActive) {\n    meetup.publish = true;\n  }\n}\nscheduleMeetup('today','Bnagalore');\npublishMeetup();\nconsole.log(meetup);\n```\n\n上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。\n\n副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。\n\n## 不变性\n\n在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。\n\n例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。\n\n在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。\n\n## 支持不变性的库\n\nJavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:\n\n- Seamless-immutable\n- Immutable JS\n\n## 总结\n\n函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。\n\n本文翻译至[Functional Programming in JavaScript](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5)，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。","source":"_posts/JavaScript-中的函数式编程（译）.md","raw":"---\ntitle: JavaScript 中的函数式编程（译）\ndate: 2018-06-16 23:59:58\ntags: 函数式编程\ncategories: 翻译文集\n---\n\n在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。\n\n## 什么是函数式编程？\n\n- 在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）\n- 函数式编程将计算机运算视为数学概念中函数的计算。\n- 函数式编程避免改变状态以及使用可变的数据。\n\n上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。\n\n## 其他主要的编程规范或模式：\n\n- 过程式编程\n- 面向对象的编程\n- 元编程\n- 命令式编程\n- 声明式编程\n\n过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO\n\n面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。\n\n元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。\n\n命令模式 vs 声明模式\n\n- 命令模式关心描述程序如何运行, 由计算机执行的命令组成\n- 声明模式关心程序能够做什么而无需确定程序应该如何完成。\n- 函数式编程遵循声明模式。\n\n```javascript\nvar books = [\n  {name:'JavaScript', pages:450}, \n  {name:'Angular', pages:902},\n  {name:'Node', pages:732}\n];\n/* Imperative Pattern */\nfor (var i = 0; i < books.length; i++) {\n  books[i].lastRead =  new Date();\n}\n/* Declarative Pattern */\nbooks.map((book)=> {\n  book.lastReadBy = 'me';\n  return book;\n});\nconsole.log(books);\n```\n\n- 在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。\n- 第一段中借用 `for 循环`，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。\n- 第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。\n\n## 数学意义上的函数或者纯函数\n\n在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。\n\n这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。\n\nMath.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。\n\nMath.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。\n\n## 为什么要使用函数式编程\n\n- 函数式编程中的纯函数确保了不会改变在其范围之外的数据。\n- 其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。\n- 易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。\n- 让代码更具有易读性。\n- 函数式编程让代码更易于理解。\n\n## 函数式编程的例子\n\n数组函数\n\n![img](https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg)\n\n在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心\"程序如何运行\"，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。\n\n相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。\n\n- find\n- reduce\n- map\n- some\n- every\n\n## 函数链\n\n函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。\n\n![img](https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg)\n\n在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。\n\n## 支持 FP 的库\n\n下面这些库中提供了一些让代码看起来更加声明式的有用函数。\n\n- RamadaJS\n- UnderscoreJS\n- lodash\n\n## 副作用\n\n函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。\n\n```javascript\nlet meetup = {name:'JS',isActive:true,members:49};\nconst scheduleMeetup = (date, place) => {\n  meetup.date = date;\n  meetup.place = place;\n  if (meetup.members < 50)\n    meetup.isActive = false;\n}\nconst publishMeetup = () => {\n  if (meetup.isActive) {\n    meetup.publish = true;\n  }\n}\nscheduleMeetup('today','Bnagalore');\npublishMeetup();\nconsole.log(meetup);\n```\n\n上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。\n\n副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。\n\n## 不变性\n\n在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。\n\n例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。\n\n在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。\n\n## 支持不变性的库\n\nJavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:\n\n- Seamless-immutable\n- Immutable JS\n\n## 总结\n\n函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。\n\n本文翻译至[Functional Programming in JavaScript](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5)，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。","slug":"JavaScript-中的函数式编程（译）","published":1,"updated":"2020-09-14T06:36:25.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t5w000ji2osyfcyv6ff","content":"<p>在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。</p>\n<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><ul>\n<li>在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）</li>\n<li>函数式编程将计算机运算视为数学概念中函数的计算。</li>\n<li>函数式编程避免改变状态以及使用可变的数据。</li>\n</ul>\n<p>上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。</p>\n<h2 id=\"其他主要的编程规范或模式：\"><a href=\"#其他主要的编程规范或模式：\" class=\"headerlink\" title=\"其他主要的编程规范或模式：\"></a>其他主要的编程规范或模式：</h2><ul>\n<li>过程式编程</li>\n<li>面向对象的编程</li>\n<li>元编程</li>\n<li>命令式编程</li>\n<li>声明式编程</li>\n</ul>\n<p>过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO</p>\n<p>面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。</p>\n<p>元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。</p>\n<p>命令模式 vs 声明模式</p>\n<ul>\n<li>命令模式关心描述程序如何运行, 由计算机执行的命令组成</li>\n<li>声明模式关心程序能够做什么而无需确定程序应该如何完成。</li>\n<li>函数式编程遵循声明模式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JavaScript'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">450</span>&#125;, </span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Angular'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">902</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Node'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">732</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/* Imperative Pattern */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; books.length; i++) &#123;</span><br><span class=\"line\">  books[i].lastRead =  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Declarative Pattern */</span></span><br><span class=\"line\">books.map(<span class=\"function\">(<span class=\"params\">book</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  book.lastReadBy = <span class=\"string\">'me'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。</li>\n<li>第一段中借用 <code>for 循环</code>，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。</li>\n<li>第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。</li>\n</ul>\n<h2 id=\"数学意义上的函数或者纯函数\"><a href=\"#数学意义上的函数或者纯函数\" class=\"headerlink\" title=\"数学意义上的函数或者纯函数\"></a>数学意义上的函数或者纯函数</h2><p>在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。</p>\n<p>这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。</p>\n<p>Math.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。</p>\n<p>Math.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。</p>\n<h2 id=\"为什么要使用函数式编程\"><a href=\"#为什么要使用函数式编程\" class=\"headerlink\" title=\"为什么要使用函数式编程\"></a>为什么要使用函数式编程</h2><ul>\n<li>函数式编程中的纯函数确保了不会改变在其范围之外的数据。</li>\n<li>其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。</li>\n<li>易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。</li>\n<li>让代码更具有易读性。</li>\n<li>函数式编程让代码更易于理解。</li>\n</ul>\n<h2 id=\"函数式编程的例子\"><a href=\"#函数式编程的例子\" class=\"headerlink\" title=\"函数式编程的例子\"></a>函数式编程的例子</h2><p>数组函数</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心”程序如何运行”，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。</p>\n<p>相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。</p>\n<ul>\n<li>find</li>\n<li>reduce</li>\n<li>map</li>\n<li>some</li>\n<li>every</li>\n</ul>\n<h2 id=\"函数链\"><a href=\"#函数链\" class=\"headerlink\" title=\"函数链\"></a>函数链</h2><p>函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。</p>\n<h2 id=\"支持-FP-的库\"><a href=\"#支持-FP-的库\" class=\"headerlink\" title=\"支持 FP 的库\"></a>支持 FP 的库</h2><p>下面这些库中提供了一些让代码看起来更加声明式的有用函数。</p>\n<ul>\n<li>RamadaJS</li>\n<li>UnderscoreJS</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h2><p>函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meetup = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JS'</span>,<span class=\"attr\">isActive</span>:<span class=\"literal\">true</span>,<span class=\"attr\">members</span>:<span class=\"number\">49</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> scheduleMeetup = <span class=\"function\">(<span class=\"params\">date, place</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  meetup.date = date;</span><br><span class=\"line\">  meetup.place = place;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.members &lt; <span class=\"number\">50</span>)</span><br><span class=\"line\">    meetup.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> publishMeetup = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.isActive) &#123;</span><br><span class=\"line\">    meetup.publish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scheduleMeetup(<span class=\"string\">'today'</span>,<span class=\"string\">'Bnagalore'</span>);</span><br><span class=\"line\">publishMeetup();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(meetup);</span><br></pre></td></tr></table></figure>\n<p>上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。</p>\n<p>副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。</p>\n<p>例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。</p>\n<p>在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。</p>\n<h2 id=\"支持不变性的库\"><a href=\"#支持不变性的库\" class=\"headerlink\" title=\"支持不变性的库\"></a>支持不变性的库</h2><p>JavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:</p>\n<ul>\n<li>Seamless-immutable</li>\n<li>Immutable JS</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。</p>\n<p>本文翻译至<a href=\"https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a>，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。</p>\n<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><ul>\n<li>在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）</li>\n<li>函数式编程将计算机运算视为数学概念中函数的计算。</li>\n<li>函数式编程避免改变状态以及使用可变的数据。</li>\n</ul>\n<p>上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。</p>\n<h2 id=\"其他主要的编程规范或模式：\"><a href=\"#其他主要的编程规范或模式：\" class=\"headerlink\" title=\"其他主要的编程规范或模式：\"></a>其他主要的编程规范或模式：</h2><ul>\n<li>过程式编程</li>\n<li>面向对象的编程</li>\n<li>元编程</li>\n<li>命令式编程</li>\n<li>声明式编程</li>\n</ul>\n<p>过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO</p>\n<p>面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。</p>\n<p>元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。</p>\n<p>命令模式 vs 声明模式</p>\n<ul>\n<li>命令模式关心描述程序如何运行, 由计算机执行的命令组成</li>\n<li>声明模式关心程序能够做什么而无需确定程序应该如何完成。</li>\n<li>函数式编程遵循声明模式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JavaScript'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">450</span>&#125;, </span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Angular'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">902</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Node'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">732</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/* Imperative Pattern */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; books.length; i++) &#123;</span><br><span class=\"line\">  books[i].lastRead =  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Declarative Pattern */</span></span><br><span class=\"line\">books.map(<span class=\"function\">(<span class=\"params\">book</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  book.lastReadBy = <span class=\"string\">'me'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。</li>\n<li>第一段中借用 <code>for 循环</code>，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。</li>\n<li>第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。</li>\n</ul>\n<h2 id=\"数学意义上的函数或者纯函数\"><a href=\"#数学意义上的函数或者纯函数\" class=\"headerlink\" title=\"数学意义上的函数或者纯函数\"></a>数学意义上的函数或者纯函数</h2><p>在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。</p>\n<p>这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。</p>\n<p>Math.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。</p>\n<p>Math.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。</p>\n<h2 id=\"为什么要使用函数式编程\"><a href=\"#为什么要使用函数式编程\" class=\"headerlink\" title=\"为什么要使用函数式编程\"></a>为什么要使用函数式编程</h2><ul>\n<li>函数式编程中的纯函数确保了不会改变在其范围之外的数据。</li>\n<li>其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。</li>\n<li>易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。</li>\n<li>让代码更具有易读性。</li>\n<li>函数式编程让代码更易于理解。</li>\n</ul>\n<h2 id=\"函数式编程的例子\"><a href=\"#函数式编程的例子\" class=\"headerlink\" title=\"函数式编程的例子\"></a>函数式编程的例子</h2><p>数组函数</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心”程序如何运行”，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。</p>\n<p>相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。</p>\n<ul>\n<li>find</li>\n<li>reduce</li>\n<li>map</li>\n<li>some</li>\n<li>every</li>\n</ul>\n<h2 id=\"函数链\"><a href=\"#函数链\" class=\"headerlink\" title=\"函数链\"></a>函数链</h2><p>函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。</p>\n<h2 id=\"支持-FP-的库\"><a href=\"#支持-FP-的库\" class=\"headerlink\" title=\"支持 FP 的库\"></a>支持 FP 的库</h2><p>下面这些库中提供了一些让代码看起来更加声明式的有用函数。</p>\n<ul>\n<li>RamadaJS</li>\n<li>UnderscoreJS</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h2><p>函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meetup = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JS'</span>,<span class=\"attr\">isActive</span>:<span class=\"literal\">true</span>,<span class=\"attr\">members</span>:<span class=\"number\">49</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> scheduleMeetup = <span class=\"function\">(<span class=\"params\">date, place</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  meetup.date = date;</span><br><span class=\"line\">  meetup.place = place;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.members &lt; <span class=\"number\">50</span>)</span><br><span class=\"line\">    meetup.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> publishMeetup = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.isActive) &#123;</span><br><span class=\"line\">    meetup.publish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scheduleMeetup(<span class=\"string\">'today'</span>,<span class=\"string\">'Bnagalore'</span>);</span><br><span class=\"line\">publishMeetup();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(meetup);</span><br></pre></td></tr></table></figure>\n<p>上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。</p>\n<p>副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。</p>\n<p>例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。</p>\n<p>在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。</p>\n<h2 id=\"支持不变性的库\"><a href=\"#支持不变性的库\" class=\"headerlink\" title=\"支持不变性的库\"></a>支持不变性的库</h2><p>JavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:</p>\n<ul>\n<li>Seamless-immutable</li>\n<li>Immutable JS</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。</p>\n<p>本文翻译至<a href=\"https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a>，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。</p>\n"},{"title":"promisify callback-style function","date":"2019-10-03T14:47:16.000Z","_content":"\n将一个回调函数转换为 `promise` 类函数，在  `promisify` 化的函数的 `then` 方法里面执行回调函数， 避免回调地狱。\n\n这样相当于我们日常代码开发中，对于某个函数返回一个 `promise`, 以期在函数的 `then` 方法里面处理数据的方法的一个封装。\n\n```js\nfunction process() {\n  return new Promise((resolve, reject) => {\n    // some data process code...\n    try () {\n      resolve(data);      \n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nprocess().then(data => {...});\n```\n\n在 node.js 中， 存在一个工具方法为 `utils.promisfy` 的工具方法， 这个方法将回调转换为 `promise` 类方法：\n\n```js\n// error-first 类型回调\n// 回调cb 的第一个参数为 error， 如果没有传 false\nfunction fn(cb) {\n  return cb(false, 'hello');\n}\nconst utils = require('util');\n\nconst promiseFn = utils.promisify(fn);\n\npromiseFn().then((data) => {\n  console.log(data);\n});\n// 使用这个方法， 可以将 node 中的一些异步的回调\n// 比如： readFile 等\nconst fs = require('fs');\n\n\nconst promiseReadFile = utils.promisify(fs.readFile);\n\npromiseReadFile('./.gitignore', 'utf-8').then(data => {\n  console.log(data);\n});\n// 等同于\nfs.readFile('./.gitignore', 'utf-8', function (err, data) {\n  console.log(data);\n});\n```\n\n在 `promisify` 出现之前，使用 [pify](<https://github.com/sindresorhus/pify>) 实现相同的功能\n\n`pify` 模块的核心代码不多,  下面是全部的代码：\n\n```js\n// 核心处理方法\n// fn：将要被 promise 化的函数\n// options: 相关配置选项\n// args: 传入函数的相关参数\n// 实际执行的时候， 执行这个方法返回的方法， 其中 args 为传入的参数\n// 这里 args 是一个数组， 通过 push 回调的方法\nconst processFn = (fn, options) => function (...args) {\n  const P = options.promiseModule;\n  return new P((resolve, reject) => {\n    // multiArgs： 是否传入多个参数\n    if (options.multiArgs) {\n      // push 一个方法函数， 这个函数就是我们在原函数中手动\n      // 调用的回调函数 cb， 参数是我们手动写入回调函数中的参数\n      args.push((...result) => {\n        // errorFirst: 是否包含错误， 适配 node 如 fs.exists() 类的方法\n        if (options.errorFirst) {\n          if (result[0]) {\n            reject(result);\n          } else {\n            result.shift();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      });\n    } else if (options.errorFirst) {\n      args.push((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    } else {\n      args.push(resolve);\n    }\n    // 这个时候， args 中传入了相关的回调方法\n    fn.apply(this, args);\n  });\n};\n\nmodule.exports = (input, options) => {\n  options = Object.assign({\n    exclude: [/.+(Sync|Stream)$/],\n    // errorFirst: 回调函数中是否第一个参数为 error\n    errorFirst: true,\n    promiseModule: Promise\n  }, options);\n\n  const objType = typeof input;\n  if (!(input !== null && (objType === 'object' || objType === 'function'))) {\n    throw new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? 'null' : objType}\\``);\n  }\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n    // options 中的 include 和 exclude 属性分别表示\n    // 模块中可以被序列化的方法\n    return options.include ? options.include.some(match) : !options.exclude.some(match);\n  };\n\n  let ret;\n  // 当传入的 input 为函数的时候\n  if (objType === 'function') {\n    ret = function (...args) {\n      // excludeMain：是否对于一些 module 内部方法 做 promise 化\n      return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n    };\n    // 否则 ret 为包含有 input 上面的属性的对象\n  } else {\n    ret = Object.create(Object.getPrototypeOf(input));\n  }\n\n  // 对于 input 参数对象或者函数上面的每一个方法都做 promise 化\n  for (const key in input) { // eslint-disable-line guard-for-in\n    const property = input[key];\n    ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n  }\n\n  return ret;\n};\n```\n\n`utils.promisify` 方法\n\n`promisify` 方法是 node 内置的 `promise` 化回调函数的工具方法\n\n```js\nconst promisify = function promisify(original) {\n  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n   // 在 original 方法上面存在有 `kCustomPromisifyedSymbol 这个属性\n  // 这个属性上面存储的是被 promise 化的方法\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n\t}\n\t// 将 fn 上的原型设置为 original 上的原型\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n\t});\n\t// 设置 fn 上的属性为 original 方法上面的属性\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\n```\n\n","source":"_posts/PromisifyCallback.md","raw":"---\ntitle: promisify callback-style function\ndate: 2019-10-03 22:47:16\ntags: promisify\ncategories: promsie\n---\n\n将一个回调函数转换为 `promise` 类函数，在  `promisify` 化的函数的 `then` 方法里面执行回调函数， 避免回调地狱。\n\n这样相当于我们日常代码开发中，对于某个函数返回一个 `promise`, 以期在函数的 `then` 方法里面处理数据的方法的一个封装。\n\n```js\nfunction process() {\n  return new Promise((resolve, reject) => {\n    // some data process code...\n    try () {\n      resolve(data);      \n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\nprocess().then(data => {...});\n```\n\n在 node.js 中， 存在一个工具方法为 `utils.promisfy` 的工具方法， 这个方法将回调转换为 `promise` 类方法：\n\n```js\n// error-first 类型回调\n// 回调cb 的第一个参数为 error， 如果没有传 false\nfunction fn(cb) {\n  return cb(false, 'hello');\n}\nconst utils = require('util');\n\nconst promiseFn = utils.promisify(fn);\n\npromiseFn().then((data) => {\n  console.log(data);\n});\n// 使用这个方法， 可以将 node 中的一些异步的回调\n// 比如： readFile 等\nconst fs = require('fs');\n\n\nconst promiseReadFile = utils.promisify(fs.readFile);\n\npromiseReadFile('./.gitignore', 'utf-8').then(data => {\n  console.log(data);\n});\n// 等同于\nfs.readFile('./.gitignore', 'utf-8', function (err, data) {\n  console.log(data);\n});\n```\n\n在 `promisify` 出现之前，使用 [pify](<https://github.com/sindresorhus/pify>) 实现相同的功能\n\n`pify` 模块的核心代码不多,  下面是全部的代码：\n\n```js\n// 核心处理方法\n// fn：将要被 promise 化的函数\n// options: 相关配置选项\n// args: 传入函数的相关参数\n// 实际执行的时候， 执行这个方法返回的方法， 其中 args 为传入的参数\n// 这里 args 是一个数组， 通过 push 回调的方法\nconst processFn = (fn, options) => function (...args) {\n  const P = options.promiseModule;\n  return new P((resolve, reject) => {\n    // multiArgs： 是否传入多个参数\n    if (options.multiArgs) {\n      // push 一个方法函数， 这个函数就是我们在原函数中手动\n      // 调用的回调函数 cb， 参数是我们手动写入回调函数中的参数\n      args.push((...result) => {\n        // errorFirst: 是否包含错误， 适配 node 如 fs.exists() 类的方法\n        if (options.errorFirst) {\n          if (result[0]) {\n            reject(result);\n          } else {\n            result.shift();\n            resolve(result);\n          }\n        } else {\n          resolve(result);\n        }\n      });\n    } else if (options.errorFirst) {\n      args.push((error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    } else {\n      args.push(resolve);\n    }\n    // 这个时候， args 中传入了相关的回调方法\n    fn.apply(this, args);\n  });\n};\n\nmodule.exports = (input, options) => {\n  options = Object.assign({\n    exclude: [/.+(Sync|Stream)$/],\n    // errorFirst: 回调函数中是否第一个参数为 error\n    errorFirst: true,\n    promiseModule: Promise\n  }, options);\n\n  const objType = typeof input;\n  if (!(input !== null && (objType === 'object' || objType === 'function'))) {\n    throw new TypeError(`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`${input === null ? 'null' : objType}\\``);\n  }\n\n  const filter = key => {\n    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n    // options 中的 include 和 exclude 属性分别表示\n    // 模块中可以被序列化的方法\n    return options.include ? options.include.some(match) : !options.exclude.some(match);\n  };\n\n  let ret;\n  // 当传入的 input 为函数的时候\n  if (objType === 'function') {\n    ret = function (...args) {\n      // excludeMain：是否对于一些 module 内部方法 做 promise 化\n      return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);\n    };\n    // 否则 ret 为包含有 input 上面的属性的对象\n  } else {\n    ret = Object.create(Object.getPrototypeOf(input));\n  }\n\n  // 对于 input 参数对象或者函数上面的每一个方法都做 promise 化\n  for (const key in input) { // eslint-disable-line guard-for-in\n    const property = input[key];\n    ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;\n  }\n\n  return ret;\n};\n```\n\n`utils.promisify` 方法\n\n`promisify` 方法是 node 内置的 `promise` 化回调函数的工具方法\n\n```js\nconst promisify = function promisify(original) {\n  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n   // 在 original 方法上面存在有 `kCustomPromisifyedSymbol 这个属性\n  // 这个属性上面存储的是被 promise 化的方法\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n\t}\n\t// 将 fn 上的原型设置为 original 上的原型\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n\t});\n\t// 设置 fn 上的属性为 original 方法上面的属性\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\n```\n\n","slug":"PromisifyCallback","published":1,"updated":"2020-09-14T06:36:25.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t60000ni2osxejs072l","content":"<p>将一个回调函数转换为 <code>promise</code> 类函数，在  <code>promisify</code> 化的函数的 <code>then</code> 方法里面执行回调函数， 避免回调地狱。</p>\n<p>这样相当于我们日常代码开发中，对于某个函数返回一个 <code>promise</code>, 以期在函数的 <code>then</code> 方法里面处理数据的方法的一个封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some data process code...</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> () &#123;</span><br><span class=\"line\">      resolve(data);      </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>\n<p>在 node.js 中， 存在一个工具方法为 <code>utils.promisfy</code> 的工具方法， 这个方法将回调转换为 <code>promise</code> 类方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// error-first 类型回调</span></span><br><span class=\"line\"><span class=\"comment\">// 回调cb 的第一个参数为 error， 如果没有传 false</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cb(<span class=\"literal\">false</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseFn = utils.promisify(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">promiseFn().then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用这个方法， 可以将 node 中的一些异步的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 比如： readFile 等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseReadFile = utils.promisify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\">promiseReadFile(<span class=\"string\">'./.gitignore'</span>, <span class=\"string\">'utf-8'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./.gitignore'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在 <code>promisify</code> 出现之前，使用 <a href=\"https://github.com/sindresorhus/pify\" target=\"_blank\" rel=\"noopener\">pify</a> 实现相同的功能</p>\n<p><code>pify</code> 模块的核心代码不多,  下面是全部的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心处理方法</span></span><br><span class=\"line\"><span class=\"comment\">// fn：将要被 promise 化的函数</span></span><br><span class=\"line\"><span class=\"comment\">// options: 相关配置选项</span></span><br><span class=\"line\"><span class=\"comment\">// args: 传入函数的相关参数</span></span><br><span class=\"line\"><span class=\"comment\">// 实际执行的时候， 执行这个方法返回的方法， 其中 args 为传入的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 args 是一个数组， 通过 push 回调的方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> processFn = <span class=\"function\">(<span class=\"params\">fn, options</span>) =&gt;</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = options.promiseModule;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> P(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// multiArgs： 是否传入多个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.multiArgs) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// push 一个方法函数， 这个函数就是我们在原函数中手动</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用的回调函数 cb， 参数是我们手动写入回调函数中的参数</span></span><br><span class=\"line\">      args.push(<span class=\"function\">(<span class=\"params\">...result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// errorFirst: 是否包含错误， 适配 node 如 fs.exists() 类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.errorFirst) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            reject(result);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.shift();</span><br><span class=\"line\">            resolve(result);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.errorFirst) &#123;</span><br><span class=\"line\">      args.push(<span class=\"function\">(<span class=\"params\">error, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">          reject(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      args.push(resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这个时候， args 中传入了相关的回调方法</span></span><br><span class=\"line\">    fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">input, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    exclude: [<span class=\"regexp\">/.+(Sync|Stream)$/</span>],</span><br><span class=\"line\">    <span class=\"comment\">// errorFirst: 回调函数中是否第一个参数为 error</span></span><br><span class=\"line\">    errorFirst: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    promiseModule: <span class=\"built_in\">Promise</span></span><br><span class=\"line\">  &#125;, options);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> objType = <span class=\"keyword\">typeof</span> input;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(input !== <span class=\"literal\">null</span> &amp;&amp; (objType === <span class=\"string\">'object'</span> || objType === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`<span class=\"subst\">$&#123;input === <span class=\"literal\">null</span> ? <span class=\"string\">'null'</span> : objType&#125;</span>\\``</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> filter = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"function\"><span class=\"params\">pattern</span> =&gt;</span> <span class=\"keyword\">typeof</span> pattern === <span class=\"string\">'string'</span> ? key === pattern : pattern.test(key);</span><br><span class=\"line\">    <span class=\"comment\">// options 中的 include 和 exclude 属性分别表示</span></span><br><span class=\"line\">    <span class=\"comment\">// 模块中可以被序列化的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> options.include ? options.include.some(match) : !options.exclude.some(match);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">  <span class=\"comment\">// 当传入的 input 为函数的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (objType === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// excludeMain：是否对于一些 module 内部方法 做 promise 化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> options.excludeMain ? input(...args) : processFn(input, options).apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 否则 ret 为包含有 input 上面的属性的对象</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(input));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对于 input 参数对象或者函数上面的每一个方法都做 promise 化</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> input) &#123; <span class=\"comment\">// eslint-disable-line guard-for-in</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> property = input[key];</span><br><span class=\"line\">    ret[key] = <span class=\"keyword\">typeof</span> property === <span class=\"string\">'function'</span> &amp;&amp; filter(key) ? processFn(property, options) : property;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>utils.promisify</code> 方法</p>\n<p><code>promisify</code> 方法是 node 内置的 <code>promise</code> 化回调函数的工具方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promisify</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> kCustomPromisifiedSymbol = <span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">Symbol</span>(<span class=\"string\">'util.promisify.custom'</span>) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> original !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The \"original\" argument must be of type Function'</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 在 original 方法上面存在有 `kCustomPromisifyedSymbol 这个属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 这个属性上面存储的是被 promise 化的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (kCustomPromisifiedSymbol &amp;&amp; original[kCustomPromisifiedSymbol]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = original[kCustomPromisifiedSymbol];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The \"util.promisify.custom\" argument must be of type Function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(fn, kCustomPromisifiedSymbol, &#123;</span><br><span class=\"line\">      value: fn, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promiseResolve, promiseReject;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      promiseResolve = resolve;</span><br><span class=\"line\">      promiseReject = reject;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">      args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    args.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        promiseReject(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promiseResolve(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      original.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      promiseReject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将 fn 上的原型设置为 original 上的原型</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(fn, <span class=\"built_in\">Object</span>.getPrototypeOf(original));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (kCustomPromisifiedSymbol) <span class=\"built_in\">Object</span>.defineProperty(fn, kCustomPromisifiedSymbol, &#123;</span><br><span class=\"line\">    value: fn, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 设置 fn 上的属性为 original 方法上面的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.defineProperties(</span><br><span class=\"line\">    fn,</span><br><span class=\"line\">    getOwnPropertyDescriptors(original)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>将一个回调函数转换为 <code>promise</code> 类函数，在  <code>promisify</code> 化的函数的 <code>then</code> 方法里面执行回调函数， 避免回调地狱。</p>\n<p>这样相当于我们日常代码开发中，对于某个函数返回一个 <code>promise</code>, 以期在函数的 <code>then</code> 方法里面处理数据的方法的一个封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some data process code...</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> () &#123;</span><br><span class=\"line\">      resolve(data);      </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">process().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;...&#125;);</span><br></pre></td></tr></table></figure>\n<p>在 node.js 中， 存在一个工具方法为 <code>utils.promisfy</code> 的工具方法， 这个方法将回调转换为 <code>promise</code> 类方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// error-first 类型回调</span></span><br><span class=\"line\"><span class=\"comment\">// 回调cb 的第一个参数为 error， 如果没有传 false</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cb(<span class=\"literal\">false</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseFn = utils.promisify(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">promiseFn().then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用这个方法， 可以将 node 中的一些异步的回调</span></span><br><span class=\"line\"><span class=\"comment\">// 比如： readFile 等</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseReadFile = utils.promisify(fs.readFile);</span><br><span class=\"line\"></span><br><span class=\"line\">promiseReadFile(<span class=\"string\">'./.gitignore'</span>, <span class=\"string\">'utf-8'</span>).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'./.gitignore'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在 <code>promisify</code> 出现之前，使用 <a href=\"https://github.com/sindresorhus/pify\" target=\"_blank\" rel=\"noopener\">pify</a> 实现相同的功能</p>\n<p><code>pify</code> 模块的核心代码不多,  下面是全部的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 核心处理方法</span></span><br><span class=\"line\"><span class=\"comment\">// fn：将要被 promise 化的函数</span></span><br><span class=\"line\"><span class=\"comment\">// options: 相关配置选项</span></span><br><span class=\"line\"><span class=\"comment\">// args: 传入函数的相关参数</span></span><br><span class=\"line\"><span class=\"comment\">// 实际执行的时候， 执行这个方法返回的方法， 其中 args 为传入的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 args 是一个数组， 通过 push 回调的方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> processFn = <span class=\"function\">(<span class=\"params\">fn, options</span>) =&gt;</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> P = options.promiseModule;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> P(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// multiArgs： 是否传入多个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.multiArgs) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// push 一个方法函数， 这个函数就是我们在原函数中手动</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用的回调函数 cb， 参数是我们手动写入回调函数中的参数</span></span><br><span class=\"line\">      args.push(<span class=\"function\">(<span class=\"params\">...result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// errorFirst: 是否包含错误， 适配 node 如 fs.exists() 类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.errorFirst) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            reject(result);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.shift();</span><br><span class=\"line\">            resolve(result);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.errorFirst) &#123;</span><br><span class=\"line\">      args.push(<span class=\"function\">(<span class=\"params\">error, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">          reject(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      args.push(resolve);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这个时候， args 中传入了相关的回调方法</span></span><br><span class=\"line\">    fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">input, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    exclude: [<span class=\"regexp\">/.+(Sync|Stream)$/</span>],</span><br><span class=\"line\">    <span class=\"comment\">// errorFirst: 回调函数中是否第一个参数为 error</span></span><br><span class=\"line\">    errorFirst: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    promiseModule: <span class=\"built_in\">Promise</span></span><br><span class=\"line\">  &#125;, options);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> objType = <span class=\"keyword\">typeof</span> input;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(input !== <span class=\"literal\">null</span> &amp;&amp; (objType === <span class=\"string\">'object'</span> || objType === <span class=\"string\">'function'</span>))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`Expected \\`input\\` to be a \\`Function\\` or \\`Object\\`, got \\`<span class=\"subst\">$&#123;input === <span class=\"literal\">null</span> ? <span class=\"string\">'null'</span> : objType&#125;</span>\\``</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> filter = <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"function\"><span class=\"params\">pattern</span> =&gt;</span> <span class=\"keyword\">typeof</span> pattern === <span class=\"string\">'string'</span> ? key === pattern : pattern.test(key);</span><br><span class=\"line\">    <span class=\"comment\">// options 中的 include 和 exclude 属性分别表示</span></span><br><span class=\"line\">    <span class=\"comment\">// 模块中可以被序列化的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> options.include ? options.include.some(match) : !options.exclude.some(match);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> ret;</span><br><span class=\"line\">  <span class=\"comment\">// 当传入的 input 为函数的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (objType === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// excludeMain：是否对于一些 module 内部方法 做 promise 化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> options.excludeMain ? input(...args) : processFn(input, options).apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 否则 ret 为包含有 input 上面的属性的对象</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(input));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对于 input 参数对象或者函数上面的每一个方法都做 promise 化</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> input) &#123; <span class=\"comment\">// eslint-disable-line guard-for-in</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> property = input[key];</span><br><span class=\"line\">    ret[key] = <span class=\"keyword\">typeof</span> property === <span class=\"string\">'function'</span> &amp;&amp; filter(key) ? processFn(property, options) : property;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>utils.promisify</code> 方法</p>\n<p><code>promisify</code> 方法是 node 内置的 <code>promise</code> 化回调函数的工具方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promisify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promisify</span>(<span class=\"params\">original</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> kCustomPromisifiedSymbol = <span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">Symbol</span>(<span class=\"string\">'util.promisify.custom'</span>) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> original !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The \"original\" argument must be of type Function'</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 在 original 方法上面存在有 `kCustomPromisifyedSymbol 这个属性</span></span><br><span class=\"line\">  <span class=\"comment\">// 这个属性上面存储的是被 promise 化的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (kCustomPromisifiedSymbol &amp;&amp; original[kCustomPromisifiedSymbol]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = original[kCustomPromisifiedSymbol];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The \"util.promisify.custom\" argument must be of type Function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(fn, kCustomPromisifiedSymbol, &#123;</span><br><span class=\"line\">      value: fn, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promiseResolve, promiseReject;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      promiseResolve = resolve;</span><br><span class=\"line\">      promiseReject = reject;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">      args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    args.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        promiseReject(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promiseResolve(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      original.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      promiseReject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 将 fn 上的原型设置为 original 上的原型</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.setPrototypeOf(fn, <span class=\"built_in\">Object</span>.getPrototypeOf(original));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (kCustomPromisifiedSymbol) <span class=\"built_in\">Object</span>.defineProperty(fn, kCustomPromisifiedSymbol, &#123;</span><br><span class=\"line\">    value: fn, <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">writable</span>: <span class=\"literal\">false</span>, <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// 设置 fn 上的属性为 original 方法上面的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.defineProperties(</span><br><span class=\"line\">    fn,</span><br><span class=\"line\">    getOwnPropertyDescriptors(original)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Base64 基础知识","date":"2019-09-13T09:41:19.000Z","_content":"\nBase64 作为一种编码方式， 可以将对于一些数据使用Base64 编码， 那么， 为什么使用 Base64 编码， 使用 Base64 编码的原理是什么以及 Base64 编码在前端的应用，下面的文章将会涉及这些内容：\n\n## what is Base64?\n\n在计算机中， 一个字节通常有8位字符， 这些字符使用二进制表示共有 256 种组合， 这些组合形成了 ascii（American Standard Code for Information Interchange，美国信息交换标准代码） 码：一种字节组合和字符的对应表,  基础的 ascii 码共有 128 种组合， 因为不同国家语言字符的需要， 现在很多是扩展的 ascii码，但不同的 扩展ascii 码的前 127 位是基本相同的， 这一部分称为基础 ascii 码： \n\n{% asset_img  ascii.png%}\n\n假如我们不通过 Base64 编码， 而是直接向不同设备传输二进制数据，因为一些老旧设备或者软件对于某些二进制值字符的处理方式可能不同， 因就有可能被错误处理，为了解决这种问题， 我们使用Base64 编码将数据统一编码为可见字符，而可见字符在大多设备上的表现行为是一致的，这样就使得数据在不同设备之间的处理出错的可能被降低了。\n\nBase64 码共用 64 种对应字符， 对应字符如下:\n\n{% asset_img  base64.jpg%}\n\nBase64 码由下面这些字符组成：\n\n1. 0 - 25 为大写英文字符 A - Z\n2. 26 - 51 为小写英文字符 a - z\n3. 52 - 61 为数字 0 -9\n4. 另外两个字符 + 和 /\n\n## Base64编码原理\n\nBase64 本质上是将二进制数据转为文本的形式， 当遇到十进制数据的时候， 需要将十进制转为二进制， 对于二进制数据以连续 6 比特计算其十进制值， 在根据这个值查找上图 Base64表中的字符， 最终我们得到的这段文本即是我们编码后的数据：\n\n比如我们对于 `myname` 进行Base64 编码：\n\n|    原始字符    |    m     |    y     |    n     |    a     |    m     |    e     |        |        |\n| :------------: | :------: | :------: | :------: | :------: | :------: | :------: | :----: | :----: |\n| ASCII码十进制  |   109    |   121    |   110    |    97    |   109    |   101    |        |        |\n|     二进制     | 01101101 | 01111001 | 01101110 | 01100001 | 01101101 | 01100101 |        |        |\n| Base64码二进制 |  011011  |  010111  |  100101  |  101110  |  011000  |  010110  | 110101 | 100101 |\n| Base64码十进制 |    27    |    23    |    37    |    46    |    24    |    22    |   53   |   37   |\n|  对应 Base64   |    b     |    X     |    l     |    u     |    Y     |    W     |   1    |   l    |\n\n最终使用 Base64 编码之后的字符串为  `bXluYW1l`\n\n在上面的编码过程中， 我们将六个字符的字符串编码为八个字符的字符串， 编码长度前后对比为 4 ：3， 也即是说， 当原始字符长度为 3 的倍数时， 编码之后长度为 4 的相应倍数， 如果， 原始字符长度不能被 3 整除怎么办？ 这时候， 我们需要对原始字符的二进制进行补零操作：\n\n例如， 我们对于 `my` 进行编码：\n\n| 原始字符       | m        | y        |          |        |\n| -------------- | -------- | -------- | -------- | ------ |\n| ASCII码十进制  | 109      | 121      |          |        |\n| 二进制         | 01101101 | 01111001 | 00000000 |        |\n| Base64码二进制 | 011011   | 010111   | 100100   | 000000 |\n| Base64码十进制 | 27       | 23       | 36       | 0      |\n| 对应 Base64    | b        | X        | k        | A      |\n\n因为原始字符中补充的 0 没有任何意义， 因此编码后的 A 不带有任何的意义，标准的 ascii 码中将 A 替换为 `=`\n\n`my` 的编码字符串为 `bXk=`;\n\n对于解码过程， 首先观察编码字符串长度， 如果字符串长度不能被 4 整除，那么，需要给编码字符串补充 = 来使得字符串长度可以被 4 整除， 然后在进行解码操作。\n\n解码过程是编码过程的逆向操作，将编码字符串的 `=` 转为 `A`, 然后转为十进制的 Base64 码， 后转为二进制的6位比特值，将字符串末尾的相应 `A` 的二进制比特0值丢弃，因为他们不携带任何的信息。\n\n最后将8位二进制转为原始字符.\n\n\n\n## 前端应用 Base64\n\nBase64 在前端应用比较常见的是将图片的二进制数据转为 Base64， 嵌套入 html 中。\n\n现代浏览器对于图片的 src 属性支持一种 `dataUrl` 的特性，格式为：\n\n`url(data:文件类型;编码方式,编码后的文件内容)`\n\n例如百度搜索的dataURL：\n\n{% asset_img  image-20190914095537734.png%}\n\n使用这种方式的优点是可以减少外部资源请求， 加快页面加载时间， 缺点是对于色彩丰富的图片， 二进制数据编码之后的 Base64 字符串会比较大， 会影响页面的加载速度\n\n## 其他：Data URLs\n\nData URLs 是以 `data:` 协议为前缀的一种 url，使用 data url 实现了可以将一些小的文件嵌入到文档中的一种方法\n\ndata url 的组成结构如下：\n\n `data:[<mediatype>][;base64],<data>`\n\n data url 由下面三种结构组成:\n\n `mediatype` 表示当前文件的 `MIME type`, 例如： `image/jpeg`, `text/plain` 等\n\n当数据 `data` 为非文本的格式的时候， 使用一个 `base64` 标志表示当前的数据为使用 `base64` 编码之后的数据，对于文字格式， 也是可以使用 `base64` 进行编码操作\n\n`data`: 数据本身\n\n我们经常会遇到的是经过 `base64` 编码过后的图片，除了图片之外， 我们还可以对于文字进行转为 `data url` 的形式：\n\n`data:,Hello%2C%20World!`\n\n`data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D`\n// 经过 base64 编码过的上面的文本： Hello World!\n\n`data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E`\n// html 文本： `<h1>Hello World!<h1>`\n\n注意：在 data url 中数据本身是 `data`,当我们需要对于数据进行操作的时候， 我们需要获取到 `data urls` 中的数据：\n\n```js\n// 在 node 中下载 data urls 形式的图片\nconst fs = require('fs');\nfunction downloadImage(dataUrl) {\n  dataUrl = dataUrl.replace(/^data:image\\/png;base64,/, \"\");\n  fs.writeSync('image.jpg', dataUrl, { encoding: 'base64' });\n}\n\n```\n\n参考链接：[data urls](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)","source":"_posts/base64.md","raw":"---\ntitle: Base64 基础知识\ndate: 2019-09-13 17:41:19\ntags: Base64\ncategories: 基础知识\n---\n\nBase64 作为一种编码方式， 可以将对于一些数据使用Base64 编码， 那么， 为什么使用 Base64 编码， 使用 Base64 编码的原理是什么以及 Base64 编码在前端的应用，下面的文章将会涉及这些内容：\n\n## what is Base64?\n\n在计算机中， 一个字节通常有8位字符， 这些字符使用二进制表示共有 256 种组合， 这些组合形成了 ascii（American Standard Code for Information Interchange，美国信息交换标准代码） 码：一种字节组合和字符的对应表,  基础的 ascii 码共有 128 种组合， 因为不同国家语言字符的需要， 现在很多是扩展的 ascii码，但不同的 扩展ascii 码的前 127 位是基本相同的， 这一部分称为基础 ascii 码： \n\n{% asset_img  ascii.png%}\n\n假如我们不通过 Base64 编码， 而是直接向不同设备传输二进制数据，因为一些老旧设备或者软件对于某些二进制值字符的处理方式可能不同， 因就有可能被错误处理，为了解决这种问题， 我们使用Base64 编码将数据统一编码为可见字符，而可见字符在大多设备上的表现行为是一致的，这样就使得数据在不同设备之间的处理出错的可能被降低了。\n\nBase64 码共用 64 种对应字符， 对应字符如下:\n\n{% asset_img  base64.jpg%}\n\nBase64 码由下面这些字符组成：\n\n1. 0 - 25 为大写英文字符 A - Z\n2. 26 - 51 为小写英文字符 a - z\n3. 52 - 61 为数字 0 -9\n4. 另外两个字符 + 和 /\n\n## Base64编码原理\n\nBase64 本质上是将二进制数据转为文本的形式， 当遇到十进制数据的时候， 需要将十进制转为二进制， 对于二进制数据以连续 6 比特计算其十进制值， 在根据这个值查找上图 Base64表中的字符， 最终我们得到的这段文本即是我们编码后的数据：\n\n比如我们对于 `myname` 进行Base64 编码：\n\n|    原始字符    |    m     |    y     |    n     |    a     |    m     |    e     |        |        |\n| :------------: | :------: | :------: | :------: | :------: | :------: | :------: | :----: | :----: |\n| ASCII码十进制  |   109    |   121    |   110    |    97    |   109    |   101    |        |        |\n|     二进制     | 01101101 | 01111001 | 01101110 | 01100001 | 01101101 | 01100101 |        |        |\n| Base64码二进制 |  011011  |  010111  |  100101  |  101110  |  011000  |  010110  | 110101 | 100101 |\n| Base64码十进制 |    27    |    23    |    37    |    46    |    24    |    22    |   53   |   37   |\n|  对应 Base64   |    b     |    X     |    l     |    u     |    Y     |    W     |   1    |   l    |\n\n最终使用 Base64 编码之后的字符串为  `bXluYW1l`\n\n在上面的编码过程中， 我们将六个字符的字符串编码为八个字符的字符串， 编码长度前后对比为 4 ：3， 也即是说， 当原始字符长度为 3 的倍数时， 编码之后长度为 4 的相应倍数， 如果， 原始字符长度不能被 3 整除怎么办？ 这时候， 我们需要对原始字符的二进制进行补零操作：\n\n例如， 我们对于 `my` 进行编码：\n\n| 原始字符       | m        | y        |          |        |\n| -------------- | -------- | -------- | -------- | ------ |\n| ASCII码十进制  | 109      | 121      |          |        |\n| 二进制         | 01101101 | 01111001 | 00000000 |        |\n| Base64码二进制 | 011011   | 010111   | 100100   | 000000 |\n| Base64码十进制 | 27       | 23       | 36       | 0      |\n| 对应 Base64    | b        | X        | k        | A      |\n\n因为原始字符中补充的 0 没有任何意义， 因此编码后的 A 不带有任何的意义，标准的 ascii 码中将 A 替换为 `=`\n\n`my` 的编码字符串为 `bXk=`;\n\n对于解码过程， 首先观察编码字符串长度， 如果字符串长度不能被 4 整除，那么，需要给编码字符串补充 = 来使得字符串长度可以被 4 整除， 然后在进行解码操作。\n\n解码过程是编码过程的逆向操作，将编码字符串的 `=` 转为 `A`, 然后转为十进制的 Base64 码， 后转为二进制的6位比特值，将字符串末尾的相应 `A` 的二进制比特0值丢弃，因为他们不携带任何的信息。\n\n最后将8位二进制转为原始字符.\n\n\n\n## 前端应用 Base64\n\nBase64 在前端应用比较常见的是将图片的二进制数据转为 Base64， 嵌套入 html 中。\n\n现代浏览器对于图片的 src 属性支持一种 `dataUrl` 的特性，格式为：\n\n`url(data:文件类型;编码方式,编码后的文件内容)`\n\n例如百度搜索的dataURL：\n\n{% asset_img  image-20190914095537734.png%}\n\n使用这种方式的优点是可以减少外部资源请求， 加快页面加载时间， 缺点是对于色彩丰富的图片， 二进制数据编码之后的 Base64 字符串会比较大， 会影响页面的加载速度\n\n## 其他：Data URLs\n\nData URLs 是以 `data:` 协议为前缀的一种 url，使用 data url 实现了可以将一些小的文件嵌入到文档中的一种方法\n\ndata url 的组成结构如下：\n\n `data:[<mediatype>][;base64],<data>`\n\n data url 由下面三种结构组成:\n\n `mediatype` 表示当前文件的 `MIME type`, 例如： `image/jpeg`, `text/plain` 等\n\n当数据 `data` 为非文本的格式的时候， 使用一个 `base64` 标志表示当前的数据为使用 `base64` 编码之后的数据，对于文字格式， 也是可以使用 `base64` 进行编码操作\n\n`data`: 数据本身\n\n我们经常会遇到的是经过 `base64` 编码过后的图片，除了图片之外， 我们还可以对于文字进行转为 `data url` 的形式：\n\n`data:,Hello%2C%20World!`\n\n`data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D`\n// 经过 base64 编码过的上面的文本： Hello World!\n\n`data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E`\n// html 文本： `<h1>Hello World!<h1>`\n\n注意：在 data url 中数据本身是 `data`,当我们需要对于数据进行操作的时候， 我们需要获取到 `data urls` 中的数据：\n\n```js\n// 在 node 中下载 data urls 形式的图片\nconst fs = require('fs');\nfunction downloadImage(dataUrl) {\n  dataUrl = dataUrl.replace(/^data:image\\/png;base64,/, \"\");\n  fs.writeSync('image.jpg', dataUrl, { encoding: 'base64' });\n}\n\n```\n\n参考链接：[data urls](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)","slug":"base64","published":1,"updated":"2020-09-14T06:36:25.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t61000pi2osdhu1udo3","content":"<p>Base64 作为一种编码方式， 可以将对于一些数据使用Base64 编码， 那么， 为什么使用 Base64 编码， 使用 Base64 编码的原理是什么以及 Base64 编码在前端的应用，下面的文章将会涉及这些内容：</p>\n<h2 id=\"what-is-Base64\"><a href=\"#what-is-Base64\" class=\"headerlink\" title=\"what is Base64?\"></a>what is Base64?</h2><p>在计算机中， 一个字节通常有8位字符， 这些字符使用二进制表示共有 256 种组合， 这些组合形成了 ascii（American Standard Code for Information Interchange，美国信息交换标准代码） 码：一种字节组合和字符的对应表,  基础的 ascii 码共有 128 种组合， 因为不同国家语言字符的需要， 现在很多是扩展的 ascii码，但不同的 扩展ascii 码的前 127 位是基本相同的， 这一部分称为基础 ascii 码： </p>\n<img src=\"/2019/09/13/base64/ascii.png\">\n<p>假如我们不通过 Base64 编码， 而是直接向不同设备传输二进制数据，因为一些老旧设备或者软件对于某些二进制值字符的处理方式可能不同， 因就有可能被错误处理，为了解决这种问题， 我们使用Base64 编码将数据统一编码为可见字符，而可见字符在大多设备上的表现行为是一致的，这样就使得数据在不同设备之间的处理出错的可能被降低了。</p>\n<p>Base64 码共用 64 种对应字符， 对应字符如下:</p>\n<img src=\"/2019/09/13/base64/base64.jpg\">\n<p>Base64 码由下面这些字符组成：</p>\n<ol>\n<li>0 - 25 为大写英文字符 A - Z</li>\n<li>26 - 51 为小写英文字符 a - z</li>\n<li>52 - 61 为数字 0 -9</li>\n<li>另外两个字符 + 和 /</li>\n</ol>\n<h2 id=\"Base64编码原理\"><a href=\"#Base64编码原理\" class=\"headerlink\" title=\"Base64编码原理\"></a>Base64编码原理</h2><p>Base64 本质上是将二进制数据转为文本的形式， 当遇到十进制数据的时候， 需要将十进制转为二进制， 对于二进制数据以连续 6 比特计算其十进制值， 在根据这个值查找上图 Base64表中的字符， 最终我们得到的这段文本即是我们编码后的数据：</p>\n<p>比如我们对于 <code>myname</code> 进行Base64 编码：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原始字符</th>\n<th style=\"text-align:center\">m</th>\n<th style=\"text-align:center\">y</th>\n<th style=\"text-align:center\">n</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">m</th>\n<th style=\"text-align:center\">e</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ASCII码十进制</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">110</td>\n<td style=\"text-align:center\">97</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">二进制</td>\n<td style=\"text-align:center\">01101101</td>\n<td style=\"text-align:center\">01111001</td>\n<td style=\"text-align:center\">01101110</td>\n<td style=\"text-align:center\">01100001</td>\n<td style=\"text-align:center\">01101101</td>\n<td style=\"text-align:center\">01100101</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Base64码二进制</td>\n<td style=\"text-align:center\">011011</td>\n<td style=\"text-align:center\">010111</td>\n<td style=\"text-align:center\">100101</td>\n<td style=\"text-align:center\">101110</td>\n<td style=\"text-align:center\">011000</td>\n<td style=\"text-align:center\">010110</td>\n<td style=\"text-align:center\">110101</td>\n<td style=\"text-align:center\">100101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Base64码十进制</td>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">46</td>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">37</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对应 Base64</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n</tbody>\n</table>\n<p>最终使用 Base64 编码之后的字符串为  <code>bXluYW1l</code></p>\n<p>在上面的编码过程中， 我们将六个字符的字符串编码为八个字符的字符串， 编码长度前后对比为 4 ：3， 也即是说， 当原始字符长度为 3 的倍数时， 编码之后长度为 4 的相应倍数， 如果， 原始字符长度不能被 3 整除怎么办？ 这时候， 我们需要对原始字符的二进制进行补零操作：</p>\n<p>例如， 我们对于 <code>my</code> 进行编码：</p>\n<table>\n<thead>\n<tr>\n<th>原始字符</th>\n<th>m</th>\n<th>y</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII码十进制</td>\n<td>109</td>\n<td>121</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td>01101101</td>\n<td>01111001</td>\n<td>00000000</td>\n<td></td>\n</tr>\n<tr>\n<td>Base64码二进制</td>\n<td>011011</td>\n<td>010111</td>\n<td>100100</td>\n<td>000000</td>\n</tr>\n<tr>\n<td>Base64码十进制</td>\n<td>27</td>\n<td>23</td>\n<td>36</td>\n<td>0</td>\n</tr>\n<tr>\n<td>对应 Base64</td>\n<td>b</td>\n<td>X</td>\n<td>k</td>\n<td>A</td>\n</tr>\n</tbody>\n</table>\n<p>因为原始字符中补充的 0 没有任何意义， 因此编码后的 A 不带有任何的意义，标准的 ascii 码中将 A 替换为 <code>=</code></p>\n<p><code>my</code> 的编码字符串为 <code>bXk=</code>;</p>\n<p>对于解码过程， 首先观察编码字符串长度， 如果字符串长度不能被 4 整除，那么，需要给编码字符串补充 = 来使得字符串长度可以被 4 整除， 然后在进行解码操作。</p>\n<p>解码过程是编码过程的逆向操作，将编码字符串的 <code>=</code> 转为 <code>A</code>, 然后转为十进制的 Base64 码， 后转为二进制的6位比特值，将字符串末尾的相应 <code>A</code> 的二进制比特0值丢弃，因为他们不携带任何的信息。</p>\n<p>最后将8位二进制转为原始字符.</p>\n<h2 id=\"前端应用-Base64\"><a href=\"#前端应用-Base64\" class=\"headerlink\" title=\"前端应用 Base64\"></a>前端应用 Base64</h2><p>Base64 在前端应用比较常见的是将图片的二进制数据转为 Base64， 嵌套入 html 中。</p>\n<p>现代浏览器对于图片的 src 属性支持一种 <code>dataUrl</code> 的特性，格式为：</p>\n<p><code>url(data:文件类型;编码方式,编码后的文件内容)</code></p>\n<p>例如百度搜索的dataURL：</p>\n<img src=\"/2019/09/13/base64/image-20190914095537734.png\">\n<p>使用这种方式的优点是可以减少外部资源请求， 加快页面加载时间， 缺点是对于色彩丰富的图片， 二进制数据编码之后的 Base64 字符串会比较大， 会影响页面的加载速度</p>\n<h2 id=\"其他：Data-URLs\"><a href=\"#其他：Data-URLs\" class=\"headerlink\" title=\"其他：Data URLs\"></a>其他：Data URLs</h2><p>Data URLs 是以 <code>data:</code> 协议为前缀的一种 url，使用 data url 实现了可以将一些小的文件嵌入到文档中的一种方法</p>\n<p>data url 的组成结构如下：</p>\n<p> <code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p>\n<p> data url 由下面三种结构组成:</p>\n<p> <code>mediatype</code> 表示当前文件的 <code>MIME type</code>, 例如： <code>image/jpeg</code>, <code>text/plain</code> 等</p>\n<p>当数据 <code>data</code> 为非文本的格式的时候， 使用一个 <code>base64</code> 标志表示当前的数据为使用 <code>base64</code> 编码之后的数据，对于文字格式， 也是可以使用 <code>base64</code> 进行编码操作</p>\n<p><code>data</code>: 数据本身</p>\n<p>我们经常会遇到的是经过 <code>base64</code> 编码过后的图片，除了图片之外， 我们还可以对于文字进行转为 <code>data url</code> 的形式：</p>\n<p><code>data:,Hello%2C%20World!</code></p>\n<p><code>data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</code><br>// 经过 base64 编码过的上面的文本： Hello World!</p>\n<p><code>data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</code><br>// html 文本： <code>&lt;h1&gt;Hello World!&lt;h1&gt;</code></p>\n<p>注意：在 data url 中数据本身是 <code>data</code>,当我们需要对于数据进行操作的时候， 我们需要获取到 <code>data urls</code> 中的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 node 中下载 data urls 形式的图片</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImage</span>(<span class=\"params\">dataUrl</span>) </span>&#123;</span><br><span class=\"line\">  dataUrl = dataUrl.replace(<span class=\"regexp\">/^data:image\\/png;base64,/</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  fs.writeSync(<span class=\"string\">'image.jpg'</span>, dataUrl, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'base64'</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data urls</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Base64 作为一种编码方式， 可以将对于一些数据使用Base64 编码， 那么， 为什么使用 Base64 编码， 使用 Base64 编码的原理是什么以及 Base64 编码在前端的应用，下面的文章将会涉及这些内容：</p>\n<h2 id=\"what-is-Base64\"><a href=\"#what-is-Base64\" class=\"headerlink\" title=\"what is Base64?\"></a>what is Base64?</h2><p>在计算机中， 一个字节通常有8位字符， 这些字符使用二进制表示共有 256 种组合， 这些组合形成了 ascii（American Standard Code for Information Interchange，美国信息交换标准代码） 码：一种字节组合和字符的对应表,  基础的 ascii 码共有 128 种组合， 因为不同国家语言字符的需要， 现在很多是扩展的 ascii码，但不同的 扩展ascii 码的前 127 位是基本相同的， 这一部分称为基础 ascii 码： </p>\n<img src=\"/2019/09/13/base64/ascii.png\">\n<p>假如我们不通过 Base64 编码， 而是直接向不同设备传输二进制数据，因为一些老旧设备或者软件对于某些二进制值字符的处理方式可能不同， 因就有可能被错误处理，为了解决这种问题， 我们使用Base64 编码将数据统一编码为可见字符，而可见字符在大多设备上的表现行为是一致的，这样就使得数据在不同设备之间的处理出错的可能被降低了。</p>\n<p>Base64 码共用 64 种对应字符， 对应字符如下:</p>\n<img src=\"/2019/09/13/base64/base64.jpg\">\n<p>Base64 码由下面这些字符组成：</p>\n<ol>\n<li>0 - 25 为大写英文字符 A - Z</li>\n<li>26 - 51 为小写英文字符 a - z</li>\n<li>52 - 61 为数字 0 -9</li>\n<li>另外两个字符 + 和 /</li>\n</ol>\n<h2 id=\"Base64编码原理\"><a href=\"#Base64编码原理\" class=\"headerlink\" title=\"Base64编码原理\"></a>Base64编码原理</h2><p>Base64 本质上是将二进制数据转为文本的形式， 当遇到十进制数据的时候， 需要将十进制转为二进制， 对于二进制数据以连续 6 比特计算其十进制值， 在根据这个值查找上图 Base64表中的字符， 最终我们得到的这段文本即是我们编码后的数据：</p>\n<p>比如我们对于 <code>myname</code> 进行Base64 编码：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原始字符</th>\n<th style=\"text-align:center\">m</th>\n<th style=\"text-align:center\">y</th>\n<th style=\"text-align:center\">n</th>\n<th style=\"text-align:center\">a</th>\n<th style=\"text-align:center\">m</th>\n<th style=\"text-align:center\">e</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ASCII码十进制</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">121</td>\n<td style=\"text-align:center\">110</td>\n<td style=\"text-align:center\">97</td>\n<td style=\"text-align:center\">109</td>\n<td style=\"text-align:center\">101</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">二进制</td>\n<td style=\"text-align:center\">01101101</td>\n<td style=\"text-align:center\">01111001</td>\n<td style=\"text-align:center\">01101110</td>\n<td style=\"text-align:center\">01100001</td>\n<td style=\"text-align:center\">01101101</td>\n<td style=\"text-align:center\">01100101</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Base64码二进制</td>\n<td style=\"text-align:center\">011011</td>\n<td style=\"text-align:center\">010111</td>\n<td style=\"text-align:center\">100101</td>\n<td style=\"text-align:center\">101110</td>\n<td style=\"text-align:center\">011000</td>\n<td style=\"text-align:center\">010110</td>\n<td style=\"text-align:center\">110101</td>\n<td style=\"text-align:center\">100101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Base64码十进制</td>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">46</td>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">37</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对应 Base64</td>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">l</td>\n</tr>\n</tbody>\n</table>\n<p>最终使用 Base64 编码之后的字符串为  <code>bXluYW1l</code></p>\n<p>在上面的编码过程中， 我们将六个字符的字符串编码为八个字符的字符串， 编码长度前后对比为 4 ：3， 也即是说， 当原始字符长度为 3 的倍数时， 编码之后长度为 4 的相应倍数， 如果， 原始字符长度不能被 3 整除怎么办？ 这时候， 我们需要对原始字符的二进制进行补零操作：</p>\n<p>例如， 我们对于 <code>my</code> 进行编码：</p>\n<table>\n<thead>\n<tr>\n<th>原始字符</th>\n<th>m</th>\n<th>y</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII码十进制</td>\n<td>109</td>\n<td>121</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td>01101101</td>\n<td>01111001</td>\n<td>00000000</td>\n<td></td>\n</tr>\n<tr>\n<td>Base64码二进制</td>\n<td>011011</td>\n<td>010111</td>\n<td>100100</td>\n<td>000000</td>\n</tr>\n<tr>\n<td>Base64码十进制</td>\n<td>27</td>\n<td>23</td>\n<td>36</td>\n<td>0</td>\n</tr>\n<tr>\n<td>对应 Base64</td>\n<td>b</td>\n<td>X</td>\n<td>k</td>\n<td>A</td>\n</tr>\n</tbody>\n</table>\n<p>因为原始字符中补充的 0 没有任何意义， 因此编码后的 A 不带有任何的意义，标准的 ascii 码中将 A 替换为 <code>=</code></p>\n<p><code>my</code> 的编码字符串为 <code>bXk=</code>;</p>\n<p>对于解码过程， 首先观察编码字符串长度， 如果字符串长度不能被 4 整除，那么，需要给编码字符串补充 = 来使得字符串长度可以被 4 整除， 然后在进行解码操作。</p>\n<p>解码过程是编码过程的逆向操作，将编码字符串的 <code>=</code> 转为 <code>A</code>, 然后转为十进制的 Base64 码， 后转为二进制的6位比特值，将字符串末尾的相应 <code>A</code> 的二进制比特0值丢弃，因为他们不携带任何的信息。</p>\n<p>最后将8位二进制转为原始字符.</p>\n<h2 id=\"前端应用-Base64\"><a href=\"#前端应用-Base64\" class=\"headerlink\" title=\"前端应用 Base64\"></a>前端应用 Base64</h2><p>Base64 在前端应用比较常见的是将图片的二进制数据转为 Base64， 嵌套入 html 中。</p>\n<p>现代浏览器对于图片的 src 属性支持一种 <code>dataUrl</code> 的特性，格式为：</p>\n<p><code>url(data:文件类型;编码方式,编码后的文件内容)</code></p>\n<p>例如百度搜索的dataURL：</p>\n<img src=\"/2019/09/13/base64/image-20190914095537734.png\">\n<p>使用这种方式的优点是可以减少外部资源请求， 加快页面加载时间， 缺点是对于色彩丰富的图片， 二进制数据编码之后的 Base64 字符串会比较大， 会影响页面的加载速度</p>\n<h2 id=\"其他：Data-URLs\"><a href=\"#其他：Data-URLs\" class=\"headerlink\" title=\"其他：Data URLs\"></a>其他：Data URLs</h2><p>Data URLs 是以 <code>data:</code> 协议为前缀的一种 url，使用 data url 实现了可以将一些小的文件嵌入到文档中的一种方法</p>\n<p>data url 的组成结构如下：</p>\n<p> <code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p>\n<p> data url 由下面三种结构组成:</p>\n<p> <code>mediatype</code> 表示当前文件的 <code>MIME type</code>, 例如： <code>image/jpeg</code>, <code>text/plain</code> 等</p>\n<p>当数据 <code>data</code> 为非文本的格式的时候， 使用一个 <code>base64</code> 标志表示当前的数据为使用 <code>base64</code> 编码之后的数据，对于文字格式， 也是可以使用 <code>base64</code> 进行编码操作</p>\n<p><code>data</code>: 数据本身</p>\n<p>我们经常会遇到的是经过 <code>base64</code> 编码过后的图片，除了图片之外， 我们还可以对于文字进行转为 <code>data url</code> 的形式：</p>\n<p><code>data:,Hello%2C%20World!</code></p>\n<p><code>data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D</code><br>// 经过 base64 编码过的上面的文本： Hello World!</p>\n<p><code>data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E</code><br>// html 文本： <code>&lt;h1&gt;Hello World!&lt;h1&gt;</code></p>\n<p>注意：在 data url 中数据本身是 <code>data</code>,当我们需要对于数据进行操作的时候， 我们需要获取到 <code>data urls</code> 中的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 node 中下载 data urls 形式的图片</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImage</span>(<span class=\"params\">dataUrl</span>) </span>&#123;</span><br><span class=\"line\">  dataUrl = dataUrl.replace(<span class=\"regexp\">/^data:image\\/png;base64,/</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  fs.writeSync(<span class=\"string\">'image.jpg'</span>, dataUrl, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'base64'</span> &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\" target=\"_blank\" rel=\"noopener\">data urls</a></p>\n"},{"title":"css modules: 前端模块化","date":"2018-09-09T08:46:24.000Z","_content":"在 `css` 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 `js` 或者 `json` 的形式来重写 `css`, 这样写的好处在于方便利用 `js` 的模块化管理，缺点在于缺少 `css` 预处理器例如 less sass 等的支持，例如 `react-style` 属于这种解决方案。另外一种是依旧采用 `css` 的原生态写法， 但是通过 `js` 来进行管理依赖， 下面我们介绍的 `css-modules` 属于这种的写法。\n\n### css 模块化中的一些问题\n在 `css` 的模块化的过程中， 下面几种问题是需要解决的：\n\n#### 全局污染\n在 css 中， 样式 `style` 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 `!important` ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。\n\n#### 命名混乱\n混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  `BEM` 的命名方式；\n\n#### 依赖管理不彻底\n\n在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。\n\n\n#### 实现变量共享\n\n在复杂的组件中, 可能需要通过 `js` 或者 `css` 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 `css` 与 `js` 之间的变量共享。\n\n### CSS modules\n\n`css modules` 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 `css modules` 中的 `css` 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 `webpack`, 使用 `css modules` 应用的类名会被编译为一串字符， 从而避免 `class` 命名的重复。\n\n下面是一些基本的语法:\n#### 基本语法\n\n##### 引入与导出\n\n在需要使用 `css` 的组件中通过使用 `import` 的方法进行导入：\n\nindex.css:\n```css\n.btn { /* btn 的相关样式 */ }\n```\n\nindex.js:\n\n```js\nimport style from \"./index.css\";\n...\nrender () {\n    return <button className={ style.btn }></button>\n}\n...\n```\n\n最终生成：\n```\n<button class=\"btn\"></button>\n```\n通过使用 js 引入的方式还可以实现常量的共享功能：\n对于常量， 需要使用 `:export`关键字将 css 中的常量输出到 js 中:\n\n```less\n@color: \"red\";\n\n:export {\n    color: @color;\n}\n```\n```js\nimport style from \"./index.css\";\n\nstyle.color // \"red\"\n```\n\n\n\n##### 全局与局部样式\n\n通过使用 `:global` 和 `:local` 样式可以将当前的样式声明为全局和局部样式：\n\nindex.css:\n```css\n.btn {\n    color: blue;\n}\n\n// 等同于下面的 local\n\n:local(.btn) {\n    color: blue;\n}\n\n// 声明为全局样式\n// 文件中所有类名为 `btn` 的元素都将应用这个样式\n:global {\n    .btn {\n        color: blue;\n    }\n}\n```\n\n##### 代码复用与样式组合\n\n在 `css-modules` 中使用  `composes` 来实现多个类名的组合， 例如， 当我们定义组件 `Button` 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写\n\n```less\n.btn {\n    // 定义基础样式\n}\n.btn-small {\n    // small 大小相关样式\n}\n.btn-text {\n    // text btn 相关样式\n}\n<!-- 组合样式  -->\n.btn-small-text {\n    compose: btn btn-small btn-text;\n}\n\n// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合\n\n.btn-small-text {\n    composes: global-btn btn-small btn-text;\n}\n```\n\n注意：**使用 `composes`进行样式组合的时候， 需保证组合的样式名在`composes`之前已经存在了， 并且是单独的样式名， 没有嵌套关系**\n\n#### 使用技巧\n\n* 减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠\n* 使用 `composes` 类名组合来组合样式\n* 不使用选择器， 仅仅使用 class 来定义样式\n\n### CSS modules 使用\n\n项目中使用 `less` 作为 css 预处理器，在 webpack 中 `css-loader` 支持 `css modules`, 相关配置如下:\n\n```js\ntest: /\\.less$/,\nuse: [\n    {\n    loader: 'style-loader'\n    },\n    {\n    loader: 'css-loader',\n    options: {\n        // 启用 css modules\n        modules: true,\n        // 定义最终编译之后的样式名称\n        // local: 应用的 class 名称\n        // hash: 编译时随机生成的 hash 值， 避免 class 名称重复\n        localIdentName: '[local]--[hash:base64:5]'\n    }\n    }, \n    {\n        loader: 'less-loader'\n    }\n]\n```\n","source":"_posts/css-modules-前端模块化.md","raw":"---\ntitle: 'css modules: 前端模块化'\ndate: 2018-09-09 16:46:24\ntags: css modules\ncategories: CSS\n---\n在 `css` 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 `js` 或者 `json` 的形式来重写 `css`, 这样写的好处在于方便利用 `js` 的模块化管理，缺点在于缺少 `css` 预处理器例如 less sass 等的支持，例如 `react-style` 属于这种解决方案。另外一种是依旧采用 `css` 的原生态写法， 但是通过 `js` 来进行管理依赖， 下面我们介绍的 `css-modules` 属于这种的写法。\n\n### css 模块化中的一些问题\n在 `css` 的模块化的过程中， 下面几种问题是需要解决的：\n\n#### 全局污染\n在 css 中， 样式 `style` 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 `!important` ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。\n\n#### 命名混乱\n混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  `BEM` 的命名方式；\n\n#### 依赖管理不彻底\n\n在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。\n\n\n#### 实现变量共享\n\n在复杂的组件中, 可能需要通过 `js` 或者 `css` 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 `css` 与 `js` 之间的变量共享。\n\n### CSS modules\n\n`css modules` 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 `css modules` 中的 `css` 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 `webpack`, 使用 `css modules` 应用的类名会被编译为一串字符， 从而避免 `class` 命名的重复。\n\n下面是一些基本的语法:\n#### 基本语法\n\n##### 引入与导出\n\n在需要使用 `css` 的组件中通过使用 `import` 的方法进行导入：\n\nindex.css:\n```css\n.btn { /* btn 的相关样式 */ }\n```\n\nindex.js:\n\n```js\nimport style from \"./index.css\";\n...\nrender () {\n    return <button className={ style.btn }></button>\n}\n...\n```\n\n最终生成：\n```\n<button class=\"btn\"></button>\n```\n通过使用 js 引入的方式还可以实现常量的共享功能：\n对于常量， 需要使用 `:export`关键字将 css 中的常量输出到 js 中:\n\n```less\n@color: \"red\";\n\n:export {\n    color: @color;\n}\n```\n```js\nimport style from \"./index.css\";\n\nstyle.color // \"red\"\n```\n\n\n\n##### 全局与局部样式\n\n通过使用 `:global` 和 `:local` 样式可以将当前的样式声明为全局和局部样式：\n\nindex.css:\n```css\n.btn {\n    color: blue;\n}\n\n// 等同于下面的 local\n\n:local(.btn) {\n    color: blue;\n}\n\n// 声明为全局样式\n// 文件中所有类名为 `btn` 的元素都将应用这个样式\n:global {\n    .btn {\n        color: blue;\n    }\n}\n```\n\n##### 代码复用与样式组合\n\n在 `css-modules` 中使用  `composes` 来实现多个类名的组合， 例如， 当我们定义组件 `Button` 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写\n\n```less\n.btn {\n    // 定义基础样式\n}\n.btn-small {\n    // small 大小相关样式\n}\n.btn-text {\n    // text btn 相关样式\n}\n<!-- 组合样式  -->\n.btn-small-text {\n    compose: btn btn-small btn-text;\n}\n\n// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合\n\n.btn-small-text {\n    composes: global-btn btn-small btn-text;\n}\n```\n\n注意：**使用 `composes`进行样式组合的时候， 需保证组合的样式名在`composes`之前已经存在了， 并且是单独的样式名， 没有嵌套关系**\n\n#### 使用技巧\n\n* 减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠\n* 使用 `composes` 类名组合来组合样式\n* 不使用选择器， 仅仅使用 class 来定义样式\n\n### CSS modules 使用\n\n项目中使用 `less` 作为 css 预处理器，在 webpack 中 `css-loader` 支持 `css modules`, 相关配置如下:\n\n```js\ntest: /\\.less$/,\nuse: [\n    {\n    loader: 'style-loader'\n    },\n    {\n    loader: 'css-loader',\n    options: {\n        // 启用 css modules\n        modules: true,\n        // 定义最终编译之后的样式名称\n        // local: 应用的 class 名称\n        // hash: 编译时随机生成的 hash 值， 避免 class 名称重复\n        localIdentName: '[local]--[hash:base64:5]'\n    }\n    }, \n    {\n        loader: 'less-loader'\n    }\n]\n```\n","slug":"css-modules-前端模块化","published":1,"updated":"2020-09-14T06:36:25.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t63000ti2oslzcwikyg","content":"<p>在 <code>css</code> 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 <code>js</code> 或者 <code>json</code> 的形式来重写 <code>css</code>, 这样写的好处在于方便利用 <code>js</code> 的模块化管理，缺点在于缺少 <code>css</code> 预处理器例如 less sass 等的支持，例如 <code>react-style</code> 属于这种解决方案。另外一种是依旧采用 <code>css</code> 的原生态写法， 但是通过 <code>js</code> 来进行管理依赖， 下面我们介绍的 <code>css-modules</code> 属于这种的写法。</p>\n<h3 id=\"css-模块化中的一些问题\"><a href=\"#css-模块化中的一些问题\" class=\"headerlink\" title=\"css 模块化中的一些问题\"></a>css 模块化中的一些问题</h3><p>在 <code>css</code> 的模块化的过程中， 下面几种问题是需要解决的：</p>\n<h4 id=\"全局污染\"><a href=\"#全局污染\" class=\"headerlink\" title=\"全局污染\"></a>全局污染</h4><p>在 css 中， 样式 <code>style</code> 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 <code>!important</code> ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。</p>\n<h4 id=\"命名混乱\"><a href=\"#命名混乱\" class=\"headerlink\" title=\"命名混乱\"></a>命名混乱</h4><p>混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  <code>BEM</code> 的命名方式；</p>\n<h4 id=\"依赖管理不彻底\"><a href=\"#依赖管理不彻底\" class=\"headerlink\" title=\"依赖管理不彻底\"></a>依赖管理不彻底</h4><p>在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。</p>\n<h4 id=\"实现变量共享\"><a href=\"#实现变量共享\" class=\"headerlink\" title=\"实现变量共享\"></a>实现变量共享</h4><p>在复杂的组件中, 可能需要通过 <code>js</code> 或者 <code>css</code> 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 <code>css</code> 与 <code>js</code> 之间的变量共享。</p>\n<h3 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h3><p><code>css modules</code> 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 <code>css modules</code> 中的 <code>css</code> 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 <code>webpack</code>, 使用 <code>css modules</code> 应用的类名会被编译为一串字符， 从而避免 <code>class</code> 命名的重复。</p>\n<p>下面是一些基本的语法:</p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"引入与导出\"><a href=\"#引入与导出\" class=\"headerlink\" title=\"引入与导出\"></a>引入与导出</h5><p>在需要使用 <code>css</code> 的组件中通过使用 <code>import</code> 的方法进行导入：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"comment\">/* btn 的相关样式 */</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">style.btn</span> &#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>最终生成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过使用 js 引入的方式还可以实现常量的共享功能：<br>对于常量， 需要使用 <code>:export</code>关键字将 css 中的常量输出到 js 中:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:export</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">style.color <span class=\"comment\">// \"red\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局与局部样式\"><a href=\"#全局与局部样式\" class=\"headerlink\" title=\"全局与局部样式\"></a>全局与局部样式</h5><p>通过使用 <code>:global</code> 和 <code>:local</code> 样式可以将当前的样式声明为全局和局部样式：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于下面的 local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:local(.btn)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明为全局样式</span><br><span class=\"line\">// 文件中所有类名为 `btn` 的元素都将应用这个样式</span><br><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">    .btn &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">blue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"代码复用与样式组合\"><a href=\"#代码复用与样式组合\" class=\"headerlink\" title=\"代码复用与样式组合\"></a>代码复用与样式组合</h5><p>在 <code>css-modules</code> 中使用  <code>composes</code> 来实现多个类名的组合， 例如， 当我们定义组件 <code>Button</code> 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义基础样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// small 大小相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-text</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// text btn 相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 组合样式  --&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compose</span>: btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">composes</span>: global-btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<strong>使用 <code>composes</code>进行样式组合的时候， 需保证组合的样式名在<code>composes</code>之前已经存在了， 并且是单独的样式名， 没有嵌套关系</strong></p>\n<h4 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h4><ul>\n<li>减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠</li>\n<li>使用 <code>composes</code> 类名组合来组合样式</li>\n<li>不使用选择器， 仅仅使用 class 来定义样式</li>\n</ul>\n<h3 id=\"CSS-modules-使用\"><a href=\"#CSS-modules-使用\" class=\"headerlink\" title=\"CSS modules 使用\"></a>CSS modules 使用</h3><p>项目中使用 <code>less</code> 作为 css 预处理器，在 webpack 中 <code>css-loader</code> 支持 <code>css modules</code>, 相关配置如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用 css modules</span></span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 定义最终编译之后的样式名称</span></span><br><span class=\"line\">        <span class=\"comment\">// local: 应用的 class 名称</span></span><br><span class=\"line\">        <span class=\"comment\">// hash: 编译时随机生成的 hash 值， 避免 class 名称重复</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">'[local]--[hash:base64:5]'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>css</code> 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 <code>js</code> 或者 <code>json</code> 的形式来重写 <code>css</code>, 这样写的好处在于方便利用 <code>js</code> 的模块化管理，缺点在于缺少 <code>css</code> 预处理器例如 less sass 等的支持，例如 <code>react-style</code> 属于这种解决方案。另外一种是依旧采用 <code>css</code> 的原生态写法， 但是通过 <code>js</code> 来进行管理依赖， 下面我们介绍的 <code>css-modules</code> 属于这种的写法。</p>\n<h3 id=\"css-模块化中的一些问题\"><a href=\"#css-模块化中的一些问题\" class=\"headerlink\" title=\"css 模块化中的一些问题\"></a>css 模块化中的一些问题</h3><p>在 <code>css</code> 的模块化的过程中， 下面几种问题是需要解决的：</p>\n<h4 id=\"全局污染\"><a href=\"#全局污染\" class=\"headerlink\" title=\"全局污染\"></a>全局污染</h4><p>在 css 中， 样式 <code>style</code> 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 <code>!important</code> ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。</p>\n<h4 id=\"命名混乱\"><a href=\"#命名混乱\" class=\"headerlink\" title=\"命名混乱\"></a>命名混乱</h4><p>混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  <code>BEM</code> 的命名方式；</p>\n<h4 id=\"依赖管理不彻底\"><a href=\"#依赖管理不彻底\" class=\"headerlink\" title=\"依赖管理不彻底\"></a>依赖管理不彻底</h4><p>在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。</p>\n<h4 id=\"实现变量共享\"><a href=\"#实现变量共享\" class=\"headerlink\" title=\"实现变量共享\"></a>实现变量共享</h4><p>在复杂的组件中, 可能需要通过 <code>js</code> 或者 <code>css</code> 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 <code>css</code> 与 <code>js</code> 之间的变量共享。</p>\n<h3 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h3><p><code>css modules</code> 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 <code>css modules</code> 中的 <code>css</code> 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 <code>webpack</code>, 使用 <code>css modules</code> 应用的类名会被编译为一串字符， 从而避免 <code>class</code> 命名的重复。</p>\n<p>下面是一些基本的语法:</p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"引入与导出\"><a href=\"#引入与导出\" class=\"headerlink\" title=\"引入与导出\"></a>引入与导出</h5><p>在需要使用 <code>css</code> 的组件中通过使用 <code>import</code> 的方法进行导入：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"comment\">/* btn 的相关样式 */</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">style.btn</span> &#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>最终生成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过使用 js 引入的方式还可以实现常量的共享功能：<br>对于常量， 需要使用 <code>:export</code>关键字将 css 中的常量输出到 js 中:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:export</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">style.color <span class=\"comment\">// \"red\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局与局部样式\"><a href=\"#全局与局部样式\" class=\"headerlink\" title=\"全局与局部样式\"></a>全局与局部样式</h5><p>通过使用 <code>:global</code> 和 <code>:local</code> 样式可以将当前的样式声明为全局和局部样式：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于下面的 local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:local(.btn)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明为全局样式</span><br><span class=\"line\">// 文件中所有类名为 `btn` 的元素都将应用这个样式</span><br><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">    .btn &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">blue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"代码复用与样式组合\"><a href=\"#代码复用与样式组合\" class=\"headerlink\" title=\"代码复用与样式组合\"></a>代码复用与样式组合</h5><p>在 <code>css-modules</code> 中使用  <code>composes</code> 来实现多个类名的组合， 例如， 当我们定义组件 <code>Button</code> 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义基础样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// small 大小相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-text</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// text btn 相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 组合样式  --&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compose</span>: btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">composes</span>: global-btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<strong>使用 <code>composes</code>进行样式组合的时候， 需保证组合的样式名在<code>composes</code>之前已经存在了， 并且是单独的样式名， 没有嵌套关系</strong></p>\n<h4 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h4><ul>\n<li>减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠</li>\n<li>使用 <code>composes</code> 类名组合来组合样式</li>\n<li>不使用选择器， 仅仅使用 class 来定义样式</li>\n</ul>\n<h3 id=\"CSS-modules-使用\"><a href=\"#CSS-modules-使用\" class=\"headerlink\" title=\"CSS modules 使用\"></a>CSS modules 使用</h3><p>项目中使用 <code>less</code> 作为 css 预处理器，在 webpack 中 <code>css-loader</code> 支持 <code>css modules</code>, 相关配置如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用 css modules</span></span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 定义最终编译之后的样式名称</span></span><br><span class=\"line\">        <span class=\"comment\">// local: 应用的 class 名称</span></span><br><span class=\"line\">        <span class=\"comment\">// hash: 编译时随机生成的 hash 值， 避免 class 名称重复</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">'[local]--[hash:base64:5]'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"decode & encode","date":"2019-09-15T02:53:26.000Z","_content":"\n[js-base64](<https://github.com/dankogai/js-base64>) 是用来对于字符编码和解码操作的一个包， 可以用这个包实现原始字符与 base64 编码后字符之间的转换；\n\n核心代码：\n\n获取base64 对应字符在字符表中十进制值：\n\n```js\nvar b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64tab = function(bin) {\n  var t = {};\n  for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n  return t;\n}(b64chars);\n```\n\n字符解码：\n\n```js\nvar cb_decode = function(cccc) {\n  var len = cccc.length,\n      padlen = len % 4,\n      // 这里通过 << 移位操作，可以直接操作二进制值\n      // n : 将各个字符解码之后的二进制值对应的十进制\n      n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n  | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n  | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n  | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n      // 从二进制字符串中按照 8 位依次获取二进制的值\n      // chars 即为解码之后的字符串原始值\n      chars = [\n        fromCharCode( n >>> 16),\n        fromCharCode((n >>>  8) & 0xff),\n        fromCharCode( n         & 0xff)\n      ];\n  chars.length -= [0, 0, 2, 1][padlen];\n  return chars.join('');\n};\nvar _atob = global.atob ? function(a) {\n  return global.atob(a);\n} : function(a){\n  // 将base64 字符串按照 4 个字符长度剪切\n  return a.replace(/\\S{1,4}/g, cb_decode);\n};\n// 定义在 atob 上的方法用于字符解码\nvar atob = function(a) {\n  // replace 方法将不属于 base64 字符集内的字符清空\n  // 比如 base64 编码字符串中最后一位可能为 =， 这个符号不代表任何含义\n  // base64 字符集正则范围 A-Za-z0-9\\+\\/\n  return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n};\n```\n\n## 要点\n\n### `String.replace`  方法\n\n使用 `String.replace` 方法可以对于字符串中某些字符作替换操作：\n\n```js\nString.replace(searchStr | Regexp, replacedStr | replaceFn);\n// searchStr: 匹配的字符\n// Regexp: 正则表达式， 被正则表达式匹配到的都会被替换掉\n// replacedStr: 用于替换的字符串\n// replaceFn: 用于替换过程中的字符串\n// return: 被替换掉的字符串\n```\n\n例如上面的：\n\n```js\n// 将非base64 的字符串清除\nString(a).replace(/[^A-Za-z0-9\\+\\/]/g, '')\n```\n\n```js\n// 替换正则表达式匹配的字符串， 在替换过程中应用 cb_decode 方法\na.replace(/\\S{1,4}/g, cb_decode);\n```\n\n### 正则表达式相关\n\n* 在正则中使用限定符 `{}` 可以限定字符的长度范围\n\n  `\\S{1,4}`： 匹配字符长度为 1 - 4 的字符串\n\n  ```\n  // 截取字符串按长度为 4 分段截取\n  let strArr = [];\n  str.replace(/\\S{1,4}/g, (mStr) =>{\n    strArr.push(mStr);\n  });\n  ```\n\n  `replace` 方法接受函数参数如下图：\n\n  {% asset_img replaceFn.png%}\n\n* 正则中的描述符 `[]` 中使用 `^` 表示不匹配\n\n  ```js\n  // 正则表示不匹配base64 字符的字符\n  String(a).replace(/[^A-Za-z0-9\\+\\/]/g, '')\n  ```\n\n### 按位操作符相关\n\n在 js 中， 包含下面几种操作符号， 它们用来在js 中操作二进制数据的位数\n\n各种操作符号的作用如下图：\n\n{% asset_img 操作符.jpg%}\n\n示例：\n\n对于十进制数 10 和 20:\n\n```js\nlet s1 = 10;\nlet s2 = 20;\ns1 & s2; //  十进制 0 二进制 0\ns1 | s2; //  30  11110\ns1 ^ s2; //  30  11110\n~s1; // -11 -1011\ns1 << 2 // 40 101000\ns1 >> 2; // 2 10\ns1 >>> 2; // 2 10\n```\n\n位操作符在上面 base64 转换中的使用：\n\n* 使用 `|`来增加二进制字符串\n\n  使用  `|` 可以用来存储信息，比如我们对于一组数据定义其存放位置， 将这组二进制数存入到一段二进制值中：\n\n  ```js\n  let s1 = 10;\n  let s2 = 20;\n  let s3 = 30;\n  let str = s1 | s2 << 8 | s3 << 16;\n  // s1: 1010, s2: 10100, s3: 11110 str: 111100001010000001010\n  ```\n\n* 使用 `&` 来保留相应位数\n\n  如：\n\n  我们想要保留8位二进制的高四位：\n\n  `let str = s & 0xf0` \n\n  `0xf0`: 11110000\n\n  ```js\n  let s5 = 0xf0;\n  let s2 = 20;\n  let s4 = s2 & s5;\n  console.log(s5.toString(2), s2.toString(2), s4.toString(2));\n  // 11110000 10100 10000\n  ```\n\n### 进制间的转换\n\n在 js 中进制之间的相互转化方法如下：\n\n十进制转二进制：\n\n`numObj.toString(radix)`\n\n```js\nlet num = 2;\nnum.toString(2); // '10'\n```\n\n二进制十进制：\n\n`parseInt(string, radix)`\n\n> The `parseInt()` function parses a string argument and returns an integer of the specified [radix](https://en.wikipedia.org/wiki/Radix) (the base in mathematical numeral systems).\n\n```\nparseInt('10', 2);\n```\n\n\n\n","source":"_posts/encode & decode.md","raw":"---\ntitle: decode & encode\ndate: 2019-09-15 10:53:26\ntags: Base64\ncategories: Base64\n---\n\n[js-base64](<https://github.com/dankogai/js-base64>) 是用来对于字符编码和解码操作的一个包， 可以用这个包实现原始字符与 base64 编码后字符之间的转换；\n\n核心代码：\n\n获取base64 对应字符在字符表中十进制值：\n\n```js\nvar b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64tab = function(bin) {\n  var t = {};\n  for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n  return t;\n}(b64chars);\n```\n\n字符解码：\n\n```js\nvar cb_decode = function(cccc) {\n  var len = cccc.length,\n      padlen = len % 4,\n      // 这里通过 << 移位操作，可以直接操作二进制值\n      // n : 将各个字符解码之后的二进制值对应的十进制\n      n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n  | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n  | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n  | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n      // 从二进制字符串中按照 8 位依次获取二进制的值\n      // chars 即为解码之后的字符串原始值\n      chars = [\n        fromCharCode( n >>> 16),\n        fromCharCode((n >>>  8) & 0xff),\n        fromCharCode( n         & 0xff)\n      ];\n  chars.length -= [0, 0, 2, 1][padlen];\n  return chars.join('');\n};\nvar _atob = global.atob ? function(a) {\n  return global.atob(a);\n} : function(a){\n  // 将base64 字符串按照 4 个字符长度剪切\n  return a.replace(/\\S{1,4}/g, cb_decode);\n};\n// 定义在 atob 上的方法用于字符解码\nvar atob = function(a) {\n  // replace 方法将不属于 base64 字符集内的字符清空\n  // 比如 base64 编码字符串中最后一位可能为 =， 这个符号不代表任何含义\n  // base64 字符集正则范围 A-Za-z0-9\\+\\/\n  return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n};\n```\n\n## 要点\n\n### `String.replace`  方法\n\n使用 `String.replace` 方法可以对于字符串中某些字符作替换操作：\n\n```js\nString.replace(searchStr | Regexp, replacedStr | replaceFn);\n// searchStr: 匹配的字符\n// Regexp: 正则表达式， 被正则表达式匹配到的都会被替换掉\n// replacedStr: 用于替换的字符串\n// replaceFn: 用于替换过程中的字符串\n// return: 被替换掉的字符串\n```\n\n例如上面的：\n\n```js\n// 将非base64 的字符串清除\nString(a).replace(/[^A-Za-z0-9\\+\\/]/g, '')\n```\n\n```js\n// 替换正则表达式匹配的字符串， 在替换过程中应用 cb_decode 方法\na.replace(/\\S{1,4}/g, cb_decode);\n```\n\n### 正则表达式相关\n\n* 在正则中使用限定符 `{}` 可以限定字符的长度范围\n\n  `\\S{1,4}`： 匹配字符长度为 1 - 4 的字符串\n\n  ```\n  // 截取字符串按长度为 4 分段截取\n  let strArr = [];\n  str.replace(/\\S{1,4}/g, (mStr) =>{\n    strArr.push(mStr);\n  });\n  ```\n\n  `replace` 方法接受函数参数如下图：\n\n  {% asset_img replaceFn.png%}\n\n* 正则中的描述符 `[]` 中使用 `^` 表示不匹配\n\n  ```js\n  // 正则表示不匹配base64 字符的字符\n  String(a).replace(/[^A-Za-z0-9\\+\\/]/g, '')\n  ```\n\n### 按位操作符相关\n\n在 js 中， 包含下面几种操作符号， 它们用来在js 中操作二进制数据的位数\n\n各种操作符号的作用如下图：\n\n{% asset_img 操作符.jpg%}\n\n示例：\n\n对于十进制数 10 和 20:\n\n```js\nlet s1 = 10;\nlet s2 = 20;\ns1 & s2; //  十进制 0 二进制 0\ns1 | s2; //  30  11110\ns1 ^ s2; //  30  11110\n~s1; // -11 -1011\ns1 << 2 // 40 101000\ns1 >> 2; // 2 10\ns1 >>> 2; // 2 10\n```\n\n位操作符在上面 base64 转换中的使用：\n\n* 使用 `|`来增加二进制字符串\n\n  使用  `|` 可以用来存储信息，比如我们对于一组数据定义其存放位置， 将这组二进制数存入到一段二进制值中：\n\n  ```js\n  let s1 = 10;\n  let s2 = 20;\n  let s3 = 30;\n  let str = s1 | s2 << 8 | s3 << 16;\n  // s1: 1010, s2: 10100, s3: 11110 str: 111100001010000001010\n  ```\n\n* 使用 `&` 来保留相应位数\n\n  如：\n\n  我们想要保留8位二进制的高四位：\n\n  `let str = s & 0xf0` \n\n  `0xf0`: 11110000\n\n  ```js\n  let s5 = 0xf0;\n  let s2 = 20;\n  let s4 = s2 & s5;\n  console.log(s5.toString(2), s2.toString(2), s4.toString(2));\n  // 11110000 10100 10000\n  ```\n\n### 进制间的转换\n\n在 js 中进制之间的相互转化方法如下：\n\n十进制转二进制：\n\n`numObj.toString(radix)`\n\n```js\nlet num = 2;\nnum.toString(2); // '10'\n```\n\n二进制十进制：\n\n`parseInt(string, radix)`\n\n> The `parseInt()` function parses a string argument and returns an integer of the specified [radix](https://en.wikipedia.org/wiki/Radix) (the base in mathematical numeral systems).\n\n```\nparseInt('10', 2);\n```\n\n\n\n","slug":"encode & decode","published":1,"updated":"2020-09-14T06:36:25.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t65000vi2osjis3bg0a","content":"<p><a href=\"https://github.com/dankogai/js-base64\" target=\"_blank\" rel=\"noopener\">js-base64</a> 是用来对于字符编码和解码操作的一个包， 可以用这个包实现原始字符与 base64 编码后字符之间的转换；</p>\n<p>核心代码：</p>\n<p>获取base64 对应字符在字符表中十进制值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b64chars = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b64tab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = bin.length; i &lt; l; i++) t[bin.charAt(i)] = i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;(b64chars);</span><br></pre></td></tr></table></figure>\n<p>字符解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cb_decode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cccc</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = cccc.length,</span><br><span class=\"line\">      padlen = len % <span class=\"number\">4</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 这里通过 &lt;&lt; 移位操作，可以直接操作二进制值</span></span><br><span class=\"line\">      <span class=\"comment\">// n : 将各个字符解码之后的二进制值对应的十进制</span></span><br><span class=\"line\">      n = (len &gt; <span class=\"number\">0</span> ? b64tab[cccc.charAt(<span class=\"number\">0</span>)] &lt;&lt; <span class=\"number\">18</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">1</span> ? b64tab[cccc.charAt(<span class=\"number\">1</span>)] &lt;&lt; <span class=\"number\">12</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">2</span> ? b64tab[cccc.charAt(<span class=\"number\">2</span>)] &lt;&lt;  <span class=\"number\">6</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">3</span> ? b64tab[cccc.charAt(<span class=\"number\">3</span>)]       : <span class=\"number\">0</span>),</span><br><span class=\"line\">      <span class=\"comment\">// 从二进制字符串中按照 8 位依次获取二进制的值</span></span><br><span class=\"line\">      <span class=\"comment\">// chars 即为解码之后的字符串原始值</span></span><br><span class=\"line\">      chars = [</span><br><span class=\"line\">        fromCharCode( n &gt;&gt;&gt; <span class=\"number\">16</span>),</span><br><span class=\"line\">        fromCharCode((n &gt;&gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>),</span><br><span class=\"line\">        fromCharCode( n         &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">      ];</span><br><span class=\"line\">  chars.length -= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>][padlen];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> chars.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _atob = global.atob ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> global.atob(a);</span><br><span class=\"line\">&#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将base64 字符串按照 4 个字符长度剪切</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.replace(<span class=\"regexp\">/\\S&#123;1,4&#125;/g</span>, cb_decode);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 定义在 atob 上的方法用于字符解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> atob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// replace 方法将不属于 base64 字符集内的字符清空</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如 base64 编码字符串中最后一位可能为 =， 这个符号不代表任何含义</span></span><br><span class=\"line\">  <span class=\"comment\">// base64 字符集正则范围 A-Za-z0-9\\+\\/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _atob(<span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><h3 id=\"String-replace-方法\"><a href=\"#String-replace-方法\" class=\"headerlink\" title=\"String.replace  方法\"></a><code>String.replace</code>  方法</h3><p>使用 <code>String.replace</code> 方法可以对于字符串中某些字符作替换操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.replace(searchStr | Regexp, replacedStr | replaceFn);</span><br><span class=\"line\"><span class=\"comment\">// searchStr: 匹配的字符</span></span><br><span class=\"line\"><span class=\"comment\">// Regexp: 正则表达式， 被正则表达式匹配到的都会被替换掉</span></span><br><span class=\"line\"><span class=\"comment\">// replacedStr: 用于替换的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// replaceFn: 用于替换过程中的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// return: 被替换掉的字符串</span></span><br></pre></td></tr></table></figure>\n<p>例如上面的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将非base64 的字符串清除</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 替换正则表达式匹配的字符串， 在替换过程中应用 cb_decode 方法</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/\\S&#123;1,4&#125;/g</span>, cb_decode);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则表达式相关\"><a href=\"#正则表达式相关\" class=\"headerlink\" title=\"正则表达式相关\"></a>正则表达式相关</h3><ul>\n<li><p>在正则中使用限定符 <code>{}</code> 可以限定字符的长度范围</p>\n<p><code>\\S{1,4}</code>： 匹配字符长度为 1 - 4 的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 截取字符串按长度为 4 分段截取</span><br><span class=\"line\">let strArr = [];</span><br><span class=\"line\">str.replace(/\\S&#123;1,4&#125;/g, (mStr) =&gt;&#123;</span><br><span class=\"line\">  strArr.push(mStr);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>replace</code> 方法接受函数参数如下图：</p>\n<img src=\"/2019/09/15/encode%20&%20decode/replaceFn.png\">\n</li>\n<li><p>正则中的描述符 <code>[]</code> 中使用 <code>^</code> 表示不匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正则表示不匹配base64 字符的字符</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"按位操作符相关\"><a href=\"#按位操作符相关\" class=\"headerlink\" title=\"按位操作符相关\"></a>按位操作符相关</h3><p>在 js 中， 包含下面几种操作符号， 它们用来在js 中操作二进制数据的位数</p>\n<p>各种操作符号的作用如下图：</p>\n<img src=\"/2019/09/15/encode%20&%20decode/操作符.jpg\">\n<p>示例：</p>\n<p>对于十进制数 10 和 20:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">s1 &amp; s2; <span class=\"comment\">//  十进制 0 二进制 0</span></span><br><span class=\"line\">s1 | s2; <span class=\"comment\">//  30  11110</span></span><br><span class=\"line\">s1 ^ s2; <span class=\"comment\">//  30  11110</span></span><br><span class=\"line\">~s1; <span class=\"comment\">// -11 -1011</span></span><br><span class=\"line\">s1 &lt;&lt; <span class=\"number\">2</span> <span class=\"comment\">// 40 101000</span></span><br><span class=\"line\">s1 &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 2 10</span></span><br><span class=\"line\">s1 &gt;&gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 2 10</span></span><br></pre></td></tr></table></figure>\n<p>位操作符在上面 base64 转换中的使用：</p>\n<ul>\n<li><p>使用 <code>|</code>来增加二进制字符串</p>\n<p>使用  <code>|</code> 可以用来存储信息，比如我们对于一组数据定义其存放位置， 将这组二进制数存入到一段二进制值中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = s1 | s2 &lt;&lt; <span class=\"number\">8</span> | s3 &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1: 1010, s2: 10100, s3: 11110 str: 111100001010000001010</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>&amp;</code> 来保留相应位数</p>\n<p>如：</p>\n<p>我们想要保留8位二进制的高四位：</p>\n<p><code>let str = s &amp; 0xf0</code> </p>\n<p><code>0xf0</code>: 11110000</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s5 = <span class=\"number\">0xf0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s4 = s2 &amp; s5;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.toString(<span class=\"number\">2</span>), s2.toString(<span class=\"number\">2</span>), s4.toString(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 11110000 10100 10000</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"进制间的转换\"><a href=\"#进制间的转换\" class=\"headerlink\" title=\"进制间的转换\"></a>进制间的转换</h3><p>在 js 中进制之间的相互转化方法如下：</p>\n<p>十进制转二进制：</p>\n<p><code>numObj.toString(radix)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">2</span>;</span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>); <span class=\"comment\">// '10'</span></span><br></pre></td></tr></table></figure>\n<p>二进制十进制：</p>\n<p><code>parseInt(string, radix)</code></p>\n<blockquote>\n<p>The <code>parseInt()</code> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\" target=\"_blank\" rel=\"noopener\">radix</a> (the base in mathematical numeral systems).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;, 2);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/dankogai/js-base64\" target=\"_blank\" rel=\"noopener\">js-base64</a> 是用来对于字符编码和解码操作的一个包， 可以用这个包实现原始字符与 base64 编码后字符之间的转换；</p>\n<p>核心代码：</p>\n<p>获取base64 对应字符在字符表中十进制值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b64chars = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b64tab = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = bin.length; i &lt; l; i++) t[bin.charAt(i)] = i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;(b64chars);</span><br></pre></td></tr></table></figure>\n<p>字符解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cb_decode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cccc</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> len = cccc.length,</span><br><span class=\"line\">      padlen = len % <span class=\"number\">4</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 这里通过 &lt;&lt; 移位操作，可以直接操作二进制值</span></span><br><span class=\"line\">      <span class=\"comment\">// n : 将各个字符解码之后的二进制值对应的十进制</span></span><br><span class=\"line\">      n = (len &gt; <span class=\"number\">0</span> ? b64tab[cccc.charAt(<span class=\"number\">0</span>)] &lt;&lt; <span class=\"number\">18</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">1</span> ? b64tab[cccc.charAt(<span class=\"number\">1</span>)] &lt;&lt; <span class=\"number\">12</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">2</span> ? b64tab[cccc.charAt(<span class=\"number\">2</span>)] &lt;&lt;  <span class=\"number\">6</span> : <span class=\"number\">0</span>)</span><br><span class=\"line\">  | (len &gt; <span class=\"number\">3</span> ? b64tab[cccc.charAt(<span class=\"number\">3</span>)]       : <span class=\"number\">0</span>),</span><br><span class=\"line\">      <span class=\"comment\">// 从二进制字符串中按照 8 位依次获取二进制的值</span></span><br><span class=\"line\">      <span class=\"comment\">// chars 即为解码之后的字符串原始值</span></span><br><span class=\"line\">      chars = [</span><br><span class=\"line\">        fromCharCode( n &gt;&gt;&gt; <span class=\"number\">16</span>),</span><br><span class=\"line\">        fromCharCode((n &gt;&gt;&gt;  <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>),</span><br><span class=\"line\">        fromCharCode( n         &amp; <span class=\"number\">0xff</span>)</span><br><span class=\"line\">      ];</span><br><span class=\"line\">  chars.length -= [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>][padlen];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> chars.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> _atob = global.atob ? <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> global.atob(a);</span><br><span class=\"line\">&#125; : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将base64 字符串按照 4 个字符长度剪切</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.replace(<span class=\"regexp\">/\\S&#123;1,4&#125;/g</span>, cb_decode);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 定义在 atob 上的方法用于字符解码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> atob = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// replace 方法将不属于 base64 字符集内的字符清空</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如 base64 编码字符串中最后一位可能为 =， 这个符号不代表任何含义</span></span><br><span class=\"line\">  <span class=\"comment\">// base64 字符集正则范围 A-Za-z0-9\\+\\/</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _atob(<span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><h3 id=\"String-replace-方法\"><a href=\"#String-replace-方法\" class=\"headerlink\" title=\"String.replace  方法\"></a><code>String.replace</code>  方法</h3><p>使用 <code>String.replace</code> 方法可以对于字符串中某些字符作替换操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.replace(searchStr | Regexp, replacedStr | replaceFn);</span><br><span class=\"line\"><span class=\"comment\">// searchStr: 匹配的字符</span></span><br><span class=\"line\"><span class=\"comment\">// Regexp: 正则表达式， 被正则表达式匹配到的都会被替换掉</span></span><br><span class=\"line\"><span class=\"comment\">// replacedStr: 用于替换的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// replaceFn: 用于替换过程中的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// return: 被替换掉的字符串</span></span><br></pre></td></tr></table></figure>\n<p>例如上面的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将非base64 的字符串清除</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 替换正则表达式匹配的字符串， 在替换过程中应用 cb_decode 方法</span></span><br><span class=\"line\">a.replace(<span class=\"regexp\">/\\S&#123;1,4&#125;/g</span>, cb_decode);</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则表达式相关\"><a href=\"#正则表达式相关\" class=\"headerlink\" title=\"正则表达式相关\"></a>正则表达式相关</h3><ul>\n<li><p>在正则中使用限定符 <code>{}</code> 可以限定字符的长度范围</p>\n<p><code>\\S{1,4}</code>： 匹配字符长度为 1 - 4 的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 截取字符串按长度为 4 分段截取</span><br><span class=\"line\">let strArr = [];</span><br><span class=\"line\">str.replace(/\\S&#123;1,4&#125;/g, (mStr) =&gt;&#123;</span><br><span class=\"line\">  strArr.push(mStr);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>replace</code> 方法接受函数参数如下图：</p>\n<img src=\"/2019/09/15/encode%20&%20decode/replaceFn.png\">\n</li>\n<li><p>正则中的描述符 <code>[]</code> 中使用 <code>^</code> 表示不匹配</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正则表示不匹配base64 字符的字符</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(a).replace(<span class=\"regexp\">/[^A-Za-z0-9\\+\\/]/g</span>, <span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"按位操作符相关\"><a href=\"#按位操作符相关\" class=\"headerlink\" title=\"按位操作符相关\"></a>按位操作符相关</h3><p>在 js 中， 包含下面几种操作符号， 它们用来在js 中操作二进制数据的位数</p>\n<p>各种操作符号的作用如下图：</p>\n<img src=\"/2019/09/15/encode%20&%20decode/操作符.jpg\">\n<p>示例：</p>\n<p>对于十进制数 10 和 20:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">s1 &amp; s2; <span class=\"comment\">//  十进制 0 二进制 0</span></span><br><span class=\"line\">s1 | s2; <span class=\"comment\">//  30  11110</span></span><br><span class=\"line\">s1 ^ s2; <span class=\"comment\">//  30  11110</span></span><br><span class=\"line\">~s1; <span class=\"comment\">// -11 -1011</span></span><br><span class=\"line\">s1 &lt;&lt; <span class=\"number\">2</span> <span class=\"comment\">// 40 101000</span></span><br><span class=\"line\">s1 &gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 2 10</span></span><br><span class=\"line\">s1 &gt;&gt;&gt; <span class=\"number\">2</span>; <span class=\"comment\">// 2 10</span></span><br></pre></td></tr></table></figure>\n<p>位操作符在上面 base64 转换中的使用：</p>\n<ul>\n<li><p>使用 <code>|</code>来增加二进制字符串</p>\n<p>使用  <code>|</code> 可以用来存储信息，比如我们对于一组数据定义其存放位置， 将这组二进制数存入到一段二进制值中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = s1 | s2 &lt;&lt; <span class=\"number\">8</span> | s3 &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"comment\">// s1: 1010, s2: 10100, s3: 11110 str: 111100001010000001010</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>&amp;</code> 来保留相应位数</p>\n<p>如：</p>\n<p>我们想要保留8位二进制的高四位：</p>\n<p><code>let str = s &amp; 0xf0</code> </p>\n<p><code>0xf0</code>: 11110000</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s5 = <span class=\"number\">0xf0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s4 = s2 &amp; s5;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s5.toString(<span class=\"number\">2</span>), s2.toString(<span class=\"number\">2</span>), s4.toString(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 11110000 10100 10000</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"进制间的转换\"><a href=\"#进制间的转换\" class=\"headerlink\" title=\"进制间的转换\"></a>进制间的转换</h3><p>在 js 中进制之间的相互转化方法如下：</p>\n<p>十进制转二进制：</p>\n<p><code>numObj.toString(radix)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">2</span>;</span><br><span class=\"line\">num.toString(<span class=\"number\">2</span>); <span class=\"comment\">// '10'</span></span><br></pre></td></tr></table></figure>\n<p>二进制十进制：</p>\n<p><code>parseInt(string, radix)</code></p>\n<blockquote>\n<p>The <code>parseInt()</code> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\" target=\"_blank\" rel=\"noopener\">radix</a> (the base in mathematical numeral systems).</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt(&apos;10&apos;, 2);</span><br></pre></td></tr></table></figure>\n"},{"title":"es6: Map & Set","date":"2017-09-23T03:22:37.000Z","_content":"\n### Set 数据结构\n\n####  基本属性\n\nSet 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。\n\n```\nlet arr = [1,2,2,3,4];\nlet set = new Set(arr);\nconsole.log(arr) // {1,2,3,4} 去除重复数字\n```\n\n在上面的程序中， 使用 new Set构造函数生成的 `set` 的类型是一个对象，并且通过使用 `set` 结构进行处理之后的数据中没有重复数据。\n\n使用 set 进行数组去重的方法\n\n```\narr = [...new Set([arr])]//  [1,2,3,4]\n//如上所示，完成了数组的去重操作\n```\n\n#### Set 实例的属性和方法, \n\n 如下图所示\n\n![](http://ov3b9jngp.bkt.clouddn.com/Set.png)\n\n`let set = new Set([1,2,3,4])`\n\n`set.prototype.constructor`  : 默认 `set` 函数\n\n`set.size` 表示 `set` 数据结构中成员的个数\n\n```\nset.size // 4\n```\n\n对于 `set` 结构的方法，分为操作方法和遍历方法\n\n操作方法:\n\n`add()` 用于向 `set` 数据机构中添加成员\n\n`delete()` 用于删除数据中的某个值，返回布尔值， 表示是否删除成功\n\n`has()` 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有\n\n`clear()` 表示清除所有的成员，没有返回值\n\n```\nset// {1,2,3,4}\nset.add(5)// {1,2,3,4,5}\nset.has(5) // true\nset.delete(5) // true 删除成功\nset.has(5) // false\nset.clear()\nset // {}\n```\n\n一个数组去重操作:\n\n```\nfunction removeDeu (Array) {\n  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的\n}\n使用 Array.from 也可以将Set 结构转换为数组结构\n```\n\n#### Set 实例的遍历方法\n\n`keys()`  返回键名的数组\n\n`values()` 遍历键值\n\n`entires()` 遍历键值对儿\n\n因为 `Set()` 结构只有键值，没有键名，因此使用 `values()` 和 `keys()` 的遍历结果是一样的\n\n```\nlet arr = [1,2,3,4];\nlet set = new Set(arr);\nfor (let key of set.keys()) {\n  console.log(key)\n}\n// 1,2,3,4,5\n```\n\n对于set 结构可以转换为 数组结构,可以应用数组的 `map` 等方法\n\n```\nlet arr = [...set];\n```\n\n### Map 数据结构\n\n#### 基本属性\n\n对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象\n\n```\nlet obj = {};\nlet o = {a: 1};\nobj[o] = 'content';\nfor (let key in obj) {\n\tconsole.log(typeOf key)\n}\n// string\n```\n\n使用 `map` 结构可以实现对象的键不再必须是字符串的形式\n\n创建 `map` 结构:\n\n```\nlet map = new Map();\n```\n\n#### `map ` 属性的方法\n\n通过 console　控制台打印数据如下\n\n![](http://ov3b9jngp.bkt.clouddn.com/map.png)\n\n类似于　`Set` 结构, 存在 `set` `get` `delete` `has` `clear` 等几种操作方法\n\n![](http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png)\n\n`set(键， 值)` 写入数据\n\n`get(键)` 从数据结构中获得对应键的值\n\n>虽然 `typeof map` // Object 以及  `map instanceof Object === true` 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 `Map` 数据结构中的值， 我们是通过使用 `get` 方法，后面我们会说如何将 map 数据结构转换为对象\n\n`delete(键)` 删除对应键的值\n\n`clear()` 将 `map` 数据中的所有数据清除\n\n`has()` 返回布尔值, 表示是否含有某条数据\n\n使用 `map` 的数据结构不同于对象的是，通过使用 `map` 添加的键名可以是变量\n\n```\nlet map = new Map();\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\nfor (let key of map) {\n\tconsole.log(typeof key) // object\n}\n```\n\n可以是数组:\n\n```\nlet arr = [1];\nmap.set(arr, 'good');\nmap.get(arr)// 'good'\n```\n\n>需要注意的一点，通过使用 `get()` 获取键值的时候，最终是查找到了键值的内存地址\n\n代码如下:\n\n```\nmap.set({a:1}, 'good');\nmap.get({a:1})// undefined\n```\n\n在上面的代码中，虽然查找的键值是一样的，但是两个 `{a:1}` 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。\n\n```\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\n```\n\n***\n\n关于对象及内存地址:\n\n每创建一个对象，总会创建一个内存地址，对于下面对象:\n\n`let person = { name: '张宁宁' }` \n\n我们使用 `person.name` 来访问到值的，但是，对象的值并没有存放在`person` 容器内，`person` 中存放了对象的属性，\n\n这个属性相当于指针，指向存放 `张宁宁` 的内存地址\n\n例如:\n\n`{} === {}` // false\n\n因为这两个空对象的内存地址是不一样的，所以是不相等的\n\n***\n\n使用 `map` 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值\n\n```\nlet map = new Map([['name', '张宁宁']]);\nmap.get('name') // '张宁宁'\n```\n\n#### map 对象的遍历方法\n\n对于 `map` 结构的遍历，存在下面几种方法\n\n`keys()` 返回键名的遍历器\n\n`values()` 返回键值的遍历器\n\n`entires()` 返回所有成员的遍历器\n\n`forEach()` 类似于数组中的 `forEach()` 方法， 实现对于 `map` 数据结构的遍历\n\n使用 `keys()` `values()` 以及 `entires()` 返回的是类数组对象\n\n```\nlet map = new Map();\nmap.set('h', 'hello');\nmap.set('g', 'good');\nmap.keys() // {'h', 'g'};\nmap.values() // {'hello', 'good'};\nmap.entires(); // {'h': 'hello', 'g': 'good'};\n```\n\n使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。\n\n```\n[...map.keys()] // ['h', 'g']\n```\n\n#### `Map` 与各种数据结构的相互转化\n\n1. 对象转为 `map`\n\n   ```\n   function toMap (obj) {\n     let map = new Map();\n     for (let key in obj) {\n       map.set(key, obj[key]);\n     }\n     return map;\n   }\n   ```\n\n2. `map` 转化为对象\n\n   ```\n   function toObj (map) {\n     let obj = Object.create(null);\n     for (let [k,v] of map) {\n       obj[k] = v;\n     }\n     return obj;\n   }\n   ```\n\n   ​","source":"_posts/es6-Map-and-Set.md","raw":"---\ntitle: 'es6: Map & Set'\ndate: 2017-09-23 11:22:37\ntags: Map Set\ncategories: es6\n---\n\n### Set 数据结构\n\n####  基本属性\n\nSet 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。\n\n```\nlet arr = [1,2,2,3,4];\nlet set = new Set(arr);\nconsole.log(arr) // {1,2,3,4} 去除重复数字\n```\n\n在上面的程序中， 使用 new Set构造函数生成的 `set` 的类型是一个对象，并且通过使用 `set` 结构进行处理之后的数据中没有重复数据。\n\n使用 set 进行数组去重的方法\n\n```\narr = [...new Set([arr])]//  [1,2,3,4]\n//如上所示，完成了数组的去重操作\n```\n\n#### Set 实例的属性和方法, \n\n 如下图所示\n\n![](http://ov3b9jngp.bkt.clouddn.com/Set.png)\n\n`let set = new Set([1,2,3,4])`\n\n`set.prototype.constructor`  : 默认 `set` 函数\n\n`set.size` 表示 `set` 数据结构中成员的个数\n\n```\nset.size // 4\n```\n\n对于 `set` 结构的方法，分为操作方法和遍历方法\n\n操作方法:\n\n`add()` 用于向 `set` 数据机构中添加成员\n\n`delete()` 用于删除数据中的某个值，返回布尔值， 表示是否删除成功\n\n`has()` 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有\n\n`clear()` 表示清除所有的成员，没有返回值\n\n```\nset// {1,2,3,4}\nset.add(5)// {1,2,3,4,5}\nset.has(5) // true\nset.delete(5) // true 删除成功\nset.has(5) // false\nset.clear()\nset // {}\n```\n\n一个数组去重操作:\n\n```\nfunction removeDeu (Array) {\n  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的\n}\n使用 Array.from 也可以将Set 结构转换为数组结构\n```\n\n#### Set 实例的遍历方法\n\n`keys()`  返回键名的数组\n\n`values()` 遍历键值\n\n`entires()` 遍历键值对儿\n\n因为 `Set()` 结构只有键值，没有键名，因此使用 `values()` 和 `keys()` 的遍历结果是一样的\n\n```\nlet arr = [1,2,3,4];\nlet set = new Set(arr);\nfor (let key of set.keys()) {\n  console.log(key)\n}\n// 1,2,3,4,5\n```\n\n对于set 结构可以转换为 数组结构,可以应用数组的 `map` 等方法\n\n```\nlet arr = [...set];\n```\n\n### Map 数据结构\n\n#### 基本属性\n\n对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象\n\n```\nlet obj = {};\nlet o = {a: 1};\nobj[o] = 'content';\nfor (let key in obj) {\n\tconsole.log(typeOf key)\n}\n// string\n```\n\n使用 `map` 结构可以实现对象的键不再必须是字符串的形式\n\n创建 `map` 结构:\n\n```\nlet map = new Map();\n```\n\n#### `map ` 属性的方法\n\n通过 console　控制台打印数据如下\n\n![](http://ov3b9jngp.bkt.clouddn.com/map.png)\n\n类似于　`Set` 结构, 存在 `set` `get` `delete` `has` `clear` 等几种操作方法\n\n![](http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png)\n\n`set(键， 值)` 写入数据\n\n`get(键)` 从数据结构中获得对应键的值\n\n>虽然 `typeof map` // Object 以及  `map instanceof Object === true` 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 `Map` 数据结构中的值， 我们是通过使用 `get` 方法，后面我们会说如何将 map 数据结构转换为对象\n\n`delete(键)` 删除对应键的值\n\n`clear()` 将 `map` 数据中的所有数据清除\n\n`has()` 返回布尔值, 表示是否含有某条数据\n\n使用 `map` 的数据结构不同于对象的是，通过使用 `map` 添加的键名可以是变量\n\n```\nlet map = new Map();\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\nfor (let key of map) {\n\tconsole.log(typeof key) // object\n}\n```\n\n可以是数组:\n\n```\nlet arr = [1];\nmap.set(arr, 'good');\nmap.get(arr)// 'good'\n```\n\n>需要注意的一点，通过使用 `get()` 获取键值的时候，最终是查找到了键值的内存地址\n\n代码如下:\n\n```\nmap.set({a:1}, 'good');\nmap.get({a:1})// undefined\n```\n\n在上面的代码中，虽然查找的键值是一样的，但是两个 `{a:1}` 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。\n\n```\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\n```\n\n***\n\n关于对象及内存地址:\n\n每创建一个对象，总会创建一个内存地址，对于下面对象:\n\n`let person = { name: '张宁宁' }` \n\n我们使用 `person.name` 来访问到值的，但是，对象的值并没有存放在`person` 容器内，`person` 中存放了对象的属性，\n\n这个属性相当于指针，指向存放 `张宁宁` 的内存地址\n\n例如:\n\n`{} === {}` // false\n\n因为这两个空对象的内存地址是不一样的，所以是不相等的\n\n***\n\n使用 `map` 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值\n\n```\nlet map = new Map([['name', '张宁宁']]);\nmap.get('name') // '张宁宁'\n```\n\n#### map 对象的遍历方法\n\n对于 `map` 结构的遍历，存在下面几种方法\n\n`keys()` 返回键名的遍历器\n\n`values()` 返回键值的遍历器\n\n`entires()` 返回所有成员的遍历器\n\n`forEach()` 类似于数组中的 `forEach()` 方法， 实现对于 `map` 数据结构的遍历\n\n使用 `keys()` `values()` 以及 `entires()` 返回的是类数组对象\n\n```\nlet map = new Map();\nmap.set('h', 'hello');\nmap.set('g', 'good');\nmap.keys() // {'h', 'g'};\nmap.values() // {'hello', 'good'};\nmap.entires(); // {'h': 'hello', 'g': 'good'};\n```\n\n使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。\n\n```\n[...map.keys()] // ['h', 'g']\n```\n\n#### `Map` 与各种数据结构的相互转化\n\n1. 对象转为 `map`\n\n   ```\n   function toMap (obj) {\n     let map = new Map();\n     for (let key in obj) {\n       map.set(key, obj[key]);\n     }\n     return map;\n   }\n   ```\n\n2. `map` 转化为对象\n\n   ```\n   function toObj (map) {\n     let obj = Object.create(null);\n     for (let [k,v] of map) {\n       obj[k] = v;\n     }\n     return obj;\n   }\n   ```\n\n   ​","slug":"es6-Map-and-Set","published":1,"updated":"2020-09-14T06:36:25.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t67000yi2os4jajv3ps","content":"<h3 id=\"Set-数据结构\"><a href=\"#Set-数据结构\" class=\"headerlink\" title=\"Set 数据结构\"></a>Set 数据结构</h3><h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>Set 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">console.log(arr) // &#123;1,2,3,4&#125; 去除重复数字</span><br></pre></td></tr></table></figure>\n<p>在上面的程序中， 使用 new Set构造函数生成的 <code>set</code> 的类型是一个对象，并且通过使用 <code>set</code> 结构进行处理之后的数据中没有重复数据。</p>\n<p>使用 set 进行数组去重的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set([arr])]//  [1,2,3,4]</span><br><span class=\"line\">//如上所示，完成了数组的去重操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的属性和方法\"><a href=\"#Set-实例的属性和方法\" class=\"headerlink\" title=\"Set 实例的属性和方法,\"></a>Set 实例的属性和方法,</h4><p> 如下图所示</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Set.png\" alt></p>\n<p><code>let set = new Set([1,2,3,4])</code></p>\n<p><code>set.prototype.constructor</code>  : 默认 <code>set</code> 函数</p>\n<p><code>set.size</code> 表示 <code>set</code> 数据结构中成员的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.size // 4</span><br></pre></td></tr></table></figure>\n<p>对于 <code>set</code> 结构的方法，分为操作方法和遍历方法</p>\n<p>操作方法:</p>\n<p><code>add()</code> 用于向 <code>set</code> 数据机构中添加成员</p>\n<p><code>delete()</code> 用于删除数据中的某个值，返回布尔值， 表示是否删除成功</p>\n<p><code>has()</code> 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有</p>\n<p><code>clear()</code> 表示清除所有的成员，没有返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set// &#123;1,2,3,4&#125;</span><br><span class=\"line\">set.add(5)// &#123;1,2,3,4,5&#125;</span><br><span class=\"line\">set.has(5) // true</span><br><span class=\"line\">set.delete(5) // true 删除成功</span><br><span class=\"line\">set.has(5) // false</span><br><span class=\"line\">set.clear()</span><br><span class=\"line\">set // &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>一个数组去重操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function removeDeu (Array) &#123;</span><br><span class=\"line\">  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用 Array.from 也可以将Set 结构转换为数组结构</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的遍历方法\"><a href=\"#Set-实例的遍历方法\" class=\"headerlink\" title=\"Set 实例的遍历方法\"></a>Set 实例的遍历方法</h4><p><code>keys()</code>  返回键名的数组</p>\n<p><code>values()</code> 遍历键值</p>\n<p><code>entires()</code> 遍历键值对儿</p>\n<p>因为 <code>Set()</code> 结构只有键值，没有键名，因此使用 <code>values()</code> 和 <code>keys()</code> 的遍历结果是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">for (let key of set.keys()) &#123;</span><br><span class=\"line\">  console.log(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1,2,3,4,5</span><br></pre></td></tr></table></figure>\n<p>对于set 结构可以转换为 数组结构,可以应用数组的 <code>map</code> 等方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...set];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-数据结构\"><a href=\"#Map-数据结构\" class=\"headerlink\" title=\"Map 数据结构\"></a>Map 数据结构</h3><h4 id=\"基本属性-1\"><a href=\"#基本属性-1\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let o = &#123;a: 1&#125;;</span><br><span class=\"line\">obj[o] = &apos;content&apos;;</span><br><span class=\"line\">for (let key in obj) &#123;</span><br><span class=\"line\">\tconsole.log(typeOf key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// string</span><br></pre></td></tr></table></figure>\n<p>使用 <code>map</code> 结构可以实现对象的键不再必须是字符串的形式</p>\n<p>创建 <code>map</code> 结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-属性的方法\"><a href=\"#map-属性的方法\" class=\"headerlink\" title=\"map 属性的方法\"></a><code>map</code> 属性的方法</h4><p>通过 console　控制台打印数据如下</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map.png\" alt></p>\n<p>类似于　<code>Set</code> 结构, 存在 <code>set</code> <code>get</code> <code>delete</code> <code>has</code> <code>clear</code> 等几种操作方法</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png\" alt></p>\n<p><code>set(键， 值)</code> 写入数据</p>\n<p><code>get(键)</code> 从数据结构中获得对应键的值</p>\n<blockquote>\n<p>虽然 <code>typeof map</code> // Object 以及  <code>map instanceof Object === true</code> 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 <code>Map</code> 数据结构中的值， 我们是通过使用 <code>get</code> 方法，后面我们会说如何将 map 数据结构转换为对象</p>\n</blockquote>\n<p><code>delete(键)</code> 删除对应键的值</p>\n<p><code>clear()</code> 将 <code>map</code> 数据中的所有数据清除</p>\n<p><code>has()</code> 返回布尔值, 表示是否含有某条数据</p>\n<p>使用 <code>map</code> 的数据结构不同于对象的是，通过使用 <code>map</code> 添加的键名可以是变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br><span class=\"line\">for (let key of map) &#123;</span><br><span class=\"line\">\tconsole.log(typeof key) // object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以是数组:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1];</span><br><span class=\"line\">map.set(arr, &apos;good&apos;);</span><br><span class=\"line\">map.get(arr)// &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的一点，通过使用 <code>get()</code> 获取键值的时候，最终是查找到了键值的内存地址</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(&#123;a:1&#125;, &apos;good&apos;);</span><br><span class=\"line\">map.get(&#123;a:1&#125;)// undefined</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，虽然查找的键值是一样的，但是两个 <code>{a:1}</code> 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于对象及内存地址:</p>\n<p>每创建一个对象，总会创建一个内存地址，对于下面对象:</p>\n<p><code>let person = { name: &#39;张宁宁&#39; }</code> </p>\n<p>我们使用 <code>person.name</code> 来访问到值的，但是，对象的值并没有存放在<code>person</code> 容器内，<code>person</code> 中存放了对象的属性，</p>\n<p>这个属性相当于指针，指向存放 <code>张宁宁</code> 的内存地址</p>\n<p>例如:</p>\n<p><code>{} === {}</code> // false</p>\n<p>因为这两个空对象的内存地址是不一样的，所以是不相等的</p>\n<hr>\n<p>使用 <code>map</code> 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([[&apos;name&apos;, &apos;张宁宁&apos;]]);</span><br><span class=\"line\">map.get(&apos;name&apos;) // &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-对象的遍历方法\"><a href=\"#map-对象的遍历方法\" class=\"headerlink\" title=\"map 对象的遍历方法\"></a>map 对象的遍历方法</h4><p>对于 <code>map</code> 结构的遍历，存在下面几种方法</p>\n<p><code>keys()</code> 返回键名的遍历器</p>\n<p><code>values()</code> 返回键值的遍历器</p>\n<p><code>entires()</code> 返回所有成员的遍历器</p>\n<p><code>forEach()</code> 类似于数组中的 <code>forEach()</code> 方法， 实现对于 <code>map</code> 数据结构的遍历</p>\n<p>使用 <code>keys()</code> <code>values()</code> 以及 <code>entires()</code> 返回的是类数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">map.set(&apos;h&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;g&apos;, &apos;good&apos;);</span><br><span class=\"line\">map.keys() // &#123;&apos;h&apos;, &apos;g&apos;&#125;;</span><br><span class=\"line\">map.values() // &#123;&apos;hello&apos;, &apos;good&apos;&#125;;</span><br><span class=\"line\">map.entires(); // &#123;&apos;h&apos;: &apos;hello&apos;, &apos;g&apos;: &apos;good&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...map.keys()] // [&apos;h&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-与各种数据结构的相互转化\"><a href=\"#Map-与各种数据结构的相互转化\" class=\"headerlink\" title=\"Map 与各种数据结构的相互转化\"></a><code>Map</code> 与各种数据结构的相互转化</h4><ol>\n<li><p>对象转为 <code>map</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toMap (obj) &#123;</span><br><span class=\"line\">  let map = new Map();</span><br><span class=\"line\">  for (let key in obj) &#123;</span><br><span class=\"line\">    map.set(key, obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>map</code> 转化为对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toObj (map) &#123;</span><br><span class=\"line\">  let obj = Object.create(null);</span><br><span class=\"line\">  for (let [k,v] of map) &#123;</span><br><span class=\"line\">    obj[k] = v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Set-数据结构\"><a href=\"#Set-数据结构\" class=\"headerlink\" title=\"Set 数据结构\"></a>Set 数据结构</h3><h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>Set 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">console.log(arr) // &#123;1,2,3,4&#125; 去除重复数字</span><br></pre></td></tr></table></figure>\n<p>在上面的程序中， 使用 new Set构造函数生成的 <code>set</code> 的类型是一个对象，并且通过使用 <code>set</code> 结构进行处理之后的数据中没有重复数据。</p>\n<p>使用 set 进行数组去重的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set([arr])]//  [1,2,3,4]</span><br><span class=\"line\">//如上所示，完成了数组的去重操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的属性和方法\"><a href=\"#Set-实例的属性和方法\" class=\"headerlink\" title=\"Set 实例的属性和方法,\"></a>Set 实例的属性和方法,</h4><p> 如下图所示</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Set.png\" alt></p>\n<p><code>let set = new Set([1,2,3,4])</code></p>\n<p><code>set.prototype.constructor</code>  : 默认 <code>set</code> 函数</p>\n<p><code>set.size</code> 表示 <code>set</code> 数据结构中成员的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.size // 4</span><br></pre></td></tr></table></figure>\n<p>对于 <code>set</code> 结构的方法，分为操作方法和遍历方法</p>\n<p>操作方法:</p>\n<p><code>add()</code> 用于向 <code>set</code> 数据机构中添加成员</p>\n<p><code>delete()</code> 用于删除数据中的某个值，返回布尔值， 表示是否删除成功</p>\n<p><code>has()</code> 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有</p>\n<p><code>clear()</code> 表示清除所有的成员，没有返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set// &#123;1,2,3,4&#125;</span><br><span class=\"line\">set.add(5)// &#123;1,2,3,4,5&#125;</span><br><span class=\"line\">set.has(5) // true</span><br><span class=\"line\">set.delete(5) // true 删除成功</span><br><span class=\"line\">set.has(5) // false</span><br><span class=\"line\">set.clear()</span><br><span class=\"line\">set // &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>一个数组去重操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function removeDeu (Array) &#123;</span><br><span class=\"line\">  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用 Array.from 也可以将Set 结构转换为数组结构</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的遍历方法\"><a href=\"#Set-实例的遍历方法\" class=\"headerlink\" title=\"Set 实例的遍历方法\"></a>Set 实例的遍历方法</h4><p><code>keys()</code>  返回键名的数组</p>\n<p><code>values()</code> 遍历键值</p>\n<p><code>entires()</code> 遍历键值对儿</p>\n<p>因为 <code>Set()</code> 结构只有键值，没有键名，因此使用 <code>values()</code> 和 <code>keys()</code> 的遍历结果是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">for (let key of set.keys()) &#123;</span><br><span class=\"line\">  console.log(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1,2,3,4,5</span><br></pre></td></tr></table></figure>\n<p>对于set 结构可以转换为 数组结构,可以应用数组的 <code>map</code> 等方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...set];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-数据结构\"><a href=\"#Map-数据结构\" class=\"headerlink\" title=\"Map 数据结构\"></a>Map 数据结构</h3><h4 id=\"基本属性-1\"><a href=\"#基本属性-1\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let o = &#123;a: 1&#125;;</span><br><span class=\"line\">obj[o] = &apos;content&apos;;</span><br><span class=\"line\">for (let key in obj) &#123;</span><br><span class=\"line\">\tconsole.log(typeOf key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// string</span><br></pre></td></tr></table></figure>\n<p>使用 <code>map</code> 结构可以实现对象的键不再必须是字符串的形式</p>\n<p>创建 <code>map</code> 结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-属性的方法\"><a href=\"#map-属性的方法\" class=\"headerlink\" title=\"map 属性的方法\"></a><code>map</code> 属性的方法</h4><p>通过 console　控制台打印数据如下</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map.png\" alt></p>\n<p>类似于　<code>Set</code> 结构, 存在 <code>set</code> <code>get</code> <code>delete</code> <code>has</code> <code>clear</code> 等几种操作方法</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png\" alt></p>\n<p><code>set(键， 值)</code> 写入数据</p>\n<p><code>get(键)</code> 从数据结构中获得对应键的值</p>\n<blockquote>\n<p>虽然 <code>typeof map</code> // Object 以及  <code>map instanceof Object === true</code> 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 <code>Map</code> 数据结构中的值， 我们是通过使用 <code>get</code> 方法，后面我们会说如何将 map 数据结构转换为对象</p>\n</blockquote>\n<p><code>delete(键)</code> 删除对应键的值</p>\n<p><code>clear()</code> 将 <code>map</code> 数据中的所有数据清除</p>\n<p><code>has()</code> 返回布尔值, 表示是否含有某条数据</p>\n<p>使用 <code>map</code> 的数据结构不同于对象的是，通过使用 <code>map</code> 添加的键名可以是变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br><span class=\"line\">for (let key of map) &#123;</span><br><span class=\"line\">\tconsole.log(typeof key) // object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以是数组:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1];</span><br><span class=\"line\">map.set(arr, &apos;good&apos;);</span><br><span class=\"line\">map.get(arr)// &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的一点，通过使用 <code>get()</code> 获取键值的时候，最终是查找到了键值的内存地址</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(&#123;a:1&#125;, &apos;good&apos;);</span><br><span class=\"line\">map.get(&#123;a:1&#125;)// undefined</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，虽然查找的键值是一样的，但是两个 <code>{a:1}</code> 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于对象及内存地址:</p>\n<p>每创建一个对象，总会创建一个内存地址，对于下面对象:</p>\n<p><code>let person = { name: &#39;张宁宁&#39; }</code> </p>\n<p>我们使用 <code>person.name</code> 来访问到值的，但是，对象的值并没有存放在<code>person</code> 容器内，<code>person</code> 中存放了对象的属性，</p>\n<p>这个属性相当于指针，指向存放 <code>张宁宁</code> 的内存地址</p>\n<p>例如:</p>\n<p><code>{} === {}</code> // false</p>\n<p>因为这两个空对象的内存地址是不一样的，所以是不相等的</p>\n<hr>\n<p>使用 <code>map</code> 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([[&apos;name&apos;, &apos;张宁宁&apos;]]);</span><br><span class=\"line\">map.get(&apos;name&apos;) // &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-对象的遍历方法\"><a href=\"#map-对象的遍历方法\" class=\"headerlink\" title=\"map 对象的遍历方法\"></a>map 对象的遍历方法</h4><p>对于 <code>map</code> 结构的遍历，存在下面几种方法</p>\n<p><code>keys()</code> 返回键名的遍历器</p>\n<p><code>values()</code> 返回键值的遍历器</p>\n<p><code>entires()</code> 返回所有成员的遍历器</p>\n<p><code>forEach()</code> 类似于数组中的 <code>forEach()</code> 方法， 实现对于 <code>map</code> 数据结构的遍历</p>\n<p>使用 <code>keys()</code> <code>values()</code> 以及 <code>entires()</code> 返回的是类数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">map.set(&apos;h&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;g&apos;, &apos;good&apos;);</span><br><span class=\"line\">map.keys() // &#123;&apos;h&apos;, &apos;g&apos;&#125;;</span><br><span class=\"line\">map.values() // &#123;&apos;hello&apos;, &apos;good&apos;&#125;;</span><br><span class=\"line\">map.entires(); // &#123;&apos;h&apos;: &apos;hello&apos;, &apos;g&apos;: &apos;good&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...map.keys()] // [&apos;h&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-与各种数据结构的相互转化\"><a href=\"#Map-与各种数据结构的相互转化\" class=\"headerlink\" title=\"Map 与各种数据结构的相互转化\"></a><code>Map</code> 与各种数据结构的相互转化</h4><ol>\n<li><p>对象转为 <code>map</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toMap (obj) &#123;</span><br><span class=\"line\">  let map = new Map();</span><br><span class=\"line\">  for (let key in obj) &#123;</span><br><span class=\"line\">    map.set(key, obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>map</code> 转化为对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toObj (map) &#123;</span><br><span class=\"line\">  let obj = Object.create(null);</span><br><span class=\"line\">  for (let [k,v] of map) &#123;</span><br><span class=\"line\">    obj[k] = v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"es6-promise","date":"2017-10-30T14:53:22.000Z","_content":"#### resove and reject\n\n使用 `es6` 回调函数的例子\n\n```\nlet promise = new Promise(function (resolve, reject) {\n  if (/* 如果异步操作成功 */) {\n      resolve(value);\n  } else {\n      reject(error)\n  }\n})\n```\n在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 `resolve` 和 `reject` , 这两个参数是两个函数, 用来执行回调的作用\n\n>resolve\n>resove 是作为异步回调成功之后需要执行的函数\n>reject\n>reject 是作为异步回调失败之后需要进行执行的函数\n>\n>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  \n\n使用 `promise` 进行 `ajax` 请求的函数如下:\n\n```\n/**\n* @description promise 的 ajax 请求\n* @param url {String} ajax 请求的地址\n* @param method {String} ajax 请求的方法 'get' or 'method'\n* @return promise 新的 promise 请求对象\n**/\nlet ajax = function (url, method) {\n  let promise = new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n    function handler() {\n      if (this.readystate !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statuText));\n      }\n    };\n  });\n  return promise;\n};\n\najax(url, 'get').then((json) => {\n  console.log('请求成功之后返回的数据', json);\n}, (error) => {\n  console.error('出现的错误' + error);\n});\n```\n\n\n\n#### promise.then() \n\n在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数\n\n> promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数\n\n```\npromise.then(function(value) {\n  // when promise success do something\n}, function(error) {\n  // when promise failed do something\n})\n```\n\n#### promise.all()\n\n使用 promise.all() 方法用于将多个 `promise` 实例, 包装为一个 `promise` 实例\n\n`Promise.all([promise1, promise2, promise3])`\n\n使用 `Promise.all` 接收的是一个数组作为参数， 其中 `promise1` `promise2` `promise3` 分别是 `Promise` 的实例\n\n关于使用 `Promise.all` 的状态:\n\n1. 只有 `promise1 promise2 promise3` 的状态都变成了 `fullfilled` 的状态,  `Promise.all` 的状态才会变成 `fullfilled` 并且三个 `promise` 的返回值组成一个数组, 传递给 `Promise.all` 的回调函数。 \n2. 当三个 `promise` 中存在一个为 `reject` 的时候, `Promise.all` 的状态就会变成 `reject` , 这个时候 ,  被  `reject`    实例 的返回值被传递给`Promise.all` 的回调函数.\n\n```\nconst firstNamePromise = namePromise.then(getFirstName);\nconst lastNamePromise = namePromise.then(getLastName);\nPromise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) => nextAction(firstName, lastName));\n```\n\n注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 \n\nfirstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName\n\n++++\n\n对于对象的解构赋值而言,我们可以这样赋值\n\n```\nlet a = 2;\nlet b = 3;\n// 这样\nlet [a, b] = [2, 3];\n```\n\n\n\n++++\n\n#### promise .race()\n\n使用 `promise.race()` 类似于 `promise.all` 方法, 将多个 `promise` 实例包装为一个 `promise` 方法\n\n`let p = promise.race([p1, p2, p3])`  \n\n只要上面的 `p1, p2, p3` 中有一个的实例率先发生变化, 那么 `p` 的状态就会发生变化, 率先发生变化的返回值就会传递给 `p` 函数。\n\n#### 其他方法\n\n#####   `promise.finally`\n\n使用 `promise.finally` 的方法的作用在于: 不管 `promise` 的最后的状态是什么, 使用 `promise.finally` 内的回调函数始终会被执行;\n\n例如: 请求之前的指示器打开或者关闭：\n\n```vue\nthis.indicator.show();\nlet promise = new Promise();\npromise.then(\n// callback success fn\n).catch(e => {\n  this.toast(e.message)\n}).finally(() => {\n  this.indicator.hide()\n})\n```\n\n\n\n\n\n ","source":"_posts/es6-promise.md","raw":"---\ntitle: es6-promise\ndate: 2017-10-30 22:53:22\ntags: promise\ncategories: 'es6'\n---\n#### resove and reject\n\n使用 `es6` 回调函数的例子\n\n```\nlet promise = new Promise(function (resolve, reject) {\n  if (/* 如果异步操作成功 */) {\n      resolve(value);\n  } else {\n      reject(error)\n  }\n})\n```\n在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 `resolve` 和 `reject` , 这两个参数是两个函数, 用来执行回调的作用\n\n>resolve\n>resove 是作为异步回调成功之后需要执行的函数\n>reject\n>reject 是作为异步回调失败之后需要进行执行的函数\n>\n>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  \n\n使用 `promise` 进行 `ajax` 请求的函数如下:\n\n```\n/**\n* @description promise 的 ajax 请求\n* @param url {String} ajax 请求的地址\n* @param method {String} ajax 请求的方法 'get' or 'method'\n* @return promise 新的 promise 请求对象\n**/\nlet ajax = function (url, method) {\n  let promise = new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n    function handler() {\n      if (this.readystate !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statuText));\n      }\n    };\n  });\n  return promise;\n};\n\najax(url, 'get').then((json) => {\n  console.log('请求成功之后返回的数据', json);\n}, (error) => {\n  console.error('出现的错误' + error);\n});\n```\n\n\n\n#### promise.then() \n\n在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数\n\n> promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数\n\n```\npromise.then(function(value) {\n  // when promise success do something\n}, function(error) {\n  // when promise failed do something\n})\n```\n\n#### promise.all()\n\n使用 promise.all() 方法用于将多个 `promise` 实例, 包装为一个 `promise` 实例\n\n`Promise.all([promise1, promise2, promise3])`\n\n使用 `Promise.all` 接收的是一个数组作为参数， 其中 `promise1` `promise2` `promise3` 分别是 `Promise` 的实例\n\n关于使用 `Promise.all` 的状态:\n\n1. 只有 `promise1 promise2 promise3` 的状态都变成了 `fullfilled` 的状态,  `Promise.all` 的状态才会变成 `fullfilled` 并且三个 `promise` 的返回值组成一个数组, 传递给 `Promise.all` 的回调函数。 \n2. 当三个 `promise` 中存在一个为 `reject` 的时候, `Promise.all` 的状态就会变成 `reject` , 这个时候 ,  被  `reject`    实例 的返回值被传递给`Promise.all` 的回调函数.\n\n```\nconst firstNamePromise = namePromise.then(getFirstName);\nconst lastNamePromise = namePromise.then(getLastName);\nPromise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) => nextAction(firstName, lastName));\n```\n\n注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 \n\nfirstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName\n\n++++\n\n对于对象的解构赋值而言,我们可以这样赋值\n\n```\nlet a = 2;\nlet b = 3;\n// 这样\nlet [a, b] = [2, 3];\n```\n\n\n\n++++\n\n#### promise .race()\n\n使用 `promise.race()` 类似于 `promise.all` 方法, 将多个 `promise` 实例包装为一个 `promise` 方法\n\n`let p = promise.race([p1, p2, p3])`  \n\n只要上面的 `p1, p2, p3` 中有一个的实例率先发生变化, 那么 `p` 的状态就会发生变化, 率先发生变化的返回值就会传递给 `p` 函数。\n\n#### 其他方法\n\n#####   `promise.finally`\n\n使用 `promise.finally` 的方法的作用在于: 不管 `promise` 的最后的状态是什么, 使用 `promise.finally` 内的回调函数始终会被执行;\n\n例如: 请求之前的指示器打开或者关闭：\n\n```vue\nthis.indicator.show();\nlet promise = new Promise();\npromise.then(\n// callback success fn\n).catch(e => {\n  this.toast(e.message)\n}).finally(() => {\n  this.indicator.hide()\n})\n```\n\n\n\n\n\n ","slug":"es6-promise","published":1,"updated":"2020-09-14T06:36:25.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t690011i2os1n4fz9kb","content":"<h4 id=\"resove-and-reject\"><a href=\"#resove-and-reject\" class=\"headerlink\" title=\"resove and reject\"></a>resove and reject</h4><p>使用 <code>es6</code> 回调函数的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  if (/* 如果异步操作成功 */) &#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">      reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 <code>resolve</code> 和 <code>reject</code> , 这两个参数是两个函数, 用来执行回调的作用</p>\n<blockquote>\n<p>resolve<br>resove 是作为异步回调成功之后需要执行的函数<br>reject<br>reject 是作为异步回调失败之后需要进行执行的函数</p>\n<p>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  </p>\n</blockquote>\n<p>使用 <code>promise</code> 进行 <code>ajax</code> 请求的函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @description promise 的 ajax 请求</span><br><span class=\"line\">* @param url &#123;String&#125; ajax 请求的地址</span><br><span class=\"line\">* @param method &#123;String&#125; ajax 请求的方法 &apos;get&apos; or &apos;method&apos;</span><br><span class=\"line\">* @return promise 新的 promise 请求对象</span><br><span class=\"line\">**/</span><br><span class=\"line\">let ajax = function (url, method) &#123;</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    let xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(method, url);</span><br><span class=\"line\">    xhr.onreadystatechange = handler;</span><br><span class=\"line\">    xhr.responseType = &apos;json&apos;;</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Accept&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    function handler() &#123;</span><br><span class=\"line\">      if (this.readystate !== 4) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === 200) &#123;</span><br><span class=\"line\">        resolve(this.response);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(new Error(this.statuText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(url, &apos;get&apos;).then((json) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;请求成功之后返回的数据&apos;, json);</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  console.error(&apos;出现的错误&apos; + error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-then\"><a href=\"#promise-then\" class=\"headerlink\" title=\"promise.then()\"></a>promise.then()</h4><p>在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数</p>\n<blockquote>\n<p>promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // when promise success do something</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // when promise failed do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-all\"><a href=\"#promise-all\" class=\"headerlink\" title=\"promise.all()\"></a>promise.all()</h4><p>使用 promise.all() 方法用于将多个 <code>promise</code> 实例, 包装为一个 <code>promise</code> 实例</p>\n<p><code>Promise.all([promise1, promise2, promise3])</code></p>\n<p>使用 <code>Promise.all</code> 接收的是一个数组作为参数， 其中 <code>promise1</code> <code>promise2</code> <code>promise3</code> 分别是 <code>Promise</code> 的实例</p>\n<p>关于使用 <code>Promise.all</code> 的状态:</p>\n<ol>\n<li>只有 <code>promise1 promise2 promise3</code> 的状态都变成了 <code>fullfilled</code> 的状态,  <code>Promise.all</code> 的状态才会变成 <code>fullfilled</code> 并且三个 <code>promise</code> 的返回值组成一个数组, 传递给 <code>Promise.all</code> 的回调函数。 </li>\n<li>当三个 <code>promise</code> 中存在一个为 <code>reject</code> 的时候, <code>Promise.all</code> 的状态就会变成 <code>reject</code> , 这个时候 ,  被  <code>reject</code>    实例 的返回值被传递给<code>Promise.all</code> 的回调函数.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const firstNamePromise = namePromise.then(getFirstName);</span><br><span class=\"line\">const lastNamePromise = namePromise.then(getLastName);</span><br><span class=\"line\">Promise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) =&gt; nextAction(firstName, lastName));</span><br></pre></td></tr></table></figure>\n<p>注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 </p>\n<p>firstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName</p>\n<p>++++</p>\n<p>对于对象的解构赋值而言,我们可以这样赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 2;</span><br><span class=\"line\">let b = 3;</span><br><span class=\"line\">// 这样</span><br><span class=\"line\">let [a, b] = [2, 3];</span><br></pre></td></tr></table></figure>\n<p>++++</p>\n<h4 id=\"promise-race\"><a href=\"#promise-race\" class=\"headerlink\" title=\"promise .race()\"></a>promise .race()</h4><p>使用 <code>promise.race()</code> 类似于 <code>promise.all</code> 方法, 将多个 <code>promise</code> 实例包装为一个 <code>promise</code> 方法</p>\n<p><code>let p = promise.race([p1, p2, p3])</code>  </p>\n<p>只要上面的 <code>p1, p2, p3</code> 中有一个的实例率先发生变化, 那么 <code>p</code> 的状态就会发生变化, 率先发生变化的返回值就会传递给 <code>p</code> 函数。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"promise-finally\"><a href=\"#promise-finally\" class=\"headerlink\" title=\"promise.finally\"></a><code>promise.finally</code></h5><p>使用 <code>promise.finally</code> 的方法的作用在于: 不管 <code>promise</code> 的最后的状态是什么, 使用 <code>promise.finally</code> 内的回调函数始终会被执行;</p>\n<p>例如: 请求之前的指示器打开或者关闭：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.indicator.show();</span><br><span class=\"line\">let promise = new Promise();</span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">// callback success fn</span><br><span class=\"line\">).catch(e =&gt; &#123;</span><br><span class=\"line\">  this.toast(e.message)</span><br><span class=\"line\">&#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">  this.indicator.hide()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"resove-and-reject\"><a href=\"#resove-and-reject\" class=\"headerlink\" title=\"resove and reject\"></a>resove and reject</h4><p>使用 <code>es6</code> 回调函数的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  if (/* 如果异步操作成功 */) &#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">      reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 <code>resolve</code> 和 <code>reject</code> , 这两个参数是两个函数, 用来执行回调的作用</p>\n<blockquote>\n<p>resolve<br>resove 是作为异步回调成功之后需要执行的函数<br>reject<br>reject 是作为异步回调失败之后需要进行执行的函数</p>\n<p>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  </p>\n</blockquote>\n<p>使用 <code>promise</code> 进行 <code>ajax</code> 请求的函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @description promise 的 ajax 请求</span><br><span class=\"line\">* @param url &#123;String&#125; ajax 请求的地址</span><br><span class=\"line\">* @param method &#123;String&#125; ajax 请求的方法 &apos;get&apos; or &apos;method&apos;</span><br><span class=\"line\">* @return promise 新的 promise 请求对象</span><br><span class=\"line\">**/</span><br><span class=\"line\">let ajax = function (url, method) &#123;</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    let xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(method, url);</span><br><span class=\"line\">    xhr.onreadystatechange = handler;</span><br><span class=\"line\">    xhr.responseType = &apos;json&apos;;</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Accept&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    function handler() &#123;</span><br><span class=\"line\">      if (this.readystate !== 4) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === 200) &#123;</span><br><span class=\"line\">        resolve(this.response);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(new Error(this.statuText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(url, &apos;get&apos;).then((json) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;请求成功之后返回的数据&apos;, json);</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  console.error(&apos;出现的错误&apos; + error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-then\"><a href=\"#promise-then\" class=\"headerlink\" title=\"promise.then()\"></a>promise.then()</h4><p>在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数</p>\n<blockquote>\n<p>promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // when promise success do something</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // when promise failed do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-all\"><a href=\"#promise-all\" class=\"headerlink\" title=\"promise.all()\"></a>promise.all()</h4><p>使用 promise.all() 方法用于将多个 <code>promise</code> 实例, 包装为一个 <code>promise</code> 实例</p>\n<p><code>Promise.all([promise1, promise2, promise3])</code></p>\n<p>使用 <code>Promise.all</code> 接收的是一个数组作为参数， 其中 <code>promise1</code> <code>promise2</code> <code>promise3</code> 分别是 <code>Promise</code> 的实例</p>\n<p>关于使用 <code>Promise.all</code> 的状态:</p>\n<ol>\n<li>只有 <code>promise1 promise2 promise3</code> 的状态都变成了 <code>fullfilled</code> 的状态,  <code>Promise.all</code> 的状态才会变成 <code>fullfilled</code> 并且三个 <code>promise</code> 的返回值组成一个数组, 传递给 <code>Promise.all</code> 的回调函数。 </li>\n<li>当三个 <code>promise</code> 中存在一个为 <code>reject</code> 的时候, <code>Promise.all</code> 的状态就会变成 <code>reject</code> , 这个时候 ,  被  <code>reject</code>    实例 的返回值被传递给<code>Promise.all</code> 的回调函数.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const firstNamePromise = namePromise.then(getFirstName);</span><br><span class=\"line\">const lastNamePromise = namePromise.then(getLastName);</span><br><span class=\"line\">Promise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) =&gt; nextAction(firstName, lastName));</span><br></pre></td></tr></table></figure>\n<p>注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 </p>\n<p>firstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName</p>\n<p>++++</p>\n<p>对于对象的解构赋值而言,我们可以这样赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 2;</span><br><span class=\"line\">let b = 3;</span><br><span class=\"line\">// 这样</span><br><span class=\"line\">let [a, b] = [2, 3];</span><br></pre></td></tr></table></figure>\n<p>++++</p>\n<h4 id=\"promise-race\"><a href=\"#promise-race\" class=\"headerlink\" title=\"promise .race()\"></a>promise .race()</h4><p>使用 <code>promise.race()</code> 类似于 <code>promise.all</code> 方法, 将多个 <code>promise</code> 实例包装为一个 <code>promise</code> 方法</p>\n<p><code>let p = promise.race([p1, p2, p3])</code>  </p>\n<p>只要上面的 <code>p1, p2, p3</code> 中有一个的实例率先发生变化, 那么 <code>p</code> 的状态就会发生变化, 率先发生变化的返回值就会传递给 <code>p</code> 函数。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"promise-finally\"><a href=\"#promise-finally\" class=\"headerlink\" title=\"promise.finally\"></a><code>promise.finally</code></h5><p>使用 <code>promise.finally</code> 的方法的作用在于: 不管 <code>promise</code> 的最后的状态是什么, 使用 <code>promise.finally</code> 内的回调函数始终会被执行;</p>\n<p>例如: 请求之前的指示器打开或者关闭：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.indicator.show();</span><br><span class=\"line\">let promise = new Promise();</span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">// callback success fn</span><br><span class=\"line\">).catch(e =&gt; &#123;</span><br><span class=\"line\">  this.toast(e.message)</span><br><span class=\"line\">&#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">  this.indicator.hide()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"es6:变量的解构赋值","date":"2017-09-09T07:53:25.000Z","_content":"\n### es6的数值解构赋值\n\n#### 1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\n\n```\nlet [a,b,c] = [1,2,3]\na // 1\nb // 2\nc // 3\n类似:\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\n使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式\n\n对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:\n\n```\nlet [a] = {};\nlet [a] = null;\nlet [a] = undefined;\nlet [a] = NaN;\nlet [a] = 1;\n\n```\n\n上面的几种形式都会被报错\n\n#### 2.使用结构变量可以初始数组\n\n```\nlet [a,...b] = [1,2,3,4];\nb // [2,3,4]\n```\n\n使用扩展运算符可以将多个数合并为一个数组\n\n#### 3.可以在解构赋值的时候使用默认值操作\n\n```\nlet [x = 1] = [];\nx //  x 在没有被赋值的时候默认使用 1\nlet [x = 1] = [2];\nx // 2\n当 x 存在明显只的时候默认值失效\n// 对于使用默认值, 还可以使用函数的返回值\nfunction fn() {\n  return 23\n}\nlet [a = fn()] = [45];\n// 这里 因为 a 能够取到值, 因此不会执行 fn 函数\nconsole.log(a); // 45\n```\n\n默认值可以引用其他结构值的对象\n\n```\nlet [x = 1, y = x] = [];\nx // 1\ny // 1\n```\n\n注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 `===` 全等操作， 因此\n\n```\nlet [a = 1] = [null]\na // null\nlet [a = 1] = [undefined]\na // 1\n```\n\n\n\n###  es6 中对于对象的解构赋值操作\n\n代码如下:\n\n```\nlet person = {\n\tname: '张宁宁',\n\thome: '山东'\n};\nlet {name, home} = person;\nname // '张宁宁'\nhome // '山东'\n```\n\n这种写法无非是下面这种写法的简写:`\n\n```\nlet {name: name, home: home} = person;\n```\n\n实际上:\n\n```\nlet {name: perName, home: perHome} = person;\nperName //  '张宁宁'\n```\n\n等号左边中 `name` 用于进行模式匹配，在 `person` 中找到 `name` 之后，将 `name` 的值赋给 `perName`\n\n使用对象的形式解构也可以赋予默认值：\n\n当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值\n\n```\nlet {x = 1, y = 5} = {x: 2}\nx // 2\ny // 5\n```\n\n### es6 中对于字符串的解构赋值\n\n当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:\n\n这意味着我们可以通过使用数组或者对象的方式进行解构：\n\n```\nlet [a,b,c,d,e] = 'hello';\na // 'h'\nb // 'e'\n....\n```\n\n```\nlet {length} = 'hello';\nlength // 5\n因为使用解构的时候， 字符串对象含有一个 length 属性\n```\n\n### 函数参数的解构\n\n1.数组形式进行解构\n\n```\nfunction move([x,y]) {\n  return x + y\n}\nmove([1,2]);\n// 这里虽然传入的是一个数组，实际上传入函数之后会被解构\n```\n\n2.对象形式进行解构\n\n```\nfunction person({name, home}) {\n\tconsole.log(home, name)\n}\nlet per = {\n  name: '张宁宁',\n  home: 'china'\n}\nperson(per)//  china 张宁宁\n```\n\n3.使用对象形式赋予默认值\n\n```\nfunction person ({name = '张宁宁', home = 'china'} = {}) {\n\tconsole.log(name, home)\n}\nperson(); // 张宁宁  china\n和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作\n```\n\n***\n\n### 使用参数解构中的小技巧\n\n1. 提取函数的返回值:\n\n   ```\n   function bar () {\n     return [1, 2]\n   }\n   let [a, b] = bar ();\n   a // 1\n   b // 2\n   ```\n\n2. 应用解构分离对象的键值对\n\n   ```\n   let arrObj = [{}, {}, {}];\n   // 取得数组对象中值对应的键\n   function getKey( arrobj, objValue) {\n     for (const obj of arrobj) {\n     // 使用 {} 实现对象的解构赋值\n       let {key, value} = obj;\n       if (value === objValue) {\n         return key;\n       }\n     }\n   }\n\n   getKey(arrObj, 'someObjValue')\n\n   ```\n\n   ​","source":"_posts/es6-变量的解构赋值.md","raw":"---\ntitle: 'es6:变量的解构赋值'\ndate: 2017-09-09 15:53:25\ntags: 变量解构赋值\ncategories: es6\n---\n\n### es6的数值解构赋值\n\n#### 1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\n\n```\nlet [a,b,c] = [1,2,3]\na // 1\nb // 2\nc // 3\n类似:\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\n使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式\n\n对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:\n\n```\nlet [a] = {};\nlet [a] = null;\nlet [a] = undefined;\nlet [a] = NaN;\nlet [a] = 1;\n\n```\n\n上面的几种形式都会被报错\n\n#### 2.使用结构变量可以初始数组\n\n```\nlet [a,...b] = [1,2,3,4];\nb // [2,3,4]\n```\n\n使用扩展运算符可以将多个数合并为一个数组\n\n#### 3.可以在解构赋值的时候使用默认值操作\n\n```\nlet [x = 1] = [];\nx //  x 在没有被赋值的时候默认使用 1\nlet [x = 1] = [2];\nx // 2\n当 x 存在明显只的时候默认值失效\n// 对于使用默认值, 还可以使用函数的返回值\nfunction fn() {\n  return 23\n}\nlet [a = fn()] = [45];\n// 这里 因为 a 能够取到值, 因此不会执行 fn 函数\nconsole.log(a); // 45\n```\n\n默认值可以引用其他结构值的对象\n\n```\nlet [x = 1, y = x] = [];\nx // 1\ny // 1\n```\n\n注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 `===` 全等操作， 因此\n\n```\nlet [a = 1] = [null]\na // null\nlet [a = 1] = [undefined]\na // 1\n```\n\n\n\n###  es6 中对于对象的解构赋值操作\n\n代码如下:\n\n```\nlet person = {\n\tname: '张宁宁',\n\thome: '山东'\n};\nlet {name, home} = person;\nname // '张宁宁'\nhome // '山东'\n```\n\n这种写法无非是下面这种写法的简写:`\n\n```\nlet {name: name, home: home} = person;\n```\n\n实际上:\n\n```\nlet {name: perName, home: perHome} = person;\nperName //  '张宁宁'\n```\n\n等号左边中 `name` 用于进行模式匹配，在 `person` 中找到 `name` 之后，将 `name` 的值赋给 `perName`\n\n使用对象的形式解构也可以赋予默认值：\n\n当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值\n\n```\nlet {x = 1, y = 5} = {x: 2}\nx // 2\ny // 5\n```\n\n### es6 中对于字符串的解构赋值\n\n当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:\n\n这意味着我们可以通过使用数组或者对象的方式进行解构：\n\n```\nlet [a,b,c,d,e] = 'hello';\na // 'h'\nb // 'e'\n....\n```\n\n```\nlet {length} = 'hello';\nlength // 5\n因为使用解构的时候， 字符串对象含有一个 length 属性\n```\n\n### 函数参数的解构\n\n1.数组形式进行解构\n\n```\nfunction move([x,y]) {\n  return x + y\n}\nmove([1,2]);\n// 这里虽然传入的是一个数组，实际上传入函数之后会被解构\n```\n\n2.对象形式进行解构\n\n```\nfunction person({name, home}) {\n\tconsole.log(home, name)\n}\nlet per = {\n  name: '张宁宁',\n  home: 'china'\n}\nperson(per)//  china 张宁宁\n```\n\n3.使用对象形式赋予默认值\n\n```\nfunction person ({name = '张宁宁', home = 'china'} = {}) {\n\tconsole.log(name, home)\n}\nperson(); // 张宁宁  china\n和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作\n```\n\n***\n\n### 使用参数解构中的小技巧\n\n1. 提取函数的返回值:\n\n   ```\n   function bar () {\n     return [1, 2]\n   }\n   let [a, b] = bar ();\n   a // 1\n   b // 2\n   ```\n\n2. 应用解构分离对象的键值对\n\n   ```\n   let arrObj = [{}, {}, {}];\n   // 取得数组对象中值对应的键\n   function getKey( arrobj, objValue) {\n     for (const obj of arrobj) {\n     // 使用 {} 实现对象的解构赋值\n       let {key, value} = obj;\n       if (value === objValue) {\n         return key;\n       }\n     }\n   }\n\n   getKey(arrObj, 'someObjValue')\n\n   ```\n\n   ​","slug":"es6-变量的解构赋值","published":1,"updated":"2020-09-14T06:36:25.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6b0014i2osex1xwx92","content":"<h3 id=\"es6的数值解构赋值\"><a href=\"#es6的数值解构赋值\" class=\"headerlink\" title=\"es6的数值解构赋值\"></a>es6的数值解构赋值</h3><h4 id=\"1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\"><a href=\"#1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\" class=\"headerlink\" title=\"1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\"></a>1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c] = [1,2,3]</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br><span class=\"line\">c // 3</span><br><span class=\"line\">类似:</span><br><span class=\"line\">let a = 1</span><br><span class=\"line\">let b = 2</span><br><span class=\"line\">let c = 3</span><br></pre></td></tr></table></figure>\n<p>使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式</p>\n<p>对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a] = &#123;&#125;;</span><br><span class=\"line\">let [a] = null;</span><br><span class=\"line\">let [a] = undefined;</span><br><span class=\"line\">let [a] = NaN;</span><br><span class=\"line\">let [a] = 1;</span><br></pre></td></tr></table></figure>\n<p>上面的几种形式都会被报错</p>\n<h4 id=\"2-使用结构变量可以初始数组\"><a href=\"#2-使用结构变量可以初始数组\" class=\"headerlink\" title=\"2.使用结构变量可以初始数组\"></a>2.使用结构变量可以初始数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,...b] = [1,2,3,4];</span><br><span class=\"line\">b // [2,3,4]</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将多个数合并为一个数组</p>\n<h4 id=\"3-可以在解构赋值的时候使用默认值操作\"><a href=\"#3-可以在解构赋值的时候使用默认值操作\" class=\"headerlink\" title=\"3.可以在解构赋值的时候使用默认值操作\"></a>3.可以在解构赋值的时候使用默认值操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1] = [];</span><br><span class=\"line\">x //  x 在没有被赋值的时候默认使用 1</span><br><span class=\"line\">let [x = 1] = [2];</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">当 x 存在明显只的时候默认值失效</span><br><span class=\"line\">// 对于使用默认值, 还可以使用函数的返回值</span><br><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">  return 23</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a = fn()] = [45];</span><br><span class=\"line\">// 这里 因为 a 能够取到值, 因此不会执行 fn 函数</span><br><span class=\"line\">console.log(a); // 45</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用其他结构值的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1, y = x] = [];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 1</span><br></pre></td></tr></table></figure>\n<p>注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 <code>===</code> 全等操作， 因此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a = 1] = [null]</span><br><span class=\"line\">a // null</span><br><span class=\"line\">let [a = 1] = [undefined]</span><br><span class=\"line\">a // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于对象的解构赋值操作\"><a href=\"#es6-中对于对象的解构赋值操作\" class=\"headerlink\" title=\"es6 中对于对象的解构赋值操作\"></a>es6 中对于对象的解构赋值操作</h3><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = &#123;</span><br><span class=\"line\">\tname: &apos;张宁宁&apos;,</span><br><span class=\"line\">\thome: &apos;山东&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123;name, home&#125; = person;</span><br><span class=\"line\">name // &apos;张宁宁&apos;</span><br><span class=\"line\">home // &apos;山东&apos;</span><br></pre></td></tr></table></figure>\n<p>这种写法无非是下面这种写法的简写:`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: name, home: home&#125; = person;</span><br></pre></td></tr></table></figure>\n<p>实际上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: perName, home: perHome&#125; = person;</span><br><span class=\"line\">perName //  &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<p>等号左边中 <code>name</code> 用于进行模式匹配，在 <code>person</code> 中找到 <code>name</code> 之后，将 <code>name</code> 的值赋给 <code>perName</code></p>\n<p>使用对象的形式解构也可以赋予默认值：</p>\n<p>当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;x = 1, y = 5&#125; = &#123;x: 2&#125;</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">y // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于字符串的解构赋值\"><a href=\"#es6-中对于字符串的解构赋值\" class=\"headerlink\" title=\"es6 中对于字符串的解构赋值\"></a>es6 中对于字符串的解构赋值</h3><p>当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:</p>\n<p>这意味着我们可以通过使用数组或者对象的方式进行解构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c,d,e] = &apos;hello&apos;;</span><br><span class=\"line\">a // &apos;h&apos;</span><br><span class=\"line\">b // &apos;e&apos;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;length&#125; = &apos;hello&apos;;</span><br><span class=\"line\">length // 5</span><br><span class=\"line\">因为使用解构的时候， 字符串对象含有一个 length 属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数的解构\"><a href=\"#函数参数的解构\" class=\"headerlink\" title=\"函数参数的解构\"></a>函数参数的解构</h3><p>1.数组形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function move([x,y]) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">move([1,2]);</span><br><span class=\"line\">// 这里虽然传入的是一个数组，实际上传入函数之后会被解构</span><br></pre></td></tr></table></figure>\n<p>2.对象形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person(&#123;name, home&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(home, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let per = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;,</span><br><span class=\"line\">  home: &apos;china&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(per)//  china 张宁宁</span><br></pre></td></tr></table></figure>\n<p>3.使用对象形式赋予默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person (&#123;name = &apos;张宁宁&apos;, home = &apos;china&apos;&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(name, home)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(); // 张宁宁  china</span><br><span class=\"line\">和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"使用参数解构中的小技巧\"><a href=\"#使用参数解构中的小技巧\" class=\"headerlink\" title=\"使用参数解构中的小技巧\"></a>使用参数解构中的小技巧</h3><ol>\n<li><p>提取函数的返回值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bar () &#123;</span><br><span class=\"line\">  return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b] = bar ();</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用解构分离对象的键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrObj = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">// 取得数组对象中值对应的键</span><br><span class=\"line\">function getKey( arrobj, objValue) &#123;</span><br><span class=\"line\">  for (const obj of arrobj) &#123;</span><br><span class=\"line\">  // 使用 &#123;&#125; 实现对象的解构赋值</span><br><span class=\"line\">    let &#123;key, value&#125; = obj;</span><br><span class=\"line\">    if (value === objValue) &#123;</span><br><span class=\"line\">      return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getKey(arrObj, &apos;someObjValue&apos;)</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"es6的数值解构赋值\"><a href=\"#es6的数值解构赋值\" class=\"headerlink\" title=\"es6的数值解构赋值\"></a>es6的数值解构赋值</h3><h4 id=\"1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\"><a href=\"#1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\" class=\"headerlink\" title=\"1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\"></a>1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c] = [1,2,3]</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br><span class=\"line\">c // 3</span><br><span class=\"line\">类似:</span><br><span class=\"line\">let a = 1</span><br><span class=\"line\">let b = 2</span><br><span class=\"line\">let c = 3</span><br></pre></td></tr></table></figure>\n<p>使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式</p>\n<p>对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a] = &#123;&#125;;</span><br><span class=\"line\">let [a] = null;</span><br><span class=\"line\">let [a] = undefined;</span><br><span class=\"line\">let [a] = NaN;</span><br><span class=\"line\">let [a] = 1;</span><br></pre></td></tr></table></figure>\n<p>上面的几种形式都会被报错</p>\n<h4 id=\"2-使用结构变量可以初始数组\"><a href=\"#2-使用结构变量可以初始数组\" class=\"headerlink\" title=\"2.使用结构变量可以初始数组\"></a>2.使用结构变量可以初始数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,...b] = [1,2,3,4];</span><br><span class=\"line\">b // [2,3,4]</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将多个数合并为一个数组</p>\n<h4 id=\"3-可以在解构赋值的时候使用默认值操作\"><a href=\"#3-可以在解构赋值的时候使用默认值操作\" class=\"headerlink\" title=\"3.可以在解构赋值的时候使用默认值操作\"></a>3.可以在解构赋值的时候使用默认值操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1] = [];</span><br><span class=\"line\">x //  x 在没有被赋值的时候默认使用 1</span><br><span class=\"line\">let [x = 1] = [2];</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">当 x 存在明显只的时候默认值失效</span><br><span class=\"line\">// 对于使用默认值, 还可以使用函数的返回值</span><br><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">  return 23</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a = fn()] = [45];</span><br><span class=\"line\">// 这里 因为 a 能够取到值, 因此不会执行 fn 函数</span><br><span class=\"line\">console.log(a); // 45</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用其他结构值的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1, y = x] = [];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 1</span><br></pre></td></tr></table></figure>\n<p>注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 <code>===</code> 全等操作， 因此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a = 1] = [null]</span><br><span class=\"line\">a // null</span><br><span class=\"line\">let [a = 1] = [undefined]</span><br><span class=\"line\">a // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于对象的解构赋值操作\"><a href=\"#es6-中对于对象的解构赋值操作\" class=\"headerlink\" title=\"es6 中对于对象的解构赋值操作\"></a>es6 中对于对象的解构赋值操作</h3><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = &#123;</span><br><span class=\"line\">\tname: &apos;张宁宁&apos;,</span><br><span class=\"line\">\thome: &apos;山东&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123;name, home&#125; = person;</span><br><span class=\"line\">name // &apos;张宁宁&apos;</span><br><span class=\"line\">home // &apos;山东&apos;</span><br></pre></td></tr></table></figure>\n<p>这种写法无非是下面这种写法的简写:`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: name, home: home&#125; = person;</span><br></pre></td></tr></table></figure>\n<p>实际上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: perName, home: perHome&#125; = person;</span><br><span class=\"line\">perName //  &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<p>等号左边中 <code>name</code> 用于进行模式匹配，在 <code>person</code> 中找到 <code>name</code> 之后，将 <code>name</code> 的值赋给 <code>perName</code></p>\n<p>使用对象的形式解构也可以赋予默认值：</p>\n<p>当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;x = 1, y = 5&#125; = &#123;x: 2&#125;</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">y // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于字符串的解构赋值\"><a href=\"#es6-中对于字符串的解构赋值\" class=\"headerlink\" title=\"es6 中对于字符串的解构赋值\"></a>es6 中对于字符串的解构赋值</h3><p>当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:</p>\n<p>这意味着我们可以通过使用数组或者对象的方式进行解构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c,d,e] = &apos;hello&apos;;</span><br><span class=\"line\">a // &apos;h&apos;</span><br><span class=\"line\">b // &apos;e&apos;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;length&#125; = &apos;hello&apos;;</span><br><span class=\"line\">length // 5</span><br><span class=\"line\">因为使用解构的时候， 字符串对象含有一个 length 属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数的解构\"><a href=\"#函数参数的解构\" class=\"headerlink\" title=\"函数参数的解构\"></a>函数参数的解构</h3><p>1.数组形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function move([x,y]) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">move([1,2]);</span><br><span class=\"line\">// 这里虽然传入的是一个数组，实际上传入函数之后会被解构</span><br></pre></td></tr></table></figure>\n<p>2.对象形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person(&#123;name, home&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(home, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let per = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;,</span><br><span class=\"line\">  home: &apos;china&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(per)//  china 张宁宁</span><br></pre></td></tr></table></figure>\n<p>3.使用对象形式赋予默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person (&#123;name = &apos;张宁宁&apos;, home = &apos;china&apos;&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(name, home)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(); // 张宁宁  china</span><br><span class=\"line\">和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"使用参数解构中的小技巧\"><a href=\"#使用参数解构中的小技巧\" class=\"headerlink\" title=\"使用参数解构中的小技巧\"></a>使用参数解构中的小技巧</h3><ol>\n<li><p>提取函数的返回值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bar () &#123;</span><br><span class=\"line\">  return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b] = bar ();</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用解构分离对象的键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrObj = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">// 取得数组对象中值对应的键</span><br><span class=\"line\">function getKey( arrobj, objValue) &#123;</span><br><span class=\"line\">  for (const obj of arrobj) &#123;</span><br><span class=\"line\">  // 使用 &#123;&#125; 实现对象的解构赋值</span><br><span class=\"line\">    let &#123;key, value&#125; = obj;</span><br><span class=\"line\">    if (value === objValue) &#123;</span><br><span class=\"line\">      return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getKey(arrObj, &apos;someObjValue&apos;)</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"es6: 对象的扩展","date":"2017-09-17T09:27:58.000Z","_content":"\n### es6 中对象扩展的用法\n\n#### 1.简洁属性名\n\n函数的属性可以是一个变量：\n\n```\n    let foo = 'good';\n    let bar = {\n        foo: foo\n    };\n    console.log(bar.foo); // 'good'\n```\n\n1. es6 中我们可以直接传入一个变量到对象中\n\n   ```\n       let foo = 'good';\n       let bar = {\n           foo\n       };\n       console.log(bar.foo); // 'good' \n       //传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值\n   ```\n\n\n2. 用在函数中返回一个对象\n\n   ```\n   function Person(name) {\n     let age = 22;\n     return {name, age};\n   }\n   person('张宁宁')// {name: '张宁宁', age: 22}\n   ```\n\n#### 2.  Object.is( ) 判断相等\n\n对于比较两个值是否相等，使用 全等 `===` 运算符进行判断, 因为使用 `==` 会自动转换数据类型\n\n使用 `===` 有缺点： NAN === NAN  flase  以及  +0 === -0 false\n\n使用 `object.is` 可以解决这个缺点\n\n```\nobject.is(1,1) // true\nobject.is(1,'1') // false\nobject.is(NaN, NaN) // true\nObject.is(+0, -0) //  true\n```\n\n***\n\n使用` ==` 或者 `===` 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址\n\n```\nobject.is({} , {}); // false\n```\n\n***\n\n#### 3. Object.assign () 合并对象\n\n```\nlet t = {};\nlet s1 = { a: 1 };\nlet s2 = { b: 2 };\nObject.assign(t, s1, s2);\n// {a: 1, b: 2}\n```\n\n上面中将对象 s1, s2,  合并入 t 中；\n\n传入值的情况:\n\n* 如果只有一个参数，使用这种方法会返回这个参数\n* 如果传入的一个参数是 Null 或者 undefined 机会报错\n* 要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效\n\n```\nObject.assign({}, 'string');\n// {0: \"s\", 1: \"t\", 2: \"r\", 3: \"i\", 4: \"n\", 5: \"g\"}\n```\n\n使用 Object.assign () 返回的是对象的形式\n\n使用 Object.assign() 实现浅拷贝\n\n#### 4. Object.keys()   Object.values()   Object.entires()\n\n1. `Object.keys() `\n\n   使用这种方法得到的是对象中所有可遍历的属性名组成的数组\n\n2. `Object.values() `\n\n   使用这种方法得到的是对象自身所有可以遍历到的属性的值\n\n3. `Object.entires()`\n\n   使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组\n\n### 应用\n\n1. 判断对象内是否是空对象的方法：\n\n   ```javascript\n   const isEmpty = obj => return Object.keys(obj) === 0;\n   ```\n\n2. 使用 `Object.assign` 实现自定义配置覆盖默认配置\n\n   ```javascript\n   function toConfig(defaultConfig, config) {\n     return Object.assign(defaultConfig, config);\n   }\n   ```\n\n   ​","source":"_posts/es6-对象的扩展.md","raw":"---\ntitle: 'es6: 对象的扩展'\ndate: 2017-09-17 17:27:58\ntags: 对象扩展\ncategories: es6\n---\n\n### es6 中对象扩展的用法\n\n#### 1.简洁属性名\n\n函数的属性可以是一个变量：\n\n```\n    let foo = 'good';\n    let bar = {\n        foo: foo\n    };\n    console.log(bar.foo); // 'good'\n```\n\n1. es6 中我们可以直接传入一个变量到对象中\n\n   ```\n       let foo = 'good';\n       let bar = {\n           foo\n       };\n       console.log(bar.foo); // 'good' \n       //传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值\n   ```\n\n\n2. 用在函数中返回一个对象\n\n   ```\n   function Person(name) {\n     let age = 22;\n     return {name, age};\n   }\n   person('张宁宁')// {name: '张宁宁', age: 22}\n   ```\n\n#### 2.  Object.is( ) 判断相等\n\n对于比较两个值是否相等，使用 全等 `===` 运算符进行判断, 因为使用 `==` 会自动转换数据类型\n\n使用 `===` 有缺点： NAN === NAN  flase  以及  +0 === -0 false\n\n使用 `object.is` 可以解决这个缺点\n\n```\nobject.is(1,1) // true\nobject.is(1,'1') // false\nobject.is(NaN, NaN) // true\nObject.is(+0, -0) //  true\n```\n\n***\n\n使用` ==` 或者 `===` 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址\n\n```\nobject.is({} , {}); // false\n```\n\n***\n\n#### 3. Object.assign () 合并对象\n\n```\nlet t = {};\nlet s1 = { a: 1 };\nlet s2 = { b: 2 };\nObject.assign(t, s1, s2);\n// {a: 1, b: 2}\n```\n\n上面中将对象 s1, s2,  合并入 t 中；\n\n传入值的情况:\n\n* 如果只有一个参数，使用这种方法会返回这个参数\n* 如果传入的一个参数是 Null 或者 undefined 机会报错\n* 要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效\n\n```\nObject.assign({}, 'string');\n// {0: \"s\", 1: \"t\", 2: \"r\", 3: \"i\", 4: \"n\", 5: \"g\"}\n```\n\n使用 Object.assign () 返回的是对象的形式\n\n使用 Object.assign() 实现浅拷贝\n\n#### 4. Object.keys()   Object.values()   Object.entires()\n\n1. `Object.keys() `\n\n   使用这种方法得到的是对象中所有可遍历的属性名组成的数组\n\n2. `Object.values() `\n\n   使用这种方法得到的是对象自身所有可以遍历到的属性的值\n\n3. `Object.entires()`\n\n   使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组\n\n### 应用\n\n1. 判断对象内是否是空对象的方法：\n\n   ```javascript\n   const isEmpty = obj => return Object.keys(obj) === 0;\n   ```\n\n2. 使用 `Object.assign` 实现自定义配置覆盖默认配置\n\n   ```javascript\n   function toConfig(defaultConfig, config) {\n     return Object.assign(defaultConfig, config);\n   }\n   ```\n\n   ​","slug":"es6-对象的扩展","published":1,"updated":"2020-09-14T06:36:25.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6d0017i2osyi6rnida","content":"<h3 id=\"es6-中对象扩展的用法\"><a href=\"#es6-中对象扩展的用法\" class=\"headerlink\" title=\"es6 中对象扩展的用法\"></a>es6 中对象扩展的用法</h3><h4 id=\"1-简洁属性名\"><a href=\"#1-简洁属性名\" class=\"headerlink\" title=\"1.简洁属性名\"></a>1.简洁属性名</h4><p>函数的属性可以是一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>es6 中我们可以直接传入一个变量到对象中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos; </span><br><span class=\"line\">//传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在函数中返回一个对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  let age = 22;</span><br><span class=\"line\">  return &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(&apos;张宁宁&apos;)// &#123;name: &apos;张宁宁&apos;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-Object-is-判断相等\"><a href=\"#2-Object-is-判断相等\" class=\"headerlink\" title=\"2.  Object.is( ) 判断相等\"></a>2.  Object.is( ) 判断相等</h4><p>对于比较两个值是否相等，使用 全等 <code>===</code> 运算符进行判断, 因为使用 <code>==</code> 会自动转换数据类型</p>\n<p>使用 <code>===</code> 有缺点： NAN === NAN  flase  以及  +0 === -0 false</p>\n<p>使用 <code>object.is</code> 可以解决这个缺点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(1,1) // true</span><br><span class=\"line\">object.is(1,&apos;1&apos;) // false</span><br><span class=\"line\">object.is(NaN, NaN) // true</span><br><span class=\"line\">Object.is(+0, -0) //  true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用<code>==</code> 或者 <code>===</code> 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(&#123;&#125; , &#123;&#125;); // false</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-Object-assign-合并对象\"><a href=\"#3-Object-assign-合并对象\" class=\"headerlink\" title=\"3. Object.assign () 合并对象\"></a>3. Object.assign () 合并对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let t = &#123;&#125;;</span><br><span class=\"line\">let s1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">let s2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">Object.assign(t, s1, s2);</span><br><span class=\"line\">// &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中将对象 s1, s2,  合并入 t 中；</p>\n<p>传入值的情况:</p>\n<ul>\n<li>如果只有一个参数，使用这种方法会返回这个参数</li>\n<li>如果传入的一个参数是 Null 或者 undefined 机会报错</li>\n<li>要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;, &apos;string&apos;);</span><br><span class=\"line\">// &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Object.assign () 返回的是对象的形式</p>\n<p>使用 Object.assign() 实现浅拷贝</p>\n<h4 id=\"4-Object-keys-Object-values-Object-entires\"><a href=\"#4-Object-keys-Object-values-Object-entires\" class=\"headerlink\" title=\"4. Object.keys()   Object.values()   Object.entires()\"></a>4. Object.keys()   Object.values()   Object.entires()</h4><ol>\n<li><p><code>Object.keys()</code></p>\n<p>使用这种方法得到的是对象中所有可遍历的属性名组成的数组</p>\n</li>\n<li><p><code>Object.values()</code></p>\n<p>使用这种方法得到的是对象自身所有可以遍历到的属性的值</p>\n</li>\n<li><p><code>Object.entires()</code></p>\n<p>使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ol>\n<li><p>判断对象内是否是空对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEmpty = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj) === <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.assign</code> 实现自定义配置覆盖默认配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConfig</span>(<span class=\"params\">defaultConfig, config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(defaultConfig, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"es6-中对象扩展的用法\"><a href=\"#es6-中对象扩展的用法\" class=\"headerlink\" title=\"es6 中对象扩展的用法\"></a>es6 中对象扩展的用法</h3><h4 id=\"1-简洁属性名\"><a href=\"#1-简洁属性名\" class=\"headerlink\" title=\"1.简洁属性名\"></a>1.简洁属性名</h4><p>函数的属性可以是一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>es6 中我们可以直接传入一个变量到对象中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos; </span><br><span class=\"line\">//传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在函数中返回一个对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  let age = 22;</span><br><span class=\"line\">  return &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(&apos;张宁宁&apos;)// &#123;name: &apos;张宁宁&apos;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-Object-is-判断相等\"><a href=\"#2-Object-is-判断相等\" class=\"headerlink\" title=\"2.  Object.is( ) 判断相等\"></a>2.  Object.is( ) 判断相等</h4><p>对于比较两个值是否相等，使用 全等 <code>===</code> 运算符进行判断, 因为使用 <code>==</code> 会自动转换数据类型</p>\n<p>使用 <code>===</code> 有缺点： NAN === NAN  flase  以及  +0 === -0 false</p>\n<p>使用 <code>object.is</code> 可以解决这个缺点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(1,1) // true</span><br><span class=\"line\">object.is(1,&apos;1&apos;) // false</span><br><span class=\"line\">object.is(NaN, NaN) // true</span><br><span class=\"line\">Object.is(+0, -0) //  true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用<code>==</code> 或者 <code>===</code> 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(&#123;&#125; , &#123;&#125;); // false</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-Object-assign-合并对象\"><a href=\"#3-Object-assign-合并对象\" class=\"headerlink\" title=\"3. Object.assign () 合并对象\"></a>3. Object.assign () 合并对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let t = &#123;&#125;;</span><br><span class=\"line\">let s1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">let s2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">Object.assign(t, s1, s2);</span><br><span class=\"line\">// &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中将对象 s1, s2,  合并入 t 中；</p>\n<p>传入值的情况:</p>\n<ul>\n<li>如果只有一个参数，使用这种方法会返回这个参数</li>\n<li>如果传入的一个参数是 Null 或者 undefined 机会报错</li>\n<li>要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;, &apos;string&apos;);</span><br><span class=\"line\">// &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Object.assign () 返回的是对象的形式</p>\n<p>使用 Object.assign() 实现浅拷贝</p>\n<h4 id=\"4-Object-keys-Object-values-Object-entires\"><a href=\"#4-Object-keys-Object-values-Object-entires\" class=\"headerlink\" title=\"4. Object.keys()   Object.values()   Object.entires()\"></a>4. Object.keys()   Object.values()   Object.entires()</h4><ol>\n<li><p><code>Object.keys()</code></p>\n<p>使用这种方法得到的是对象中所有可遍历的属性名组成的数组</p>\n</li>\n<li><p><code>Object.values()</code></p>\n<p>使用这种方法得到的是对象自身所有可以遍历到的属性的值</p>\n</li>\n<li><p><code>Object.entires()</code></p>\n<p>使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ol>\n<li><p>判断对象内是否是空对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEmpty = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj) === <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.assign</code> 实现自定义配置覆盖默认配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConfig</span>(<span class=\"params\">defaultConfig, config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(defaultConfig, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"grid 布局（一）","date":"2018-08-18T15:45:07.000Z","_content":"\n`grid` 布局是一种方便的用于创建网格布局的强大工具， 使用`grid` 布局可以很方便的构建网页结构， 本篇文章主要介绍`grid` 布局的基础知识。\n\n### 基本属性\n\n使用 `grid` 布局实现一个九宫格:\n\n```html\n<div class=\"content\">\n  <div class=\"item1\"></div>\n  <div class=\"item2\"></div>\n  ...\n  <div class=\"item9\"></div>\n</div>\n```\n\n```css\n.content {\n    display: grid;\n    width: 300px;\n    height: 300px;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 100px 100px;\n}\n```\n\n实现的九宫格如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png)\n\n#### display: grid\n\n使用 `display: grid` 的目的是用于声明当前元素使用 `grid` 布局构建;\n\n常用值:\n\n* `grid`: 生成一个块状网格\n* `inline-grid`: 生成一个内联网格\n* `subgrid`: 表示当前的网格容器继承自父级元素的网格容器\n\n#### grid-template-columns,  grid-template-rows\n\n这两个属性用于在声明 `grid` 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。\n\n`grid-template-columns` : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;\n\n`grid-template-row`: 使用效果类似于 `grid-template-columns`, 是对于 `grid` 元素行的划分。比如上面的代码中表示将 `grid` 元素划分为三行， 并且三行的高度均为 `100px`;\n\n常用值:\n\n* `<track-name><track-size><track-name><track-size>...`\n\n`track-size`: 表示网格内容的宽度，可取值:\n\n* `percentage` \n* `数值`\n* `auto`: 网格宽度的剩余空间\n* `fr`: 表示等份网格容器中的可用空间\n\n`track-name`: 表示网格之间网格线的名称\n\n式例:\n\n```css\n.content {\n  grid-template-columns: [line-start] 50px [line1-start] 20% [line2-start] 1fr [line-end];\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png)\n\n**当 auto 和 `fr` 同时存在的时候， 优先级： `auto` > `fr`, 这个时候 , 声明 `auto` 的那一列宽度为 0**\n\n#### grid-template-areas\n\n使用 `grid-template-areas` 用来定义网络模板；\n\n常用值:\n\n* `grid-area-name` : 由网格项的 `grid-area` 指定的网格区域名称\n* `.` 表示一个空的网格单元\n* `none` 表示不定义网格区域\n\n例如下面实现的一个网页布局:\n\n```html\n<div class=\"content\">\n  <div class=\"header\"></div>\n  <div class=\"menu\"></div>\n  <div class=\"body\"></div>\n  <div class=\"footer\"></div>\n</div>\n```\n\n```css\n.content {\n  width: 400px;\n  height: 300px;\n  display: grid;\n  grid-template-columns: repeat(1fr);\n  grid-template-rows: repeat(1fr);\n  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的\n  grid-template-areas: \n    \"h h h h\"\n    \"m . b b\"\n    \"f f f f\";\n}\n.header {\n  grid-area: h;\n  background-color: lightcoral;\n}\n.menu {\n  grid-area: m;\n  background-color: lightblue\n}\n.body {\n  grid-area: b;\n  background-color: lightslategray\n}\n.footer {\n  grid-area: f;\n  background-color: lightseagreen;\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png)","source":"_posts/grid-布局（一）.md","raw":"---\ntitle: grid 布局（一）\ndate: 2018-08-18 23:45:07\ntags: grid 布局\ncategories: CSS\n---\n\n`grid` 布局是一种方便的用于创建网格布局的强大工具， 使用`grid` 布局可以很方便的构建网页结构， 本篇文章主要介绍`grid` 布局的基础知识。\n\n### 基本属性\n\n使用 `grid` 布局实现一个九宫格:\n\n```html\n<div class=\"content\">\n  <div class=\"item1\"></div>\n  <div class=\"item2\"></div>\n  ...\n  <div class=\"item9\"></div>\n</div>\n```\n\n```css\n.content {\n    display: grid;\n    width: 300px;\n    height: 300px;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 100px 100px;\n}\n```\n\n实现的九宫格如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png)\n\n#### display: grid\n\n使用 `display: grid` 的目的是用于声明当前元素使用 `grid` 布局构建;\n\n常用值:\n\n* `grid`: 生成一个块状网格\n* `inline-grid`: 生成一个内联网格\n* `subgrid`: 表示当前的网格容器继承自父级元素的网格容器\n\n#### grid-template-columns,  grid-template-rows\n\n这两个属性用于在声明 `grid` 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。\n\n`grid-template-columns` : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;\n\n`grid-template-row`: 使用效果类似于 `grid-template-columns`, 是对于 `grid` 元素行的划分。比如上面的代码中表示将 `grid` 元素划分为三行， 并且三行的高度均为 `100px`;\n\n常用值:\n\n* `<track-name><track-size><track-name><track-size>...`\n\n`track-size`: 表示网格内容的宽度，可取值:\n\n* `percentage` \n* `数值`\n* `auto`: 网格宽度的剩余空间\n* `fr`: 表示等份网格容器中的可用空间\n\n`track-name`: 表示网格之间网格线的名称\n\n式例:\n\n```css\n.content {\n  grid-template-columns: [line-start] 50px [line1-start] 20% [line2-start] 1fr [line-end];\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png)\n\n**当 auto 和 `fr` 同时存在的时候， 优先级： `auto` > `fr`, 这个时候 , 声明 `auto` 的那一列宽度为 0**\n\n#### grid-template-areas\n\n使用 `grid-template-areas` 用来定义网络模板；\n\n常用值:\n\n* `grid-area-name` : 由网格项的 `grid-area` 指定的网格区域名称\n* `.` 表示一个空的网格单元\n* `none` 表示不定义网格区域\n\n例如下面实现的一个网页布局:\n\n```html\n<div class=\"content\">\n  <div class=\"header\"></div>\n  <div class=\"menu\"></div>\n  <div class=\"body\"></div>\n  <div class=\"footer\"></div>\n</div>\n```\n\n```css\n.content {\n  width: 400px;\n  height: 300px;\n  display: grid;\n  grid-template-columns: repeat(1fr);\n  grid-template-rows: repeat(1fr);\n  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的\n  grid-template-areas: \n    \"h h h h\"\n    \"m . b b\"\n    \"f f f f\";\n}\n.header {\n  grid-area: h;\n  background-color: lightcoral;\n}\n.menu {\n  grid-area: m;\n  background-color: lightblue\n}\n.body {\n  grid-area: b;\n  background-color: lightslategray\n}\n.footer {\n  grid-area: f;\n  background-color: lightseagreen;\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png)","slug":"grid-布局（一）","published":1,"updated":"2020-09-14T06:36:25.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6f001bi2osh7tvsf1a","content":"<p><code>grid</code> 布局是一种方便的用于创建网格布局的强大工具， 使用<code>grid</code> 布局可以很方便的构建网页结构， 本篇文章主要介绍<code>grid</code> 布局的基础知识。</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><p>使用 <code>grid</code> 布局实现一个九宫格:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item9\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的九宫格如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png\" alt></p>\n<h4 id=\"display-grid\"><a href=\"#display-grid\" class=\"headerlink\" title=\"display: grid\"></a>display: grid</h4><p>使用 <code>display: grid</code> 的目的是用于声明当前元素使用 <code>grid</code> 布局构建;</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid</code>: 生成一个块状网格</li>\n<li><code>inline-grid</code>: 生成一个内联网格</li>\n<li><code>subgrid</code>: 表示当前的网格容器继承自父级元素的网格容器</li>\n</ul>\n<h4 id=\"grid-template-columns-grid-template-rows\"><a href=\"#grid-template-columns-grid-template-rows\" class=\"headerlink\" title=\"grid-template-columns,  grid-template-rows\"></a>grid-template-columns,  grid-template-rows</h4><p>这两个属性用于在声明 <code>grid</code> 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。</p>\n<p><code>grid-template-columns</code> : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;</p>\n<p><code>grid-template-row</code>: 使用效果类似于 <code>grid-template-columns</code>, 是对于 <code>grid</code> 元素行的划分。比如上面的代码中表示将 <code>grid</code> 元素划分为三行， 并且三行的高度均为 <code>100px</code>;</p>\n<p>常用值:</p>\n<ul>\n<li><code>&lt;track-name&gt;&lt;track-size&gt;&lt;track-name&gt;&lt;track-size&gt;...</code></li>\n</ul>\n<p><code>track-size</code>: 表示网格内容的宽度，可取值:</p>\n<ul>\n<li><code>percentage</code> </li>\n<li><code>数值</code></li>\n<li><code>auto</code>: 网格宽度的剩余空间</li>\n<li><code>fr</code>: 表示等份网格容器中的可用空间</li>\n</ul>\n<p><code>track-name</code>: 表示网格之间网格线的名称</p>\n<p>式例:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [line-start] <span class=\"number\">50px</span> [line1-start] <span class=\"number\">20%</span> [line2-start] <span class=\"number\">1</span>fr [line-end];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png\" alt></p>\n<p><strong>当 auto 和 <code>fr</code> 同时存在的时候， 优先级： <code>auto</code> &gt; <code>fr</code>, 这个时候 , 声明 <code>auto</code> 的那一列宽度为 0</strong></p>\n<h4 id=\"grid-template-areas\"><a href=\"#grid-template-areas\" class=\"headerlink\" title=\"grid-template-areas\"></a>grid-template-areas</h4><p>使用 <code>grid-template-areas</code> 用来定义网络模板；</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid-area-name</code> : 由网格项的 <code>grid-area</code> 指定的网格区域名称</li>\n<li><code>.</code> 表示一个空的网格单元</li>\n<li><code>none</code> 表示不定义网格区域</li>\n</ul>\n<p>例如下面实现的一个网页布局:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>fr);</span><br><span class=\"line\">  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的</span><br><span class=\"line\">  <span class=\"selector-tag\">grid-template-areas</span>: </span><br><span class=\"line\">    \"<span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">m</span> . <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">b</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span>\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: h;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: m;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: b;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightslategray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: f;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>grid</code> 布局是一种方便的用于创建网格布局的强大工具， 使用<code>grid</code> 布局可以很方便的构建网页结构， 本篇文章主要介绍<code>grid</code> 布局的基础知识。</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><p>使用 <code>grid</code> 布局实现一个九宫格:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item9\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的九宫格如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png\" alt></p>\n<h4 id=\"display-grid\"><a href=\"#display-grid\" class=\"headerlink\" title=\"display: grid\"></a>display: grid</h4><p>使用 <code>display: grid</code> 的目的是用于声明当前元素使用 <code>grid</code> 布局构建;</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid</code>: 生成一个块状网格</li>\n<li><code>inline-grid</code>: 生成一个内联网格</li>\n<li><code>subgrid</code>: 表示当前的网格容器继承自父级元素的网格容器</li>\n</ul>\n<h4 id=\"grid-template-columns-grid-template-rows\"><a href=\"#grid-template-columns-grid-template-rows\" class=\"headerlink\" title=\"grid-template-columns,  grid-template-rows\"></a>grid-template-columns,  grid-template-rows</h4><p>这两个属性用于在声明 <code>grid</code> 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。</p>\n<p><code>grid-template-columns</code> : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;</p>\n<p><code>grid-template-row</code>: 使用效果类似于 <code>grid-template-columns</code>, 是对于 <code>grid</code> 元素行的划分。比如上面的代码中表示将 <code>grid</code> 元素划分为三行， 并且三行的高度均为 <code>100px</code>;</p>\n<p>常用值:</p>\n<ul>\n<li><code>&lt;track-name&gt;&lt;track-size&gt;&lt;track-name&gt;&lt;track-size&gt;...</code></li>\n</ul>\n<p><code>track-size</code>: 表示网格内容的宽度，可取值:</p>\n<ul>\n<li><code>percentage</code> </li>\n<li><code>数值</code></li>\n<li><code>auto</code>: 网格宽度的剩余空间</li>\n<li><code>fr</code>: 表示等份网格容器中的可用空间</li>\n</ul>\n<p><code>track-name</code>: 表示网格之间网格线的名称</p>\n<p>式例:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [line-start] <span class=\"number\">50px</span> [line1-start] <span class=\"number\">20%</span> [line2-start] <span class=\"number\">1</span>fr [line-end];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png\" alt></p>\n<p><strong>当 auto 和 <code>fr</code> 同时存在的时候， 优先级： <code>auto</code> &gt; <code>fr</code>, 这个时候 , 声明 <code>auto</code> 的那一列宽度为 0</strong></p>\n<h4 id=\"grid-template-areas\"><a href=\"#grid-template-areas\" class=\"headerlink\" title=\"grid-template-areas\"></a>grid-template-areas</h4><p>使用 <code>grid-template-areas</code> 用来定义网络模板；</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid-area-name</code> : 由网格项的 <code>grid-area</code> 指定的网格区域名称</li>\n<li><code>.</code> 表示一个空的网格单元</li>\n<li><code>none</code> 表示不定义网格区域</li>\n</ul>\n<p>例如下面实现的一个网页布局:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>fr);</span><br><span class=\"line\">  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的</span><br><span class=\"line\">  <span class=\"selector-tag\">grid-template-areas</span>: </span><br><span class=\"line\">    \"<span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">m</span> . <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">b</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span>\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: h;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: m;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: b;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightslategray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: f;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png\" alt></p>\n"},{"title":"my first blog","date":"2017-08-18T13:50:01.000Z","_content":"这是我的第一篇博客:\n折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  \n\n为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。\n\n千里之行，始于足下\n\n ```\n\n ```","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2017-08-18 21:50:01\ntags: '0'\n---\n这是我的第一篇博客:\n折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  \n\n为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。\n\n千里之行，始于足下\n\n ```\n\n ```","slug":"my-first-blog","published":1,"updated":"2020-09-14T06:36:25.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6i001di2osfxw633gj","content":"<p>这是我的第一篇博客:<br>折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  </p>\n<p>为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。</p>\n<p>千里之行，始于足下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>这是我的第一篇博客:<br>折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  </p>\n<p>为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。</p>\n<p>千里之行，始于足下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"node 中的 events 模块学习","date":"2019-09-08T03:32:30.000Z","_content":"\n[events 模块](https://link.zhihu.com/?target=https%3A//github.com/nodejs/node/blob/master/lib/events.js)\n\n模仿 events 模块的一些代码， 基本实现原 events 模块的一些功能：\n\n```js\n\nfunction cloneArray(list, n, fn) {\n  let clonedArr = new Array(n);\n  for (let index = 0; index < n; index++) {\n    clonedArr[index] = fn ? fn(list[index]) : list[index];\n  }\n  return clonedArr;\n}\n\nfunction clonelisteners(list, hasWrap) {\n  return cloneArray(list, list.length, (listener) => {\n    return hasWrap ? listener : (listener.listener || listener);\n  });\n}\n\nfunction getListeners(target, type, hasWrap) {\n  const listenerList = target.events[type];\n  if (typeof listenerList === 'function') {\n    return hasWrap ? [listenerList] : [listenerList.listener || listenerList];\n  } else {\n    return clonelisteners(listenerList, hasWrap);\n  }\n}\n\n\nclass EventEmitter {\n  constructor() {\n    this.maxListeners;\n    this.defaultMaxlisteners = 10;\n    this.events = undefined;\n    this.eventsCount = 0;\n    this.init();\n  }\n  init() {\n    this.maxListeners = this.maxListeners || this.defaultMaxlisteners;\n    this.events = Object.create(null);\n  }\n  checkListener(listener) {\n    if (typeof listener !== 'function') throw new Error('listener is not function type');\n  }\n  listenerCount(emitter, type) {\n    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);\n    function listenerCount(type) {\n      const events = this.events;\n      if (events === undefined) return 0;\n      const eventList = this.events[type];\n      if (typeof eventList === 'function') return 1;\n      if (eventList) {\n        return eventList.length;\n      } else return 0; \n    };\n    listenerCount.call(emitter, type);\n  }\n  prependListener(type, listener) {\n    this.addListeners(type, listener, true);\n  }\n  prependOnceListener(type, listener) {\n    this.once(type, listener, true);\n  }\n  addListeners(type, listener, prepend) {\n    this.checkListener(listener);\n    if (this.events) {\n      if (this.events.newListener) this.emit('newListener', listener.listener || listener);\n    }\n    const existlistener = this.events[type];\n    if (typeof existlistener === 'function') {\n      this.events[type] = prepend ? [listener, existlistener] : [existlistener, listener];\n    } else if (typeof existlistener === 'undefined') {\n      this.events[type] = listener;\n      this.eventsCount ++;\n    } else if (prepend) {\n      this.events[type].unshift(listener);\n    } else {\n      this.events[type].push(listener);        \n    }\n    let maxlistenerLength = this.getMaxlisteners();\n    if (this.events[type].length > maxlistenerLength) {\n      let w = new Error('memory leak');\n      process.emitWarning(w);\n    }\n    return this;\n  }\n  on() {\n    this.addListeners(...arguments);\n  }\n  off() {\n    this.removeListener(...arguments);\n  }\n  once(type, listener, prepend) {\n    this.checkListener(listener);\n    function wrapFn () {\n      if (!this.fired) {\n        this.fired = true;\n        this.emitter.removeListener(type, this.wraplistenerFn);\n        this.listener.apply(this.emitter, arguments);\n      }\n    }\n    const listenerWrapStates = { fired: false, listener, wraplistenerFn: undefined, emitter: this };\n    const wrapedlistener = wrapFn.bind(listenerWrapStates);\n    wrapedlistener.listener = listener;\n    listenerWrapStates.wraplistenerFn = wrapedlistener;\n    this.on(type, wrapedlistener, prepend);\n  }\n  emit(type, ...args) {\n    const existlistener = this.events[type];\n    if (existlistener === undefined) return false;\n    if (typeof existlistener !== 'function') {\n      const existList = cloneArray(existlistener, existlistener.length);\n      existList.forEach(listener => {\n        listener.apply(this, args);\n      });\n    } else {\n      existlistener.apply(this, args);\n    }\n  }\n  removeAlllisteners(type) {\n    const listenerList = this.events[type];\n    const isRemoveAllEvens = arguments.length === 0;\n    if (this.events === undefined) return this;\n    // 移除全部的 listernr\n    if (this.events.removeListener === undefined) {\n      if (isRemoveAllEvens) {\n        this.events = Object.create(null);\n        this.eventsCount = 0;\n      } else {\n        if (listenerList) {\n          delete this.events[type];\n          this.eventsCount --;\n          if (this.eventsCount === 0) this.events = Object.create(null);\n        } \n      }\n      return this;\n    } else {\n      if (isRemoveAllEvens) {\n        for (const key of this.events) {\n          if (key === 'removeListener') continue;\n          this.removeAlllisteners(key);\n        }\n        this.removeAlllisteners('removeListener');\n        this.eventsCount = 0;\n        this.events = Object.create(null);\n        return this;\n      }\n    }\n    if (typeof listenerList === 'function') {\n      this.removeListener(type, listenerList);\n    } else if (listenerList) {\n      listenerList.forEach(listener => {\n        this.removeListener(type, listener);\n      });\n    }\n    return this;\n  }\n  setMaxlisteners(num) {\n    if (typeof num !== 'number' || num < 0 || Number.isNaN(num)) throw new Error('listernrs length is a number');\n    this.maxListeners = num;\n    return this;\n  }\n  getMaxlisteners() {\n    return this.maxListeners;\n  }\n  eventNames() {\n    if (this.events === undefined || this.eventsCount === 0) return [];\n    return Object.keys(this.events);\n  }\n  rawListeners(type) {\n    const eventList = this.events[type];\n    if (eventList === undefined) return [];\n    return getListeners(this, type, true);\n  }\n  listeners(type) {\n    const eventList = this.events[type];\n    if (eventList === undefined) return [];\n    return getListeners(this, type, false);\n  }\n  removeListener(type, listener) {\n    this.checkListener(listener);\n    const eventListeners = this.events[type];\n    if (eventListeners === undefined) return this;\n    if (typeof eventListeners === 'function') {\n      if (eventListeners === listener || eventListeners.listener === listener) {\n        this.eventsCount --;\n        if (this.eventsCount === 0) {\n          this.events = Object.create(null);\n        } else {\n          delete this.events[type];\n          if (this.events.removeListener) {\n            this.emit('removeListener', type, eventListeners || eventListeners.listener);\n          }\n        }\n      }\n    // 当存放的事件是一个数组的时候\n    } else {\n      let handlerIndex = -1;\n      let originlistener;\n      for (let i = 0; i < eventListeners.length; i ++) {\n        if (eventListeners[i] === listener || eventListeners[i].listener === listener) {\n          handlerIndex = i;\n          originlistener = eventListeners[i].listener;\n          break;\n        }\n      }\n      if (handlerIndex < 0) return this;\n      if (handlerIndex === 0) {\n        eventListeners.shift();\n      } else {\n        const spliceOne = function (list, index) {\n          list.splice(index, 1);\n        };\n        spliceOne(eventListeners, handlerIndex);\n      }\n      if (eventListeners.length === 1) this.events[type] = eventListeners[0];\n      if (this.events.removeListener) this.emit(this.removeListener, type, originlistener || listener); \n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n```\n\n","source":"_posts/event Emitter.md","raw":"---\ntitle: node 中的 events 模块学习\ndate: 2019-09-08 11:32:30\ntags: node \ncategories: node module\n---\n\n[events 模块](https://link.zhihu.com/?target=https%3A//github.com/nodejs/node/blob/master/lib/events.js)\n\n模仿 events 模块的一些代码， 基本实现原 events 模块的一些功能：\n\n```js\n\nfunction cloneArray(list, n, fn) {\n  let clonedArr = new Array(n);\n  for (let index = 0; index < n; index++) {\n    clonedArr[index] = fn ? fn(list[index]) : list[index];\n  }\n  return clonedArr;\n}\n\nfunction clonelisteners(list, hasWrap) {\n  return cloneArray(list, list.length, (listener) => {\n    return hasWrap ? listener : (listener.listener || listener);\n  });\n}\n\nfunction getListeners(target, type, hasWrap) {\n  const listenerList = target.events[type];\n  if (typeof listenerList === 'function') {\n    return hasWrap ? [listenerList] : [listenerList.listener || listenerList];\n  } else {\n    return clonelisteners(listenerList, hasWrap);\n  }\n}\n\n\nclass EventEmitter {\n  constructor() {\n    this.maxListeners;\n    this.defaultMaxlisteners = 10;\n    this.events = undefined;\n    this.eventsCount = 0;\n    this.init();\n  }\n  init() {\n    this.maxListeners = this.maxListeners || this.defaultMaxlisteners;\n    this.events = Object.create(null);\n  }\n  checkListener(listener) {\n    if (typeof listener !== 'function') throw new Error('listener is not function type');\n  }\n  listenerCount(emitter, type) {\n    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);\n    function listenerCount(type) {\n      const events = this.events;\n      if (events === undefined) return 0;\n      const eventList = this.events[type];\n      if (typeof eventList === 'function') return 1;\n      if (eventList) {\n        return eventList.length;\n      } else return 0; \n    };\n    listenerCount.call(emitter, type);\n  }\n  prependListener(type, listener) {\n    this.addListeners(type, listener, true);\n  }\n  prependOnceListener(type, listener) {\n    this.once(type, listener, true);\n  }\n  addListeners(type, listener, prepend) {\n    this.checkListener(listener);\n    if (this.events) {\n      if (this.events.newListener) this.emit('newListener', listener.listener || listener);\n    }\n    const existlistener = this.events[type];\n    if (typeof existlistener === 'function') {\n      this.events[type] = prepend ? [listener, existlistener] : [existlistener, listener];\n    } else if (typeof existlistener === 'undefined') {\n      this.events[type] = listener;\n      this.eventsCount ++;\n    } else if (prepend) {\n      this.events[type].unshift(listener);\n    } else {\n      this.events[type].push(listener);        \n    }\n    let maxlistenerLength = this.getMaxlisteners();\n    if (this.events[type].length > maxlistenerLength) {\n      let w = new Error('memory leak');\n      process.emitWarning(w);\n    }\n    return this;\n  }\n  on() {\n    this.addListeners(...arguments);\n  }\n  off() {\n    this.removeListener(...arguments);\n  }\n  once(type, listener, prepend) {\n    this.checkListener(listener);\n    function wrapFn () {\n      if (!this.fired) {\n        this.fired = true;\n        this.emitter.removeListener(type, this.wraplistenerFn);\n        this.listener.apply(this.emitter, arguments);\n      }\n    }\n    const listenerWrapStates = { fired: false, listener, wraplistenerFn: undefined, emitter: this };\n    const wrapedlistener = wrapFn.bind(listenerWrapStates);\n    wrapedlistener.listener = listener;\n    listenerWrapStates.wraplistenerFn = wrapedlistener;\n    this.on(type, wrapedlistener, prepend);\n  }\n  emit(type, ...args) {\n    const existlistener = this.events[type];\n    if (existlistener === undefined) return false;\n    if (typeof existlistener !== 'function') {\n      const existList = cloneArray(existlistener, existlistener.length);\n      existList.forEach(listener => {\n        listener.apply(this, args);\n      });\n    } else {\n      existlistener.apply(this, args);\n    }\n  }\n  removeAlllisteners(type) {\n    const listenerList = this.events[type];\n    const isRemoveAllEvens = arguments.length === 0;\n    if (this.events === undefined) return this;\n    // 移除全部的 listernr\n    if (this.events.removeListener === undefined) {\n      if (isRemoveAllEvens) {\n        this.events = Object.create(null);\n        this.eventsCount = 0;\n      } else {\n        if (listenerList) {\n          delete this.events[type];\n          this.eventsCount --;\n          if (this.eventsCount === 0) this.events = Object.create(null);\n        } \n      }\n      return this;\n    } else {\n      if (isRemoveAllEvens) {\n        for (const key of this.events) {\n          if (key === 'removeListener') continue;\n          this.removeAlllisteners(key);\n        }\n        this.removeAlllisteners('removeListener');\n        this.eventsCount = 0;\n        this.events = Object.create(null);\n        return this;\n      }\n    }\n    if (typeof listenerList === 'function') {\n      this.removeListener(type, listenerList);\n    } else if (listenerList) {\n      listenerList.forEach(listener => {\n        this.removeListener(type, listener);\n      });\n    }\n    return this;\n  }\n  setMaxlisteners(num) {\n    if (typeof num !== 'number' || num < 0 || Number.isNaN(num)) throw new Error('listernrs length is a number');\n    this.maxListeners = num;\n    return this;\n  }\n  getMaxlisteners() {\n    return this.maxListeners;\n  }\n  eventNames() {\n    if (this.events === undefined || this.eventsCount === 0) return [];\n    return Object.keys(this.events);\n  }\n  rawListeners(type) {\n    const eventList = this.events[type];\n    if (eventList === undefined) return [];\n    return getListeners(this, type, true);\n  }\n  listeners(type) {\n    const eventList = this.events[type];\n    if (eventList === undefined) return [];\n    return getListeners(this, type, false);\n  }\n  removeListener(type, listener) {\n    this.checkListener(listener);\n    const eventListeners = this.events[type];\n    if (eventListeners === undefined) return this;\n    if (typeof eventListeners === 'function') {\n      if (eventListeners === listener || eventListeners.listener === listener) {\n        this.eventsCount --;\n        if (this.eventsCount === 0) {\n          this.events = Object.create(null);\n        } else {\n          delete this.events[type];\n          if (this.events.removeListener) {\n            this.emit('removeListener', type, eventListeners || eventListeners.listener);\n          }\n        }\n      }\n    // 当存放的事件是一个数组的时候\n    } else {\n      let handlerIndex = -1;\n      let originlistener;\n      for (let i = 0; i < eventListeners.length; i ++) {\n        if (eventListeners[i] === listener || eventListeners[i].listener === listener) {\n          handlerIndex = i;\n          originlistener = eventListeners[i].listener;\n          break;\n        }\n      }\n      if (handlerIndex < 0) return this;\n      if (handlerIndex === 0) {\n        eventListeners.shift();\n      } else {\n        const spliceOne = function (list, index) {\n          list.splice(index, 1);\n        };\n        spliceOne(eventListeners, handlerIndex);\n      }\n      if (eventListeners.length === 1) this.events[type] = eventListeners[0];\n      if (this.events.removeListener) this.emit(this.removeListener, type, originlistener || listener); \n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n```\n\n","slug":"event Emitter","published":1,"updated":"2020-09-14T06:36:25.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6k001hi2osz0mqiyhw","content":"<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nodejs/node/blob/master/lib/events.js\" target=\"_blank\" rel=\"noopener\">events 模块</a></p>\n<p>模仿 events 模块的一些代码， 基本实现原 events 模块的一些功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneArray</span>(<span class=\"params\">list, n, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clonedArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; n; index++) &#123;</span><br><span class=\"line\">    clonedArr[index] = fn ? fn(list[index]) : list[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clonedArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clonelisteners</span>(<span class=\"params\">list, hasWrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneArray(list, list.length, (listener) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasWrap ? listener : (listener.listener || listener);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getListeners</span>(<span class=\"params\">target, type, hasWrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listenerList = target.events[type];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listenerList === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasWrap ? [listenerList] : [listenerList.listener || listenerList];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clonelisteners(listenerList, hasWrap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.defaultMaxlisteners = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners = <span class=\"keyword\">this</span>.maxListeners || <span class=\"keyword\">this</span>.defaultMaxlisteners;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkListener(listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listener is not function type'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  listenerCount(emitter, type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> emitter.listenerCount === <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> emitter.listenerCount(type);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenerCount</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> events = <span class=\"keyword\">this</span>.events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> eventList === <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventList) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eventList.length;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    listenerCount.call(emitter, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prependListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListeners(type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prependOnceListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.once(type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addListeners(type, listener, prepend) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.newListener) <span class=\"keyword\">this</span>.emit(<span class=\"string\">'newListener'</span>, listener.listener || listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> existlistener = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type] = prepend ? [listener, existlistener] : [existlistener, listener];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type] = listener;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.eventsCount ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prepend) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type].unshift(listener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type].push(listener);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxlistenerLength = <span class=\"keyword\">this</span>.getMaxlisteners();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events[type].length &gt; maxlistenerLength) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'memory leak'</span>);</span><br><span class=\"line\">      process.emitWarning(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  on() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListeners(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  off() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeListener(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  once(type, listener, prepend) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fired) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitter.removeListener(type, <span class=\"keyword\">this</span>.wraplistenerFn);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listener.apply(<span class=\"keyword\">this</span>.emitter, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listenerWrapStates = &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>, listener, <span class=\"attr\">wraplistenerFn</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">emitter</span>: <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapedlistener = wrapFn.bind(listenerWrapStates);</span><br><span class=\"line\">    wrapedlistener.listener = listener;</span><br><span class=\"line\">    listenerWrapStates.wraplistenerFn = wrapedlistener;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on(type, wrapedlistener, prepend);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  emit(type, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> existlistener = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existlistener === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> existList = cloneArray(existlistener, existlistener.length);</span><br><span class=\"line\">      existList.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</span><br><span class=\"line\">        listener.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      existlistener.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeAlllisteners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listenerList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isRemoveAllEvens = <span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 移除全部的 listernr</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isRemoveAllEvens) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listenerList) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.eventsCount --;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isRemoveAllEvens) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.events) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeAlllisteners(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeAlllisteners(<span class=\"string\">'removeListener'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listenerList === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.removeListener(type, listenerList);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listenerList) &#123;</span><br><span class=\"line\">      listenerList.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(type, listener);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setMaxlisteners(num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">'number'</span> || num &lt; <span class=\"number\">0</span> || <span class=\"built_in\">Number</span>.isNaN(num)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listernrs length is a number'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners = num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getMaxlisteners() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.maxListeners;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eventNames() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events === <span class=\"literal\">undefined</span> || <span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.events);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  rawListeners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventList === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getListeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  listeners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventList === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getListeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventListeners = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventListeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> eventListeners === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventListeners === listener || eventListeners.listener === listener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount --;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, eventListeners || eventListeners.listener);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当存放的事件是一个数组的时候</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> originlistener;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; eventListeners.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eventListeners[i] === listener || eventListeners[i].listener === listener) &#123;</span><br><span class=\"line\">          handlerIndex = i;</span><br><span class=\"line\">          originlistener = eventListeners[i].listener;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handlerIndex &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handlerIndex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        eventListeners.shift();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> spliceOne = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list, index</span>) </span>&#123;</span><br><span class=\"line\">          list.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        spliceOne(eventListeners, handlerIndex);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventListeners.length === <span class=\"number\">1</span>) <span class=\"keyword\">this</span>.events[type] = eventListeners[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener) <span class=\"keyword\">this</span>.emit(<span class=\"keyword\">this</span>.removeListener, type, originlistener || listener); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = EventEmitter;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nodejs/node/blob/master/lib/events.js\" target=\"_blank\" rel=\"noopener\">events 模块</a></p>\n<p>模仿 events 模块的一些代码， 基本实现原 events 模块的一些功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneArray</span>(<span class=\"params\">list, n, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clonedArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; n; index++) &#123;</span><br><span class=\"line\">    clonedArr[index] = fn ? fn(list[index]) : list[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clonedArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clonelisteners</span>(<span class=\"params\">list, hasWrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneArray(list, list.length, (listener) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasWrap ? listener : (listener.listener || listener);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getListeners</span>(<span class=\"params\">target, type, hasWrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listenerList = target.events[type];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listenerList === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasWrap ? [listenerList] : [listenerList.listener || listenerList];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clonelisteners(listenerList, hasWrap);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.defaultMaxlisteners = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners = <span class=\"keyword\">this</span>.maxListeners || <span class=\"keyword\">this</span>.defaultMaxlisteners;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  checkListener(listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listener is not function type'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  listenerCount(emitter, type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> emitter.listenerCount === <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> emitter.listenerCount(type);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenerCount</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> events = <span class=\"keyword\">this</span>.events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> eventList === <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventList) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eventList.length;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    listenerCount.call(emitter, type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prependListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListeners(type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  prependOnceListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.once(type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addListeners(type, listener, prepend) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.newListener) <span class=\"keyword\">this</span>.emit(<span class=\"string\">'newListener'</span>, listener.listener || listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> existlistener = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type] = prepend ? [listener, existlistener] : [existlistener, listener];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type] = listener;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.eventsCount ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prepend) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type].unshift(listener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[type].push(listener);        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> maxlistenerLength = <span class=\"keyword\">this</span>.getMaxlisteners();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events[type].length &gt; maxlistenerLength) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'memory leak'</span>);</span><br><span class=\"line\">      process.emitWarning(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  on() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListeners(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  off() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeListener(...arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  once(type, listener, prepend) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fired) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emitter.removeListener(type, <span class=\"keyword\">this</span>.wraplistenerFn);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listener.apply(<span class=\"keyword\">this</span>.emitter, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listenerWrapStates = &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>, listener, <span class=\"attr\">wraplistenerFn</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">emitter</span>: <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapedlistener = wrapFn.bind(listenerWrapStates);</span><br><span class=\"line\">    wrapedlistener.listener = listener;</span><br><span class=\"line\">    listenerWrapStates.wraplistenerFn = wrapedlistener;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on(type, wrapedlistener, prepend);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  emit(type, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> existlistener = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existlistener === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existlistener !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> existList = cloneArray(existlistener, existlistener.length);</span><br><span class=\"line\">      existList.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</span><br><span class=\"line\">        listener.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      existlistener.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeAlllisteners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listenerList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isRemoveAllEvens = <span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 移除全部的 listernr</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isRemoveAllEvens) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listenerList) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.eventsCount --;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isRemoveAllEvens) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.events) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeAlllisteners(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeAlllisteners(<span class=\"string\">'removeListener'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listenerList === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.removeListener(type, listenerList);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listenerList) &#123;</span><br><span class=\"line\">      listenerList.forEach(<span class=\"function\"><span class=\"params\">listener</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(type, listener);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setMaxlisteners(num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">'number'</span> || num &lt; <span class=\"number\">0</span> || <span class=\"built_in\">Number</span>.isNaN(num)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'listernrs length is a number'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxListeners = num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getMaxlisteners() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.maxListeners;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  eventNames() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events === <span class=\"literal\">undefined</span> || <span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.events);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  rawListeners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventList === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getListeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  listeners(type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventList = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventList === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getListeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  removeListener(type, listener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.checkListener(listener);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventListeners = <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventListeners === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> eventListeners === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventListeners === listener || eventListeners.listener === listener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eventsCount --;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eventsCount === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.events[type];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, eventListeners || eventListeners.listener);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当存放的事件是一个数组的时候</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> originlistener;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; eventListeners.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eventListeners[i] === listener || eventListeners[i].listener === listener) &#123;</span><br><span class=\"line\">          handlerIndex = i;</span><br><span class=\"line\">          originlistener = eventListeners[i].listener;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handlerIndex &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handlerIndex === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        eventListeners.shift();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> spliceOne = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list, index</span>) </span>&#123;</span><br><span class=\"line\">          list.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        spliceOne(eventListeners, handlerIndex);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (eventListeners.length === <span class=\"number\">1</span>) <span class=\"keyword\">this</span>.events[type] = eventListeners[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.events.removeListener) <span class=\"keyword\">this</span>.emit(<span class=\"keyword\">this</span>.removeListener, type, originlistener || listener); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = EventEmitter;</span><br></pre></td></tr></table></figure>\n"},{"title":"js 中数据结构的实现","date":"2018-01-13T13:48:58.000Z","_content":"\n对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。\n\n#### 单链表的实现\n\n实现单向链式列表的代码如下:\n\n```javascript\nfunction LinkedList() {\n  // 对于链表中的元素包含有 element 以及 next\n  // element 表示数据\n  // next 表示指向下一个的指针\n  let Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n  let length = 0, head = null;\n  // append 添加元素\n  this.append = function (element) {\n    let node = new Node(element), current;\n    if (!head) {\n      head = node;\n    } else {\n      current = node;\n      // 使用 while 进行循环操作\n      // 一直进行循环, current = current.next;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    length++;\n    return current;\n  };\n  // this.insert 用于插入节点\n  this.insert = function (position, element) {\n    if (position > 0 && position <= length) {\n      let node = new Node(element), currrent = head, previous, index = 0;\n      if (position === 0) {\n        node.next = current;\n        head = node;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        node.next = current;\n        previous.next = node;\n      };\n      length++;\n      return true;\n    } else {\n      return null;\n    }\n  };\n  // 删除某一个位置处的元素\n  this.removeAt = function (position) {\n    if (position > -1 && position < length) {\n      let current = head, previous, index = 0;\n      if (position === 0) {\n        head = currrent.next;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        // 在删除了某一个元素之后\n        // previous.next 指向 current.next\n        previous.next = current.next;\n      };\n      length--;\n      return current.element;\n    } else {\n      return null;\n    }\n  };\n  // 移除某一个节点\n  this.remove = function (element) {\n    let current = head, previous;\n    if (element === current.element) {\n      head = current.next;\n      length--;\n      return true;\n    }\n    previous = current;\n    current = current.next;\n    while(currrent) {\n      if (element === current.element) {\n        previous.next = current.next;\n        length--;\n        return true;\n      } else {\n       // 继续轮询下一个元素\n        previous = current;\n        current = current.next;\n      }\n    }\n    return false;\n  };\n  // this.remove 用于删除最后一个节点\n  this.remove = function () {\n    if (length < 1) {\n      return false;\n    }\n    let current = head, previous;\n    if (length === 1) {\n      head = null;\n      length--;\n      return current.length;\n    }\n    while(current.next !== null) {\n      previous = current;\n      current.current.next;\n    }\n    previous.next = null;\n    length--;\n    return current.element;\n  };\n  // indexOf 获取到索引值\n  this.indexOf = function (element) {\n    let current = head, index = 0;\n    while(current) {\n      if (element === current.element) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return false;\n  };\n  this.isEmpty = function () {\n    return length === 0;\n  };\n  this.size = function () {\n    return length;\n  };\n  this.toString = function () {\n    let current = head, str = '';\n    while(current) {\n      str+= current.element;\n      currrent = current.next;\n    }\n    return str;\n  }\n  this.getHead = function () {\n    return head;\n  }\n}\n```\n\n对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  \n\n对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中.....，如果要查找到这个元素，要使用下面的算法:\n\n1. 声明节点指向链表的第一个节点， 初始化 j 从 1 开始。\n2. 当 j < i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;\n3. 如果链表末尾为空， 那么说明第 i 个元素不存在。\n4. 如果查找成功的话，返回查找到的数据。\n\n对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:\n\n```javascript\nthis.getEle = function (elementIndex) {\n  let current = head, index = 0;\n  if (elementIndex > 0 && elementIndex <= length) {\n    // while 内嵌 current = current.next 方法， 从头开始查询\n    while(current) {\n      if (index === elementIndex) {\n        return current.element;\n      }\n      index++;\n      current = current.next;\n    }\n  } else {\n    return null;\n  }\n}\n```\n\n> 链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的\n\n实现一个对象链表的实现；\n\n```javascript\nfunction linkTable(array) {\n\tlet linkArray = [];\n\tconst getLinks = (now, index, arr) => {\n\t\tconst len = arr.length;\n\t\tlet pre = 0;\n        let next = 0;\n        pre = index - 1;\n        next = index + 1;\n        if (index === 0) {\n        \tpre = len - 1;\n        }\n        if (index === len - 1) {\n        \tnext = 0;\n        }\n        linkArray.push({\n            pre: arr[pre],\n            current: now,\n            next: arr[next]\n        });\n\t};\n\t\tarray.forEach((now, index, arr) => getLinks(now, index, arr));\n}\n```\n\n","source":"_posts/js-中数据结构的实现.md","raw":"---\ntitle: js 中数据结构的实现\ndate: 2018-01-13 21:48:58\ntags: js 链表\ncategories: 数据结构\n---\n\n对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。\n\n#### 单链表的实现\n\n实现单向链式列表的代码如下:\n\n```javascript\nfunction LinkedList() {\n  // 对于链表中的元素包含有 element 以及 next\n  // element 表示数据\n  // next 表示指向下一个的指针\n  let Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n  let length = 0, head = null;\n  // append 添加元素\n  this.append = function (element) {\n    let node = new Node(element), current;\n    if (!head) {\n      head = node;\n    } else {\n      current = node;\n      // 使用 while 进行循环操作\n      // 一直进行循环, current = current.next;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    length++;\n    return current;\n  };\n  // this.insert 用于插入节点\n  this.insert = function (position, element) {\n    if (position > 0 && position <= length) {\n      let node = new Node(element), currrent = head, previous, index = 0;\n      if (position === 0) {\n        node.next = current;\n        head = node;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        node.next = current;\n        previous.next = node;\n      };\n      length++;\n      return true;\n    } else {\n      return null;\n    }\n  };\n  // 删除某一个位置处的元素\n  this.removeAt = function (position) {\n    if (position > -1 && position < length) {\n      let current = head, previous, index = 0;\n      if (position === 0) {\n        head = currrent.next;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        // 在删除了某一个元素之后\n        // previous.next 指向 current.next\n        previous.next = current.next;\n      };\n      length--;\n      return current.element;\n    } else {\n      return null;\n    }\n  };\n  // 移除某一个节点\n  this.remove = function (element) {\n    let current = head, previous;\n    if (element === current.element) {\n      head = current.next;\n      length--;\n      return true;\n    }\n    previous = current;\n    current = current.next;\n    while(currrent) {\n      if (element === current.element) {\n        previous.next = current.next;\n        length--;\n        return true;\n      } else {\n       // 继续轮询下一个元素\n        previous = current;\n        current = current.next;\n      }\n    }\n    return false;\n  };\n  // this.remove 用于删除最后一个节点\n  this.remove = function () {\n    if (length < 1) {\n      return false;\n    }\n    let current = head, previous;\n    if (length === 1) {\n      head = null;\n      length--;\n      return current.length;\n    }\n    while(current.next !== null) {\n      previous = current;\n      current.current.next;\n    }\n    previous.next = null;\n    length--;\n    return current.element;\n  };\n  // indexOf 获取到索引值\n  this.indexOf = function (element) {\n    let current = head, index = 0;\n    while(current) {\n      if (element === current.element) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return false;\n  };\n  this.isEmpty = function () {\n    return length === 0;\n  };\n  this.size = function () {\n    return length;\n  };\n  this.toString = function () {\n    let current = head, str = '';\n    while(current) {\n      str+= current.element;\n      currrent = current.next;\n    }\n    return str;\n  }\n  this.getHead = function () {\n    return head;\n  }\n}\n```\n\n对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  \n\n对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中.....，如果要查找到这个元素，要使用下面的算法:\n\n1. 声明节点指向链表的第一个节点， 初始化 j 从 1 开始。\n2. 当 j < i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;\n3. 如果链表末尾为空， 那么说明第 i 个元素不存在。\n4. 如果查找成功的话，返回查找到的数据。\n\n对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:\n\n```javascript\nthis.getEle = function (elementIndex) {\n  let current = head, index = 0;\n  if (elementIndex > 0 && elementIndex <= length) {\n    // while 内嵌 current = current.next 方法， 从头开始查询\n    while(current) {\n      if (index === elementIndex) {\n        return current.element;\n      }\n      index++;\n      current = current.next;\n    }\n  } else {\n    return null;\n  }\n}\n```\n\n> 链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的\n\n实现一个对象链表的实现；\n\n```javascript\nfunction linkTable(array) {\n\tlet linkArray = [];\n\tconst getLinks = (now, index, arr) => {\n\t\tconst len = arr.length;\n\t\tlet pre = 0;\n        let next = 0;\n        pre = index - 1;\n        next = index + 1;\n        if (index === 0) {\n        \tpre = len - 1;\n        }\n        if (index === len - 1) {\n        \tnext = 0;\n        }\n        linkArray.push({\n            pre: arr[pre],\n            current: now,\n            next: arr[next]\n        });\n\t};\n\t\tarray.forEach((now, index, arr) => getLinks(now, index, arr));\n}\n```\n\n","slug":"js-中数据结构的实现","published":1,"updated":"2020-09-14T06:36:25.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6n001ji2osdp2dz91s","content":"<p>对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。</p>\n<h4 id=\"单链表的实现\"><a href=\"#单链表的实现\" class=\"headerlink\" title=\"单链表的实现\"></a>单链表的实现</h4><p>实现单向链式列表的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于链表中的元素包含有 element 以及 next</span></span><br><span class=\"line\">  <span class=\"comment\">// element 表示数据</span></span><br><span class=\"line\">  <span class=\"comment\">// next 表示指向下一个的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> Node = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">0</span>, head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// append 添加元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), current;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = node;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 while 进行循环操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 一直进行循环, current = current.next;</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      current.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.insert 用于插入节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), currrent = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        head = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ &lt; position) &#123;</span><br><span class=\"line\">          previous = current;</span><br><span class=\"line\">          current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        previous.next = node;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      length++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 删除某一个位置处的元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeAt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">-1</span> &amp;&amp; position &lt; length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> current = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        head = currrent.next;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ &lt; position) &#123;</span><br><span class=\"line\">          previous = current;</span><br><span class=\"line\">          current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在删除了某一个元素之后</span></span><br><span class=\"line\">        <span class=\"comment\">// previous.next 指向 current.next</span></span><br><span class=\"line\">        previous.next = current.next;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 移除某一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, previous;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">      head = current.next;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previous = current;</span><br><span class=\"line\">    current = current.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(currrent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">        previous.next = current.next;</span><br><span class=\"line\">        length--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 继续轮询下一个元素</span></span><br><span class=\"line\">        previous = current;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.remove 用于删除最后一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, previous;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> current.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      previous = current;</span><br><span class=\"line\">      current.current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previous.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// indexOf 获取到索引值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, str = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      str+= current.element;</span><br><span class=\"line\">      currrent = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getHead = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  </p>\n<p>对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中…..，如果要查找到这个元素，要使用下面的算法:</p>\n<ol>\n<li>声明节点指向链表的第一个节点， 初始化 j 从 1 开始。</li>\n<li>当 j &lt; i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;</li>\n<li>如果链表末尾为空， 那么说明第 i 个元素不存在。</li>\n<li>如果查找成功的话，返回查找到的数据。</li>\n</ol>\n<p>对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getEle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elementIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementIndex &gt; <span class=\"number\">0</span> &amp;&amp; elementIndex &lt;= length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// while 内嵌 current = current.next 方法， 从头开始查询</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === elementIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的</p>\n</blockquote>\n<p>实现一个对象链表的实现；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkTable</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> linkArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> getLinks = <span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pre = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        next = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \tpre = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \tnext = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        linkArray.push(&#123;</span><br><span class=\"line\">            pre: arr[pre],</span><br><span class=\"line\">            current: now,</span><br><span class=\"line\">            next: arr[next]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t\tarray.forEach(<span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> getLinks(now, index, arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。</p>\n<h4 id=\"单链表的实现\"><a href=\"#单链表的实现\" class=\"headerlink\" title=\"单链表的实现\"></a>单链表的实现</h4><p>实现单向链式列表的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于链表中的元素包含有 element 以及 next</span></span><br><span class=\"line\">  <span class=\"comment\">// element 表示数据</span></span><br><span class=\"line\">  <span class=\"comment\">// next 表示指向下一个的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> Node = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">0</span>, head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// append 添加元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), current;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = node;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 while 进行循环操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 一直进行循环, current = current.next;</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      current.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.insert 用于插入节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), currrent = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        head = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ &lt; position) &#123;</span><br><span class=\"line\">          previous = current;</span><br><span class=\"line\">          current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        previous.next = node;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      length++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 删除某一个位置处的元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeAt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">-1</span> &amp;&amp; position &lt; length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> current = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        head = currrent.next;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ &lt; position) &#123;</span><br><span class=\"line\">          previous = current;</span><br><span class=\"line\">          current = current.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在删除了某一个元素之后</span></span><br><span class=\"line\">        <span class=\"comment\">// previous.next 指向 current.next</span></span><br><span class=\"line\">        previous.next = current.next;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 移除某一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, previous;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">      head = current.next;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previous = current;</span><br><span class=\"line\">    current = current.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(currrent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">        previous.next = current.next;</span><br><span class=\"line\">        length--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 继续轮询下一个元素</span></span><br><span class=\"line\">        previous = current;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.remove 用于删除最后一个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, previous;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      length--;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> current.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current.next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      previous = current;</span><br><span class=\"line\">      current.current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    previous.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// indexOf 获取到索引值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (element === current.element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = head, str = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      str+= current.element;</span><br><span class=\"line\">      currrent = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getHead = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  </p>\n<p>对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中…..，如果要查找到这个元素，要使用下面的算法:</p>\n<ol>\n<li>声明节点指向链表的第一个节点， 初始化 j 从 1 开始。</li>\n<li>当 j &lt; i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;</li>\n<li>如果链表末尾为空， 那么说明第 i 个元素不存在。</li>\n<li>如果查找成功的话，返回查找到的数据。</li>\n</ol>\n<p>对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getEle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elementIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementIndex &gt; <span class=\"number\">0</span> &amp;&amp; elementIndex &lt;= length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// while 内嵌 current = current.next 方法， 从头开始查询</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === elementIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的</p>\n</blockquote>\n<p>实现一个对象链表的实现；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkTable</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> linkArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> getLinks = <span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pre = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        next = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \tpre = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \tnext = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        linkArray.push(&#123;</span><br><span class=\"line\">            pre: arr[pre],</span><br><span class=\"line\">            current: now,</span><br><span class=\"line\">            next: arr[next]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t\tarray.forEach(<span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> getLinks(now, index, arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js-Worker","date":"2019-10-27T11:27:07.000Z","_content":"\n## What is the worker\n\n浏览器是多线程的， 在浏览器中，存在下面几个线程：\n\n* 浏览器事件触发线程\n* UI 渲染线程\n* JS 引擎线程\n* 定时触发器线程\n* http 请求线程\n\njs 语言的一个重要特征是单线程，因为在js 中会设计到一些页面交互的逻辑， 比如操作 dom 树， css 样式树等， 单线程的设计避免了复杂的同步问题。\n\n因为在 js 中我们是可以进行 dom 操作的， 因此 UI 渲染线程和 js 引擎线程是互斥的，如果我们在页面上要进行一些耗时较大的 js 逻辑计算的时候， 页面可能会出现卡顿现象。\n\n为了利用多核 CPU 的计算能力，在 HTML5 中引入的工作线程使得浏览器端的 JavaScript 引擎可以并发地执行 JavaScript 代码，但是引入的工作线程并没有改变 js 单线程的本质， 因为子线程完全受主线程控制， 并且不能操作dom。\n\n工作线程的一些特点：\n\n* 工作线程内不能操作 dom，或者使用 window 对象下的一些属性和方法\n\n* 工作线程和主线程之间通过消息传递系统实现，消息之间传递的数据是复制而不是共享一个存储空间（深复制和浅复制）\n\n  > both sides send their messages using the `postMessage()` method, and respond to messages via the `onmessage` event handler (the message is contained within the `Message` event's `data` property). The data is copied rather than shared.\n\n## How to create worker\n\n一个 Worker 的创建是通过js 中的构造函数： `Worker()` 来实现的：\n\n```js\nvar myWorker = new Worker(aURL, options);\n```\n\n具体看 [worker](<https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker>)\n\n当我们创建一个 worker 的时候， 我们需要手动创建一个 js 文件，这种方式过于死板， 我们希望我们能直接指定在 worker 中运行的代码，而不需要创建多余的文件， 那有没有可能我们直接传入一个方法呢？\n\n比如如下代码，我们对于函数代码进行了四次转换，从而实现将一个普通函数转换为 webWroker:\n\n```js\nfunction createWorker(workerFn) {\n  const url = URL.createObjectURL(new Blob([`(${workerFn.toString ()})()`]));\n  const worker = new Worker(url);\n  let promiseResolve;\n  worker.onmessage = (msg) => {\n    promiseResolve(msg);\n  }\n  return (message) => {\n    return new Promise(resolve => {\n      promiseResolve = resolve;\n      worker.postMessage(message);\n    });\n  }\n}\n\nconst fn = () => {\n  onmessage = (msg) => {\n    console.log(`resceive message`, msg.data);\n    postMessage('hello');\n  }\n}\n\nconst worker = createWorker(fn);\n\nworker('send message').then(msg => {\n  console.log('msg', msg.data);\n});\n```\n\n上面代码实现了在不额外创建文件的情况下，实现创建 worker 代码的过程\n\n如下是上面代码普通函数到 worker 的四种转换过程：\n\n![img](js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg)\n\n{% asset_img v2-5887674cb213a45bef388a2f580da222_hd.jpg %}\n\n在上面的代码中，我们需要理解的是：\n\n```js\nURL.createObjectURL(new Blob([`(${workerFn.toString ()})()`]));\n```\n\n1. `Function.toString()` 方法可以将函数转换为代码字符串,例如上面的代码中， 执行完成\n\n   `toString` 方法之后：\n\n\n\n   ```\n   // workerFn.toString ()\n   () => {\n     onmessage = (msg) => {\n       console.log(`resceive message`, msg.data);\n       postMessage('hello');\n     }\n   }\n   ```\n\n   > The **toString()** method returns a string representing the source code of the function.\n\n2. `URL.createObjectURL()`\n\n   `createObjectURL` 可以创建指向 blob 对象的 URL，  需要注意的是， 使用这种方法创建的\n\n   是一个链接，这个链接指向数据对象， 这个数据对象可以是 [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`MediaSource`](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource) 对象，真正的数据存放在 上面三种数据对象中。\n\n   在上面的代码中， `URL.createObjectURL` 创建的链接， 指向的是保存有 ``(${workerFn.toString ()})()`` 的 blob 对象中\n\n   关于 [createObjectURL](<https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL>)\n\n## Worker-loader\n\n[worker-loader](<https://github.com/webpack-contrib/worker-loader>) 是用来在 webpack 中实现 worker 的，核心代码如下：\n\n``` js\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder ||\n        window.WebKitBlobBuilder ||\n        window.MozBlobBuilder ||\n        window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      // 这里对于 js 数据进行编码\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};\n```\n\n使用多种不同的 api 主要是为了不同浏览器的兼容性问题，\n\n## **参考链接**\n\n1. [how-to-create-a-web-worker-from-a-string](https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string)","source":"_posts/js-Worker.md","raw":"---\ntitle: js-Worker\ndate: 2019-10-27 19:27:07\ntags: Worker\ncategories: js\n---\n\n## What is the worker\n\n浏览器是多线程的， 在浏览器中，存在下面几个线程：\n\n* 浏览器事件触发线程\n* UI 渲染线程\n* JS 引擎线程\n* 定时触发器线程\n* http 请求线程\n\njs 语言的一个重要特征是单线程，因为在js 中会设计到一些页面交互的逻辑， 比如操作 dom 树， css 样式树等， 单线程的设计避免了复杂的同步问题。\n\n因为在 js 中我们是可以进行 dom 操作的， 因此 UI 渲染线程和 js 引擎线程是互斥的，如果我们在页面上要进行一些耗时较大的 js 逻辑计算的时候， 页面可能会出现卡顿现象。\n\n为了利用多核 CPU 的计算能力，在 HTML5 中引入的工作线程使得浏览器端的 JavaScript 引擎可以并发地执行 JavaScript 代码，但是引入的工作线程并没有改变 js 单线程的本质， 因为子线程完全受主线程控制， 并且不能操作dom。\n\n工作线程的一些特点：\n\n* 工作线程内不能操作 dom，或者使用 window 对象下的一些属性和方法\n\n* 工作线程和主线程之间通过消息传递系统实现，消息之间传递的数据是复制而不是共享一个存储空间（深复制和浅复制）\n\n  > both sides send their messages using the `postMessage()` method, and respond to messages via the `onmessage` event handler (the message is contained within the `Message` event's `data` property). The data is copied rather than shared.\n\n## How to create worker\n\n一个 Worker 的创建是通过js 中的构造函数： `Worker()` 来实现的：\n\n```js\nvar myWorker = new Worker(aURL, options);\n```\n\n具体看 [worker](<https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker>)\n\n当我们创建一个 worker 的时候， 我们需要手动创建一个 js 文件，这种方式过于死板， 我们希望我们能直接指定在 worker 中运行的代码，而不需要创建多余的文件， 那有没有可能我们直接传入一个方法呢？\n\n比如如下代码，我们对于函数代码进行了四次转换，从而实现将一个普通函数转换为 webWroker:\n\n```js\nfunction createWorker(workerFn) {\n  const url = URL.createObjectURL(new Blob([`(${workerFn.toString ()})()`]));\n  const worker = new Worker(url);\n  let promiseResolve;\n  worker.onmessage = (msg) => {\n    promiseResolve(msg);\n  }\n  return (message) => {\n    return new Promise(resolve => {\n      promiseResolve = resolve;\n      worker.postMessage(message);\n    });\n  }\n}\n\nconst fn = () => {\n  onmessage = (msg) => {\n    console.log(`resceive message`, msg.data);\n    postMessage('hello');\n  }\n}\n\nconst worker = createWorker(fn);\n\nworker('send message').then(msg => {\n  console.log('msg', msg.data);\n});\n```\n\n上面代码实现了在不额外创建文件的情况下，实现创建 worker 代码的过程\n\n如下是上面代码普通函数到 worker 的四种转换过程：\n\n![img](js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg)\n\n{% asset_img v2-5887674cb213a45bef388a2f580da222_hd.jpg %}\n\n在上面的代码中，我们需要理解的是：\n\n```js\nURL.createObjectURL(new Blob([`(${workerFn.toString ()})()`]));\n```\n\n1. `Function.toString()` 方法可以将函数转换为代码字符串,例如上面的代码中， 执行完成\n\n   `toString` 方法之后：\n\n\n\n   ```\n   // workerFn.toString ()\n   () => {\n     onmessage = (msg) => {\n       console.log(`resceive message`, msg.data);\n       postMessage('hello');\n     }\n   }\n   ```\n\n   > The **toString()** method returns a string representing the source code of the function.\n\n2. `URL.createObjectURL()`\n\n   `createObjectURL` 可以创建指向 blob 对象的 URL，  需要注意的是， 使用这种方法创建的\n\n   是一个链接，这个链接指向数据对象， 这个数据对象可以是 [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`MediaSource`](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource) 对象，真正的数据存放在 上面三种数据对象中。\n\n   在上面的代码中， `URL.createObjectURL` 创建的链接， 指向的是保存有 ``(${workerFn.toString ()})()`` 的 blob 对象中\n\n   关于 [createObjectURL](<https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL>)\n\n## Worker-loader\n\n[worker-loader](<https://github.com/webpack-contrib/worker-loader>) 是用来在 webpack 中实现 worker 的，核心代码如下：\n\n``` js\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder ||\n        window.WebKitBlobBuilder ||\n        window.MozBlobBuilder ||\n        window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      // 这里对于 js 数据进行编码\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};\n```\n\n使用多种不同的 api 主要是为了不同浏览器的兼容性问题，\n\n## **参考链接**\n\n1. [how-to-create-a-web-worker-from-a-string](https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string)","slug":"js-Worker","published":1,"updated":"2020-09-14T06:36:25.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6p001mi2osvts0n2ab","content":"<h2 id=\"What-is-the-worker\"><a href=\"#What-is-the-worker\" class=\"headerlink\" title=\"What is the worker\"></a>What is the worker</h2><p>浏览器是多线程的， 在浏览器中，存在下面几个线程：</p>\n<ul>\n<li>浏览器事件触发线程</li>\n<li>UI 渲染线程</li>\n<li>JS 引擎线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p>js 语言的一个重要特征是单线程，因为在js 中会设计到一些页面交互的逻辑， 比如操作 dom 树， css 样式树等， 单线程的设计避免了复杂的同步问题。</p>\n<p>因为在 js 中我们是可以进行 dom 操作的， 因此 UI 渲染线程和 js 引擎线程是互斥的，如果我们在页面上要进行一些耗时较大的 js 逻辑计算的时候， 页面可能会出现卡顿现象。</p>\n<p>为了利用多核 CPU 的计算能力，在 HTML5 中引入的工作线程使得浏览器端的 JavaScript 引擎可以并发地执行 JavaScript 代码，但是引入的工作线程并没有改变 js 单线程的本质， 因为子线程完全受主线程控制， 并且不能操作dom。</p>\n<p>工作线程的一些特点：</p>\n<ul>\n<li><p>工作线程内不能操作 dom，或者使用 window 对象下的一些属性和方法</p>\n</li>\n<li><p>工作线程和主线程之间通过消息传递系统实现，消息之间传递的数据是复制而不是共享一个存储空间（深复制和浅复制）</p>\n<blockquote>\n<p>both sides send their messages using the <code>postMessage()</code> method, and respond to messages via the <code>onmessage</code> event handler (the message is contained within the <code>Message</code> event’s <code>data</code> property). The data is copied rather than shared.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"How-to-create-worker\"><a href=\"#How-to-create-worker\" class=\"headerlink\" title=\"How to create worker\"></a>How to create worker</h2><p>一个 Worker 的创建是通过js 中的构造函数： <code>Worker()</code> 来实现的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myWorker = <span class=\"keyword\">new</span> Worker(aURL, options);</span><br></pre></td></tr></table></figure>\n<p>具体看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\" target=\"_blank\" rel=\"noopener\">worker</a></p>\n<p>当我们创建一个 worker 的时候， 我们需要手动创建一个 js 文件，这种方式过于死板， 我们希望我们能直接指定在 worker 中运行的代码，而不需要创建多余的文件， 那有没有可能我们直接传入一个方法呢？</p>\n<p>比如如下代码，我们对于函数代码进行了四次转换，从而实现将一个普通函数转换为 webWroker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWorker</span>(<span class=\"params\">workerFn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = URL.createObjectURL(<span class=\"keyword\">new</span> Blob([<span class=\"string\">`(<span class=\"subst\">$&#123;workerFn.toString ()&#125;</span>)()`</span>]));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> Worker(url);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promiseResolve;</span><br><span class=\"line\">  worker.onmessage = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseResolve(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      promiseResolve = resolve;</span><br><span class=\"line\">      worker.postMessage(message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  onmessage = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`resceive message`</span>, msg.data);</span><br><span class=\"line\">    postMessage(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> worker = createWorker(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">worker(<span class=\"string\">'send message'</span>).then(<span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'msg'</span>, msg.data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码实现了在不额外创建文件的情况下，实现创建 worker 代码的过程</p>\n<p>如下是上面代码普通函数到 worker 的四种转换过程：</p>\n<p><img src=\"js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg\" alt=\"img\"></p>\n<img src=\"/2019/10/27/js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg\">\n<p>在上面的代码中，我们需要理解的是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob([<span class=\"string\">`(<span class=\"subst\">$&#123;workerFn.toString ()&#125;</span>)()`</span>]));</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p><code>Function.toString()</code> 方法可以将函数转换为代码字符串,例如上面的代码中， 执行完成</p>\n<p><code>toString</code> 方法之后：</p>\n</li>\n</ol>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// workerFn.toString ()</span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  onmessage = (msg) =&gt; &#123;</span><br><span class=\"line\">    console.log(`resceive message`, msg.data);</span><br><span class=\"line\">    postMessage(&apos;hello&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The <strong>toString()</strong> method returns a string representing the source code of the function.</p>\n</blockquote>\n<ol start=\"2\">\n<li><p><code>URL.createObjectURL()</code></p>\n<p><code>createObjectURL</code> 可以创建指向 blob 对象的 URL，  需要注意的是， 使用这种方法创建的</p>\n<p>是一个链接，这个链接指向数据对象， 这个数据对象可以是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\" rel=\"noopener\"><code>File</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\"><code>Blob</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\" target=\"_blank\" rel=\"noopener\"><code>MediaSource</code></a> 对象，真正的数据存放在 上面三种数据对象中。</p>\n<p>在上面的代码中， <code>URL.createObjectURL</code> 创建的链接， 指向的是保存有 <code>(${workerFn.toString ()})()</code> 的 blob 对象中</p>\n<p>关于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"noopener\">createObjectURL</a></p>\n</li>\n</ol>\n<h2 id=\"Worker-loader\"><a href=\"#Worker-loader\" class=\"headerlink\" title=\"Worker-loader\"></a>Worker-loader</h2><p><a href=\"https://github.com/webpack-contrib/worker-loader\" target=\"_blank\" rel=\"noopener\">worker-loader</a> 是用来在 webpack 中实现 worker 的，核心代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> URL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> blob;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BlobBuilder = Deprecated, but widely implemented</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> BlobBuilder = <span class=\"built_in\">window</span>.BlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.WebKitBlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.MozBlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.MSBlobBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">        blob = <span class=\"keyword\">new</span> BlobBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        blob.append(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        blob = blob.getBlob();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The proposed API</span></span><br><span class=\"line\">        blob = <span class=\"keyword\">new</span> Blob([content]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(URL.createObjectURL(blob));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里对于 js 数据进行编码</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(<span class=\"string\">'data:application/javascript,'</span> + <span class=\"built_in\">encodeURIComponent</span>(content));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Inline worker is not supported'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用多种不同的 api 主要是为了不同浏览器的兼容性问题，</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong>参考链接</strong></h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\" target=\"_blank\" rel=\"noopener\">how-to-create-a-web-worker-from-a-string</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-is-the-worker\"><a href=\"#What-is-the-worker\" class=\"headerlink\" title=\"What is the worker\"></a>What is the worker</h2><p>浏览器是多线程的， 在浏览器中，存在下面几个线程：</p>\n<ul>\n<li>浏览器事件触发线程</li>\n<li>UI 渲染线程</li>\n<li>JS 引擎线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p>js 语言的一个重要特征是单线程，因为在js 中会设计到一些页面交互的逻辑， 比如操作 dom 树， css 样式树等， 单线程的设计避免了复杂的同步问题。</p>\n<p>因为在 js 中我们是可以进行 dom 操作的， 因此 UI 渲染线程和 js 引擎线程是互斥的，如果我们在页面上要进行一些耗时较大的 js 逻辑计算的时候， 页面可能会出现卡顿现象。</p>\n<p>为了利用多核 CPU 的计算能力，在 HTML5 中引入的工作线程使得浏览器端的 JavaScript 引擎可以并发地执行 JavaScript 代码，但是引入的工作线程并没有改变 js 单线程的本质， 因为子线程完全受主线程控制， 并且不能操作dom。</p>\n<p>工作线程的一些特点：</p>\n<ul>\n<li><p>工作线程内不能操作 dom，或者使用 window 对象下的一些属性和方法</p>\n</li>\n<li><p>工作线程和主线程之间通过消息传递系统实现，消息之间传递的数据是复制而不是共享一个存储空间（深复制和浅复制）</p>\n<blockquote>\n<p>both sides send their messages using the <code>postMessage()</code> method, and respond to messages via the <code>onmessage</code> event handler (the message is contained within the <code>Message</code> event’s <code>data</code> property). The data is copied rather than shared.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"How-to-create-worker\"><a href=\"#How-to-create-worker\" class=\"headerlink\" title=\"How to create worker\"></a>How to create worker</h2><p>一个 Worker 的创建是通过js 中的构造函数： <code>Worker()</code> 来实现的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myWorker = <span class=\"keyword\">new</span> Worker(aURL, options);</span><br></pre></td></tr></table></figure>\n<p>具体看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\" target=\"_blank\" rel=\"noopener\">worker</a></p>\n<p>当我们创建一个 worker 的时候， 我们需要手动创建一个 js 文件，这种方式过于死板， 我们希望我们能直接指定在 worker 中运行的代码，而不需要创建多余的文件， 那有没有可能我们直接传入一个方法呢？</p>\n<p>比如如下代码，我们对于函数代码进行了四次转换，从而实现将一个普通函数转换为 webWroker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWorker</span>(<span class=\"params\">workerFn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = URL.createObjectURL(<span class=\"keyword\">new</span> Blob([<span class=\"string\">`(<span class=\"subst\">$&#123;workerFn.toString ()&#125;</span>)()`</span>]));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> worker = <span class=\"keyword\">new</span> Worker(url);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promiseResolve;</span><br><span class=\"line\">  worker.onmessage = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    promiseResolve(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      promiseResolve = resolve;</span><br><span class=\"line\">      worker.postMessage(message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  onmessage = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`resceive message`</span>, msg.data);</span><br><span class=\"line\">    postMessage(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> worker = createWorker(fn);</span><br><span class=\"line\"></span><br><span class=\"line\">worker(<span class=\"string\">'send message'</span>).then(<span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'msg'</span>, msg.data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码实现了在不额外创建文件的情况下，实现创建 worker 代码的过程</p>\n<p>如下是上面代码普通函数到 worker 的四种转换过程：</p>\n<p><img src=\"js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg\" alt=\"img\"></p>\n<img src=\"/2019/10/27/js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg\">\n<p>在上面的代码中，我们需要理解的是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL.createObjectURL(<span class=\"keyword\">new</span> Blob([<span class=\"string\">`(<span class=\"subst\">$&#123;workerFn.toString ()&#125;</span>)()`</span>]));</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p><code>Function.toString()</code> 方法可以将函数转换为代码字符串,例如上面的代码中， 执行完成</p>\n<p><code>toString</code> 方法之后：</p>\n</li>\n</ol>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// workerFn.toString ()</span><br><span class=\"line\">() =&gt; &#123;</span><br><span class=\"line\">  onmessage = (msg) =&gt; &#123;</span><br><span class=\"line\">    console.log(`resceive message`, msg.data);</span><br><span class=\"line\">    postMessage(&apos;hello&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>The <strong>toString()</strong> method returns a string representing the source code of the function.</p>\n</blockquote>\n<ol start=\"2\">\n<li><p><code>URL.createObjectURL()</code></p>\n<p><code>createObjectURL</code> 可以创建指向 blob 对象的 URL，  需要注意的是， 使用这种方法创建的</p>\n<p>是一个链接，这个链接指向数据对象， 这个数据对象可以是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\" rel=\"noopener\"><code>File</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\"><code>Blob</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\" target=\"_blank\" rel=\"noopener\"><code>MediaSource</code></a> 对象，真正的数据存放在 上面三种数据对象中。</p>\n<p>在上面的代码中， <code>URL.createObjectURL</code> 创建的链接， 指向的是保存有 <code>(${workerFn.toString ()})()</code> 的 blob 对象中</p>\n<p>关于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"noopener\">createObjectURL</a></p>\n</li>\n</ol>\n<h2 id=\"Worker-loader\"><a href=\"#Worker-loader\" class=\"headerlink\" title=\"Worker-loader\"></a>Worker-loader</h2><p><a href=\"https://github.com/webpack-contrib/worker-loader\" target=\"_blank\" rel=\"noopener\">worker-loader</a> 是用来在 webpack 中实现 worker 的，核心代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> URL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> blob;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// BlobBuilder = Deprecated, but widely implemented</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> BlobBuilder = <span class=\"built_in\">window</span>.BlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.WebKitBlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.MozBlobBuilder ||</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.MSBlobBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">        blob = <span class=\"keyword\">new</span> BlobBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        blob.append(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        blob = blob.getBlob();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The proposed API</span></span><br><span class=\"line\">        blob = <span class=\"keyword\">new</span> Blob([content]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(URL.createObjectURL(blob));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里对于 js 数据进行编码</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(<span class=\"string\">'data:application/javascript,'</span> + <span class=\"built_in\">encodeURIComponent</span>(content));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!url) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Inline worker is not supported'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Worker(url);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用多种不同的 api 主要是为了不同浏览器的兼容性问题，</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong>参考链接</strong></h2><ol>\n<li><a href=\"https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\" target=\"_blank\" rel=\"noopener\">how-to-create-a-web-worker-from-a-string</a></li>\n</ol>\n"},{"title":"js 文件上传与下载","date":"2018-10-30T16:04:40.000Z","_content":"\n前端实现的文件上传与下载操作：\n\n## 上传\n\n在上传文件的操作中， 可以使用  `formData` 或者 `fileReader` 进行上传操作， 使用 `fileReader` 可以在本地将上传的文件转为二进制的数据格式； `formData` 是在 `XMLHttpRequest` 中的接口，可以用来实现模拟的表单提交， 当前端通过 `ajax` 向后端传递文件的时候， 使用 `ajax` 提交 `formData` 可以实现异步上传二进制文件\n\n```react\n<input type=\"file\" onClick={ this.uploadFile.bind(this) } />\n```\n\n对于上传文件，可以通过两种方式进行上传，通过 `filereader` 或者通过 `formData` 都可以实现上传文件\n\n### FileReader:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.files[0]; // 获取到文件对象\n    const reader = new FileReader(); // 创建 fileReader 的实例\n    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer \n    reader.onload = function () { // 当文件加载成功的时候调用\n        console.log(\"result\", reader.result);\n    }\n}\n```\n\n在 MDN 上面， 对于  FileReader 的描述如下:\n\n```\nFileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n其中File对象可以是来自用户在一个<input>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。  \n```\n\n使用 `fileReader` 接受的参数可以是一个 `File` 对象或者 `Blob` 对象， 使用上传文件的时候， 接收的是一个 `fileList` 对象。\n\n#### 构造函数\n\n```javascript\nconst reader = new FileReader(); // 创建一个新的 filereader 实例\n```\n\n#### 相关方法\n\n`reader.readAsArrayBuffer(file)` : 将文件读取为 `ArrayBuffer` 的数据对象\n\n`ArrayBuffer` 是一种二进制数组，通过 `ArrayBuffer` 中的一些语法可以实现使用数组的语法处理二进制数据\n\n`reader.readAsText(file, [encode])` : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 `encode` 用于将 `file` 对象进行转换的编码格式;\n\n`reader.readAsDataURL(file)`: 将文件读取为 `DataUrl`\n\n#### 相关属性\n\n`reader.error`: 表示在读取文件的时候发生的错误；\n\n`reader.readyState`: 表示当前上传文件的状态：\n\n`0`: 表示当前文件尚未加载\n\n`1`: 表示当前文件正在加载中\n\n`2`: 表示当前文件已经完成加载\n\n`reader.result` : 上传文件的内容，只有上传成功之后这个属性才有值\n\n#### 事件处理\n\n| 事件名         | 描述           |\n| ----------- | ------------ |\n| Onabort     | 当读取操作中断的时候触发 |\n| Onerror     | 当操作发生错误的时候触发 |\n| Onload      | 当读取操作完成的时候触发 |\n| Onloadstart | 当开始进行读取的时候触发 |\n| Onloadend   | 当读取操作结束的时候触发 |\n| Onprogress  | 当读取的时候触发     |\n\n\n\n### FormData:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.file[0];\n    const formData = new FormData();\n    formData.append(\"file\", formData);\n    axios({\n        method: \"post\",\n        url: '...',\n        data: formData\n    });\n}\n```\n\n\n\n## 下载\n\n常用的下载操作是创建一个 `a` 标签， 通过 `a` 标签的 `href` 指向下载的文件链接，通过使用 `download` 属性来说明下载的文件名称:\n\n```html\n<a href=\"\" download=\"文件.txt\">下载文件</a> // download 表明下载的文件名, href 指向下载的文件的地址\n```\n\n在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 `a` 标签的链接进行下载操作， 通过使用 `window.URL.createObjectURL` 转为链接。\n\n`window.URL.createObjectURL`:\n\n接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  ` URL.revokeObjectURL` 进行释放， 已获得最佳性能和内存使用情况。\n\n在实际的开发中， 通常使用js 来创建下载标签， 代码如下:\n\n```javascript\n// name: 下载的文件名\n// blob 下载的文件的blob 二进制数据格式的文件\nfunction downloadFile (name, blob) {\n    var downloadElement = document.createElement('a');\n    var href = window.URL.createObjectURL(blob); //创建下载的链接\n    downloadElement.href = href;\n    downloadElement.download = `${name}.xlsx`; //下载后文件名\n    document.body.appendChild(downloadElement);\n    downloadElement.click(); //点击下载\n    document.body.removeChild(downloadElement); //下载完成移除元素\n    window.URL.revokeObjectURL(href); //释放掉 URL 对象 \n}\n```\n\n当接受到文件数据不为 blob 对象的时候, 可以通过使用 `new Blob([data])`  转换为 blob 对象。\n\n\n\n## Blob\n\n`blob` 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 `input` 标签 `type` 设为 `file` 的时候提交的 `fileList` 中的每一个 `file` 对象就是基于 `blob` 对象的；\n\n#### 构造函数\n\n` new Blob(array, [,options]) `:\n\n`array` 中的值可能是 `ArrayBuffer`, `ArrayBufferView`, `Blob`, `DOMString` 对象， 或者这些对象的混合。\n\n`options` 字段是可选的字段， 包含下面两种值：\n\n- `type`: 表明将要放入 `blob` 中的数组内容的 `MIME` 类型\n- endings: 决定第一个参数的数据格式，可以取值为 \"transparent\" 或者 \"native\"（transparent的话不变，是默认值，native 的话按操作系统转换\n\n#### 方法\n\n`Blob.slice([start[, end[, contentType]]])`\n\n用于对 `Blob` 进行\"切割\"， 返回一个新的 `Blob` 对象， 包含特定字节范围内的数据\n\n#### 属性\n\n`Blob.size`: 在 `Blob` 数据对象中的字节大小。\n\n`Blob.type`: `Blob` 数据对象中的 `MIME` 类型。\n\n使用 `Blob` 存储的数据对象读取的唯一方式是通过使用 `FileReader` 进行读取， 通过使用 `FileReader` 中的 `readAsDataURL` 或者 `readAsArrayBuffer` 将 `Blob` 中的数据类型读取为 `ArrayBuffer` 或者 `dataurl` 的格式。\n\n","source":"_posts/js-文件上传与下载.md","raw":"---\ntitle: js 文件上传与下载\ndate: 2018-10-31 00:04:40\ntags: fileReader\ncategories: js\n---\n\n前端实现的文件上传与下载操作：\n\n## 上传\n\n在上传文件的操作中， 可以使用  `formData` 或者 `fileReader` 进行上传操作， 使用 `fileReader` 可以在本地将上传的文件转为二进制的数据格式； `formData` 是在 `XMLHttpRequest` 中的接口，可以用来实现模拟的表单提交， 当前端通过 `ajax` 向后端传递文件的时候， 使用 `ajax` 提交 `formData` 可以实现异步上传二进制文件\n\n```react\n<input type=\"file\" onClick={ this.uploadFile.bind(this) } />\n```\n\n对于上传文件，可以通过两种方式进行上传，通过 `filereader` 或者通过 `formData` 都可以实现上传文件\n\n### FileReader:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.files[0]; // 获取到文件对象\n    const reader = new FileReader(); // 创建 fileReader 的实例\n    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer \n    reader.onload = function () { // 当文件加载成功的时候调用\n        console.log(\"result\", reader.result);\n    }\n}\n```\n\n在 MDN 上面， 对于  FileReader 的描述如下:\n\n```\nFileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n其中File对象可以是来自用户在一个<input>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。  \n```\n\n使用 `fileReader` 接受的参数可以是一个 `File` 对象或者 `Blob` 对象， 使用上传文件的时候， 接收的是一个 `fileList` 对象。\n\n#### 构造函数\n\n```javascript\nconst reader = new FileReader(); // 创建一个新的 filereader 实例\n```\n\n#### 相关方法\n\n`reader.readAsArrayBuffer(file)` : 将文件读取为 `ArrayBuffer` 的数据对象\n\n`ArrayBuffer` 是一种二进制数组，通过 `ArrayBuffer` 中的一些语法可以实现使用数组的语法处理二进制数据\n\n`reader.readAsText(file, [encode])` : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 `encode` 用于将 `file` 对象进行转换的编码格式;\n\n`reader.readAsDataURL(file)`: 将文件读取为 `DataUrl`\n\n#### 相关属性\n\n`reader.error`: 表示在读取文件的时候发生的错误；\n\n`reader.readyState`: 表示当前上传文件的状态：\n\n`0`: 表示当前文件尚未加载\n\n`1`: 表示当前文件正在加载中\n\n`2`: 表示当前文件已经完成加载\n\n`reader.result` : 上传文件的内容，只有上传成功之后这个属性才有值\n\n#### 事件处理\n\n| 事件名         | 描述           |\n| ----------- | ------------ |\n| Onabort     | 当读取操作中断的时候触发 |\n| Onerror     | 当操作发生错误的时候触发 |\n| Onload      | 当读取操作完成的时候触发 |\n| Onloadstart | 当开始进行读取的时候触发 |\n| Onloadend   | 当读取操作结束的时候触发 |\n| Onprogress  | 当读取的时候触发     |\n\n\n\n### FormData:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.file[0];\n    const formData = new FormData();\n    formData.append(\"file\", formData);\n    axios({\n        method: \"post\",\n        url: '...',\n        data: formData\n    });\n}\n```\n\n\n\n## 下载\n\n常用的下载操作是创建一个 `a` 标签， 通过 `a` 标签的 `href` 指向下载的文件链接，通过使用 `download` 属性来说明下载的文件名称:\n\n```html\n<a href=\"\" download=\"文件.txt\">下载文件</a> // download 表明下载的文件名, href 指向下载的文件的地址\n```\n\n在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 `a` 标签的链接进行下载操作， 通过使用 `window.URL.createObjectURL` 转为链接。\n\n`window.URL.createObjectURL`:\n\n接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  ` URL.revokeObjectURL` 进行释放， 已获得最佳性能和内存使用情况。\n\n在实际的开发中， 通常使用js 来创建下载标签， 代码如下:\n\n```javascript\n// name: 下载的文件名\n// blob 下载的文件的blob 二进制数据格式的文件\nfunction downloadFile (name, blob) {\n    var downloadElement = document.createElement('a');\n    var href = window.URL.createObjectURL(blob); //创建下载的链接\n    downloadElement.href = href;\n    downloadElement.download = `${name}.xlsx`; //下载后文件名\n    document.body.appendChild(downloadElement);\n    downloadElement.click(); //点击下载\n    document.body.removeChild(downloadElement); //下载完成移除元素\n    window.URL.revokeObjectURL(href); //释放掉 URL 对象 \n}\n```\n\n当接受到文件数据不为 blob 对象的时候, 可以通过使用 `new Blob([data])`  转换为 blob 对象。\n\n\n\n## Blob\n\n`blob` 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 `input` 标签 `type` 设为 `file` 的时候提交的 `fileList` 中的每一个 `file` 对象就是基于 `blob` 对象的；\n\n#### 构造函数\n\n` new Blob(array, [,options]) `:\n\n`array` 中的值可能是 `ArrayBuffer`, `ArrayBufferView`, `Blob`, `DOMString` 对象， 或者这些对象的混合。\n\n`options` 字段是可选的字段， 包含下面两种值：\n\n- `type`: 表明将要放入 `blob` 中的数组内容的 `MIME` 类型\n- endings: 决定第一个参数的数据格式，可以取值为 \"transparent\" 或者 \"native\"（transparent的话不变，是默认值，native 的话按操作系统转换\n\n#### 方法\n\n`Blob.slice([start[, end[, contentType]]])`\n\n用于对 `Blob` 进行\"切割\"， 返回一个新的 `Blob` 对象， 包含特定字节范围内的数据\n\n#### 属性\n\n`Blob.size`: 在 `Blob` 数据对象中的字节大小。\n\n`Blob.type`: `Blob` 数据对象中的 `MIME` 类型。\n\n使用 `Blob` 存储的数据对象读取的唯一方式是通过使用 `FileReader` 进行读取， 通过使用 `FileReader` 中的 `readAsDataURL` 或者 `readAsArrayBuffer` 将 `Blob` 中的数据类型读取为 `ArrayBuffer` 或者 `dataurl` 的格式。\n\n","slug":"js-文件上传与下载","published":1,"updated":"2020-09-14T06:36:25.977Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6s001pi2osrjgxo19r","content":"<p>前端实现的文件上传与下载操作：</p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>在上传文件的操作中， 可以使用  <code>formData</code> 或者 <code>fileReader</code> 进行上传操作， 使用 <code>fileReader</code> 可以在本地将上传的文件转为二进制的数据格式； <code>formData</code> 是在 <code>XMLHttpRequest</code> 中的接口，可以用来实现模拟的表单提交， 当前端通过 <code>ajax</code> 向后端传递文件的时候， 使用 <code>ajax</code> 提交 <code>formData</code> 可以实现异步上传二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; onClick=&#123; this.uploadFile.bind(this) &#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>对于上传文件，可以通过两种方式进行上传，通过 <code>filereader</code> 或者通过 <code>formData</code> 都可以实现上传文件</p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader:\"></a>FileReader:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.files[0]; // 获取到文件对象</span><br><span class=\"line\">    const reader = new FileReader(); // 创建 fileReader 的实例</span><br><span class=\"line\">    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer </span><br><span class=\"line\">    reader.onload = function () &#123; // 当文件加载成功的时候调用</span><br><span class=\"line\">        console.log(&quot;result&quot;, reader.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MDN 上面， 对于  FileReader 的描述如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</span><br><span class=\"line\"></span><br><span class=\"line\">其中File对象可以是来自用户在一个&lt;input&gt;元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</span><br></pre></td></tr></table></figure>\n<p>使用 <code>fileReader</code> 接受的参数可以是一个 <code>File</code> 对象或者 <code>Blob</code> 对象， 使用上传文件的时候， 接收的是一个 <code>fileList</code> 对象。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(); <span class=\"comment\">// 创建一个新的 filereader 实例</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相关方法\"><a href=\"#相关方法\" class=\"headerlink\" title=\"相关方法\"></a>相关方法</h4><p><code>reader.readAsArrayBuffer(file)</code> : 将文件读取为 <code>ArrayBuffer</code> 的数据对象</p>\n<p><code>ArrayBuffer</code> 是一种二进制数组，通过 <code>ArrayBuffer</code> 中的一些语法可以实现使用数组的语法处理二进制数据</p>\n<p><code>reader.readAsText(file, [encode])</code> : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 <code>encode</code> 用于将 <code>file</code> 对象进行转换的编码格式;</p>\n<p><code>reader.readAsDataURL(file)</code>: 将文件读取为 <code>DataUrl</code></p>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p><code>reader.error</code>: 表示在读取文件的时候发生的错误；</p>\n<p><code>reader.readyState</code>: 表示当前上传文件的状态：</p>\n<p><code>0</code>: 表示当前文件尚未加载</p>\n<p><code>1</code>: 表示当前文件正在加载中</p>\n<p><code>2</code>: 表示当前文件已经完成加载</p>\n<p><code>reader.result</code> : 上传文件的内容，只有上传成功之后这个属性才有值</p>\n<h4 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h4><table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Onabort</td>\n<td>当读取操作中断的时候触发</td>\n</tr>\n<tr>\n<td>Onerror</td>\n<td>当操作发生错误的时候触发</td>\n</tr>\n<tr>\n<td>Onload</td>\n<td>当读取操作完成的时候触发</td>\n</tr>\n<tr>\n<td>Onloadstart</td>\n<td>当开始进行读取的时候触发</td>\n</tr>\n<tr>\n<td>Onloadend</td>\n<td>当读取操作结束的时候触发</td>\n</tr>\n<tr>\n<td>Onprogress</td>\n<td>当读取的时候触发</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"FormData\"><a href=\"#FormData\" class=\"headerlink\" title=\"FormData:\"></a>FormData:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.file[0];</span><br><span class=\"line\">    const formData = new FormData();</span><br><span class=\"line\">    formData.append(&quot;file&quot;, formData);</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">        method: &quot;post&quot;,</span><br><span class=\"line\">        url: &apos;...&apos;,</span><br><span class=\"line\">        data: formData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>常用的下载操作是创建一个 <code>a</code> 标签， 通过 <code>a</code> 标签的 <code>href</code> 指向下载的文件链接，通过使用 <code>download</code> 属性来说明下载的文件名称:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"文件.txt\"</span>&gt;</span>下载文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> // download 表明下载的文件名, href 指向下载的文件的地址</span><br></pre></td></tr></table></figure>\n<p>在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 <code>a</code> 标签的链接进行下载操作， 通过使用 <code>window.URL.createObjectURL</code> 转为链接。</p>\n<p><code>window.URL.createObjectURL</code>:</p>\n<p>接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  <code>URL.revokeObjectURL</code> 进行释放， 已获得最佳性能和内存使用情况。</p>\n<p>在实际的开发中， 通常使用js 来创建下载标签， 代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name: 下载的文件名</span></span><br><span class=\"line\"><span class=\"comment\">// blob 下载的文件的blob 二进制数据格式的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadFile</span> (<span class=\"params\">name, blob</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">//创建下载的链接</span></span><br><span class=\"line\">    downloadElement.href = href;</span><br><span class=\"line\">    downloadElement.download = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>.xlsx`</span>; <span class=\"comment\">//下载后文件名</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">    downloadElement.click(); <span class=\"comment\">//点击下载</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(downloadElement); <span class=\"comment\">//下载完成移除元素</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.URL.revokeObjectURL(href); <span class=\"comment\">//释放掉 URL 对象 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当接受到文件数据不为 blob 对象的时候, 可以通过使用 <code>new Blob([data])</code>  转换为 blob 对象。</p>\n<h2 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h2><p><code>blob</code> 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 <code>input</code> 标签 <code>type</code> 设为 <code>file</code> 的时候提交的 <code>fileList</code> 中的每一个 <code>file</code> 对象就是基于 <code>blob</code> 对象的；</p>\n<h4 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><code>new Blob(array, [,options])</code>:</p>\n<p><code>array</code> 中的值可能是 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 对象， 或者这些对象的混合。</p>\n<p><code>options</code> 字段是可选的字段， 包含下面两种值：</p>\n<ul>\n<li><code>type</code>: 表明将要放入 <code>blob</code> 中的数组内容的 <code>MIME</code> 类型</li>\n<li>endings: 决定第一个参数的数据格式，可以取值为 “transparent” 或者 “native”（transparent的话不变，是默认值，native 的话按操作系统转换</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>Blob.slice([start[, end[, contentType]]])</code></p>\n<p>用于对 <code>Blob</code> 进行”切割”， 返回一个新的 <code>Blob</code> 对象， 包含特定字节范围内的数据</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p><code>Blob.size</code>: 在 <code>Blob</code> 数据对象中的字节大小。</p>\n<p><code>Blob.type</code>: <code>Blob</code> 数据对象中的 <code>MIME</code> 类型。</p>\n<p>使用 <code>Blob</code> 存储的数据对象读取的唯一方式是通过使用 <code>FileReader</code> 进行读取， 通过使用 <code>FileReader</code> 中的 <code>readAsDataURL</code> 或者 <code>readAsArrayBuffer</code> 将 <code>Blob</code> 中的数据类型读取为 <code>ArrayBuffer</code> 或者 <code>dataurl</code> 的格式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端实现的文件上传与下载操作：</p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>在上传文件的操作中， 可以使用  <code>formData</code> 或者 <code>fileReader</code> 进行上传操作， 使用 <code>fileReader</code> 可以在本地将上传的文件转为二进制的数据格式； <code>formData</code> 是在 <code>XMLHttpRequest</code> 中的接口，可以用来实现模拟的表单提交， 当前端通过 <code>ajax</code> 向后端传递文件的时候， 使用 <code>ajax</code> 提交 <code>formData</code> 可以实现异步上传二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; onClick=&#123; this.uploadFile.bind(this) &#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>对于上传文件，可以通过两种方式进行上传，通过 <code>filereader</code> 或者通过 <code>formData</code> 都可以实现上传文件</p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader:\"></a>FileReader:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.files[0]; // 获取到文件对象</span><br><span class=\"line\">    const reader = new FileReader(); // 创建 fileReader 的实例</span><br><span class=\"line\">    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer </span><br><span class=\"line\">    reader.onload = function () &#123; // 当文件加载成功的时候调用</span><br><span class=\"line\">        console.log(&quot;result&quot;, reader.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MDN 上面， 对于  FileReader 的描述如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</span><br><span class=\"line\"></span><br><span class=\"line\">其中File对象可以是来自用户在一个&lt;input&gt;元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</span><br></pre></td></tr></table></figure>\n<p>使用 <code>fileReader</code> 接受的参数可以是一个 <code>File</code> 对象或者 <code>Blob</code> 对象， 使用上传文件的时候， 接收的是一个 <code>fileList</code> 对象。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(); <span class=\"comment\">// 创建一个新的 filereader 实例</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相关方法\"><a href=\"#相关方法\" class=\"headerlink\" title=\"相关方法\"></a>相关方法</h4><p><code>reader.readAsArrayBuffer(file)</code> : 将文件读取为 <code>ArrayBuffer</code> 的数据对象</p>\n<p><code>ArrayBuffer</code> 是一种二进制数组，通过 <code>ArrayBuffer</code> 中的一些语法可以实现使用数组的语法处理二进制数据</p>\n<p><code>reader.readAsText(file, [encode])</code> : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 <code>encode</code> 用于将 <code>file</code> 对象进行转换的编码格式;</p>\n<p><code>reader.readAsDataURL(file)</code>: 将文件读取为 <code>DataUrl</code></p>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p><code>reader.error</code>: 表示在读取文件的时候发生的错误；</p>\n<p><code>reader.readyState</code>: 表示当前上传文件的状态：</p>\n<p><code>0</code>: 表示当前文件尚未加载</p>\n<p><code>1</code>: 表示当前文件正在加载中</p>\n<p><code>2</code>: 表示当前文件已经完成加载</p>\n<p><code>reader.result</code> : 上传文件的内容，只有上传成功之后这个属性才有值</p>\n<h4 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h4><table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Onabort</td>\n<td>当读取操作中断的时候触发</td>\n</tr>\n<tr>\n<td>Onerror</td>\n<td>当操作发生错误的时候触发</td>\n</tr>\n<tr>\n<td>Onload</td>\n<td>当读取操作完成的时候触发</td>\n</tr>\n<tr>\n<td>Onloadstart</td>\n<td>当开始进行读取的时候触发</td>\n</tr>\n<tr>\n<td>Onloadend</td>\n<td>当读取操作结束的时候触发</td>\n</tr>\n<tr>\n<td>Onprogress</td>\n<td>当读取的时候触发</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"FormData\"><a href=\"#FormData\" class=\"headerlink\" title=\"FormData:\"></a>FormData:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.file[0];</span><br><span class=\"line\">    const formData = new FormData();</span><br><span class=\"line\">    formData.append(&quot;file&quot;, formData);</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">        method: &quot;post&quot;,</span><br><span class=\"line\">        url: &apos;...&apos;,</span><br><span class=\"line\">        data: formData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>常用的下载操作是创建一个 <code>a</code> 标签， 通过 <code>a</code> 标签的 <code>href</code> 指向下载的文件链接，通过使用 <code>download</code> 属性来说明下载的文件名称:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"文件.txt\"</span>&gt;</span>下载文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> // download 表明下载的文件名, href 指向下载的文件的地址</span><br></pre></td></tr></table></figure>\n<p>在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 <code>a</code> 标签的链接进行下载操作， 通过使用 <code>window.URL.createObjectURL</code> 转为链接。</p>\n<p><code>window.URL.createObjectURL</code>:</p>\n<p>接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  <code>URL.revokeObjectURL</code> 进行释放， 已获得最佳性能和内存使用情况。</p>\n<p>在实际的开发中， 通常使用js 来创建下载标签， 代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name: 下载的文件名</span></span><br><span class=\"line\"><span class=\"comment\">// blob 下载的文件的blob 二进制数据格式的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadFile</span> (<span class=\"params\">name, blob</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">//创建下载的链接</span></span><br><span class=\"line\">    downloadElement.href = href;</span><br><span class=\"line\">    downloadElement.download = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>.xlsx`</span>; <span class=\"comment\">//下载后文件名</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">    downloadElement.click(); <span class=\"comment\">//点击下载</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(downloadElement); <span class=\"comment\">//下载完成移除元素</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.URL.revokeObjectURL(href); <span class=\"comment\">//释放掉 URL 对象 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当接受到文件数据不为 blob 对象的时候, 可以通过使用 <code>new Blob([data])</code>  转换为 blob 对象。</p>\n<h2 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h2><p><code>blob</code> 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 <code>input</code> 标签 <code>type</code> 设为 <code>file</code> 的时候提交的 <code>fileList</code> 中的每一个 <code>file</code> 对象就是基于 <code>blob</code> 对象的；</p>\n<h4 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><code>new Blob(array, [,options])</code>:</p>\n<p><code>array</code> 中的值可能是 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 对象， 或者这些对象的混合。</p>\n<p><code>options</code> 字段是可选的字段， 包含下面两种值：</p>\n<ul>\n<li><code>type</code>: 表明将要放入 <code>blob</code> 中的数组内容的 <code>MIME</code> 类型</li>\n<li>endings: 决定第一个参数的数据格式，可以取值为 “transparent” 或者 “native”（transparent的话不变，是默认值，native 的话按操作系统转换</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>Blob.slice([start[, end[, contentType]]])</code></p>\n<p>用于对 <code>Blob</code> 进行”切割”， 返回一个新的 <code>Blob</code> 对象， 包含特定字节范围内的数据</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p><code>Blob.size</code>: 在 <code>Blob</code> 数据对象中的字节大小。</p>\n<p><code>Blob.type</code>: <code>Blob</code> 数据对象中的 <code>MIME</code> 类型。</p>\n<p>使用 <code>Blob</code> 存储的数据对象读取的唯一方式是通过使用 <code>FileReader</code> 进行读取， 通过使用 <code>FileReader</code> 中的 <code>readAsDataURL</code> 或者 <code>readAsArrayBuffer</code> 将 <code>Blob</code> 中的数据类型读取为 <code>ArrayBuffer</code> 或者 <code>dataurl</code> 的格式。</p>\n"},{"title":"node.js Timers","date":"2017-12-19T14:41:55.000Z","_content":"\n###  `Timers`\n\n####  `APIS`\n\n#####  `setImmediate(callback, args)`  \n\n`callback` : 在 `node.js` 事件循环之后被调用的函数。  \n\n`args`: 当 `callback` 函数被调用的时候传递的参数。 \n\n在 `I / O` 事件回调时间之后立即执行 `callback` 回调函数的执行。\n\n如果 `callback` 不是一个 `function` , 会抛出一个 `TypeError` 错误。\n\n```javascript\nsetImmediate(function () {\n  console.log('事件稍后被执行');\n});\nconsole.log('事件立即被执行');\n// 事件立即被执行\n// 事件稍后被执行\n```\n\n#####  `setInterval(callback, delay, args)`  \n\n使用 `setInterval` 类似于使用 `setInterval` 方法, 在一定的时间间隔 `delay` 之后执行 `callback` 函数。  \n\n在官方给的例子中存在使用 `util.promisly()` 的一个变体。\n\n```javascript\nconst util = require('util');\nconst setTimeoutPromise = util.promisify(setTimeout);\nsetTimeoutPromise(4000, 'foobar').then((value) => {\n  console.log(value);\n});\n// after delay print 'foobar'\n```\n\n####  `canceling Timers`  \n\n使用 `setImmediate` `setInterval`  以及 `setTimeout` 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 `timer` 防止被触发的操作。  \n\n`clearImmediate`,  `clearInterval`,  `clearTimeout`  用来清除通过使用 `setImmedidate`  `setInterval` 以及 `setTimeout` 创建的定时器。\n\n```javascript\nlet immidate = setImmediate(function () {\n    console.log('事件之后被调用');\n});\nclearImmediate(immidate);\n// 清除事件， 事件之后不会调用\n\nclearInterval();\n// 清除间隔时间后的调用\nclearTimeout();\n// 清除一段时间之后的调用\n```\n\n","source":"_posts/node-js-Timers.md","raw":"---\ntitle: node.js Timers\ndate: 2017-12-19 22:41:55\ntags: Timers\ncategories: node.js\n---\n\n###  `Timers`\n\n####  `APIS`\n\n#####  `setImmediate(callback, args)`  \n\n`callback` : 在 `node.js` 事件循环之后被调用的函数。  \n\n`args`: 当 `callback` 函数被调用的时候传递的参数。 \n\n在 `I / O` 事件回调时间之后立即执行 `callback` 回调函数的执行。\n\n如果 `callback` 不是一个 `function` , 会抛出一个 `TypeError` 错误。\n\n```javascript\nsetImmediate(function () {\n  console.log('事件稍后被执行');\n});\nconsole.log('事件立即被执行');\n// 事件立即被执行\n// 事件稍后被执行\n```\n\n#####  `setInterval(callback, delay, args)`  \n\n使用 `setInterval` 类似于使用 `setInterval` 方法, 在一定的时间间隔 `delay` 之后执行 `callback` 函数。  \n\n在官方给的例子中存在使用 `util.promisly()` 的一个变体。\n\n```javascript\nconst util = require('util');\nconst setTimeoutPromise = util.promisify(setTimeout);\nsetTimeoutPromise(4000, 'foobar').then((value) => {\n  console.log(value);\n});\n// after delay print 'foobar'\n```\n\n####  `canceling Timers`  \n\n使用 `setImmediate` `setInterval`  以及 `setTimeout` 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 `timer` 防止被触发的操作。  \n\n`clearImmediate`,  `clearInterval`,  `clearTimeout`  用来清除通过使用 `setImmedidate`  `setInterval` 以及 `setTimeout` 创建的定时器。\n\n```javascript\nlet immidate = setImmediate(function () {\n    console.log('事件之后被调用');\n});\nclearImmediate(immidate);\n// 清除事件， 事件之后不会调用\n\nclearInterval();\n// 清除间隔时间后的调用\nclearTimeout();\n// 清除一段时间之后的调用\n```\n\n","slug":"node-js-Timers","published":1,"updated":"2020-09-14T06:36:25.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6u001si2osmz16wujs","content":"<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a><code>Timers</code></h3><h4 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a><code>APIS</code></h4><h5 id=\"setImmediate-callback-args\"><a href=\"#setImmediate-callback-args\" class=\"headerlink\" title=\"setImmediate(callback, args)\"></a><code>setImmediate(callback, args)</code></h5><p><code>callback</code> : 在 <code>node.js</code> 事件循环之后被调用的函数。  </p>\n<p><code>args</code>: 当 <code>callback</code> 函数被调用的时候传递的参数。 </p>\n<p>在 <code>I / O</code> 事件回调时间之后立即执行 <code>callback</code> 回调函数的执行。</p>\n<p>如果 <code>callback</code> 不是一个 <code>function</code> , 会抛出一个 <code>TypeError</code> 错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件稍后被执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'事件立即被执行'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 事件立即被执行</span></span><br><span class=\"line\"><span class=\"comment\">// 事件稍后被执行</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"setInterval-callback-delay-args\"><a href=\"#setInterval-callback-delay-args\" class=\"headerlink\" title=\"setInterval(callback, delay, args)\"></a><code>setInterval(callback, delay, args)</code></h5><p>使用 <code>setInterval</code> 类似于使用 <code>setInterval</code> 方法, 在一定的时间间隔 <code>delay</code> 之后执行 <code>callback</code> 函数。  </p>\n<p>在官方给的例子中存在使用 <code>util.promisly()</code> 的一个变体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTimeoutPromise = util.promisify(setTimeout);</span><br><span class=\"line\">setTimeoutPromise(<span class=\"number\">4000</span>, <span class=\"string\">'foobar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// after delay print 'foobar'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"canceling-Timers\"><a href=\"#canceling-Timers\" class=\"headerlink\" title=\"canceling Timers\"></a><code>canceling Timers</code></h4><p>使用 <code>setImmediate</code> <code>setInterval</code>  以及 <code>setTimeout</code> 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 <code>timer</code> 防止被触发的操作。  </p>\n<p><code>clearImmediate</code>,  <code>clearInterval</code>,  <code>clearTimeout</code>  用来清除通过使用 <code>setImmedidate</code>  <code>setInterval</code> 以及 <code>setTimeout</code> 创建的定时器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> immidate = setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件之后被调用'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">clearImmediate(immidate);</span><br><span class=\"line\"><span class=\"comment\">// 清除事件， 事件之后不会调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">clearInterval();</span><br><span class=\"line\"><span class=\"comment\">// 清除间隔时间后的调用</span></span><br><span class=\"line\">clearTimeout();</span><br><span class=\"line\"><span class=\"comment\">// 清除一段时间之后的调用</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a><code>Timers</code></h3><h4 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a><code>APIS</code></h4><h5 id=\"setImmediate-callback-args\"><a href=\"#setImmediate-callback-args\" class=\"headerlink\" title=\"setImmediate(callback, args)\"></a><code>setImmediate(callback, args)</code></h5><p><code>callback</code> : 在 <code>node.js</code> 事件循环之后被调用的函数。  </p>\n<p><code>args</code>: 当 <code>callback</code> 函数被调用的时候传递的参数。 </p>\n<p>在 <code>I / O</code> 事件回调时间之后立即执行 <code>callback</code> 回调函数的执行。</p>\n<p>如果 <code>callback</code> 不是一个 <code>function</code> , 会抛出一个 <code>TypeError</code> 错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件稍后被执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'事件立即被执行'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 事件立即被执行</span></span><br><span class=\"line\"><span class=\"comment\">// 事件稍后被执行</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"setInterval-callback-delay-args\"><a href=\"#setInterval-callback-delay-args\" class=\"headerlink\" title=\"setInterval(callback, delay, args)\"></a><code>setInterval(callback, delay, args)</code></h5><p>使用 <code>setInterval</code> 类似于使用 <code>setInterval</code> 方法, 在一定的时间间隔 <code>delay</code> 之后执行 <code>callback</code> 函数。  </p>\n<p>在官方给的例子中存在使用 <code>util.promisly()</code> 的一个变体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTimeoutPromise = util.promisify(setTimeout);</span><br><span class=\"line\">setTimeoutPromise(<span class=\"number\">4000</span>, <span class=\"string\">'foobar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// after delay print 'foobar'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"canceling-Timers\"><a href=\"#canceling-Timers\" class=\"headerlink\" title=\"canceling Timers\"></a><code>canceling Timers</code></h4><p>使用 <code>setImmediate</code> <code>setInterval</code>  以及 <code>setTimeout</code> 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 <code>timer</code> 防止被触发的操作。  </p>\n<p><code>clearImmediate</code>,  <code>clearInterval</code>,  <code>clearTimeout</code>  用来清除通过使用 <code>setImmedidate</code>  <code>setInterval</code> 以及 <code>setTimeout</code> 创建的定时器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> immidate = setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件之后被调用'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">clearImmediate(immidate);</span><br><span class=\"line\"><span class=\"comment\">// 清除事件， 事件之后不会调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">clearInterval();</span><br><span class=\"line\"><span class=\"comment\">// 清除间隔时间后的调用</span></span><br><span class=\"line\">clearTimeout();</span><br><span class=\"line\"><span class=\"comment\">// 清除一段时间之后的调用</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nextTick in vue.js","date":"2019-05-09T09:10:27.000Z","_content":"\n### nextTick 方法\n\n`nextTick` 方法是挂载到 vue 实例上面， 我们可以通过使用 `this.$nextTick` 来使用这个方法。\n\n这个方法的作用是：\n\n> 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 `Vue.nextTick` 一样，不同的是回调的 `this` 自动绑定到调用它的实例上。 \n\n首先， 当我们在页面上面调用这个方法的时候， 在 `vue` 内部， 函数执行的路径是什么样的：\n\n定义 `nextTick`:\n\n```js\nmounted() {\n  this.$nextTick(() => {\n    console.log('nextTick');\n  });\n}\n```\n\n查看调用栈：\n\n{% asset_img 1.jpg %}\n\n查看上面的调用栈得知， 当调用 `nextTick` 的时候，直到执行函数依次经历：\n\n`nextTick`  `timeFunc`  `flushCallbacks`\n\n那么 `nextTick` 方法在 `vue` 中是如何起作用的？\n\n`nextTick` 方法定义：\n\n```js\n// cb: 回调函数\n// ctx 上下文对象\nfunction nextTick (cb, ctx) {\n    var _resolve;\n    // callbacks 中用来存放所有 nextTick 中的 cb 函数\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          // 当 cb 存在的时候， 执行回调函数\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n        // 否则， 返回一个 promise\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    // 这里保证不会执行 两次 timeFunc\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    // $flow-disable-line\n    // 当没有回调函数的时候， 返回一个 promise\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve) {\n        _resolve = resolve;\n      })\n    }\n  }\n```\n\n当我们调用 nextTick 的时候， 会将回调函数存入 `callbacks` 数组中， 这个数组用来存放当前组件中使用 `nextTick` 方法时的回调函数。\n\n`timeFunc` 函数：\n\n 这个函数用来在合适的时机调用 `nextTick` 中推入 `callback` 列表中的所有函数， 所有代码如下：\n\n```js\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nlet timerFunc\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n\n上面的代码表明， `nextTick` 中的回调函数的执行时机优先在`microTask` 执行的时候执行， 否则， 在 宏任务的时候执行代码。\n\n`flushCallbacks` 函数用来执行 `callbacks` 中存放的函数列表：\n\n```js\nfunction flushCallbacks () {\n  // 在执行前， 将 pending 置为 false\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n","source":"_posts/nextTick in vue.md","raw":"---\ntitle: nextTick in vue.js\ndate: 2019-05-09 17:10:27\ntags: vue 源码\ncategories: vue 源码阅读\n---\n\n### nextTick 方法\n\n`nextTick` 方法是挂载到 vue 实例上面， 我们可以通过使用 `this.$nextTick` 来使用这个方法。\n\n这个方法的作用是：\n\n> 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 `Vue.nextTick` 一样，不同的是回调的 `this` 自动绑定到调用它的实例上。 \n\n首先， 当我们在页面上面调用这个方法的时候， 在 `vue` 内部， 函数执行的路径是什么样的：\n\n定义 `nextTick`:\n\n```js\nmounted() {\n  this.$nextTick(() => {\n    console.log('nextTick');\n  });\n}\n```\n\n查看调用栈：\n\n{% asset_img 1.jpg %}\n\n查看上面的调用栈得知， 当调用 `nextTick` 的时候，直到执行函数依次经历：\n\n`nextTick`  `timeFunc`  `flushCallbacks`\n\n那么 `nextTick` 方法在 `vue` 中是如何起作用的？\n\n`nextTick` 方法定义：\n\n```js\n// cb: 回调函数\n// ctx 上下文对象\nfunction nextTick (cb, ctx) {\n    var _resolve;\n    // callbacks 中用来存放所有 nextTick 中的 cb 函数\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          // 当 cb 存在的时候， 执行回调函数\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n        // 否则， 返回一个 promise\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    // 这里保证不会执行 两次 timeFunc\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    // $flow-disable-line\n    // 当没有回调函数的时候， 返回一个 promise\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve) {\n        _resolve = resolve;\n      })\n    }\n  }\n```\n\n当我们调用 nextTick 的时候， 会将回调函数存入 `callbacks` 数组中， 这个数组用来存放当前组件中使用 `nextTick` 方法时的回调函数。\n\n`timeFunc` 函数：\n\n 这个函数用来在合适的时机调用 `nextTick` 中推入 `callback` 列表中的所有函数， 所有代码如下：\n\n```js\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nlet timerFunc\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n\n上面的代码表明， `nextTick` 中的回调函数的执行时机优先在`microTask` 执行的时候执行， 否则， 在 宏任务的时候执行代码。\n\n`flushCallbacks` 函数用来执行 `callbacks` 中存放的函数列表：\n\n```js\nfunction flushCallbacks () {\n  // 在执行前， 将 pending 置为 false\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n","slug":"nextTick in vue","published":1,"updated":"2020-09-14T06:36:25.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6v001vi2osan1hs3y6","content":"<h3 id=\"nextTick-方法\"><a href=\"#nextTick-方法\" class=\"headerlink\" title=\"nextTick 方法\"></a>nextTick 方法</h3><p><code>nextTick</code> 方法是挂载到 vue 实例上面， 我们可以通过使用 <code>this.$nextTick</code> 来使用这个方法。</p>\n<p>这个方法的作用是：</p>\n<blockquote>\n<p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上。 </p>\n</blockquote>\n<p>首先， 当我们在页面上面调用这个方法的时候， 在 <code>vue</code> 内部， 函数执行的路径是什么样的：</p>\n<p>定义 <code>nextTick</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看调用栈：</p>\n<img src=\"/2019/05/09/nextTick%20in%20vue/1.jpg\">\n<p>查看上面的调用栈得知， 当调用 <code>nextTick</code> 的时候，直到执行函数依次经历：</p>\n<p><code>nextTick</code>  <code>timeFunc</code>  <code>flushCallbacks</code></p>\n<p>那么 <code>nextTick</code> 方法在 <code>vue</code> 中是如何起作用的？</p>\n<p><code>nextTick</code> 方法定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cb: 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">// ctx 上下文对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb, ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    <span class=\"comment\">// callbacks 中用来存放所有 nextTick 中的 cb 函数</span></span><br><span class=\"line\">    callbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当 cb 存在的时候， 执行回调函数</span></span><br><span class=\"line\">          cb.call(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          handleError(e, ctx, <span class=\"string\">'nextTick'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 否则， 返回一个 promise</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        _resolve(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 这里保证不会执行 两次 timeFunc</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      timerFunc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">    <span class=\"comment\">// 当没有回调函数的时候， 返回一个 promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>当我们调用 nextTick 的时候， 会将回调函数存入 <code>callbacks</code> 数组中， 这个数组用来存放当前组件中使用 <code>nextTick</code> 方法时的回调函数。</p>\n<p><code>timeFunc</code> 函数：</p>\n<p> 这个函数用来在合适的时机调用 <code>nextTick</code> 中推入 <code>callback</code> 列表中的所有函数， 所有代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here we have async deferring wrappers using microtasks.</span></span><br><span class=\"line\"><span class=\"comment\">// In 2.5 we used (macro) tasks (in combination with microtasks).</span></span><br><span class=\"line\"><span class=\"comment\">// However, it has subtle problems when state is changed right before repaint</span></span><br><span class=\"line\"><span class=\"comment\">// (e.g. #6813, out-in transitions).</span></span><br><span class=\"line\"><span class=\"comment\">// Also, using (macro) tasks in event handler would cause some weird behaviors</span></span><br><span class=\"line\"><span class=\"comment\">// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).</span></span><br><span class=\"line\"><span class=\"comment\">// So we now use microtasks everywhere, again.</span></span><br><span class=\"line\"><span class=\"comment\">// A major drawback of this tradeoff is that there are some scenarios</span></span><br><span class=\"line\"><span class=\"comment\">// where microtasks have too high a priority and fire in between supposedly</span></span><br><span class=\"line\"><span class=\"comment\">// sequential events (e.g. #4521, #6690, which have workarounds)</span></span><br><span class=\"line\"><span class=\"comment\">// or even between bubbling of the same event (#6566).</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\"><span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\"><span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\"><span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\"><span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\"><span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next, $flow-disable-line */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn't completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn't being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// \"force\" the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) setTimeout(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span> &amp;&amp; (</span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">'[object MutationObserverConstructor]'</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码表明， <code>nextTick</code> 中的回调函数的执行时机优先在<code>microTask</code> 执行的时候执行， 否则， 在 宏任务的时候执行代码。</p>\n<p><code>flushCallbacks</code> 函数用来执行 <code>callbacks</code> 中存放的函数列表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushCallbacks</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在执行前， 将 pending 置为 false</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nextTick-方法\"><a href=\"#nextTick-方法\" class=\"headerlink\" title=\"nextTick 方法\"></a>nextTick 方法</h3><p><code>nextTick</code> 方法是挂载到 vue 实例上面， 我们可以通过使用 <code>this.$nextTick</code> 来使用这个方法。</p>\n<p>这个方法的作用是：</p>\n<blockquote>\n<p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上。 </p>\n</blockquote>\n<p>首先， 当我们在页面上面调用这个方法的时候， 在 <code>vue</code> 内部， 函数执行的路径是什么样的：</p>\n<p>定义 <code>nextTick</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nextTick'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看调用栈：</p>\n<img src=\"/2019/05/09/nextTick%20in%20vue/1.jpg\">\n<p>查看上面的调用栈得知， 当调用 <code>nextTick</code> 的时候，直到执行函数依次经历：</p>\n<p><code>nextTick</code>  <code>timeFunc</code>  <code>flushCallbacks</code></p>\n<p>那么 <code>nextTick</code> 方法在 <code>vue</code> 中是如何起作用的？</p>\n<p><code>nextTick</code> 方法定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cb: 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">// ctx 上下文对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextTick</span> (<span class=\"params\">cb, ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _resolve;</span><br><span class=\"line\">    <span class=\"comment\">// callbacks 中用来存放所有 nextTick 中的 cb 函数</span></span><br><span class=\"line\">    callbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 当 cb 存在的时候， 执行回调函数</span></span><br><span class=\"line\">          cb.call(ctx);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          handleError(e, ctx, <span class=\"string\">'nextTick'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 否则， 返回一个 promise</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">        _resolve(ctx);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 这里保证不会执行 两次 timeFunc</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">      pending = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      timerFunc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">    <span class=\"comment\">// 当没有回调函数的时候， 返回一个 promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        _resolve = resolve;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>当我们调用 nextTick 的时候， 会将回调函数存入 <code>callbacks</code> 数组中， 这个数组用来存放当前组件中使用 <code>nextTick</code> 方法时的回调函数。</p>\n<p><code>timeFunc</code> 函数：</p>\n<p> 这个函数用来在合适的时机调用 <code>nextTick</code> 中推入 <code>callback</code> 列表中的所有函数， 所有代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here we have async deferring wrappers using microtasks.</span></span><br><span class=\"line\"><span class=\"comment\">// In 2.5 we used (macro) tasks (in combination with microtasks).</span></span><br><span class=\"line\"><span class=\"comment\">// However, it has subtle problems when state is changed right before repaint</span></span><br><span class=\"line\"><span class=\"comment\">// (e.g. #6813, out-in transitions).</span></span><br><span class=\"line\"><span class=\"comment\">// Also, using (macro) tasks in event handler would cause some weird behaviors</span></span><br><span class=\"line\"><span class=\"comment\">// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).</span></span><br><span class=\"line\"><span class=\"comment\">// So we now use microtasks everywhere, again.</span></span><br><span class=\"line\"><span class=\"comment\">// A major drawback of this tradeoff is that there are some scenarios</span></span><br><span class=\"line\"><span class=\"comment\">// where microtasks have too high a priority and fire in between supposedly</span></span><br><span class=\"line\"><span class=\"comment\">// sequential events (e.g. #4521, #6690, which have workarounds)</span></span><br><span class=\"line\"><span class=\"comment\">// or even between bubbling of the same event (#6566).</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The nextTick behavior leverages the microtask queue, which can be accessed</span></span><br><span class=\"line\"><span class=\"comment\">// via either native Promise.then or MutationObserver.</span></span><br><span class=\"line\"><span class=\"comment\">// MutationObserver has wider support, however it is seriously bugged in</span></span><br><span class=\"line\"><span class=\"comment\">// UIWebView in iOS &gt;= 9.3.3 when triggered in touch event handlers. It</span></span><br><span class=\"line\"><span class=\"comment\">// completely stops working after triggering a few times... so, if native</span></span><br><span class=\"line\"><span class=\"comment\">// Promise is available, we will use it:</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next, $flow-disable-line */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(<span class=\"built_in\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    p.then(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn't completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn't being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// \"force\" the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) setTimeout(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> MutationObserver !== <span class=\"string\">'undefined'</span> &amp;&amp; (</span><br><span class=\"line\">  isNative(MutationObserver) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  MutationObserver.toString() === <span class=\"string\">'[object MutationObserverConstructor]'</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> MutationObserver(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createTextNode(<span class=\"built_in\">String</span>(counter))</span><br><span class=\"line\">  observer.observe(textNode, &#123;</span><br><span class=\"line\">    characterData: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.data = <span class=\"built_in\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setImmediate(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码表明， <code>nextTick</code> 中的回调函数的执行时机优先在<code>microTask</code> 执行的时候执行， 否则， 在 宏任务的时候执行代码。</p>\n<p><code>flushCallbacks</code> 函数用来执行 <code>callbacks</code> 中存放的函数列表：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushCallbacks</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在执行前， 将 pending 置为 false</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.slice(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.length = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"node.js基础.基本服务器构建","date":"2017-12-10T03:04:45.000Z","_content":"\n`node.js` 是 `javascript` 对于后端的应用, 下面是使用`node.js` 构建的一个基础的图片上传应用:\n\n应用地址[hello world](https://github.com/newPromise/node.js/tree/master/hello%20world): \n\n### 基本组成\n\n这个基本的引用由下面几个部分组成:\n\n`index.js` : 作为各个模块的入口。  \n\n`server.js` 服务器模块。  \n\n`router.js` 用于路由的存放。\n\n`requireHandler.js` 用于路由相关的动作\n\n### 模块分析\n\n#### `server.js`\n\n`server.js` 用于创建 `http` 服务器。\n\n一个基础的 `http` 服务器的构成。\n\n```javascript\nlet http = require('http');\n// request 是浏览器向服务器进行请求的相关信息\nfunction onRequest(request, response) {\n  // response 用于向对于发送信息的浏览器响应请求\n  // 规定返回响应的 头部信息\n  // 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息\n  response.writeHead(200, {\"Content-type\": \"text/plain\"});\n  // 使用 response.write 向响应的主体中发送内容\n  response.write();\n  // 结束响应请求\n  response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n\n上面的创建的基础的 `node.js` 服务器用于监听 8888 端口。\n\n`node.js` 是基于事件驱动的, 也就是我们说的 `回调`， 上面的服务器中， 只要在  `8888` 端口处监听到事件发生, 则进行回调 `onRequest` 函数。\n\n在这个应用中，这样构建服务器模块:\n\n```javascript\n// 引入 http 模块\nlet http = require('http');\n// 引入 url 模块\nlet url = require('url');\n// 创建一个 start 函数用于开启服务器\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    let pathname = url.parse(request.url).pathname;\n    route(handle, pathname, response, request);\n  }\n  http.createServer(onRequest).listen(8888);\n}\n// 导出 start 模块\nexport.start = start;\n```\n\n#### `router.js`\n\n在 `router.js` 存放在对于根据不同的路由切换函数。\n\n```javascript\nfunction route(handle, pathname, response, request) {\n  if (typeof handle[pathname] === 'function') {\n    // 执行 handle[pathname] 函数\n    // handle[pathname] 函数接收两个参数 response, request\n    // 这个启动的函数位于 requireHandler.js 中\n    handle[pathname](response, request);\n  } else {\n    // http 状态 404 not found Content-type 设置 text/plain\n    response.writeHead(404, { 'Content-type': 'text/plain' });\n    response.write('404 not found');\n    response.end();\n  }\n}\nexport.route = route;\n```\n\n#### `index.js`\n\n使用 `index.js` 用于对于各个模块进行集中处理:\n\n```javascript\n// 导入 server, router, requestHandlers 模块\n// server: 服务器模块\n// router: 路由模块\n// requestHandlers： 相应路由的处理函数模块\nlet server = require(\"./server.js\");\nlet router = require(\"./router\");\nlet requestHandlers = require(\"./requireHandlers\");\nlet handle = {};\n\n// 对于不同的路由进行不同的函数配置\nhandle['/'] = requestHandlers.start;\nhandle['/start'] = requestHandlers.start;\nhandle['/upload'] = requestHandlers.upload;\nhandle['/show'] = requestHandlers.show;\n\n// 启动服务器\nserver.start(router.route, handle);\n```\n\n#### `requireHandler.js`\n\n这个模块用来个根据不同的路由进行不同的函数处理:\n\n对于上传数据的不同处理都是放在了这里面:\n\n```javascript\nlet fs = require('fs');\n\n// 使用 formidable 用于处理文件上传的问题\nlet formidable = require('formidable');\n\nfunction start(response, request) {\n\tvar body = '<html>'+\n\t'<head>'+\n\t'<meta http-equiv=\"Content-Type\" '+\n\t'content=\"text/html; charset=UTF-8\" />'+\n\t'</head>'+\n\t'<body>'+\n\t'<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n\t'method=\"post\">'+\n\t'<input type=\"file\" name=\"upload\">'+\n\t'<input type=\"submit\" value=\"Upload file\" />'+\n\t'</form>'+\n\t'</body>'+\n\t'</html>';\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(body);\n\tresponse.end();\n}\nfunction upload(response, request) {\n\tlet form = new formidable.IncomingForm();\n\tform.parse(request, function (error, fields, files) {\n\t\tvar readStream=fs.createReadStream(files.upload.path);\n\t\tvar writeStream=fs.createWriteStream(`./assets/${files.upload.name}`);\n\t\timgname = files.upload.name;\n        readStream.pipe(writeStream);\n        readStream.on('end',function(){\n\t    fs.unlinkSync(files.upload.path);\n\t  });\n\t\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\t\tresponse.write('received image: <br/>');\n\t\tconsole.log(files.upload.name);\n        // src='/show' 调用 show 函数\n\t\tresponse.write(\"<img src='/show'/>\");\n\t\tresponse.end();\n\t});\n}\n\n// show 函数用于文件显示\nfunction show(response, postData) {\n\t// 读取文件\n\tfs.readFile(`./assets/${imgname}`, \"binary\", function (error, file) {\n\t\t// 如果发生错误\n\t\tif (error) {\n\t\t\tresponse.writeHead(500, {\"Content-Type\": \"text/plain\"});\n\t\t\tresponse.write(error + \"\\n\");\n\t\t\tresponse.end();\n\t\t} else {\n\t\t\tresponse.writeHead(200, {\"Content-Type\": \"image/png\"});\n\t\t\tresponse.write(file, \"binary\");\n\t\t\tresponse.end();\n\t\t}\n\t})\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n```\n\n### 其他\n\n关于使用 `response.write` 的问题:\n\n```javascript\nresponse.write(chunk, [encoding]);\n// encoding 表示编码形式\n```\n\n","source":"_posts/node-js基础-基本服务器构建.md","raw":"---\ntitle: node.js基础.基本服务器构建\ndate: 2017-12-10 11:04:45\ntags: node.js 基础\ncategories: node.js\n---\n\n`node.js` 是 `javascript` 对于后端的应用, 下面是使用`node.js` 构建的一个基础的图片上传应用:\n\n应用地址[hello world](https://github.com/newPromise/node.js/tree/master/hello%20world): \n\n### 基本组成\n\n这个基本的引用由下面几个部分组成:\n\n`index.js` : 作为各个模块的入口。  \n\n`server.js` 服务器模块。  \n\n`router.js` 用于路由的存放。\n\n`requireHandler.js` 用于路由相关的动作\n\n### 模块分析\n\n#### `server.js`\n\n`server.js` 用于创建 `http` 服务器。\n\n一个基础的 `http` 服务器的构成。\n\n```javascript\nlet http = require('http');\n// request 是浏览器向服务器进行请求的相关信息\nfunction onRequest(request, response) {\n  // response 用于向对于发送信息的浏览器响应请求\n  // 规定返回响应的 头部信息\n  // 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息\n  response.writeHead(200, {\"Content-type\": \"text/plain\"});\n  // 使用 response.write 向响应的主体中发送内容\n  response.write();\n  // 结束响应请求\n  response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n\n上面的创建的基础的 `node.js` 服务器用于监听 8888 端口。\n\n`node.js` 是基于事件驱动的, 也就是我们说的 `回调`， 上面的服务器中， 只要在  `8888` 端口处监听到事件发生, 则进行回调 `onRequest` 函数。\n\n在这个应用中，这样构建服务器模块:\n\n```javascript\n// 引入 http 模块\nlet http = require('http');\n// 引入 url 模块\nlet url = require('url');\n// 创建一个 start 函数用于开启服务器\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    let pathname = url.parse(request.url).pathname;\n    route(handle, pathname, response, request);\n  }\n  http.createServer(onRequest).listen(8888);\n}\n// 导出 start 模块\nexport.start = start;\n```\n\n#### `router.js`\n\n在 `router.js` 存放在对于根据不同的路由切换函数。\n\n```javascript\nfunction route(handle, pathname, response, request) {\n  if (typeof handle[pathname] === 'function') {\n    // 执行 handle[pathname] 函数\n    // handle[pathname] 函数接收两个参数 response, request\n    // 这个启动的函数位于 requireHandler.js 中\n    handle[pathname](response, request);\n  } else {\n    // http 状态 404 not found Content-type 设置 text/plain\n    response.writeHead(404, { 'Content-type': 'text/plain' });\n    response.write('404 not found');\n    response.end();\n  }\n}\nexport.route = route;\n```\n\n#### `index.js`\n\n使用 `index.js` 用于对于各个模块进行集中处理:\n\n```javascript\n// 导入 server, router, requestHandlers 模块\n// server: 服务器模块\n// router: 路由模块\n// requestHandlers： 相应路由的处理函数模块\nlet server = require(\"./server.js\");\nlet router = require(\"./router\");\nlet requestHandlers = require(\"./requireHandlers\");\nlet handle = {};\n\n// 对于不同的路由进行不同的函数配置\nhandle['/'] = requestHandlers.start;\nhandle['/start'] = requestHandlers.start;\nhandle['/upload'] = requestHandlers.upload;\nhandle['/show'] = requestHandlers.show;\n\n// 启动服务器\nserver.start(router.route, handle);\n```\n\n#### `requireHandler.js`\n\n这个模块用来个根据不同的路由进行不同的函数处理:\n\n对于上传数据的不同处理都是放在了这里面:\n\n```javascript\nlet fs = require('fs');\n\n// 使用 formidable 用于处理文件上传的问题\nlet formidable = require('formidable');\n\nfunction start(response, request) {\n\tvar body = '<html>'+\n\t'<head>'+\n\t'<meta http-equiv=\"Content-Type\" '+\n\t'content=\"text/html; charset=UTF-8\" />'+\n\t'</head>'+\n\t'<body>'+\n\t'<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n\t'method=\"post\">'+\n\t'<input type=\"file\" name=\"upload\">'+\n\t'<input type=\"submit\" value=\"Upload file\" />'+\n\t'</form>'+\n\t'</body>'+\n\t'</html>';\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(body);\n\tresponse.end();\n}\nfunction upload(response, request) {\n\tlet form = new formidable.IncomingForm();\n\tform.parse(request, function (error, fields, files) {\n\t\tvar readStream=fs.createReadStream(files.upload.path);\n\t\tvar writeStream=fs.createWriteStream(`./assets/${files.upload.name}`);\n\t\timgname = files.upload.name;\n        readStream.pipe(writeStream);\n        readStream.on('end',function(){\n\t    fs.unlinkSync(files.upload.path);\n\t  });\n\t\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\t\tresponse.write('received image: <br/>');\n\t\tconsole.log(files.upload.name);\n        // src='/show' 调用 show 函数\n\t\tresponse.write(\"<img src='/show'/>\");\n\t\tresponse.end();\n\t});\n}\n\n// show 函数用于文件显示\nfunction show(response, postData) {\n\t// 读取文件\n\tfs.readFile(`./assets/${imgname}`, \"binary\", function (error, file) {\n\t\t// 如果发生错误\n\t\tif (error) {\n\t\t\tresponse.writeHead(500, {\"Content-Type\": \"text/plain\"});\n\t\t\tresponse.write(error + \"\\n\");\n\t\t\tresponse.end();\n\t\t} else {\n\t\t\tresponse.writeHead(200, {\"Content-Type\": \"image/png\"});\n\t\t\tresponse.write(file, \"binary\");\n\t\t\tresponse.end();\n\t\t}\n\t})\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n```\n\n### 其他\n\n关于使用 `response.write` 的问题:\n\n```javascript\nresponse.write(chunk, [encoding]);\n// encoding 表示编码形式\n```\n\n","slug":"node-js基础-基本服务器构建","published":1,"updated":"2020-09-14T06:36:25.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6x001yi2osimkam60w","content":"<p><code>node.js</code> 是 <code>javascript</code> 对于后端的应用, 下面是使用<code>node.js</code> 构建的一个基础的图片上传应用:</p>\n<p>应用地址<a href=\"https://github.com/newPromise/node.js/tree/master/hello%20world\" target=\"_blank\" rel=\"noopener\">hello world</a>: </p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><p>这个基本的引用由下面几个部分组成:</p>\n<p><code>index.js</code> : 作为各个模块的入口。  </p>\n<p><code>server.js</code> 服务器模块。  </p>\n<p><code>router.js</code> 用于路由的存放。</p>\n<p><code>requireHandler.js</code> 用于路由相关的动作</p>\n<h3 id=\"模块分析\"><a href=\"#模块分析\" class=\"headerlink\" title=\"模块分析\"></a>模块分析</h3><h4 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"server.js\"></a><code>server.js</code></h4><p><code>server.js</code> 用于创建 <code>http</code> 服务器。</p>\n<p>一个基础的 <code>http</code> 服务器的构成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// request 是浏览器向服务器进行请求的相关信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// response 用于向对于发送信息的浏览器响应请求</span></span><br><span class=\"line\">  <span class=\"comment\">// 规定返回响应的 头部信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 response.write 向响应的主体中发送内容</span></span><br><span class=\"line\">  response.write();</span><br><span class=\"line\">  <span class=\"comment\">// 结束响应请求</span></span><br><span class=\"line\">  response.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的创建的基础的 <code>node.js</code> 服务器用于监听 8888 端口。</p>\n<p><code>node.js</code> 是基于事件驱动的, 也就是我们说的 <code>回调</code>， 上面的服务器中， 只要在  <code>8888</code> 端口处监听到事件发生, 则进行回调 <code>onRequest</code> 函数。</p>\n<p>在这个应用中，这样构建服务器模块:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 http 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 url 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个 start 函数用于开启服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">    route(handle, pathname, response, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 导出 start 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.start = start;</span><br></pre></td></tr></table></figure>\n<h4 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a><code>router.js</code></h4><p>在 <code>router.js</code> 存放在对于根据不同的路由切换函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 handle[pathname] 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// handle[pathname] 函数接收两个参数 response, request</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个启动的函数位于 requireHandler.js 中</span></span><br><span class=\"line\">    handle[pathname](response, request);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// http 状态 404 not found Content-type 设置 text/plain</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123; <span class=\"string\">'Content-type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    response.write(<span class=\"string\">'404 not found'</span>);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>.route = route;</span><br></pre></td></tr></table></figure>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a><code>index.js</code></h4><p>使用 <code>index.js</code> 用于对于各个模块进行集中处理:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 server, router, requestHandlers 模块</span></span><br><span class=\"line\"><span class=\"comment\">// server: 服务器模块</span></span><br><span class=\"line\"><span class=\"comment\">// router: 路由模块</span></span><br><span class=\"line\"><span class=\"comment\">// requestHandlers： 相应路由的处理函数模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requireHandlers\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于不同的路由进行不同的函数配置</span></span><br><span class=\"line\">handle[<span class=\"string\">'/'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/start'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/upload'</span>] = requestHandlers.upload;</span><br><span class=\"line\">handle[<span class=\"string\">'/show'</span>] = requestHandlers.show;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务器</span></span><br><span class=\"line\">server.start(router.route, handle);</span><br></pre></td></tr></table></figure>\n<h4 id=\"requireHandler-js\"><a href=\"#requireHandler-js\" class=\"headerlink\" title=\"requireHandler.js\"></a><code>requireHandler.js</code></h4><p>这个模块用来个根据不同的路由进行不同的函数处理:</p>\n<p>对于上传数据的不同处理都是放在了这里面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 formidable 用于处理文件上传的问题</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'method=\"post\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/form&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\tresponse.write(body);</span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(request, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, fields, files</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> readStream=fs.createReadStream(files.upload.path);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;files.upload.name&#125;</span>`</span>);</span><br><span class=\"line\">\t\timgname = files.upload.name;</span><br><span class=\"line\">        readStream.pipe(writeStream);</span><br><span class=\"line\">        readStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    fs.unlinkSync(files.upload.path);</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">'received image: &lt;br/&gt;'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(files.upload.name);</span><br><span class=\"line\">        <span class=\"comment\">// src='/show' 调用 show 函数</span></span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">\"&lt;img src='/show'/&gt;\"</span>);</span><br><span class=\"line\">\t\tresponse.end();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show 函数用于文件显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;imgname&#125;</span>`</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, file</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果发生错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(error + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(file, <span class=\"string\">\"binary\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.start = start;</span><br><span class=\"line\">exports.upload = upload;</span><br><span class=\"line\">exports.show = show;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>关于使用 <code>response.write</code> 的问题:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(chunk, [encoding]);</span><br><span class=\"line\"><span class=\"comment\">// encoding 表示编码形式</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>node.js</code> 是 <code>javascript</code> 对于后端的应用, 下面是使用<code>node.js</code> 构建的一个基础的图片上传应用:</p>\n<p>应用地址<a href=\"https://github.com/newPromise/node.js/tree/master/hello%20world\" target=\"_blank\" rel=\"noopener\">hello world</a>: </p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><p>这个基本的引用由下面几个部分组成:</p>\n<p><code>index.js</code> : 作为各个模块的入口。  </p>\n<p><code>server.js</code> 服务器模块。  </p>\n<p><code>router.js</code> 用于路由的存放。</p>\n<p><code>requireHandler.js</code> 用于路由相关的动作</p>\n<h3 id=\"模块分析\"><a href=\"#模块分析\" class=\"headerlink\" title=\"模块分析\"></a>模块分析</h3><h4 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"server.js\"></a><code>server.js</code></h4><p><code>server.js</code> 用于创建 <code>http</code> 服务器。</p>\n<p>一个基础的 <code>http</code> 服务器的构成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// request 是浏览器向服务器进行请求的相关信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// response 用于向对于发送信息的浏览器响应请求</span></span><br><span class=\"line\">  <span class=\"comment\">// 规定返回响应的 头部信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 response.write 向响应的主体中发送内容</span></span><br><span class=\"line\">  response.write();</span><br><span class=\"line\">  <span class=\"comment\">// 结束响应请求</span></span><br><span class=\"line\">  response.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的创建的基础的 <code>node.js</code> 服务器用于监听 8888 端口。</p>\n<p><code>node.js</code> 是基于事件驱动的, 也就是我们说的 <code>回调</code>， 上面的服务器中， 只要在  <code>8888</code> 端口处监听到事件发生, 则进行回调 <code>onRequest</code> 函数。</p>\n<p>在这个应用中，这样构建服务器模块:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 http 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 url 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个 start 函数用于开启服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">    route(handle, pathname, response, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 导出 start 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.start = start;</span><br></pre></td></tr></table></figure>\n<h4 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a><code>router.js</code></h4><p>在 <code>router.js</code> 存放在对于根据不同的路由切换函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 handle[pathname] 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// handle[pathname] 函数接收两个参数 response, request</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个启动的函数位于 requireHandler.js 中</span></span><br><span class=\"line\">    handle[pathname](response, request);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// http 状态 404 not found Content-type 设置 text/plain</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123; <span class=\"string\">'Content-type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    response.write(<span class=\"string\">'404 not found'</span>);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>.route = route;</span><br></pre></td></tr></table></figure>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a><code>index.js</code></h4><p>使用 <code>index.js</code> 用于对于各个模块进行集中处理:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 server, router, requestHandlers 模块</span></span><br><span class=\"line\"><span class=\"comment\">// server: 服务器模块</span></span><br><span class=\"line\"><span class=\"comment\">// router: 路由模块</span></span><br><span class=\"line\"><span class=\"comment\">// requestHandlers： 相应路由的处理函数模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requireHandlers\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于不同的路由进行不同的函数配置</span></span><br><span class=\"line\">handle[<span class=\"string\">'/'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/start'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/upload'</span>] = requestHandlers.upload;</span><br><span class=\"line\">handle[<span class=\"string\">'/show'</span>] = requestHandlers.show;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务器</span></span><br><span class=\"line\">server.start(router.route, handle);</span><br></pre></td></tr></table></figure>\n<h4 id=\"requireHandler-js\"><a href=\"#requireHandler-js\" class=\"headerlink\" title=\"requireHandler.js\"></a><code>requireHandler.js</code></h4><p>这个模块用来个根据不同的路由进行不同的函数处理:</p>\n<p>对于上传数据的不同处理都是放在了这里面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 formidable 用于处理文件上传的问题</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'method=\"post\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/form&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\tresponse.write(body);</span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(request, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, fields, files</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> readStream=fs.createReadStream(files.upload.path);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;files.upload.name&#125;</span>`</span>);</span><br><span class=\"line\">\t\timgname = files.upload.name;</span><br><span class=\"line\">        readStream.pipe(writeStream);</span><br><span class=\"line\">        readStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    fs.unlinkSync(files.upload.path);</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">'received image: &lt;br/&gt;'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(files.upload.name);</span><br><span class=\"line\">        <span class=\"comment\">// src='/show' 调用 show 函数</span></span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">\"&lt;img src='/show'/&gt;\"</span>);</span><br><span class=\"line\">\t\tresponse.end();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show 函数用于文件显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;imgname&#125;</span>`</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, file</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果发生错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(error + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(file, <span class=\"string\">\"binary\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.start = start;</span><br><span class=\"line\">exports.upload = upload;</span><br><span class=\"line\">exports.show = show;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>关于使用 <code>response.write</code> 的问题:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(chunk, [encoding]);</span><br><span class=\"line\"><span class=\"comment\">// encoding 表示编码形式</span></span><br></pre></td></tr></table></figure>\n"},{"title":"node.js EventEmitter","date":"2017-12-17T13:46:19.000Z","_content":"\n## `EventEmitter`\n\n####  基本构建\n\n许多的 `node.js` 核心的 `API` 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 `listeners`;\n\n所有的触发事件的对象属于 `EventEmitter` 类， 这些对象暴露有 `emit` 以及 `on` 方法。\n\n```javascript\nlet eventEmitter = require('events');\nlet myEmitter = new eventEmitter();\n// listeners\nmyEmitter.on('event', () => {\n  console.log('event');\n});\n// emitters\nmyEmitter.emit('event'); // event\n```\n\n##### 向 `lisitens` 传递 `arguments` 以及 `this` 值 \n\n```javascript\nmyEmitter.on('event', function (msg) {\n  console.log(`my name is ${msg}`);\n  console.log('被传递的值', this);\n});\nmyEmitter.emit('event', '张宁宁');\n// my name is 张宁宁\n// this 值指向的值是 eventEmitter 对象\n```\n\n####  handle event only once\n\n使用 `once` 函数的时候, 当使用 `emit` 的时候只会被触发一次\n\n```\nmyEmitter.once('event', () => {\n  console.log('事件被触发一次');\n});\nmyEmitter.emit('event');\n// '事件触发一次'\nmyEmitter.emit('event');\n```\n\n#### some API\n\n##### `Event: newListener`  \n\n在监听器被加入到监听器队列之前，`EventEmitter` 实例会触发自己的 `newListener` 事件。\n\n```javascript\nconst myEmitter = new EventEmitter();\nmyEmitter.once('newListener', (event, listener) => {\n  if (event === 'event') {\n    myEmitter.on('event', () => {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () => {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// B\n// A\n// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A\n```\n\n##### `EventEmitter.listenerCount(emitter, eventName)`\n\n用来获得在 `emitter` 上面注册的 `eventName` 的次数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(EventEmitter.listenerCount(myEmitter, 'event')); // 2\n```\n\n##### `emitter.eventNames()`\n\n用来获得 `emitter` 上面注册的 `listeners` 的事件列表。  \n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('a', () => {});\nmyEmitter.on('b', () => {});\nconsole.log(myEmitter.eventNames); // ['a', 'b']\n```\n\n##### `emitter.listenerCount(eventName)`\n\n`eventName` :  the name of the event being listened for\n\n作用和 `EventEmitter.listenerCount(emitter, eventName)` 是相同的。  \n\n#####  `emitter.listeners(eventName)`\n\n用于获得 `emitter` 上 `eventName` 事件的注册函数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\n// 使用 emitter.listeners(eventName)\n// 用于获得 emitter 上面的 eventName 上注册的函数\nconsole.log(myEmitter.listeners('event'));\n// [[Function], [Function]]\n```\n\n##### `emitter.on(eventName, listener)`  \n\n向一个被称作 `eventName` 的事件`listener` 的列表之中添加事件， 添加的事件被添加到 `listener` 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。\n\n#####  `emitter.prependListener(eventName, listener)`\n\n将 `listener` function 添加到事件队列的开头\n\n```javascript\n\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第一次');\n});\nmyEmitter.prependListener('otherEvent', () => {\n\tconsole.log('第三次');\n});\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第二次');\n});\nmyEmitter.emit('otherEvent');\n// 第三次\n// 第一次\n// 第二次\n```\n\n#### `emitter.prependOnceListener(eventName, listener)`  \n\n仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除\n\n##### `emitter.removeAllListeners([eventName])`\n\n移除 `eventName` 事件上的所有函数。  \n\n##### `emitter.removeListener(eventName, listener)`  \n\n>removes the specified listener from the listener array for the event named eventName\n\n使用 `removeListener` 的时候将会移除事件队列中至多一个`instance` (实例), 如果一个 单独的监听器被多次添加，那么使用 `removeListener` 需要多次调用才能被多次删除。  \n\n从被称作 `eventName` 的事件队列中移除掉特定的事件函数。\n\n*注意*:\n\n>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 `listeners` 将会被调用， 这表明， 在 `listeners` 被 `emit` 之后，在 `listeners` 中的最后一个函数被执行之前， 使用 `removeListenr()` 或者 `removeAllListeners` 都不会起作用   \n\n也就是说， 使用使用移除事件的时候是不会在 `listeners` 函数执行的过程中被调用的。  \n\n例子如下:\n\n```javascript\nconst callBackA = () => {\n\tconsole.log('A');\n\tmyEmitter.removeListener('callback', callBackB);\n};\n\nconst callBackB = () => {\n\tconsole.log('B');\n};\n\nmyEmitter.on('callback', callBackA);\nmyEmitter.on('callback', callBackB);\n\nmyEmitter.emit('callback'); // 这一次调用的时候是不会移除掉 B 的\nmyEmitter.emit('callback');// 这一次调用的时候移除掉了 B\n// A B A\nmyEmitter.listeners() // [[Function: callbackA]]\n```\n\n因为对于 `listeners` 而言, 是通过使用内部的数组进行管理的,  当其中的 `listener` 被移除之后，会改变每一个注册的 `listern` 位置， 但是不会影响 `listener` 被调用的顺序，  但是通过使用 `emitter.listeners()` 返回的调用函数数组队列将会发生变化。\n\n ","source":"_posts/node-js-EventEmitter.md","raw":"---\ntitle: node.js EventEmitter\ndate: 2017-12-17 21:46:19\ntags: EventEmitter\ncategories: node.js\n---\n\n## `EventEmitter`\n\n####  基本构建\n\n许多的 `node.js` 核心的 `API` 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 `listeners`;\n\n所有的触发事件的对象属于 `EventEmitter` 类， 这些对象暴露有 `emit` 以及 `on` 方法。\n\n```javascript\nlet eventEmitter = require('events');\nlet myEmitter = new eventEmitter();\n// listeners\nmyEmitter.on('event', () => {\n  console.log('event');\n});\n// emitters\nmyEmitter.emit('event'); // event\n```\n\n##### 向 `lisitens` 传递 `arguments` 以及 `this` 值 \n\n```javascript\nmyEmitter.on('event', function (msg) {\n  console.log(`my name is ${msg}`);\n  console.log('被传递的值', this);\n});\nmyEmitter.emit('event', '张宁宁');\n// my name is 张宁宁\n// this 值指向的值是 eventEmitter 对象\n```\n\n####  handle event only once\n\n使用 `once` 函数的时候, 当使用 `emit` 的时候只会被触发一次\n\n```\nmyEmitter.once('event', () => {\n  console.log('事件被触发一次');\n});\nmyEmitter.emit('event');\n// '事件触发一次'\nmyEmitter.emit('event');\n```\n\n#### some API\n\n##### `Event: newListener`  \n\n在监听器被加入到监听器队列之前，`EventEmitter` 实例会触发自己的 `newListener` 事件。\n\n```javascript\nconst myEmitter = new EventEmitter();\nmyEmitter.once('newListener', (event, listener) => {\n  if (event === 'event') {\n    myEmitter.on('event', () => {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () => {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// B\n// A\n// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A\n```\n\n##### `EventEmitter.listenerCount(emitter, eventName)`\n\n用来获得在 `emitter` 上面注册的 `eventName` 的次数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(EventEmitter.listenerCount(myEmitter, 'event')); // 2\n```\n\n##### `emitter.eventNames()`\n\n用来获得 `emitter` 上面注册的 `listeners` 的事件列表。  \n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('a', () => {});\nmyEmitter.on('b', () => {});\nconsole.log(myEmitter.eventNames); // ['a', 'b']\n```\n\n##### `emitter.listenerCount(eventName)`\n\n`eventName` :  the name of the event being listened for\n\n作用和 `EventEmitter.listenerCount(emitter, eventName)` 是相同的。  \n\n#####  `emitter.listeners(eventName)`\n\n用于获得 `emitter` 上 `eventName` 事件的注册函数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\n// 使用 emitter.listeners(eventName)\n// 用于获得 emitter 上面的 eventName 上注册的函数\nconsole.log(myEmitter.listeners('event'));\n// [[Function], [Function]]\n```\n\n##### `emitter.on(eventName, listener)`  \n\n向一个被称作 `eventName` 的事件`listener` 的列表之中添加事件， 添加的事件被添加到 `listener` 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。\n\n#####  `emitter.prependListener(eventName, listener)`\n\n将 `listener` function 添加到事件队列的开头\n\n```javascript\n\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第一次');\n});\nmyEmitter.prependListener('otherEvent', () => {\n\tconsole.log('第三次');\n});\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第二次');\n});\nmyEmitter.emit('otherEvent');\n// 第三次\n// 第一次\n// 第二次\n```\n\n#### `emitter.prependOnceListener(eventName, listener)`  \n\n仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除\n\n##### `emitter.removeAllListeners([eventName])`\n\n移除 `eventName` 事件上的所有函数。  \n\n##### `emitter.removeListener(eventName, listener)`  \n\n>removes the specified listener from the listener array for the event named eventName\n\n使用 `removeListener` 的时候将会移除事件队列中至多一个`instance` (实例), 如果一个 单独的监听器被多次添加，那么使用 `removeListener` 需要多次调用才能被多次删除。  \n\n从被称作 `eventName` 的事件队列中移除掉特定的事件函数。\n\n*注意*:\n\n>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 `listeners` 将会被调用， 这表明， 在 `listeners` 被 `emit` 之后，在 `listeners` 中的最后一个函数被执行之前， 使用 `removeListenr()` 或者 `removeAllListeners` 都不会起作用   \n\n也就是说， 使用使用移除事件的时候是不会在 `listeners` 函数执行的过程中被调用的。  \n\n例子如下:\n\n```javascript\nconst callBackA = () => {\n\tconsole.log('A');\n\tmyEmitter.removeListener('callback', callBackB);\n};\n\nconst callBackB = () => {\n\tconsole.log('B');\n};\n\nmyEmitter.on('callback', callBackA);\nmyEmitter.on('callback', callBackB);\n\nmyEmitter.emit('callback'); // 这一次调用的时候是不会移除掉 B 的\nmyEmitter.emit('callback');// 这一次调用的时候移除掉了 B\n// A B A\nmyEmitter.listeners() // [[Function: callbackA]]\n```\n\n因为对于 `listeners` 而言, 是通过使用内部的数组进行管理的,  当其中的 `listener` 被移除之后，会改变每一个注册的 `listern` 位置， 但是不会影响 `listener` 被调用的顺序，  但是通过使用 `emitter.listeners()` 返回的调用函数数组队列将会发生变化。\n\n ","slug":"node-js-EventEmitter","published":1,"updated":"2020-09-14T06:36:25.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t6z0022i2os1vlt6z19","content":"<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a><code>EventEmitter</code></h2><h4 id=\"基本构建\"><a href=\"#基本构建\" class=\"headerlink\" title=\"基本构建\"></a>基本构建</h4><p>许多的 <code>node.js</code> 核心的 <code>API</code> 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 <code>listeners</code>;</p>\n<p>所有的触发事件的对象属于 <code>EventEmitter</code> 类， 这些对象暴露有 <code>emit</code> 以及 <code>on</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> eventEmitter();</span><br><span class=\"line\"><span class=\"comment\">// listeners</span></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// emitters</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>); <span class=\"comment\">// event</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"向-lisitens-传递-arguments-以及-this-值\"><a href=\"#向-lisitens-传递-arguments-以及-this-值\" class=\"headerlink\" title=\"向 lisitens 传递 arguments 以及 this 值\"></a>向 <code>lisitens</code> 传递 <code>arguments</code> 以及 <code>this</code> 值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'被传递的值'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>, <span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\"><span class=\"comment\">// my name is 张宁宁</span></span><br><span class=\"line\"><span class=\"comment\">// this 值指向的值是 eventEmitter 对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"handle-event-only-once\"><a href=\"#handle-event-only-once\" class=\"headerlink\" title=\"handle event only once\"></a>handle event only once</h4><p>使用 <code>once</code> 函数的时候, 当使用 <code>emit</code> 的时候只会被触发一次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.once(&apos;event&apos;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;事件被触发一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br><span class=\"line\">// &apos;事件触发一次&apos;</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"some-API\"><a href=\"#some-API\" class=\"headerlink\" title=\"some API\"></a>some API</h4><h5 id=\"Event-newListener\"><a href=\"#Event-newListener\" class=\"headerlink\" title=\"Event: newListener\"></a><code>Event: newListener</code></h5><p>在监听器被加入到监听器队列之前，<code>EventEmitter</code> 实例会触发自己的 <code>newListener</code> 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.once(<span class=\"string\">'newListener'</span>, (event, listener) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event === <span class=\"string\">'event'</span>) &#123;</span><br><span class=\"line\">    myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\"><span class=\"comment\">// B</span></span><br><span class=\"line\"><span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"comment\">// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"EventEmitter-listenerCount-emitter-eventName\"><a href=\"#EventEmitter-listenerCount-emitter-eventName\" class=\"headerlink\" title=\"EventEmitter.listenerCount(emitter, eventName)\"></a><code>EventEmitter.listenerCount(emitter, eventName)</code></h5><p>用来获得在 <code>emitter</code> 上面注册的 <code>eventName</code> 的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(myEmitter, <span class=\"string\">'event'</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-eventNames\"><a href=\"#emitter-eventNames\" class=\"headerlink\" title=\"emitter.eventNames()\"></a><code>emitter.eventNames()</code></h5><p>用来获得 <code>emitter</code> 上面注册的 <code>listeners</code> 的事件列表。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'a'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'b'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.eventNames); <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-listenerCount-eventName\"><a href=\"#emitter-listenerCount-eventName\" class=\"headerlink\" title=\"emitter.listenerCount(eventName)\"></a><code>emitter.listenerCount(eventName)</code></h5><p><code>eventName</code> :  the name of the event being listened for</p>\n<p>作用和 <code>EventEmitter.listenerCount(emitter, eventName)</code> 是相同的。  </p>\n<h5 id=\"emitter-listeners-eventName\"><a href=\"#emitter-listeners-eventName\" class=\"headerlink\" title=\"emitter.listeners(eventName)\"></a><code>emitter.listeners(eventName)</code></h5><p>用于获得 <code>emitter</code> 上 <code>eventName</code> 事件的注册函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用 emitter.listeners(eventName)</span></span><br><span class=\"line\"><span class=\"comment\">// 用于获得 emitter 上面的 eventName 上注册的函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.listeners(<span class=\"string\">'event'</span>));</span><br><span class=\"line\"><span class=\"comment\">// [[Function], [Function]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-on-eventName-listener\"><a href=\"#emitter-on-eventName-listener\" class=\"headerlink\" title=\"emitter.on(eventName, listener)\"></a><code>emitter.on(eventName, listener)</code></h5><p>向一个被称作 <code>eventName</code> 的事件<code>listener</code> 的列表之中添加事件， 添加的事件被添加到 <code>listener</code> 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。</p>\n<h5 id=\"emitter-prependListener-eventName-listener\"><a href=\"#emitter-prependListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependListener(eventName, listener)\"></a><code>emitter.prependListener(eventName, listener)</code></h5><p>将 <code>listener</code> function 添加到事件队列的开头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第一次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.prependListener(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第三次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第二次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'otherEvent'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第三次</span></span><br><span class=\"line\"><span class=\"comment\">// 第一次</span></span><br><span class=\"line\"><span class=\"comment\">// 第二次</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"emitter-prependOnceListener-eventName-listener\"><a href=\"#emitter-prependOnceListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependOnceListener(eventName, listener)\"></a><code>emitter.prependOnceListener(eventName, listener)</code></h4><p>仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除</p>\n<h5 id=\"emitter-removeAllListeners-eventName\"><a href=\"#emitter-removeAllListeners-eventName\" class=\"headerlink\" title=\"emitter.removeAllListeners([eventName])\"></a><code>emitter.removeAllListeners([eventName])</code></h5><p>移除 <code>eventName</code> 事件上的所有函数。  </p>\n<h5 id=\"emitter-removeListener-eventName-listener\"><a href=\"#emitter-removeListener-eventName-listener\" class=\"headerlink\" title=\"emitter.removeListener(eventName, listener)\"></a><code>emitter.removeListener(eventName, listener)</code></h5><blockquote>\n<p>removes the specified listener from the listener array for the event named eventName</p>\n</blockquote>\n<p>使用 <code>removeListener</code> 的时候将会移除事件队列中至多一个<code>instance</code> (实例), 如果一个 单独的监听器被多次添加，那么使用 <code>removeListener</code> 需要多次调用才能被多次删除。  </p>\n<p>从被称作 <code>eventName</code> 的事件队列中移除掉特定的事件函数。</p>\n<p><em>注意</em>:</p>\n<blockquote>\n<p>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 <code>listeners</code> 将会被调用， 这表明， 在 <code>listeners</code> 被 <code>emit</code> 之后，在 <code>listeners</code> 中的最后一个函数被执行之前， 使用 <code>removeListenr()</code> 或者 <code>removeAllListeners</code> 都不会起作用   </p>\n</blockquote>\n<p>也就是说， 使用使用移除事件的时候是不会在 <code>listeners</code> 函数执行的过程中被调用的。  </p>\n<p>例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callBackA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">\tmyEmitter.removeListener(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callBackB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackA);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>); <span class=\"comment\">// 这一次调用的时候是不会移除掉 B 的</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>);<span class=\"comment\">// 这一次调用的时候移除掉了 B</span></span><br><span class=\"line\"><span class=\"comment\">// A B A</span></span><br><span class=\"line\">myEmitter.listeners() <span class=\"comment\">// [[Function: callbackA]]</span></span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>listeners</code> 而言, 是通过使用内部的数组进行管理的,  当其中的 <code>listener</code> 被移除之后，会改变每一个注册的 <code>listern</code> 位置， 但是不会影响 <code>listener</code> 被调用的顺序，  但是通过使用 <code>emitter.listeners()</code> 返回的调用函数数组队列将会发生变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a><code>EventEmitter</code></h2><h4 id=\"基本构建\"><a href=\"#基本构建\" class=\"headerlink\" title=\"基本构建\"></a>基本构建</h4><p>许多的 <code>node.js</code> 核心的 <code>API</code> 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 <code>listeners</code>;</p>\n<p>所有的触发事件的对象属于 <code>EventEmitter</code> 类， 这些对象暴露有 <code>emit</code> 以及 <code>on</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> eventEmitter();</span><br><span class=\"line\"><span class=\"comment\">// listeners</span></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// emitters</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>); <span class=\"comment\">// event</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"向-lisitens-传递-arguments-以及-this-值\"><a href=\"#向-lisitens-传递-arguments-以及-this-值\" class=\"headerlink\" title=\"向 lisitens 传递 arguments 以及 this 值\"></a>向 <code>lisitens</code> 传递 <code>arguments</code> 以及 <code>this</code> 值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'被传递的值'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>, <span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\"><span class=\"comment\">// my name is 张宁宁</span></span><br><span class=\"line\"><span class=\"comment\">// this 值指向的值是 eventEmitter 对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"handle-event-only-once\"><a href=\"#handle-event-only-once\" class=\"headerlink\" title=\"handle event only once\"></a>handle event only once</h4><p>使用 <code>once</code> 函数的时候, 当使用 <code>emit</code> 的时候只会被触发一次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.once(&apos;event&apos;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;事件被触发一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br><span class=\"line\">// &apos;事件触发一次&apos;</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"some-API\"><a href=\"#some-API\" class=\"headerlink\" title=\"some API\"></a>some API</h4><h5 id=\"Event-newListener\"><a href=\"#Event-newListener\" class=\"headerlink\" title=\"Event: newListener\"></a><code>Event: newListener</code></h5><p>在监听器被加入到监听器队列之前，<code>EventEmitter</code> 实例会触发自己的 <code>newListener</code> 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.once(<span class=\"string\">'newListener'</span>, (event, listener) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event === <span class=\"string\">'event'</span>) &#123;</span><br><span class=\"line\">    myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\"><span class=\"comment\">// B</span></span><br><span class=\"line\"><span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"comment\">// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"EventEmitter-listenerCount-emitter-eventName\"><a href=\"#EventEmitter-listenerCount-emitter-eventName\" class=\"headerlink\" title=\"EventEmitter.listenerCount(emitter, eventName)\"></a><code>EventEmitter.listenerCount(emitter, eventName)</code></h5><p>用来获得在 <code>emitter</code> 上面注册的 <code>eventName</code> 的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(myEmitter, <span class=\"string\">'event'</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-eventNames\"><a href=\"#emitter-eventNames\" class=\"headerlink\" title=\"emitter.eventNames()\"></a><code>emitter.eventNames()</code></h5><p>用来获得 <code>emitter</code> 上面注册的 <code>listeners</code> 的事件列表。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'a'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'b'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.eventNames); <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-listenerCount-eventName\"><a href=\"#emitter-listenerCount-eventName\" class=\"headerlink\" title=\"emitter.listenerCount(eventName)\"></a><code>emitter.listenerCount(eventName)</code></h5><p><code>eventName</code> :  the name of the event being listened for</p>\n<p>作用和 <code>EventEmitter.listenerCount(emitter, eventName)</code> 是相同的。  </p>\n<h5 id=\"emitter-listeners-eventName\"><a href=\"#emitter-listeners-eventName\" class=\"headerlink\" title=\"emitter.listeners(eventName)\"></a><code>emitter.listeners(eventName)</code></h5><p>用于获得 <code>emitter</code> 上 <code>eventName</code> 事件的注册函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用 emitter.listeners(eventName)</span></span><br><span class=\"line\"><span class=\"comment\">// 用于获得 emitter 上面的 eventName 上注册的函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.listeners(<span class=\"string\">'event'</span>));</span><br><span class=\"line\"><span class=\"comment\">// [[Function], [Function]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-on-eventName-listener\"><a href=\"#emitter-on-eventName-listener\" class=\"headerlink\" title=\"emitter.on(eventName, listener)\"></a><code>emitter.on(eventName, listener)</code></h5><p>向一个被称作 <code>eventName</code> 的事件<code>listener</code> 的列表之中添加事件， 添加的事件被添加到 <code>listener</code> 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。</p>\n<h5 id=\"emitter-prependListener-eventName-listener\"><a href=\"#emitter-prependListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependListener(eventName, listener)\"></a><code>emitter.prependListener(eventName, listener)</code></h5><p>将 <code>listener</code> function 添加到事件队列的开头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第一次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.prependListener(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第三次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第二次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'otherEvent'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第三次</span></span><br><span class=\"line\"><span class=\"comment\">// 第一次</span></span><br><span class=\"line\"><span class=\"comment\">// 第二次</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"emitter-prependOnceListener-eventName-listener\"><a href=\"#emitter-prependOnceListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependOnceListener(eventName, listener)\"></a><code>emitter.prependOnceListener(eventName, listener)</code></h4><p>仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除</p>\n<h5 id=\"emitter-removeAllListeners-eventName\"><a href=\"#emitter-removeAllListeners-eventName\" class=\"headerlink\" title=\"emitter.removeAllListeners([eventName])\"></a><code>emitter.removeAllListeners([eventName])</code></h5><p>移除 <code>eventName</code> 事件上的所有函数。  </p>\n<h5 id=\"emitter-removeListener-eventName-listener\"><a href=\"#emitter-removeListener-eventName-listener\" class=\"headerlink\" title=\"emitter.removeListener(eventName, listener)\"></a><code>emitter.removeListener(eventName, listener)</code></h5><blockquote>\n<p>removes the specified listener from the listener array for the event named eventName</p>\n</blockquote>\n<p>使用 <code>removeListener</code> 的时候将会移除事件队列中至多一个<code>instance</code> (实例), 如果一个 单独的监听器被多次添加，那么使用 <code>removeListener</code> 需要多次调用才能被多次删除。  </p>\n<p>从被称作 <code>eventName</code> 的事件队列中移除掉特定的事件函数。</p>\n<p><em>注意</em>:</p>\n<blockquote>\n<p>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 <code>listeners</code> 将会被调用， 这表明， 在 <code>listeners</code> 被 <code>emit</code> 之后，在 <code>listeners</code> 中的最后一个函数被执行之前， 使用 <code>removeListenr()</code> 或者 <code>removeAllListeners</code> 都不会起作用   </p>\n</blockquote>\n<p>也就是说， 使用使用移除事件的时候是不会在 <code>listeners</code> 函数执行的过程中被调用的。  </p>\n<p>例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callBackA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">\tmyEmitter.removeListener(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callBackB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackA);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>); <span class=\"comment\">// 这一次调用的时候是不会移除掉 B 的</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>);<span class=\"comment\">// 这一次调用的时候移除掉了 B</span></span><br><span class=\"line\"><span class=\"comment\">// A B A</span></span><br><span class=\"line\">myEmitter.listeners() <span class=\"comment\">// [[Function: callbackA]]</span></span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>listeners</code> 而言, 是通过使用内部的数组进行管理的,  当其中的 <code>listener</code> 被移除之后，会改变每一个注册的 <code>listern</code> 位置， 但是不会影响 <code>listener</code> 被调用的顺序，  但是通过使用 <code>emitter.listeners()</code> 返回的调用函数数组队列将会发生变化。</p>\n"},{"title":"promise 原理","date":"2017-12-05T15:04:14.000Z","_content":"\n使用 `promise` 构建异步请求在 `es6-promise` 中已经说过了，下面这章想要探究一下使用 `promise ` 的原理。\n\n使用 `promise `  的实例如下:\n\n`new Promise(function (resolve, reject) {....})`\n\n对于 `promise` 的执行过程是这样的:\n\n>executor 执行器:\n>\n>executor 是一个带有  `resolve` 和 `reject` 两个参数的函数, `executor` 函数 `promise` 构造函数执行的时候同步执行， 被传递 `resolve` 以及 `reject` 函数，`executor` 函数在 `Promise` 构造函数返回新建对象前被调用, `resolve` 和 `reject` 函数被调用的时候，分别将 `promise` 的状态改为 `fullfilled(完成)` 和 \n>\n>`rejected(完成)` `executor` 函数内部会执行异步操作，操作完成成功之后将 `promise` 状态改为 `fullfiled` 或者将发生错误的时候, 将  状态变为 `rejected`\n\n对于一个 `promise ` 对象具有下面三种状态:\n\n```javascript\npending: 初始状态，不是成功就是失败 // pending 英文: 等待，表示处于等待异步处理结果的状态\nfufilled 等待结果操作成功完成\nrejected 表示等待操作结果失败\n```\n\n下面是通过使用 `promise` 进行调用的状态图:\n\n!['promise 状态'](https://mdn.mozillademos.org/files/8633/promises.png)\n\n###  `promise` 代码\n\n#### 构建 `Promise` 构造函数\n\n`es6`:\n\n```javascript\nlet p = new Promise((resovle, reject) => {\n  // 异步操作\n  if () {\n  // resolve(value)    \n    resolve(value);\n  } else {\n // reject(value)      \n    reject(value);\n  }\n})\n```\n\n实际源码:\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n#####  改变状态函数\n\n`es6`:\n\n```javascript\nresolve(value);\n\nreject(value);\n```\n\n实际源码:\n\n```javascript\nPromise.prototpe.transition = function (status, value) {\n  if (this.status === PENDING) {\n    // 当处于 PENDDING 状态的时候执行函数\n    this.status = status;\n    this.value = value;\n    // 当成功或者失败的时候都会执行 this.process() 函数\n    this.process();\n  }\n}\n```\n\n#### `then` \n\n`es6`: \n\n```javascript\np.then(onFulFilled, onRejected);\n// onFulFilled 成功之后执行的函数\n// onRejected 失败之后执行的函数\n```\n\n源码分析:\n\n```javascript\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  // thenPromise 是一个新的 Promise 对象\n  let thenPromsie = new Promise(function() {});\n  // 将执行的函数存入到 handlerQueue 数组之中\n  this.handlerQueue.push({\n    // 成功函数\n    onFulfilled,\n    // 失败函数\n    onRejected,\n    thenPromise\n  });\n  // this.process() 执行函数\n  this.process();\n  // 返回 thenPromise 一个新的 promise 对象\n  return thenPromise;\n}\n```\n\n####  `process`处理函数\n\n用来执行成功时的回调函数以及失败的回调函数。  \n\n`es6`:  \n\n```javascript\np.then(function () {\n  // 成功函数执行\n}, function () {\n  // 失败函数执行\n})\n```\n\n源码如下:\n\n```javascript\n// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数\nPromise.prototype.process = function () {\n  let that = this;\n  // 如果状态处于 PENDING 状态 返回\n  if (that.status === PENDING) {\n    return;\n  }\n  while (that.handlerQueeu.length > 0) {\n    let handler = that.handlerQueue.shift();\n    (function (handler) {\n      let handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;\n      // 如果 handlerFn 是一个函数\n      if (isFunction(handlerFn)) {\n        // 使用 callLater 回调函数执行\n        callLater(function () {\n          try {\n            // 执行 handlerFn 函数\n            let x = handlerFn(that.value);\n            // 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数\n            resolve(handler.thenPromise, x);\n          } catch (e) {\n            // 如果 catch error\n            handler.thenPromise.transition(REJECTED, e);\n          }\n        });\n      } else {\n        handler.thenPromise.transition(that.status, that.value);\n      }\n    })(handler);\n  }\n}\n```\n\n#### `resolve`\n\n`resovle` 函数用于函数执行完毕之后改变状态:\n\n```javascript\nfunction resovle(promise, x) {\n  if (promise === x) {\n    promise.transition(REJECTED, new TypeError());\n    // 如果 x 是一个 promise\n  } else if (isPromise(x)) {\n    // 调用 x 的 then 方法\n    x.then(function(value) {\n      promise.transition(FULFILLED, value);\n    }, function(reason) {\n      promise.transition(REJECTED, reason);\n    } );\n    // 如果函数执行之后的返回值是一个对象或者一个函数\n  } else if (isObject(x) || isFunction(x)) {\n    try {\n      let then = x.then;\n      // 如果 then 是一个函数\n      // 参数具有 then 方法的对象\n      if (isFunction(then)) {\n        let called = false;\n        try {\n          then.call(x, function(y) {\n            if (!called) {\n              resolve(promise, y);\n              called = true;\n            }\n          }, function (r) {\n            if (!called) {\n              promise.transition(REJECTED, r);\n              called = true;\n            }\n          });\n        } catch (e) {\n          if (!called) {\n            promise.transition(REJECTED, e);\n          }\n        }\n      } else {\n        promise.transition(FULFILLED, x);\n      }\n    } catch (e) {\n      promise.transition(REJECTED, x);\n    }\n  // 如果 x 只是一个数值  \n  } else {\n    promise.transition(FULFILLED, x);\n  }\n}\n```\n\n####  `promsie.resolve`\n\n>对于 `promise.resolve` 的状态，存在下面几种情况:\n>\n>1. 如果参数是 Promise 实例，那么`Promise.resolve`将不做任何修改、原封不动地返回这个实例。\n>2. 如果参数是一个具有 `then` 方法的对象, 使用 `promise.resolve` 会将这个对象转化为 `promise` 对象，并且立即执行 `thenable` 对象的 `then` 方法。\n>3. 如果参数是一个原始值，或者是一个不具有`then`方法的对象，则`Promise.resolve`方法返回一个新的 Promise 对象，状态为`resolved`。\n>4. 如果不带参数, 直接返回一个 `resolve` 状态的 Promise 对象。\n\n实现代码如下:\n\n```javascript\nPromise.resolve = function(value) {\n  // 返回一个 new Promise\n  return new Promise(function(resolve, reject) {\n    if (isThenable(value)) {\n      // 如果 value 是一个 then 对象\n      // 如果 value 具有 then 方法，执行下面的函数\n      value.then(resolve, reject);\n    } else {\n      // else 执行 resolve 函数\n      resolve(value);\n    }\n  });\n}\n```\n\n####  `promise.reject`\n\n```javascript\nPromise.reject = function(reason) {\n  return new Promise(function(resolve, reject) {\n    reject(reason);\n  }}\n}\n```\n\n使用 `Promise.reject` 接收的参数 `reason `会被作为 `error` 传递 \n\n####  other\n\n```javascript\n// 定义 promise 的三种状态\n// PENDING, FULFILLED  REJECTED\nlet PENDING = 0;\n    FULFILLED = 1;\n    REJECTED = 2;\nfunction isFunction(fn) {\n  return fn instanceof Function;\n}\n\nfunction isObject(obj) {\n  return obj instanceof Object;\n}\n\nfunction isPromise() {\n  return p instanceof Promise;\n}\n\nfunction isThenable(obj) {\n  return obj && isFunction(obj.then);\n}\n// 借用 callLater 实现异步\nfunction callLater(fn) {\n  setTimeout(fn, 0);\n}\n```\n\n","source":"_posts/promise.md","raw":"---\ntitle: promise 原理\ndate: 2017-12-05 23:04:14\ntags: promise\ncategories: 代码集\n---\n\n使用 `promise` 构建异步请求在 `es6-promise` 中已经说过了，下面这章想要探究一下使用 `promise ` 的原理。\n\n使用 `promise `  的实例如下:\n\n`new Promise(function (resolve, reject) {....})`\n\n对于 `promise` 的执行过程是这样的:\n\n>executor 执行器:\n>\n>executor 是一个带有  `resolve` 和 `reject` 两个参数的函数, `executor` 函数 `promise` 构造函数执行的时候同步执行， 被传递 `resolve` 以及 `reject` 函数，`executor` 函数在 `Promise` 构造函数返回新建对象前被调用, `resolve` 和 `reject` 函数被调用的时候，分别将 `promise` 的状态改为 `fullfilled(完成)` 和 \n>\n>`rejected(完成)` `executor` 函数内部会执行异步操作，操作完成成功之后将 `promise` 状态改为 `fullfiled` 或者将发生错误的时候, 将  状态变为 `rejected`\n\n对于一个 `promise ` 对象具有下面三种状态:\n\n```javascript\npending: 初始状态，不是成功就是失败 // pending 英文: 等待，表示处于等待异步处理结果的状态\nfufilled 等待结果操作成功完成\nrejected 表示等待操作结果失败\n```\n\n下面是通过使用 `promise` 进行调用的状态图:\n\n!['promise 状态'](https://mdn.mozillademos.org/files/8633/promises.png)\n\n###  `promise` 代码\n\n#### 构建 `Promise` 构造函数\n\n`es6`:\n\n```javascript\nlet p = new Promise((resovle, reject) => {\n  // 异步操作\n  if () {\n  // resolve(value)    \n    resolve(value);\n  } else {\n // reject(value)      \n    reject(value);\n  }\n})\n```\n\n实际源码:\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n#####  改变状态函数\n\n`es6`:\n\n```javascript\nresolve(value);\n\nreject(value);\n```\n\n实际源码:\n\n```javascript\nPromise.prototpe.transition = function (status, value) {\n  if (this.status === PENDING) {\n    // 当处于 PENDDING 状态的时候执行函数\n    this.status = status;\n    this.value = value;\n    // 当成功或者失败的时候都会执行 this.process() 函数\n    this.process();\n  }\n}\n```\n\n#### `then` \n\n`es6`: \n\n```javascript\np.then(onFulFilled, onRejected);\n// onFulFilled 成功之后执行的函数\n// onRejected 失败之后执行的函数\n```\n\n源码分析:\n\n```javascript\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  // thenPromise 是一个新的 Promise 对象\n  let thenPromsie = new Promise(function() {});\n  // 将执行的函数存入到 handlerQueue 数组之中\n  this.handlerQueue.push({\n    // 成功函数\n    onFulfilled,\n    // 失败函数\n    onRejected,\n    thenPromise\n  });\n  // this.process() 执行函数\n  this.process();\n  // 返回 thenPromise 一个新的 promise 对象\n  return thenPromise;\n}\n```\n\n####  `process`处理函数\n\n用来执行成功时的回调函数以及失败的回调函数。  \n\n`es6`:  \n\n```javascript\np.then(function () {\n  // 成功函数执行\n}, function () {\n  // 失败函数执行\n})\n```\n\n源码如下:\n\n```javascript\n// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数\nPromise.prototype.process = function () {\n  let that = this;\n  // 如果状态处于 PENDING 状态 返回\n  if (that.status === PENDING) {\n    return;\n  }\n  while (that.handlerQueeu.length > 0) {\n    let handler = that.handlerQueue.shift();\n    (function (handler) {\n      let handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;\n      // 如果 handlerFn 是一个函数\n      if (isFunction(handlerFn)) {\n        // 使用 callLater 回调函数执行\n        callLater(function () {\n          try {\n            // 执行 handlerFn 函数\n            let x = handlerFn(that.value);\n            // 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数\n            resolve(handler.thenPromise, x);\n          } catch (e) {\n            // 如果 catch error\n            handler.thenPromise.transition(REJECTED, e);\n          }\n        });\n      } else {\n        handler.thenPromise.transition(that.status, that.value);\n      }\n    })(handler);\n  }\n}\n```\n\n#### `resolve`\n\n`resovle` 函数用于函数执行完毕之后改变状态:\n\n```javascript\nfunction resovle(promise, x) {\n  if (promise === x) {\n    promise.transition(REJECTED, new TypeError());\n    // 如果 x 是一个 promise\n  } else if (isPromise(x)) {\n    // 调用 x 的 then 方法\n    x.then(function(value) {\n      promise.transition(FULFILLED, value);\n    }, function(reason) {\n      promise.transition(REJECTED, reason);\n    } );\n    // 如果函数执行之后的返回值是一个对象或者一个函数\n  } else if (isObject(x) || isFunction(x)) {\n    try {\n      let then = x.then;\n      // 如果 then 是一个函数\n      // 参数具有 then 方法的对象\n      if (isFunction(then)) {\n        let called = false;\n        try {\n          then.call(x, function(y) {\n            if (!called) {\n              resolve(promise, y);\n              called = true;\n            }\n          }, function (r) {\n            if (!called) {\n              promise.transition(REJECTED, r);\n              called = true;\n            }\n          });\n        } catch (e) {\n          if (!called) {\n            promise.transition(REJECTED, e);\n          }\n        }\n      } else {\n        promise.transition(FULFILLED, x);\n      }\n    } catch (e) {\n      promise.transition(REJECTED, x);\n    }\n  // 如果 x 只是一个数值  \n  } else {\n    promise.transition(FULFILLED, x);\n  }\n}\n```\n\n####  `promsie.resolve`\n\n>对于 `promise.resolve` 的状态，存在下面几种情况:\n>\n>1. 如果参数是 Promise 实例，那么`Promise.resolve`将不做任何修改、原封不动地返回这个实例。\n>2. 如果参数是一个具有 `then` 方法的对象, 使用 `promise.resolve` 会将这个对象转化为 `promise` 对象，并且立即执行 `thenable` 对象的 `then` 方法。\n>3. 如果参数是一个原始值，或者是一个不具有`then`方法的对象，则`Promise.resolve`方法返回一个新的 Promise 对象，状态为`resolved`。\n>4. 如果不带参数, 直接返回一个 `resolve` 状态的 Promise 对象。\n\n实现代码如下:\n\n```javascript\nPromise.resolve = function(value) {\n  // 返回一个 new Promise\n  return new Promise(function(resolve, reject) {\n    if (isThenable(value)) {\n      // 如果 value 是一个 then 对象\n      // 如果 value 具有 then 方法，执行下面的函数\n      value.then(resolve, reject);\n    } else {\n      // else 执行 resolve 函数\n      resolve(value);\n    }\n  });\n}\n```\n\n####  `promise.reject`\n\n```javascript\nPromise.reject = function(reason) {\n  return new Promise(function(resolve, reject) {\n    reject(reason);\n  }}\n}\n```\n\n使用 `Promise.reject` 接收的参数 `reason `会被作为 `error` 传递 \n\n####  other\n\n```javascript\n// 定义 promise 的三种状态\n// PENDING, FULFILLED  REJECTED\nlet PENDING = 0;\n    FULFILLED = 1;\n    REJECTED = 2;\nfunction isFunction(fn) {\n  return fn instanceof Function;\n}\n\nfunction isObject(obj) {\n  return obj instanceof Object;\n}\n\nfunction isPromise() {\n  return p instanceof Promise;\n}\n\nfunction isThenable(obj) {\n  return obj && isFunction(obj.then);\n}\n// 借用 callLater 实现异步\nfunction callLater(fn) {\n  setTimeout(fn, 0);\n}\n```\n\n","slug":"promise","published":1,"updated":"2020-09-14T06:36:25.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t710025i2osakwvwl9i","content":"<p>使用 <code>promise</code> 构建异步请求在 <code>es6-promise</code> 中已经说过了，下面这章想要探究一下使用 <code>promise</code> 的原理。</p>\n<p>使用 <code>promise</code>  的实例如下:</p>\n<p><code>new Promise(function (resolve, reject) {....})</code></p>\n<p>对于 <code>promise</code> 的执行过程是这样的:</p>\n<blockquote>\n<p>executor 执行器:</p>\n<p>executor 是一个带有  <code>resolve</code> 和 <code>reject</code> 两个参数的函数, <code>executor</code> 函数 <code>promise</code> 构造函数执行的时候同步执行， 被传递 <code>resolve</code> 以及 <code>reject</code> 函数，<code>executor</code> 函数在 <code>Promise</code> 构造函数返回新建对象前被调用, <code>resolve</code> 和 <code>reject</code> 函数被调用的时候，分别将 <code>promise</code> 的状态改为 <code>fullfilled(完成)</code> 和 </p>\n<p><code>rejected(完成)</code> <code>executor</code> 函数内部会执行异步操作，操作完成成功之后将 <code>promise</code> 状态改为 <code>fullfiled</code> 或者将发生错误的时候, 将  状态变为 <code>rejected</code></p>\n</blockquote>\n<p>对于一个 <code>promise</code> 对象具有下面三种状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending: 初始状态，不是成功就是失败 <span class=\"comment\">// pending 英文: 等待，表示处于等待异步处理结果的状态</span></span><br><span class=\"line\">fufilled 等待结果操作成功完成</span><br><span class=\"line\">rejected 表示等待操作结果失败</span><br></pre></td></tr></table></figure>\n<p>下面是通过使用 <code>promise</code> 进行调用的状态图:</p>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"&#39;promise 状态&#39;\"></p>\n<h3 id=\"promise-代码\"><a href=\"#promise-代码\" class=\"headerlink\" title=\"promise 代码\"></a><code>promise</code> 代码</h3><h4 id=\"构建-Promise-构造函数\"><a href=\"#构建-Promise-构造函数\" class=\"headerlink\" title=\"构建 Promise 构造函数\"></a>构建 <code>Promise</code> 构造函数</h4><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve(value)    </span></span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// reject(value)      </span></span><br><span class=\"line\">    reject(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"改变状态函数\"><a href=\"#改变状态函数\" class=\"headerlink\" title=\"改变状态函数\"></a>改变状态函数</h5><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve(value);</span><br><span class=\"line\"></span><br><span class=\"line\">reject(value);</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototpe.transition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当处于 PENDDING 状态的时候执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"comment\">// 当成功或者失败的时候都会执行 this.process() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a><code>then</code></h4><p><code>es6</code>: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(onFulFilled, onRejected);</span><br><span class=\"line\"><span class=\"comment\">// onFulFilled 成功之后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// onRejected 失败之后执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// thenPromise 是一个新的 Promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> thenPromsie = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将执行的函数存入到 handlerQueue 数组之中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerQueue.push(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数</span></span><br><span class=\"line\">    onFulfilled,</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数</span></span><br><span class=\"line\">    onRejected,</span><br><span class=\"line\">    thenPromise</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// this.process() 执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  <span class=\"comment\">// 返回 thenPromise 一个新的 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"process处理函数\"><a href=\"#process处理函数\" class=\"headerlink\" title=\"process处理函数\"></a><code>process</code>处理函数</h4><p>用来执行成功时的回调函数以及失败的回调函数。  </p>\n<p><code>es6</code>:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 成功函数执行</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败函数执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果状态处于 PENDING 状态 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (that.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (that.handlerQueeu.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = that.handlerQueue.shift();</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 handlerFn 是一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(handlerFn)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 callLater 回调函数执行</span></span><br><span class=\"line\">        callLater(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行 handlerFn 函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = handlerFn(that.value);</span><br><span class=\"line\">            <span class=\"comment\">// 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数</span></span><br><span class=\"line\">            resolve(handler.thenPromise, x);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 catch error</span></span><br><span class=\"line\">            handler.thenPromise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler.thenPromise.transition(that.status, that.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a><code>resolve</code></h4><p><code>resovle</code> 函数用于函数执行完毕之后改变状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resovle</span>(<span class=\"params\">promise, x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    promise.transition(REJECTED, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是一个 promise</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPromise(x)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 x 的 then 方法</span></span><br><span class=\"line\">    x.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(FULFILLED, value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(REJECTED, reason);</span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数执行之后的返回值是一个对象或者一个函数</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 then 是一个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数具有 then 方法的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          then.call(x, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              resolve(promise, y);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              promise.transition(REJECTED, r);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">            promise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promise.transition(FULFILLED, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      promise.transition(REJECTED, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 x 只是一个数值  </span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    promise.transition(FULFILLED, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promsie-resolve\"><a href=\"#promsie-resolve\" class=\"headerlink\" title=\"promsie.resolve\"></a><code>promsie.resolve</code></h4><blockquote>\n<p>对于 <code>promise.resolve</code> 的状态，存在下面几种情况:</p>\n<ol>\n<li>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</li>\n<li>如果参数是一个具有 <code>then</code> 方法的对象, 使用 <code>promise.resolve</code> 会将这个对象转化为 <code>promise</code> 对象，并且立即执行 <code>thenable</code> 对象的 <code>then</code> 方法。</li>\n<li>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</li>\n<li>如果不带参数, 直接返回一个 <code>resolve</code> 状态的 Promise 对象。</li>\n</ol>\n</blockquote>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 new Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThenable(value)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是一个 then 对象</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 具有 then 方法，执行下面的函数</span></span><br><span class=\"line\">      value.then(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// else 执行 resolve 函数</span></span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-reject\"><a href=\"#promise-reject\" class=\"headerlink\" title=\"promise.reject\"></a><code>promise.reject</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Promise.reject</code> 接收的参数 <code>reason</code>会被作为 <code>error</code> 传递 </p>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 promise 的三种状态</span></span><br><span class=\"line\"><span class=\"comment\">// PENDING, FULFILLED  REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\">    FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\">    REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isThenable</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj &amp;&amp; isFunction(obj.then);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 借用 callLater 实现异步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callLater</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 <code>promise</code> 构建异步请求在 <code>es6-promise</code> 中已经说过了，下面这章想要探究一下使用 <code>promise</code> 的原理。</p>\n<p>使用 <code>promise</code>  的实例如下:</p>\n<p><code>new Promise(function (resolve, reject) {....})</code></p>\n<p>对于 <code>promise</code> 的执行过程是这样的:</p>\n<blockquote>\n<p>executor 执行器:</p>\n<p>executor 是一个带有  <code>resolve</code> 和 <code>reject</code> 两个参数的函数, <code>executor</code> 函数 <code>promise</code> 构造函数执行的时候同步执行， 被传递 <code>resolve</code> 以及 <code>reject</code> 函数，<code>executor</code> 函数在 <code>Promise</code> 构造函数返回新建对象前被调用, <code>resolve</code> 和 <code>reject</code> 函数被调用的时候，分别将 <code>promise</code> 的状态改为 <code>fullfilled(完成)</code> 和 </p>\n<p><code>rejected(完成)</code> <code>executor</code> 函数内部会执行异步操作，操作完成成功之后将 <code>promise</code> 状态改为 <code>fullfiled</code> 或者将发生错误的时候, 将  状态变为 <code>rejected</code></p>\n</blockquote>\n<p>对于一个 <code>promise</code> 对象具有下面三种状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending: 初始状态，不是成功就是失败 <span class=\"comment\">// pending 英文: 等待，表示处于等待异步处理结果的状态</span></span><br><span class=\"line\">fufilled 等待结果操作成功完成</span><br><span class=\"line\">rejected 表示等待操作结果失败</span><br></pre></td></tr></table></figure>\n<p>下面是通过使用 <code>promise</code> 进行调用的状态图:</p>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"&#39;promise 状态&#39;\"></p>\n<h3 id=\"promise-代码\"><a href=\"#promise-代码\" class=\"headerlink\" title=\"promise 代码\"></a><code>promise</code> 代码</h3><h4 id=\"构建-Promise-构造函数\"><a href=\"#构建-Promise-构造函数\" class=\"headerlink\" title=\"构建 Promise 构造函数\"></a>构建 <code>Promise</code> 构造函数</h4><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve(value)    </span></span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// reject(value)      </span></span><br><span class=\"line\">    reject(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"改变状态函数\"><a href=\"#改变状态函数\" class=\"headerlink\" title=\"改变状态函数\"></a>改变状态函数</h5><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve(value);</span><br><span class=\"line\"></span><br><span class=\"line\">reject(value);</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototpe.transition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当处于 PENDDING 状态的时候执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"comment\">// 当成功或者失败的时候都会执行 this.process() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a><code>then</code></h4><p><code>es6</code>: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(onFulFilled, onRejected);</span><br><span class=\"line\"><span class=\"comment\">// onFulFilled 成功之后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// onRejected 失败之后执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// thenPromise 是一个新的 Promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> thenPromsie = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将执行的函数存入到 handlerQueue 数组之中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerQueue.push(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数</span></span><br><span class=\"line\">    onFulfilled,</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数</span></span><br><span class=\"line\">    onRejected,</span><br><span class=\"line\">    thenPromise</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// this.process() 执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  <span class=\"comment\">// 返回 thenPromise 一个新的 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"process处理函数\"><a href=\"#process处理函数\" class=\"headerlink\" title=\"process处理函数\"></a><code>process</code>处理函数</h4><p>用来执行成功时的回调函数以及失败的回调函数。  </p>\n<p><code>es6</code>:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 成功函数执行</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败函数执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果状态处于 PENDING 状态 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (that.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (that.handlerQueeu.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = that.handlerQueue.shift();</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 handlerFn 是一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(handlerFn)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 callLater 回调函数执行</span></span><br><span class=\"line\">        callLater(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行 handlerFn 函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = handlerFn(that.value);</span><br><span class=\"line\">            <span class=\"comment\">// 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数</span></span><br><span class=\"line\">            resolve(handler.thenPromise, x);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 catch error</span></span><br><span class=\"line\">            handler.thenPromise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler.thenPromise.transition(that.status, that.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a><code>resolve</code></h4><p><code>resovle</code> 函数用于函数执行完毕之后改变状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resovle</span>(<span class=\"params\">promise, x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    promise.transition(REJECTED, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是一个 promise</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPromise(x)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 x 的 then 方法</span></span><br><span class=\"line\">    x.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(FULFILLED, value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(REJECTED, reason);</span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数执行之后的返回值是一个对象或者一个函数</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 then 是一个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数具有 then 方法的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          then.call(x, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              resolve(promise, y);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              promise.transition(REJECTED, r);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">            promise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promise.transition(FULFILLED, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      promise.transition(REJECTED, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 x 只是一个数值  </span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    promise.transition(FULFILLED, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promsie-resolve\"><a href=\"#promsie-resolve\" class=\"headerlink\" title=\"promsie.resolve\"></a><code>promsie.resolve</code></h4><blockquote>\n<p>对于 <code>promise.resolve</code> 的状态，存在下面几种情况:</p>\n<ol>\n<li>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</li>\n<li>如果参数是一个具有 <code>then</code> 方法的对象, 使用 <code>promise.resolve</code> 会将这个对象转化为 <code>promise</code> 对象，并且立即执行 <code>thenable</code> 对象的 <code>then</code> 方法。</li>\n<li>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</li>\n<li>如果不带参数, 直接返回一个 <code>resolve</code> 状态的 Promise 对象。</li>\n</ol>\n</blockquote>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 new Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThenable(value)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是一个 then 对象</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 具有 then 方法，执行下面的函数</span></span><br><span class=\"line\">      value.then(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// else 执行 resolve 函数</span></span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-reject\"><a href=\"#promise-reject\" class=\"headerlink\" title=\"promise.reject\"></a><code>promise.reject</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Promise.reject</code> 接收的参数 <code>reason</code>会被作为 <code>error</code> 传递 </p>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 promise 的三种状态</span></span><br><span class=\"line\"><span class=\"comment\">// PENDING, FULFILLED  REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\">    FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\">    REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isThenable</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj &amp;&amp; isFunction(obj.then);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 借用 callLater 实现异步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callLater</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"promise中的错误捕获","date":"2019-09-27T09:02:31.000Z","_content":"\n在代码中， 我们对于不能预知的代码通常会使用 `try catch` 来捕获代码错误，当代码内部发生错误时， 对于错误进行捕获， 可以防止代码的错误阻塞后续代码的执行，并且我们可以对于代码的错误进行后续处理；\n\n在 `promise` 中， 对于错误的处理或许稍有不同， 需要注意下面几点：\n\n* 使用 `try catch` 只能捕获同步代码， 不能捕获异步代码， 在 `async` 函数内， 使用 `await` 可以捕获异步代码，这里实际上是异步代码变成了同步代码\n* `promise` 内部代码的错误会沿着 `promise` 代码链传递， 直到被 `promise` 的 `catch` 方法或者上一层 `async`  函数内的  `try catch` 方法捕获到, 如果没有使用 `catch` 方法指定错误处理的回调函数， `Promise` 对象抛出的错误不会传递到外层的 `promise`；这个时候会报： `UnhandledPromiseRejectionWarning:`\n\n#### `try catch` 处理`async` 函数内异步\n\n使用 `try catch` 只能处理同步的代码， 对于异步代码中的代码错误， 使用 `try catch` 是无法捕获到的：\n\n```js\nfunction promise() {\n  return new Promise(() => {\n    throw new Error('error');\n  });\n}\n\nfunction tryError() {\n  try {\n    promise();\n  } catch (error) {\n    console.log('error');\n  }\n}\n\ntryError();\n// UnhandledPromiseRejectionWarning: Error: error\n```\n\n在 `async ` 函数内部使用 `try catch`可以捕获到异步错误：\n\n```js\nasync function tryError() {\n  try {\n    await promise();\n  } catch (error) {\n    console.log('error');\n  }\n}\ntryError();\n// error\n```\n\n#### `promise.catch 错误捕获`\n\n使用 `promise.catch` 方法可以对于当前 `promise` 链上的代码进行错误捕获，当 `promise` 内部发生错误的时候， 错误会沿着 `promise` 链向后传递， 直到被 `promise` 后面的 `catch` 方法捕获到：\n\n```js\nfunction apromise() {\n  return new Promise(() => {\n    console.log(b);\n  })\n}\n\napromise().then(() => {\n  throw new Error('error');\n}).catch(err => {\n  console.log('error', err);\n});\n// error: b is not defined\n```\n\n当在 `promise` 链中没有 `catch` 方法的时候， `promise` 中发生的错误不会被上层的 `promise` 中的catch 捕获, 即使我们使用了 `throw new Error` 的方式对错误进行抛出也是如此；\n\n因为 `async` 函数返回一个 `promise` 对象， 我们在 `async` 函数内部定义一个 `Error`\n\n```js\nfunction promise() {\n  return new Promise(async () => {\n    throw new Error('error');\n  }).catch(err => {\n    console.log('error');\n  });\n}\npromise();\n// UnhandledPromiseRejectionWarning: Error: error\n// 这里 async 函数内部抛出的错误不会被外部的 catch 方法捕获到， 因为错误不能传递到外层\n// 的 `promise`\n```\n\n#### 总结\n\n防止出现 `unhandledRejection` 问题的解决方法是：\n\n1. 在 `async` 函数内部使用 `try catch` 捕获异步错误\n2.  `promise` 内部使用 `.catch` 方法来捕获 `promise` 内部代码错误\n\n","source":"_posts/promise中的错误捕获.md","raw":"---\ntitle: promise中的错误捕获\ndate: 2019-09-27 17:02:31\ntags: promise catch\ncategories: promise\n---\n\n在代码中， 我们对于不能预知的代码通常会使用 `try catch` 来捕获代码错误，当代码内部发生错误时， 对于错误进行捕获， 可以防止代码的错误阻塞后续代码的执行，并且我们可以对于代码的错误进行后续处理；\n\n在 `promise` 中， 对于错误的处理或许稍有不同， 需要注意下面几点：\n\n* 使用 `try catch` 只能捕获同步代码， 不能捕获异步代码， 在 `async` 函数内， 使用 `await` 可以捕获异步代码，这里实际上是异步代码变成了同步代码\n* `promise` 内部代码的错误会沿着 `promise` 代码链传递， 直到被 `promise` 的 `catch` 方法或者上一层 `async`  函数内的  `try catch` 方法捕获到, 如果没有使用 `catch` 方法指定错误处理的回调函数， `Promise` 对象抛出的错误不会传递到外层的 `promise`；这个时候会报： `UnhandledPromiseRejectionWarning:`\n\n#### `try catch` 处理`async` 函数内异步\n\n使用 `try catch` 只能处理同步的代码， 对于异步代码中的代码错误， 使用 `try catch` 是无法捕获到的：\n\n```js\nfunction promise() {\n  return new Promise(() => {\n    throw new Error('error');\n  });\n}\n\nfunction tryError() {\n  try {\n    promise();\n  } catch (error) {\n    console.log('error');\n  }\n}\n\ntryError();\n// UnhandledPromiseRejectionWarning: Error: error\n```\n\n在 `async ` 函数内部使用 `try catch`可以捕获到异步错误：\n\n```js\nasync function tryError() {\n  try {\n    await promise();\n  } catch (error) {\n    console.log('error');\n  }\n}\ntryError();\n// error\n```\n\n#### `promise.catch 错误捕获`\n\n使用 `promise.catch` 方法可以对于当前 `promise` 链上的代码进行错误捕获，当 `promise` 内部发生错误的时候， 错误会沿着 `promise` 链向后传递， 直到被 `promise` 后面的 `catch` 方法捕获到：\n\n```js\nfunction apromise() {\n  return new Promise(() => {\n    console.log(b);\n  })\n}\n\napromise().then(() => {\n  throw new Error('error');\n}).catch(err => {\n  console.log('error', err);\n});\n// error: b is not defined\n```\n\n当在 `promise` 链中没有 `catch` 方法的时候， `promise` 中发生的错误不会被上层的 `promise` 中的catch 捕获, 即使我们使用了 `throw new Error` 的方式对错误进行抛出也是如此；\n\n因为 `async` 函数返回一个 `promise` 对象， 我们在 `async` 函数内部定义一个 `Error`\n\n```js\nfunction promise() {\n  return new Promise(async () => {\n    throw new Error('error');\n  }).catch(err => {\n    console.log('error');\n  });\n}\npromise();\n// UnhandledPromiseRejectionWarning: Error: error\n// 这里 async 函数内部抛出的错误不会被外部的 catch 方法捕获到， 因为错误不能传递到外层\n// 的 `promise`\n```\n\n#### 总结\n\n防止出现 `unhandledRejection` 问题的解决方法是：\n\n1. 在 `async` 函数内部使用 `try catch` 捕获异步错误\n2.  `promise` 内部使用 `.catch` 方法来捕获 `promise` 内部代码错误\n\n","slug":"promise中的错误捕获","published":1,"updated":"2020-09-14T06:36:25.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t740029i2oshfzgftfg","content":"<p>在代码中， 我们对于不能预知的代码通常会使用 <code>try catch</code> 来捕获代码错误，当代码内部发生错误时， 对于错误进行捕获， 可以防止代码的错误阻塞后续代码的执行，并且我们可以对于代码的错误进行后续处理；</p>\n<p>在 <code>promise</code> 中， 对于错误的处理或许稍有不同， 需要注意下面几点：</p>\n<ul>\n<li>使用 <code>try catch</code> 只能捕获同步代码， 不能捕获异步代码， 在 <code>async</code> 函数内， 使用 <code>await</code> 可以捕获异步代码，这里实际上是异步代码变成了同步代码</li>\n<li><code>promise</code> 内部代码的错误会沿着 <code>promise</code> 代码链传递， 直到被 <code>promise</code> 的 <code>catch</code> 方法或者上一层 <code>async</code>  函数内的  <code>try catch</code> 方法捕获到, 如果没有使用 <code>catch</code> 方法指定错误处理的回调函数， <code>Promise</code> 对象抛出的错误不会传递到外层的 <code>promise</code>；这个时候会报： <code>UnhandledPromiseRejectionWarning:</code></li>\n</ul>\n<h4 id=\"try-catch-处理async-函数内异步\"><a href=\"#try-catch-处理async-函数内异步\" class=\"headerlink\" title=\"try catch 处理async 函数内异步\"></a><code>try catch</code> 处理<code>async</code> 函数内异步</h4><p>使用 <code>try catch</code> 只能处理同步的代码， 对于异步代码中的代码错误， 使用 <code>try catch</code> 是无法捕获到的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    promise();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tryError();</span><br><span class=\"line\"><span class=\"comment\">// UnhandledPromiseRejectionWarning: Error: error</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>async</code> 函数内部使用 <code>try catch</code>可以捕获到异步错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> promise();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tryError();</span><br><span class=\"line\"><span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-catch-错误捕获\"><a href=\"#promise-catch-错误捕获\" class=\"headerlink\" title=\"promise.catch 错误捕获\"></a><code>promise.catch 错误捕获</code></h4><p>使用 <code>promise.catch</code> 方法可以对于当前 <code>promise</code> 链上的代码进行错误捕获，当 <code>promise</code> 内部发生错误的时候， 错误会沿着 <code>promise</code> 链向后传递， 直到被 <code>promise</code> 后面的 <code>catch</code> 方法捕获到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apromise().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// error: b is not defined</span></span><br></pre></td></tr></table></figure>\n<p>当在 <code>promise</code> 链中没有 <code>catch</code> 方法的时候， <code>promise</code> 中发生的错误不会被上层的 <code>promise</code> 中的catch 捕获, 即使我们使用了 <code>throw new Error</code> 的方式对错误进行抛出也是如此；</p>\n<p>因为 <code>async</code> 函数返回一个 <code>promise</code> 对象， 我们在 <code>async</code> 函数内部定义一个 <code>Error</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">promise();</span><br><span class=\"line\"><span class=\"comment\">// UnhandledPromiseRejectionWarning: Error: error</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 async 函数内部抛出的错误不会被外部的 catch 方法捕获到， 因为错误不能传递到外层</span></span><br><span class=\"line\"><span class=\"comment\">// 的 `promise`</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>防止出现 <code>unhandledRejection</code> 问题的解决方法是：</p>\n<ol>\n<li>在 <code>async</code> 函数内部使用 <code>try catch</code> 捕获异步错误</li>\n<li><code>promise</code> 内部使用 <code>.catch</code> 方法来捕获 <code>promise</code> 内部代码错误</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在代码中， 我们对于不能预知的代码通常会使用 <code>try catch</code> 来捕获代码错误，当代码内部发生错误时， 对于错误进行捕获， 可以防止代码的错误阻塞后续代码的执行，并且我们可以对于代码的错误进行后续处理；</p>\n<p>在 <code>promise</code> 中， 对于错误的处理或许稍有不同， 需要注意下面几点：</p>\n<ul>\n<li>使用 <code>try catch</code> 只能捕获同步代码， 不能捕获异步代码， 在 <code>async</code> 函数内， 使用 <code>await</code> 可以捕获异步代码，这里实际上是异步代码变成了同步代码</li>\n<li><code>promise</code> 内部代码的错误会沿着 <code>promise</code> 代码链传递， 直到被 <code>promise</code> 的 <code>catch</code> 方法或者上一层 <code>async</code>  函数内的  <code>try catch</code> 方法捕获到, 如果没有使用 <code>catch</code> 方法指定错误处理的回调函数， <code>Promise</code> 对象抛出的错误不会传递到外层的 <code>promise</code>；这个时候会报： <code>UnhandledPromiseRejectionWarning:</code></li>\n</ul>\n<h4 id=\"try-catch-处理async-函数内异步\"><a href=\"#try-catch-处理async-函数内异步\" class=\"headerlink\" title=\"try catch 处理async 函数内异步\"></a><code>try catch</code> 处理<code>async</code> 函数内异步</h4><p>使用 <code>try catch</code> 只能处理同步的代码， 对于异步代码中的代码错误， 使用 <code>try catch</code> 是无法捕获到的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    promise();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tryError();</span><br><span class=\"line\"><span class=\"comment\">// UnhandledPromiseRejectionWarning: Error: error</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>async</code> 函数内部使用 <code>try catch</code>可以捕获到异步错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> promise();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tryError();</span><br><span class=\"line\"><span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-catch-错误捕获\"><a href=\"#promise-catch-错误捕获\" class=\"headerlink\" title=\"promise.catch 错误捕获\"></a><code>promise.catch 错误捕获</code></h4><p>使用 <code>promise.catch</code> 方法可以对于当前 <code>promise</code> 链上的代码进行错误捕获，当 <code>promise</code> 内部发生错误的时候， 错误会沿着 <code>promise</code> 链向后传递， 直到被 <code>promise</code> 后面的 <code>catch</code> 方法捕获到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apromise().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// error: b is not defined</span></span><br></pre></td></tr></table></figure>\n<p>当在 <code>promise</code> 链中没有 <code>catch</code> 方法的时候， <code>promise</code> 中发生的错误不会被上层的 <code>promise</code> 中的catch 捕获, 即使我们使用了 <code>throw new Error</code> 的方式对错误进行抛出也是如此；</p>\n<p>因为 <code>async</code> 函数返回一个 <code>promise</code> 对象， 我们在 <code>async</code> 函数内部定义一个 <code>Error</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">promise();</span><br><span class=\"line\"><span class=\"comment\">// UnhandledPromiseRejectionWarning: Error: error</span></span><br><span class=\"line\"><span class=\"comment\">// 这里 async 函数内部抛出的错误不会被外部的 catch 方法捕获到， 因为错误不能传递到外层</span></span><br><span class=\"line\"><span class=\"comment\">// 的 `promise`</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>防止出现 <code>unhandledRejection</code> 问题的解决方法是：</p>\n<ol>\n<li>在 <code>async</code> 函数内部使用 <code>try catch</code> 捕获异步错误</li>\n<li><code>promise</code> 内部使用 <code>.catch</code> 方法来捕获 <code>promise</code> 内部代码错误</li>\n</ol>\n"},{"title":"node中的 events 模块","date":"2020-09-14T03:31:54.000Z","_content":"\n了解 Node 中的 Events 模块\n\nnode 中的 events 模块是 node 中使用较多的模块，比如在 node 中的流（stream），其内部使用 `events` 模块作为父类：\n\n![image-20200803102619367](node中的 events 模块/image-20200803102619367.png)\n\n作为一个使用广泛的基础模块，其代码中是有些东西值得我们学习和借鉴的。\n\n#### 发布/订阅模式\n\n发布/订阅模式定义了一种一对多的依赖关系，观察者同时监听某一个对象相应的状态变化， 当状态变化时通知到所有观察者， 这种设计模式解决了主体对象和观察者之间的耦合问题。\n\n图示如下：\n\n![img](node中的 events 模块/eventsPic.jpg)\n\n *上图中左边为观察者模式， 右边为 发布/订阅 模式， 可以看出它们之间的区别是发布/订阅模式通过事件调度中心（Event Channel）来对于事件进行统一管理*\n\n观察上图可知，发布/订阅这种设计模式的组成特点：\n\n* 整体结构有三部分组成， 订阅者（Subscriber）, 发布者（Publisher）以及 事件调度器（Event Channel）\n* 订阅者在事件调度器中订阅（Subscribe）事件， 发布者发布事件时，订阅该事件的订阅者将会收到消息通知（事件触发的形式）\n\n在 Node 中的 Events 模块中， 采用了这种设计模式，模块内部维护了一个事件列表（`_events`）,提供了基础的 api 来进行发布和订阅（`emit`, `on`）在 Events 中，订阅事件时需要传入两个参数： 事件名（eventName）以及 事件触发时的回调方法（listener），订阅之后按照下面的结构存储在 `_events` 中：\n\n```js\n_events = {\n  eventName: listener, wrapFn { fired: false/true, listener }\n\teventName: [listener1, listener2 ....]\n}\n```\n\n当调用 `this.emit(eventName)` 来发布特定事件时，将会依次调用`_events` 中的事件（`listener`）\n\n#### Events 模块代码实现\n\n1. `on` / `addListener(eventName, listener)`\n\n   这个方法的作用是订阅`eventName` 事件, 当事件被发布时， `listener` 方法被执行\n\n   具体代码：\n\n   ```js\n   // 订阅事件\n   // target: EventEmitter 实例\n   // type: 事件类型\n   // listener: 事件触发后的回调方法\n   // prepend: 是否将回调方法前置（首先触发）,默认为 false, 将会被放到回调方法的最后\n   function _addListener(target, type, listener, prepend) {\n     var m;\n     var events;\n     var existing;\n     // 判断是否为有效的函数    \n     checkListener(listener);\n   \n     events = target._events;\n     if (events === undefined) {\n       events = target._events = Object.create(null);\n       target._eventsCount = 0;\n     } else {\n       // To avoid recursion in the case that type === \"newListener\"! Before\n       // adding it to the listeners, first emit \"newListener\".\n       if (events.newListener !== undefined) {\n         target.emit('newListener', type,\n                     listener.listener ? listener.listener : listener);\n   \n         // Re-assign `events` because a newListener handler could have caused the\n         // this._events to be assigned to a new object\n         events = target._events;\n       }\n       existing = events[type];\n     }\n   \n     if (existing === undefined) {\n       // Optimize the case of one listener. Don't need the extra array object.\n       // 只有一个 listener 的情况， 存储的直接是这个函数\n       existing = events[type] = listener;\n       ++target._eventsCount;\n     } else {\n       if (typeof existing === 'function') {\n         // Adding the second element, need to change to array.\n         existing = events[type] =\n           prepend ? [listener, existing] : [existing, listener];\n         // If we've already got an array, just append.\n       } else if (prepend) {\n         existing.unshift(listener);\n       } else {\n         existing.push(listener);\n       }\n   \n       // Check for listener leak\n       // 获取到一个事件最多的 listener 数量\n       m = _getMaxListeners(target);\n       if (m > 0 && existing.length > m && !existing.warned) {\n         existing.warned = true;\n         // No error code for this since it is a Warning\n         // eslint-disable-next-line no-restricted-syntax\n         var w = new Error('Possible EventEmitter memory leak detected. ' +\n                             existing.length + ' ' + String(type) + ' listeners ' +\n                             'added. Use emitter.setMaxListeners() to ' +\n                             'increase limit');\n         w.name = 'MaxListenersExceededWarning';\n         w.emitter = target;\n         w.type = type;\n         w.count = existing.length;\n         ProcessEmitWarning(w);\n       }\n     }\n   \n     return target;\n   }\n   \n   EventEmitter.prototype.addListener = function addListener(type, listener) {\n     return _addListener(this, type, listener, false);\n   };\n   \n   EventEmitter.prototype.on = EventEmitter.prototype.addListener\n   ```\n\n2. `emit(eventName[, ...args])`\n\n   作用：发布 `eventName` 事件， 传入的 args 将会作为该事件下 `listener` 的参数\n\n   代码：\n\n   ```js\n   // 这里包含了 type 为 \"error\" 或者其他需要 emit 的触发\n   EventEmitter.prototype.emit = function emit(type) {\n     var args = [];\n     for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n     var doError = (type === 'error');\n   \n     var events = this._events;\n     // 当 events 存在的时候\n     if (events !== undefined)\n       // 当 events 中不存在 error 事件时还 emit 了 error 事件\n       doError = (doError && events.error === undefined);\n     // 当 events 不存在， 并且 type 为非 error时， 直接返回 false\n     else if (!doError)\n       return false;\n   \n     // If there is no 'error' event listener then throw.\n     // events 中没有 error 的时候\n     if (doError) {\n       var er;\n       if (args.length > 0)\n         er = args[0];\n       if (er instanceof Error) {\n         // Note: The comments on the `throw` lines are intentional, they show\n         // up in Node's output if this results in an unhandled exception.\n         throw er; // Unhandled 'error' event\n       }\n       // At least give some kind of context to the user\n       var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n       err.context = er;\n       throw err; // Unhandled 'error' event\n     }\n   \n     var handler = events[type];\n   \n     if (handler === undefined)\n       return false;\n   \n     if (typeof handler === 'function') {\n       \n       ReflectApply(handler, this, args);\n     } else {\n       var len = handler.length;\n       var listeners = arrayClone(handler, len);\n       for (var i = 0; i < len; ++i)\n         ReflectApply(listeners[i], this, args);\n     }\n   \n     return true;\n   };\n   \n   ```\n\n   \n\n3. `off` / `removeListener(eventName, listener)`\n   作用： 从事件名为 `eventName` 的事件下移除特定的回调方法（`listener`）\n   代码：\n\n   ```js\n   // Emits a 'removeListener' event if and only if the listener was removed.\n   // 移除特定事件的 listener && \n   // EventEmitter.on('removeListener'， handler) 触发\n   // type: 特定事件名称\n   // listener: 移除的函数\n   EventEmitter.prototype.removeListener =\n       function removeListener(type, listener) {\n         var list, events, position, i, originalListener;\n   \n         checkListener(listener);\n   \n         events = this._events;\n         if (events === undefined)\n           return this;\n   \n         list = events[type];\n         if (list === undefined)\n           return this;\n           // 这里判断是否 list 中只有一个 listener 或者 list 是 wrap fn 的情况\n         if (list === listener || list.listener === listener) {\n           if (--this._eventsCount === 0)\n             this._events = Object.create(null);\n           else {\n             delete events[type];\n             if (events.removeListener)\n               this.emit('removeListener', type, list.listener || listener);\n           }\n           // 当 list 不是一个函数的时候，这个时候这个 list 是一个数组\n         } else if (typeof list !== 'function') {\n           position = -1;\n   \n           for (i = list.length - 1; i >= 0; i--) {\n             if (list[i] === listener || list[i].listener === listener) {\n               originalListener = list[i].listener;\n               position = i;\n               break;\n             }\n           }\n           // 找不到listener\n           if (position < 0)\n             return this;\n             // 第一个是要找到的 listener\n           if (position === 0)\n             list.shift();\n           else {\n             // 如果要进行删除的元素在 list 数组之中\n             // splice\n             spliceOne(list, position);\n           }\n           // 当 list 删除完成之后只有一个 listener 时， 直接将这个 listener 作为 events[type] 的值\n           if (list.length === 1)\n             events[type] = list[0];\n   \n           if (events.removeListener !== undefined)\n             this.emit('removeListener', type, originalListener || listener);\n         }\n   \n         return this;\n       };\n   EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n   ```\n\n   特别：`spliceOne` 方法, 而非使用`splice` 方法\n\n   ```\n   // 这里是删除数组的方法\n   // 用的方法是找到一个数组的位置， 然后往前挪\n   // 这种方法性能提升比较大\n   function spliceOne(list, index) {\n     for (; index + 1 < list.length; index++)\n       list[index] = list[index + 1];\n     list.pop();\n   }\n   ```\n\n4. `once(eventName, listener)`\n   作用：添加只能调用一次的 `listener` 方法\n\n   代码：\n\n   ```js\n   function onceWrapper() {\n     // 这里的 fired 或许是为了更方便的暴露给外部使用\n     if (!this.fired) {\n       // 移除之后这里的闭包将会被回收了\n       this.target.removeListener(this.type, this.wrapFn);\n       this.fired = true;\n       if (arguments.length === 0)\n         return this.listener.call(this.target);\n       return this.listener.apply(this.target, arguments);\n     }\n   }\n   \n   // 通过 onceWrap 维持了一个 state 状态 用来保存是否被触发过的状态\n   function _onceWrap(target, type, listener) {\n     var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n     // 这里是注入里一些状态字段\n     // 这里保存一些状态字段， 比如： fired 用来表示这个函数有没有被触发过\n     var wrapped = onceWrapper.bind(state);\n     wrapped.listener = listener;\n     state.wrapFn = wrapped;\n     return wrapped;\n   }\n   \n   // 这里的 _oncewrap 方法执行之后是一个方法， 方法上的 listener 属性才是传入 once 方法的\n   // listener 参数\n   // 这里的 _onceWrap 方法的包装解释了代码中存在的 listener.listener || listener 的判断\n   EventEmitter.prototype.once = function once(type, listener) {\n     checkListener(listener);\n     this.on(type, _onceWrap(this, type, listener));\n     return this;\n   };\n   ```\n\n   \n\n5. `prependListener(eventName, listener)`\n\n   作用：添加 `listener` 到事件 `eventName` 回调数组中的第一个， 当事件被发布时， 添加的 `listener` 第一个执行\n\n   代码：\n\n   ```js\n   EventEmitter.prototype.prependListener =\n       function prependListener(type, listener) {\n         return _addListener(this, type, listener, true);\n       };\n   ```\n\n   \n\n6. `prependOnceListener(eventName, listener)`\n\n   作用： 添加一次性的 listener 到事件回调函数队列头部\n\n   代码：就是 `prependListener` 和 `_onceWrap` 方法的结合\n\n   ```js\n   EventEmitter.prototype.prependOnceListener =\n       function prependOnceListener(type, listener) {\n         checkListener(listener);\n         this.prependListener(type, _onceWrap(this, type, listener));\n         return this;\n       };\n   ```\n\n   \n\n7. `removeAllListeners([eventName])`\n\n   作用： 移除 `eventName` 事件的全部 `listener`\n\n   代码：\n\n   ```js\n   EventEmitter.prototype.removeAllListeners =\n       function removeAllListeners(type) {\n         var listeners, events, i;\n   \n         events = this._events;\n         if (events === undefined)\n           return this;\n   \n         // not listening for removeListener, no need to emit\n         // 为了保证 removeListener 方法在删除完之后最后触发，\n         // 需要判断是否存在这个 removeListener 方法是否存在\n         if (events.removeListener === undefined) {\n           if (arguments.length === 0) {\n             this._events = Object.create(null);\n             this._eventsCount = 0;\n           } else if (events[type] !== undefined) {\n             if (--this._eventsCount === 0)\n               this._events = Object.create(null);\n             else\n               delete events[type];\n           }\n           return this;\n         }\n   \n         // emit removeListener for all listeners on all events\n         // _events 中存在 removeListener 方法\n         if (arguments.length === 0) {\n           var keys = Object.keys(events);\n           var key;\n           for (i = 0; i < keys.length; ++i) {\n             key = keys[i];\n             if (key === 'removeListener') continue;\n             this.removeAllListeners(key);\n           }\n           // 保证之前移除listener 时能够触发 removeListener 回调\n           this.removeAllListeners('removeListener');\n           this._events = Object.create(null);\n           this._eventsCount = 0;\n           return this;\n         }\n         // 删除单个事件\n   \n         listeners = events[type];\n         // 兼容 listeners 中单个 listener 或者 多个 listener 的问题\n         if (typeof listeners === 'function') {\n           this.removeListener(type, listeners);\n         } else if (listeners !== undefined) {\n           // LIFO order\n           for (i = listeners.length - 1; i >= 0; i--) {\n             this.removeListener(type, listeners[i]);\n           }\n         }\n   \n         return this;\n       };\n   ```\n\n   \n\n8. `rawListeners(eventName)` \n\n   作用： 获取到 `eventName` 事件的全部 `listeners`, 包括是通过 `once` 方法创建的包裹 `listener`\n\n   代码：\n\n   ```js\n   // 这个方法用来获取到所有的 listener 无论是原生的还是放在 wrapper 上面的\n   function unwrapListeners(arr) {\n     var ret = new Array(arr.length);\n     for (var i = 0; i < ret.length; ++i) {\n       ret[i] = arr[i].listener || arr[i];\n     }\n     return ret;\n   }\n   \n   // 获取到全部的 _listeners \n   // type event 名称\n   // unwrap 是否是获取 非once 方法创建的 wrapper listener\n   function _listeners(target, type, unwrap) {\n     var events = target._events;\n   \n     if (events === undefined)\n       return [];\n   \n     var evlistener = events[type];\n     if (evlistener === undefined)\n       return [];\n   \n     if (typeof evlistener === 'function')\n       return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n   \n     return unwrap ?\n       unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n   }\n   EventEmitter.prototype.rawListeners = function rawListeners(type) {\n     return _listeners(this, type, false);\n   };\n   ```\n\n   ","source":"_posts/node中的 events 模块.md","raw":"---\ntitle: node中的 events 模块\ndate: 2020-09-14 11:31:54\ntags: node\ncategories: 源码阅读\n---\n\n了解 Node 中的 Events 模块\n\nnode 中的 events 模块是 node 中使用较多的模块，比如在 node 中的流（stream），其内部使用 `events` 模块作为父类：\n\n![image-20200803102619367](node中的 events 模块/image-20200803102619367.png)\n\n作为一个使用广泛的基础模块，其代码中是有些东西值得我们学习和借鉴的。\n\n#### 发布/订阅模式\n\n发布/订阅模式定义了一种一对多的依赖关系，观察者同时监听某一个对象相应的状态变化， 当状态变化时通知到所有观察者， 这种设计模式解决了主体对象和观察者之间的耦合问题。\n\n图示如下：\n\n![img](node中的 events 模块/eventsPic.jpg)\n\n *上图中左边为观察者模式， 右边为 发布/订阅 模式， 可以看出它们之间的区别是发布/订阅模式通过事件调度中心（Event Channel）来对于事件进行统一管理*\n\n观察上图可知，发布/订阅这种设计模式的组成特点：\n\n* 整体结构有三部分组成， 订阅者（Subscriber）, 发布者（Publisher）以及 事件调度器（Event Channel）\n* 订阅者在事件调度器中订阅（Subscribe）事件， 发布者发布事件时，订阅该事件的订阅者将会收到消息通知（事件触发的形式）\n\n在 Node 中的 Events 模块中， 采用了这种设计模式，模块内部维护了一个事件列表（`_events`）,提供了基础的 api 来进行发布和订阅（`emit`, `on`）在 Events 中，订阅事件时需要传入两个参数： 事件名（eventName）以及 事件触发时的回调方法（listener），订阅之后按照下面的结构存储在 `_events` 中：\n\n```js\n_events = {\n  eventName: listener, wrapFn { fired: false/true, listener }\n\teventName: [listener1, listener2 ....]\n}\n```\n\n当调用 `this.emit(eventName)` 来发布特定事件时，将会依次调用`_events` 中的事件（`listener`）\n\n#### Events 模块代码实现\n\n1. `on` / `addListener(eventName, listener)`\n\n   这个方法的作用是订阅`eventName` 事件, 当事件被发布时， `listener` 方法被执行\n\n   具体代码：\n\n   ```js\n   // 订阅事件\n   // target: EventEmitter 实例\n   // type: 事件类型\n   // listener: 事件触发后的回调方法\n   // prepend: 是否将回调方法前置（首先触发）,默认为 false, 将会被放到回调方法的最后\n   function _addListener(target, type, listener, prepend) {\n     var m;\n     var events;\n     var existing;\n     // 判断是否为有效的函数    \n     checkListener(listener);\n   \n     events = target._events;\n     if (events === undefined) {\n       events = target._events = Object.create(null);\n       target._eventsCount = 0;\n     } else {\n       // To avoid recursion in the case that type === \"newListener\"! Before\n       // adding it to the listeners, first emit \"newListener\".\n       if (events.newListener !== undefined) {\n         target.emit('newListener', type,\n                     listener.listener ? listener.listener : listener);\n   \n         // Re-assign `events` because a newListener handler could have caused the\n         // this._events to be assigned to a new object\n         events = target._events;\n       }\n       existing = events[type];\n     }\n   \n     if (existing === undefined) {\n       // Optimize the case of one listener. Don't need the extra array object.\n       // 只有一个 listener 的情况， 存储的直接是这个函数\n       existing = events[type] = listener;\n       ++target._eventsCount;\n     } else {\n       if (typeof existing === 'function') {\n         // Adding the second element, need to change to array.\n         existing = events[type] =\n           prepend ? [listener, existing] : [existing, listener];\n         // If we've already got an array, just append.\n       } else if (prepend) {\n         existing.unshift(listener);\n       } else {\n         existing.push(listener);\n       }\n   \n       // Check for listener leak\n       // 获取到一个事件最多的 listener 数量\n       m = _getMaxListeners(target);\n       if (m > 0 && existing.length > m && !existing.warned) {\n         existing.warned = true;\n         // No error code for this since it is a Warning\n         // eslint-disable-next-line no-restricted-syntax\n         var w = new Error('Possible EventEmitter memory leak detected. ' +\n                             existing.length + ' ' + String(type) + ' listeners ' +\n                             'added. Use emitter.setMaxListeners() to ' +\n                             'increase limit');\n         w.name = 'MaxListenersExceededWarning';\n         w.emitter = target;\n         w.type = type;\n         w.count = existing.length;\n         ProcessEmitWarning(w);\n       }\n     }\n   \n     return target;\n   }\n   \n   EventEmitter.prototype.addListener = function addListener(type, listener) {\n     return _addListener(this, type, listener, false);\n   };\n   \n   EventEmitter.prototype.on = EventEmitter.prototype.addListener\n   ```\n\n2. `emit(eventName[, ...args])`\n\n   作用：发布 `eventName` 事件， 传入的 args 将会作为该事件下 `listener` 的参数\n\n   代码：\n\n   ```js\n   // 这里包含了 type 为 \"error\" 或者其他需要 emit 的触发\n   EventEmitter.prototype.emit = function emit(type) {\n     var args = [];\n     for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n     var doError = (type === 'error');\n   \n     var events = this._events;\n     // 当 events 存在的时候\n     if (events !== undefined)\n       // 当 events 中不存在 error 事件时还 emit 了 error 事件\n       doError = (doError && events.error === undefined);\n     // 当 events 不存在， 并且 type 为非 error时， 直接返回 false\n     else if (!doError)\n       return false;\n   \n     // If there is no 'error' event listener then throw.\n     // events 中没有 error 的时候\n     if (doError) {\n       var er;\n       if (args.length > 0)\n         er = args[0];\n       if (er instanceof Error) {\n         // Note: The comments on the `throw` lines are intentional, they show\n         // up in Node's output if this results in an unhandled exception.\n         throw er; // Unhandled 'error' event\n       }\n       // At least give some kind of context to the user\n       var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n       err.context = er;\n       throw err; // Unhandled 'error' event\n     }\n   \n     var handler = events[type];\n   \n     if (handler === undefined)\n       return false;\n   \n     if (typeof handler === 'function') {\n       \n       ReflectApply(handler, this, args);\n     } else {\n       var len = handler.length;\n       var listeners = arrayClone(handler, len);\n       for (var i = 0; i < len; ++i)\n         ReflectApply(listeners[i], this, args);\n     }\n   \n     return true;\n   };\n   \n   ```\n\n   \n\n3. `off` / `removeListener(eventName, listener)`\n   作用： 从事件名为 `eventName` 的事件下移除特定的回调方法（`listener`）\n   代码：\n\n   ```js\n   // Emits a 'removeListener' event if and only if the listener was removed.\n   // 移除特定事件的 listener && \n   // EventEmitter.on('removeListener'， handler) 触发\n   // type: 特定事件名称\n   // listener: 移除的函数\n   EventEmitter.prototype.removeListener =\n       function removeListener(type, listener) {\n         var list, events, position, i, originalListener;\n   \n         checkListener(listener);\n   \n         events = this._events;\n         if (events === undefined)\n           return this;\n   \n         list = events[type];\n         if (list === undefined)\n           return this;\n           // 这里判断是否 list 中只有一个 listener 或者 list 是 wrap fn 的情况\n         if (list === listener || list.listener === listener) {\n           if (--this._eventsCount === 0)\n             this._events = Object.create(null);\n           else {\n             delete events[type];\n             if (events.removeListener)\n               this.emit('removeListener', type, list.listener || listener);\n           }\n           // 当 list 不是一个函数的时候，这个时候这个 list 是一个数组\n         } else if (typeof list !== 'function') {\n           position = -1;\n   \n           for (i = list.length - 1; i >= 0; i--) {\n             if (list[i] === listener || list[i].listener === listener) {\n               originalListener = list[i].listener;\n               position = i;\n               break;\n             }\n           }\n           // 找不到listener\n           if (position < 0)\n             return this;\n             // 第一个是要找到的 listener\n           if (position === 0)\n             list.shift();\n           else {\n             // 如果要进行删除的元素在 list 数组之中\n             // splice\n             spliceOne(list, position);\n           }\n           // 当 list 删除完成之后只有一个 listener 时， 直接将这个 listener 作为 events[type] 的值\n           if (list.length === 1)\n             events[type] = list[0];\n   \n           if (events.removeListener !== undefined)\n             this.emit('removeListener', type, originalListener || listener);\n         }\n   \n         return this;\n       };\n   EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n   ```\n\n   特别：`spliceOne` 方法, 而非使用`splice` 方法\n\n   ```\n   // 这里是删除数组的方法\n   // 用的方法是找到一个数组的位置， 然后往前挪\n   // 这种方法性能提升比较大\n   function spliceOne(list, index) {\n     for (; index + 1 < list.length; index++)\n       list[index] = list[index + 1];\n     list.pop();\n   }\n   ```\n\n4. `once(eventName, listener)`\n   作用：添加只能调用一次的 `listener` 方法\n\n   代码：\n\n   ```js\n   function onceWrapper() {\n     // 这里的 fired 或许是为了更方便的暴露给外部使用\n     if (!this.fired) {\n       // 移除之后这里的闭包将会被回收了\n       this.target.removeListener(this.type, this.wrapFn);\n       this.fired = true;\n       if (arguments.length === 0)\n         return this.listener.call(this.target);\n       return this.listener.apply(this.target, arguments);\n     }\n   }\n   \n   // 通过 onceWrap 维持了一个 state 状态 用来保存是否被触发过的状态\n   function _onceWrap(target, type, listener) {\n     var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n     // 这里是注入里一些状态字段\n     // 这里保存一些状态字段， 比如： fired 用来表示这个函数有没有被触发过\n     var wrapped = onceWrapper.bind(state);\n     wrapped.listener = listener;\n     state.wrapFn = wrapped;\n     return wrapped;\n   }\n   \n   // 这里的 _oncewrap 方法执行之后是一个方法， 方法上的 listener 属性才是传入 once 方法的\n   // listener 参数\n   // 这里的 _onceWrap 方法的包装解释了代码中存在的 listener.listener || listener 的判断\n   EventEmitter.prototype.once = function once(type, listener) {\n     checkListener(listener);\n     this.on(type, _onceWrap(this, type, listener));\n     return this;\n   };\n   ```\n\n   \n\n5. `prependListener(eventName, listener)`\n\n   作用：添加 `listener` 到事件 `eventName` 回调数组中的第一个， 当事件被发布时， 添加的 `listener` 第一个执行\n\n   代码：\n\n   ```js\n   EventEmitter.prototype.prependListener =\n       function prependListener(type, listener) {\n         return _addListener(this, type, listener, true);\n       };\n   ```\n\n   \n\n6. `prependOnceListener(eventName, listener)`\n\n   作用： 添加一次性的 listener 到事件回调函数队列头部\n\n   代码：就是 `prependListener` 和 `_onceWrap` 方法的结合\n\n   ```js\n   EventEmitter.prototype.prependOnceListener =\n       function prependOnceListener(type, listener) {\n         checkListener(listener);\n         this.prependListener(type, _onceWrap(this, type, listener));\n         return this;\n       };\n   ```\n\n   \n\n7. `removeAllListeners([eventName])`\n\n   作用： 移除 `eventName` 事件的全部 `listener`\n\n   代码：\n\n   ```js\n   EventEmitter.prototype.removeAllListeners =\n       function removeAllListeners(type) {\n         var listeners, events, i;\n   \n         events = this._events;\n         if (events === undefined)\n           return this;\n   \n         // not listening for removeListener, no need to emit\n         // 为了保证 removeListener 方法在删除完之后最后触发，\n         // 需要判断是否存在这个 removeListener 方法是否存在\n         if (events.removeListener === undefined) {\n           if (arguments.length === 0) {\n             this._events = Object.create(null);\n             this._eventsCount = 0;\n           } else if (events[type] !== undefined) {\n             if (--this._eventsCount === 0)\n               this._events = Object.create(null);\n             else\n               delete events[type];\n           }\n           return this;\n         }\n   \n         // emit removeListener for all listeners on all events\n         // _events 中存在 removeListener 方法\n         if (arguments.length === 0) {\n           var keys = Object.keys(events);\n           var key;\n           for (i = 0; i < keys.length; ++i) {\n             key = keys[i];\n             if (key === 'removeListener') continue;\n             this.removeAllListeners(key);\n           }\n           // 保证之前移除listener 时能够触发 removeListener 回调\n           this.removeAllListeners('removeListener');\n           this._events = Object.create(null);\n           this._eventsCount = 0;\n           return this;\n         }\n         // 删除单个事件\n   \n         listeners = events[type];\n         // 兼容 listeners 中单个 listener 或者 多个 listener 的问题\n         if (typeof listeners === 'function') {\n           this.removeListener(type, listeners);\n         } else if (listeners !== undefined) {\n           // LIFO order\n           for (i = listeners.length - 1; i >= 0; i--) {\n             this.removeListener(type, listeners[i]);\n           }\n         }\n   \n         return this;\n       };\n   ```\n\n   \n\n8. `rawListeners(eventName)` \n\n   作用： 获取到 `eventName` 事件的全部 `listeners`, 包括是通过 `once` 方法创建的包裹 `listener`\n\n   代码：\n\n   ```js\n   // 这个方法用来获取到所有的 listener 无论是原生的还是放在 wrapper 上面的\n   function unwrapListeners(arr) {\n     var ret = new Array(arr.length);\n     for (var i = 0; i < ret.length; ++i) {\n       ret[i] = arr[i].listener || arr[i];\n     }\n     return ret;\n   }\n   \n   // 获取到全部的 _listeners \n   // type event 名称\n   // unwrap 是否是获取 非once 方法创建的 wrapper listener\n   function _listeners(target, type, unwrap) {\n     var events = target._events;\n   \n     if (events === undefined)\n       return [];\n   \n     var evlistener = events[type];\n     if (evlistener === undefined)\n       return [];\n   \n     if (typeof evlistener === 'function')\n       return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n   \n     return unwrap ?\n       unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n   }\n   EventEmitter.prototype.rawListeners = function rawListeners(type) {\n     return _listeners(this, type, false);\n   };\n   ```\n\n   ","slug":"node中的 events 模块","published":1,"updated":"2020-09-14T06:36:25.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t75002bi2osugrnatag","content":"<p>了解 Node 中的 Events 模块</p>\n<p>node 中的 events 模块是 node 中使用较多的模块，比如在 node 中的流（stream），其内部使用 <code>events</code> 模块作为父类：</p>\n<p><img src=\"node中的 events 模块/image-20200803102619367.png\" alt=\"image-20200803102619367\"></p>\n<p>作为一个使用广泛的基础模块，其代码中是有些东西值得我们学习和借鉴的。</p>\n<h4 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布/订阅模式\"></a>发布/订阅模式</h4><p>发布/订阅模式定义了一种一对多的依赖关系，观察者同时监听某一个对象相应的状态变化， 当状态变化时通知到所有观察者， 这种设计模式解决了主体对象和观察者之间的耦合问题。</p>\n<p>图示如下：</p>\n<p><img src=\"node中的 events 模块/eventsPic.jpg\" alt=\"img\"></p>\n<p> <em>上图中左边为观察者模式， 右边为 发布/订阅 模式， 可以看出它们之间的区别是发布/订阅模式通过事件调度中心（Event Channel）来对于事件进行统一管理</em></p>\n<p>观察上图可知，发布/订阅这种设计模式的组成特点：</p>\n<ul>\n<li>整体结构有三部分组成， 订阅者（Subscriber）, 发布者（Publisher）以及 事件调度器（Event Channel）</li>\n<li>订阅者在事件调度器中订阅（Subscribe）事件， 发布者发布事件时，订阅该事件的订阅者将会收到消息通知（事件触发的形式）</li>\n</ul>\n<p>在 Node 中的 Events 模块中， 采用了这种设计模式，模块内部维护了一个事件列表（<code>_events</code>）,提供了基础的 api 来进行发布和订阅（<code>emit</code>, <code>on</code>）在 Events 中，订阅事件时需要传入两个参数： 事件名（eventName）以及 事件触发时的回调方法（listener），订阅之后按照下面的结构存储在 <code>_events</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_events = &#123;</span><br><span class=\"line\">  eventName: listener, wrapFn &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>/<span class=\"literal\">true</span>, listener &#125;</span><br><span class=\"line\">\teventName: [listener1, listener2 ....]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当调用 <code>this.emit(eventName)</code> 来发布特定事件时，将会依次调用<code>_events</code> 中的事件（<code>listener</code>）</p>\n<h4 id=\"Events-模块代码实现\"><a href=\"#Events-模块代码实现\" class=\"headerlink\" title=\"Events 模块代码实现\"></a>Events 模块代码实现</h4><ol>\n<li><p><code>on</code> / <code>addListener(eventName, listener)</code></p>\n<p>这个方法的作用是订阅<code>eventName</code> 事件, 当事件被发布时， <code>listener</code> 方法被执行</p>\n<p>具体代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\"><span class=\"comment\">// target: EventEmitter 实例</span></span><br><span class=\"line\"><span class=\"comment\">// type: 事件类型</span></span><br><span class=\"line\"><span class=\"comment\">// listener: 事件触发后的回调方法</span></span><br><span class=\"line\"><span class=\"comment\">// prepend: 是否将回调方法前置（首先触发）,默认为 false, 将会被放到回调方法的最后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_addListener</span>(<span class=\"params\">target, type, listener, prepend</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> events;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> existing;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否为有效的函数    </span></span><br><span class=\"line\">  checkListener(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">  events = target._events;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    events = target._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    target._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// To avoid recursion in the case that type === \"newListener\"! Before</span></span><br><span class=\"line\">    <span class=\"comment\">// adding it to the listeners, first emit \"newListener\".</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (events.newListener !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      target.emit(<span class=\"string\">'newListener'</span>, type,</span><br><span class=\"line\">                  listener.listener ? listener.listener : listener);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Re-assign `events` because a newListener handler could have caused the</span></span><br><span class=\"line\">      <span class=\"comment\">// this._events to be assigned to a new object</span></span><br><span class=\"line\">      events = target._events;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    existing = events[type];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Optimize the case of one listener. Don't need the extra array object.</span></span><br><span class=\"line\">    <span class=\"comment\">// 只有一个 listener 的情况， 存储的直接是这个函数</span></span><br><span class=\"line\">    existing = events[type] = listener;</span><br><span class=\"line\">    ++target._eventsCount;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existing === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Adding the second element, need to change to array.</span></span><br><span class=\"line\">      existing = events[type] =</span><br><span class=\"line\">        prepend ? [listener, existing] : [existing, listener];</span><br><span class=\"line\">      <span class=\"comment\">// If we've already got an array, just append.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prepend) &#123;</span><br><span class=\"line\">      existing.unshift(listener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      existing.push(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check for listener leak</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到一个事件最多的 listener 数量</span></span><br><span class=\"line\">    m = _getMaxListeners(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &gt; <span class=\"number\">0</span> &amp;&amp; existing.length &gt; m &amp;&amp; !existing.warned) &#123;</span><br><span class=\"line\">      existing.warned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// No error code for this since it is a Warning</span></span><br><span class=\"line\">      <span class=\"comment\">// eslint-disable-next-line no-restricted-syntax</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Possible EventEmitter memory leak detected. '</span> +</span><br><span class=\"line\">                          existing.length + <span class=\"string\">' '</span> + <span class=\"built_in\">String</span>(type) + <span class=\"string\">' listeners '</span> +</span><br><span class=\"line\">                          <span class=\"string\">'added. Use emitter.setMaxListeners() to '</span> +</span><br><span class=\"line\">                          <span class=\"string\">'increase limit'</span>);</span><br><span class=\"line\">      w.name = <span class=\"string\">'MaxListenersExceededWarning'</span>;</span><br><span class=\"line\">      w.emitter = target;</span><br><span class=\"line\">      w.type = type;</span><br><span class=\"line\">      w.count = existing.length;</span><br><span class=\"line\">      ProcessEmitWarning(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EventEmitter.prototype.addListener = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _addListener(<span class=\"keyword\">this</span>, type, listener, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EventEmitter.prototype.on = EventEmitter.prototype.addListener</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>emit(eventName[, ...args])</code></p>\n<p>作用：发布 <code>eventName</code> 事件， 传入的 args 将会作为该事件下 <code>listener</code> 的参数</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里包含了 type 为 \"error\" 或者其他需要 emit 的触发</span></span><br><span class=\"line\">EventEmitter.prototype.emit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> doError = (type === <span class=\"string\">'error'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">  <span class=\"comment\">// 当 events 存在的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events !== <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 当 events 中不存在 error 事件时还 emit 了 error 事件</span></span><br><span class=\"line\">    doError = (doError &amp;&amp; events.error === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 当 events 不存在， 并且 type 为非 error时， 直接返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!doError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If there is no 'error' event listener then throw.</span></span><br><span class=\"line\">  <span class=\"comment\">// events 中没有 error 的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (doError) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> er;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      er = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (er <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Note: The comments on the `throw` lines are intentional, they show</span></span><br><span class=\"line\">      <span class=\"comment\">// up in Node's output if this results in an unhandled exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> er; <span class=\"comment\">// Unhandled 'error' event</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// At least give some kind of context to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unhandled error.'</span> + (er ? <span class=\"string\">' ('</span> + er.message + <span class=\"string\">')'</span> : <span class=\"string\">''</span>));</span><br><span class=\"line\">    err.context = er;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err; <span class=\"comment\">// Unhandled 'error' event</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> handler = events[type];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (handler === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handler === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReflectApply(handler, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = handler.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> listeners = arrayClone(handler, len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; ++i)</span><br><span class=\"line\">      ReflectApply(listeners[i], <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p><code>off</code> / <code>removeListener(eventName, listener)</code><br>作用： 从事件名为 <code>eventName</code> 的事件下移除特定的回调方法（<code>listener</code>）<br>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Emits a 'removeListener' event if and only if the listener was removed.</span></span><br><span class=\"line\"><span class=\"comment\">// 移除特定事件的 listener &amp;&amp; </span></span><br><span class=\"line\"><span class=\"comment\">// EventEmitter.on('removeListener'， handler) 触发</span></span><br><span class=\"line\"><span class=\"comment\">// type: 特定事件名称</span></span><br><span class=\"line\"><span class=\"comment\">// listener: 移除的函数</span></span><br><span class=\"line\">EventEmitter.prototype.removeListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> list, events, position, i, originalListener;</span><br><span class=\"line\"></span><br><span class=\"line\">      checkListener(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">      events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      list = events[type];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 这里判断是否 list 中只有一个 listener 或者 list 是 wrap fn 的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list === listener || list.listener === listener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--<span class=\"keyword\">this</span>._eventsCount === <span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> events[type];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (events.removeListener)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, list.listener || listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当 list 不是一个函数的时候，这个时候这个 list 是一个数组</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> list !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        position = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = list.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (list[i] === listener || list[i].listener === listener) &#123;</span><br><span class=\"line\">            originalListener = list[i].listener;</span><br><span class=\"line\">            position = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找不到listener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 第一个是要找到的 listener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>)</span><br><span class=\"line\">          list.shift();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果要进行删除的元素在 list 数组之中</span></span><br><span class=\"line\">          <span class=\"comment\">// splice</span></span><br><span class=\"line\">          spliceOne(list, position);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当 list 删除完成之后只有一个 listener 时， 直接将这个 listener 作为 events[type] 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">          events[type] = list[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (events.removeListener !== <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, originalListener || listener);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">EventEmitter.prototype.off = EventEmitter.prototype.removeListener;</span><br></pre></td></tr></table></figure>\n<p>特别：<code>spliceOne</code> 方法, 而非使用<code>splice</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里是删除数组的方法</span><br><span class=\"line\">// 用的方法是找到一个数组的位置， 然后往前挪</span><br><span class=\"line\">// 这种方法性能提升比较大</span><br><span class=\"line\">function spliceOne(list, index) &#123;</span><br><span class=\"line\">  for (; index + 1 &lt; list.length; index++)</span><br><span class=\"line\">    list[index] = list[index + 1];</span><br><span class=\"line\">  list.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>once(eventName, listener)</code><br>作用：添加只能调用一次的 <code>listener</code> 方法</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onceWrapper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的 fired 或许是为了更方便的暴露给外部使用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fired) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除之后这里的闭包将会被回收了</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target.removeListener(<span class=\"keyword\">this</span>.type, <span class=\"keyword\">this</span>.wrapFn);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listener.call(<span class=\"keyword\">this</span>.target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listener.apply(<span class=\"keyword\">this</span>.target, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 onceWrap 维持了一个 state 状态 用来保存是否被触发过的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_onceWrap</span>(<span class=\"params\">target, type, listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> state = &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>, <span class=\"attr\">wrapFn</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">target</span>: target, <span class=\"attr\">type</span>: type, <span class=\"attr\">listener</span>: listener &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是注入里一些状态字段</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里保存一些状态字段， 比如： fired 用来表示这个函数有没有被触发过</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wrapped = onceWrapper.bind(state);</span><br><span class=\"line\">  wrapped.listener = listener;</span><br><span class=\"line\">  state.wrapFn = wrapped;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapped;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里的 _oncewrap 方法执行之后是一个方法， 方法上的 listener 属性才是传入 once 方法的</span></span><br><span class=\"line\"><span class=\"comment\">// listener 参数</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 _onceWrap 方法的包装解释了代码中存在的 listener.listener || listener 的判断</span></span><br><span class=\"line\">EventEmitter.prototype.once = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">once</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">  checkListener(listener);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.on(type, _onceWrap(<span class=\"keyword\">this</span>, type, listener));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p><code>prependListener(eventName, listener)</code></p>\n<p>作用：添加 <code>listener</code> 到事件 <code>eventName</code> 回调数组中的第一个， 当事件被发布时， 添加的 <code>listener</code> 第一个执行</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.prependListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prependListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _addListener(<span class=\"keyword\">this</span>, type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><code>prependOnceListener(eventName, listener)</code></p>\n<p>作用： 添加一次性的 listener 到事件回调函数队列头部</p>\n<p>代码：就是 <code>prependListener</code> 和 <code>_onceWrap</code> 方法的结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.prependOnceListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prependOnceListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      checkListener(listener);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.prependListener(type, _onceWrap(<span class=\"keyword\">this</span>, type, listener));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p><code>removeAllListeners([eventName])</code></p>\n<p>作用： 移除 <code>eventName</code> 事件的全部 <code>listener</code></p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.removeAllListeners =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeAllListeners</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> listeners, events, i;</span><br><span class=\"line\"></span><br><span class=\"line\">      events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// not listening for removeListener, no need to emit</span></span><br><span class=\"line\">      <span class=\"comment\">// 为了保证 removeListener 方法在删除完之后最后触发，</span></span><br><span class=\"line\">      <span class=\"comment\">// 需要判断是否存在这个 removeListener 方法是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events.removeListener === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[type] !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (--<span class=\"keyword\">this</span>._eventsCount === <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> events[type];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// emit removeListener for all listeners on all events</span></span><br><span class=\"line\">      <span class=\"comment\">// _events 中存在 removeListener 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(events);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; keys.length; ++i) &#123;</span><br><span class=\"line\">          key = keys[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeAllListeners(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保证之前移除listener 时能够触发 removeListener 回调</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeAllListeners(<span class=\"string\">'removeListener'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 删除单个事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">      listeners = events[type];</span><br><span class=\"line\">      <span class=\"comment\">// 兼容 listeners 中单个 listener 或者 多个 listener 的问题</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listeners === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(type, listeners);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listeners !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// LIFO order</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeListener(type, listeners[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p><code>rawListeners(eventName)</code> </p>\n<p>作用： 获取到 <code>eventName</code> 事件的全部 <code>listeners</code>, 包括是通过 <code>once</code> 方法创建的包裹 <code>listener</code></p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法用来获取到所有的 listener 无论是原生的还是放在 wrapper 上面的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unwrapListeners</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ret.length; ++i) &#123;</span><br><span class=\"line\">    ret[i] = arr[i].listener || arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到全部的 _listeners </span></span><br><span class=\"line\"><span class=\"comment\">// type event 名称</span></span><br><span class=\"line\"><span class=\"comment\">// unwrap 是否是获取 非once 方法创建的 wrapper listener</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_listeners</span>(<span class=\"params\">target, type, unwrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = target._events;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> evlistener = events[type];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (evlistener === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> evlistener === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unwrap ? [evlistener.listener || evlistener] : [evlistener];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> unwrap ?</span><br><span class=\"line\">    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EventEmitter.prototype.rawListeners = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rawListeners</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _listeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>了解 Node 中的 Events 模块</p>\n<p>node 中的 events 模块是 node 中使用较多的模块，比如在 node 中的流（stream），其内部使用 <code>events</code> 模块作为父类：</p>\n<p><img src=\"node中的 events 模块/image-20200803102619367.png\" alt=\"image-20200803102619367\"></p>\n<p>作为一个使用广泛的基础模块，其代码中是有些东西值得我们学习和借鉴的。</p>\n<h4 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布/订阅模式\"></a>发布/订阅模式</h4><p>发布/订阅模式定义了一种一对多的依赖关系，观察者同时监听某一个对象相应的状态变化， 当状态变化时通知到所有观察者， 这种设计模式解决了主体对象和观察者之间的耦合问题。</p>\n<p>图示如下：</p>\n<p><img src=\"node中的 events 模块/eventsPic.jpg\" alt=\"img\"></p>\n<p> <em>上图中左边为观察者模式， 右边为 发布/订阅 模式， 可以看出它们之间的区别是发布/订阅模式通过事件调度中心（Event Channel）来对于事件进行统一管理</em></p>\n<p>观察上图可知，发布/订阅这种设计模式的组成特点：</p>\n<ul>\n<li>整体结构有三部分组成， 订阅者（Subscriber）, 发布者（Publisher）以及 事件调度器（Event Channel）</li>\n<li>订阅者在事件调度器中订阅（Subscribe）事件， 发布者发布事件时，订阅该事件的订阅者将会收到消息通知（事件触发的形式）</li>\n</ul>\n<p>在 Node 中的 Events 模块中， 采用了这种设计模式，模块内部维护了一个事件列表（<code>_events</code>）,提供了基础的 api 来进行发布和订阅（<code>emit</code>, <code>on</code>）在 Events 中，订阅事件时需要传入两个参数： 事件名（eventName）以及 事件触发时的回调方法（listener），订阅之后按照下面的结构存储在 <code>_events</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_events = &#123;</span><br><span class=\"line\">  eventName: listener, wrapFn &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>/<span class=\"literal\">true</span>, listener &#125;</span><br><span class=\"line\">\teventName: [listener1, listener2 ....]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当调用 <code>this.emit(eventName)</code> 来发布特定事件时，将会依次调用<code>_events</code> 中的事件（<code>listener</code>）</p>\n<h4 id=\"Events-模块代码实现\"><a href=\"#Events-模块代码实现\" class=\"headerlink\" title=\"Events 模块代码实现\"></a>Events 模块代码实现</h4><ol>\n<li><p><code>on</code> / <code>addListener(eventName, listener)</code></p>\n<p>这个方法的作用是订阅<code>eventName</code> 事件, 当事件被发布时， <code>listener</code> 方法被执行</p>\n<p>具体代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\"><span class=\"comment\">// target: EventEmitter 实例</span></span><br><span class=\"line\"><span class=\"comment\">// type: 事件类型</span></span><br><span class=\"line\"><span class=\"comment\">// listener: 事件触发后的回调方法</span></span><br><span class=\"line\"><span class=\"comment\">// prepend: 是否将回调方法前置（首先触发）,默认为 false, 将会被放到回调方法的最后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_addListener</span>(<span class=\"params\">target, type, listener, prepend</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> events;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> existing;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否为有效的函数    </span></span><br><span class=\"line\">  checkListener(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">  events = target._events;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    events = target._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    target._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// To avoid recursion in the case that type === \"newListener\"! Before</span></span><br><span class=\"line\">    <span class=\"comment\">// adding it to the listeners, first emit \"newListener\".</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (events.newListener !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      target.emit(<span class=\"string\">'newListener'</span>, type,</span><br><span class=\"line\">                  listener.listener ? listener.listener : listener);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Re-assign `events` because a newListener handler could have caused the</span></span><br><span class=\"line\">      <span class=\"comment\">// this._events to be assigned to a new object</span></span><br><span class=\"line\">      events = target._events;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    existing = events[type];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (existing === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Optimize the case of one listener. Don't need the extra array object.</span></span><br><span class=\"line\">    <span class=\"comment\">// 只有一个 listener 的情况， 存储的直接是这个函数</span></span><br><span class=\"line\">    existing = events[type] = listener;</span><br><span class=\"line\">    ++target._eventsCount;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> existing === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Adding the second element, need to change to array.</span></span><br><span class=\"line\">      existing = events[type] =</span><br><span class=\"line\">        prepend ? [listener, existing] : [existing, listener];</span><br><span class=\"line\">      <span class=\"comment\">// If we've already got an array, just append.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prepend) &#123;</span><br><span class=\"line\">      existing.unshift(listener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      existing.push(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check for listener leak</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取到一个事件最多的 listener 数量</span></span><br><span class=\"line\">    m = _getMaxListeners(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &gt; <span class=\"number\">0</span> &amp;&amp; existing.length &gt; m &amp;&amp; !existing.warned) &#123;</span><br><span class=\"line\">      existing.warned = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// No error code for this since it is a Warning</span></span><br><span class=\"line\">      <span class=\"comment\">// eslint-disable-next-line no-restricted-syntax</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Possible EventEmitter memory leak detected. '</span> +</span><br><span class=\"line\">                          existing.length + <span class=\"string\">' '</span> + <span class=\"built_in\">String</span>(type) + <span class=\"string\">' listeners '</span> +</span><br><span class=\"line\">                          <span class=\"string\">'added. Use emitter.setMaxListeners() to '</span> +</span><br><span class=\"line\">                          <span class=\"string\">'increase limit'</span>);</span><br><span class=\"line\">      w.name = <span class=\"string\">'MaxListenersExceededWarning'</span>;</span><br><span class=\"line\">      w.emitter = target;</span><br><span class=\"line\">      w.type = type;</span><br><span class=\"line\">      w.count = existing.length;</span><br><span class=\"line\">      ProcessEmitWarning(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EventEmitter.prototype.addListener = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _addListener(<span class=\"keyword\">this</span>, type, listener, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EventEmitter.prototype.on = EventEmitter.prototype.addListener</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>emit(eventName[, ...args])</code></p>\n<p>作用：发布 <code>eventName</code> 事件， 传入的 args 将会作为该事件下 <code>listener</code> 的参数</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里包含了 type 为 \"error\" 或者其他需要 emit 的触发</span></span><br><span class=\"line\">EventEmitter.prototype.emit = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emit</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) args.push(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> doError = (type === <span class=\"string\">'error'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">  <span class=\"comment\">// 当 events 存在的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events !== <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 当 events 中不存在 error 事件时还 emit 了 error 事件</span></span><br><span class=\"line\">    doError = (doError &amp;&amp; events.error === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 当 events 不存在， 并且 type 为非 error时， 直接返回 false</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!doError)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If there is no 'error' event listener then throw.</span></span><br><span class=\"line\">  <span class=\"comment\">// events 中没有 error 的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (doError) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> er;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      er = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (er <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Note: The comments on the `throw` lines are intentional, they show</span></span><br><span class=\"line\">      <span class=\"comment\">// up in Node's output if this results in an unhandled exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> er; <span class=\"comment\">// Unhandled 'error' event</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// At least give some kind of context to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unhandled error.'</span> + (er ? <span class=\"string\">' ('</span> + er.message + <span class=\"string\">')'</span> : <span class=\"string\">''</span>));</span><br><span class=\"line\">    err.context = er;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err; <span class=\"comment\">// Unhandled 'error' event</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> handler = events[type];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (handler === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handler === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ReflectApply(handler, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = handler.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> listeners = arrayClone(handler, len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; ++i)</span><br><span class=\"line\">      ReflectApply(listeners[i], <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p><code>off</code> / <code>removeListener(eventName, listener)</code><br>作用： 从事件名为 <code>eventName</code> 的事件下移除特定的回调方法（<code>listener</code>）<br>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Emits a 'removeListener' event if and only if the listener was removed.</span></span><br><span class=\"line\"><span class=\"comment\">// 移除特定事件的 listener &amp;&amp; </span></span><br><span class=\"line\"><span class=\"comment\">// EventEmitter.on('removeListener'， handler) 触发</span></span><br><span class=\"line\"><span class=\"comment\">// type: 特定事件名称</span></span><br><span class=\"line\"><span class=\"comment\">// listener: 移除的函数</span></span><br><span class=\"line\">EventEmitter.prototype.removeListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> list, events, position, i, originalListener;</span><br><span class=\"line\"></span><br><span class=\"line\">      checkListener(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">      events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      list = events[type];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 这里判断是否 list 中只有一个 listener 或者 list 是 wrap fn 的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list === listener || list.listener === listener) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--<span class=\"keyword\">this</span>._eventsCount === <span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> events[type];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (events.removeListener)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, list.listener || listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当 list 不是一个函数的时候，这个时候这个 list 是一个数组</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> list !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        position = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = list.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (list[i] === listener || list[i].listener === listener) &#123;</span><br><span class=\"line\">            originalListener = list[i].listener;</span><br><span class=\"line\">            position = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找不到listener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">          <span class=\"comment\">// 第一个是要找到的 listener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>)</span><br><span class=\"line\">          list.shift();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果要进行删除的元素在 list 数组之中</span></span><br><span class=\"line\">          <span class=\"comment\">// splice</span></span><br><span class=\"line\">          spliceOne(list, position);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当 list 删除完成之后只有一个 listener 时， 直接将这个 listener 作为 events[type] 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.length === <span class=\"number\">1</span>)</span><br><span class=\"line\">          events[type] = list[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (events.removeListener !== <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.emit(<span class=\"string\">'removeListener'</span>, type, originalListener || listener);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">EventEmitter.prototype.off = EventEmitter.prototype.removeListener;</span><br></pre></td></tr></table></figure>\n<p>特别：<code>spliceOne</code> 方法, 而非使用<code>splice</code> 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里是删除数组的方法</span><br><span class=\"line\">// 用的方法是找到一个数组的位置， 然后往前挪</span><br><span class=\"line\">// 这种方法性能提升比较大</span><br><span class=\"line\">function spliceOne(list, index) &#123;</span><br><span class=\"line\">  for (; index + 1 &lt; list.length; index++)</span><br><span class=\"line\">    list[index] = list[index + 1];</span><br><span class=\"line\">  list.pop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>once(eventName, listener)</code><br>作用：添加只能调用一次的 <code>listener</code> 方法</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onceWrapper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的 fired 或许是为了更方便的暴露给外部使用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fired) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 移除之后这里的闭包将会被回收了</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target.removeListener(<span class=\"keyword\">this</span>.type, <span class=\"keyword\">this</span>.wrapFn);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fired = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listener.call(<span class=\"keyword\">this</span>.target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listener.apply(<span class=\"keyword\">this</span>.target, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过 onceWrap 维持了一个 state 状态 用来保存是否被触发过的状态</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_onceWrap</span>(<span class=\"params\">target, type, listener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> state = &#123; <span class=\"attr\">fired</span>: <span class=\"literal\">false</span>, <span class=\"attr\">wrapFn</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">target</span>: target, <span class=\"attr\">type</span>: type, <span class=\"attr\">listener</span>: listener &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是注入里一些状态字段</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里保存一些状态字段， 比如： fired 用来表示这个函数有没有被触发过</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wrapped = onceWrapper.bind(state);</span><br><span class=\"line\">  wrapped.listener = listener;</span><br><span class=\"line\">  state.wrapFn = wrapped;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapped;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里的 _oncewrap 方法执行之后是一个方法， 方法上的 listener 属性才是传入 once 方法的</span></span><br><span class=\"line\"><span class=\"comment\">// listener 参数</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 _onceWrap 方法的包装解释了代码中存在的 listener.listener || listener 的判断</span></span><br><span class=\"line\">EventEmitter.prototype.once = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">once</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">  checkListener(listener);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.on(type, _onceWrap(<span class=\"keyword\">this</span>, type, listener));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p><code>prependListener(eventName, listener)</code></p>\n<p>作用：添加 <code>listener</code> 到事件 <code>eventName</code> 回调数组中的第一个， 当事件被发布时， 添加的 <code>listener</code> 第一个执行</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.prependListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prependListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _addListener(<span class=\"keyword\">this</span>, type, listener, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><code>prependOnceListener(eventName, listener)</code></p>\n<p>作用： 添加一次性的 listener 到事件回调函数队列头部</p>\n<p>代码：就是 <code>prependListener</code> 和 <code>_onceWrap</code> 方法的结合</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.prependOnceListener =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">prependOnceListener</span>(<span class=\"params\">type, listener</span>) </span>&#123;</span><br><span class=\"line\">      checkListener(listener);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.prependListener(type, _onceWrap(<span class=\"keyword\">this</span>, type, listener));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p><code>removeAllListeners([eventName])</code></p>\n<p>作用： 移除 <code>eventName</code> 事件的全部 <code>listener</code></p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventEmitter.prototype.removeAllListeners =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeAllListeners</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> listeners, events, i;</span><br><span class=\"line\"></span><br><span class=\"line\">      events = <span class=\"keyword\">this</span>._events;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// not listening for removeListener, no need to emit</span></span><br><span class=\"line\">      <span class=\"comment\">// 为了保证 removeListener 方法在删除完之后最后触发，</span></span><br><span class=\"line\">      <span class=\"comment\">// 需要判断是否存在这个 removeListener 方法是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events.removeListener === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (events[type] !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (--<span class=\"keyword\">this</span>._eventsCount === <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">delete</span> events[type];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// emit removeListener for all listeners on all events</span></span><br><span class=\"line\">      <span class=\"comment\">// _events 中存在 removeListener 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(events);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; keys.length; ++i) &#123;</span><br><span class=\"line\">          key = keys[i];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key === <span class=\"string\">'removeListener'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeAllListeners(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 保证之前移除listener 时能够触发 removeListener 回调</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeAllListeners(<span class=\"string\">'removeListener'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._eventsCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 删除单个事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">      listeners = events[type];</span><br><span class=\"line\">      <span class=\"comment\">// 兼容 listeners 中单个 listener 或者 多个 listener 的问题</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listeners === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(type, listeners);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (listeners !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// LIFO order</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = listeners.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.removeListener(type, listeners[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"8\">\n<li><p><code>rawListeners(eventName)</code> </p>\n<p>作用： 获取到 <code>eventName</code> 事件的全部 <code>listeners</code>, 包括是通过 <code>once</code> 方法创建的包裹 <code>listener</code></p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法用来获取到所有的 listener 无论是原生的还是放在 wrapper 上面的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unwrapListeners</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ret.length; ++i) &#123;</span><br><span class=\"line\">    ret[i] = arr[i].listener || arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到全部的 _listeners </span></span><br><span class=\"line\"><span class=\"comment\">// type event 名称</span></span><br><span class=\"line\"><span class=\"comment\">// unwrap 是否是获取 非once 方法创建的 wrapper listener</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_listeners</span>(<span class=\"params\">target, type, unwrap</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = target._events;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (events === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> evlistener = events[type];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (evlistener === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> evlistener === <span class=\"string\">'function'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unwrap ? [evlistener.listener || evlistener] : [evlistener];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> unwrap ?</span><br><span class=\"line\">    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EventEmitter.prototype.rawListeners = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rawListeners</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _listeners(<span class=\"keyword\">this</span>, type, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"translate3d'","date":"2017-11-05T12:39:20.000Z","_content":"\n### transform 特性\n\n一个使用 `transform` 实现的垂直居中的代码如下:\n\n\n\n```html\n<div class=\"fDiv\">\n  <div class=\"cDiv\"></div>\n</div>\n<style >\n  .fDiv {\n    width: 300px;\n    height: 300px;\n    position: relative\n    background-color: blue;\n  }\n  .cDiv {\n    position: absolute;\n    background-color: red;\n    top: 50%;\n    left: 50%;\n    width: 50%;\n    height: 50%;\n    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n  }\n</style>\n```\n\n`transform` 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移\n\n常见的 `transform 特性如下`\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png)\n\n其中 translate 规定的是元素在 x, y ,z 轴上的位移\n\n#### translate\n\n>(x, y, z)\n>\n>length / percentage  \n\n其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度\n\n在上面的完全居中代码中\n\n```css\nposition: absolute;\nbackground-color: red;\ntop: 50%;\nleft: 50%;\nwidth: 50%;\nheight: 50%;\ntransform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n```\n\n在添加 `transform`之前, 方块是这样被放置的:\n\n因为这里是定位, `top` 以及 `left` 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的\n\n![](http://ov3b9jngp.bkt.clouddn.com/notransform.png)\n\n添加了`transform` 之后\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png)\n\n因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 `left: 50%` 的时候元素被紧靠在父元素的中间垂线上, 使用 `translate` 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。","source":"_posts/translate3d.md","raw":"---\ntitle: translate3d'\ndate: 2017-11-05 20:39:20\ntags: transform\ncategories: CSS\n---\n\n### transform 特性\n\n一个使用 `transform` 实现的垂直居中的代码如下:\n\n\n\n```html\n<div class=\"fDiv\">\n  <div class=\"cDiv\"></div>\n</div>\n<style >\n  .fDiv {\n    width: 300px;\n    height: 300px;\n    position: relative\n    background-color: blue;\n  }\n  .cDiv {\n    position: absolute;\n    background-color: red;\n    top: 50%;\n    left: 50%;\n    width: 50%;\n    height: 50%;\n    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n  }\n</style>\n```\n\n`transform` 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移\n\n常见的 `transform 特性如下`\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png)\n\n其中 translate 规定的是元素在 x, y ,z 轴上的位移\n\n#### translate\n\n>(x, y, z)\n>\n>length / percentage  \n\n其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度\n\n在上面的完全居中代码中\n\n```css\nposition: absolute;\nbackground-color: red;\ntop: 50%;\nleft: 50%;\nwidth: 50%;\nheight: 50%;\ntransform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n```\n\n在添加 `transform`之前, 方块是这样被放置的:\n\n因为这里是定位, `top` 以及 `left` 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的\n\n![](http://ov3b9jngp.bkt.clouddn.com/notransform.png)\n\n添加了`transform` 之后\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png)\n\n因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 `left: 50%` 的时候元素被紧靠在父元素的中间垂线上, 使用 `translate` 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。","slug":"translate3d","published":1,"updated":"2020-09-14T06:36:25.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t77002ei2osi011wjx5","content":"<h3 id=\"transform-特性\"><a href=\"#transform-特性\" class=\"headerlink\" title=\"transform 特性\"></a>transform 特性</h3><p>一个使用 <code>transform</code> 实现的垂直居中的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fDiv\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> &gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.fDiv</span> &#123;</span></span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.cDiv</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    width: 50%;</span><br><span class=\"line\">    height: 50%;</span><br><span class=\"line\">    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>transform</code> 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移</p>\n<p>常见的 <code>transform 特性如下</code></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png\" alt></p>\n<p>其中 translate 规定的是元素在 x, y ,z 轴上的位移</p>\n<h4 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h4><blockquote>\n<p>(x, y, z)</p>\n<p>length / percentage  </p>\n</blockquote>\n<p>其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度</p>\n<p>在上面的完全居中代码中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 50%;</span><br><span class=\"line\">transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br></pre></td></tr></table></figure>\n<p>在添加 <code>transform</code>之前, 方块是这样被放置的:</p>\n<p>因为这里是定位, <code>top</code> 以及 <code>left</code> 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/notransform.png\" alt></p>\n<p>添加了<code>transform</code> 之后</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png\" alt></p>\n<p>因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 <code>left: 50%</code> 的时候元素被紧靠在父元素的中间垂线上, 使用 <code>translate</code> 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"transform-特性\"><a href=\"#transform-特性\" class=\"headerlink\" title=\"transform 特性\"></a>transform 特性</h3><p>一个使用 <code>transform</code> 实现的垂直居中的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fDiv\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> &gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.fDiv</span> &#123;</span></span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    position: relative</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.cDiv</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    width: 50%;</span><br><span class=\"line\">    height: 50%;</span><br><span class=\"line\">    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>transform</code> 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移</p>\n<p>常见的 <code>transform 特性如下</code></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png\" alt></p>\n<p>其中 translate 规定的是元素在 x, y ,z 轴上的位移</p>\n<h4 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h4><blockquote>\n<p>(x, y, z)</p>\n<p>length / percentage  </p>\n</blockquote>\n<p>其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度</p>\n<p>在上面的完全居中代码中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 50%;</span><br><span class=\"line\">transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br></pre></td></tr></table></figure>\n<p>在添加 <code>transform</code>之前, 方块是这样被放置的:</p>\n<p>因为这里是定位, <code>top</code> 以及 <code>left</code> 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/notransform.png\" alt></p>\n<p>添加了<code>transform</code> 之后</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png\" alt></p>\n<p>因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 <code>left: 50%</code> 的时候元素被紧靠在父元素的中间垂线上, 使用 <code>translate</code> 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。</p>\n"},{"title":"this.nextTick in vue.js","date":"2018-01-21T09:50:07.000Z","_content":"\n### `this.nextTick` 的作用\n\n在 `Vue.js` 的官方文档中是这样描述 `this.nextTick` 的:\n\n>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 `Vue.nextTick(callback)` 。这样回调函数在 DOM 更新完成后就会调用.\n\n在 `vue.js` 中, 使用 `this.nextTick` 的作用是更新 `dom` , 在 涉及关于在 `vue.js` 中 `Dom` 的操作中, 当我们想要操作被更新后的 `DOM`的时候，可以使用 `this.nextTick` 进行操作。\n\n### 为什么采用   `this.nextTick`  \n\n>Vue **异步**执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 `Promise.then` 和 `MessageChannel`，如果执行环境不支持，会采用 `setTimeout(fn, 0)` 代替。\n\n使用 `this.nextTick` 的两种情况:\n\n1.  在 `created` 阶段的时候， 这个时候 `DOM` 元素尚未挂载, 在这个钩子函数内操作 `DOM` 是无法找到 `DOM` 元素的， 这个时候使用 `this.nextTick` 类似于使用 `mounted` 的钩子函数， 这个时候所有的 `DOM` 元素挂载和渲染均已经完成，这个时候可以执行对于 `DOM` 元素的操作。\n\n2.  当我们想要对于数据发生变化之后的 `DOM` 元素之后执行一些操作的时候， 我们可以使用 `this.nextTick(callback)` 那么 `callback` 回调函数就会当 `DOM` 元素被更新之后被触发。\n\n   ​\n\n   ![https://cn.vuejs.org/images/lifecycle.png](https://cn.vuejs.org/images/lifecycle.png) \n\n上图是 `vue` 实例的生命周期图。\n\n","source":"_posts/this-nextTick-in-vue-js.md","raw":"---\ntitle: this.nextTick in vue.js\ndate: 2018-01-21 17:50:07\ntags: this.nextTick\ncategories: Vue\n---\n\n### `this.nextTick` 的作用\n\n在 `Vue.js` 的官方文档中是这样描述 `this.nextTick` 的:\n\n>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 `Vue.nextTick(callback)` 。这样回调函数在 DOM 更新完成后就会调用.\n\n在 `vue.js` 中, 使用 `this.nextTick` 的作用是更新 `dom` , 在 涉及关于在 `vue.js` 中 `Dom` 的操作中, 当我们想要操作被更新后的 `DOM`的时候，可以使用 `this.nextTick` 进行操作。\n\n### 为什么采用   `this.nextTick`  \n\n>Vue **异步**执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 `Promise.then` 和 `MessageChannel`，如果执行环境不支持，会采用 `setTimeout(fn, 0)` 代替。\n\n使用 `this.nextTick` 的两种情况:\n\n1.  在 `created` 阶段的时候， 这个时候 `DOM` 元素尚未挂载, 在这个钩子函数内操作 `DOM` 是无法找到 `DOM` 元素的， 这个时候使用 `this.nextTick` 类似于使用 `mounted` 的钩子函数， 这个时候所有的 `DOM` 元素挂载和渲染均已经完成，这个时候可以执行对于 `DOM` 元素的操作。\n\n2.  当我们想要对于数据发生变化之后的 `DOM` 元素之后执行一些操作的时候， 我们可以使用 `this.nextTick(callback)` 那么 `callback` 回调函数就会当 `DOM` 元素被更新之后被触发。\n\n   ​\n\n   ![https://cn.vuejs.org/images/lifecycle.png](https://cn.vuejs.org/images/lifecycle.png) \n\n上图是 `vue` 实例的生命周期图。\n\n","slug":"this-nextTick-in-vue-js","published":1,"updated":"2020-09-14T06:36:25.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t79002ii2osubp3eoqy","content":"<h3 id=\"this-nextTick-的作用\"><a href=\"#this-nextTick-的作用\" class=\"headerlink\" title=\"this.nextTick 的作用\"></a><code>this.nextTick</code> 的作用</h3><p>在 <code>Vue.js</code> 的官方文档中是这样描述 <code>this.nextTick</code> 的:</p>\n<blockquote>\n<p>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用.</p>\n</blockquote>\n<p>在 <code>vue.js</code> 中, 使用 <code>this.nextTick</code> 的作用是更新 <code>dom</code> , 在 涉及关于在 <code>vue.js</code> 中 <code>Dom</code> 的操作中, 当我们想要操作被更新后的 <code>DOM</code>的时候，可以使用 <code>this.nextTick</code> 进行操作。</p>\n<h3 id=\"为什么采用-this-nextTick\"><a href=\"#为什么采用-this-nextTick\" class=\"headerlink\" title=\"为什么采用   this.nextTick\"></a>为什么采用   <code>this.nextTick</code></h3><blockquote>\n<p>Vue <strong>异步</strong>执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p>\n</blockquote>\n<p>使用 <code>this.nextTick</code> 的两种情况:</p>\n<ol>\n<li><p>在 <code>created</code> 阶段的时候， 这个时候 <code>DOM</code> 元素尚未挂载, 在这个钩子函数内操作 <code>DOM</code> 是无法找到 <code>DOM</code> 元素的， 这个时候使用 <code>this.nextTick</code> 类似于使用 <code>mounted</code> 的钩子函数， 这个时候所有的 <code>DOM</code> 元素挂载和渲染均已经完成，这个时候可以执行对于 <code>DOM</code> 元素的操作。</p>\n</li>\n<li><p>当我们想要对于数据发生变化之后的 <code>DOM</code> 元素之后执行一些操作的时候， 我们可以使用 <code>this.nextTick(callback)</code> 那么 <code>callback</code> 回调函数就会当 <code>DOM</code> 元素被更新之后被触发。</p>\n<p>​</p>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"https://cn.vuejs.org/images/lifecycle.png\"> </p>\n</li>\n</ol>\n<p>上图是 <code>vue</code> 实例的生命周期图。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"this-nextTick-的作用\"><a href=\"#this-nextTick-的作用\" class=\"headerlink\" title=\"this.nextTick 的作用\"></a><code>this.nextTick</code> 的作用</h3><p>在 <code>Vue.js</code> 的官方文档中是这样描述 <code>this.nextTick</code> 的:</p>\n<blockquote>\n<p>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用.</p>\n</blockquote>\n<p>在 <code>vue.js</code> 中, 使用 <code>this.nextTick</code> 的作用是更新 <code>dom</code> , 在 涉及关于在 <code>vue.js</code> 中 <code>Dom</code> 的操作中, 当我们想要操作被更新后的 <code>DOM</code>的时候，可以使用 <code>this.nextTick</code> 进行操作。</p>\n<h3 id=\"为什么采用-this-nextTick\"><a href=\"#为什么采用-this-nextTick\" class=\"headerlink\" title=\"为什么采用   this.nextTick\"></a>为什么采用   <code>this.nextTick</code></h3><blockquote>\n<p>Vue <strong>异步</strong>执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p>\n</blockquote>\n<p>使用 <code>this.nextTick</code> 的两种情况:</p>\n<ol>\n<li><p>在 <code>created</code> 阶段的时候， 这个时候 <code>DOM</code> 元素尚未挂载, 在这个钩子函数内操作 <code>DOM</code> 是无法找到 <code>DOM</code> 元素的， 这个时候使用 <code>this.nextTick</code> 类似于使用 <code>mounted</code> 的钩子函数， 这个时候所有的 <code>DOM</code> 元素挂载和渲染均已经完成，这个时候可以执行对于 <code>DOM</code> 元素的操作。</p>\n</li>\n<li><p>当我们想要对于数据发生变化之后的 <code>DOM</code> 元素之后执行一些操作的时候， 我们可以使用 <code>this.nextTick(callback)</code> 那么 <code>callback</code> 回调函数就会当 <code>DOM</code> 元素被更新之后被触发。</p>\n<p>​</p>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"https://cn.vuejs.org/images/lifecycle.png\"> </p>\n</li>\n</ol>\n<p>上图是 <code>vue</code> 实例的生命周期图。</p>\n"},{"title":"prop in vue.js（prop 的初始化）","date":"2019-05-25T09:10:27.000Z","_content":"\n### Prop\n\n在 vue.js 中, 使用 `prop` 可以实现父组件向子组件传递值，在子组件中的 `props` 中的数据将会和父组件中传递的相应的 `prop` 保持一致，在传递 `prop` 的时候，可以传递一个数组, 例如：\n\n```js\nprops: ['data1', 'data2', 'data3' ...]\n```\n\n 或者可以传递一个对象，对象的键是要传递的 prop 名称， 对象的值可以是一个对象， 这个对象中 可以定义传递值的`type` 以及 `default` 属性：\n\n```js\nprops: {\n  data1: {\n    type: Boolean, // 传递值的类型， 可以是一个数组 [Boolean, String]\n    default: true // 当父组件没有传递的时候， 子组件中使用的默认值\n  }\n}\n```\n\n当父组件中传递值的类型不符合子组件 props 中相应值的 type 的时候， vue 会在控制台进行报错。\n\n在源码中， 在初始化 prop 的时候， 会对prop 进行校验。\n\n#### 初始化 `props`\n\n在 `initState` 中：当当前组件中存在 `props` 的时候， 对于 `props` 执行 `initProps` 进行初始化：\n\n```js\nfunction initState (vm) {\n    vm._watchers = [];\n    var opts = vm.$options;\n    if (opts.props) { initProps(vm, opts.props); }\n    if (opts.methods) { initMethods(vm, opts.methods); }\n    if (opts.data) {\n      initData(vm);\n    } else {\n      observe(vm._data = {}, true /* asRootData */);\n    }\n    if (opts.computed) { initComputed(vm, opts.computed); }\n    if (opts.watch && opts.watch !== nativeWatch) {\n      initWatch(vm, opts.watch);\n    }\n  }\n```\n\n在 `initProps` 中接受两个参数： `vm` 当前 vue 的实例， `propsOptions` 在当前组件中规范化后的 `props` 对象\n\n>在执行 `initProps` 方法之前， 在 `vm.$options` 属性中的  `props` 属性中已经对于传递的 `props` 进行了规范化处理为下面的这种形式：\n>\n>```js\n>test: {\n>  type: sometype,\n>  default: //  默认值， 如果没有传， 那么就没有\n>}\n>```\n>\n>\n\n`initProps`:\n\n```js\n// 用于初始化 props 对象  \nfunction initProps (vm, propsOptions) {\n    // vm.$options.propsData: 父组件中传递的 props 对象\n    var propsData = vm.$options.propsData || {};\n    var props = vm._props = {};\n    // cache prop keys so that future props updates can iterate using Array\n    // instead of dynamic object key enumeration.\n    var keys = vm.$options._propKeys = [];\n    var isRoot = !vm.$parent;\n    // root instance props should be converted\n    if (!isRoot) {\n      toggleObserving(false);\n    }\n    var loop = function ( key ) {\n      keys.push(key);\n      var value = validateProp(key, propsOptions, propsData, vm);\n      /* istanbul ignore else */\n      {\n        var hyphenatedKey = hyphenate(key);\n        if (isReservedAttribute(hyphenatedKey) ||\n            config.isReservedAttr(hyphenatedKey)) {\n          warn(\n            (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n            vm\n          );\n        }\n        defineReactive(props, key, value, function () {\n          if (!isRoot && !isUpdatingChildComponent) {\n            warn(\n              \"Avoid mutating a prop directly since the value will be \" +\n              \"overwritten whenever the parent component re-renders. \" +\n              \"Instead, use a data or computed property based on the prop's \" +\n              \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n              vm\n            );\n          }\n        });\n      }\n      // static props are already proxied on the component's prototype\n      // during Vue.extend(). We only need to proxy props defined at\n      // instantiation here.\n      if (!(key in vm)) {\n        proxy(vm, \"_props\", key);\n      }\n    };\n\n    for (var key in propsOptions) loop( key );\n    toggleObserving(true);\n  }\n```\n\n在上面的函数中。我们传入了 vue 实例和 当前组件中传入的 props 中的数据， 在这个函数中， 我们定义了四个变量：\n\n```js\nvar propsData = vm.$options.propsData || {}; // 获取到父组件传递到子组件中的值\nvar props = vm._props = {}; // 在实例上的 _props 属性上定义空对象 {}\n// cache prop keys so that future props updates can iterate using Array\n// instead of dynamic object key enumeration.\nvar keys = vm.$options._propKeys = []; // 在 实例的 $options 属性上定义 _propKeys 属性， 并初始化为数组\nvar isRoot = !vm.$parent; // 判断是否为根元素， 因为对于根元素， 其实例上没有 `$parent` 属性， 这个时候 `isRoot` 为true\n```\n\n上面的 `toggleObserving` 方法用来切换是否对与数据进行监听的开关函数：\n\n```js\n\n  /**\n   * In some cases we may want to disable observation inside a component's\n   * update computation.\n   */\n  var shouldObserve = true;\n  // 根据传递的 vue 属性来切换 `shouleObserve` 的值\n  function toggleObserving (value) {\n    shouldObserve = value;\n  }\n\n```\n\n通过调用这个方法， 改变的是全局变量 `shouldObserve` 的值， 这个值的作用我们后面在说， 现在， 我们先看下在 `initProps` 中的 `for in ` 中的 `loop` 方法：\n\n```js\nfor (var key in propsOptions) loop(key);\n```\n\n在上面的代码中， 对于当前组件内 prop 中的每一个 prop 值， 都执行 `loop` 方法：\n\n`loop` 方法：\n\n```js\n// key prop 值\nvar loop = function ( key ) {\n  // 将当前组件内所有的 prop 值存入到 keys 中\n  keys.push(key);\n  // 根据定义的 prop 规则判断传入的 prop 值是否有效\n  var value = validateProp(key, propsOptions, propsData, vm);\n  /* istanbul ignore else */\n  {\n    var hyphenatedKey = hyphenate(key);\n    if (isReservedAttribute(hyphenatedKey) ||\n        config.isReservedAttr(hyphenatedKey)) {\n      warn(\n        (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n        vm\n      );\n    }\n    defineReactive(props, key, value, function () {\n      if (!isRoot && !isUpdatingChildComponent) {\n        warn(\n          \"Avoid mutating a prop directly since the value will be \" +\n          \"overwritten whenever the parent component re-renders. \" +\n          \"Instead, use a data or computed property based on the prop's \" +\n          \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n          vm\n        );\n      }\n    });\n  }\n  // static props are already proxied on the component's prototype\n  // during Vue.extend(). We only need to proxy props defined at\n  // instantiation here.\n  if (!(key in vm)) {\n    proxy(vm, \"_props\", key);\n  }\n};\n\n```\n\n在上面的 loop 方法中， 当传入 key 之后， 执行了 `validateProp` 方法， 这个方法定义如下：\n\n```js\n  /**\n   * \n   * @param {key} 在 props 中定义的 prop 值 \n   * @param {propOptions} propOptions : 所有的 prop 值\n   * @param {propsData} propsData 从上层组件传入的值\n   * @param {vm} vue 实例\n   */\n  function validateProp (\n    key,\n    propOptions,\n    propsData,\n    vm\n  ) {\n    // 获取当前 prop 值的规则\n    var prop = propOptions[key];\n    // 判断这个 prop 值有没有被传入到\n    var absent = !hasOwn(propsData, key);\n    var value = propsData[key];\n    // boolean casting\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\n    if (booleanIndex > -1) {\n      if (absent && !hasOwn(prop, 'default')) {\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n    // check default value\n    if (value === undefined) {\n      value = getPropDefaultValue(vm, prop, key);\n      // since the default value is a fresh copy,\n      // make sure to observe it.\n      var prevShouldObserve = shouldObserve;\n      toggleObserving(true);\n      observe(value);\n      toggleObserving(prevShouldObserve);\n    }\n    {\n      assertProp(prop, key, value, vm, absent);\n    }\n    return value\n  }\n```\n\n在这个方法内部 定义了四个变量：\n\n`prop`: 当前传入 prop 值的对象\n\n`absent`:  布尔值， 当前 prop 有没有被父组件传入\n\n`value`:  父组件传入的 prop 的值， 如果没有传入，为 `undefined`\n\n`booleanIndex`:  是通过 `getTypeIndex` 方法返回的， 这个方法的作用是：\n\n当 prop 中声明的 type 中包含有布尔值的时候， 如果 type 为 String， 返回 0， 如果 type 为数组， 返回这个 Boolean 值在 type 数组中的顺序 index， 如果不包含布尔值， 那么返回 -1\n\n`getTypeIndex`:\n\n```js\n// expectedTypes： prop 中声明的 type\n// type: 相应的 type 类型， 例如： Boolean, String\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n```\n\n这里， 使用了 `isSameType` 方法来进行比较者两个 type 是否相等：\n\n```js\n /**\n   * Use function string name to check built-in types,\n   * because a simple equality check will fail when running\n   * across different vms / iframes.\n   */\n  function getType (fn) {\n    var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n    return match ? match[1] : ''\n  }\n\n  function isSameType (a, b) {\n    return getType(a) === getType(b)\n  }\n```\n\n在上面的 `getType` 中， 调用 `fn.toString()` 方法， 再通过正则表达式获取到 `(\\w+) ` 内的内容，例如：\n\n> 因为， 在 js 中例如 `Boolean`, `String` 之类的类型， 都是代表着一个个的函数方法， 对于这个函数， 可以调用 toString\n\n```json\nBoolean\n// ƒ Boolean() { [native code] }\nBoolean.toString()\n//\"function Boolean() { [native code] }\"\n```\n\n接来下， 对于数据进行初始化：针对需要校验的 type 中包含有 `Boolean` 字段的时候\n\n```js\n// 当 prop 的type中包含有 “Boolean” 的时候  \nif (booleanIndex > -1) {\n      // 当没有传入的 prop 的时候， 并且没有 default 属性的时候\n      if (absent && !hasOwn(prop, 'default')) {\n        // 将 prop 值置为 false\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // 当 boolean 有更高优先级的时候， 将空字符串或者和 prop 中名字相同的值转化为 布尔值\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n```\n\n例如：\n\n有以下子组件： child.vue\n\n```vue\nexport default {\n  props: {\n    propData: {\n      type: [Boolean, String],\n\t\t\tdefault: ''\n    }\n  }\n}\n```\n\n\n\n在父组件中如下定义：\n\n```vue\n<child prop-data=\"\"></child>\n```\n\n那么在子组件中， 获得到的 `propData` 值为 `true`;\n\n或者， 当在父组件中如下定义的时候：\n\n```vue\n<child prop-data=\"propData\"></child>\n```\n\n和上面相同， 也是为 `true`,\n\n总之：\n\n当定义的 prop 接受值的类型，`Boolean` 值类型优先级要高于 `String` 的时候（在 type 中  `Boolean` 在 `String` 前面 `[Boolean, String]`）:\n\n* 当传递的值为空字符串的时候， 接受到的prop 值变为 `true`\n* 当传递的值为字符串并且和驼峰后的 prop 名相同的时候， 接受的值也将转为 `true`\n\n另外， 当在父组件中没有传入 prop 值， 并且， 没有声明 `default` 属性， 当校验 `type` 中包含有`Boolean` 的时候， 这个时候， 获取这个  `prop` 的值将为 `false`\n\n`child.vue` 组件中：\n\n```vue\nexport default {\n  props: {\n    propData: {\n      type: [Boolean, String]\n    }\n  }\n}\n```\n\n父组件中：\n\n```vue\n<child></child>\n```\n\n在 `child.vue` 组件中获取到 `propData` 的值为 `false`;","source":"_posts/prop in vue（prop 的初始化）.md","raw":"---\ntitle: prop in vue.js（prop 的初始化）\ndate: 2019-05-25 17:10:27\ntags: vue 源码\ncategories: vue 源码阅读\n---\n\n### Prop\n\n在 vue.js 中, 使用 `prop` 可以实现父组件向子组件传递值，在子组件中的 `props` 中的数据将会和父组件中传递的相应的 `prop` 保持一致，在传递 `prop` 的时候，可以传递一个数组, 例如：\n\n```js\nprops: ['data1', 'data2', 'data3' ...]\n```\n\n 或者可以传递一个对象，对象的键是要传递的 prop 名称， 对象的值可以是一个对象， 这个对象中 可以定义传递值的`type` 以及 `default` 属性：\n\n```js\nprops: {\n  data1: {\n    type: Boolean, // 传递值的类型， 可以是一个数组 [Boolean, String]\n    default: true // 当父组件没有传递的时候， 子组件中使用的默认值\n  }\n}\n```\n\n当父组件中传递值的类型不符合子组件 props 中相应值的 type 的时候， vue 会在控制台进行报错。\n\n在源码中， 在初始化 prop 的时候， 会对prop 进行校验。\n\n#### 初始化 `props`\n\n在 `initState` 中：当当前组件中存在 `props` 的时候， 对于 `props` 执行 `initProps` 进行初始化：\n\n```js\nfunction initState (vm) {\n    vm._watchers = [];\n    var opts = vm.$options;\n    if (opts.props) { initProps(vm, opts.props); }\n    if (opts.methods) { initMethods(vm, opts.methods); }\n    if (opts.data) {\n      initData(vm);\n    } else {\n      observe(vm._data = {}, true /* asRootData */);\n    }\n    if (opts.computed) { initComputed(vm, opts.computed); }\n    if (opts.watch && opts.watch !== nativeWatch) {\n      initWatch(vm, opts.watch);\n    }\n  }\n```\n\n在 `initProps` 中接受两个参数： `vm` 当前 vue 的实例， `propsOptions` 在当前组件中规范化后的 `props` 对象\n\n>在执行 `initProps` 方法之前， 在 `vm.$options` 属性中的  `props` 属性中已经对于传递的 `props` 进行了规范化处理为下面的这种形式：\n>\n>```js\n>test: {\n>  type: sometype,\n>  default: //  默认值， 如果没有传， 那么就没有\n>}\n>```\n>\n>\n\n`initProps`:\n\n```js\n// 用于初始化 props 对象  \nfunction initProps (vm, propsOptions) {\n    // vm.$options.propsData: 父组件中传递的 props 对象\n    var propsData = vm.$options.propsData || {};\n    var props = vm._props = {};\n    // cache prop keys so that future props updates can iterate using Array\n    // instead of dynamic object key enumeration.\n    var keys = vm.$options._propKeys = [];\n    var isRoot = !vm.$parent;\n    // root instance props should be converted\n    if (!isRoot) {\n      toggleObserving(false);\n    }\n    var loop = function ( key ) {\n      keys.push(key);\n      var value = validateProp(key, propsOptions, propsData, vm);\n      /* istanbul ignore else */\n      {\n        var hyphenatedKey = hyphenate(key);\n        if (isReservedAttribute(hyphenatedKey) ||\n            config.isReservedAttr(hyphenatedKey)) {\n          warn(\n            (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n            vm\n          );\n        }\n        defineReactive(props, key, value, function () {\n          if (!isRoot && !isUpdatingChildComponent) {\n            warn(\n              \"Avoid mutating a prop directly since the value will be \" +\n              \"overwritten whenever the parent component re-renders. \" +\n              \"Instead, use a data or computed property based on the prop's \" +\n              \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n              vm\n            );\n          }\n        });\n      }\n      // static props are already proxied on the component's prototype\n      // during Vue.extend(). We only need to proxy props defined at\n      // instantiation here.\n      if (!(key in vm)) {\n        proxy(vm, \"_props\", key);\n      }\n    };\n\n    for (var key in propsOptions) loop( key );\n    toggleObserving(true);\n  }\n```\n\n在上面的函数中。我们传入了 vue 实例和 当前组件中传入的 props 中的数据， 在这个函数中， 我们定义了四个变量：\n\n```js\nvar propsData = vm.$options.propsData || {}; // 获取到父组件传递到子组件中的值\nvar props = vm._props = {}; // 在实例上的 _props 属性上定义空对象 {}\n// cache prop keys so that future props updates can iterate using Array\n// instead of dynamic object key enumeration.\nvar keys = vm.$options._propKeys = []; // 在 实例的 $options 属性上定义 _propKeys 属性， 并初始化为数组\nvar isRoot = !vm.$parent; // 判断是否为根元素， 因为对于根元素， 其实例上没有 `$parent` 属性， 这个时候 `isRoot` 为true\n```\n\n上面的 `toggleObserving` 方法用来切换是否对与数据进行监听的开关函数：\n\n```js\n\n  /**\n   * In some cases we may want to disable observation inside a component's\n   * update computation.\n   */\n  var shouldObserve = true;\n  // 根据传递的 vue 属性来切换 `shouleObserve` 的值\n  function toggleObserving (value) {\n    shouldObserve = value;\n  }\n\n```\n\n通过调用这个方法， 改变的是全局变量 `shouldObserve` 的值， 这个值的作用我们后面在说， 现在， 我们先看下在 `initProps` 中的 `for in ` 中的 `loop` 方法：\n\n```js\nfor (var key in propsOptions) loop(key);\n```\n\n在上面的代码中， 对于当前组件内 prop 中的每一个 prop 值， 都执行 `loop` 方法：\n\n`loop` 方法：\n\n```js\n// key prop 值\nvar loop = function ( key ) {\n  // 将当前组件内所有的 prop 值存入到 keys 中\n  keys.push(key);\n  // 根据定义的 prop 规则判断传入的 prop 值是否有效\n  var value = validateProp(key, propsOptions, propsData, vm);\n  /* istanbul ignore else */\n  {\n    var hyphenatedKey = hyphenate(key);\n    if (isReservedAttribute(hyphenatedKey) ||\n        config.isReservedAttr(hyphenatedKey)) {\n      warn(\n        (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n        vm\n      );\n    }\n    defineReactive(props, key, value, function () {\n      if (!isRoot && !isUpdatingChildComponent) {\n        warn(\n          \"Avoid mutating a prop directly since the value will be \" +\n          \"overwritten whenever the parent component re-renders. \" +\n          \"Instead, use a data or computed property based on the prop's \" +\n          \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n          vm\n        );\n      }\n    });\n  }\n  // static props are already proxied on the component's prototype\n  // during Vue.extend(). We only need to proxy props defined at\n  // instantiation here.\n  if (!(key in vm)) {\n    proxy(vm, \"_props\", key);\n  }\n};\n\n```\n\n在上面的 loop 方法中， 当传入 key 之后， 执行了 `validateProp` 方法， 这个方法定义如下：\n\n```js\n  /**\n   * \n   * @param {key} 在 props 中定义的 prop 值 \n   * @param {propOptions} propOptions : 所有的 prop 值\n   * @param {propsData} propsData 从上层组件传入的值\n   * @param {vm} vue 实例\n   */\n  function validateProp (\n    key,\n    propOptions,\n    propsData,\n    vm\n  ) {\n    // 获取当前 prop 值的规则\n    var prop = propOptions[key];\n    // 判断这个 prop 值有没有被传入到\n    var absent = !hasOwn(propsData, key);\n    var value = propsData[key];\n    // boolean casting\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\n    if (booleanIndex > -1) {\n      if (absent && !hasOwn(prop, 'default')) {\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n    // check default value\n    if (value === undefined) {\n      value = getPropDefaultValue(vm, prop, key);\n      // since the default value is a fresh copy,\n      // make sure to observe it.\n      var prevShouldObserve = shouldObserve;\n      toggleObserving(true);\n      observe(value);\n      toggleObserving(prevShouldObserve);\n    }\n    {\n      assertProp(prop, key, value, vm, absent);\n    }\n    return value\n  }\n```\n\n在这个方法内部 定义了四个变量：\n\n`prop`: 当前传入 prop 值的对象\n\n`absent`:  布尔值， 当前 prop 有没有被父组件传入\n\n`value`:  父组件传入的 prop 的值， 如果没有传入，为 `undefined`\n\n`booleanIndex`:  是通过 `getTypeIndex` 方法返回的， 这个方法的作用是：\n\n当 prop 中声明的 type 中包含有布尔值的时候， 如果 type 为 String， 返回 0， 如果 type 为数组， 返回这个 Boolean 值在 type 数组中的顺序 index， 如果不包含布尔值， 那么返回 -1\n\n`getTypeIndex`:\n\n```js\n// expectedTypes： prop 中声明的 type\n// type: 相应的 type 类型， 例如： Boolean, String\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n```\n\n这里， 使用了 `isSameType` 方法来进行比较者两个 type 是否相等：\n\n```js\n /**\n   * Use function string name to check built-in types,\n   * because a simple equality check will fail when running\n   * across different vms / iframes.\n   */\n  function getType (fn) {\n    var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n    return match ? match[1] : ''\n  }\n\n  function isSameType (a, b) {\n    return getType(a) === getType(b)\n  }\n```\n\n在上面的 `getType` 中， 调用 `fn.toString()` 方法， 再通过正则表达式获取到 `(\\w+) ` 内的内容，例如：\n\n> 因为， 在 js 中例如 `Boolean`, `String` 之类的类型， 都是代表着一个个的函数方法， 对于这个函数， 可以调用 toString\n\n```json\nBoolean\n// ƒ Boolean() { [native code] }\nBoolean.toString()\n//\"function Boolean() { [native code] }\"\n```\n\n接来下， 对于数据进行初始化：针对需要校验的 type 中包含有 `Boolean` 字段的时候\n\n```js\n// 当 prop 的type中包含有 “Boolean” 的时候  \nif (booleanIndex > -1) {\n      // 当没有传入的 prop 的时候， 并且没有 default 属性的时候\n      if (absent && !hasOwn(prop, 'default')) {\n        // 将 prop 值置为 false\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // 当 boolean 有更高优先级的时候， 将空字符串或者和 prop 中名字相同的值转化为 布尔值\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n```\n\n例如：\n\n有以下子组件： child.vue\n\n```vue\nexport default {\n  props: {\n    propData: {\n      type: [Boolean, String],\n\t\t\tdefault: ''\n    }\n  }\n}\n```\n\n\n\n在父组件中如下定义：\n\n```vue\n<child prop-data=\"\"></child>\n```\n\n那么在子组件中， 获得到的 `propData` 值为 `true`;\n\n或者， 当在父组件中如下定义的时候：\n\n```vue\n<child prop-data=\"propData\"></child>\n```\n\n和上面相同， 也是为 `true`,\n\n总之：\n\n当定义的 prop 接受值的类型，`Boolean` 值类型优先级要高于 `String` 的时候（在 type 中  `Boolean` 在 `String` 前面 `[Boolean, String]`）:\n\n* 当传递的值为空字符串的时候， 接受到的prop 值变为 `true`\n* 当传递的值为字符串并且和驼峰后的 prop 名相同的时候， 接受的值也将转为 `true`\n\n另外， 当在父组件中没有传入 prop 值， 并且， 没有声明 `default` 属性， 当校验 `type` 中包含有`Boolean` 的时候， 这个时候， 获取这个  `prop` 的值将为 `false`\n\n`child.vue` 组件中：\n\n```vue\nexport default {\n  props: {\n    propData: {\n      type: [Boolean, String]\n    }\n  }\n}\n```\n\n父组件中：\n\n```vue\n<child></child>\n```\n\n在 `child.vue` 组件中获取到 `propData` 的值为 `false`;","slug":"prop in vue（prop 的初始化）","published":1,"updated":"2020-09-14T06:36:25.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7c002ki2os9rvn29qt","content":"<h3 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h3><p>在 vue.js 中, 使用 <code>prop</code> 可以实现父组件向子组件传递值，在子组件中的 <code>props</code> 中的数据将会和父组件中传递的相应的 <code>prop</code> 保持一致，在传递 <code>prop</code> 的时候，可以传递一个数组, 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'data1'</span>, <span class=\"string\">'data2'</span>, <span class=\"string\">'data3'</span> ...]</span><br></pre></td></tr></table></figure>\n<p> 或者可以传递一个对象，对象的键是要传递的 prop 名称， 对象的值可以是一个对象， 这个对象中 可以定义传递值的<code>type</code> 以及 <code>default</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  data1: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>, <span class=\"comment\">// 传递值的类型， 可以是一个数组 [Boolean, String]</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 当父组件没有传递的时候， 子组件中使用的默认值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当父组件中传递值的类型不符合子组件 props 中相应值的 type 的时候， vue 会在控制台进行报错。</p>\n<p>在源码中， 在初始化 prop 的时候， 会对prop 进行校验。</p>\n<h4 id=\"初始化-props\"><a href=\"#初始化-props\" class=\"headerlink\" title=\"初始化 props\"></a>初始化 <code>props</code></h4><p>在 <code>initState</code> 中：当当前组件中存在 <code>props</code> 的时候， 对于 <code>props</code> 执行 <code>initProps</code> 进行初始化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    vm._watchers = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = vm.$options;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">      initData(vm);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">      initWatch(vm, opts.watch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>initProps</code> 中接受两个参数： <code>vm</code> 当前 vue 的实例， <code>propsOptions</code> 在当前组件中规范化后的 <code>props</code> 对象</p>\n<blockquote>\n<p>在执行 <code>initProps</code> 方法之前， 在 <code>vm.$options</code> 属性中的  <code>props</code> 属性中已经对于传递的 <code>props</code> 进行了规范化处理为下面的这种形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;test: &#123;</span><br><span class=\"line\">&gt;  type: sometype,</span><br><span class=\"line\">&gt;  <span class=\"keyword\">default</span>: <span class=\"comment\">//  默认值， 如果没有传， 那么就没有</span></span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p><code>initProps</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于初始化 props 对象  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initProps</span> (<span class=\"params\">vm, propsOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// vm.$options.propsData: 父组件中传递的 props 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> propsData = vm.$options.propsData || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> props = vm._props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\">    <span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = vm.$options._propKeys = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isRoot = !vm.$parent;</span><br><span class=\"line\">    <span class=\"comment\">// root instance props should be converted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isRoot) &#123;</span><br><span class=\"line\">      toggleObserving(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) </span>&#123;</span><br><span class=\"line\">      keys.push(key);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = validateProp(key, propsOptions, propsData, vm);</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hyphenatedKey = hyphenate(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">            config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            (<span class=\"string\">\"\\\"\"</span> + hyphenatedKey + <span class=\"string\">\"\\\" is a reserved attribute and cannot be used as component prop.\"</span>),</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        defineReactive(props, key, value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">              <span class=\"string\">\"Avoid mutating a prop directly since the value will be \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"overwritten whenever the parent component re-renders. \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"Instead, use a data or computed property based on the prop's \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"value. Prop being mutated: \\\"\"</span> + key + <span class=\"string\">\"\\\"\"</span>,</span><br><span class=\"line\">              vm</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// static props are already proxied on the component's prototype</span></span><br><span class=\"line\">      <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">      <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">        proxy(vm, <span class=\"string\">\"_props\"</span>, key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) loop( key );</span><br><span class=\"line\">    toggleObserving(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中。我们传入了 vue 实例和 当前组件中传入的 props 中的数据， 在这个函数中， 我们定义了四个变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> propsData = vm.$options.propsData || &#123;&#125;; <span class=\"comment\">// 获取到父组件传递到子组件中的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> props = vm._props = &#123;&#125;; <span class=\"comment\">// 在实例上的 _props 属性上定义空对象 &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\"><span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = vm.$options._propKeys = []; <span class=\"comment\">// 在 实例的 $options 属性上定义 _propKeys 属性， 并初始化为数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRoot = !vm.$parent; <span class=\"comment\">// 判断是否为根元素， 因为对于根元素， 其实例上没有 `$parent` 属性， 这个时候 `isRoot` 为true</span></span><br></pre></td></tr></table></figure>\n<p>上面的 <code>toggleObserving</code> 方法用来切换是否对与数据进行监听的开关函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * In some cases we may want to disable observation inside a component's</span></span><br><span class=\"line\"><span class=\"comment\"> * update computation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shouldObserve = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据传递的 vue 属性来切换 `shouleObserve` 的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleObserving</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  shouldObserve = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过调用这个方法， 改变的是全局变量 <code>shouldObserve</code> 的值， 这个值的作用我们后面在说， 现在， 我们先看下在 <code>initProps</code> 中的 <code>for in</code> 中的 <code>loop</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) loop(key);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 对于当前组件内 prop 中的每一个 prop 值， 都执行 <code>loop</code> 方法：</p>\n<p><code>loop</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key prop 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前组件内所有的 prop 值存入到 keys 中</span></span><br><span class=\"line\">  keys.push(key);</span><br><span class=\"line\">  <span class=\"comment\">// 根据定义的 prop 规则判断传入的 prop 值是否有效</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = validateProp(key, propsOptions, propsData, vm);</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hyphenatedKey = hyphenate(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">        config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        (<span class=\"string\">\"\\\"\"</span> + hyphenatedKey + <span class=\"string\">\"\\\" is a reserved attribute and cannot be used as component prop.\"</span>),</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defineReactive(props, key, value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">\"Avoid mutating a prop directly since the value will be \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"overwritten whenever the parent component re-renders. \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"Instead, use a data or computed property based on the prop's \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"value. Prop being mutated: \\\"\"</span> + key + <span class=\"string\">\"\\\"\"</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// static props are already proxied on the component's prototype</span></span><br><span class=\"line\">  <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">  <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">    proxy(vm, <span class=\"string\">\"_props\"</span>, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的 loop 方法中， 当传入 key 之后， 执行了 <code>validateProp</code> 方法， 这个方法定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;key&#125;</span> </span>在 props 中定义的 prop 值 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;propOptions&#125;</span> </span>propOptions : 所有的 prop 值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;propsData&#125;</span> </span>propsData 从上层组件传入的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;vm&#125;</span> </span>vue 实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateProp</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  propOptions,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  propsData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前 prop 值的规则</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prop = propOptions[key];</span><br><span class=\"line\">  <span class=\"comment\">// 判断这个 prop 值有没有被传入到</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> absent = !hasOwn(propsData, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = propsData[key];</span><br><span class=\"line\">  <span class=\"comment\">// boolean casting</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> booleanIndex = getTypeIndex(<span class=\"built_in\">Boolean</span>, prop.type);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (booleanIndex &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absent &amp;&amp; !hasOwn(prop, <span class=\"string\">'default'</span>)) &#123;</span><br><span class=\"line\">      value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span> || value === hyphenate(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> stringIndex = getTypeIndex(<span class=\"built_in\">String</span>, prop.type);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">        value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// check default value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    value = getPropDefaultValue(vm, prop, key);</span><br><span class=\"line\">    <span class=\"comment\">// since the default value is a fresh copy,</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure to observe it.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevShouldObserve = shouldObserve;</span><br><span class=\"line\">    toggleObserving(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    observe(value);</span><br><span class=\"line\">    toggleObserving(prevShouldObserve);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    assertProp(prop, key, value, vm, absent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方法内部 定义了四个变量：</p>\n<p><code>prop</code>: 当前传入 prop 值的对象</p>\n<p><code>absent</code>:  布尔值， 当前 prop 有没有被父组件传入</p>\n<p><code>value</code>:  父组件传入的 prop 的值， 如果没有传入，为 <code>undefined</code></p>\n<p><code>booleanIndex</code>:  是通过 <code>getTypeIndex</code> 方法返回的， 这个方法的作用是：</p>\n<p>当 prop 中声明的 type 中包含有布尔值的时候， 如果 type 为 String， 返回 0， 如果 type 为数组， 返回这个 Boolean 值在 type 数组中的顺序 index， 如果不包含布尔值， 那么返回 -1</p>\n<p><code>getTypeIndex</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// expectedTypes： prop 中声明的 type</span></span><br><span class=\"line\"><span class=\"comment\">// type: 相应的 type 类型， 例如： Boolean, String</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTypeIndex</span> (<span class=\"params\">type, expectedTypes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(expectedTypes)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSameType(expectedTypes, type) ? <span class=\"number\">0</span> : <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = expectedTypes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSameType(expectedTypes[i], type)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里， 使用了 <code>isSameType</code> 方法来进行比较者两个 type 是否相等：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Use function string name to check built-in types,</span></span><br><span class=\"line\"><span class=\"comment\">  * because a simple equality check will fail when running</span></span><br><span class=\"line\"><span class=\"comment\">  * across different vms / iframes.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> match = fn &amp;&amp; fn.toString().match(<span class=\"regexp\">/^\\s*function (\\w+)/</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> match ? match[<span class=\"number\">1</span>] : <span class=\"string\">''</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSameType</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> getType(a) === getType(b)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的 <code>getType</code> 中， 调用 <code>fn.toString()</code> 方法， 再通过正则表达式获取到 <code>(\\w+)</code> 内的内容，例如：</p>\n<blockquote>\n<p>因为， 在 js 中例如 <code>Boolean</code>, <code>String</code> 之类的类型， 都是代表着一个个的函数方法， 对于这个函数， 可以调用 toString</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean</span><br><span class=\"line\"><span class=\"comment\">// ƒ Boolean() &#123; [native code] &#125;</span></span><br><span class=\"line\">Boolean.toString()</span><br><span class=\"line\"><span class=\"comment\">//\"function Boolean() &#123; [native code] &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>接来下， 对于数据进行初始化：针对需要校验的 type 中包含有 <code>Boolean</code> 字段的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 prop 的type中包含有 “Boolean” 的时候  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (booleanIndex &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当没有传入的 prop 的时候， 并且没有 default 属性的时候</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (absent &amp;&amp; !hasOwn(prop, <span class=\"string\">'default'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 prop 值置为 false</span></span><br><span class=\"line\">        value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span> || value === hyphenate(key)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当 boolean 有更高优先级的时候， 将空字符串或者和 prop 中名字相同的值转化为 布尔值</span></span><br><span class=\"line\">        <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> stringIndex = getTypeIndex(<span class=\"built_in\">String</span>, prop.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">          value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<p>有以下子组件： child.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    propData: &#123;</span><br><span class=\"line\">      type: [Boolean, String],</span><br><span class=\"line\">\t\t\tdefault: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在父组件中如下定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child prop-data=&quot;&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>那么在子组件中， 获得到的 <code>propData</code> 值为 <code>true</code>;</p>\n<p>或者， 当在父组件中如下定义的时候：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child prop-data=&quot;propData&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>和上面相同， 也是为 <code>true</code>,</p>\n<p>总之：</p>\n<p>当定义的 prop 接受值的类型，<code>Boolean</code> 值类型优先级要高于 <code>String</code> 的时候（在 type 中  <code>Boolean</code> 在 <code>String</code> 前面 <code>[Boolean, String]</code>）:</p>\n<ul>\n<li>当传递的值为空字符串的时候， 接受到的prop 值变为 <code>true</code></li>\n<li>当传递的值为字符串并且和驼峰后的 prop 名相同的时候， 接受的值也将转为 <code>true</code></li>\n</ul>\n<p>另外， 当在父组件中没有传入 prop 值， 并且， 没有声明 <code>default</code> 属性， 当校验 <code>type</code> 中包含有<code>Boolean</code> 的时候， 这个时候， 获取这个  <code>prop</code> 的值将为 <code>false</code></p>\n<p><code>child.vue</code> 组件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    propData: &#123;</span><br><span class=\"line\">      type: [Boolean, String]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>父组件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>在 <code>child.vue</code> 组件中获取到 <code>propData</code> 的值为 <code>false</code>;</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h3><p>在 vue.js 中, 使用 <code>prop</code> 可以实现父组件向子组件传递值，在子组件中的 <code>props</code> 中的数据将会和父组件中传递的相应的 <code>prop</code> 保持一致，在传递 <code>prop</code> 的时候，可以传递一个数组, 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: [<span class=\"string\">'data1'</span>, <span class=\"string\">'data2'</span>, <span class=\"string\">'data3'</span> ...]</span><br></pre></td></tr></table></figure>\n<p> 或者可以传递一个对象，对象的键是要传递的 prop 名称， 对象的值可以是一个对象， 这个对象中 可以定义传递值的<code>type</code> 以及 <code>default</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  data1: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>, <span class=\"comment\">// 传递值的类型， 可以是一个数组 [Boolean, String]</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 当父组件没有传递的时候， 子组件中使用的默认值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当父组件中传递值的类型不符合子组件 props 中相应值的 type 的时候， vue 会在控制台进行报错。</p>\n<p>在源码中， 在初始化 prop 的时候， 会对prop 进行校验。</p>\n<h4 id=\"初始化-props\"><a href=\"#初始化-props\" class=\"headerlink\" title=\"初始化 props\"></a>初始化 <code>props</code></h4><p>在 <code>initState</code> 中：当当前组件中存在 <code>props</code> 的时候， 对于 <code>props</code> 执行 <code>initProps</code> 进行初始化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    vm._watchers = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = vm.$options;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">      initData(vm);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">      initWatch(vm, opts.watch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>initProps</code> 中接受两个参数： <code>vm</code> 当前 vue 的实例， <code>propsOptions</code> 在当前组件中规范化后的 <code>props</code> 对象</p>\n<blockquote>\n<p>在执行 <code>initProps</code> 方法之前， 在 <code>vm.$options</code> 属性中的  <code>props</code> 属性中已经对于传递的 <code>props</code> 进行了规范化处理为下面的这种形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;test: &#123;</span><br><span class=\"line\">&gt;  type: sometype,</span><br><span class=\"line\">&gt;  <span class=\"keyword\">default</span>: <span class=\"comment\">//  默认值， 如果没有传， 那么就没有</span></span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p><code>initProps</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于初始化 props 对象  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initProps</span> (<span class=\"params\">vm, propsOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// vm.$options.propsData: 父组件中传递的 props 对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> propsData = vm.$options.propsData || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> props = vm._props = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\">    <span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = vm.$options._propKeys = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isRoot = !vm.$parent;</span><br><span class=\"line\">    <span class=\"comment\">// root instance props should be converted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isRoot) &#123;</span><br><span class=\"line\">      toggleObserving(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) </span>&#123;</span><br><span class=\"line\">      keys.push(key);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = validateProp(key, propsOptions, propsData, vm);</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hyphenatedKey = hyphenate(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">            config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            (<span class=\"string\">\"\\\"\"</span> + hyphenatedKey + <span class=\"string\">\"\\\" is a reserved attribute and cannot be used as component prop.\"</span>),</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        defineReactive(props, key, value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">              <span class=\"string\">\"Avoid mutating a prop directly since the value will be \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"overwritten whenever the parent component re-renders. \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"Instead, use a data or computed property based on the prop's \"</span> +</span><br><span class=\"line\">              <span class=\"string\">\"value. Prop being mutated: \\\"\"</span> + key + <span class=\"string\">\"\\\"\"</span>,</span><br><span class=\"line\">              vm</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// static props are already proxied on the component's prototype</span></span><br><span class=\"line\">      <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">      <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">        proxy(vm, <span class=\"string\">\"_props\"</span>, key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) loop( key );</span><br><span class=\"line\">    toggleObserving(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中。我们传入了 vue 实例和 当前组件中传入的 props 中的数据， 在这个函数中， 我们定义了四个变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> propsData = vm.$options.propsData || &#123;&#125;; <span class=\"comment\">// 获取到父组件传递到子组件中的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> props = vm._props = &#123;&#125;; <span class=\"comment\">// 在实例上的 _props 属性上定义空对象 &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\"><span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> keys = vm.$options._propKeys = []; <span class=\"comment\">// 在 实例的 $options 属性上定义 _propKeys 属性， 并初始化为数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isRoot = !vm.$parent; <span class=\"comment\">// 判断是否为根元素， 因为对于根元素， 其实例上没有 `$parent` 属性， 这个时候 `isRoot` 为true</span></span><br></pre></td></tr></table></figure>\n<p>上面的 <code>toggleObserving</code> 方法用来切换是否对与数据进行监听的开关函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * In some cases we may want to disable observation inside a component's</span></span><br><span class=\"line\"><span class=\"comment\"> * update computation.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shouldObserve = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 根据传递的 vue 属性来切换 `shouleObserve` 的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleObserving</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  shouldObserve = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过调用这个方法， 改变的是全局变量 <code>shouldObserve</code> 的值， 这个值的作用我们后面在说， 现在， 我们先看下在 <code>initProps</code> 中的 <code>for in</code> 中的 <code>loop</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) loop(key);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 对于当前组件内 prop 中的每一个 prop 值， 都执行 <code>loop</code> 方法：</p>\n<p><code>loop</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key prop 值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将当前组件内所有的 prop 值存入到 keys 中</span></span><br><span class=\"line\">  keys.push(key);</span><br><span class=\"line\">  <span class=\"comment\">// 根据定义的 prop 规则判断传入的 prop 值是否有效</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = validateProp(key, propsOptions, propsData, vm);</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hyphenatedKey = hyphenate(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class=\"line\">        config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        (<span class=\"string\">\"\\\"\"</span> + hyphenatedKey + <span class=\"string\">\"\\\" is a reserved attribute and cannot be used as component prop.\"</span>),</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    defineReactive(props, key, value, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">\"Avoid mutating a prop directly since the value will be \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"overwritten whenever the parent component re-renders. \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"Instead, use a data or computed property based on the prop's \"</span> +</span><br><span class=\"line\">          <span class=\"string\">\"value. Prop being mutated: \\\"\"</span> + key + <span class=\"string\">\"\\\"\"</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// static props are already proxied on the component's prototype</span></span><br><span class=\"line\">  <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">  <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">    proxy(vm, <span class=\"string\">\"_props\"</span>, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的 loop 方法中， 当传入 key 之后， 执行了 <code>validateProp</code> 方法， 这个方法定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;key&#125;</span> </span>在 props 中定义的 prop 值 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;propOptions&#125;</span> </span>propOptions : 所有的 prop 值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;propsData&#125;</span> </span>propsData 从上层组件传入的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;vm&#125;</span> </span>vue 实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateProp</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  key,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  propOptions,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  propsData,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  vm</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前 prop 值的规则</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prop = propOptions[key];</span><br><span class=\"line\">  <span class=\"comment\">// 判断这个 prop 值有没有被传入到</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> absent = !hasOwn(propsData, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = propsData[key];</span><br><span class=\"line\">  <span class=\"comment\">// boolean casting</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> booleanIndex = getTypeIndex(<span class=\"built_in\">Boolean</span>, prop.type);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (booleanIndex &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absent &amp;&amp; !hasOwn(prop, <span class=\"string\">'default'</span>)) &#123;</span><br><span class=\"line\">      value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span> || value === hyphenate(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> stringIndex = getTypeIndex(<span class=\"built_in\">String</span>, prop.type);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">        value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// check default value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    value = getPropDefaultValue(vm, prop, key);</span><br><span class=\"line\">    <span class=\"comment\">// since the default value is a fresh copy,</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure to observe it.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevShouldObserve = shouldObserve;</span><br><span class=\"line\">    toggleObserving(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    observe(value);</span><br><span class=\"line\">    toggleObserving(prevShouldObserve);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    assertProp(prop, key, value, vm, absent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个方法内部 定义了四个变量：</p>\n<p><code>prop</code>: 当前传入 prop 值的对象</p>\n<p><code>absent</code>:  布尔值， 当前 prop 有没有被父组件传入</p>\n<p><code>value</code>:  父组件传入的 prop 的值， 如果没有传入，为 <code>undefined</code></p>\n<p><code>booleanIndex</code>:  是通过 <code>getTypeIndex</code> 方法返回的， 这个方法的作用是：</p>\n<p>当 prop 中声明的 type 中包含有布尔值的时候， 如果 type 为 String， 返回 0， 如果 type 为数组， 返回这个 Boolean 值在 type 数组中的顺序 index， 如果不包含布尔值， 那么返回 -1</p>\n<p><code>getTypeIndex</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// expectedTypes： prop 中声明的 type</span></span><br><span class=\"line\"><span class=\"comment\">// type: 相应的 type 类型， 例如： Boolean, String</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTypeIndex</span> (<span class=\"params\">type, expectedTypes</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(expectedTypes)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSameType(expectedTypes, type) ? <span class=\"number\">0</span> : <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = expectedTypes.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSameType(expectedTypes[i], type)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里， 使用了 <code>isSameType</code> 方法来进行比较者两个 type 是否相等：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Use function string name to check built-in types,</span></span><br><span class=\"line\"><span class=\"comment\">  * because a simple equality check will fail when running</span></span><br><span class=\"line\"><span class=\"comment\">  * across different vms / iframes.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getType</span> (<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> match = fn &amp;&amp; fn.toString().match(<span class=\"regexp\">/^\\s*function (\\w+)/</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> match ? match[<span class=\"number\">1</span>] : <span class=\"string\">''</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSameType</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> getType(a) === getType(b)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的 <code>getType</code> 中， 调用 <code>fn.toString()</code> 方法， 再通过正则表达式获取到 <code>(\\w+)</code> 内的内容，例如：</p>\n<blockquote>\n<p>因为， 在 js 中例如 <code>Boolean</code>, <code>String</code> 之类的类型， 都是代表着一个个的函数方法， 对于这个函数， 可以调用 toString</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean</span><br><span class=\"line\"><span class=\"comment\">// ƒ Boolean() &#123; [native code] &#125;</span></span><br><span class=\"line\">Boolean.toString()</span><br><span class=\"line\"><span class=\"comment\">//\"function Boolean() &#123; [native code] &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>接来下， 对于数据进行初始化：针对需要校验的 type 中包含有 <code>Boolean</code> 字段的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 prop 的type中包含有 “Boolean” 的时候  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (booleanIndex &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当没有传入的 prop 的时候， 并且没有 default 属性的时候</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (absent &amp;&amp; !hasOwn(prop, <span class=\"string\">'default'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 prop 值置为 false</span></span><br><span class=\"line\">        value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span> || value === hyphenate(key)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当 boolean 有更高优先级的时候， 将空字符串或者和 prop 中名字相同的值转化为 布尔值</span></span><br><span class=\"line\">        <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">        <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> stringIndex = getTypeIndex(<span class=\"built_in\">String</span>, prop.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">          value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<p>有以下子组件： child.vue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    propData: &#123;</span><br><span class=\"line\">      type: [Boolean, String],</span><br><span class=\"line\">\t\t\tdefault: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在父组件中如下定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child prop-data=&quot;&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>那么在子组件中， 获得到的 <code>propData</code> 值为 <code>true</code>;</p>\n<p>或者， 当在父组件中如下定义的时候：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child prop-data=&quot;propData&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>和上面相同， 也是为 <code>true</code>,</p>\n<p>总之：</p>\n<p>当定义的 prop 接受值的类型，<code>Boolean</code> 值类型优先级要高于 <code>String</code> 的时候（在 type 中  <code>Boolean</code> 在 <code>String</code> 前面 <code>[Boolean, String]</code>）:</p>\n<ul>\n<li>当传递的值为空字符串的时候， 接受到的prop 值变为 <code>true</code></li>\n<li>当传递的值为字符串并且和驼峰后的 prop 名相同的时候， 接受的值也将转为 <code>true</code></li>\n</ul>\n<p>另外， 当在父组件中没有传入 prop 值， 并且， 没有声明 <code>default</code> 属性， 当校验 <code>type</code> 中包含有<code>Boolean</code> 的时候， 这个时候， 获取这个  <code>prop</code> 的值将为 <code>false</code></p>\n<p><code>child.vue</code> 组件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    propData: &#123;</span><br><span class=\"line\">      type: [Boolean, String]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>父组件中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;child&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure>\n<p>在 <code>child.vue</code> 组件中获取到 <code>propData</code> 的值为 <code>false</code>;</p>\n"},{"title":"tooltip 的实现","date":"2018-05-08T16:45:46.000Z","_content":"\n在业务上实现了一个类似于 `el-tooltip` 的方法，类似于下面这种情况：\n\n业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 `el-tooltip` 的实现方法，但是对于每一个标签上都添加上 `el-tooltip` 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 `toolTip.js` 的具体代码如下：\n\n```javascript\n// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的\nimport Util from \"./util\";\nconst getScrollRoot = () => {\n    return document.documentElement.querySelector(\".el-dialog__wrapper\");\n};\nlet instancePool = [];\n\n// 定义 tip instance 方法\nconst instanceAction = () => {\n    const push = (instance) => {\n        instancePool.push(instance);\n    };\n    return {\n        pushInstance: push\n    };\n};\n// 获取到绑定元素在当前页面上距离左边的距离\nconst getElementViewLeft = (element) => {\n    let actualLeft = element.offsetLeft;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualLeft += current.offsetLeft;\n        current = current.offsetParent;\n    }\n    return actualLeft;\n};\n\n// 获取到绑定元素在当前页面上位置高度\nconst getElementViewTop = (element) => {\n    let actualTop = element.offsetTop;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualTop += current.offsetTop;\n        current = current.offsetParent;\n    }\n    return actualTop;\n};\n\nfunction tooltip(el, opt) {\n    const items = el.querySelectorAll(\".el-form-item\");\n    for (const item of items) {\n        const target = item.firstChild;\n        // 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null\n        if (target.className) {\n            // 将每一个需要显示标签的实例信息压入\n            instanceAction().pushInstance({ tip: null, target, message: target.innerText, offset: 0, class: \"vk-tooltip\" });\n        }\n    }\n    this.scrollListener = null;\n    this.mouseenterListener = null;\n    this.mouseleaveListener = null;\n    this.init();\n    // target：传入的DOM\n    // this.target = el;\n    // tip：用来放初始化创建的tip元素\n    // this.tip = null;\n    // this.message = (opt && opt.msg) || this.target.innerText;\n    // this.offset = (opt && +opt.offset) || 0;\n    // this.class = \"vk-tooltip\";\n    // instanceAction.push();\n    // this.init();\n}\n\ntooltip.prototype = {\n    // 初始化tip，添加事件监听\n    init: function () {\n        const me = this;\n        const root = getScrollRoot();\n        // 鼠标进入才创建标签\n        for (let instance of instancePool) {\n            const { target, tip, message, offset } = instance;\n            // 滚动监听事件\n            // 鼠标移入监听事件\n            // 鼠标移除监听事件\n            if (message.length < 6) continue;\n            this.mouseenterListener = Util.listener(target, \"mouseenter\", () => {\n                instance = me.createTip(instance);\n                instance.tip.style.opacity = 1;\n                this.scrollListener = Util.listener(root, \"scroll\", () => {\n                    me.setTipPlace(instance.tip, instance.target, instance.offset);\n                    instance.tip.style.opacity = 0;\n                });\n                this.scrollListener.listen();\n            });\n            this.mouseenterListener.listen();\n            this.mouseleaveListener = Util.listener(target, \"mouseleave\", () => {\n                instance.tip.style.opacity = 0;\n                this.scrollListener.remove();\n            });\n            this.mouseleaveListener.listen();\n        }\n    },\n\n    createTip(instance) {\n        const me = this;\n        const poppup = \"<div class='triangle-down'></div>\";\n        const cache = document.getElementsByClassName(instance.class);\n        // 如果存在一个tip标签则使用该标签\n        instance.tip = cache.length ? cache[0] : document.createElement(\"div\");\n        instance.tip.className = instance.class;\n        instance.tip.innerHTML = `${instance.message}${poppup}`;\n        document.body.appendChild(instance.tip);\n        if (!me.tip) {\n            me.tip = instance.tip;\n        }\n        me.setTipPlace(instance.tip, instance.target, instance.offset);\n        return instance;\n    },\n\n    // 设置tip显示的位置\n    setTipPlace: function (tip, target, offset) {\n        const root = getScrollRoot();\n        const distance = (tip.clientWidth - target.clientWidth) / 2;\n        const pageX = `${getElementViewLeft(target) - root.scrollLeft - distance + offset}px`;\n        const pageY = `${getElementViewTop(target) - target.clientHeight - root.scrollTop}px`;\n        tip.style.left = pageX;\n        tip.style.top = pageY;\n    },\n    clear: function () {\n        instancePool = [];\n        if (this.tip) {\n            this.tip.parentNode.removeChild(this.tip);\n        }\n        this.mouseenterListener.remove();\n        this.mouseleaveListener.remove();\n        this.mouseenterListener = null;\n        this.mouseleaveListener = null;\n        this.scrollListener = null;\n    }\n};\n\nexport default tooltip;\n\n\n// /**\n//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示\n//  * @example <div v-tips>此处为被缩略的文本内容</div>\n//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量\n//  * 在元素插入DOM时，创建tooltip实例。\n//  */\n// Vue.directive(\"tips\", {\n//     bind: (el) => {\n//         console.log(el);\n//     },\n//     // 当绑定元素插入到 DOM 中。\n//     inserted: (el, { value }) => {\n//         // 暂时针对el-form的label标签，所以指定firsChild\n//         this.instance = new VkTooltip(el.firstChild, value);\n//     },\n//     // 解除绑定的时候清除实例以及标签,清除事件监听\n//     unbind: (el) => {\n//         this.instance.clear();\n//     }\n// });\n// Util listen 函数\nUtil.listen = (target, eventType, callback) => {\n    if (target.addEventListener) {\n      return {\n          listen: {\n            target.addEventListener(eventType, callback, false);\n          },\n          remove: {\n            target.removeEventListener(eventType, callback, false);\n      \t  }\n      }\n    } else if (target.attachEvent) {\n      listen: {\n          target.attachEvent('on' + eventType, callback);\n      },\n      remove: {\n          target.detachEvent('on' + eventType, callback);\n      }\n    }\n}\n```\n\n使用的时候， 这个函数被作为指令在 `main.js` 中引入：\n\n```javascript\nimport VKTooltip from \"@/assets/js/tooltip\";\nVue.directive(\"tips\", {\n  bind: (el) => {\n  },\n  inserted: (el, { value }) => {\n    this.instance = new VKTooltip(el, value);\n  },\n  unbind: (el) => {\n    this. instance.clear();\n  }\n});\n```\n\n关于在 `vue.js` 中自定义指令的使用， 可以查看`vue.js` 官网， [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html#ad)\n\n需要注意的知识点：\n\n1. 对于页面元素各个位置的理解\n2. js 基础一定要熟悉","source":"_posts/tooltip-的实现.md","raw":"---\ntitle: tooltip 的实现\ndate: 2018-05-09 00:45:46\ntags: toolTip\ncategories: 代码集\n---\n\n在业务上实现了一个类似于 `el-tooltip` 的方法，类似于下面这种情况：\n\n业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 `el-tooltip` 的实现方法，但是对于每一个标签上都添加上 `el-tooltip` 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 `toolTip.js` 的具体代码如下：\n\n```javascript\n// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的\nimport Util from \"./util\";\nconst getScrollRoot = () => {\n    return document.documentElement.querySelector(\".el-dialog__wrapper\");\n};\nlet instancePool = [];\n\n// 定义 tip instance 方法\nconst instanceAction = () => {\n    const push = (instance) => {\n        instancePool.push(instance);\n    };\n    return {\n        pushInstance: push\n    };\n};\n// 获取到绑定元素在当前页面上距离左边的距离\nconst getElementViewLeft = (element) => {\n    let actualLeft = element.offsetLeft;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualLeft += current.offsetLeft;\n        current = current.offsetParent;\n    }\n    return actualLeft;\n};\n\n// 获取到绑定元素在当前页面上位置高度\nconst getElementViewTop = (element) => {\n    let actualTop = element.offsetTop;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualTop += current.offsetTop;\n        current = current.offsetParent;\n    }\n    return actualTop;\n};\n\nfunction tooltip(el, opt) {\n    const items = el.querySelectorAll(\".el-form-item\");\n    for (const item of items) {\n        const target = item.firstChild;\n        // 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null\n        if (target.className) {\n            // 将每一个需要显示标签的实例信息压入\n            instanceAction().pushInstance({ tip: null, target, message: target.innerText, offset: 0, class: \"vk-tooltip\" });\n        }\n    }\n    this.scrollListener = null;\n    this.mouseenterListener = null;\n    this.mouseleaveListener = null;\n    this.init();\n    // target：传入的DOM\n    // this.target = el;\n    // tip：用来放初始化创建的tip元素\n    // this.tip = null;\n    // this.message = (opt && opt.msg) || this.target.innerText;\n    // this.offset = (opt && +opt.offset) || 0;\n    // this.class = \"vk-tooltip\";\n    // instanceAction.push();\n    // this.init();\n}\n\ntooltip.prototype = {\n    // 初始化tip，添加事件监听\n    init: function () {\n        const me = this;\n        const root = getScrollRoot();\n        // 鼠标进入才创建标签\n        for (let instance of instancePool) {\n            const { target, tip, message, offset } = instance;\n            // 滚动监听事件\n            // 鼠标移入监听事件\n            // 鼠标移除监听事件\n            if (message.length < 6) continue;\n            this.mouseenterListener = Util.listener(target, \"mouseenter\", () => {\n                instance = me.createTip(instance);\n                instance.tip.style.opacity = 1;\n                this.scrollListener = Util.listener(root, \"scroll\", () => {\n                    me.setTipPlace(instance.tip, instance.target, instance.offset);\n                    instance.tip.style.opacity = 0;\n                });\n                this.scrollListener.listen();\n            });\n            this.mouseenterListener.listen();\n            this.mouseleaveListener = Util.listener(target, \"mouseleave\", () => {\n                instance.tip.style.opacity = 0;\n                this.scrollListener.remove();\n            });\n            this.mouseleaveListener.listen();\n        }\n    },\n\n    createTip(instance) {\n        const me = this;\n        const poppup = \"<div class='triangle-down'></div>\";\n        const cache = document.getElementsByClassName(instance.class);\n        // 如果存在一个tip标签则使用该标签\n        instance.tip = cache.length ? cache[0] : document.createElement(\"div\");\n        instance.tip.className = instance.class;\n        instance.tip.innerHTML = `${instance.message}${poppup}`;\n        document.body.appendChild(instance.tip);\n        if (!me.tip) {\n            me.tip = instance.tip;\n        }\n        me.setTipPlace(instance.tip, instance.target, instance.offset);\n        return instance;\n    },\n\n    // 设置tip显示的位置\n    setTipPlace: function (tip, target, offset) {\n        const root = getScrollRoot();\n        const distance = (tip.clientWidth - target.clientWidth) / 2;\n        const pageX = `${getElementViewLeft(target) - root.scrollLeft - distance + offset}px`;\n        const pageY = `${getElementViewTop(target) - target.clientHeight - root.scrollTop}px`;\n        tip.style.left = pageX;\n        tip.style.top = pageY;\n    },\n    clear: function () {\n        instancePool = [];\n        if (this.tip) {\n            this.tip.parentNode.removeChild(this.tip);\n        }\n        this.mouseenterListener.remove();\n        this.mouseleaveListener.remove();\n        this.mouseenterListener = null;\n        this.mouseleaveListener = null;\n        this.scrollListener = null;\n    }\n};\n\nexport default tooltip;\n\n\n// /**\n//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示\n//  * @example <div v-tips>此处为被缩略的文本内容</div>\n//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量\n//  * 在元素插入DOM时，创建tooltip实例。\n//  */\n// Vue.directive(\"tips\", {\n//     bind: (el) => {\n//         console.log(el);\n//     },\n//     // 当绑定元素插入到 DOM 中。\n//     inserted: (el, { value }) => {\n//         // 暂时针对el-form的label标签，所以指定firsChild\n//         this.instance = new VkTooltip(el.firstChild, value);\n//     },\n//     // 解除绑定的时候清除实例以及标签,清除事件监听\n//     unbind: (el) => {\n//         this.instance.clear();\n//     }\n// });\n// Util listen 函数\nUtil.listen = (target, eventType, callback) => {\n    if (target.addEventListener) {\n      return {\n          listen: {\n            target.addEventListener(eventType, callback, false);\n          },\n          remove: {\n            target.removeEventListener(eventType, callback, false);\n      \t  }\n      }\n    } else if (target.attachEvent) {\n      listen: {\n          target.attachEvent('on' + eventType, callback);\n      },\n      remove: {\n          target.detachEvent('on' + eventType, callback);\n      }\n    }\n}\n```\n\n使用的时候， 这个函数被作为指令在 `main.js` 中引入：\n\n```javascript\nimport VKTooltip from \"@/assets/js/tooltip\";\nVue.directive(\"tips\", {\n  bind: (el) => {\n  },\n  inserted: (el, { value }) => {\n    this.instance = new VKTooltip(el, value);\n  },\n  unbind: (el) => {\n    this. instance.clear();\n  }\n});\n```\n\n关于在 `vue.js` 中自定义指令的使用， 可以查看`vue.js` 官网， [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html#ad)\n\n需要注意的知识点：\n\n1. 对于页面元素各个位置的理解\n2. js 基础一定要熟悉","slug":"tooltip-的实现","published":1,"updated":"2020-09-14T06:36:25.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7d002ni2osdemzc34y","content":"<p>在业务上实现了一个类似于 <code>el-tooltip</code> 的方法，类似于下面这种情况：</p>\n<p>业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 <code>el-tooltip</code> 的实现方法，但是对于每一个标签上都添加上 <code>el-tooltip</code> 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 <code>toolTip.js</code> 的具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getScrollRoot = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement.querySelector(<span class=\"string\">\".el-dialog__wrapper\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> instancePool = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 tip instance 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instanceAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">instance</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        instancePool.push(instance);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        pushInstance: push</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上距离左边的距离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewLeft = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualLeft = element.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualLeft += current.offsetLeft;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualLeft;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上位置高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewTop = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualTop += current.offsetTop;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tooltip</span>(<span class=\"params\">el, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = el.querySelectorAll(<span class=\"string\">\".el-form-item\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> items) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = item.firstChild;</span><br><span class=\"line\">        <span class=\"comment\">// 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.className) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将每一个需要显示标签的实例信息压入</span></span><br><span class=\"line\">            instanceAction().pushInstance(&#123; <span class=\"attr\">tip</span>: <span class=\"literal\">null</span>, target, <span class=\"attr\">message</span>: target.innerText, <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">class</span>: <span class=\"string\">\"vk-tooltip\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// target：传入的DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// this.target = el;</span></span><br><span class=\"line\">    <span class=\"comment\">// tip：用来放初始化创建的tip元素</span></span><br><span class=\"line\">    <span class=\"comment\">// this.tip = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.message = (opt &amp;&amp; opt.msg) || this.target.innerText;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.offset = (opt &amp;&amp; +opt.offset) || 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.class = \"vk-tooltip\";</span></span><br><span class=\"line\">    <span class=\"comment\">// instanceAction.push();</span></span><br><span class=\"line\">    <span class=\"comment\">// this.init();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tooltip.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化tip，添加事件监听</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"comment\">// 鼠标进入才创建标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> instance <span class=\"keyword\">of</span> instancePool) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; target, tip, message, offset &#125; = instance;</span><br><span class=\"line\">            <span class=\"comment\">// 滚动监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移入监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移除监听事件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message.length &lt; <span class=\"number\">6</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener = Util.listener(target, <span class=\"string\">\"mouseenter\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance = me.createTip(instance);</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener = Util.listener(root, <span class=\"string\">\"scroll\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                    me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">                    instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.listen();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener.listen();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener = Util.listener(target, <span class=\"string\">\"mouseleave\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.remove();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener.listen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    createTip(instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> poppup = <span class=\"string\">\"&lt;div class='triangle-down'&gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> cache = <span class=\"built_in\">document</span>.getElementsByClassName(instance.class);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在一个tip标签则使用该标签</span></span><br><span class=\"line\">        instance.tip = cache.length ? cache[<span class=\"number\">0</span>] : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        instance.tip.className = instance.class;</span><br><span class=\"line\">        instance.tip.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;instance.message&#125;</span><span class=\"subst\">$&#123;poppup&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(instance.tip);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!me.tip) &#123;</span><br><span class=\"line\">            me.tip = instance.tip;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置tip显示的位置</span></span><br><span class=\"line\">    setTipPlace: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tip, target, offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distance = (tip.clientWidth - target.clientWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageX = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewLeft(target) - root.scrollLeft - distance + offset&#125;</span>px`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageY = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewTop(target) - target.clientHeight - root.scrollTop&#125;</span>px`</span>;</span><br><span class=\"line\">        tip.style.left = pageX;</span><br><span class=\"line\">        tip.style.top = pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clear: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        instancePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tip) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tip.parentNode.removeChild(<span class=\"keyword\">this</span>.tip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tooltip;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /**</span></span><br><span class=\"line\"><span class=\"comment\">//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示</span></span><br><span class=\"line\"><span class=\"comment\">//  * @example &lt;div v-tips&gt;此处为被缩略的文本内容&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//  * 在元素插入DOM时，创建tooltip实例。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.directive(\"tips\", &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     bind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log(el);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 当绑定元素插入到 DOM 中。</span></span><br><span class=\"line\"><span class=\"comment\">//     inserted: (el, &#123; value &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // 暂时针对el-form的label标签，所以指定firsChild</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance = new VkTooltip(el.firstChild, value);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 解除绑定的时候清除实例以及标签,清除事件监听</span></span><br><span class=\"line\"><span class=\"comment\">//     unbind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance.clear();</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// Util listen 函数</span></span><br><span class=\"line\">Util.listen = <span class=\"function\">(<span class=\"params\">target, eventType, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          listen: &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          remove: &#123;</span><br><span class=\"line\">            target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">      listen: &#123;</span><br><span class=\"line\">          target.attachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      remove: &#123;</span><br><span class=\"line\">          target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候， 这个函数被作为指令在 <code>main.js</code> 中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VKTooltip <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/js/tooltip\"</span>;</span><br><span class=\"line\">Vue.directive(<span class=\"string\">\"tips\"</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\">(<span class=\"params\">el, &#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> VKTooltip(el, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>. instance.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>关于在 <code>vue.js</code> 中自定义指令的使用， 可以查看<code>vue.js</code> 官网， <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#ad\" target=\"_blank\" rel=\"noopener\">自定义指令</a></p>\n<p>需要注意的知识点：</p>\n<ol>\n<li>对于页面元素各个位置的理解</li>\n<li>js 基础一定要熟悉</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在业务上实现了一个类似于 <code>el-tooltip</code> 的方法，类似于下面这种情况：</p>\n<p>业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 <code>el-tooltip</code> 的实现方法，但是对于每一个标签上都添加上 <code>el-tooltip</code> 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 <code>toolTip.js</code> 的具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getScrollRoot = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement.querySelector(<span class=\"string\">\".el-dialog__wrapper\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> instancePool = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 tip instance 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instanceAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">instance</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        instancePool.push(instance);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        pushInstance: push</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上距离左边的距离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewLeft = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualLeft = element.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualLeft += current.offsetLeft;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualLeft;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上位置高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewTop = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualTop += current.offsetTop;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tooltip</span>(<span class=\"params\">el, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = el.querySelectorAll(<span class=\"string\">\".el-form-item\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> items) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = item.firstChild;</span><br><span class=\"line\">        <span class=\"comment\">// 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.className) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将每一个需要显示标签的实例信息压入</span></span><br><span class=\"line\">            instanceAction().pushInstance(&#123; <span class=\"attr\">tip</span>: <span class=\"literal\">null</span>, target, <span class=\"attr\">message</span>: target.innerText, <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">class</span>: <span class=\"string\">\"vk-tooltip\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// target：传入的DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// this.target = el;</span></span><br><span class=\"line\">    <span class=\"comment\">// tip：用来放初始化创建的tip元素</span></span><br><span class=\"line\">    <span class=\"comment\">// this.tip = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.message = (opt &amp;&amp; opt.msg) || this.target.innerText;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.offset = (opt &amp;&amp; +opt.offset) || 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.class = \"vk-tooltip\";</span></span><br><span class=\"line\">    <span class=\"comment\">// instanceAction.push();</span></span><br><span class=\"line\">    <span class=\"comment\">// this.init();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tooltip.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化tip，添加事件监听</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"comment\">// 鼠标进入才创建标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> instance <span class=\"keyword\">of</span> instancePool) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; target, tip, message, offset &#125; = instance;</span><br><span class=\"line\">            <span class=\"comment\">// 滚动监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移入监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移除监听事件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message.length &lt; <span class=\"number\">6</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener = Util.listener(target, <span class=\"string\">\"mouseenter\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance = me.createTip(instance);</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener = Util.listener(root, <span class=\"string\">\"scroll\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                    me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">                    instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.listen();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener.listen();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener = Util.listener(target, <span class=\"string\">\"mouseleave\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.remove();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener.listen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    createTip(instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> poppup = <span class=\"string\">\"&lt;div class='triangle-down'&gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> cache = <span class=\"built_in\">document</span>.getElementsByClassName(instance.class);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在一个tip标签则使用该标签</span></span><br><span class=\"line\">        instance.tip = cache.length ? cache[<span class=\"number\">0</span>] : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        instance.tip.className = instance.class;</span><br><span class=\"line\">        instance.tip.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;instance.message&#125;</span><span class=\"subst\">$&#123;poppup&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(instance.tip);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!me.tip) &#123;</span><br><span class=\"line\">            me.tip = instance.tip;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置tip显示的位置</span></span><br><span class=\"line\">    setTipPlace: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tip, target, offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distance = (tip.clientWidth - target.clientWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageX = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewLeft(target) - root.scrollLeft - distance + offset&#125;</span>px`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageY = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewTop(target) - target.clientHeight - root.scrollTop&#125;</span>px`</span>;</span><br><span class=\"line\">        tip.style.left = pageX;</span><br><span class=\"line\">        tip.style.top = pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clear: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        instancePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tip) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tip.parentNode.removeChild(<span class=\"keyword\">this</span>.tip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tooltip;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /**</span></span><br><span class=\"line\"><span class=\"comment\">//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示</span></span><br><span class=\"line\"><span class=\"comment\">//  * @example &lt;div v-tips&gt;此处为被缩略的文本内容&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//  * 在元素插入DOM时，创建tooltip实例。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.directive(\"tips\", &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     bind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log(el);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 当绑定元素插入到 DOM 中。</span></span><br><span class=\"line\"><span class=\"comment\">//     inserted: (el, &#123; value &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // 暂时针对el-form的label标签，所以指定firsChild</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance = new VkTooltip(el.firstChild, value);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 解除绑定的时候清除实例以及标签,清除事件监听</span></span><br><span class=\"line\"><span class=\"comment\">//     unbind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance.clear();</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// Util listen 函数</span></span><br><span class=\"line\">Util.listen = <span class=\"function\">(<span class=\"params\">target, eventType, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          listen: &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          remove: &#123;</span><br><span class=\"line\">            target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">      listen: &#123;</span><br><span class=\"line\">          target.attachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      remove: &#123;</span><br><span class=\"line\">          target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候， 这个函数被作为指令在 <code>main.js</code> 中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VKTooltip <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/js/tooltip\"</span>;</span><br><span class=\"line\">Vue.directive(<span class=\"string\">\"tips\"</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\">(<span class=\"params\">el, &#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> VKTooltip(el, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>. instance.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>关于在 <code>vue.js</code> 中自定义指令的使用， 可以查看<code>vue.js</code> 官网， <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#ad\" target=\"_blank\" rel=\"noopener\">自定义指令</a></p>\n<p>需要注意的知识点：</p>\n<ol>\n<li>对于页面元素各个位置的理解</li>\n<li>js 基础一定要熟悉</li>\n</ol>\n"},{"title":"underscore.js 源码分析(九)","date":"2017-12-04T14:39:00.000Z","_content":"\n###  underscore.js 源码分析\n\n`sortedIndex`  `findIndex`  `findLastIndex` `range`\n\n##### `sortedIndex`\n\n`sortedIndex(list, value, [iteratee], context)`\n\n其中 `list` 是已经被排好序的数组，通过使用 `soetedIndex` 可以查找到 `value` 在已经排好序的 `list` 数组中的顺序。使用 二分法进行查找的。\n\n使用二分法进行查找的 `value` 位置如下:\n\n```javascript\nfunction sortIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  // 获取到传入的 obj 的值\n  let value = iteratee(obj);\n  let low = 0;\n  // 定义 high 是数组的长度 array.length\n  let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 如果 array[mid] > value value 在 low 和 mid 之间\n    if (itetatee(array[mid]) > value) > 0) mid = high; else low = mid + 1;\n  }\n}\n```\n\n##### `findIndex`\n\n`findIndex(array, predicate, [context])`\n\n返回在`array` 中满足 `predicate` 函数为真的第一个元素的索引, 如果没有找到，返回 `-1`;\n\n##### `findLastIndex`\n\n类似于使用 `findIndex` 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值\n\n使用 `findIndex` 以及 `findLastIndex` 的代码如下:\n\n```javascript\nfunction getIndexFunc(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    let length = array.length;\n    let index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index; \n    }\n    return - 1;\n  }\n}\nlet findIndex = getIndexFunc(1);\nlet findLastIndex = getIndexFunc(-1);\n```\n\n##### `range`\n\n`range([start], stop, [step])`\n\n使用 `range` 创建一个整数灵活编号的列表函数，返回一个从 `start` 到 `stop` 的整数的一个列表, 通过使用 `step` 来减少独占。\n\n如果省略 `start`, `start` 默认从 0 开始，步进为 1;\n\n自己写的代码:\n\n```javascript\nfunction range(start, stop, step) {\n\tlet args = arguments;\n\tlet resultArray = [];\n\tlet theStep = 1;\n\tlet theStart = 0;\n\tif (args.length === 1) {\n\t\tstop = args[0];\n\t}\n\tif (args.length === 2) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t}\n\tif (args.length === 3) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t\ttheStep = args[2];\n\t}\n    // 太繁琐\n\tif (theStart < stop) {\n\t\tfor (let index = theStart; index < stop; index = index + theStep) {\n\t\t  resultArray.push(index);\n\t  }\n\t } else {\n\t\tfor (let index = theStart; index > stop; index = index + theStep) {\n\t\tresultArray.push(index);\n\t }\n\t}\n\treturn resultArray;\n}\n```\n\n源码:\n\n```javascript\n/*\n* @description range 返回特定范围的数组\n* @param start {Number} 数组中开始的数字\n* @param stop {Number} 数组中结束的数字\n* @param step {Nunber} 步进\n*/\n\nfunction range(start, stop, step) {\n  if (arguments.length <= 1) {\n    start = stop || 0;\n    stop = 0;\n  }\n  step = step || 1;\n  let length = Math.max(Math.ceil((start - stop) / step), 0);\n  let result = new Array(length);\n  for (let index = 0; index < length; index++, start += step) {\n    result[index] = start;\n  }\n  return result;\n}\n```\n\n\n\n\n\n\n\n","source":"_posts/underscore-js-源码分析-九.md","raw":"---\ntitle: underscore.js 源码分析(九)\ndate: 2017-12-04 22:39:00\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###  underscore.js 源码分析\n\n`sortedIndex`  `findIndex`  `findLastIndex` `range`\n\n##### `sortedIndex`\n\n`sortedIndex(list, value, [iteratee], context)`\n\n其中 `list` 是已经被排好序的数组，通过使用 `soetedIndex` 可以查找到 `value` 在已经排好序的 `list` 数组中的顺序。使用 二分法进行查找的。\n\n使用二分法进行查找的 `value` 位置如下:\n\n```javascript\nfunction sortIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  // 获取到传入的 obj 的值\n  let value = iteratee(obj);\n  let low = 0;\n  // 定义 high 是数组的长度 array.length\n  let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 如果 array[mid] > value value 在 low 和 mid 之间\n    if (itetatee(array[mid]) > value) > 0) mid = high; else low = mid + 1;\n  }\n}\n```\n\n##### `findIndex`\n\n`findIndex(array, predicate, [context])`\n\n返回在`array` 中满足 `predicate` 函数为真的第一个元素的索引, 如果没有找到，返回 `-1`;\n\n##### `findLastIndex`\n\n类似于使用 `findIndex` 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值\n\n使用 `findIndex` 以及 `findLastIndex` 的代码如下:\n\n```javascript\nfunction getIndexFunc(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    let length = array.length;\n    let index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index; \n    }\n    return - 1;\n  }\n}\nlet findIndex = getIndexFunc(1);\nlet findLastIndex = getIndexFunc(-1);\n```\n\n##### `range`\n\n`range([start], stop, [step])`\n\n使用 `range` 创建一个整数灵活编号的列表函数，返回一个从 `start` 到 `stop` 的整数的一个列表, 通过使用 `step` 来减少独占。\n\n如果省略 `start`, `start` 默认从 0 开始，步进为 1;\n\n自己写的代码:\n\n```javascript\nfunction range(start, stop, step) {\n\tlet args = arguments;\n\tlet resultArray = [];\n\tlet theStep = 1;\n\tlet theStart = 0;\n\tif (args.length === 1) {\n\t\tstop = args[0];\n\t}\n\tif (args.length === 2) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t}\n\tif (args.length === 3) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t\ttheStep = args[2];\n\t}\n    // 太繁琐\n\tif (theStart < stop) {\n\t\tfor (let index = theStart; index < stop; index = index + theStep) {\n\t\t  resultArray.push(index);\n\t  }\n\t } else {\n\t\tfor (let index = theStart; index > stop; index = index + theStep) {\n\t\tresultArray.push(index);\n\t }\n\t}\n\treturn resultArray;\n}\n```\n\n源码:\n\n```javascript\n/*\n* @description range 返回特定范围的数组\n* @param start {Number} 数组中开始的数字\n* @param stop {Number} 数组中结束的数字\n* @param step {Nunber} 步进\n*/\n\nfunction range(start, stop, step) {\n  if (arguments.length <= 1) {\n    start = stop || 0;\n    stop = 0;\n  }\n  step = step || 1;\n  let length = Math.max(Math.ceil((start - stop) / step), 0);\n  let result = new Array(length);\n  for (let index = 0; index < length; index++, start += step) {\n    result[index] = start;\n  }\n  return result;\n}\n```\n\n\n\n\n\n\n\n","slug":"underscore-js-源码分析-九","published":1,"updated":"2020-09-14T06:36:25.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7g002ri2os8vlugews","content":"<h3 id=\"underscore-js-源码分析\"><a href=\"#underscore-js-源码分析\" class=\"headerlink\" title=\"underscore.js 源码分析\"></a>underscore.js 源码分析</h3><p><code>sortedIndex</code>  <code>findIndex</code>  <code>findLastIndex</code> <code>range</code></p>\n<h5 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a><code>sortedIndex</code></h5><p><code>sortedIndex(list, value, [iteratee], context)</code></p>\n<p>其中 <code>list</code> 是已经被排好序的数组，通过使用 <code>soetedIndex</code> 可以查找到 <code>value</code> 在已经排好序的 <code>list</code> 数组中的顺序。使用 二分法进行查找的。</p>\n<p>使用二分法进行查找的 <code>value</code> 位置如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortIndex</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入的 obj 的值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义 high 是数组的长度 array.length</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 array[mid] &gt; value value 在 low 和 mid 之间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itetatee(array[mid]) &gt; value) &gt; <span class=\"number\">0</span>) mid = high; <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a><code>findIndex</code></h5><p><code>findIndex(array, predicate, [context])</code></p>\n<p>返回在<code>array</code> 中满足 <code>predicate</code> 函数为真的第一个元素的索引, 如果没有找到，返回 <code>-1</code>;</p>\n<h5 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"findLastIndex\"></a><code>findLastIndex</code></h5><p>类似于使用 <code>findIndex</code> 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值</p>\n<p>使用 <code>findIndex</code> 以及 <code>findLastIndex</code> 的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndexFunc</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = getIndexFunc(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> findLastIndex = getIndexFunc(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a><code>range</code></h5><p><code>range([start], stop, [step])</code></p>\n<p>使用 <code>range</code> 创建一个整数灵活编号的列表函数，返回一个从 <code>start</code> 到 <code>stop</code> 的整数的一个列表, 通过使用 <code>step</code> 来减少独占。</p>\n<p>如果省略 <code>start</code>, <code>start</code> 默认从 0 开始，步进为 1;</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> resultArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStep = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\ttheStep = args[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 太繁琐</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (theStart &lt; stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &lt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\t  resultArray.push(index);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &gt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\tresultArray.push(index);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resultArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description range 返回特定范围的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @param start &#123;Number&#125; 数组中开始的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param stop &#123;Number&#125; 数组中结束的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param step &#123;Nunber&#125; 步进</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    start = stop || <span class=\"number\">0</span>;</span><br><span class=\"line\">    stop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((start - stop) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++, start += step) &#123;</span><br><span class=\"line\">    result[index] = start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析\"><a href=\"#underscore-js-源码分析\" class=\"headerlink\" title=\"underscore.js 源码分析\"></a>underscore.js 源码分析</h3><p><code>sortedIndex</code>  <code>findIndex</code>  <code>findLastIndex</code> <code>range</code></p>\n<h5 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a><code>sortedIndex</code></h5><p><code>sortedIndex(list, value, [iteratee], context)</code></p>\n<p>其中 <code>list</code> 是已经被排好序的数组，通过使用 <code>soetedIndex</code> 可以查找到 <code>value</code> 在已经排好序的 <code>list</code> 数组中的顺序。使用 二分法进行查找的。</p>\n<p>使用二分法进行查找的 <code>value</code> 位置如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortIndex</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入的 obj 的值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义 high 是数组的长度 array.length</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 array[mid] &gt; value value 在 low 和 mid 之间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itetatee(array[mid]) &gt; value) &gt; <span class=\"number\">0</span>) mid = high; <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a><code>findIndex</code></h5><p><code>findIndex(array, predicate, [context])</code></p>\n<p>返回在<code>array</code> 中满足 <code>predicate</code> 函数为真的第一个元素的索引, 如果没有找到，返回 <code>-1</code>;</p>\n<h5 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"findLastIndex\"></a><code>findLastIndex</code></h5><p>类似于使用 <code>findIndex</code> 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值</p>\n<p>使用 <code>findIndex</code> 以及 <code>findLastIndex</code> 的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndexFunc</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = getIndexFunc(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> findLastIndex = getIndexFunc(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a><code>range</code></h5><p><code>range([start], stop, [step])</code></p>\n<p>使用 <code>range</code> 创建一个整数灵活编号的列表函数，返回一个从 <code>start</code> 到 <code>stop</code> 的整数的一个列表, 通过使用 <code>step</code> 来减少独占。</p>\n<p>如果省略 <code>start</code>, <code>start</code> 默认从 0 开始，步进为 1;</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> resultArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStep = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\ttheStep = args[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 太繁琐</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (theStart &lt; stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &lt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\t  resultArray.push(index);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &gt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\tresultArray.push(index);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resultArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description range 返回特定范围的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @param start &#123;Number&#125; 数组中开始的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param stop &#123;Number&#125; 数组中结束的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param step &#123;Nunber&#125; 步进</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    start = stop || <span class=\"number\">0</span>;</span><br><span class=\"line\">    stop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((start - stop) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++, start += step) &#123;</span><br><span class=\"line\">    result[index] = start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(十三)","date":"2017-12-11T13:08:53.000Z","_content":"\n### underscore.js 源码分析(十三)\n\n`keys`  `values`  `pairs`  `invert` `functions`  `mapObject` `findKey`\n\n####  `keys(Object)`\n\n使用 `keys(Object)` 用于获得 `Object` 的所有属性名称。 与 `es6` 中  `Object.keys()` 功能相同，不同的是做了兼容性处理。\n\n```javascript\nfunction keys (obj) {\n  // 如果 obj 不存在?\n  if (!obj || typeof obj !== 'object') return [];\n  // 如果支持 Object.keys 方法, 返回 Object.keys(obj)\n  if (Object.keys) return Object.keys(obj);\n  // else 使用 for in 进行属性获取\n  let keys = [];\n  for (let key in obj) {\n    keys.push(key);\n  }\n  // 返回属性数组\n  return keys;\n}\n```\n\n####  `values(Object)`\n\n使用 `values(Object)` 用于获得对象的所有的属性名称。 类似于使用 `Object.values` 获取到对象的属性值。\n\n```javascript\nfunction values (obj) {\n  let keys = _.keys(obj);\n  let length = keys.length;\n  let values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    values[i] = obj[keys[i]];\n  }\n  return values;\n}\n```\n\n####  `pairs()`\n\n使用 `pairs()` 用于将一个对象转化为键值对的形式。\n\n自己写的函数:\n\n```javascript\nfunction pairs (obj) {\n  let keys = _.keys(obj);\n  let values = _.values(obj);\n  let len = keys.length;\n  let pairs = [];\n  for (let i = 0; i < len; i++) {\n    pairs.push([keys[i], values[i]]);\n  }\n  return pairs;\n}\n```\n\n源码分析:\n\n```javascript\n_.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n```\n\n#### `invert()`\n\n`invert(object)`\n\n使用 `invert` 实现的是返回一个 `object` 的副本，在这个副本中, `object` 中的键和值互换。\n\n源码:\n\n```javascript\nfunction invert(object) {\n  let result = {};\n  let keys = _.keys(object);\n  for (let i = 0; i < keys.length; i++) {\n    result[object[keys[i]]] = keys[i];\n  }\n  return result;\n}\n```\n\n####  `functions`\n\n`functions(object)`\n\n返回一个对象中所有的方法名，并且是已经经过排序的方法。\n\n源码分析:\n\n```javascript\n_.functions = function (obj) {\n  let names = [];\n  for (let key in obj) {\n    if (_.isFunction(obj[key])) names.push(obj[key]);\n  }\n  return name.sort();\n}\n```\n\n#### `mapObject`\n\n类似于使用数组的 `map` 方法，不同的是这个方法针对的是对象的 `map` 方法, 使用 `mapObject` 用来对于对象的属性值进行操作， 实现的源码如下:\n\n```javascript\n_.mapObject = function(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  let keys = _.keys(obj);\n      length = keys.length;\n      result = {};\n      currentKey;\n  for (let index = 0; index < length; index++) {\n    currentKey = keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  } \n}\n```\n\n#### `findKey`\n\n`_.findKey(obj, predicate, context)`\n\n使用 `findKey` 返回的是 `obj` 中第一个满足 `predicate` 函数的 `key`。\n\n```javascript\nlet numbers = {\n  first: 5,\n  second: 8\n};\n_.findKey(numbers, function (value) {\n  return value > 2;\n});\n// 返回 first\n```\n\n##### 源码分析\n\n`findKey` 源码:\n\n```javascript\n_.findKey = function (obj, predicate, context) {\n  predicate = cb(predicate, context);\n  let keys = _.keys(obj), key;\n  for (let i = 0; length = keys.length; i < length; i++) {\n    key = keys[i];\n    // 如果条件满足, 返回 key\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n```\n\n","source":"_posts/underscore-js-源码分析-十三.md","raw":"---\ntitle: underscore.js 源码分析(十三)\ndate: 2017-12-11 21:08:53\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十三)\n\n`keys`  `values`  `pairs`  `invert` `functions`  `mapObject` `findKey`\n\n####  `keys(Object)`\n\n使用 `keys(Object)` 用于获得 `Object` 的所有属性名称。 与 `es6` 中  `Object.keys()` 功能相同，不同的是做了兼容性处理。\n\n```javascript\nfunction keys (obj) {\n  // 如果 obj 不存在?\n  if (!obj || typeof obj !== 'object') return [];\n  // 如果支持 Object.keys 方法, 返回 Object.keys(obj)\n  if (Object.keys) return Object.keys(obj);\n  // else 使用 for in 进行属性获取\n  let keys = [];\n  for (let key in obj) {\n    keys.push(key);\n  }\n  // 返回属性数组\n  return keys;\n}\n```\n\n####  `values(Object)`\n\n使用 `values(Object)` 用于获得对象的所有的属性名称。 类似于使用 `Object.values` 获取到对象的属性值。\n\n```javascript\nfunction values (obj) {\n  let keys = _.keys(obj);\n  let length = keys.length;\n  let values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    values[i] = obj[keys[i]];\n  }\n  return values;\n}\n```\n\n####  `pairs()`\n\n使用 `pairs()` 用于将一个对象转化为键值对的形式。\n\n自己写的函数:\n\n```javascript\nfunction pairs (obj) {\n  let keys = _.keys(obj);\n  let values = _.values(obj);\n  let len = keys.length;\n  let pairs = [];\n  for (let i = 0; i < len; i++) {\n    pairs.push([keys[i], values[i]]);\n  }\n  return pairs;\n}\n```\n\n源码分析:\n\n```javascript\n_.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n```\n\n#### `invert()`\n\n`invert(object)`\n\n使用 `invert` 实现的是返回一个 `object` 的副本，在这个副本中, `object` 中的键和值互换。\n\n源码:\n\n```javascript\nfunction invert(object) {\n  let result = {};\n  let keys = _.keys(object);\n  for (let i = 0; i < keys.length; i++) {\n    result[object[keys[i]]] = keys[i];\n  }\n  return result;\n}\n```\n\n####  `functions`\n\n`functions(object)`\n\n返回一个对象中所有的方法名，并且是已经经过排序的方法。\n\n源码分析:\n\n```javascript\n_.functions = function (obj) {\n  let names = [];\n  for (let key in obj) {\n    if (_.isFunction(obj[key])) names.push(obj[key]);\n  }\n  return name.sort();\n}\n```\n\n#### `mapObject`\n\n类似于使用数组的 `map` 方法，不同的是这个方法针对的是对象的 `map` 方法, 使用 `mapObject` 用来对于对象的属性值进行操作， 实现的源码如下:\n\n```javascript\n_.mapObject = function(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  let keys = _.keys(obj);\n      length = keys.length;\n      result = {};\n      currentKey;\n  for (let index = 0; index < length; index++) {\n    currentKey = keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  } \n}\n```\n\n#### `findKey`\n\n`_.findKey(obj, predicate, context)`\n\n使用 `findKey` 返回的是 `obj` 中第一个满足 `predicate` 函数的 `key`。\n\n```javascript\nlet numbers = {\n  first: 5,\n  second: 8\n};\n_.findKey(numbers, function (value) {\n  return value > 2;\n});\n// 返回 first\n```\n\n##### 源码分析\n\n`findKey` 源码:\n\n```javascript\n_.findKey = function (obj, predicate, context) {\n  predicate = cb(predicate, context);\n  let keys = _.keys(obj), key;\n  for (let i = 0; length = keys.length; i < length; i++) {\n    key = keys[i];\n    // 如果条件满足, 返回 key\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n```\n\n","slug":"underscore-js-源码分析-十三","published":1,"updated":"2020-09-14T06:36:25.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7j002ui2osnsur3qzv","content":"<h3 id=\"underscore-js-源码分析-十三\"><a href=\"#underscore-js-源码分析-十三\" class=\"headerlink\" title=\"underscore.js 源码分析(十三)\"></a>underscore.js 源码分析(十三)</h3><p><code>keys</code>  <code>values</code>  <code>pairs</code>  <code>invert</code> <code>functions</code>  <code>mapObject</code> <code>findKey</code></p>\n<h4 id=\"keys-Object\"><a href=\"#keys-Object\" class=\"headerlink\" title=\"keys(Object)\"></a><code>keys(Object)</code></h4><p>使用 <code>keys(Object)</code> 用于获得 <code>Object</code> 的所有属性名称。 与 <code>es6</code> 中  <code>Object.keys()</code> 功能相同，不同的是做了兼容性处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keys</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 不存在?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 Object.keys 方法, 返回 Object.keys(obj)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// else 使用 for in 进行属性获取</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    keys.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回属性数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"values-Object\"><a href=\"#values-Object\" class=\"headerlink\" title=\"values(Object)\"></a><code>values(Object)</code></h4><p>使用 <code>values(Object)</code> 用于获得对象的所有的属性名称。 类似于使用 <code>Object.values</code> 获取到对象的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">values</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    values[i] = obj[keys[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pairs\"><a href=\"#pairs\" class=\"headerlink\" title=\"pairs()\"></a><code>pairs()</code></h4><p>使用 <code>pairs()</code> 用于将一个对象转化为键值对的形式。</p>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = _.values(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pairs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    pairs.push([keys[i], values[i]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h4><p><code>invert(object)</code></p>\n<p>使用 <code>invert</code> 实现的是返回一个 <code>object</code> 的副本，在这个副本中, <code>object</code> 中的键和值互换。</p>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invert</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    result[object[keys[i]]] = keys[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a><code>functions</code></h4><p><code>functions(object)</code></p>\n<p>返回一个对象中所有的方法名，并且是已经经过排序的方法。</p>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.functions = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapObject\"><a href=\"#mapObject\" class=\"headerlink\" title=\"mapObject\"></a><code>mapObject</code></h4><p>类似于使用数组的 <code>map</code> 方法，不同的是这个方法针对的是对象的 <code>map</code> 方法, 使用 <code>mapObject</code> 用来对于对象的属性值进行操作， 实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      result = &#123;&#125;;</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys[index];</span><br><span class=\"line\">    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"findKey\"><a href=\"#findKey\" class=\"headerlink\" title=\"findKey\"></a><code>findKey</code></h4><p><code>_.findKey(obj, predicate, context)</code></p>\n<p>使用 <code>findKey</code> 返回的是 <code>obj</code> 中第一个满足 <code>predicate</code> 函数的 <code>key</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = &#123;</span><br><span class=\"line\">  first: <span class=\"number\">5</span>,</span><br><span class=\"line\">  second: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.findKey(numbers, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 返回 first</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p><code>findKey</code> 源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findKey = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj), key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果条件满足, 返回 key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十三\"><a href=\"#underscore-js-源码分析-十三\" class=\"headerlink\" title=\"underscore.js 源码分析(十三)\"></a>underscore.js 源码分析(十三)</h3><p><code>keys</code>  <code>values</code>  <code>pairs</code>  <code>invert</code> <code>functions</code>  <code>mapObject</code> <code>findKey</code></p>\n<h4 id=\"keys-Object\"><a href=\"#keys-Object\" class=\"headerlink\" title=\"keys(Object)\"></a><code>keys(Object)</code></h4><p>使用 <code>keys(Object)</code> 用于获得 <code>Object</code> 的所有属性名称。 与 <code>es6</code> 中  <code>Object.keys()</code> 功能相同，不同的是做了兼容性处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keys</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 不存在?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 Object.keys 方法, 返回 Object.keys(obj)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// else 使用 for in 进行属性获取</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    keys.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回属性数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"values-Object\"><a href=\"#values-Object\" class=\"headerlink\" title=\"values(Object)\"></a><code>values(Object)</code></h4><p>使用 <code>values(Object)</code> 用于获得对象的所有的属性名称。 类似于使用 <code>Object.values</code> 获取到对象的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">values</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    values[i] = obj[keys[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pairs\"><a href=\"#pairs\" class=\"headerlink\" title=\"pairs()\"></a><code>pairs()</code></h4><p>使用 <code>pairs()</code> 用于将一个对象转化为键值对的形式。</p>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = _.values(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pairs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    pairs.push([keys[i], values[i]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h4><p><code>invert(object)</code></p>\n<p>使用 <code>invert</code> 实现的是返回一个 <code>object</code> 的副本，在这个副本中, <code>object</code> 中的键和值互换。</p>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invert</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    result[object[keys[i]]] = keys[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a><code>functions</code></h4><p><code>functions(object)</code></p>\n<p>返回一个对象中所有的方法名，并且是已经经过排序的方法。</p>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.functions = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapObject\"><a href=\"#mapObject\" class=\"headerlink\" title=\"mapObject\"></a><code>mapObject</code></h4><p>类似于使用数组的 <code>map</code> 方法，不同的是这个方法针对的是对象的 <code>map</code> 方法, 使用 <code>mapObject</code> 用来对于对象的属性值进行操作， 实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      result = &#123;&#125;;</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys[index];</span><br><span class=\"line\">    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"findKey\"><a href=\"#findKey\" class=\"headerlink\" title=\"findKey\"></a><code>findKey</code></h4><p><code>_.findKey(obj, predicate, context)</code></p>\n<p>使用 <code>findKey</code> 返回的是 <code>obj</code> 中第一个满足 <code>predicate</code> 函数的 <code>key</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = &#123;</span><br><span class=\"line\">  first: <span class=\"number\">5</span>,</span><br><span class=\"line\">  second: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.findKey(numbers, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 返回 first</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p><code>findKey</code> 源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findKey = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj), key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果条件满足, 返回 key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(五)","date":"2017-11-25T16:33:53.000Z","_content":"\n###　underscore.js 源码解析（五）\n\n`sample` `toArray`  `size`  `partition`\n\n####  `_.sample`\n\n`_.sample(list, [n])`\n\n用于产生一个随机样本, 传递的参数 n 表示从 `list` 中返回 `n` 个随机元素。\n\n#### 源码分析\n\n```javascript\n_.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      // 返回使用 _.random 获得的随机数\n      return obj[_.random(obj.length - 1)];\n    }\n    // 使用 slice 用来分割数组\n    // 使用 Math.max() 用来返回最大值\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n```\n\n1. 通过使用 `Math.max()` 用来获得一组数中的最大值。\n\n   ```javascript\n   Math.max(value1, value2, value3, value4...)\n   // 获取到 value1, value2, value3, value4... 等一组数中的最大值\n   Math.min(value1, value2, value3, value4...)\n   // 获取到 value1, value1.. 中的最小值\n   ```\n\n2. 使用 `Array.slice` 用来进行分割数组\n\n   `Array.slice(start, end)` 分割的数组中包括 `start` 不包括 `end` \n\n####  `toArray`\n\n#####　实例\n\n`_.toArray(list)`\n\n如果 `list` 是一个可以迭代的对象, 可以将 `list` 转化为一个数组。\n\n##### 源码分析\n\n```javascript\n_.toArray = function(obj) {\n    // 如果 obj 不存在, 返回一个空的数组\n    if (!obj) return [];\n    // 如果 obj 是一个真正的数组, 返回 slice.call(obj),\n    // Object.prototype.slice\n    if (_.isArray(obj)) return slice.call(obj);\n    // 如果 obj 是一个类数组对象\n    // 类数组对象属于对象，但是有 length\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    // 返回 obj 是一个对象\n    return _.values(obj);\n  };\n```\n\n当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:\n\n使用 `obj.length` 进行判断的时候:\n\n1. 对象是数组:\n\n   使用 `Array.isArray` 进行判断，当 这个判断不支持的时候，使用 `Object.prototype.toString` 进行判断。\n\n   ```javascript\n   function isArray(obj) {\n       return Array.isArray(obj) || Object.prototype.toString.call(obj) ==== '[object Array]';\n   }\n   ```\n\n2. 对象是类数组对象\n\n   对于类数组对象也有 `length` 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:\n\n   ```javascript\n   if (obj.length === +obj.length) {\n     // 判断得到是类数组对象\n   }\n   ```\n\n3.  当得到的类型是对象的时候\n\n   ```javascript\n   // 对于对象而言: obj.length: undefined\n   // +obj.length: NaN\n   if (obj.length !== +obj.length) {\n   }\n   ```\n\n#### `size`\n\n`_.size(list)`\n\n用于返回 `list` 的长度\n\n当 `list` 是数组的时候，返回的是数组的长度，当 `list` 是对象的时候，返回的是对象的长度。\n\n##### 实例\n\n```javascript\nlet person = {\n  name: '张宁宁',\n  age: 23,\n  sex: 'female'\n};\n_.size(person) // 3\n```\n\n#### 源码分析\n\n使用`_.size` 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。\n\n```javascript\nfunction size(list) {\n  if (list == null) return 0;\n  // 判断 list 是否是对象或者数组\n  // list 是数组，返回 list 的length\n  // list 是对象, 返回的是 Object.keys(list) 的长度\n  return list.length === +list.length ? list.length : Object.keys(list).length;\n}\n```\n\n#### `partition`\n\n`_.partition(array, predicate)`\n\n##### 实例\n\n使用 `partition` 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 `predicate` 函数的数组，\n\n拆分之后的第二个数组是不满足 `predicate` 函数的数组。\n\n>`predicate` : 断言，断定，宣布，宣讲，使基于\n\n##### 源码分析\n\n```javascript\n_.partition = function(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  // 定义两个数组，分别用来存放成功的数组和失败的数组\n  var pass = [], fail = [];\n  _.each(obj, function(value, key, object) {\n    // predicate 返回 true : pass.push(obj)\n    // predicate 返回 false : fail.push(obj)\n    (predicate(value, key, object) ? pass : fail).push(obj);\n  });\n  // 返回一个二维数组\n  return [[pass], [fail]];\n};\n```\n\n","source":"_posts/underscore-js-源码分析-五.md","raw":"---\ntitle: underscore.js 源码分析(五)\ndate: 2017-11-26 00:33:53\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###　underscore.js 源码解析（五）\n\n`sample` `toArray`  `size`  `partition`\n\n####  `_.sample`\n\n`_.sample(list, [n])`\n\n用于产生一个随机样本, 传递的参数 n 表示从 `list` 中返回 `n` 个随机元素。\n\n#### 源码分析\n\n```javascript\n_.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      // 返回使用 _.random 获得的随机数\n      return obj[_.random(obj.length - 1)];\n    }\n    // 使用 slice 用来分割数组\n    // 使用 Math.max() 用来返回最大值\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n```\n\n1. 通过使用 `Math.max()` 用来获得一组数中的最大值。\n\n   ```javascript\n   Math.max(value1, value2, value3, value4...)\n   // 获取到 value1, value2, value3, value4... 等一组数中的最大值\n   Math.min(value1, value2, value3, value4...)\n   // 获取到 value1, value1.. 中的最小值\n   ```\n\n2. 使用 `Array.slice` 用来进行分割数组\n\n   `Array.slice(start, end)` 分割的数组中包括 `start` 不包括 `end` \n\n####  `toArray`\n\n#####　实例\n\n`_.toArray(list)`\n\n如果 `list` 是一个可以迭代的对象, 可以将 `list` 转化为一个数组。\n\n##### 源码分析\n\n```javascript\n_.toArray = function(obj) {\n    // 如果 obj 不存在, 返回一个空的数组\n    if (!obj) return [];\n    // 如果 obj 是一个真正的数组, 返回 slice.call(obj),\n    // Object.prototype.slice\n    if (_.isArray(obj)) return slice.call(obj);\n    // 如果 obj 是一个类数组对象\n    // 类数组对象属于对象，但是有 length\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    // 返回 obj 是一个对象\n    return _.values(obj);\n  };\n```\n\n当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:\n\n使用 `obj.length` 进行判断的时候:\n\n1. 对象是数组:\n\n   使用 `Array.isArray` 进行判断，当 这个判断不支持的时候，使用 `Object.prototype.toString` 进行判断。\n\n   ```javascript\n   function isArray(obj) {\n       return Array.isArray(obj) || Object.prototype.toString.call(obj) ==== '[object Array]';\n   }\n   ```\n\n2. 对象是类数组对象\n\n   对于类数组对象也有 `length` 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:\n\n   ```javascript\n   if (obj.length === +obj.length) {\n     // 判断得到是类数组对象\n   }\n   ```\n\n3.  当得到的类型是对象的时候\n\n   ```javascript\n   // 对于对象而言: obj.length: undefined\n   // +obj.length: NaN\n   if (obj.length !== +obj.length) {\n   }\n   ```\n\n#### `size`\n\n`_.size(list)`\n\n用于返回 `list` 的长度\n\n当 `list` 是数组的时候，返回的是数组的长度，当 `list` 是对象的时候，返回的是对象的长度。\n\n##### 实例\n\n```javascript\nlet person = {\n  name: '张宁宁',\n  age: 23,\n  sex: 'female'\n};\n_.size(person) // 3\n```\n\n#### 源码分析\n\n使用`_.size` 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。\n\n```javascript\nfunction size(list) {\n  if (list == null) return 0;\n  // 判断 list 是否是对象或者数组\n  // list 是数组，返回 list 的length\n  // list 是对象, 返回的是 Object.keys(list) 的长度\n  return list.length === +list.length ? list.length : Object.keys(list).length;\n}\n```\n\n#### `partition`\n\n`_.partition(array, predicate)`\n\n##### 实例\n\n使用 `partition` 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 `predicate` 函数的数组，\n\n拆分之后的第二个数组是不满足 `predicate` 函数的数组。\n\n>`predicate` : 断言，断定，宣布，宣讲，使基于\n\n##### 源码分析\n\n```javascript\n_.partition = function(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  // 定义两个数组，分别用来存放成功的数组和失败的数组\n  var pass = [], fail = [];\n  _.each(obj, function(value, key, object) {\n    // predicate 返回 true : pass.push(obj)\n    // predicate 返回 false : fail.push(obj)\n    (predicate(value, key, object) ? pass : fail).push(obj);\n  });\n  // 返回一个二维数组\n  return [[pass], [fail]];\n};\n```\n\n","slug":"underscore-js-源码分析-五","published":1,"updated":"2020-09-14T06:36:25.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7l002xi2oscqdo5fim","content":"<p>###　underscore.js 源码解析（五）</p>\n<p><code>sample</code> <code>toArray</code>  <code>size</code>  <code>partition</code></p>\n<h4 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"_.sample\"></a><code>_.sample</code></h4><p><code>_.sample(list, [n])</code></p>\n<p>用于产生一个随机样本, 传递的参数 n 表示从 <code>list</code> 中返回 <code>n</code> 个随机元素。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">      <span class=\"comment\">// 返回使用 _.random 获得的随机数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 slice 用来分割数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.max() 用来返回最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>通过使用 <code>Math.max()</code> 用来获得一组数中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value2, value3, value4... 等一组数中的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value1.. 中的最小值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Array.slice</code> 用来进行分割数组</p>\n<p><code>Array.slice(start, end)</code> 分割的数组中包括 <code>start</code> 不包括 <code>end</code> </p>\n</li>\n</ol>\n<h4 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a><code>toArray</code></h4><p>#####　实例</p>\n<p><code>_.toArray(list)</code></p>\n<p>如果 <code>list</code> 是一个可以迭代的对象, 可以将 <code>list</code> 转化为一个数组。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 不存在, 返回一个空的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个真正的数组, 返回 slice.call(obj),</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.slice</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个类数组对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 类数组对象属于对象，但是有 length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length === +obj.length) <span class=\"keyword\">return</span> _.map(obj, _.identity);</span><br><span class=\"line\">    <span class=\"comment\">// 返回 obj 是一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:</p>\n<p>使用 <code>obj.length</code> 进行判断的时候:</p>\n<ol>\n<li><p>对象是数组:</p>\n<p>使用 <code>Array.isArray</code> 进行判断，当 这个判断不支持的时候，使用 <code>Object.prototype.toString</code> 进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj) || <span class=\"built_in\">Object</span>.prototype.toString.call(obj) ==== <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象是类数组对象</p>\n<p>对于类数组对象也有 <code>length</code> 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断得到是类数组对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当得到的类型是对象的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于对象而言: obj.length: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// +obj.length: NaN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h4><p><code>_.size(list)</code></p>\n<p>用于返回 <code>list</code> 的长度</p>\n<p>当 <code>list</code> 是数组的时候，返回的是数组的长度，当 <code>list</code> 是对象的时候，返回的是对象的长度。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张宁宁'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">23</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.size(person) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>使用<code>_.size</code> 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 list 是否是对象或者数组</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是数组，返回 list 的length</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是对象, 返回的是 Object.keys(list) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.length === +list.length ? list.length : <span class=\"built_in\">Object</span>.keys(list).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a><code>partition</code></h4><p><code>_.partition(array, predicate)</code></p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>partition</code> 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 <code>predicate</code> 函数的数组，</p>\n<p>拆分之后的第二个数组是不满足 <code>predicate</code> 函数的数组。</p>\n<blockquote>\n<p><code>predicate</code> : 断言，断定，宣布，宣讲，使基于</p>\n</blockquote>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 定义两个数组，分别用来存放成功的数组和失败的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pass = [], fail = [];</span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 true : pass.push(obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 false : fail.push(obj)</span></span><br><span class=\"line\">    (predicate(value, key, object) ? pass : fail).push(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个二维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[pass], [fail]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>###　underscore.js 源码解析（五）</p>\n<p><code>sample</code> <code>toArray</code>  <code>size</code>  <code>partition</code></p>\n<h4 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"_.sample\"></a><code>_.sample</code></h4><p><code>_.sample(list, [n])</code></p>\n<p>用于产生一个随机样本, 传递的参数 n 表示从 <code>list</code> 中返回 <code>n</code> 个随机元素。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">      <span class=\"comment\">// 返回使用 _.random 获得的随机数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 slice 用来分割数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.max() 用来返回最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>通过使用 <code>Math.max()</code> 用来获得一组数中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value2, value3, value4... 等一组数中的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value1.. 中的最小值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Array.slice</code> 用来进行分割数组</p>\n<p><code>Array.slice(start, end)</code> 分割的数组中包括 <code>start</code> 不包括 <code>end</code> </p>\n</li>\n</ol>\n<h4 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a><code>toArray</code></h4><p>#####　实例</p>\n<p><code>_.toArray(list)</code></p>\n<p>如果 <code>list</code> 是一个可以迭代的对象, 可以将 <code>list</code> 转化为一个数组。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 不存在, 返回一个空的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个真正的数组, 返回 slice.call(obj),</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.slice</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个类数组对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 类数组对象属于对象，但是有 length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length === +obj.length) <span class=\"keyword\">return</span> _.map(obj, _.identity);</span><br><span class=\"line\">    <span class=\"comment\">// 返回 obj 是一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:</p>\n<p>使用 <code>obj.length</code> 进行判断的时候:</p>\n<ol>\n<li><p>对象是数组:</p>\n<p>使用 <code>Array.isArray</code> 进行判断，当 这个判断不支持的时候，使用 <code>Object.prototype.toString</code> 进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj) || <span class=\"built_in\">Object</span>.prototype.toString.call(obj) ==== <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象是类数组对象</p>\n<p>对于类数组对象也有 <code>length</code> 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断得到是类数组对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当得到的类型是对象的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于对象而言: obj.length: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// +obj.length: NaN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h4><p><code>_.size(list)</code></p>\n<p>用于返回 <code>list</code> 的长度</p>\n<p>当 <code>list</code> 是数组的时候，返回的是数组的长度，当 <code>list</code> 是对象的时候，返回的是对象的长度。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张宁宁'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">23</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.size(person) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>使用<code>_.size</code> 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 list 是否是对象或者数组</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是数组，返回 list 的length</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是对象, 返回的是 Object.keys(list) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.length === +list.length ? list.length : <span class=\"built_in\">Object</span>.keys(list).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a><code>partition</code></h4><p><code>_.partition(array, predicate)</code></p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>partition</code> 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 <code>predicate</code> 函数的数组，</p>\n<p>拆分之后的第二个数组是不满足 <code>predicate</code> 函数的数组。</p>\n<blockquote>\n<p><code>predicate</code> : 断言，断定，宣布，宣讲，使基于</p>\n</blockquote>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 定义两个数组，分别用来存放成功的数组和失败的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pass = [], fail = [];</span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 true : pass.push(obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 false : fail.push(obj)</span></span><br><span class=\"line\">    (predicate(value, key, object) ? pass : fail).push(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个二维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[pass], [fail]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(十六)","date":"2017-12-16T04:14:24.000Z","_content":"\n### underscore.js 源码分析(十六)\n\n####  `isEmpty`\n\n`isEmpty(object)`   `isElement`  ``\n\n如果 `object` 是一个空对象， 或者 `object` 是一个字符串或者数组, 并且字符串或者数组的 `length`  为 `0`; 返回 `true`,\n\n否则, 返回 `false`.\n\n##### 示例\n\n```javascript\n_.isEmpty({}); // true\n_.isEmpty({ name: '张宁宁' }); // false\n```\n\n\n\n##### 源码分析\n\n```javascript\n/*\n* @description isEmpty 用来判断 Obj 是否为空\n*/\nfunction isEmpty (obj) {\n  if (obj == null) return true;\n  if (isArray(obj) || isString(obj) || isArguments(obj)) return obj.length === 0;\n  for (let key in obj) if (has(obj, key)) return false;\n  return true;\n}\n```\n\n####  `isElement`\n\n`isElement(obj)`\n\n如果 `obj` 是一个 `dom` 元素, 返回为 `true;`\n\n对于 dom 元素  `nodeType ===  1`\n\n```javascript\nfunction isElement(obj) {\n  // 如果 obj 以及 obj.nodeType === 1\n  // 表示 obj 是一个节点对象\n  return !!(obj && obj.nodeType === 1);\n};\n```\n\n#### 判断函数\n\n使用判断函数用于判断函数的类型, 例如:   \n\n`isArray`  `isObject`  `isArguments`  `isFunction`  `isString`  `isNumber` ....\n\n实现上面这几种方法的判断是使用 `Array.prototype.toString.call` 的方法进行判断的:\n\n##### 源码分析  \n\n```javascript\n_.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n  _.['is' + name] = function (obj) {\n    // 通过使用 toString.call 来决定判断是属于哪一种类型\n    return toString.call(obj) === `[object ${name}]`;\n  }\n})\n```\n\n对于其他几个的判断:\n\n#####  `isObject` \n\n```javascript\n_.isObject = function (obj) {\n  let type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n##### `isFinite`  \n\n用来判断给定的对象是否属于一个无限的数。 \n\n```javascript\n_.isFinite = function () {\n  return isFinite(obj) && !isNaN(parseFloat(obj));\n}\n```\n\n##### `isNaN`\n\n用来判断给定的值是否是 `NaN` 值,\n\n>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  \n\n```javascript\n_.isNaN = function(obj) {\n  // NaN !== NaN\n  // NaN 是一个数字\n  return _.isNumber(obj) && obj !== +obj;\n}\n```\n\n##### `isBoolean`\n\n用于判断是否是一个布尔值;\n\n```javascript\n_.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object, Boolean]';\n}\n```\n\n##### `isNull`\n\n```javascript\n_.isNull = function (obj) {\n  return obj === null;\n}\n```\n\n####  `isUndefined`\n\n```javascript\n_.isUndefine = function (obj) {\n  // 这里通过使用 void 0 来代替 undefined 值\n  return obj === void 0;\n}\n```\n\n","source":"_posts/underscore-js-源码分析-十六.md","raw":"---\ntitle: underscore.js 源码分析(十六)\ndate: 2017-12-16 12:14:24\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十六)\n\n####  `isEmpty`\n\n`isEmpty(object)`   `isElement`  ``\n\n如果 `object` 是一个空对象， 或者 `object` 是一个字符串或者数组, 并且字符串或者数组的 `length`  为 `0`; 返回 `true`,\n\n否则, 返回 `false`.\n\n##### 示例\n\n```javascript\n_.isEmpty({}); // true\n_.isEmpty({ name: '张宁宁' }); // false\n```\n\n\n\n##### 源码分析\n\n```javascript\n/*\n* @description isEmpty 用来判断 Obj 是否为空\n*/\nfunction isEmpty (obj) {\n  if (obj == null) return true;\n  if (isArray(obj) || isString(obj) || isArguments(obj)) return obj.length === 0;\n  for (let key in obj) if (has(obj, key)) return false;\n  return true;\n}\n```\n\n####  `isElement`\n\n`isElement(obj)`\n\n如果 `obj` 是一个 `dom` 元素, 返回为 `true;`\n\n对于 dom 元素  `nodeType ===  1`\n\n```javascript\nfunction isElement(obj) {\n  // 如果 obj 以及 obj.nodeType === 1\n  // 表示 obj 是一个节点对象\n  return !!(obj && obj.nodeType === 1);\n};\n```\n\n#### 判断函数\n\n使用判断函数用于判断函数的类型, 例如:   \n\n`isArray`  `isObject`  `isArguments`  `isFunction`  `isString`  `isNumber` ....\n\n实现上面这几种方法的判断是使用 `Array.prototype.toString.call` 的方法进行判断的:\n\n##### 源码分析  \n\n```javascript\n_.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n  _.['is' + name] = function (obj) {\n    // 通过使用 toString.call 来决定判断是属于哪一种类型\n    return toString.call(obj) === `[object ${name}]`;\n  }\n})\n```\n\n对于其他几个的判断:\n\n#####  `isObject` \n\n```javascript\n_.isObject = function (obj) {\n  let type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n##### `isFinite`  \n\n用来判断给定的对象是否属于一个无限的数。 \n\n```javascript\n_.isFinite = function () {\n  return isFinite(obj) && !isNaN(parseFloat(obj));\n}\n```\n\n##### `isNaN`\n\n用来判断给定的值是否是 `NaN` 值,\n\n>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  \n\n```javascript\n_.isNaN = function(obj) {\n  // NaN !== NaN\n  // NaN 是一个数字\n  return _.isNumber(obj) && obj !== +obj;\n}\n```\n\n##### `isBoolean`\n\n用于判断是否是一个布尔值;\n\n```javascript\n_.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object, Boolean]';\n}\n```\n\n##### `isNull`\n\n```javascript\n_.isNull = function (obj) {\n  return obj === null;\n}\n```\n\n####  `isUndefined`\n\n```javascript\n_.isUndefine = function (obj) {\n  // 这里通过使用 void 0 来代替 undefined 值\n  return obj === void 0;\n}\n```\n\n","slug":"underscore-js-源码分析-十六","published":1,"updated":"2020-09-14T06:36:25.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7n0031i2osxyxbqyej","content":"<h3 id=\"underscore-js-源码分析-十六\"><a href=\"#underscore-js-源码分析-十六\" class=\"headerlink\" title=\"underscore.js 源码分析(十六)\"></a>underscore.js 源码分析(十六)</h3><h4 id=\"isEmpty\"><a href=\"#isEmpty\" class=\"headerlink\" title=\"isEmpty\"></a><code>isEmpty</code></h4><p><code>isEmpty(object)</code>   <code>isElement</code>  <code></code></p>\n<p>如果 <code>object</code> 是一个空对象， 或者 <code>object</code> 是一个字符串或者数组, 并且字符串或者数组的 <code>length</code>  为 <code>0</code>; 返回 <code>true</code>,</p>\n<p>否则, 返回 <code>false</code>.</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span> &#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description isEmpty 用来判断 Obj 是否为空</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(obj) || isString(obj) || isArguments(obj)) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (has(obj, key)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isElement\"><a href=\"#isElement\" class=\"headerlink\" title=\"isElement\"></a><code>isElement</code></h4><p><code>isElement(obj)</code></p>\n<p>如果 <code>obj</code> 是一个 <code>dom</code> 元素, 返回为 <code>true;</code></p>\n<p>对于 dom 元素  <code>nodeType ===  1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 以及 obj.nodeType === 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示 obj 是一个节点对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断函数\"><a href=\"#判断函数\" class=\"headerlink\" title=\"判断函数\"></a>判断函数</h4><p>使用判断函数用于判断函数的类型, 例如:   </p>\n<p><code>isArray</code>  <code>isObject</code>  <code>isArguments</code>  <code>isFunction</code>  <code>isString</code>  <code>isNumber</code> ….</p>\n<p>实现上面这几种方法的判断是使用 <code>Array.prototype.toString.call</code> 的方法进行判断的:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  _.[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 toString.call 来决定判断是属于哪一种类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;name&#125;</span>]`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于其他几个的判断:</p>\n<h5 id=\"isObject\"><a href=\"#isObject\" class=\"headerlink\" title=\"isObject\"></a><code>isObject</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite\"></a><code>isFinite</code></h5><p>用来判断给定的对象是否属于一个无限的数。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN\"></a><code>isNaN</code></h5><p>用来判断给定的值是否是 <code>NaN</code> 值,</p>\n<blockquote>\n<p>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// NaN !== NaN</span></span><br><span class=\"line\">  <span class=\"comment\">// NaN 是一个数字</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isBoolean\"><a href=\"#isBoolean\" class=\"headerlink\" title=\"isBoolean\"></a><code>isBoolean</code></h5><p>用于判断是否是一个布尔值;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object, Boolean]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNull\"><a href=\"#isNull\" class=\"headerlink\" title=\"isNull\"></a><code>isNull</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNull = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isUndefined\"><a href=\"#isUndefined\" class=\"headerlink\" title=\"isUndefined\"></a><code>isUndefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isUndefine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里通过使用 void 0 来代替 undefined 值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十六\"><a href=\"#underscore-js-源码分析-十六\" class=\"headerlink\" title=\"underscore.js 源码分析(十六)\"></a>underscore.js 源码分析(十六)</h3><h4 id=\"isEmpty\"><a href=\"#isEmpty\" class=\"headerlink\" title=\"isEmpty\"></a><code>isEmpty</code></h4><p><code>isEmpty(object)</code>   <code>isElement</code>  <code></code></p>\n<p>如果 <code>object</code> 是一个空对象， 或者 <code>object</code> 是一个字符串或者数组, 并且字符串或者数组的 <code>length</code>  为 <code>0</code>; 返回 <code>true</code>,</p>\n<p>否则, 返回 <code>false</code>.</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span> &#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description isEmpty 用来判断 Obj 是否为空</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(obj) || isString(obj) || isArguments(obj)) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (has(obj, key)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isElement\"><a href=\"#isElement\" class=\"headerlink\" title=\"isElement\"></a><code>isElement</code></h4><p><code>isElement(obj)</code></p>\n<p>如果 <code>obj</code> 是一个 <code>dom</code> 元素, 返回为 <code>true;</code></p>\n<p>对于 dom 元素  <code>nodeType ===  1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 以及 obj.nodeType === 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示 obj 是一个节点对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断函数\"><a href=\"#判断函数\" class=\"headerlink\" title=\"判断函数\"></a>判断函数</h4><p>使用判断函数用于判断函数的类型, 例如:   </p>\n<p><code>isArray</code>  <code>isObject</code>  <code>isArguments</code>  <code>isFunction</code>  <code>isString</code>  <code>isNumber</code> ….</p>\n<p>实现上面这几种方法的判断是使用 <code>Array.prototype.toString.call</code> 的方法进行判断的:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  _.[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 toString.call 来决定判断是属于哪一种类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;name&#125;</span>]`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于其他几个的判断:</p>\n<h5 id=\"isObject\"><a href=\"#isObject\" class=\"headerlink\" title=\"isObject\"></a><code>isObject</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite\"></a><code>isFinite</code></h5><p>用来判断给定的对象是否属于一个无限的数。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN\"></a><code>isNaN</code></h5><p>用来判断给定的值是否是 <code>NaN</code> 值,</p>\n<blockquote>\n<p>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// NaN !== NaN</span></span><br><span class=\"line\">  <span class=\"comment\">// NaN 是一个数字</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isBoolean\"><a href=\"#isBoolean\" class=\"headerlink\" title=\"isBoolean\"></a><code>isBoolean</code></h5><p>用于判断是否是一个布尔值;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object, Boolean]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNull\"><a href=\"#isNull\" class=\"headerlink\" title=\"isNull\"></a><code>isNull</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNull = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isUndefined\"><a href=\"#isUndefined\" class=\"headerlink\" title=\"isUndefined\"></a><code>isUndefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isUndefine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里通过使用 void 0 来代替 undefined 值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(十五)","date":"2017-12-14T14:40:13.000Z","_content":"\n### underscore.js 源码解析( 十五 )\n\n`clone`  `tap`  `has`  `matcher`  `property`  `propertyOf`  `isEqual`\n\n#### `clone`\n\n`_.clone(object)`  \n\n创建一个浅拷贝的 `object`  \n\n使用  `_.clone` 的源码如下:\n\n```javascript\n_.clone = function (obj) {\n  if (!.isObject(obj)) return obj;\n  // 对于 obj 是对象的, 分为数组和对象两种形式\n  return isArray(obj) ? obj.slice() : _.extend({}, obj);\n}\n```\n\n####  `tap`\n\n`_.tap(object, interceptor)`\n\n>`interceptor` 拦截器\n\n使用 `interceptor` 的作用是用于对于传入的对象 `object` 进行 `interceptor` 操作, 并且操作完成之后返回 `object` 本身。\n\n用于链式调用: \n\n```javascript\n_.tap = function (obj, interceptor) {\n  // 对于对象应用 interceptor 函数作用\n  interceptor(obj);\n  // 返回这个对象\n  return obj;\n}\n```\n\n#### 　`has`\n\n`_.has(object, key)`\n\n用于判断对象是否包含有特定的属性 `key`  , 在源码中有这样一句话, \n\n>等同于`object.hasOwnProperty(key)`，但是使用`hasOwnProperty` 函数的一个安全引用，以防[意外覆盖](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/)。\n>\n>什么是意外覆盖?\n\n源码分析如下:\n\n```javascript\n_.has = function(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n};\n```\n\n#### `matcher`\n\n`matcher(attrs)`\n\n使用 `matcher` 函数是一个断言函数, 返回一个 `true` or `false` 来判断给定的对象中是否含有 `attrs` 中指定的键值对儿\n\n示例:\n\n```javascript\nlet list = {\n  selected: true\n}\nlet hasSelected = _.matcher({selected: true});\nhasSelected(list); // true\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\n_.matcher = _.matches = function(attrs) {\n  attrs = _.extendOwn({}, attrs);\n  return function (obj) {\n    return _.isMatch(obj, attrs);\n  }\n}\n```\n\n其中 `_.isMatch` 源码如下:\n\n```javascript\n_.isMatch = function (object, attrs) {\n  let keys = _.keys(attrs), length = keys.length;\n  if (object === null) return !length;\n  let obj = Object(object);\n  for (let i = 0; i < length; i++) {\n    let key = keys[i];\n    //如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中\n    // 返回 false\n    if (attrs[key] !== obj[key] || !(key in obj)) return false; \n  }\n  // 返回 true\n  return true;\n}\n```\n\n#### `property`\n\n`property(key)`  \n\n该方法返回一个函数，返回传入该函数的任何对象的 `key` 属性。  \n\n#### 源码\n\n```javascript\nlet property = function (key) {\n  return function (obj) {\n    return obj === null ? void 0 : obj[key];\n  }\n}\n```\n\n####  `propertyOf`\n\n使用 `propertyOf` 与使用  `property` 相反。  \n\n`propertyOf(object)`  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。\n\n使用 `propertyOf`   \n\n```javascript\n_.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n        return obj[key];\n    }\n}\n```\n\n#### `isEqual`\n\n`isEqual(object, other)` \n\n使用  `isEqual` 用来判断两个对象是否相等。 \n\n因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 `isEqual` 返回的是 `true`\n\n```javascript\n{} == {} // false\n_.isEqual({}, {}); // true\n```\n\n在源码中使用 `equal` 进行判断:\n\n```javascript\n_.equal = function (a, b) {\n  return eq(a, b);\n}\n```\n\n使用 `eq` 进行判断的源码如下:\n\n```javascript\nvar eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    // 如果 a 或者 b === undefined 返回 a === b\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n   // 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        // 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        // 判断 +a === 0 ? \n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    // 如果不是一个数组\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n```\n\n#####  `eq` 函数\n\n使用 `eq` 函数进行比较的时候，进行比较的值有下面几种情况:\n\n1.  处理传递进比较的数值出现 `0 === -0` 的情况。这种情况用于单个数值的比较\n\n   因为 `a === -0` 但是他们是不相同的。\n\n   ```javascript\n   // 当 a !== 0  || 1/a === 1 / b\n   // 因为 1 / a === 1 / b (Infinity === -Infinity) // false\n   if (a === b) return a !== 0 || 1 / a === 1 / b;\n   ```\n\n2.  处理 `null == undefined` 的情况  \n\n   ```\n   // 当 a == null 或者 b == null 的时候， 返回 a === b\n   if (a == null || b == null) return a === b;\n   ```\n\n3. 使用 `Object.toString` 进行判断属于 `Object` 的哪一种类型。\n\n   ```javascript\n   let className = toString.call(a);\n   // 类型不同, 返回 false\n   if (className !== toString.call(b)) return false;\n   switch (className) {\n     case '[object RegExp]':\n     case '[object String]':\n       return '' + a === '' +b;\n     case '[object Number]':\n       // 使用  NaN 进行比较\n       if (+a !== +a) return +b !== +b;\n       return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n     case '[object Date]':\n     case '[object Boolean]':\n       return +a === +b;\n   }\n   ```\n\n     \n\n4. 对于数组和对象的之间进行比较，需要深度比较\n\n   当不是数组， 对象的情况:\n\n   ```javascript\n   var areArrays = className === '[object Array]';\n   if (!areArray) {\n     if (typeof a !== 'object' || typeof b !== 'object') return false;\n     var aCtor = a.constructor, bCtor = b.constructor;\n     // 如果 aCtor !== bCtor\n     if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor isntanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n       return false;\n     }\n   }\n\n   let length = aStack.length;\n   while(length--) {\n     if (aStack[length] === a) return bStack[length] === b;\n   }\n   // 将 a 压入到 aStack 数组中\n   // 将 b 压入到 bStack 数组中\n   // aStack bStack 主要用于多重数组的情况\n   aStack.push(a);\n   bStack.push(b);\n   ```\n\n   进行比较对象或者数组:\n\n   ```javascript\n   // 比较数组\n   if (areArrays) {\n     length = a.length;\n     if (length !== b.length) return false;\n     while (length--) {\n       if (!eq(a[length], b[length], aStack, bStack)) return false;\n     }\n   } else {\n   // 比较对象  \n     let keys = _.keys(a), key;\n     length = keys.length;\n     // 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历\n     if (_.keys(b).length !== length) return false;\n     while (length--) {\n       key = keys[length];\n       if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n     }\n   }\n   // 将存入的元素进行弹出\n   aStack.pop();\n   bStack.pop();\n   return true;\n   ```\n\n   ​\n\n   ​","source":"_posts/underscore-js-源码分析-十五.md","raw":"---\ntitle: underscore.js 源码分析(十五)\ndate: 2017-12-14 22:40:13\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码解析( 十五 )\n\n`clone`  `tap`  `has`  `matcher`  `property`  `propertyOf`  `isEqual`\n\n#### `clone`\n\n`_.clone(object)`  \n\n创建一个浅拷贝的 `object`  \n\n使用  `_.clone` 的源码如下:\n\n```javascript\n_.clone = function (obj) {\n  if (!.isObject(obj)) return obj;\n  // 对于 obj 是对象的, 分为数组和对象两种形式\n  return isArray(obj) ? obj.slice() : _.extend({}, obj);\n}\n```\n\n####  `tap`\n\n`_.tap(object, interceptor)`\n\n>`interceptor` 拦截器\n\n使用 `interceptor` 的作用是用于对于传入的对象 `object` 进行 `interceptor` 操作, 并且操作完成之后返回 `object` 本身。\n\n用于链式调用: \n\n```javascript\n_.tap = function (obj, interceptor) {\n  // 对于对象应用 interceptor 函数作用\n  interceptor(obj);\n  // 返回这个对象\n  return obj;\n}\n```\n\n#### 　`has`\n\n`_.has(object, key)`\n\n用于判断对象是否包含有特定的属性 `key`  , 在源码中有这样一句话, \n\n>等同于`object.hasOwnProperty(key)`，但是使用`hasOwnProperty` 函数的一个安全引用，以防[意外覆盖](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/)。\n>\n>什么是意外覆盖?\n\n源码分析如下:\n\n```javascript\n_.has = function(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n};\n```\n\n#### `matcher`\n\n`matcher(attrs)`\n\n使用 `matcher` 函数是一个断言函数, 返回一个 `true` or `false` 来判断给定的对象中是否含有 `attrs` 中指定的键值对儿\n\n示例:\n\n```javascript\nlet list = {\n  selected: true\n}\nlet hasSelected = _.matcher({selected: true});\nhasSelected(list); // true\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\n_.matcher = _.matches = function(attrs) {\n  attrs = _.extendOwn({}, attrs);\n  return function (obj) {\n    return _.isMatch(obj, attrs);\n  }\n}\n```\n\n其中 `_.isMatch` 源码如下:\n\n```javascript\n_.isMatch = function (object, attrs) {\n  let keys = _.keys(attrs), length = keys.length;\n  if (object === null) return !length;\n  let obj = Object(object);\n  for (let i = 0; i < length; i++) {\n    let key = keys[i];\n    //如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中\n    // 返回 false\n    if (attrs[key] !== obj[key] || !(key in obj)) return false; \n  }\n  // 返回 true\n  return true;\n}\n```\n\n#### `property`\n\n`property(key)`  \n\n该方法返回一个函数，返回传入该函数的任何对象的 `key` 属性。  \n\n#### 源码\n\n```javascript\nlet property = function (key) {\n  return function (obj) {\n    return obj === null ? void 0 : obj[key];\n  }\n}\n```\n\n####  `propertyOf`\n\n使用 `propertyOf` 与使用  `property` 相反。  \n\n`propertyOf(object)`  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。\n\n使用 `propertyOf`   \n\n```javascript\n_.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n        return obj[key];\n    }\n}\n```\n\n#### `isEqual`\n\n`isEqual(object, other)` \n\n使用  `isEqual` 用来判断两个对象是否相等。 \n\n因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 `isEqual` 返回的是 `true`\n\n```javascript\n{} == {} // false\n_.isEqual({}, {}); // true\n```\n\n在源码中使用 `equal` 进行判断:\n\n```javascript\n_.equal = function (a, b) {\n  return eq(a, b);\n}\n```\n\n使用 `eq` 进行判断的源码如下:\n\n```javascript\nvar eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    // 如果 a 或者 b === undefined 返回 a === b\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n   // 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        // 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        // 判断 +a === 0 ? \n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    // 如果不是一个数组\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n```\n\n#####  `eq` 函数\n\n使用 `eq` 函数进行比较的时候，进行比较的值有下面几种情况:\n\n1.  处理传递进比较的数值出现 `0 === -0` 的情况。这种情况用于单个数值的比较\n\n   因为 `a === -0` 但是他们是不相同的。\n\n   ```javascript\n   // 当 a !== 0  || 1/a === 1 / b\n   // 因为 1 / a === 1 / b (Infinity === -Infinity) // false\n   if (a === b) return a !== 0 || 1 / a === 1 / b;\n   ```\n\n2.  处理 `null == undefined` 的情况  \n\n   ```\n   // 当 a == null 或者 b == null 的时候， 返回 a === b\n   if (a == null || b == null) return a === b;\n   ```\n\n3. 使用 `Object.toString` 进行判断属于 `Object` 的哪一种类型。\n\n   ```javascript\n   let className = toString.call(a);\n   // 类型不同, 返回 false\n   if (className !== toString.call(b)) return false;\n   switch (className) {\n     case '[object RegExp]':\n     case '[object String]':\n       return '' + a === '' +b;\n     case '[object Number]':\n       // 使用  NaN 进行比较\n       if (+a !== +a) return +b !== +b;\n       return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n     case '[object Date]':\n     case '[object Boolean]':\n       return +a === +b;\n   }\n   ```\n\n     \n\n4. 对于数组和对象的之间进行比较，需要深度比较\n\n   当不是数组， 对象的情况:\n\n   ```javascript\n   var areArrays = className === '[object Array]';\n   if (!areArray) {\n     if (typeof a !== 'object' || typeof b !== 'object') return false;\n     var aCtor = a.constructor, bCtor = b.constructor;\n     // 如果 aCtor !== bCtor\n     if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor isntanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n       return false;\n     }\n   }\n\n   let length = aStack.length;\n   while(length--) {\n     if (aStack[length] === a) return bStack[length] === b;\n   }\n   // 将 a 压入到 aStack 数组中\n   // 将 b 压入到 bStack 数组中\n   // aStack bStack 主要用于多重数组的情况\n   aStack.push(a);\n   bStack.push(b);\n   ```\n\n   进行比较对象或者数组:\n\n   ```javascript\n   // 比较数组\n   if (areArrays) {\n     length = a.length;\n     if (length !== b.length) return false;\n     while (length--) {\n       if (!eq(a[length], b[length], aStack, bStack)) return false;\n     }\n   } else {\n   // 比较对象  \n     let keys = _.keys(a), key;\n     length = keys.length;\n     // 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历\n     if (_.keys(b).length !== length) return false;\n     while (length--) {\n       key = keys[length];\n       if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n     }\n   }\n   // 将存入的元素进行弹出\n   aStack.pop();\n   bStack.pop();\n   return true;\n   ```\n\n   ​\n\n   ​","slug":"underscore-js-源码分析-十五","published":1,"updated":"2020-09-14T06:36:25.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7o0034i2os5wfdgmin","content":"<h3 id=\"underscore-js-源码解析-十五\"><a href=\"#underscore-js-源码解析-十五\" class=\"headerlink\" title=\"underscore.js 源码解析( 十五 )\"></a>underscore.js 源码解析( 十五 )</h3><p><code>clone</code>  <code>tap</code>  <code>has</code>  <code>matcher</code>  <code>property</code>  <code>propertyOf</code>  <code>isEqual</code></p>\n<h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a><code>clone</code></h4><p><code>_.clone(object)</code>  </p>\n<p>创建一个浅拷贝的 <code>object</code>  </p>\n<p>使用  <code>_.clone</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 是对象的, 分为数组和对象两种形式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tap\"><a href=\"#tap\" class=\"headerlink\" title=\"tap\"></a><code>tap</code></h4><p><code>_.tap(object, interceptor)</code></p>\n<blockquote>\n<p><code>interceptor</code> 拦截器</p>\n</blockquote>\n<p>使用 <code>interceptor</code> 的作用是用于对于传入的对象 <code>object</code> 进行 <code>interceptor</code> 操作, 并且操作完成之后返回 <code>object</code> 本身。</p>\n<p>用于链式调用: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.tap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, interceptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于对象应用 interceptor 函数作用</span></span><br><span class=\"line\">  interceptor(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"　has\"></a>　<code>has</code></h4><p><code>_.has(object, key)</code></p>\n<p>用于判断对象是否包含有特定的属性 <code>key</code>  , 在源码中有这样一句话, </p>\n<blockquote>\n<p>等同于<code>object.hasOwnProperty(key)</code>，但是使用<code>hasOwnProperty</code> 函数的一个安全引用，以防<a href=\"http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\" target=\"_blank\" rel=\"noopener\">意外覆盖</a>。</p>\n<p>什么是意外覆盖?</p>\n</blockquote>\n<p>源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"matcher\"><a href=\"#matcher\" class=\"headerlink\" title=\"matcher\"></a><code>matcher</code></h4><p><code>matcher(attrs)</code></p>\n<p>使用 <code>matcher</code> 函数是一个断言函数, 返回一个 <code>true</code> or <code>false</code> 来判断给定的对象中是否含有 <code>attrs</code> 中指定的键值对儿</p>\n<p>示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">  selected: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasSelected = _.matcher(&#123;<span class=\"attr\">selected</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">hasSelected(list); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  attrs = _.extendOwn(&#123;&#125;, attrs);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>_.isMatch</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isMatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(attrs), length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">//如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a><code>property</code></h4><p><code>property(key)</code>  </p>\n<p>该方法返回一个函数，返回传入该函数的任何对象的 <code>key</code> 属性。  </p>\n<h4 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> property = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"propertyOf\"><a href=\"#propertyOf\" class=\"headerlink\" title=\"propertyOf\"></a><code>propertyOf</code></h4><p>使用 <code>propertyOf</code> 与使用  <code>property</code> 相反。  </p>\n<p><code>propertyOf(object)</code>  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。</p>\n<p>使用 <code>propertyOf</code>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isEqual\"><a href=\"#isEqual\" class=\"headerlink\" title=\"isEqual\"></a><code>isEqual</code></h4><p><code>isEqual(object, other)</code> </p>\n<p>使用  <code>isEqual</code> 用来判断两个对象是否相等。 </p>\n<p>因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 <code>isEqual</code> 返回的是 <code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false</span></span><br><span class=\"line\">_.isEqual(&#123;&#125;, &#123;&#125;); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在源码中使用 <code>equal</code> 进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.equal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eq(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>eq</code> 进行判断的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></span><br><span class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果 a 或者 b === undefined 返回 a === b</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</span><br><span class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</span><br><span class=\"line\">   <span class=\"comment\">// 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></span><br><span class=\"line\">        <span class=\"comment\">// 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断 +a === 0 ? </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></span><br><span class=\"line\">      <span class=\"comment\">// from different frames are.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">        _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></span><br><span class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></span><br><span class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></span><br><span class=\"line\">    aStack = aStack || [];</span><br><span class=\"line\">    bStack = bStack || [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">      <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.push(a);</span><br><span class=\"line\">    bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></span><br><span class=\"line\">      length = a.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Deep compare each member</span></span><br><span class=\"line\">        key = keys[length];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.pop();</span><br><span class=\"line\">    bStack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"eq-函数\"><a href=\"#eq-函数\" class=\"headerlink\" title=\"eq 函数\"></a><code>eq</code> 函数</h5><p>使用 <code>eq</code> 函数进行比较的时候，进行比较的值有下面几种情况:</p>\n<ol>\n<li><p>处理传递进比较的数值出现 <code>0 === -0</code> 的情况。这种情况用于单个数值的比较</p>\n<p>因为 <code>a === -0</code> 但是他们是不相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 a !== 0  || 1/a === 1 / b</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 1 / a === 1 / b (Infinity === -Infinity) // false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理 <code>null == undefined</code> 的情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 a == null 或者 b == null 的时候， 返回 a === b</span><br><span class=\"line\">if (a == null || b == null) return a === b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.toString</code> 进行判断属于 <code>Object</code> 的哪一种类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> className = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 类型不同, 返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 使用  NaN 进行比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>对于数组和对象的之间进行比较，需要深度比较</p>\n<p>当不是数组， 对象的情况:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!areArray) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 aCtor !== bCtor</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp; _.isFunction(bCtor) &amp;&amp; bCtor isntanceof bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(length--) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将 a 压入到 aStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// 将 b 压入到 bStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// aStack bStack 主要用于多重数组的情况</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>进行比较对象或者数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">  length = a.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 比较对象  </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(a), key;</span><br><span class=\"line\">  length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    key = keys[length];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将存入的元素进行弹出</span></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\">bStack.pop();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码解析-十五\"><a href=\"#underscore-js-源码解析-十五\" class=\"headerlink\" title=\"underscore.js 源码解析( 十五 )\"></a>underscore.js 源码解析( 十五 )</h3><p><code>clone</code>  <code>tap</code>  <code>has</code>  <code>matcher</code>  <code>property</code>  <code>propertyOf</code>  <code>isEqual</code></p>\n<h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a><code>clone</code></h4><p><code>_.clone(object)</code>  </p>\n<p>创建一个浅拷贝的 <code>object</code>  </p>\n<p>使用  <code>_.clone</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 是对象的, 分为数组和对象两种形式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tap\"><a href=\"#tap\" class=\"headerlink\" title=\"tap\"></a><code>tap</code></h4><p><code>_.tap(object, interceptor)</code></p>\n<blockquote>\n<p><code>interceptor</code> 拦截器</p>\n</blockquote>\n<p>使用 <code>interceptor</code> 的作用是用于对于传入的对象 <code>object</code> 进行 <code>interceptor</code> 操作, 并且操作完成之后返回 <code>object</code> 本身。</p>\n<p>用于链式调用: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.tap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, interceptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于对象应用 interceptor 函数作用</span></span><br><span class=\"line\">  interceptor(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"　has\"></a>　<code>has</code></h4><p><code>_.has(object, key)</code></p>\n<p>用于判断对象是否包含有特定的属性 <code>key</code>  , 在源码中有这样一句话, </p>\n<blockquote>\n<p>等同于<code>object.hasOwnProperty(key)</code>，但是使用<code>hasOwnProperty</code> 函数的一个安全引用，以防<a href=\"http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\" target=\"_blank\" rel=\"noopener\">意外覆盖</a>。</p>\n<p>什么是意外覆盖?</p>\n</blockquote>\n<p>源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"matcher\"><a href=\"#matcher\" class=\"headerlink\" title=\"matcher\"></a><code>matcher</code></h4><p><code>matcher(attrs)</code></p>\n<p>使用 <code>matcher</code> 函数是一个断言函数, 返回一个 <code>true</code> or <code>false</code> 来判断给定的对象中是否含有 <code>attrs</code> 中指定的键值对儿</p>\n<p>示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">  selected: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasSelected = _.matcher(&#123;<span class=\"attr\">selected</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">hasSelected(list); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  attrs = _.extendOwn(&#123;&#125;, attrs);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>_.isMatch</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isMatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(attrs), length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">//如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a><code>property</code></h4><p><code>property(key)</code>  </p>\n<p>该方法返回一个函数，返回传入该函数的任何对象的 <code>key</code> 属性。  </p>\n<h4 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> property = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"propertyOf\"><a href=\"#propertyOf\" class=\"headerlink\" title=\"propertyOf\"></a><code>propertyOf</code></h4><p>使用 <code>propertyOf</code> 与使用  <code>property</code> 相反。  </p>\n<p><code>propertyOf(object)</code>  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。</p>\n<p>使用 <code>propertyOf</code>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isEqual\"><a href=\"#isEqual\" class=\"headerlink\" title=\"isEqual\"></a><code>isEqual</code></h4><p><code>isEqual(object, other)</code> </p>\n<p>使用  <code>isEqual</code> 用来判断两个对象是否相等。 </p>\n<p>因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 <code>isEqual</code> 返回的是 <code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false</span></span><br><span class=\"line\">_.isEqual(&#123;&#125;, &#123;&#125;); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在源码中使用 <code>equal</code> 进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.equal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eq(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>eq</code> 进行判断的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></span><br><span class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果 a 或者 b === undefined 返回 a === b</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</span><br><span class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</span><br><span class=\"line\">   <span class=\"comment\">// 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></span><br><span class=\"line\">        <span class=\"comment\">// 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断 +a === 0 ? </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></span><br><span class=\"line\">      <span class=\"comment\">// from different frames are.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">        _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></span><br><span class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></span><br><span class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></span><br><span class=\"line\">    aStack = aStack || [];</span><br><span class=\"line\">    bStack = bStack || [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">      <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.push(a);</span><br><span class=\"line\">    bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></span><br><span class=\"line\">      length = a.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Deep compare each member</span></span><br><span class=\"line\">        key = keys[length];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.pop();</span><br><span class=\"line\">    bStack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"eq-函数\"><a href=\"#eq-函数\" class=\"headerlink\" title=\"eq 函数\"></a><code>eq</code> 函数</h5><p>使用 <code>eq</code> 函数进行比较的时候，进行比较的值有下面几种情况:</p>\n<ol>\n<li><p>处理传递进比较的数值出现 <code>0 === -0</code> 的情况。这种情况用于单个数值的比较</p>\n<p>因为 <code>a === -0</code> 但是他们是不相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 a !== 0  || 1/a === 1 / b</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 1 / a === 1 / b (Infinity === -Infinity) // false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理 <code>null == undefined</code> 的情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 a == null 或者 b == null 的时候， 返回 a === b</span><br><span class=\"line\">if (a == null || b == null) return a === b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.toString</code> 进行判断属于 <code>Object</code> 的哪一种类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> className = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 类型不同, 返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 使用  NaN 进行比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>对于数组和对象的之间进行比较，需要深度比较</p>\n<p>当不是数组， 对象的情况:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!areArray) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 aCtor !== bCtor</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp; _.isFunction(bCtor) &amp;&amp; bCtor isntanceof bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(length--) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将 a 压入到 aStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// 将 b 压入到 bStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// aStack bStack 主要用于多重数组的情况</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>进行比较对象或者数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">  length = a.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 比较对象  </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(a), key;</span><br><span class=\"line\">  length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    key = keys[length];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将存入的元素进行弹出</span></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\">bStack.pop();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"underscore.js 源码解析(六)","date":"2017-11-27T14:59:20.000Z","_content":"\n###  underscore.js 源码解析(六)\n\n`first` `initial`  `last` `rest` `compact`\n\n#### `first`\n\n#####  实例\n\n`_.first(array, [n])`\n\n`n` 是可选的, 表示选择数组中的前 `n` 个元素， 当我们没有传递 `n` 的时候，我们获得的是数组的第一个元素 `array[0]`。\n\n使用 `first` 用来获取到数组中的第一个元素。\n\n```javascript\nlet list = [1, 2, 3, 4];\n_.first(list) // 1\n```\n\n##### 源码分析\n\n使用 `_.first` 实现的源码如下:\n\n```\n_.first = _.head = _.take = function(array, n, guard) {\n    // 如果 array 为null 返回 undefined\n    if (array == null) return void 0;\n    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]\n    if (n == null || guard) return array[0];\n    // 使用 _.initial 用于返回数组的前 n 个元素\n    return _.initial(array, array.length - n);\n };\n```\n\n注意:\n\n1.  如何判断 `null`? \n\n   如果使用 `typeof` 判断 `null` 会返回 `object` , 实现判断是否为 `null` 的简单方法是进行判断:\n\n   ```\n   if (obj == null) {\n     // isnull\n   }\n   ```\n\n这里使用了一个 `_.initial` 用于获取到数组的相关值:\n\n#### `_.initial`\n\n使用 `_.initial` 的目的在于返回数组中前 `n` 个元素，不包括第 `n` 个元素\n\n##### 源码如下:\n\n```javascript\n_.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n};\n```\n\n#### `_.last`\n\n使用 `_.last` 用于返回数组中的最后一个元素。\n\n##### 源码分析\n\n```javascript\n_.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    // 调用 rest函数， 当 n !== null 的时候\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n```\n\n#### `_.rest`\n\n使用 `_.rest` 函数用于返回数组中剩下的元素。\n\n##### 源码分析\n\n```javascript\n_.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n); \n};\n```\n\n>使用 `slice.call` 其实是 `Array.prototype.slice.call()` 的方法\n>\n>`Array.slice(start, end)` // 用于裁剪数组，裁剪的数组包括 `start` 不包括 `end`  \n\n#### `compact` \n\n使用 `compact` 用于去除所有为 `假值` 的数组成员\n\n> 关于假值:  `false`, `undefined` `null`  `0` 以及 `\"\"` 被称为假值, 因为强制类型转换会被转换为 `false`。\n\n源码如下:\n\n```javascript\n _.compact = function(array) {\n   // 在 filter 的函数中\n    return _.filter(array, _.identity);\n };\n```\n\n因为在上面的代码中，函数 `_.filter` 中存在一个判断:\n\n```javascript\nif (someFn) {\n  // doSomething\n}\n```\n\n这里会对位于 `if` 框内的元素`someFn`进行强制类型转换。","source":"_posts/underscore-js-源码解析-六.md","raw":"---\ntitle: underscore.js 源码解析(六)\ndate: 2017-11-27 22:59:20\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###  underscore.js 源码解析(六)\n\n`first` `initial`  `last` `rest` `compact`\n\n#### `first`\n\n#####  实例\n\n`_.first(array, [n])`\n\n`n` 是可选的, 表示选择数组中的前 `n` 个元素， 当我们没有传递 `n` 的时候，我们获得的是数组的第一个元素 `array[0]`。\n\n使用 `first` 用来获取到数组中的第一个元素。\n\n```javascript\nlet list = [1, 2, 3, 4];\n_.first(list) // 1\n```\n\n##### 源码分析\n\n使用 `_.first` 实现的源码如下:\n\n```\n_.first = _.head = _.take = function(array, n, guard) {\n    // 如果 array 为null 返回 undefined\n    if (array == null) return void 0;\n    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]\n    if (n == null || guard) return array[0];\n    // 使用 _.initial 用于返回数组的前 n 个元素\n    return _.initial(array, array.length - n);\n };\n```\n\n注意:\n\n1.  如何判断 `null`? \n\n   如果使用 `typeof` 判断 `null` 会返回 `object` , 实现判断是否为 `null` 的简单方法是进行判断:\n\n   ```\n   if (obj == null) {\n     // isnull\n   }\n   ```\n\n这里使用了一个 `_.initial` 用于获取到数组的相关值:\n\n#### `_.initial`\n\n使用 `_.initial` 的目的在于返回数组中前 `n` 个元素，不包括第 `n` 个元素\n\n##### 源码如下:\n\n```javascript\n_.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n};\n```\n\n#### `_.last`\n\n使用 `_.last` 用于返回数组中的最后一个元素。\n\n##### 源码分析\n\n```javascript\n_.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    // 调用 rest函数， 当 n !== null 的时候\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n```\n\n#### `_.rest`\n\n使用 `_.rest` 函数用于返回数组中剩下的元素。\n\n##### 源码分析\n\n```javascript\n_.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n); \n};\n```\n\n>使用 `slice.call` 其实是 `Array.prototype.slice.call()` 的方法\n>\n>`Array.slice(start, end)` // 用于裁剪数组，裁剪的数组包括 `start` 不包括 `end`  \n\n#### `compact` \n\n使用 `compact` 用于去除所有为 `假值` 的数组成员\n\n> 关于假值:  `false`, `undefined` `null`  `0` 以及 `\"\"` 被称为假值, 因为强制类型转换会被转换为 `false`。\n\n源码如下:\n\n```javascript\n _.compact = function(array) {\n   // 在 filter 的函数中\n    return _.filter(array, _.identity);\n };\n```\n\n因为在上面的代码中，函数 `_.filter` 中存在一个判断:\n\n```javascript\nif (someFn) {\n  // doSomething\n}\n```\n\n这里会对位于 `if` 框内的元素`someFn`进行强制类型转换。","slug":"underscore-js-源码解析-六","published":1,"updated":"2020-09-14T06:36:25.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7q0038i2os8bl7641x","content":"<h3 id=\"underscore-js-源码解析-六\"><a href=\"#underscore-js-源码解析-六\" class=\"headerlink\" title=\"underscore.js 源码解析(六)\"></a>underscore.js 源码解析(六)</h3><p><code>first</code> <code>initial</code>  <code>last</code> <code>rest</code> <code>compact</code></p>\n<h4 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a><code>first</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.first(array, [n])</code></p>\n<p><code>n</code> 是可选的, 表示选择数组中的前 <code>n</code> 个元素， 当我们没有传递 <code>n</code> 的时候，我们获得的是数组的第一个元素 <code>array[0]</code>。</p>\n<p>使用 <code>first</code> 用来获取到数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">_.first(list) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.first</code> 实现的源码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.first = _.head = _.take = function(array, n, guard) &#123;</span><br><span class=\"line\">    // 如果 array 为null 返回 undefined</span><br><span class=\"line\">    if (array == null) return void 0;</span><br><span class=\"line\">    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]</span><br><span class=\"line\">    if (n == null || guard) return array[0];</span><br><span class=\"line\">    // 使用 _.initial 用于返回数组的前 n 个元素</span><br><span class=\"line\">    return _.initial(array, array.length - n);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ol>\n<li><p>如何判断 <code>null</code>? </p>\n<p>如果使用 <code>typeof</code> 判断 <code>null</code> 会返回 <code>object</code> , 实现判断是否为 <code>null</code> 的简单方法是进行判断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">  // isnull</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里使用了一个 <code>_.initial</code> 用于获取到数组的相关值:</p>\n<h4 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h4><p>使用 <code>_.initial</code> 的目的在于返回数组中前 <code>n</code> 个元素，不包括第 <code>n</code> 个元素</p>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下:\"></a>源码如下:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h4><p>使用 <code>_.last</code> 用于返回数组中的最后一个元素。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 调用 rest函数， 当 n !== null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest\"><a href=\"#rest\" class=\"headerlink\" title=\"_.rest\"></a><code>_.rest</code></h4><p>使用 <code>_.rest</code> 函数用于返回数组中剩下的元素。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>slice.call</code> 其实是 <code>Array.prototype.slice.call()</code> 的方法</p>\n<p><code>Array.slice(start, end)</code> // 用于裁剪数组，裁剪的数组包括 <code>start</code> 不包括 <code>end</code>  </p>\n</blockquote>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"compact\"></a><code>compact</code></h4><p>使用 <code>compact</code> 用于去除所有为 <code>假值</code> 的数组成员</p>\n<blockquote>\n<p>关于假值:  <code>false</code>, <code>undefined</code> <code>null</code>  <code>0</code> 以及 <code>&quot;&quot;</code> 被称为假值, 因为强制类型转换会被转换为 <code>false</code>。</p>\n</blockquote>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在 filter 的函数中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(array, _.identity);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为在上面的代码中，函数 <code>_.filter</code> 中存在一个判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someFn) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// doSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会对位于 <code>if</code> 框内的元素<code>someFn</code>进行强制类型转换。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码解析-六\"><a href=\"#underscore-js-源码解析-六\" class=\"headerlink\" title=\"underscore.js 源码解析(六)\"></a>underscore.js 源码解析(六)</h3><p><code>first</code> <code>initial</code>  <code>last</code> <code>rest</code> <code>compact</code></p>\n<h4 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a><code>first</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.first(array, [n])</code></p>\n<p><code>n</code> 是可选的, 表示选择数组中的前 <code>n</code> 个元素， 当我们没有传递 <code>n</code> 的时候，我们获得的是数组的第一个元素 <code>array[0]</code>。</p>\n<p>使用 <code>first</code> 用来获取到数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">_.first(list) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.first</code> 实现的源码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.first = _.head = _.take = function(array, n, guard) &#123;</span><br><span class=\"line\">    // 如果 array 为null 返回 undefined</span><br><span class=\"line\">    if (array == null) return void 0;</span><br><span class=\"line\">    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]</span><br><span class=\"line\">    if (n == null || guard) return array[0];</span><br><span class=\"line\">    // 使用 _.initial 用于返回数组的前 n 个元素</span><br><span class=\"line\">    return _.initial(array, array.length - n);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ol>\n<li><p>如何判断 <code>null</code>? </p>\n<p>如果使用 <code>typeof</code> 判断 <code>null</code> 会返回 <code>object</code> , 实现判断是否为 <code>null</code> 的简单方法是进行判断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">  // isnull</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里使用了一个 <code>_.initial</code> 用于获取到数组的相关值:</p>\n<h4 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h4><p>使用 <code>_.initial</code> 的目的在于返回数组中前 <code>n</code> 个元素，不包括第 <code>n</code> 个元素</p>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下:\"></a>源码如下:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h4><p>使用 <code>_.last</code> 用于返回数组中的最后一个元素。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 调用 rest函数， 当 n !== null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest\"><a href=\"#rest\" class=\"headerlink\" title=\"_.rest\"></a><code>_.rest</code></h4><p>使用 <code>_.rest</code> 函数用于返回数组中剩下的元素。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>slice.call</code> 其实是 <code>Array.prototype.slice.call()</code> 的方法</p>\n<p><code>Array.slice(start, end)</code> // 用于裁剪数组，裁剪的数组包括 <code>start</code> 不包括 <code>end</code>  </p>\n</blockquote>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"compact\"></a><code>compact</code></h4><p>使用 <code>compact</code> 用于去除所有为 <code>假值</code> 的数组成员</p>\n<blockquote>\n<p>关于假值:  <code>false</code>, <code>undefined</code> <code>null</code>  <code>0</code> 以及 <code>&quot;&quot;</code> 被称为假值, 因为强制类型转换会被转换为 <code>false</code>。</p>\n</blockquote>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在 filter 的函数中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(array, _.identity);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为在上面的代码中，函数 <code>_.filter</code> 中存在一个判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someFn) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// doSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会对位于 <code>if</code> 框内的元素<code>someFn</code>进行强制类型转换。</p>\n"},{"title":"underscore.js源码分析(一)","date":"2017-11-18T08:34:36.000Z","_content":"\n#### underscore.js 源码分析（一）\n\n`_.each`  `_.map`  `_.refuce` `_.reduceRight`  `_.find`\n\n#### `_.each`\n\n##### 实例\n\n`_.each(list, iteratee, [context])`\n\n这个方法用于循环遍历, 用于循环 `list` 对象或者数组， `iteratee` 是一个遍历函数，接收的参数为遍历之后的结果。  \n\n当 `list` 为数组的时候，传递给 `iteratee` 函数的参数是  `(element, index, list)`, 当 `list` 为对象的时候, 传递给 `iteratee` 函数的参数是 `[value, key, list]`。\n\n对于 `context` 上下文, 这个决定的是 `iteratee` 中的 `this` 的指向值。可选参数， 当 `context` 忽略的时候 `this` 指向的是全局变量。\n\n`_.each` 返回值是进行遍历的 `list` 数组对象。\n\n```\nfunction print(value, index, list) {\n  console.log(this.name);// 这里 this 指向了后面传递的 context\n  console.log(value, index, list);\n}\nlet person = {\n  name: '张宁宁'\n}\nconsole.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]\n// 最终打印\n张宁宁\n1 0 (3) [1, 2, 3]\n张宁宁\n2 1 (3) [1, 2, 3]\n张宁宁\n3 2 (3) [1, 2, 3]\n```\n\n##### 源码分析\n\n在 `underscore.js` 源码中， `_.each()` 源码为下:\n\n```\n _.each = _.forEach = function(obj, iteratee, context) {\n    // 如果 obj == null 返回 null\n    if (obj == null) return obj;\n    // 调用 optimiseCb 函数 稍后分析\n    iteratee = optimizeCb(iteratee, context);\n    var i, length = obj.length;\n    // 这里提供了分别 数组和对象的一种方法\n    // 如果数组\n    if (length === +length) {\n    // 数组情况下， 将 [value, index, list] 传入遍历函数\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n    // 获取到对象所有的 key 值\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    // 返回数组或者对象\n    return obj;\n  };\n```\n\n分析:\n\n1.  分别数组和对象的方法\n\n    我平常的时候使用 `Object.prootype.toString.call().slice(8, -1)` 这种方法来分别数组和纯对象，这里使用了一种方法。\n\n   ```\n   if (length === +length) {\n   // 这是数组\n   } else {\n   // 这是对象\n   }\n   ```\n\n   `+length` 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 `+` 进行类型转换的可能性如下:\n\n   ```javascript\n   +null // 0\n   +flase // 0\n   +\"\" // 0\n   +true // 1\n   +对象 // NaN\n   +非空字符串 // NaN\n   +NaN // NaN\n   +1 // 1\n   +undefined // NaN\n   ```\n\n   因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 `+length` 会被转化为 `NaN`。\n\n2.  ` iteratee = optimizeCb(iteratee, context);`\n\n    `optimizaCb` 函数\n\n   使用 `optimizaCb` 函数用于绑定上下文: 使用 `call` 以及 `apply` 的方法实现的改变函数运行的 `this` 值的改变\n\n   接收三个参数: `func` 运行的函数  `context` 运行函数需要进行绑定的上下文  `argCount` 参数的个数\n\n   ```\n   var optimizeCb = function(func, context, argCount) {\n       // 使用 void 0 类似于使用 undefined\n       // 等同于使用 if(context === undefined)\n       if (context === void 0) return func;\n       switch (argCount == null ? 3 : argCount) {\n         case 1: return function(value) {\n           return func.call(context, value);\n         };\n         case 2: return function(value, other) {\n           return func.call(context, value, other);\n         };\n         case 3: return function(value, index, collection) {\n           return func.call(context, value, index, collection);\n         };\n         case 4: return function(accumulator, value, index, collection) {\n           return func.call(context, accumulator, value, index, collection);\n         };\n       }\n       return function() {\n         return func.apply(context, arguments);\n       };\n    };\n   ```\n\n   上面的 `_.each` 源码中的使用这个函数的目的是将 `iteratee` 的上下文 `this` 绑定到 `context` 对象。\n\n   >这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 `undefined` 的原因在于： 在 `javascript` 中 `undefined` 不是一个保留字。\n   >\n   >代码如下:\n   >\n   >```\n   >var undefined = 1;\n   >console.log(undefined); // 1  也是可以的\n   >使用 void 0 作用是这样的\n   >```\n\n#### _.map\n\n##### 实例\n\n`_.map(list, iteratee, [context])`\n\n通过 使用变换函数 `iteratee` 将`list` 中的值映射到一个新的数组。\n\n```\nfunction filter(value) {\n  return value * 2;\n}\n_.map([1, 2, 3], filter); // [2, 4, 6]\n```\n\n源码如下:\n\n```javascript\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = cb(iteratee, context);\n    // 使用 && 操作符， 只有当第一个为true的时候才执行下一步操作\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        // || 操作符 第一个为true的时候不再进行下一步动作\n        length = (keys || obj).length,\n        // 使用 Array 创建一个 length 长度的数组\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n```\n\n##### 源码分析\n\n1.  使用 `&&` 以及 `||` 进行计算\n\n   这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。\n\n   > 这里对于类型转换，使用的时候要注意出现假值的情况\n\n   使用 `&&` 以及 `||` 会首先对于 * 第一个*  操作数进行计算，根据判断结果来决定返回哪一个操作数。\n\n   ```\n   a || b\n   // 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b\n   a && b\n   // 如果 a 类型转换结果为 true 返回的是 b 否则返回 a\n   ```\n\n   上面我们可以看到，我们可以利用这两个操作符做一些事情:\n\n   ` a || b` 好像备用条件。 如果条件 `a` 不成立, 执行条件 b, 如果成立，执行条件 `a`  `a ? a : b`\n\n    `a && b` 好像通过条件， 如果 `a` 成立，向下执行，如果不成立，打住，返回 `a` 执行的结果 `a ? b : a`  \n\n2. 使用 `Array(length)` 创建的是一个 `length` 长度的数组。\n\n#### _.reduce\n\n##### 实例\n\n`_.reduce(list, iteratee, [memo], context)`\n\n通过迭代将 `list` 中的元素归结为一个值。 `memo` 表示初始参数。\n\n```\nfunction reduceFn(memo, num) {\n  return memo * num;\n}\nlet list = [1, 2, 3];\n_.reduce(list, reduceFn, 1) // 6\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\nfunction reduce(obj, iteratee, memo, context) {\n\tif (obj === null) obj = [];\n\titeratee = optimizeCb(iteratee, context, 4);\n\tvar keys = obj.length !== +obj.length && Object.keys(),\n\t\tlength = (keys || obj).length,\n\t\tindex = 0, currentIndex;\n\tif (arguments.length < 3) {\n\t\tmemo = obj[keys ? keys[index++] : index++];\n\t}\n\tfor (; index < length; index++) {\n\t\tcurrentIndex = keys ? keys[index] : index;\n\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);\n\t}\n\treturn memo;\n\t}\n```\n\n分析:\n\n1.  在 `obj` 可能是对象或者数组的情况下，当 `obj` 是对象的时候，需要产生了一个 使用 `keys` 来进行数组操作\n\n2. 在迭代的时候， 当没有 `memo` 初始值的时候， 将数组或者对象的第一个值作为 `memo` 这里，使用 `index++` 来处理的\n\n   >使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index\n   >\n   >```\n   >let currentIndex = 0;\n   >let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作\n   >addIndex // 0\n   >currentIndex // 1\n   >```\n   >\n   >​\n\n3. 迭代的过程发生在使用循环赋值的过程中\n\n   ```javascript\n   for (; index < length; index++) {\n     memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);\n   }\n   ```\n\n\n#### _.reduceRight\n\n##### 实例\n\n`_.reduceRight(list, iteratee, [memo], context)`\n\n类似于使用`_.reduce` 不过不同于使用 `_.reduce` 的是，这个是从右边向左进行遍历操作;\n\n```javascript\nfunction contact(a, b) {\n  return a.contact(b);\n}\nlet list = [[1, 2], [3, 4], [5, 6]];\n_.reduceRight(list, contact) // [5, 6, 3, 4, 1, 2]\n```\n\n##### 源码分析\n\n```javascript\n_.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = optimizeCb(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      // 先对于 index 进行 减一操作\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    // 在判断完成 index 之后进行减一操作\n    while (index-- > 0) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n```\n\n1.  使用 `while` 循环进行判断\n\n   ```\n   while (index-- > 0) {\n     // do something\n   }\n   ```\n\n####  _.find\n\n##### 实例\n\n`_.find(list, predicate, [context])`\n\n遍历  `list` 值   返回第一个通过 `predicate` 函数返回真值的数值。\n\n```\nlet list = [1, 2, 3];\nfunction getodd(value) {\n  return value % 2 === 0;\n}\n_find(list, getodd) // 2\n```\n\n##### 源码分析\n\n```javascript\n _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    // 如果是数组\n    if (obj.length === +obj.length) {\n      // 使用 findIndex 找到数组的值\n      key = _.findIndex(obj, predicate, context);\n    } else {\n    // 如果是是对象\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/underscore-js源码分析-一.md","raw":"---\ntitle: underscore.js源码分析(一)\ndate: 2017-11-18 16:34:36\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n#### underscore.js 源码分析（一）\n\n`_.each`  `_.map`  `_.refuce` `_.reduceRight`  `_.find`\n\n#### `_.each`\n\n##### 实例\n\n`_.each(list, iteratee, [context])`\n\n这个方法用于循环遍历, 用于循环 `list` 对象或者数组， `iteratee` 是一个遍历函数，接收的参数为遍历之后的结果。  \n\n当 `list` 为数组的时候，传递给 `iteratee` 函数的参数是  `(element, index, list)`, 当 `list` 为对象的时候, 传递给 `iteratee` 函数的参数是 `[value, key, list]`。\n\n对于 `context` 上下文, 这个决定的是 `iteratee` 中的 `this` 的指向值。可选参数， 当 `context` 忽略的时候 `this` 指向的是全局变量。\n\n`_.each` 返回值是进行遍历的 `list` 数组对象。\n\n```\nfunction print(value, index, list) {\n  console.log(this.name);// 这里 this 指向了后面传递的 context\n  console.log(value, index, list);\n}\nlet person = {\n  name: '张宁宁'\n}\nconsole.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]\n// 最终打印\n张宁宁\n1 0 (3) [1, 2, 3]\n张宁宁\n2 1 (3) [1, 2, 3]\n张宁宁\n3 2 (3) [1, 2, 3]\n```\n\n##### 源码分析\n\n在 `underscore.js` 源码中， `_.each()` 源码为下:\n\n```\n _.each = _.forEach = function(obj, iteratee, context) {\n    // 如果 obj == null 返回 null\n    if (obj == null) return obj;\n    // 调用 optimiseCb 函数 稍后分析\n    iteratee = optimizeCb(iteratee, context);\n    var i, length = obj.length;\n    // 这里提供了分别 数组和对象的一种方法\n    // 如果数组\n    if (length === +length) {\n    // 数组情况下， 将 [value, index, list] 传入遍历函数\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n    // 获取到对象所有的 key 值\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    // 返回数组或者对象\n    return obj;\n  };\n```\n\n分析:\n\n1.  分别数组和对象的方法\n\n    我平常的时候使用 `Object.prootype.toString.call().slice(8, -1)` 这种方法来分别数组和纯对象，这里使用了一种方法。\n\n   ```\n   if (length === +length) {\n   // 这是数组\n   } else {\n   // 这是对象\n   }\n   ```\n\n   `+length` 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 `+` 进行类型转换的可能性如下:\n\n   ```javascript\n   +null // 0\n   +flase // 0\n   +\"\" // 0\n   +true // 1\n   +对象 // NaN\n   +非空字符串 // NaN\n   +NaN // NaN\n   +1 // 1\n   +undefined // NaN\n   ```\n\n   因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 `+length` 会被转化为 `NaN`。\n\n2.  ` iteratee = optimizeCb(iteratee, context);`\n\n    `optimizaCb` 函数\n\n   使用 `optimizaCb` 函数用于绑定上下文: 使用 `call` 以及 `apply` 的方法实现的改变函数运行的 `this` 值的改变\n\n   接收三个参数: `func` 运行的函数  `context` 运行函数需要进行绑定的上下文  `argCount` 参数的个数\n\n   ```\n   var optimizeCb = function(func, context, argCount) {\n       // 使用 void 0 类似于使用 undefined\n       // 等同于使用 if(context === undefined)\n       if (context === void 0) return func;\n       switch (argCount == null ? 3 : argCount) {\n         case 1: return function(value) {\n           return func.call(context, value);\n         };\n         case 2: return function(value, other) {\n           return func.call(context, value, other);\n         };\n         case 3: return function(value, index, collection) {\n           return func.call(context, value, index, collection);\n         };\n         case 4: return function(accumulator, value, index, collection) {\n           return func.call(context, accumulator, value, index, collection);\n         };\n       }\n       return function() {\n         return func.apply(context, arguments);\n       };\n    };\n   ```\n\n   上面的 `_.each` 源码中的使用这个函数的目的是将 `iteratee` 的上下文 `this` 绑定到 `context` 对象。\n\n   >这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 `undefined` 的原因在于： 在 `javascript` 中 `undefined` 不是一个保留字。\n   >\n   >代码如下:\n   >\n   >```\n   >var undefined = 1;\n   >console.log(undefined); // 1  也是可以的\n   >使用 void 0 作用是这样的\n   >```\n\n#### _.map\n\n##### 实例\n\n`_.map(list, iteratee, [context])`\n\n通过 使用变换函数 `iteratee` 将`list` 中的值映射到一个新的数组。\n\n```\nfunction filter(value) {\n  return value * 2;\n}\n_.map([1, 2, 3], filter); // [2, 4, 6]\n```\n\n源码如下:\n\n```javascript\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = cb(iteratee, context);\n    // 使用 && 操作符， 只有当第一个为true的时候才执行下一步操作\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        // || 操作符 第一个为true的时候不再进行下一步动作\n        length = (keys || obj).length,\n        // 使用 Array 创建一个 length 长度的数组\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n```\n\n##### 源码分析\n\n1.  使用 `&&` 以及 `||` 进行计算\n\n   这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。\n\n   > 这里对于类型转换，使用的时候要注意出现假值的情况\n\n   使用 `&&` 以及 `||` 会首先对于 * 第一个*  操作数进行计算，根据判断结果来决定返回哪一个操作数。\n\n   ```\n   a || b\n   // 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b\n   a && b\n   // 如果 a 类型转换结果为 true 返回的是 b 否则返回 a\n   ```\n\n   上面我们可以看到，我们可以利用这两个操作符做一些事情:\n\n   ` a || b` 好像备用条件。 如果条件 `a` 不成立, 执行条件 b, 如果成立，执行条件 `a`  `a ? a : b`\n\n    `a && b` 好像通过条件， 如果 `a` 成立，向下执行，如果不成立，打住，返回 `a` 执行的结果 `a ? b : a`  \n\n2. 使用 `Array(length)` 创建的是一个 `length` 长度的数组。\n\n#### _.reduce\n\n##### 实例\n\n`_.reduce(list, iteratee, [memo], context)`\n\n通过迭代将 `list` 中的元素归结为一个值。 `memo` 表示初始参数。\n\n```\nfunction reduceFn(memo, num) {\n  return memo * num;\n}\nlet list = [1, 2, 3];\n_.reduce(list, reduceFn, 1) // 6\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\nfunction reduce(obj, iteratee, memo, context) {\n\tif (obj === null) obj = [];\n\titeratee = optimizeCb(iteratee, context, 4);\n\tvar keys = obj.length !== +obj.length && Object.keys(),\n\t\tlength = (keys || obj).length,\n\t\tindex = 0, currentIndex;\n\tif (arguments.length < 3) {\n\t\tmemo = obj[keys ? keys[index++] : index++];\n\t}\n\tfor (; index < length; index++) {\n\t\tcurrentIndex = keys ? keys[index] : index;\n\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);\n\t}\n\treturn memo;\n\t}\n```\n\n分析:\n\n1.  在 `obj` 可能是对象或者数组的情况下，当 `obj` 是对象的时候，需要产生了一个 使用 `keys` 来进行数组操作\n\n2. 在迭代的时候， 当没有 `memo` 初始值的时候， 将数组或者对象的第一个值作为 `memo` 这里，使用 `index++` 来处理的\n\n   >使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index\n   >\n   >```\n   >let currentIndex = 0;\n   >let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作\n   >addIndex // 0\n   >currentIndex // 1\n   >```\n   >\n   >​\n\n3. 迭代的过程发生在使用循环赋值的过程中\n\n   ```javascript\n   for (; index < length; index++) {\n     memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);\n   }\n   ```\n\n\n#### _.reduceRight\n\n##### 实例\n\n`_.reduceRight(list, iteratee, [memo], context)`\n\n类似于使用`_.reduce` 不过不同于使用 `_.reduce` 的是，这个是从右边向左进行遍历操作;\n\n```javascript\nfunction contact(a, b) {\n  return a.contact(b);\n}\nlet list = [[1, 2], [3, 4], [5, 6]];\n_.reduceRight(list, contact) // [5, 6, 3, 4, 1, 2]\n```\n\n##### 源码分析\n\n```javascript\n_.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = optimizeCb(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      // 先对于 index 进行 减一操作\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    // 在判断完成 index 之后进行减一操作\n    while (index-- > 0) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n```\n\n1.  使用 `while` 循环进行判断\n\n   ```\n   while (index-- > 0) {\n     // do something\n   }\n   ```\n\n####  _.find\n\n##### 实例\n\n`_.find(list, predicate, [context])`\n\n遍历  `list` 值   返回第一个通过 `predicate` 函数返回真值的数值。\n\n```\nlet list = [1, 2, 3];\nfunction getodd(value) {\n  return value % 2 === 0;\n}\n_find(list, getodd) // 2\n```\n\n##### 源码分析\n\n```javascript\n _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    // 如果是数组\n    if (obj.length === +obj.length) {\n      // 使用 findIndex 找到数组的值\n      key = _.findIndex(obj, predicate, context);\n    } else {\n    // 如果是是对象\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"underscore-js源码分析-一","published":1,"updated":"2020-09-14T06:36:25.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7r003ai2osxukcaew8","content":"<h4 id=\"underscore-js-源码分析（一）\"><a href=\"#underscore-js-源码分析（一）\" class=\"headerlink\" title=\"underscore.js 源码分析（一）\"></a>underscore.js 源码分析（一）</h4><p><code>_.each</code>  <code>_.map</code>  <code>_.refuce</code> <code>_.reduceRight</code>  <code>_.find</code></p>\n<h4 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a><code>_.each</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.each(list, iteratee, [context])</code></p>\n<p>这个方法用于循环遍历, 用于循环 <code>list</code> 对象或者数组， <code>iteratee</code> 是一个遍历函数，接收的参数为遍历之后的结果。  </p>\n<p>当 <code>list</code> 为数组的时候，传递给 <code>iteratee</code> 函数的参数是  <code>(element, index, list)</code>, 当 <code>list</code> 为对象的时候, 传递给 <code>iteratee</code> 函数的参数是 <code>[value, key, list]</code>。</p>\n<p>对于 <code>context</code> 上下文, 这个决定的是 <code>iteratee</code> 中的 <code>this</code> 的指向值。可选参数， 当 <code>context</code> 忽略的时候 <code>this</code> 指向的是全局变量。</p>\n<p><code>_.each</code> 返回值是进行遍历的 <code>list</code> 数组对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function print(value, index, list) &#123;</span><br><span class=\"line\">  console.log(this.name);// 这里 this 指向了后面传递的 context</span><br><span class=\"line\">  console.log(value, index, list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let person = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]</span><br><span class=\"line\">// 最终打印</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">1 0 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">2 1 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">3 2 (3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>在 <code>underscore.js</code> 源码中， <code>_.each()</code> 源码为下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each = _.forEach = function(obj, iteratee, context) &#123;</span><br><span class=\"line\">   // 如果 obj == null 返回 null</span><br><span class=\"line\">   if (obj == null) return obj;</span><br><span class=\"line\">   // 调用 optimiseCb 函数 稍后分析</span><br><span class=\"line\">   iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\">   var i, length = obj.length;</span><br><span class=\"line\">   // 这里提供了分别 数组和对象的一种方法</span><br><span class=\"line\">   // 如果数组</span><br><span class=\"line\">   if (length === +length) &#123;</span><br><span class=\"line\">   // 数组情况下， 将 [value, index, list] 传入遍历函数</span><br><span class=\"line\">     for (i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[i], i, obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">   // 获取到对象所有的 key 值</span><br><span class=\"line\">     var keys = _.keys(obj);</span><br><span class=\"line\">     for (i = 0, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 返回数组或者对象</span><br><span class=\"line\">   return obj;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>分别数组和对象的方法</p>\n<p>我平常的时候使用 <code>Object.prootype.toString.call().slice(8, -1)</code> 这种方法来分别数组和纯对象，这里使用了一种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (length === +length) &#123;</span><br><span class=\"line\">// 这是数组</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// 这是对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>+length</code> 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 <code>+</code> 进行类型转换的可能性如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"literal\">null</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+flase <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"string\">\"\"</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+对象 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+非空字符串 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"literal\">NaN</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+<span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 <code>+length</code> 会被转化为 <code>NaN</code>。</p>\n</li>\n<li><p><code>iteratee = optimizeCb(iteratee, context);</code></p>\n<p><code>optimizaCb</code> 函数</p>\n<p>使用 <code>optimizaCb</code> 函数用于绑定上下文: 使用 <code>call</code> 以及 <code>apply</code> 的方法实现的改变函数运行的 <code>this</code> 值的改变</p>\n<p>接收三个参数: <code>func</code> 运行的函数  <code>context</code> 运行函数需要进行绑定的上下文  <code>argCount</code> 参数的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optimizeCb = function(func, context, argCount) &#123;</span><br><span class=\"line\">    // 使用 void 0 类似于使用 undefined</span><br><span class=\"line\">    // 等同于使用 if(context === undefined)</span><br><span class=\"line\">    if (context === void 0) return func;</span><br><span class=\"line\">    switch (argCount == null ? 3 : argCount) &#123;</span><br><span class=\"line\">      case 1: return function(value) &#123;</span><br><span class=\"line\">        return func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 2: return function(value, other) &#123;</span><br><span class=\"line\">        return func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 3: return function(value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 4: return function(accumulator, value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return func.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>_.each</code> 源码中的使用这个函数的目的是将 <code>iteratee</code> 的上下文 <code>this</code> 绑定到 <code>context</code> 对象。</p>\n<blockquote>\n<p>这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 <code>undefined</code> 的原因在于： 在 <code>javascript</code> 中 <code>undefined</code> 不是一个保留字。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;var undefined = 1;</span><br><span class=\"line\">&gt;console.log(undefined); // 1  也是可以的</span><br><span class=\"line\">&gt;使用 void 0 作用是这样的</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.map(list, iteratee, [context])</code></p>\n<p>通过 使用变换函数 <code>iteratee</code> 将<code>list</code> 中的值映射到一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function filter(value) &#123;</span><br><span class=\"line\">  return value * 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.map([1, 2, 3], filter); // [2, 4, 6]</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 &amp;&amp; 操作符， 只有当第一个为true的时候才执行下一步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">      <span class=\"comment\">// || 操作符 第一个为true的时候不再进行下一步动作</span></span><br><span class=\"line\">      length = (keys || obj).length,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 Array 创建一个 length 长度的数组</span></span><br><span class=\"line\">      results = <span class=\"built_in\">Array</span>(length),</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">    results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><ol>\n<li><p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 进行计算</p>\n<p>这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。</p>\n<blockquote>\n<p>这里对于类型转换，使用的时候要注意出现假值的情况</p>\n</blockquote>\n<p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 会首先对于 <em> 第一个</em>  操作数进行计算，根据判断结果来决定返回哪一个操作数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a || b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b</span><br><span class=\"line\">a &amp;&amp; b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 b 否则返回 a</span><br></pre></td></tr></table></figure>\n<p>上面我们可以看到，我们可以利用这两个操作符做一些事情:</p>\n<p><code>a || b</code> 好像备用条件。 如果条件 <code>a</code> 不成立, 执行条件 b, 如果成立，执行条件 <code>a</code>  <code>a ? a : b</code></p>\n<p><code>a &amp;&amp; b</code> 好像通过条件， 如果 <code>a</code> 成立，向下执行，如果不成立，打住，返回 <code>a</code> 执行的结果 <code>a ? b : a</code>  </p>\n</li>\n<li><p>使用 <code>Array(length)</code> 创建的是一个 <code>length</code> 长度的数组。</p>\n</li>\n</ol>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduce(list, iteratee, [memo], context)</code></p>\n<p>通过迭代将 <code>list</code> 中的元素归结为一个值。 <code>memo</code> 表示初始参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reduceFn(memo, num) &#123;</span><br><span class=\"line\">  return memo * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">_.reduce(list, reduceFn, 1) // 6</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduce</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">\titeratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(),</span><br><span class=\"line\">\t\tlength = (keys || obj).length,</span><br><span class=\"line\">\t\tindex = <span class=\"number\">0</span>, currentIndex;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\tmemo = obj[keys ? keys[index++] : index++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentIndex = keys ? keys[index] : index;</span><br><span class=\"line\">\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>在 <code>obj</code> 可能是对象或者数组的情况下，当 <code>obj</code> 是对象的时候，需要产生了一个 使用 <code>keys</code> 来进行数组操作</p>\n</li>\n<li><p>在迭代的时候， 当没有 <code>memo</code> 初始值的时候， 将数组或者对象的第一个值作为 <code>memo</code> 这里，使用 <code>index++</code> 来处理的</p>\n<blockquote>\n<p>使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;let currentIndex = 0;</span><br><span class=\"line\">&gt;let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作</span><br><span class=\"line\">&gt;addIndex // 0</span><br><span class=\"line\">&gt;currentIndex // 1</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>迭代的过程发生在使用循环赋值的过程中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">  memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduceRight(list, iteratee, [memo], context)</code></p>\n<p>类似于使用<code>_.reduce</code> 不过不同于使用 <code>_.reduce</code> 的是，这个是从右边向左进行遍历操作;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contact</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.contact(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]];</span><br><span class=\"line\">_.reduceRight(list, contact) <span class=\"comment\">// [5, 6, 3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reduceRight = _.foldr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== + obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        index = (keys || obj).length,</span><br><span class=\"line\">        currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先对于 index 进行 减一操作</span></span><br><span class=\"line\">      memo = obj[keys ? keys[--index] : --index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在判断完成 index 之后进行减一操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 <code>while</code> 循环进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (index-- &gt; 0) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.find(list, predicate, [context])</code></p>\n<p>遍历  <code>list</code> 值   返回第一个通过 <code>predicate</code> 函数返回真值的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">function getodd(value) &#123;</span><br><span class=\"line\">  return value % 2 === 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_find(list, getodd) // 2</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 findIndex 找到数组的值</span></span><br><span class=\"line\">     key = _.findIndex(obj, predicate, context);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是是对象</span></span><br><span class=\"line\">     key = _.findKey(obj, predicate, context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"underscore-js-源码分析（一）\"><a href=\"#underscore-js-源码分析（一）\" class=\"headerlink\" title=\"underscore.js 源码分析（一）\"></a>underscore.js 源码分析（一）</h4><p><code>_.each</code>  <code>_.map</code>  <code>_.refuce</code> <code>_.reduceRight</code>  <code>_.find</code></p>\n<h4 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a><code>_.each</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.each(list, iteratee, [context])</code></p>\n<p>这个方法用于循环遍历, 用于循环 <code>list</code> 对象或者数组， <code>iteratee</code> 是一个遍历函数，接收的参数为遍历之后的结果。  </p>\n<p>当 <code>list</code> 为数组的时候，传递给 <code>iteratee</code> 函数的参数是  <code>(element, index, list)</code>, 当 <code>list</code> 为对象的时候, 传递给 <code>iteratee</code> 函数的参数是 <code>[value, key, list]</code>。</p>\n<p>对于 <code>context</code> 上下文, 这个决定的是 <code>iteratee</code> 中的 <code>this</code> 的指向值。可选参数， 当 <code>context</code> 忽略的时候 <code>this</code> 指向的是全局变量。</p>\n<p><code>_.each</code> 返回值是进行遍历的 <code>list</code> 数组对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function print(value, index, list) &#123;</span><br><span class=\"line\">  console.log(this.name);// 这里 this 指向了后面传递的 context</span><br><span class=\"line\">  console.log(value, index, list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let person = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]</span><br><span class=\"line\">// 最终打印</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">1 0 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">2 1 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">3 2 (3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>在 <code>underscore.js</code> 源码中， <code>_.each()</code> 源码为下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each = _.forEach = function(obj, iteratee, context) &#123;</span><br><span class=\"line\">   // 如果 obj == null 返回 null</span><br><span class=\"line\">   if (obj == null) return obj;</span><br><span class=\"line\">   // 调用 optimiseCb 函数 稍后分析</span><br><span class=\"line\">   iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\">   var i, length = obj.length;</span><br><span class=\"line\">   // 这里提供了分别 数组和对象的一种方法</span><br><span class=\"line\">   // 如果数组</span><br><span class=\"line\">   if (length === +length) &#123;</span><br><span class=\"line\">   // 数组情况下， 将 [value, index, list] 传入遍历函数</span><br><span class=\"line\">     for (i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[i], i, obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">   // 获取到对象所有的 key 值</span><br><span class=\"line\">     var keys = _.keys(obj);</span><br><span class=\"line\">     for (i = 0, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 返回数组或者对象</span><br><span class=\"line\">   return obj;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>分别数组和对象的方法</p>\n<p>我平常的时候使用 <code>Object.prootype.toString.call().slice(8, -1)</code> 这种方法来分别数组和纯对象，这里使用了一种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (length === +length) &#123;</span><br><span class=\"line\">// 这是数组</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// 这是对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>+length</code> 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 <code>+</code> 进行类型转换的可能性如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"literal\">null</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+flase <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"string\">\"\"</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+对象 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+非空字符串 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"literal\">NaN</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+<span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 <code>+length</code> 会被转化为 <code>NaN</code>。</p>\n</li>\n<li><p><code>iteratee = optimizeCb(iteratee, context);</code></p>\n<p><code>optimizaCb</code> 函数</p>\n<p>使用 <code>optimizaCb</code> 函数用于绑定上下文: 使用 <code>call</code> 以及 <code>apply</code> 的方法实现的改变函数运行的 <code>this</code> 值的改变</p>\n<p>接收三个参数: <code>func</code> 运行的函数  <code>context</code> 运行函数需要进行绑定的上下文  <code>argCount</code> 参数的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optimizeCb = function(func, context, argCount) &#123;</span><br><span class=\"line\">    // 使用 void 0 类似于使用 undefined</span><br><span class=\"line\">    // 等同于使用 if(context === undefined)</span><br><span class=\"line\">    if (context === void 0) return func;</span><br><span class=\"line\">    switch (argCount == null ? 3 : argCount) &#123;</span><br><span class=\"line\">      case 1: return function(value) &#123;</span><br><span class=\"line\">        return func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 2: return function(value, other) &#123;</span><br><span class=\"line\">        return func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 3: return function(value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 4: return function(accumulator, value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return func.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>_.each</code> 源码中的使用这个函数的目的是将 <code>iteratee</code> 的上下文 <code>this</code> 绑定到 <code>context</code> 对象。</p>\n<blockquote>\n<p>这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 <code>undefined</code> 的原因在于： 在 <code>javascript</code> 中 <code>undefined</code> 不是一个保留字。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;var undefined = 1;</span><br><span class=\"line\">&gt;console.log(undefined); // 1  也是可以的</span><br><span class=\"line\">&gt;使用 void 0 作用是这样的</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.map(list, iteratee, [context])</code></p>\n<p>通过 使用变换函数 <code>iteratee</code> 将<code>list</code> 中的值映射到一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function filter(value) &#123;</span><br><span class=\"line\">  return value * 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.map([1, 2, 3], filter); // [2, 4, 6]</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 &amp;&amp; 操作符， 只有当第一个为true的时候才执行下一步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">      <span class=\"comment\">// || 操作符 第一个为true的时候不再进行下一步动作</span></span><br><span class=\"line\">      length = (keys || obj).length,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 Array 创建一个 length 长度的数组</span></span><br><span class=\"line\">      results = <span class=\"built_in\">Array</span>(length),</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">    results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><ol>\n<li><p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 进行计算</p>\n<p>这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。</p>\n<blockquote>\n<p>这里对于类型转换，使用的时候要注意出现假值的情况</p>\n</blockquote>\n<p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 会首先对于 <em> 第一个</em>  操作数进行计算，根据判断结果来决定返回哪一个操作数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a || b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b</span><br><span class=\"line\">a &amp;&amp; b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 b 否则返回 a</span><br></pre></td></tr></table></figure>\n<p>上面我们可以看到，我们可以利用这两个操作符做一些事情:</p>\n<p><code>a || b</code> 好像备用条件。 如果条件 <code>a</code> 不成立, 执行条件 b, 如果成立，执行条件 <code>a</code>  <code>a ? a : b</code></p>\n<p><code>a &amp;&amp; b</code> 好像通过条件， 如果 <code>a</code> 成立，向下执行，如果不成立，打住，返回 <code>a</code> 执行的结果 <code>a ? b : a</code>  </p>\n</li>\n<li><p>使用 <code>Array(length)</code> 创建的是一个 <code>length</code> 长度的数组。</p>\n</li>\n</ol>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduce(list, iteratee, [memo], context)</code></p>\n<p>通过迭代将 <code>list</code> 中的元素归结为一个值。 <code>memo</code> 表示初始参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reduceFn(memo, num) &#123;</span><br><span class=\"line\">  return memo * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">_.reduce(list, reduceFn, 1) // 6</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduce</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">\titeratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(),</span><br><span class=\"line\">\t\tlength = (keys || obj).length,</span><br><span class=\"line\">\t\tindex = <span class=\"number\">0</span>, currentIndex;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\tmemo = obj[keys ? keys[index++] : index++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentIndex = keys ? keys[index] : index;</span><br><span class=\"line\">\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>在 <code>obj</code> 可能是对象或者数组的情况下，当 <code>obj</code> 是对象的时候，需要产生了一个 使用 <code>keys</code> 来进行数组操作</p>\n</li>\n<li><p>在迭代的时候， 当没有 <code>memo</code> 初始值的时候， 将数组或者对象的第一个值作为 <code>memo</code> 这里，使用 <code>index++</code> 来处理的</p>\n<blockquote>\n<p>使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;let currentIndex = 0;</span><br><span class=\"line\">&gt;let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作</span><br><span class=\"line\">&gt;addIndex // 0</span><br><span class=\"line\">&gt;currentIndex // 1</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>迭代的过程发生在使用循环赋值的过程中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">  memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduceRight(list, iteratee, [memo], context)</code></p>\n<p>类似于使用<code>_.reduce</code> 不过不同于使用 <code>_.reduce</code> 的是，这个是从右边向左进行遍历操作;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contact</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.contact(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]];</span><br><span class=\"line\">_.reduceRight(list, contact) <span class=\"comment\">// [5, 6, 3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reduceRight = _.foldr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== + obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        index = (keys || obj).length,</span><br><span class=\"line\">        currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先对于 index 进行 减一操作</span></span><br><span class=\"line\">      memo = obj[keys ? keys[--index] : --index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在判断完成 index 之后进行减一操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 <code>while</code> 循环进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (index-- &gt; 0) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.find(list, predicate, [context])</code></p>\n<p>遍历  <code>list</code> 值   返回第一个通过 <code>predicate</code> 函数返回真值的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">function getodd(value) &#123;</span><br><span class=\"line\">  return value % 2 === 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_find(list, getodd) // 2</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 findIndex 找到数组的值</span></span><br><span class=\"line\">     key = _.findIndex(obj, predicate, context);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是是对象</span></span><br><span class=\"line\">     key = _.findKey(obj, predicate, context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(七)","date":"2017-11-28T15:11:29.000Z","_content":"\n### underscore.js 源码分析（七）\n\n`flatten` `without` `union`  `intersection`  `uniq`\n\n#### `flatten`\n\n##### 实例\n\n使用 `flatten` 用来将多层嵌套的数组转化为一层，例如:\n\n```javascript\nlist = [1, [3, 4]];\n_.flatten(list) // [1, 3, 4]\n```\n\n##### 源码分析\n\n```javascript\n_.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n```\n\n其中 `flatten` 函数如下:\n\n```javascript\n/*\n*@description 用于将数组脱离嵌套\n*@params input 传入的数组\n*@params shallow {Boolean} 是否需要减少嵌套\n**/\nvar flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0, value;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      value = input[i];\n      // 这里使用了运算符嵌套表达式\n      // value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象\n      if (value && value.length >= 0 && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        // use recursion to get the value\n        // use if to decide isRecursion\n        // 这里使用 if 来决定是否需要进行递归\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        // 看这种优雅的写法\n        while (j < len) {\n          // 将取到的值依次填入\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n```\n\n#### `without ` \n\n##### 实例\n\n`_.without(array, values)`\n\n使用 `_.without` 用来所有 `values` 值后的 `array` 副本。\n\n使用:\n\n```javascript\n_.without([1, 2, 3], 1)\n=> [2, 3]\n```\n\n##### 源码分析\n\n自己写的函数:\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n    let value = Array.prototype.slice.call(arguments, 1);\n    array.filter((item) => {\n      return ~values.indexOf(item);\n    });\n  } else {\n    return [];\n  }\n}\n```\n\n上面的函数中存在错误: 结果或返回 `undefined`\n\n原因: 使用 `filter`方法中的 `return ` 只会跳出 `filter` 循环，不会跳出最终的函数循环。 `低级错误`\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n\tlet value = Array.prototype.slice.call(arguments, 1);\n\t// 使用 filter 进行的筛选效果选出的是符合效果的值\n    let newArray = array.filter((item) => {\n      return value.indexOf(item) === -1;\n\t});\n\treturn newArray;\n  } else {\n    return [];\n  }\n}\n```\n\n使用源码分析如下:\n\n```javascript\n_.without = function(array) {\n  // 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);\n  // array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数\n    return _.difference(array, slice.call(arguments, 1));\n  };\n```\n\n这里调用了 `_.difference` 的方法实现。\n\n使用 `_.difference` 实现的函数代码如下:\n\n```javascript\n_.difference = function(array) {\n    // 获得到的 rest 函数\n    // 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1\n    // 表示获取到传入的 arguments 的第二个参数\n    var rest = flatten(arguments, true, true, 1);\n    // 对于数组使用 filter 的方法\n   // !_.contains 对于每一个数组进行遍历处理\n  // 返回 rest 中没有包含 value 的值\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n#### `union`\n\n##### 实例\n\n`_.union(*arrays)`\n\n使用 `union` 用于返回传入的 `arrays` 的并集。按照顺序返回，可以传入一个或者多个的 `arrays` 数组。\n\n##### 源码分析\n\n```javascript\n_.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n}\n```\n\n 其中 `_.uniq` 函数如下:\n\n```javascript\n_.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    // 如果 isSorted isBoolean\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    // 如果 iteratee 不是null\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n      // 获取到返回的结果\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        // 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中\n        if (!i || seen !== computed) result.push(value);\n        // 将computed 结果赋给 seen\n        seen = computed;\n        // 如果 iteratee 函数存在的话并且没有被排序\n      } else if (iteratee) {\n        // 如果seen 中没有包含有 computed 结果\n        if (!_.contains(seen, computed)) {\n          // 将computed 结果推入到 seen 中\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n```\n\n#### `intersection`\n\n`_.intersection(arrays)`\n\n##### 实例\n\n使用 `_.intersection` 用来返回传入多个数组的并集。\n\n```javascript\n_.intersection([1, 2, 3], [1, 2, 4], [10, 1, 2, 6]) // [1, 2]\n```\n\n返回传入的多个数组的并集。\n\n##### 源码分析\n\n```javascript\n_.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      // 使用 continue 是结束本次循环\n      // 用于判断传入的数组中是否有包含的相同的元素\n      if (_.contains(result, item)) continue;\n      // 使用 break 是结束整个循环\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      // 当上次循环结束之后 j === argsLength 成立\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n```\n\n基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个`result`数组，最后将这个 `result` 数组返回。\n\n要点:\n\n1.  两次循环, 使用结束循环的方式是不一样的。\n\n   >使用 `break` 的时候， 结束的是整个循环\n   >\n   >使用 `continue` 的时候, 结束的是当前的循环\n\n2. 关于 `contain` 函数\n\n   使用 `contain` 用来判断在一个数组中是否包含有某一个元素:\n\n   在 `es6` 中使用 `Array.includes(item)` 来判断 `item` 是否包含在 `Array` 之中。\n\n#### `difference`\n\n##### 实例\n\n`_.difference(array, *others)` \n\n使用 `difference` 获取到来自于 `array` 但是不存在于 `others` 中的数组元素。\n\n##### 源码分析\n\n自己写的代码:\n\n```javascript\nfunction difference(array, other) {\n\tlet rest = Array.prototype.slice.call(arguments, 1);\n\tlet newArr = array.filter((item) => {\n\t\treturn other.indexOf(item) === -1;\n\t});\n\treturn newArr;\n}\n```\n\n源码如下:\n\n```javascript\n_.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n","source":"_posts/underscore-js源码分析-七.md","raw":"---\ntitle: underscore.js源码分析(七)\ndate: 2017-11-28 23:11:29\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析（七）\n\n`flatten` `without` `union`  `intersection`  `uniq`\n\n#### `flatten`\n\n##### 实例\n\n使用 `flatten` 用来将多层嵌套的数组转化为一层，例如:\n\n```javascript\nlist = [1, [3, 4]];\n_.flatten(list) // [1, 3, 4]\n```\n\n##### 源码分析\n\n```javascript\n_.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n```\n\n其中 `flatten` 函数如下:\n\n```javascript\n/*\n*@description 用于将数组脱离嵌套\n*@params input 传入的数组\n*@params shallow {Boolean} 是否需要减少嵌套\n**/\nvar flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0, value;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      value = input[i];\n      // 这里使用了运算符嵌套表达式\n      // value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象\n      if (value && value.length >= 0 && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        // use recursion to get the value\n        // use if to decide isRecursion\n        // 这里使用 if 来决定是否需要进行递归\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        // 看这种优雅的写法\n        while (j < len) {\n          // 将取到的值依次填入\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n```\n\n#### `without ` \n\n##### 实例\n\n`_.without(array, values)`\n\n使用 `_.without` 用来所有 `values` 值后的 `array` 副本。\n\n使用:\n\n```javascript\n_.without([1, 2, 3], 1)\n=> [2, 3]\n```\n\n##### 源码分析\n\n自己写的函数:\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n    let value = Array.prototype.slice.call(arguments, 1);\n    array.filter((item) => {\n      return ~values.indexOf(item);\n    });\n  } else {\n    return [];\n  }\n}\n```\n\n上面的函数中存在错误: 结果或返回 `undefined`\n\n原因: 使用 `filter`方法中的 `return ` 只会跳出 `filter` 循环，不会跳出最终的函数循环。 `低级错误`\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n\tlet value = Array.prototype.slice.call(arguments, 1);\n\t// 使用 filter 进行的筛选效果选出的是符合效果的值\n    let newArray = array.filter((item) => {\n      return value.indexOf(item) === -1;\n\t});\n\treturn newArray;\n  } else {\n    return [];\n  }\n}\n```\n\n使用源码分析如下:\n\n```javascript\n_.without = function(array) {\n  // 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);\n  // array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数\n    return _.difference(array, slice.call(arguments, 1));\n  };\n```\n\n这里调用了 `_.difference` 的方法实现。\n\n使用 `_.difference` 实现的函数代码如下:\n\n```javascript\n_.difference = function(array) {\n    // 获得到的 rest 函数\n    // 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1\n    // 表示获取到传入的 arguments 的第二个参数\n    var rest = flatten(arguments, true, true, 1);\n    // 对于数组使用 filter 的方法\n   // !_.contains 对于每一个数组进行遍历处理\n  // 返回 rest 中没有包含 value 的值\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n#### `union`\n\n##### 实例\n\n`_.union(*arrays)`\n\n使用 `union` 用于返回传入的 `arrays` 的并集。按照顺序返回，可以传入一个或者多个的 `arrays` 数组。\n\n##### 源码分析\n\n```javascript\n_.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n}\n```\n\n 其中 `_.uniq` 函数如下:\n\n```javascript\n_.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    // 如果 isSorted isBoolean\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    // 如果 iteratee 不是null\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n      // 获取到返回的结果\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        // 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中\n        if (!i || seen !== computed) result.push(value);\n        // 将computed 结果赋给 seen\n        seen = computed;\n        // 如果 iteratee 函数存在的话并且没有被排序\n      } else if (iteratee) {\n        // 如果seen 中没有包含有 computed 结果\n        if (!_.contains(seen, computed)) {\n          // 将computed 结果推入到 seen 中\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n```\n\n#### `intersection`\n\n`_.intersection(arrays)`\n\n##### 实例\n\n使用 `_.intersection` 用来返回传入多个数组的并集。\n\n```javascript\n_.intersection([1, 2, 3], [1, 2, 4], [10, 1, 2, 6]) // [1, 2]\n```\n\n返回传入的多个数组的并集。\n\n##### 源码分析\n\n```javascript\n_.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      // 使用 continue 是结束本次循环\n      // 用于判断传入的数组中是否有包含的相同的元素\n      if (_.contains(result, item)) continue;\n      // 使用 break 是结束整个循环\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      // 当上次循环结束之后 j === argsLength 成立\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n```\n\n基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个`result`数组，最后将这个 `result` 数组返回。\n\n要点:\n\n1.  两次循环, 使用结束循环的方式是不一样的。\n\n   >使用 `break` 的时候， 结束的是整个循环\n   >\n   >使用 `continue` 的时候, 结束的是当前的循环\n\n2. 关于 `contain` 函数\n\n   使用 `contain` 用来判断在一个数组中是否包含有某一个元素:\n\n   在 `es6` 中使用 `Array.includes(item)` 来判断 `item` 是否包含在 `Array` 之中。\n\n#### `difference`\n\n##### 实例\n\n`_.difference(array, *others)` \n\n使用 `difference` 获取到来自于 `array` 但是不存在于 `others` 中的数组元素。\n\n##### 源码分析\n\n自己写的代码:\n\n```javascript\nfunction difference(array, other) {\n\tlet rest = Array.prototype.slice.call(arguments, 1);\n\tlet newArr = array.filter((item) => {\n\t\treturn other.indexOf(item) === -1;\n\t});\n\treturn newArr;\n}\n```\n\n源码如下:\n\n```javascript\n_.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n","slug":"underscore-js源码分析-七","published":1,"updated":"2020-09-14T06:36:25.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7t003ei2osb1wts23b","content":"<h3 id=\"underscore-js-源码分析（七）\"><a href=\"#underscore-js-源码分析（七）\" class=\"headerlink\" title=\"underscore.js 源码分析（七）\"></a>underscore.js 源码分析（七）</h3><p><code>flatten</code> <code>without</code> <code>union</code>  <code>intersection</code>  <code>uniq</code></p>\n<h4 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"flatten\"></a><code>flatten</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>flatten</code> 用来将多层嵌套的数组转化为一层，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\">_.flatten(list) <span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>flatten</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@description 用于将数组脱离嵌套</span></span><br><span class=\"line\"><span class=\"comment\">*@params input 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">*@params shallow &#123;Boolean&#125; 是否需要减少嵌套</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = input &amp;&amp; input.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 这里使用了运算符嵌套表达式</span></span><br><span class=\"line\">      <span class=\"comment\">// value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; value.length &gt;= <span class=\"number\">0</span> &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></span><br><span class=\"line\">        <span class=\"comment\">// use recursion to get the value</span></span><br><span class=\"line\">        <span class=\"comment\">// use if to decide isRecursion</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 if 来决定是否需要进行递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\">        output.length += len;</span><br><span class=\"line\">        <span class=\"comment\">// 看这种优雅的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将取到的值依次填入</span></span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"without\"></a><code>without</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.without(array, values)</code></p>\n<p>使用 <code>_.without</code> 用来所有 <code>values</code> 值后的 <code>array</code> 副本。</p>\n<p>使用:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>)</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ~values.indexOf(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数中存在错误: 结果或返回 <code>undefined</code></p>\n<p>原因: 使用 <code>filter</code>方法中的 <code>return</code> 只会跳出 <code>filter</code> 循环，不会跳出最终的函数循环。 <code>低级错误</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 filter 进行的筛选效果选出的是符合效果的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArray = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);</span></span><br><span class=\"line\">  <span class=\"comment\">// array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 <code>_.difference</code> 的方法实现。</p>\n<p>使用 <code>_.difference</code> 实现的函数代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得到的 rest 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示获取到传入的 arguments 的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对于数组使用 filter 的方法</span></span><br><span class=\"line\">   <span class=\"comment\">// !_.contains 对于每一个数组进行遍历处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回 rest 中没有包含 value 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"union\"></a><code>union</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.union(*arrays)</code></p>\n<p>使用 <code>union</code> 用于返回传入的 <code>arrays</code> 的并集。按照顺序返回，可以传入一个或者多个的 <code>arrays</code> 数组。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>_.uniq</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted isBoolean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 iteratee 不是null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seen = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">      <span class=\"comment\">// 获取到返回的结果</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</span><br><span class=\"line\">        <span class=\"comment\">// 将computed 结果赋给 seen</span></span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 iteratee 函数存在的话并且没有被排序</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果seen 中没有包含有 computed 结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将computed 结果推入到 seen 中</span></span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">          result.push(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"intersection\"></a><code>intersection</code></h4><p><code>_.intersection(arrays)</code></p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.intersection</code> 用来返回传入多个数组的并集。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>返回传入的多个数组的并集。</p>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</span><br><span class=\"line\">      <span class=\"comment\">// 使用 continue 是结束本次循环</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于判断传入的数组中是否有包含的相同的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 break 是结束整个循环</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当上次循环结束之后 j === argsLength 成立</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个<code>result</code>数组，最后将这个 <code>result</code> 数组返回。</p>\n<p>要点:</p>\n<ol>\n<li><p>两次循环, 使用结束循环的方式是不一样的。</p>\n<blockquote>\n<p>使用 <code>break</code> 的时候， 结束的是整个循环</p>\n<p>使用 <code>continue</code> 的时候, 结束的是当前的循环</p>\n</blockquote>\n</li>\n<li><p>关于 <code>contain</code> 函数</p>\n<p>使用 <code>contain</code> 用来判断在一个数组中是否包含有某一个元素:</p>\n<p>在 <code>es6</code> 中使用 <code>Array.includes(item)</code> 来判断 <code>item</code> 是否包含在 <code>Array</code> 之中。</p>\n</li>\n</ol>\n<h4 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"difference\"></a><code>difference</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.difference(array, *others)</code> </p>\n<p>使用 <code>difference</code> 获取到来自于 <code>array</code> 但是不存在于 <code>others</code> 中的数组元素。</p>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">difference</span>(<span class=\"params\">array, other</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rest = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newArr = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析（七）\"><a href=\"#underscore-js-源码分析（七）\" class=\"headerlink\" title=\"underscore.js 源码分析（七）\"></a>underscore.js 源码分析（七）</h3><p><code>flatten</code> <code>without</code> <code>union</code>  <code>intersection</code>  <code>uniq</code></p>\n<h4 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"flatten\"></a><code>flatten</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>flatten</code> 用来将多层嵌套的数组转化为一层，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\">_.flatten(list) <span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>flatten</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@description 用于将数组脱离嵌套</span></span><br><span class=\"line\"><span class=\"comment\">*@params input 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">*@params shallow &#123;Boolean&#125; 是否需要减少嵌套</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = input &amp;&amp; input.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 这里使用了运算符嵌套表达式</span></span><br><span class=\"line\">      <span class=\"comment\">// value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; value.length &gt;= <span class=\"number\">0</span> &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></span><br><span class=\"line\">        <span class=\"comment\">// use recursion to get the value</span></span><br><span class=\"line\">        <span class=\"comment\">// use if to decide isRecursion</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 if 来决定是否需要进行递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\">        output.length += len;</span><br><span class=\"line\">        <span class=\"comment\">// 看这种优雅的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将取到的值依次填入</span></span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"without\"></a><code>without</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.without(array, values)</code></p>\n<p>使用 <code>_.without</code> 用来所有 <code>values</code> 值后的 <code>array</code> 副本。</p>\n<p>使用:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>)</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ~values.indexOf(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数中存在错误: 结果或返回 <code>undefined</code></p>\n<p>原因: 使用 <code>filter</code>方法中的 <code>return</code> 只会跳出 <code>filter</code> 循环，不会跳出最终的函数循环。 <code>低级错误</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 filter 进行的筛选效果选出的是符合效果的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArray = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);</span></span><br><span class=\"line\">  <span class=\"comment\">// array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 <code>_.difference</code> 的方法实现。</p>\n<p>使用 <code>_.difference</code> 实现的函数代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得到的 rest 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示获取到传入的 arguments 的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对于数组使用 filter 的方法</span></span><br><span class=\"line\">   <span class=\"comment\">// !_.contains 对于每一个数组进行遍历处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回 rest 中没有包含 value 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"union\"></a><code>union</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.union(*arrays)</code></p>\n<p>使用 <code>union</code> 用于返回传入的 <code>arrays</code> 的并集。按照顺序返回，可以传入一个或者多个的 <code>arrays</code> 数组。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>_.uniq</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted isBoolean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 iteratee 不是null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seen = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">      <span class=\"comment\">// 获取到返回的结果</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</span><br><span class=\"line\">        <span class=\"comment\">// 将computed 结果赋给 seen</span></span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 iteratee 函数存在的话并且没有被排序</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果seen 中没有包含有 computed 结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将computed 结果推入到 seen 中</span></span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">          result.push(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"intersection\"></a><code>intersection</code></h4><p><code>_.intersection(arrays)</code></p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.intersection</code> 用来返回传入多个数组的并集。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>返回传入的多个数组的并集。</p>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</span><br><span class=\"line\">      <span class=\"comment\">// 使用 continue 是结束本次循环</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于判断传入的数组中是否有包含的相同的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 break 是结束整个循环</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当上次循环结束之后 j === argsLength 成立</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个<code>result</code>数组，最后将这个 <code>result</code> 数组返回。</p>\n<p>要点:</p>\n<ol>\n<li><p>两次循环, 使用结束循环的方式是不一样的。</p>\n<blockquote>\n<p>使用 <code>break</code> 的时候， 结束的是整个循环</p>\n<p>使用 <code>continue</code> 的时候, 结束的是当前的循环</p>\n</blockquote>\n</li>\n<li><p>关于 <code>contain</code> 函数</p>\n<p>使用 <code>contain</code> 用来判断在一个数组中是否包含有某一个元素:</p>\n<p>在 <code>es6</code> 中使用 <code>Array.includes(item)</code> 来判断 <code>item</code> 是否包含在 <code>Array</code> 之中。</p>\n</li>\n</ol>\n<h4 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"difference\"></a><code>difference</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.difference(array, *others)</code> </p>\n<p>使用 <code>difference</code> 获取到来自于 <code>array</code> 但是不存在于 <code>others</code> 中的数组元素。</p>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">difference</span>(<span class=\"params\">array, other</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rest = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newArr = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十)","date":"2017-12-05T02:39:50.000Z","_content":"\n### underscore.js 源码分析（十）\n\n使用underscore.js 的 function 部分\n\n`bind`  `bindall`  `partial`  `memorize`  `delay`\n\n#####  `bind`\n\n`_.bind(func, obj, *arguments)`\n\n使用 `bind`\n\n使用 `bind` 的目的是将函数 `func` 绑定到 `obj` 上面去，也就是说，这时候 `func` 中的 `this` 就指向了 `obj`, 其中 `arguments` 被作为传递给 `func` 的参数被传入到 `func` 之中。\n\n#####　实例如下\n\n```javascript\nfunction greet(home) {\n  console.log(`hi my name is ${this.name}, my home is ${home}`);\n}\n// 使用 _.bind 进行函数绑定\n_.bind(greet, {name: '张宁宁'}, '山东');\n// hi my name is 张宁宁, my home is 山东\n```\n\n***\n\n关于使用 `bind` 的函数:\n\n使用 `bind` 的函数\n\n使用 `bind` 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。\n\n***\n\n\n\n源码如下:\n\n```javascript\n_.bind = function(func, context) {\n  // 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操\n  // nativeBind.appy\n  // 对于 es5 支持的 bind 方法接收两个参数\n  // func 以及 参数\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n  // 如果 func 不是一个函数的时候\n  // throw new TypeError('bind must be called on a function');\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n  // 使用 slice.call 用于截取 arguments\n  // 通过使用 slice.call 方法截取传入函数的参数\n    var args = slice.call(arguments, 2);\n    var bound =  function () {\n      // 返回一个 executeBpund 函数\n      // 使用 args 数组的 concat 方法用于连接数组\n      // 分别传入的值是 func, bound, context, this, args\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n```\n\n其中 `executeBound` 函数如下:\n\n```javascript\n// 这里面 boundFunc 是需要进行绑定的函数 \nvar executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n   // 如果 boundFunc 不在 callingContext 的原型链上\n  // 使用 apply 方法进行绑定\n  // 如果 callingContext 不在 boundFunc 的原型链上\n  // 这里的 callingContext 是指的 this 值\n  // 返回将 context 绑定到 sourceFunc 上面\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n   // 关于 baseCreate 函数\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n```\n\n关于 `baseCreate` 函数如下:\n\n```javascript\nlet Ctor = function () {};\nlet baseCreate = function(prototype) {\n  // 判断 prototype 是否是一个对象\n  if (!_.isObjject(prototype)) return {};\n  // 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数\n  if (nativeCreate) return nativeCreate(protoytpe);\n  Ctor.prototype = prototype;\n  // 创建一个函数的实例，这个函数的原型指向 prototype\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n} \n```\n\n上面的 `nativeCreate` 返回的是这个 `Object.create()` \n\n使用 `Object.create` 用来实现继承的关系\n\n```javascript\n// 使用 new 操作符的过程\nlet obj = new Constructor();\n// 创建一个新的对象\nlet obj = {};\n// 执行原型链接\nobj._proto_ = Constructor.prototype;\n// 将这个构造函数的 this 值指向新创建的这个新对象\nConstructor.call(obj);\n// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了\n```\n\n##### `partial`\n\n`partial(function, *arguments)`\n\n局部应用一个函数填充在任意个数的 `arguments`。\n\n##### 实例\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\nlet particalAdd = _.partial(add, 3);\nparticalAdd(5); // 8\n// 这里的 5 填充了函数的第二个参数 b\n```\n\n自己写的函数:\n\n```javascript\nfunction partial(fn) {\n  // 获取到传入到 partial 函数中的参数\n  let partialArgs = Array.prototype.slice.call(arguments, 1);\n  // return 返回一个函数\n  return function(args) {\n    let fnArgs = Array.prototype.slice.call(arguments, 0);\n    // 将参数传入，执行 fn\n    fn(...partialArgs, ...fnArgs);\n  }\n}\n```\n\n\n\n##### 源码分析\n\n```javascript\n_.partial = function(func) {\n  let boundArgs = slice.call(arguments, 1);\n  return function bound () {\n    let position = 0;\n    let args = boundArgs.slice();\n    let length = args.length;\n    for (let i = 0; i < length; i++) {\n      // 在数组中使用 position ++\n      if (args[i] === _) args[i] = arguments[position++]; \n    }\n    whitle(position < arguments.length) args.push(arguments[position++]);\n    // 这时候的 args 中是包含了所有的参数\n    return executeBound(func, bound, this, this, args);\n  }\n}\n```\n\n关于 `executeBound` 函数上面有解释，这个函数的作用是:\n\n> Determines whether to execute a function as a constructor,   or a normal function with the provided arguments\n>\n> 决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。\n\n`memoize`\n\n使用 `memorize` 用来缓存函数计算的结果。\n\n`delay`\n\n使用 `delay` 用来实现对于函数延迟执行，代码如下:\n\n```javascript\nfunction delay(func, wait) {\n  // 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数\n  let args = Array.prototype.slice.call(arguments, 2);\n  // 返回等待 wait 时间之后的函数\n  return setTimeout(() => {\n    // 自己写的\n    func(args);\n    // 源码写的\n    // 使用 apply 的方法向函数 func 中传递 args 参数\n    return func.apply(null, args);\n  }, wait)\n}\n```\n\n`defer`\n\n`defer(function, *arguments)`\n\n使用 `defer` 的目的在于延迟调用 `function` 直到当前的调用栈被清空为止，其中 `arguments` 会被作为 `function` 的参数进行传入。\n\n类似于使用 `setTimeout(function () {}, 0)` 的延迟调用效果。\n\n实现的源码如下:\n\n```javascript\n_.defer = _.partial(_.delay, _, 1);\n```\n\n","source":"_posts/underscore-js源码分析-十.md","raw":"---\ntitle: underscore.js源码分析(十)\ndate: 2017-12-05 10:39:50\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析（十）\n\n使用underscore.js 的 function 部分\n\n`bind`  `bindall`  `partial`  `memorize`  `delay`\n\n#####  `bind`\n\n`_.bind(func, obj, *arguments)`\n\n使用 `bind`\n\n使用 `bind` 的目的是将函数 `func` 绑定到 `obj` 上面去，也就是说，这时候 `func` 中的 `this` 就指向了 `obj`, 其中 `arguments` 被作为传递给 `func` 的参数被传入到 `func` 之中。\n\n#####　实例如下\n\n```javascript\nfunction greet(home) {\n  console.log(`hi my name is ${this.name}, my home is ${home}`);\n}\n// 使用 _.bind 进行函数绑定\n_.bind(greet, {name: '张宁宁'}, '山东');\n// hi my name is 张宁宁, my home is 山东\n```\n\n***\n\n关于使用 `bind` 的函数:\n\n使用 `bind` 的函数\n\n使用 `bind` 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。\n\n***\n\n\n\n源码如下:\n\n```javascript\n_.bind = function(func, context) {\n  // 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操\n  // nativeBind.appy\n  // 对于 es5 支持的 bind 方法接收两个参数\n  // func 以及 参数\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n  // 如果 func 不是一个函数的时候\n  // throw new TypeError('bind must be called on a function');\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n  // 使用 slice.call 用于截取 arguments\n  // 通过使用 slice.call 方法截取传入函数的参数\n    var args = slice.call(arguments, 2);\n    var bound =  function () {\n      // 返回一个 executeBpund 函数\n      // 使用 args 数组的 concat 方法用于连接数组\n      // 分别传入的值是 func, bound, context, this, args\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n```\n\n其中 `executeBound` 函数如下:\n\n```javascript\n// 这里面 boundFunc 是需要进行绑定的函数 \nvar executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n   // 如果 boundFunc 不在 callingContext 的原型链上\n  // 使用 apply 方法进行绑定\n  // 如果 callingContext 不在 boundFunc 的原型链上\n  // 这里的 callingContext 是指的 this 值\n  // 返回将 context 绑定到 sourceFunc 上面\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n   // 关于 baseCreate 函数\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n```\n\n关于 `baseCreate` 函数如下:\n\n```javascript\nlet Ctor = function () {};\nlet baseCreate = function(prototype) {\n  // 判断 prototype 是否是一个对象\n  if (!_.isObjject(prototype)) return {};\n  // 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数\n  if (nativeCreate) return nativeCreate(protoytpe);\n  Ctor.prototype = prototype;\n  // 创建一个函数的实例，这个函数的原型指向 prototype\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n} \n```\n\n上面的 `nativeCreate` 返回的是这个 `Object.create()` \n\n使用 `Object.create` 用来实现继承的关系\n\n```javascript\n// 使用 new 操作符的过程\nlet obj = new Constructor();\n// 创建一个新的对象\nlet obj = {};\n// 执行原型链接\nobj._proto_ = Constructor.prototype;\n// 将这个构造函数的 this 值指向新创建的这个新对象\nConstructor.call(obj);\n// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了\n```\n\n##### `partial`\n\n`partial(function, *arguments)`\n\n局部应用一个函数填充在任意个数的 `arguments`。\n\n##### 实例\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\nlet particalAdd = _.partial(add, 3);\nparticalAdd(5); // 8\n// 这里的 5 填充了函数的第二个参数 b\n```\n\n自己写的函数:\n\n```javascript\nfunction partial(fn) {\n  // 获取到传入到 partial 函数中的参数\n  let partialArgs = Array.prototype.slice.call(arguments, 1);\n  // return 返回一个函数\n  return function(args) {\n    let fnArgs = Array.prototype.slice.call(arguments, 0);\n    // 将参数传入，执行 fn\n    fn(...partialArgs, ...fnArgs);\n  }\n}\n```\n\n\n\n##### 源码分析\n\n```javascript\n_.partial = function(func) {\n  let boundArgs = slice.call(arguments, 1);\n  return function bound () {\n    let position = 0;\n    let args = boundArgs.slice();\n    let length = args.length;\n    for (let i = 0; i < length; i++) {\n      // 在数组中使用 position ++\n      if (args[i] === _) args[i] = arguments[position++]; \n    }\n    whitle(position < arguments.length) args.push(arguments[position++]);\n    // 这时候的 args 中是包含了所有的参数\n    return executeBound(func, bound, this, this, args);\n  }\n}\n```\n\n关于 `executeBound` 函数上面有解释，这个函数的作用是:\n\n> Determines whether to execute a function as a constructor,   or a normal function with the provided arguments\n>\n> 决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。\n\n`memoize`\n\n使用 `memorize` 用来缓存函数计算的结果。\n\n`delay`\n\n使用 `delay` 用来实现对于函数延迟执行，代码如下:\n\n```javascript\nfunction delay(func, wait) {\n  // 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数\n  let args = Array.prototype.slice.call(arguments, 2);\n  // 返回等待 wait 时间之后的函数\n  return setTimeout(() => {\n    // 自己写的\n    func(args);\n    // 源码写的\n    // 使用 apply 的方法向函数 func 中传递 args 参数\n    return func.apply(null, args);\n  }, wait)\n}\n```\n\n`defer`\n\n`defer(function, *arguments)`\n\n使用 `defer` 的目的在于延迟调用 `function` 直到当前的调用栈被清空为止，其中 `arguments` 会被作为 `function` 的参数进行传入。\n\n类似于使用 `setTimeout(function () {}, 0)` 的延迟调用效果。\n\n实现的源码如下:\n\n```javascript\n_.defer = _.partial(_.delay, _, 1);\n```\n\n","slug":"underscore-js源码分析-十","published":1,"updated":"2020-09-14T06:36:25.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7u003fi2osbwcvpcxl","content":"<h3 id=\"underscore-js-源码分析（十）\"><a href=\"#underscore-js-源码分析（十）\" class=\"headerlink\" title=\"underscore.js 源码分析（十）\"></a>underscore.js 源码分析（十）</h3><p>使用underscore.js 的 function 部分</p>\n<p><code>bind</code>  <code>bindall</code>  <code>partial</code>  <code>memorize</code>  <code>delay</code></p>\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a><code>bind</code></h5><p><code>_.bind(func, obj, *arguments)</code></p>\n<p>使用 <code>bind</code></p>\n<p>使用 <code>bind</code> 的目的是将函数 <code>func</code> 绑定到 <code>obj</code> 上面去，也就是说，这时候 <code>func</code> 中的 <code>this</code> 就指向了 <code>obj</code>, 其中 <code>arguments</code> 被作为传递给 <code>func</code> 的参数被传入到 <code>func</code> 之中。</p>\n<p>#####　实例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">home</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hi my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, my home is <span class=\"subst\">$&#123;home&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 _.bind 进行函数绑定</span></span><br><span class=\"line\">_.bind(greet, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>&#125;, <span class=\"string\">'山东'</span>);</span><br><span class=\"line\"><span class=\"comment\">// hi my name is 张宁宁, my home is 山东</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于使用 <code>bind</code> 的函数:</p>\n<p>使用 <code>bind</code> 的函数</p>\n<p>使用 <code>bind</code> 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。</p>\n<hr>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操</span></span><br><span class=\"line\">  <span class=\"comment\">// nativeBind.appy</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于 es5 支持的 bind 方法接收两个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// func 以及 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 如果 func 不是一个函数的时候</span></span><br><span class=\"line\">  <span class=\"comment\">// throw new TypeError('bind must be called on a function');</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 slice.call 用于截取 arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 slice.call 方法截取传入函数的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bound =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回一个 executeBpund 函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用 args 数组的 concat 方法用于连接数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 分别传入的值是 func, bound, context, this, args</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>executeBound</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里面 boundFunc 是需要进行绑定的函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果 boundFunc 不在 callingContext 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 apply 方法进行绑定</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 callingContext 不在 boundFunc 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里的 callingContext 是指的 this 值</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回将 context 绑定到 sourceFunc 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</span><br><span class=\"line\">   <span class=\"comment\">// 关于 baseCreate 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>baseCreate</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 prototype 是否是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObjject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(protoytpe);</span><br><span class=\"line\">  Ctor.prototype = prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个函数的实例，这个函数的原型指向 prototype</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">  Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>nativeCreate</code> 返回的是这个 <code>Object.create()</code> </p>\n<p>使用 <code>Object.create</code> 用来实现继承的关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 new 操作符的过程</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">// 创建一个新的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 执行原型链接</span></span><br><span class=\"line\">obj._proto_ = Constructor.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 将这个构造函数的 this 值指向新创建的这个新对象</span></span><br><span class=\"line\">Constructor.call(obj);</span><br><span class=\"line\"><span class=\"comment\">// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"partial\"><a href=\"#partial\" class=\"headerlink\" title=\"partial\"></a><code>partial</code></h5><p><code>partial(function, *arguments)</code></p>\n<p>局部应用一个函数填充在任意个数的 <code>arguments</code>。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> particalAdd = _.partial(add, <span class=\"number\">3</span>);</span><br><span class=\"line\">particalAdd(<span class=\"number\">5</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 5 填充了函数的第二个参数 b</span></span><br></pre></td></tr></table></figure>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入到 partial 函数中的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> partialArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// return 返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fnArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将参数传入，执行 fn</span></span><br><span class=\"line\">    fn(...partialArgs, ...fnArgs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = boundArgs.slice();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在数组中使用 position ++</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args[i] === _) args[i] = <span class=\"built_in\">arguments</span>[position++]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    whitle(position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</span><br><span class=\"line\">    <span class=\"comment\">// 这时候的 args 中是包含了所有的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>executeBound</code> 函数上面有解释，这个函数的作用是:</p>\n<blockquote>\n<p>Determines whether to execute a function as a constructor,   or a normal function with the provided arguments</p>\n<p>决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。</p>\n</blockquote>\n<p><code>memoize</code></p>\n<p>使用 <code>memorize</code> 用来缓存函数计算的结果。</p>\n<p><code>delay</code></p>\n<p>使用 <code>delay</code> 用来实现对于函数延迟执行，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回等待 wait 时间之后的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己写的</span></span><br><span class=\"line\">    func(args);</span><br><span class=\"line\">    <span class=\"comment\">// 源码写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 apply 的方法向函数 func 中传递 args 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>defer</code></p>\n<p><code>defer(function, *arguments)</code></p>\n<p>使用 <code>defer</code> 的目的在于延迟调用 <code>function</code> 直到当前的调用栈被清空为止，其中 <code>arguments</code> 会被作为 <code>function</code> 的参数进行传入。</p>\n<p>类似于使用 <code>setTimeout(function () {}, 0)</code> 的延迟调用效果。</p>\n<p>实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析（十）\"><a href=\"#underscore-js-源码分析（十）\" class=\"headerlink\" title=\"underscore.js 源码分析（十）\"></a>underscore.js 源码分析（十）</h3><p>使用underscore.js 的 function 部分</p>\n<p><code>bind</code>  <code>bindall</code>  <code>partial</code>  <code>memorize</code>  <code>delay</code></p>\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a><code>bind</code></h5><p><code>_.bind(func, obj, *arguments)</code></p>\n<p>使用 <code>bind</code></p>\n<p>使用 <code>bind</code> 的目的是将函数 <code>func</code> 绑定到 <code>obj</code> 上面去，也就是说，这时候 <code>func</code> 中的 <code>this</code> 就指向了 <code>obj</code>, 其中 <code>arguments</code> 被作为传递给 <code>func</code> 的参数被传入到 <code>func</code> 之中。</p>\n<p>#####　实例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">home</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hi my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, my home is <span class=\"subst\">$&#123;home&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 _.bind 进行函数绑定</span></span><br><span class=\"line\">_.bind(greet, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>&#125;, <span class=\"string\">'山东'</span>);</span><br><span class=\"line\"><span class=\"comment\">// hi my name is 张宁宁, my home is 山东</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于使用 <code>bind</code> 的函数:</p>\n<p>使用 <code>bind</code> 的函数</p>\n<p>使用 <code>bind</code> 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。</p>\n<hr>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操</span></span><br><span class=\"line\">  <span class=\"comment\">// nativeBind.appy</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于 es5 支持的 bind 方法接收两个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// func 以及 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 如果 func 不是一个函数的时候</span></span><br><span class=\"line\">  <span class=\"comment\">// throw new TypeError('bind must be called on a function');</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 slice.call 用于截取 arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 slice.call 方法截取传入函数的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bound =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回一个 executeBpund 函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用 args 数组的 concat 方法用于连接数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 分别传入的值是 func, bound, context, this, args</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>executeBound</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里面 boundFunc 是需要进行绑定的函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果 boundFunc 不在 callingContext 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 apply 方法进行绑定</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 callingContext 不在 boundFunc 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里的 callingContext 是指的 this 值</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回将 context 绑定到 sourceFunc 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</span><br><span class=\"line\">   <span class=\"comment\">// 关于 baseCreate 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>baseCreate</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 prototype 是否是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObjject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(protoytpe);</span><br><span class=\"line\">  Ctor.prototype = prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个函数的实例，这个函数的原型指向 prototype</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">  Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>nativeCreate</code> 返回的是这个 <code>Object.create()</code> </p>\n<p>使用 <code>Object.create</code> 用来实现继承的关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 new 操作符的过程</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">// 创建一个新的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 执行原型链接</span></span><br><span class=\"line\">obj._proto_ = Constructor.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 将这个构造函数的 this 值指向新创建的这个新对象</span></span><br><span class=\"line\">Constructor.call(obj);</span><br><span class=\"line\"><span class=\"comment\">// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"partial\"><a href=\"#partial\" class=\"headerlink\" title=\"partial\"></a><code>partial</code></h5><p><code>partial(function, *arguments)</code></p>\n<p>局部应用一个函数填充在任意个数的 <code>arguments</code>。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> particalAdd = _.partial(add, <span class=\"number\">3</span>);</span><br><span class=\"line\">particalAdd(<span class=\"number\">5</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 5 填充了函数的第二个参数 b</span></span><br></pre></td></tr></table></figure>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入到 partial 函数中的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> partialArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// return 返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fnArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将参数传入，执行 fn</span></span><br><span class=\"line\">    fn(...partialArgs, ...fnArgs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = boundArgs.slice();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在数组中使用 position ++</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args[i] === _) args[i] = <span class=\"built_in\">arguments</span>[position++]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    whitle(position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</span><br><span class=\"line\">    <span class=\"comment\">// 这时候的 args 中是包含了所有的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>executeBound</code> 函数上面有解释，这个函数的作用是:</p>\n<blockquote>\n<p>Determines whether to execute a function as a constructor,   or a normal function with the provided arguments</p>\n<p>决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。</p>\n</blockquote>\n<p><code>memoize</code></p>\n<p>使用 <code>memorize</code> 用来缓存函数计算的结果。</p>\n<p><code>delay</code></p>\n<p>使用 <code>delay</code> 用来实现对于函数延迟执行，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回等待 wait 时间之后的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己写的</span></span><br><span class=\"line\">    func(args);</span><br><span class=\"line\">    <span class=\"comment\">// 源码写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 apply 的方法向函数 func 中传递 args 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>defer</code></p>\n<p><code>defer(function, *arguments)</code></p>\n<p>使用 <code>defer</code> 的目的在于延迟调用 <code>function</code> 直到当前的调用栈被清空为止，其中 <code>arguments</code> 会被作为 <code>function</code> 的参数进行传入。</p>\n<p>类似于使用 <code>setTimeout(function () {}, 0)</code> 的延迟调用效果。</p>\n<p>实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(二)","date":"2017-11-20T14:20:50.000Z","_content":"\n### underscore.js 源码分析(二)\n\n`_.filter`  `_.where` `_.findWhere`  `_.reject`  `_.every`\n\n#### `_.filter`\n\n##### 实例\n\n`_.filter(list, predicate, [context])`\n\n遍历 `list` 值, 返回通过 `predicate` 函数返回为真的值数组。\n\n代码如下:\n\n```javascript\nlist = [1, 2, 5, 6];\nfunction toFilter(num) {\n\treturn num % 2 === 0;\n}\nconsole.log('通过过滤的数组', _.filter(list, toFilter)); // [2, 6]\n```\n\n##### 源码分析\n\n使用 `_.filter()` 的源码如下所示:\n\n```javascript\n_.filter = _.select = function(obj, predicate, context) {\n  var results = [];\n  // 判断 `obj` 是否为 null 是返回空数组\n  if (obj == null) return results;\n  predicate = cb(predicate, context);\n  // 使用 `each` 函数对于数组中的每一个列表进行遍历\n  _.each(obj, function(value, index, list) {\n   if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n};\n```\n\n#### _.where\n\n##### 实例\n\n`_.where(list, propertries)`\n\n`list`: 数组\n\n`propertries` : 需要进行检索的键值对(一个对象)\n\n遍历 `list` 中的每一个值， 返回一个数组，这个数组中包含含有 `propertries` 中属性的所有的键值对。\n\n用法:\n\n```javascript\nlist = [{name: '张宁宁', age: 18}, {name: '张宁宁', age: 70}];\nconsole.log(_.where(list, {name: '张宁宁', age: 18})); //  [{name: '张宁宁', age: 18}]\n```\n\n#####源码分析 \n\n自己写的代码:\n\n```javascript\n\tfunction where(list, sObj) {\n\t\tlet results = [];\n\t\tlet flag = false;\n\t\tif (list == null) {\n\t\t\treturn results;\n\t\t}\n\t\tfor (let obj of list) {\n\t\t\tfor (let key in obj) {\n\t\t\t\tif (Object.keys(sObj).includes(key)) {\n\t\t\t\t\tif (sObj[key] === obj[key]) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tresults.push(obj);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n```\n\n`_where()` 源代码如下所示:\n\n```\n_.where = function(obj, attrs) {\n  return _.filter(obj, _.matches(attrs));\n};\n```\n\n使用 `_filter` 筛选出 `obj` 对象中适合函数 `_.matches` 的键值对儿。\n\n`_.match()` 方法的源码如下所示:\n\n```javascript\n\n_.matches = function(attrs) {\n  // 获取到对象的键值对儿, 是 [key, value] 的形式\n    var pairs = _.pairs(attrs), length = pairs.length;\n    // 返回一个函数，接收 obj 参数\n    return function(obj) {\n     // 如果 obj == null 返回 !length\n     // 为什么不直接返回false ?\n      if (obj == null) return !length;\n      // 创建一个新对象\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        // 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况\n        // 返回 false\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      // 返回 true\n      return true;\n    };\n};\n```\n\n***\n\n对于返回一个函数的这种形式:\n\n```javascript\nfunction name() {\n  return function (obj){\n    // dosomething\n  }\n}\n// 调用的时候这样调用\nname()(); // to dosomething\n```\n\n***\n\n#### `_.findWhere`\n\n##### 实例\n\n`_findWhere(list, properties)`\n\n遍历整个 `list` 返回匹配整个 `properties` 参数所列出的所有键值对儿的第一个值。\n\n##### 源码分析\n\n```javascript\n_.findWhere = function(obj, attrs) {\n    // 通过使用 _.matches(attrs) 返回了一个函数\n    // 通过使用 _.find 方法调用了这个函数\n    return _.find(obj, _.matches(attrs));\n};\n```\n\n通过调用 `_.find` 函数返回通过第一次获得匹配的对象。\n\n#### `_.reject`\n\n##### 实例\n\n`_.reject(list, predicate, [context])`\n\n返回 `list` 列表中没能通过 `predicate` 检验的数值。\n\n```javascript\nfunction reject() {\n  return num%2 === 0;\n}\nlet list = [1, 3, 5, 6];\nconsole.log(_.reject(list, reject)); // [1, 3, 5];\n```\n\n作用与 `filter` 相反。\n\n##### 源码分析\n\n```javascript\n _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n };\n```\n\n`_.negate` 函数\n\n```javascript\n _.negate = function(predicate) {\n  return function() {\n  // 通过使用 apply 方法将 arguments 方法传入\n    return !predicate.apply(this, arguments);\n  };\n};\n```\n\n####　`_every`\n\n##### 实例\n\n`_every(list, [predicate], [context])`\n\n如果 `list` 中的元素都通过 `predicate` 的真值检验就返回为 `true`\n\n##### 代码分析\n\n源码如下:\n\n```javascript\nfunction every(obj, predicate) {\n\tif (obj == null) return true;\n    // 通过使用 keys 获得到一个包含对象键的数组\n\tlet keys = obj.length == +obj.length && Object.keys(obj);\n\tlet currentKey;\n    // length 为数组或者对象的长度\n\tlet length = (keys || obj).length;\n\tfor (let index = 0; index < length; index++) {\n\t\tcurrentKey = keys ? keys[index] : index;\n        // 如果对于predicate 函数返回为 false, every 函数返回为false\n\t\tif (!predicate(obj[currentKey])) return false;\n\t}\n\treturn true;\n}\n```\n\n","source":"_posts/underscore-js源码分析-二.md","raw":"---\ntitle: underscore.js源码分析(二)\ndate: 2017-11-20 22:20:50\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(二)\n\n`_.filter`  `_.where` `_.findWhere`  `_.reject`  `_.every`\n\n#### `_.filter`\n\n##### 实例\n\n`_.filter(list, predicate, [context])`\n\n遍历 `list` 值, 返回通过 `predicate` 函数返回为真的值数组。\n\n代码如下:\n\n```javascript\nlist = [1, 2, 5, 6];\nfunction toFilter(num) {\n\treturn num % 2 === 0;\n}\nconsole.log('通过过滤的数组', _.filter(list, toFilter)); // [2, 6]\n```\n\n##### 源码分析\n\n使用 `_.filter()` 的源码如下所示:\n\n```javascript\n_.filter = _.select = function(obj, predicate, context) {\n  var results = [];\n  // 判断 `obj` 是否为 null 是返回空数组\n  if (obj == null) return results;\n  predicate = cb(predicate, context);\n  // 使用 `each` 函数对于数组中的每一个列表进行遍历\n  _.each(obj, function(value, index, list) {\n   if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n};\n```\n\n#### _.where\n\n##### 实例\n\n`_.where(list, propertries)`\n\n`list`: 数组\n\n`propertries` : 需要进行检索的键值对(一个对象)\n\n遍历 `list` 中的每一个值， 返回一个数组，这个数组中包含含有 `propertries` 中属性的所有的键值对。\n\n用法:\n\n```javascript\nlist = [{name: '张宁宁', age: 18}, {name: '张宁宁', age: 70}];\nconsole.log(_.where(list, {name: '张宁宁', age: 18})); //  [{name: '张宁宁', age: 18}]\n```\n\n#####源码分析 \n\n自己写的代码:\n\n```javascript\n\tfunction where(list, sObj) {\n\t\tlet results = [];\n\t\tlet flag = false;\n\t\tif (list == null) {\n\t\t\treturn results;\n\t\t}\n\t\tfor (let obj of list) {\n\t\t\tfor (let key in obj) {\n\t\t\t\tif (Object.keys(sObj).includes(key)) {\n\t\t\t\t\tif (sObj[key] === obj[key]) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tresults.push(obj);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n```\n\n`_where()` 源代码如下所示:\n\n```\n_.where = function(obj, attrs) {\n  return _.filter(obj, _.matches(attrs));\n};\n```\n\n使用 `_filter` 筛选出 `obj` 对象中适合函数 `_.matches` 的键值对儿。\n\n`_.match()` 方法的源码如下所示:\n\n```javascript\n\n_.matches = function(attrs) {\n  // 获取到对象的键值对儿, 是 [key, value] 的形式\n    var pairs = _.pairs(attrs), length = pairs.length;\n    // 返回一个函数，接收 obj 参数\n    return function(obj) {\n     // 如果 obj == null 返回 !length\n     // 为什么不直接返回false ?\n      if (obj == null) return !length;\n      // 创建一个新对象\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        // 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况\n        // 返回 false\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      // 返回 true\n      return true;\n    };\n};\n```\n\n***\n\n对于返回一个函数的这种形式:\n\n```javascript\nfunction name() {\n  return function (obj){\n    // dosomething\n  }\n}\n// 调用的时候这样调用\nname()(); // to dosomething\n```\n\n***\n\n#### `_.findWhere`\n\n##### 实例\n\n`_findWhere(list, properties)`\n\n遍历整个 `list` 返回匹配整个 `properties` 参数所列出的所有键值对儿的第一个值。\n\n##### 源码分析\n\n```javascript\n_.findWhere = function(obj, attrs) {\n    // 通过使用 _.matches(attrs) 返回了一个函数\n    // 通过使用 _.find 方法调用了这个函数\n    return _.find(obj, _.matches(attrs));\n};\n```\n\n通过调用 `_.find` 函数返回通过第一次获得匹配的对象。\n\n#### `_.reject`\n\n##### 实例\n\n`_.reject(list, predicate, [context])`\n\n返回 `list` 列表中没能通过 `predicate` 检验的数值。\n\n```javascript\nfunction reject() {\n  return num%2 === 0;\n}\nlet list = [1, 3, 5, 6];\nconsole.log(_.reject(list, reject)); // [1, 3, 5];\n```\n\n作用与 `filter` 相反。\n\n##### 源码分析\n\n```javascript\n _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n };\n```\n\n`_.negate` 函数\n\n```javascript\n _.negate = function(predicate) {\n  return function() {\n  // 通过使用 apply 方法将 arguments 方法传入\n    return !predicate.apply(this, arguments);\n  };\n};\n```\n\n####　`_every`\n\n##### 实例\n\n`_every(list, [predicate], [context])`\n\n如果 `list` 中的元素都通过 `predicate` 的真值检验就返回为 `true`\n\n##### 代码分析\n\n源码如下:\n\n```javascript\nfunction every(obj, predicate) {\n\tif (obj == null) return true;\n    // 通过使用 keys 获得到一个包含对象键的数组\n\tlet keys = obj.length == +obj.length && Object.keys(obj);\n\tlet currentKey;\n    // length 为数组或者对象的长度\n\tlet length = (keys || obj).length;\n\tfor (let index = 0; index < length; index++) {\n\t\tcurrentKey = keys ? keys[index] : index;\n        // 如果对于predicate 函数返回为 false, every 函数返回为false\n\t\tif (!predicate(obj[currentKey])) return false;\n\t}\n\treturn true;\n}\n```\n\n","slug":"underscore-js源码分析-二","published":1,"updated":"2020-09-14T06:36:25.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7x003ki2oshahbs2cg","content":"<h3 id=\"underscore-js-源码分析-二\"><a href=\"#underscore-js-源码分析-二\" class=\"headerlink\" title=\"underscore.js 源码分析(二)\"></a>underscore.js 源码分析(二)</h3><p><code>_.filter</code>  <code>_.where</code> <code>_.findWhere</code>  <code>_.reject</code>  <code>_.every</code></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"_.filter\"></a><code>_.filter</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.filter(list, predicate, [context])</code></p>\n<p>遍历 <code>list</code> 值, 返回通过 <code>predicate</code> 函数返回为真的值数组。</p>\n<p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFilter</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'通过过滤的数组'</span>, _.filter(list, toFilter)); <span class=\"comment\">// [2, 6]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.filter()</code> 的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">  <span class=\"comment\">// 判断 `obj` 是否为 null 是返回空数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 `each` 函数对于数组中的每一个列表进行遍历</span></span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"_.where\"></a>_.where</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.where(list, propertries)</code></p>\n<p><code>list</code>: 数组</p>\n<p><code>propertries</code> : 需要进行检索的键值对(一个对象)</p>\n<p>遍历 <code>list</code> 中的每一个值， 返回一个数组，这个数组中包含含有 <code>propertries</code> 中属性的所有的键值对。</p>\n<p>用法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">70</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.where(list, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;)); <span class=\"comment\">//  [&#123;name: '张宁宁', age: 18&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>#####源码分析 </p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">list, sObj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> obj <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(sObj).includes(key)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (sObj[key] === obj[key]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tresults.push(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>_where()</code> 源代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.where = function(obj, attrs) &#123;</span><br><span class=\"line\">  return _.filter(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_filter</code> 筛选出 <code>obj</code> 对象中适合函数 <code>_.matches</code> 的键值对儿。</p>\n<p><code>_.match()</code> 方法的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">_.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的键值对儿, 是 [key, value] 的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = _.pairs(attrs), length = pairs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数，接收 obj 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 obj == null 返回 !length</span></span><br><span class=\"line\">     <span class=\"comment\">// 为什么不直接返回false ?</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">      obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pair = pairs[i], key = pair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pair[<span class=\"number\">1</span>] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>对于返回一个函数的这种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dosomething</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用的时候这样调用</span></span><br><span class=\"line\">name()(); <span class=\"comment\">// to dosomething</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"findWhere\"><a href=\"#findWhere\" class=\"headerlink\" title=\"_.findWhere\"></a><code>_.findWhere</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_findWhere(list, properties)</code></p>\n<p>遍历整个 <code>list</code> 返回匹配整个 <code>properties</code> 参数所列出的所有键值对儿的第一个值。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.matches(attrs) 返回了一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.find 方法调用了这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过调用 <code>_.find</code> 函数返回通过第一次获得匹配的对象。</p>\n<h4 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"_.reject\"></a><code>_.reject</code></h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reject(list, predicate, [context])</code></p>\n<p>返回 <code>list</code> 列表中没能通过 <code>predicate</code> 检验的数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.reject(list, reject)); <span class=\"comment\">// [1, 3, 5];</span></span><br></pre></td></tr></table></figure>\n<p>作用与 <code>filter</code> 相反。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>_.negate</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 apply 方法将 arguments 方法传入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_every</code></p>\n<h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_every(list, [predicate], [context])</code></p>\n<p>如果 <code>list</code> 中的元素都通过 <code>predicate</code> 的真值检验就返回为 <code>true</code></p>\n<h5 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">every</span>(<span class=\"params\">obj, predicate</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 keys 获得到一个包含对象键的数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> keys = obj.length == +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> currentKey;</span><br><span class=\"line\">    <span class=\"comment\">// length 为数组或者对象的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> length = (keys || obj).length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentKey = keys ? keys[index] : index;</span><br><span class=\"line\">        <span class=\"comment\">// 如果对于predicate 函数返回为 false, every 函数返回为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!predicate(obj[currentKey])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-二\"><a href=\"#underscore-js-源码分析-二\" class=\"headerlink\" title=\"underscore.js 源码分析(二)\"></a>underscore.js 源码分析(二)</h3><p><code>_.filter</code>  <code>_.where</code> <code>_.findWhere</code>  <code>_.reject</code>  <code>_.every</code></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"_.filter\"></a><code>_.filter</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.filter(list, predicate, [context])</code></p>\n<p>遍历 <code>list</code> 值, 返回通过 <code>predicate</code> 函数返回为真的值数组。</p>\n<p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFilter</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'通过过滤的数组'</span>, _.filter(list, toFilter)); <span class=\"comment\">// [2, 6]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.filter()</code> 的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">  <span class=\"comment\">// 判断 `obj` 是否为 null 是返回空数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 `each` 函数对于数组中的每一个列表进行遍历</span></span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"_.where\"></a>_.where</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.where(list, propertries)</code></p>\n<p><code>list</code>: 数组</p>\n<p><code>propertries</code> : 需要进行检索的键值对(一个对象)</p>\n<p>遍历 <code>list</code> 中的每一个值， 返回一个数组，这个数组中包含含有 <code>propertries</code> 中属性的所有的键值对。</p>\n<p>用法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">70</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.where(list, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;)); <span class=\"comment\">//  [&#123;name: '张宁宁', age: 18&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>#####源码分析 </p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">list, sObj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> obj <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(sObj).includes(key)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (sObj[key] === obj[key]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tresults.push(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>_where()</code> 源代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.where = function(obj, attrs) &#123;</span><br><span class=\"line\">  return _.filter(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_filter</code> 筛选出 <code>obj</code> 对象中适合函数 <code>_.matches</code> 的键值对儿。</p>\n<p><code>_.match()</code> 方法的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">_.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的键值对儿, 是 [key, value] 的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = _.pairs(attrs), length = pairs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数，接收 obj 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 obj == null 返回 !length</span></span><br><span class=\"line\">     <span class=\"comment\">// 为什么不直接返回false ?</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">      obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pair = pairs[i], key = pair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pair[<span class=\"number\">1</span>] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>对于返回一个函数的这种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dosomething</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用的时候这样调用</span></span><br><span class=\"line\">name()(); <span class=\"comment\">// to dosomething</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"findWhere\"><a href=\"#findWhere\" class=\"headerlink\" title=\"_.findWhere\"></a><code>_.findWhere</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_findWhere(list, properties)</code></p>\n<p>遍历整个 <code>list</code> 返回匹配整个 <code>properties</code> 参数所列出的所有键值对儿的第一个值。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.matches(attrs) 返回了一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.find 方法调用了这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过调用 <code>_.find</code> 函数返回通过第一次获得匹配的对象。</p>\n<h4 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"_.reject\"></a><code>_.reject</code></h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reject(list, predicate, [context])</code></p>\n<p>返回 <code>list</code> 列表中没能通过 <code>predicate</code> 检验的数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.reject(list, reject)); <span class=\"comment\">// [1, 3, 5];</span></span><br></pre></td></tr></table></figure>\n<p>作用与 <code>filter</code> 相反。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>_.negate</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 apply 方法将 arguments 方法传入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_every</code></p>\n<h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_every(list, [predicate], [context])</code></p>\n<p>如果 <code>list</code> 中的元素都通过 <code>predicate</code> 的真值检验就返回为 <code>true</code></p>\n<h5 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">every</span>(<span class=\"params\">obj, predicate</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 keys 获得到一个包含对象键的数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> keys = obj.length == +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> currentKey;</span><br><span class=\"line\">    <span class=\"comment\">// length 为数组或者对象的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> length = (keys || obj).length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentKey = keys ? keys[index] : index;</span><br><span class=\"line\">        <span class=\"comment\">// 如果对于predicate 函数返回为 false, every 函数返回为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!predicate(obj[currentKey])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(三)","date":"2017-11-22T12:55:17.000Z","_content":"\n###　 underscore.js 源码分析(三)\n\n`_.some` `_.contains`  `_.invoke`  `_.pluck`  `_.max`\n\n#### `_.some`\n\n##### 实例\n\n`_.some(list, [predicate], [context])`\n\n遍历 `list` 中的元素, 只要其中有一个元素通过 `predicate` , 那么就返回为 `true`\n\n##### 源码分析\n\n```javascript\n_.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = cb(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      // 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n};\n```\n\n#### `_.contains`\n\n##### 实例\n\n`_.contains(list, value, [fromIndex])`\n\n如果在 `list` 中包含有 `value` 值，那么返回为 `true` `fromIndex` 表示开始进行检索的位置。\n\n如果 `list` 是数组, 检查数组中是否包含有对应的 `value` 值\n\n如果 `list` 是对象, 检查对象中的值是否有存在的 `value` 值\n\n自己写的代码:\n\n```javascript\nfunction contain(obj, value, fromIndex) {\n  if (obj == null) return false;\n  let list = obj;\n  if (obj.length !== +obj.length) {\n    list = obj.values();\n  }\n  // 为了保证代码的健壮性，添加 typeof fromIndex === 'number' && fromIndex 的判断\n  return list.indexOf(value, typeof fromIndex === 'number' && fromIndex) >= 0;\n}\n```\n\n##### 源码分析\n\n```javascript\n_.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (obj == null) return false;\n    // 使用 _.values 获得到对象的值\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    // 使用 `_.indexOf` 获取到索引\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n};\n```\n\n#### `_.invoke` \n\n>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】\n\n##### 实例\n\n`_.invoke(list, methodName, *arguments)` \n\n在 `list` 的每一个元素上执行 `methodName` 方法。 `argument` 用于将使用 `_.invoke` 调用 `methodName` 方法的时候传递的函数。\n\n```javascript\nlet list = [[1, 4, 3]];\n_.invoke(list, 'sort') // [1, 3 ,4]\n// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort\n// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，\n// 而 函数 print 中的 this 值指向的是 list 中的元素\nfunction print() {\n    console.log(this); // [1, 4, 3]\n}\n\n```\n\n##### 源码分析\n\n实现这个功能的源码如下:\n\n```javascript\n_.invoke = function(obj, method) {\n    // 使用 Array.slice.call 返回一个子数组\n    // 第二个参数 2 表示截取从传入参数的第二个处进行截取\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n  // 对于 obj 进行遍历\n    return _.map(obj, function(value) {\n    // 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数\n    // 进行判断是否是函数 method 或者 内置的 method 方法\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n };\n```\n\n这是一个用于进行调用绑定的函数。\n\n#### `_.pluck`\n\n>pluck 拔掉，摘，拉\n\n`_.pluck(list, propertyName)` \n\n##### 实例\n\n使用 `_.pluck` 用于获取到数组对象中的对应属性的所有的值。\n\n对于对象中不存在的属性返回 `undefined`\n\n```javascript\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.pluck(stooges, 'name');\n=> [\"moe\", \"larry\", \"curly\"]\n```\n\n自己写的一个 `pluck` 函数如下：\n\n```javascript\nfunction pluck(list, name) {\n  let props = [];\n  list.map((obj) => {\n    if (Object.keys(obj).indexOf(name) >= 0) {\n        props.push(obj[name]);\n      } else {\n        // 这里使用 void 0 代替 undefined \n        props.push(void 0);\n      }\n    });\n\treturn props;\n }\n```\n\n##### 源码分析\n\n```javascript\n_.pluck = function(obj, key) {\n  // 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法\n  return _.map(obj, _.property(key));\n};\n```\n\n```javascript\n_.property = function(key) {\n    // 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值\n    return function(obj) {\n     // 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n```\n\n#### `_.max`\n\n`_.max(list, [iteratee], [context])` \n\n返回 `list` 中的最大值。\n\n```javascript\n_.max = function(obj, iteratee, context) {\n  // 将 result 初始化为 -infinity lastComputed 初始化为 infinity\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    // 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做\n    // 并且 obj 不等于 null 的时候\n    if (iteratee == null && obj != null) {\n      // obj 为数组 ? 数组 : 对象的值\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        // 进行遍历值\n        value = obj[i];\n        // 比较大小，将最大的那个值赋给 result 参数\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      // 使用 foreach 对于 obj 进行计算\n      _.each(obj, function(value, index, list) {\n        // 进行计算之后返回计算结果\n        computed = iteratee(value, index, list);\n        // 如果计算结果大于上一次计算结果， 将最大的值赋给 result\n        // 将最大的结果赋予 lastComputed\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n1. 在js 中关于运算符优先级的问题:\n\n   >逻辑 `&&` (与) 大于 逻辑 或`||`\n\n2. 上面有一段程序如下:\n\n   `if (computed > lastComputed || computed === -Infinity && result === -Infinity)`\n\n   这段话翻译为中文就是\n\n   如果满足 `computed === -Infinity && result === -Infinity` 或者 `computed > lastComputd` 的时候，进行动作。 ","source":"_posts/underscore-js源码分析-三.md","raw":"---\ntitle: underscore.js源码分析(三)\ndate: 2017-11-22 20:55:17\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###　 underscore.js 源码分析(三)\n\n`_.some` `_.contains`  `_.invoke`  `_.pluck`  `_.max`\n\n#### `_.some`\n\n##### 实例\n\n`_.some(list, [predicate], [context])`\n\n遍历 `list` 中的元素, 只要其中有一个元素通过 `predicate` , 那么就返回为 `true`\n\n##### 源码分析\n\n```javascript\n_.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = cb(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      // 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n};\n```\n\n#### `_.contains`\n\n##### 实例\n\n`_.contains(list, value, [fromIndex])`\n\n如果在 `list` 中包含有 `value` 值，那么返回为 `true` `fromIndex` 表示开始进行检索的位置。\n\n如果 `list` 是数组, 检查数组中是否包含有对应的 `value` 值\n\n如果 `list` 是对象, 检查对象中的值是否有存在的 `value` 值\n\n自己写的代码:\n\n```javascript\nfunction contain(obj, value, fromIndex) {\n  if (obj == null) return false;\n  let list = obj;\n  if (obj.length !== +obj.length) {\n    list = obj.values();\n  }\n  // 为了保证代码的健壮性，添加 typeof fromIndex === 'number' && fromIndex 的判断\n  return list.indexOf(value, typeof fromIndex === 'number' && fromIndex) >= 0;\n}\n```\n\n##### 源码分析\n\n```javascript\n_.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (obj == null) return false;\n    // 使用 _.values 获得到对象的值\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    // 使用 `_.indexOf` 获取到索引\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n};\n```\n\n#### `_.invoke` \n\n>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】\n\n##### 实例\n\n`_.invoke(list, methodName, *arguments)` \n\n在 `list` 的每一个元素上执行 `methodName` 方法。 `argument` 用于将使用 `_.invoke` 调用 `methodName` 方法的时候传递的函数。\n\n```javascript\nlet list = [[1, 4, 3]];\n_.invoke(list, 'sort') // [1, 3 ,4]\n// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort\n// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，\n// 而 函数 print 中的 this 值指向的是 list 中的元素\nfunction print() {\n    console.log(this); // [1, 4, 3]\n}\n\n```\n\n##### 源码分析\n\n实现这个功能的源码如下:\n\n```javascript\n_.invoke = function(obj, method) {\n    // 使用 Array.slice.call 返回一个子数组\n    // 第二个参数 2 表示截取从传入参数的第二个处进行截取\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n  // 对于 obj 进行遍历\n    return _.map(obj, function(value) {\n    // 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数\n    // 进行判断是否是函数 method 或者 内置的 method 方法\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n };\n```\n\n这是一个用于进行调用绑定的函数。\n\n#### `_.pluck`\n\n>pluck 拔掉，摘，拉\n\n`_.pluck(list, propertyName)` \n\n##### 实例\n\n使用 `_.pluck` 用于获取到数组对象中的对应属性的所有的值。\n\n对于对象中不存在的属性返回 `undefined`\n\n```javascript\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.pluck(stooges, 'name');\n=> [\"moe\", \"larry\", \"curly\"]\n```\n\n自己写的一个 `pluck` 函数如下：\n\n```javascript\nfunction pluck(list, name) {\n  let props = [];\n  list.map((obj) => {\n    if (Object.keys(obj).indexOf(name) >= 0) {\n        props.push(obj[name]);\n      } else {\n        // 这里使用 void 0 代替 undefined \n        props.push(void 0);\n      }\n    });\n\treturn props;\n }\n```\n\n##### 源码分析\n\n```javascript\n_.pluck = function(obj, key) {\n  // 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法\n  return _.map(obj, _.property(key));\n};\n```\n\n```javascript\n_.property = function(key) {\n    // 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值\n    return function(obj) {\n     // 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n```\n\n#### `_.max`\n\n`_.max(list, [iteratee], [context])` \n\n返回 `list` 中的最大值。\n\n```javascript\n_.max = function(obj, iteratee, context) {\n  // 将 result 初始化为 -infinity lastComputed 初始化为 infinity\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    // 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做\n    // 并且 obj 不等于 null 的时候\n    if (iteratee == null && obj != null) {\n      // obj 为数组 ? 数组 : 对象的值\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        // 进行遍历值\n        value = obj[i];\n        // 比较大小，将最大的那个值赋给 result 参数\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      // 使用 foreach 对于 obj 进行计算\n      _.each(obj, function(value, index, list) {\n        // 进行计算之后返回计算结果\n        computed = iteratee(value, index, list);\n        // 如果计算结果大于上一次计算结果， 将最大的值赋给 result\n        // 将最大的结果赋予 lastComputed\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n1. 在js 中关于运算符优先级的问题:\n\n   >逻辑 `&&` (与) 大于 逻辑 或`||`\n\n2. 上面有一段程序如下:\n\n   `if (computed > lastComputed || computed === -Infinity && result === -Infinity)`\n\n   这段话翻译为中文就是\n\n   如果满足 `computed === -Infinity && result === -Infinity` 或者 `computed > lastComputd` 的时候，进行动作。 ","slug":"underscore-js源码分析-三","published":1,"updated":"2020-09-14T06:36:25.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t7z003li2oslz5zubny","content":"<p>###　 underscore.js 源码分析(三)</p>\n<p><code>_.some</code> <code>_.contains</code>  <code>_.invoke</code>  <code>_.pluck</code>  <code>_.max</code></p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a><code>_.some</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.some(list, [predicate], [context])</code></p>\n<p>遍历 <code>list</code> 中的元素, 只要其中有一个元素通过 <code>predicate</code> , 那么就返回为 <code>true</code></p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\">        index, currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"_.contains\"></a><code>_.contains</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.contains(list, value, [fromIndex])</code></p>\n<p>如果在 <code>list</code> 中包含有 <code>value</code> 值，那么返回为 <code>true</code> <code>fromIndex</code> 表示开始进行检索的位置。</p>\n<p>如果 <code>list</code> 是数组, 检查数组中是否包含有对应的 <code>value</code> 值</p>\n<p>如果 <code>list</code> 是对象, 检查对象中的值是否有存在的 <code>value</code> 值</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contain</span>(<span class=\"params\">obj, value, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">    list = obj.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为了保证代码的健壮性，添加 typeof fromIndex === 'number' &amp;&amp; fromIndex 的判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.indexOf(value, <span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, target, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.values 获得到对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 `_.indexOf` 获取到索引</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, target, <span class=\"keyword\">typeof</span> fromIndex == <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"_.invoke\"></a><code>_.invoke</code></h4><blockquote>\n<p>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】</p>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.invoke(list, methodName, *arguments)</code> </p>\n<p>在 <code>list</code> 的每一个元素上执行 <code>methodName</code> 方法。 <code>argument</code> 用于将使用 <code>_.invoke</code> 调用 <code>methodName</code> 方法的时候传递的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\">_.invoke(list, <span class=\"string\">'sort'</span>) <span class=\"comment\">// [1, 3 ,4]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort</span></span><br><span class=\"line\"><span class=\"comment\">// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 而 函数 print 中的 this 值指向的是 list 中的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>实现这个功能的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Array.slice.call 返回一个子数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 2 表示截取从传入参数的第二个处进行截取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 进行遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行判断是否是函数 method 或者 内置的 method 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (isFunc ? method : value[method]).apply(value, args);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个用于进行调用绑定的函数。</p>\n<h4 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a><code>_.pluck</code></h4><blockquote>\n<p>pluck 拔掉，摘，拉</p>\n</blockquote>\n<p><code>_.pluck(list, propertyName)</code> </p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.pluck</code> 用于获取到数组对象中的对应属性的所有的值。</p>\n<p>对于对象中不存在的属性返回 <code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.pluck(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [<span class=\"string\">\"moe\"</span>, <span class=\"string\">\"larry\"</span>, <span class=\"string\">\"curly\"</span>]</span><br></pre></td></tr></table></figure>\n<p>自己写的一个 <code>pluck</code> 函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">list, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> props = [];</span><br><span class=\"line\">  list.map(<span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj).indexOf(name) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        props.push(obj[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 void 0 代替 undefined </span></span><br><span class=\"line\">        props.push(<span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> props;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.map(obj, _.property(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"_.max\"></a><code>_.max</code></h4><p><code>_.max(list, [iteratee], [context])</code> </p>\n<p>返回 <code>list</code> 中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 result 初始化为 -infinity lastComputed 初始化为 infinity</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"comment\">// 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且 obj 不等于 null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// obj 为数组 ? 数组 : 对象的值</span></span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行遍历值</span></span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"comment\">// 比较大小，将最大的那个值赋给 result 参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      <span class=\"comment\">// 使用 foreach 对于 obj 进行计算</span></span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行计算之后返回计算结果</span></span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"comment\">// 如果计算结果大于上一次计算结果， 将最大的值赋给 result</span></span><br><span class=\"line\">        <span class=\"comment\">// 将最大的结果赋予 lastComputed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>在js 中关于运算符优先级的问题:</p>\n<blockquote>\n<p>逻辑 <code>&amp;&amp;</code> (与) 大于 逻辑 或<code>||</code></p>\n</blockquote>\n</li>\n<li><p>上面有一段程序如下:</p>\n<p><code>if (computed &gt; lastComputed || computed === -Infinity &amp;&amp; result === -Infinity)</code></p>\n<p>这段话翻译为中文就是</p>\n<p>如果满足 <code>computed === -Infinity &amp;&amp; result === -Infinity</code> 或者 <code>computed &gt; lastComputd</code> 的时候，进行动作。 </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>###　 underscore.js 源码分析(三)</p>\n<p><code>_.some</code> <code>_.contains</code>  <code>_.invoke</code>  <code>_.pluck</code>  <code>_.max</code></p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a><code>_.some</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.some(list, [predicate], [context])</code></p>\n<p>遍历 <code>list</code> 中的元素, 只要其中有一个元素通过 <code>predicate</code> , 那么就返回为 <code>true</code></p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\">        index, currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"_.contains\"></a><code>_.contains</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.contains(list, value, [fromIndex])</code></p>\n<p>如果在 <code>list</code> 中包含有 <code>value</code> 值，那么返回为 <code>true</code> <code>fromIndex</code> 表示开始进行检索的位置。</p>\n<p>如果 <code>list</code> 是数组, 检查数组中是否包含有对应的 <code>value</code> 值</p>\n<p>如果 <code>list</code> 是对象, 检查对象中的值是否有存在的 <code>value</code> 值</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contain</span>(<span class=\"params\">obj, value, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">    list = obj.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为了保证代码的健壮性，添加 typeof fromIndex === 'number' &amp;&amp; fromIndex 的判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.indexOf(value, <span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, target, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.values 获得到对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 `_.indexOf` 获取到索引</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, target, <span class=\"keyword\">typeof</span> fromIndex == <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"_.invoke\"></a><code>_.invoke</code></h4><blockquote>\n<p>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】</p>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.invoke(list, methodName, *arguments)</code> </p>\n<p>在 <code>list</code> 的每一个元素上执行 <code>methodName</code> 方法。 <code>argument</code> 用于将使用 <code>_.invoke</code> 调用 <code>methodName</code> 方法的时候传递的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\">_.invoke(list, <span class=\"string\">'sort'</span>) <span class=\"comment\">// [1, 3 ,4]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort</span></span><br><span class=\"line\"><span class=\"comment\">// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 而 函数 print 中的 this 值指向的是 list 中的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>实现这个功能的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Array.slice.call 返回一个子数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 2 表示截取从传入参数的第二个处进行截取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 进行遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行判断是否是函数 method 或者 内置的 method 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (isFunc ? method : value[method]).apply(value, args);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个用于进行调用绑定的函数。</p>\n<h4 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a><code>_.pluck</code></h4><blockquote>\n<p>pluck 拔掉，摘，拉</p>\n</blockquote>\n<p><code>_.pluck(list, propertyName)</code> </p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.pluck</code> 用于获取到数组对象中的对应属性的所有的值。</p>\n<p>对于对象中不存在的属性返回 <code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.pluck(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [<span class=\"string\">\"moe\"</span>, <span class=\"string\">\"larry\"</span>, <span class=\"string\">\"curly\"</span>]</span><br></pre></td></tr></table></figure>\n<p>自己写的一个 <code>pluck</code> 函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">list, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> props = [];</span><br><span class=\"line\">  list.map(<span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj).indexOf(name) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        props.push(obj[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 void 0 代替 undefined </span></span><br><span class=\"line\">        props.push(<span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> props;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.map(obj, _.property(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"_.max\"></a><code>_.max</code></h4><p><code>_.max(list, [iteratee], [context])</code> </p>\n<p>返回 <code>list</code> 中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 result 初始化为 -infinity lastComputed 初始化为 infinity</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"comment\">// 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且 obj 不等于 null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// obj 为数组 ? 数组 : 对象的值</span></span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行遍历值</span></span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"comment\">// 比较大小，将最大的那个值赋给 result 参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      <span class=\"comment\">// 使用 foreach 对于 obj 进行计算</span></span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行计算之后返回计算结果</span></span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"comment\">// 如果计算结果大于上一次计算结果， 将最大的值赋给 result</span></span><br><span class=\"line\">        <span class=\"comment\">// 将最大的结果赋予 lastComputed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>在js 中关于运算符优先级的问题:</p>\n<blockquote>\n<p>逻辑 <code>&amp;&amp;</code> (与) 大于 逻辑 或<code>||</code></p>\n</blockquote>\n</li>\n<li><p>上面有一段程序如下:</p>\n<p><code>if (computed &gt; lastComputed || computed === -Infinity &amp;&amp; result === -Infinity)</code></p>\n<p>这段话翻译为中文就是</p>\n<p>如果满足 <code>computed === -Infinity &amp;&amp; result === -Infinity</code> 或者 <code>computed &gt; lastComputd</code> 的时候，进行动作。 </p>\n</li>\n</ol>\n"},{"title":"underscore.js源码分析(八)","date":"2017-12-01T15:22:58.000Z","_content":"\n### underscore.js 源码分析(八)\n\n`zip` `unzip` `object` `indexOf` `lastIndexOf`\n\n#### `zip`\n\n`_.zip(*arrays)`\n\n使用 `zip` 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。\n\n##### 实例\n\n```javascript\n_.zip(['张宁宁', '张艺苇'], ['男', '女'], ['山东', '河北']);\n=> [['张宁宁', '男', '山东'] , ['张艺苇', '女', '河北']]\n```\n\n##### 源码分析\n\n自己写的:\n\n```javascript\n/** \n * @description 用于合成数组\n * @param {Object} array 传入的多个数组\n * @return {Object} 返回的经过合成之后的数组\n*/\nfunction zip(array) {\n    // 需要添加是否为 null\n    if (array === null) return [];\n\tlet args = Array.prototype.slice.call(arguments, 0);\n\tlet result = [];\n\tarray.map((item, index) => {\n\t\tlet arr = [];\n\t\targs.map((argItem) => {\n\t\t\tarr.push(argItem[index]);\n\t\t})\n\t\tresult.push(arr);\n\t});\n\treturn result;\n}\n```\n\n需要注意的几点:\n\n1. 对于传入的 `array` 需要进行判断，是否为 `null`\n\n   >对于传入的参数一定要进行类型判断\n\n```javascript\n _.zip = function(array) {\n    if (array == null) return [];\n    // 使用 _.max 获取到 arguments 中所有的数组个数\n    var length = _.max(arguments, 'length').length;\n    // 使用 Array 生成 length 长度的数组\n    var results = Array(length);\n    while (length-- > 0) {\n      // 使用 pluck 用于萃取获得 arguments 的某种属性值\n      results[length] = _.pluck(arguments, length);\n    }\n    return results;\n  };\n```\n\n#### `unzip`\n\n使用 `unzip` 的目的是将归并后的数组分解为串联的一系列的新数组。\n\n#####　实例\n\n```javascript\n_.unzip([['张宁宁', '张艺苇'], ['山东', '行唐']]);\n=> ['张宁宁', '山东'] ['张艺苇', '行唐']\n// 返回的第一个元素中包含所有输入数组的第一个元素\n```\n\n实现代码如下:\n\n```javascript\n_.unzip = function(array) {\n  // 返回使用 apply 压入的一个数组\n  return _.zip.apply(null, array);\n};\n```\n\n#### `object`\n\n使用 `object` 用于将数组转化为对象的形式。\n\n`_.object(list, [values])`\n\n传递一个单独的`[key, value]` 的列表，或者一个键的列表和一个值的列表。当传入 `list` 和 `values` 的时候， `list` 中的值会被作为返回对象的键, `values` 中的值会被作为返回对象的值。\n\n##### 实例\n\n```javascript\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n=> {moe: 30, larry: 40, curly: 50}\n```\n\n\n\n##### 源码解析\n\n代码如下:\n\n```javascript\n/**\n * @description toObj 将键值数组组合为对象\n * @param {Array} list 键数组\n * @param {Array} values 值数组\n * @return {Object} 组成的对象\n*/\nfunction toObj(list, values) {\n\tif (list === null) return {};\n\tlet obj = {};\n\tif (typeof values === 'undefined') {\n\t  list.map((item) => {\n\t\tobj[item[0]] = item[1];\n\t  });\n\t} else {\n\t  list.map((item, index) => {\n\t\tobj[item] = values[index];\n\t  });\n\t}\n\treturn obj;\n}\n```\n\n#### indexOf\n\n`_.indexOf(array, value, [isSorted])`\n\n使用 `indexOf` 用于返回 `value` 在 `array` 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。\n\n##### 实例\n\n```\n_.indexOf([1, 2, 3 ,4 ,1],1, 1);\n=> 5\n```\n\n##### 源码分析\n\n```javascript\n_.indexOf = function (array, item, isSorted) {\n  var i = 0; length = array && array.length;\n  // 使用判断数组的方法\n  // length = array && array.length;\n  if (typeof isSorted === 'number') {\n    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n  } else if (isSorted && length) {\n    // 如果传入的是一个 true, 使用更快的算法\n    i = _.sortedIndex(array, item);\n    return array[i] === item ? i : -1;\n  }\n  for (; i < length; i++) if (array[i] === item) return i;\n  return -1;\n}\n```\n\n1. 判断一个数组是否存在:\n\n   `length = array && array.length` \n\n2.  使用 `Math.max` 的妙用\n\n   例如:\n\n   ```javascript\n   Math.max(0, num);\n   // 返回 num > 0\n   //相当于\n   num <= 0 ? 0 : num;\n   //因此\n   // 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些\n   ```\n\n例如下面的一个程序，用来获得一组数组中的最大的差值:\n\n```javascript\nfunction getMaxProfit(arr) {\n  let minProfit = arr[0];\n  let maxProfit = 0;\n  for (let i = 0; i < arr.length; i ++) {\n    minProfit = Math.min(minProfit, arr[i]);\n    let currentProfit = arr[i] - minProfit;\n    maxProfit = Math.max(maxProfit, currentProfit);\n  }\n  return maxProfit;\n}\n```\n\n\n\n#### `lastIndexOf`\n\n`_.lastIndexOf(array, value, [fromIndex])`\n\n返回 `value` 在 `array` 中从最后开始的索引值，传入的 `fromIndex` 将从给定的索引值进行搜索。\n\n##### 源码分析\n\n```javascript\n_.lastIndexOf = function(array, item, fromIndex) {\n  let index = array ? array.length : 0;\n  if (typeof fromIndex === 'number') {\n    // 使用 Math.min 当 fromIndex + 1 > index 的时候，要取 index\n    index = fromIndex < 0 ? index + fromIndex + 1 : Math.min(index, fromIndex + 1);\n  }\n  // 使用 --index 因为最后一个元素的索引是 array.length - 1\n  while (--index >= 0) if (array[index] === item) return index;\n  return -1;\n}\n```\n\n#### `sortIndex`\n\n`_.sortIndex(list, value, [iteratee], [context])`\n\n使用 `sortIndex` 的目的在于使用二分法查找到 `value` 在 `list` 中的位置序号。\n\n##### 实例\n\n```javascript\n_.sortedIndex([10, 20, 30, 40, 50], 35)\n// 3\n```\n\n##### 源码分析\n\n使用二分法进行比较获得到元素在数组中的位置的。\n\n```javascript\n_.sortedIndex = function (array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  let value = iteratee(obj);\n  let low = 0; let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 判断 value 在相对于 array 在左边还是在右边\n    if (_.comparator(iteratee(array[mid], value)) < 0) low = mid + 1; else high = mid; \n  }\n  return low;\n}\n```\n\n使用二分法的原理是将数组中分为两个部分，判断 `value` 值在哪一个部分之内。","source":"_posts/underscore-js源码分析-八.md","raw":"---\ntitle: underscore.js源码分析(八)\ndate: 2017-12-01 23:22:58\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(八)\n\n`zip` `unzip` `object` `indexOf` `lastIndexOf`\n\n#### `zip`\n\n`_.zip(*arrays)`\n\n使用 `zip` 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。\n\n##### 实例\n\n```javascript\n_.zip(['张宁宁', '张艺苇'], ['男', '女'], ['山东', '河北']);\n=> [['张宁宁', '男', '山东'] , ['张艺苇', '女', '河北']]\n```\n\n##### 源码分析\n\n自己写的:\n\n```javascript\n/** \n * @description 用于合成数组\n * @param {Object} array 传入的多个数组\n * @return {Object} 返回的经过合成之后的数组\n*/\nfunction zip(array) {\n    // 需要添加是否为 null\n    if (array === null) return [];\n\tlet args = Array.prototype.slice.call(arguments, 0);\n\tlet result = [];\n\tarray.map((item, index) => {\n\t\tlet arr = [];\n\t\targs.map((argItem) => {\n\t\t\tarr.push(argItem[index]);\n\t\t})\n\t\tresult.push(arr);\n\t});\n\treturn result;\n}\n```\n\n需要注意的几点:\n\n1. 对于传入的 `array` 需要进行判断，是否为 `null`\n\n   >对于传入的参数一定要进行类型判断\n\n```javascript\n _.zip = function(array) {\n    if (array == null) return [];\n    // 使用 _.max 获取到 arguments 中所有的数组个数\n    var length = _.max(arguments, 'length').length;\n    // 使用 Array 生成 length 长度的数组\n    var results = Array(length);\n    while (length-- > 0) {\n      // 使用 pluck 用于萃取获得 arguments 的某种属性值\n      results[length] = _.pluck(arguments, length);\n    }\n    return results;\n  };\n```\n\n#### `unzip`\n\n使用 `unzip` 的目的是将归并后的数组分解为串联的一系列的新数组。\n\n#####　实例\n\n```javascript\n_.unzip([['张宁宁', '张艺苇'], ['山东', '行唐']]);\n=> ['张宁宁', '山东'] ['张艺苇', '行唐']\n// 返回的第一个元素中包含所有输入数组的第一个元素\n```\n\n实现代码如下:\n\n```javascript\n_.unzip = function(array) {\n  // 返回使用 apply 压入的一个数组\n  return _.zip.apply(null, array);\n};\n```\n\n#### `object`\n\n使用 `object` 用于将数组转化为对象的形式。\n\n`_.object(list, [values])`\n\n传递一个单独的`[key, value]` 的列表，或者一个键的列表和一个值的列表。当传入 `list` 和 `values` 的时候， `list` 中的值会被作为返回对象的键, `values` 中的值会被作为返回对象的值。\n\n##### 实例\n\n```javascript\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n=> {moe: 30, larry: 40, curly: 50}\n```\n\n\n\n##### 源码解析\n\n代码如下:\n\n```javascript\n/**\n * @description toObj 将键值数组组合为对象\n * @param {Array} list 键数组\n * @param {Array} values 值数组\n * @return {Object} 组成的对象\n*/\nfunction toObj(list, values) {\n\tif (list === null) return {};\n\tlet obj = {};\n\tif (typeof values === 'undefined') {\n\t  list.map((item) => {\n\t\tobj[item[0]] = item[1];\n\t  });\n\t} else {\n\t  list.map((item, index) => {\n\t\tobj[item] = values[index];\n\t  });\n\t}\n\treturn obj;\n}\n```\n\n#### indexOf\n\n`_.indexOf(array, value, [isSorted])`\n\n使用 `indexOf` 用于返回 `value` 在 `array` 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。\n\n##### 实例\n\n```\n_.indexOf([1, 2, 3 ,4 ,1],1, 1);\n=> 5\n```\n\n##### 源码分析\n\n```javascript\n_.indexOf = function (array, item, isSorted) {\n  var i = 0; length = array && array.length;\n  // 使用判断数组的方法\n  // length = array && array.length;\n  if (typeof isSorted === 'number') {\n    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n  } else if (isSorted && length) {\n    // 如果传入的是一个 true, 使用更快的算法\n    i = _.sortedIndex(array, item);\n    return array[i] === item ? i : -1;\n  }\n  for (; i < length; i++) if (array[i] === item) return i;\n  return -1;\n}\n```\n\n1. 判断一个数组是否存在:\n\n   `length = array && array.length` \n\n2.  使用 `Math.max` 的妙用\n\n   例如:\n\n   ```javascript\n   Math.max(0, num);\n   // 返回 num > 0\n   //相当于\n   num <= 0 ? 0 : num;\n   //因此\n   // 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些\n   ```\n\n例如下面的一个程序，用来获得一组数组中的最大的差值:\n\n```javascript\nfunction getMaxProfit(arr) {\n  let minProfit = arr[0];\n  let maxProfit = 0;\n  for (let i = 0; i < arr.length; i ++) {\n    minProfit = Math.min(minProfit, arr[i]);\n    let currentProfit = arr[i] - minProfit;\n    maxProfit = Math.max(maxProfit, currentProfit);\n  }\n  return maxProfit;\n}\n```\n\n\n\n#### `lastIndexOf`\n\n`_.lastIndexOf(array, value, [fromIndex])`\n\n返回 `value` 在 `array` 中从最后开始的索引值，传入的 `fromIndex` 将从给定的索引值进行搜索。\n\n##### 源码分析\n\n```javascript\n_.lastIndexOf = function(array, item, fromIndex) {\n  let index = array ? array.length : 0;\n  if (typeof fromIndex === 'number') {\n    // 使用 Math.min 当 fromIndex + 1 > index 的时候，要取 index\n    index = fromIndex < 0 ? index + fromIndex + 1 : Math.min(index, fromIndex + 1);\n  }\n  // 使用 --index 因为最后一个元素的索引是 array.length - 1\n  while (--index >= 0) if (array[index] === item) return index;\n  return -1;\n}\n```\n\n#### `sortIndex`\n\n`_.sortIndex(list, value, [iteratee], [context])`\n\n使用 `sortIndex` 的目的在于使用二分法查找到 `value` 在 `list` 中的位置序号。\n\n##### 实例\n\n```javascript\n_.sortedIndex([10, 20, 30, 40, 50], 35)\n// 3\n```\n\n##### 源码分析\n\n使用二分法进行比较获得到元素在数组中的位置的。\n\n```javascript\n_.sortedIndex = function (array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  let value = iteratee(obj);\n  let low = 0; let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 判断 value 在相对于 array 在左边还是在右边\n    if (_.comparator(iteratee(array[mid], value)) < 0) low = mid + 1; else high = mid; \n  }\n  return low;\n}\n```\n\n使用二分法的原理是将数组中分为两个部分，判断 `value` 值在哪一个部分之内。","slug":"underscore-js源码分析-八","published":1,"updated":"2020-09-14T06:36:25.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t83003oi2osa4id93dr","content":"<h3 id=\"underscore-js-源码分析-八\"><a href=\"#underscore-js-源码分析-八\" class=\"headerlink\" title=\"underscore.js 源码分析(八)\"></a>underscore.js 源码分析(八)</h3><p><code>zip</code> <code>unzip</code> <code>object</code> <code>indexOf</code> <code>lastIndexOf</code></p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a><code>zip</code></h4><p><code>_.zip(*arrays)</code></p>\n<p>使用 <code>zip</code> 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip([<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'河北'</span>]);</span><br><span class=\"line\">=&gt; [[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'男'</span>, <span class=\"string\">'山东'</span>] , [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'女'</span>, <span class=\"string\">'河北'</span>]]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>用于合成数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>array 传入的多个数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Object&#125;</span> </span>返回的经过合成之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zip</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要添加是否为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tarray.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">\t\targs.map(<span class=\"function\">(<span class=\"params\">argItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tarr.push(argItem[index]);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tresult.push(arr);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的几点:</p>\n<ol>\n<li><p>对于传入的 <code>array</code> 需要进行判断，是否为 <code>null</code></p>\n<blockquote>\n<p>对于传入的参数一定要进行类型判断</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">   <span class=\"comment\">// 使用 _.max 获取到 arguments 中所有的数组个数</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> length = _.max(<span class=\"built_in\">arguments</span>, <span class=\"string\">'length'</span>).length;</span><br><span class=\"line\">   <span class=\"comment\">// 使用 Array 生成 length 长度的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (length-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 pluck 用于萃取获得 arguments 的某种属性值</span></span><br><span class=\"line\">     results[length] = _.pluck(<span class=\"built_in\">arguments</span>, length);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a><code>unzip</code></h4><p>使用 <code>unzip</code> 的目的是将归并后的数组分解为串联的一系列的新数组。</p>\n<p>#####　实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip([[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'行唐'</span>]]);</span><br><span class=\"line\">=&gt; [<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'山东'</span>] [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'行唐'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 返回的第一个元素中包含所有输入数组的第一个元素</span></span><br></pre></td></tr></table></figure>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回使用 apply 压入的一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.zip.apply(<span class=\"literal\">null</span>, array);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a><code>object</code></h4><p>使用 <code>object</code> 用于将数组转化为对象的形式。</p>\n<p><code>_.object(list, [values])</code></p>\n<p>传递一个单独的<code>[key, value]</code> 的列表，或者一个键的列表和一个值的列表。当传入 <code>list</code> 和 <code>values</code> 的时候， <code>list</code> 中的值会被作为返回对象的键, <code>values</code> 中的值会被作为返回对象的值。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\">=&gt; &#123;<span class=\"attr\">moe</span>: <span class=\"number\">30</span>, <span class=\"attr\">larry</span>: <span class=\"number\">40</span>, <span class=\"attr\">curly</span>: <span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>toObj 将键值数组组合为对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>list 键数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>values 值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Object&#125;</span> </span>组成的对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toObj</span>(<span class=\"params\">list, values</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item[<span class=\"number\">0</span>]] = item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item] = values[index];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p><code>_.indexOf(array, value, [isSorted])</code></p>\n<p>使用 <code>indexOf</code> 用于返回 <code>value</code> 在 <code>array</code> 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 3 ,4 ,1],1, 1);</span><br><span class=\"line\">=&gt; 5</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, item, isSorted</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; length = array &amp;&amp; array.length;</span><br><span class=\"line\">  <span class=\"comment\">// 使用判断数组的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// length = array &amp;&amp; array.length;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> isSorted === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    i = isSorted &lt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, length + isSorted) : isSorted;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSorted &amp;&amp; length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是一个 true, 使用更快的算法</span></span><br><span class=\"line\">    i = _.sortedIndex(array, item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[i] === item ? i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>判断一个数组是否存在:</p>\n<p><code>length = array &amp;&amp; array.length</code> </p>\n</li>\n<li><p>使用 <code>Math.max</code> 的妙用</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, num);</span><br><span class=\"line\"><span class=\"comment\">// 返回 num &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\">num &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num;</span><br><span class=\"line\"><span class=\"comment\">//因此</span></span><br><span class=\"line\"><span class=\"comment\">// 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如下面的一个程序，用来获得一组数组中的最大的差值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxProfit</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minProfit = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxProfit = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class=\"line\">    minProfit = <span class=\"built_in\">Math</span>.min(minProfit, arr[i]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentProfit = arr[i] - minProfit;</span><br><span class=\"line\">    maxProfit = <span class=\"built_in\">Math</span>.max(maxProfit, currentProfit);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a><code>lastIndexOf</code></h4><p><code>_.lastIndexOf(array, value, [fromIndex])</code></p>\n<p>返回 <code>value</code> 在 <code>array</code> 中从最后开始的索引值，传入的 <code>fromIndex</code> 将从给定的索引值进行搜索。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = array ? array.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.min 当 fromIndex + 1 &gt; index 的时候，要取 index</span></span><br><span class=\"line\">    index = fromIndex &lt; <span class=\"number\">0</span> ? index + fromIndex + <span class=\"number\">1</span> : <span class=\"built_in\">Math</span>.min(index, fromIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 --index 因为最后一个元素的索引是 array.length - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--index &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">if</span> (array[index] === item) <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortIndex\"><a href=\"#sortIndex\" class=\"headerlink\" title=\"sortIndex\"></a><code>sortIndex</code></h4><p><code>_.sortIndex(list, value, [iteratee], [context])</code></p>\n<p>使用 <code>sortIndex</code> 的目的在于使用二分法查找到 <code>value</code> 在 <code>list</code> 中的位置序号。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用二分法进行比较获得到元素在数组中的位置的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>; <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断 value 在相对于 array 在左边还是在右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.comparator(iteratee(array[mid], value)) &lt; <span class=\"number\">0</span>) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用二分法的原理是将数组中分为两个部分，判断 <code>value</code> 值在哪一个部分之内。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-八\"><a href=\"#underscore-js-源码分析-八\" class=\"headerlink\" title=\"underscore.js 源码分析(八)\"></a>underscore.js 源码分析(八)</h3><p><code>zip</code> <code>unzip</code> <code>object</code> <code>indexOf</code> <code>lastIndexOf</code></p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a><code>zip</code></h4><p><code>_.zip(*arrays)</code></p>\n<p>使用 <code>zip</code> 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip([<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'河北'</span>]);</span><br><span class=\"line\">=&gt; [[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'男'</span>, <span class=\"string\">'山东'</span>] , [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'女'</span>, <span class=\"string\">'河北'</span>]]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>用于合成数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>array 传入的多个数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Object&#125;</span> </span>返回的经过合成之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zip</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要添加是否为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tarray.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">\t\targs.map(<span class=\"function\">(<span class=\"params\">argItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tarr.push(argItem[index]);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tresult.push(arr);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的几点:</p>\n<ol>\n<li><p>对于传入的 <code>array</code> 需要进行判断，是否为 <code>null</code></p>\n<blockquote>\n<p>对于传入的参数一定要进行类型判断</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">   <span class=\"comment\">// 使用 _.max 获取到 arguments 中所有的数组个数</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> length = _.max(<span class=\"built_in\">arguments</span>, <span class=\"string\">'length'</span>).length;</span><br><span class=\"line\">   <span class=\"comment\">// 使用 Array 生成 length 长度的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (length-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 pluck 用于萃取获得 arguments 的某种属性值</span></span><br><span class=\"line\">     results[length] = _.pluck(<span class=\"built_in\">arguments</span>, length);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a><code>unzip</code></h4><p>使用 <code>unzip</code> 的目的是将归并后的数组分解为串联的一系列的新数组。</p>\n<p>#####　实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip([[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'行唐'</span>]]);</span><br><span class=\"line\">=&gt; [<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'山东'</span>] [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'行唐'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 返回的第一个元素中包含所有输入数组的第一个元素</span></span><br></pre></td></tr></table></figure>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回使用 apply 压入的一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.zip.apply(<span class=\"literal\">null</span>, array);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a><code>object</code></h4><p>使用 <code>object</code> 用于将数组转化为对象的形式。</p>\n<p><code>_.object(list, [values])</code></p>\n<p>传递一个单独的<code>[key, value]</code> 的列表，或者一个键的列表和一个值的列表。当传入 <code>list</code> 和 <code>values</code> 的时候， <code>list</code> 中的值会被作为返回对象的键, <code>values</code> 中的值会被作为返回对象的值。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\">=&gt; &#123;<span class=\"attr\">moe</span>: <span class=\"number\">30</span>, <span class=\"attr\">larry</span>: <span class=\"number\">40</span>, <span class=\"attr\">curly</span>: <span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>toObj 将键值数组组合为对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>list 键数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>values 值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Object&#125;</span> </span>组成的对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toObj</span>(<span class=\"params\">list, values</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item[<span class=\"number\">0</span>]] = item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item] = values[index];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p><code>_.indexOf(array, value, [isSorted])</code></p>\n<p>使用 <code>indexOf</code> 用于返回 <code>value</code> 在 <code>array</code> 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 3 ,4 ,1],1, 1);</span><br><span class=\"line\">=&gt; 5</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, item, isSorted</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; length = array &amp;&amp; array.length;</span><br><span class=\"line\">  <span class=\"comment\">// 使用判断数组的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// length = array &amp;&amp; array.length;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> isSorted === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    i = isSorted &lt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, length + isSorted) : isSorted;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSorted &amp;&amp; length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是一个 true, 使用更快的算法</span></span><br><span class=\"line\">    i = _.sortedIndex(array, item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[i] === item ? i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>判断一个数组是否存在:</p>\n<p><code>length = array &amp;&amp; array.length</code> </p>\n</li>\n<li><p>使用 <code>Math.max</code> 的妙用</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, num);</span><br><span class=\"line\"><span class=\"comment\">// 返回 num &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\">num &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num;</span><br><span class=\"line\"><span class=\"comment\">//因此</span></span><br><span class=\"line\"><span class=\"comment\">// 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如下面的一个程序，用来获得一组数组中的最大的差值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxProfit</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minProfit = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxProfit = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class=\"line\">    minProfit = <span class=\"built_in\">Math</span>.min(minProfit, arr[i]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentProfit = arr[i] - minProfit;</span><br><span class=\"line\">    maxProfit = <span class=\"built_in\">Math</span>.max(maxProfit, currentProfit);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a><code>lastIndexOf</code></h4><p><code>_.lastIndexOf(array, value, [fromIndex])</code></p>\n<p>返回 <code>value</code> 在 <code>array</code> 中从最后开始的索引值，传入的 <code>fromIndex</code> 将从给定的索引值进行搜索。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = array ? array.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.min 当 fromIndex + 1 &gt; index 的时候，要取 index</span></span><br><span class=\"line\">    index = fromIndex &lt; <span class=\"number\">0</span> ? index + fromIndex + <span class=\"number\">1</span> : <span class=\"built_in\">Math</span>.min(index, fromIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 --index 因为最后一个元素的索引是 array.length - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--index &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">if</span> (array[index] === item) <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortIndex\"><a href=\"#sortIndex\" class=\"headerlink\" title=\"sortIndex\"></a><code>sortIndex</code></h4><p><code>_.sortIndex(list, value, [iteratee], [context])</code></p>\n<p>使用 <code>sortIndex</code> 的目的在于使用二分法查找到 <code>value</code> 在 <code>list</code> 中的位置序号。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用二分法进行比较获得到元素在数组中的位置的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>; <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断 value 在相对于 array 在左边还是在右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.comparator(iteratee(array[mid], value)) &lt; <span class=\"number\">0</span>) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用二分法的原理是将数组中分为两个部分，判断 <code>value</code> 值在哪一个部分之内。</p>\n"},{"title":"underscore.js源码分析(十二)","date":"2017-12-10T12:14:18.000Z","_content":"\n### underscore.js 源码分析(十二)\n\n`wrap` `negate` `compose`\n\n#### `wrap`\n\n##### 实例\n\n`_.wrap(function, wrapper)`\n\n使用 `wrap` 的目的在于将函数 `function` 作为第一个参数传递进入 `wrapper` 之中, 从而在 `wrapper` 中在不同的事件，不同的代码，根据不同的条件执行 `function` 函数。\n\n实例:\n\n```javascript\nfunction hello(name) {\n  console.log(`hello my name is ${name}`);\n}\nlet sayHello = _.wrap(hello, function (func) {\n  func('张宁宁');\n});\nsayHello(); // hello my name is 张宁宁\n```\n\n##### 源码分析\n\n使用 `_.partial` 函数实现的参数替换:\n\n```javascript\n_.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n}\n```\n\n#### `negate`\n\n返回 `negate` 的否定版本:\n\n##### 源码分析\n\n```\n// predicate 迭代函数\n_.negate = function (predicate) {\n  return funciton () {\n    return !predicate.apply(this, arguments);\n  }\n}\n```\n\n#### `compose`\n\n`compose(*functions)`\n\n`compose` 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。\n\n##### 实例\n\n```\nfunction sayHello(word) {\n  console.log(`hello, my name UpperWorlds is ${word}`)\n}\nfunction toUpper(word) {\n  return word.toUpperCase();\n}\nlet composeFn = _.compose(sayHello, toUpper);\ncomposeFn('zhangningning'); // hello my name UpperWorlds is ZHANGNINGNING;\n```\n\n\n\n##### 源码分析\n\n自己写的部分代码:\n\n哪个好？？\n\n```javascript\nfunction compose() {\n  let fns = Array.prototype.slice.call(arguments);\n  reurn function (args) {\n    fns.reduceRight((preFn, nextFn) => {\n      return nextFn(preFn);\n    }, args);\n  }\n}\n```\n\n源码如下:\n\n```javascript\n_.compose = function () {\n  let args = argumemts;\n  let start = args.length - 1;\n  return function () {\n    let i = start;\n    // 使用 call 以及 apply 进行参数传递\n    let result = args[start].apply(this, arguments);\n    // 使用 while 进行递减\n    while(i--) result = args[i].call(this, result);\n    return result;\n  }\n}\n```\n\n\n\n\n\n","source":"_posts/underscore-js源码分析-十二.md","raw":"---\ntitle: underscore.js源码分析(十二)\ndate: 2017-12-10 20:14:18\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十二)\n\n`wrap` `negate` `compose`\n\n#### `wrap`\n\n##### 实例\n\n`_.wrap(function, wrapper)`\n\n使用 `wrap` 的目的在于将函数 `function` 作为第一个参数传递进入 `wrapper` 之中, 从而在 `wrapper` 中在不同的事件，不同的代码，根据不同的条件执行 `function` 函数。\n\n实例:\n\n```javascript\nfunction hello(name) {\n  console.log(`hello my name is ${name}`);\n}\nlet sayHello = _.wrap(hello, function (func) {\n  func('张宁宁');\n});\nsayHello(); // hello my name is 张宁宁\n```\n\n##### 源码分析\n\n使用 `_.partial` 函数实现的参数替换:\n\n```javascript\n_.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n}\n```\n\n#### `negate`\n\n返回 `negate` 的否定版本:\n\n##### 源码分析\n\n```\n// predicate 迭代函数\n_.negate = function (predicate) {\n  return funciton () {\n    return !predicate.apply(this, arguments);\n  }\n}\n```\n\n#### `compose`\n\n`compose(*functions)`\n\n`compose` 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。\n\n##### 实例\n\n```\nfunction sayHello(word) {\n  console.log(`hello, my name UpperWorlds is ${word}`)\n}\nfunction toUpper(word) {\n  return word.toUpperCase();\n}\nlet composeFn = _.compose(sayHello, toUpper);\ncomposeFn('zhangningning'); // hello my name UpperWorlds is ZHANGNINGNING;\n```\n\n\n\n##### 源码分析\n\n自己写的部分代码:\n\n哪个好？？\n\n```javascript\nfunction compose() {\n  let fns = Array.prototype.slice.call(arguments);\n  reurn function (args) {\n    fns.reduceRight((preFn, nextFn) => {\n      return nextFn(preFn);\n    }, args);\n  }\n}\n```\n\n源码如下:\n\n```javascript\n_.compose = function () {\n  let args = argumemts;\n  let start = args.length - 1;\n  return function () {\n    let i = start;\n    // 使用 call 以及 apply 进行参数传递\n    let result = args[start].apply(this, arguments);\n    // 使用 while 进行递减\n    while(i--) result = args[i].call(this, result);\n    return result;\n  }\n}\n```\n\n\n\n\n\n","slug":"underscore-js源码分析-十二","published":1,"updated":"2020-09-14T06:36:25.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t86003ri2osh0ggz7ne","content":"<h3 id=\"underscore-js-源码分析-十二\"><a href=\"#underscore-js-源码分析-十二\" class=\"headerlink\" title=\"underscore.js 源码分析(十二)\"></a>underscore.js 源码分析(十二)</h3><p><code>wrap</code> <code>negate</code> <code>compose</code></p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a><code>wrap</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.wrap(function, wrapper)</code></p>\n<p>使用 <code>wrap</code> 的目的在于将函数 <code>function</code> 作为第一个参数传递进入 <code>wrapper</code> 之中, 从而在 <code>wrapper</code> 中在不同的事件，不同的代码，根据不同的条件执行 <code>function</code> 函数。</p>\n<p>实例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = _.wrap(hello, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  func(<span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// hello my name is 张宁宁</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.partial</code> 函数实现的参数替换:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.wrap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, wrapper</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a><code>negate</code></h4><p>返回 <code>negate</code> 的否定版本:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// predicate 迭代函数</span><br><span class=\"line\">_.negate = function (predicate) &#123;</span><br><span class=\"line\">  return funciton () &#123;</span><br><span class=\"line\">    return !predicate.apply(this, arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a><code>compose</code></h4><p><code>compose(*functions)</code></p>\n<p><code>compose</code> 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(word) &#123;</span><br><span class=\"line\">  console.log(`hello, my name UpperWorlds is $&#123;word&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function toUpper(word) &#123;</span><br><span class=\"line\">  return word.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let composeFn = _.compose(sayHello, toUpper);</span><br><span class=\"line\">composeFn(&apos;zhangningning&apos;); // hello my name UpperWorlds is ZHANGNINGNING;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的部分代码:</p>\n<p>哪个好？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  reurn <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    fns.reduceRight(<span class=\"function\">(<span class=\"params\">preFn, nextFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextFn(preFn);</span><br><span class=\"line\">    &#125;, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = argumemts;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = args.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = start;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 call 以及 apply 进行参数传递</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 进行递减</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十二\"><a href=\"#underscore-js-源码分析-十二\" class=\"headerlink\" title=\"underscore.js 源码分析(十二)\"></a>underscore.js 源码分析(十二)</h3><p><code>wrap</code> <code>negate</code> <code>compose</code></p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a><code>wrap</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.wrap(function, wrapper)</code></p>\n<p>使用 <code>wrap</code> 的目的在于将函数 <code>function</code> 作为第一个参数传递进入 <code>wrapper</code> 之中, 从而在 <code>wrapper</code> 中在不同的事件，不同的代码，根据不同的条件执行 <code>function</code> 函数。</p>\n<p>实例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = _.wrap(hello, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  func(<span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// hello my name is 张宁宁</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.partial</code> 函数实现的参数替换:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.wrap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, wrapper</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a><code>negate</code></h4><p>返回 <code>negate</code> 的否定版本:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// predicate 迭代函数</span><br><span class=\"line\">_.negate = function (predicate) &#123;</span><br><span class=\"line\">  return funciton () &#123;</span><br><span class=\"line\">    return !predicate.apply(this, arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a><code>compose</code></h4><p><code>compose(*functions)</code></p>\n<p><code>compose</code> 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(word) &#123;</span><br><span class=\"line\">  console.log(`hello, my name UpperWorlds is $&#123;word&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function toUpper(word) &#123;</span><br><span class=\"line\">  return word.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let composeFn = _.compose(sayHello, toUpper);</span><br><span class=\"line\">composeFn(&apos;zhangningning&apos;); // hello my name UpperWorlds is ZHANGNINGNING;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的部分代码:</p>\n<p>哪个好？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  reurn <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    fns.reduceRight(<span class=\"function\">(<span class=\"params\">preFn, nextFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextFn(preFn);</span><br><span class=\"line\">    &#125;, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = argumemts;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = args.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = start;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 call 以及 apply 进行参数传递</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 进行递减</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十一)","date":"2017-12-07T14:09:15.000Z","_content":"\n### underscore.js 源码分析(十一)\n\n`throttle`  `debounce`  `once` `after` `before`\n\n#### `throttle`\n\n函数节流\n\n`_.throttle(function, wait, [options])`\n\n使用 `throttle` 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 `wait` 毫秒调用一次这个函数。\n\n##### 源码分析\n\n```javascript\n/*\n* @description throttle 用于函数节流\n* @param func 运行的函数\n* @param wait 等待的毫秒数\n* @param options\n*/\n// previous 这里的意思的记录下上次记录下上次的时间\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      // 这里 previous 的作用\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      // 记录下被调用的时刻\n      if (!previous && options.leading === false) previous = now;\n      // 当 previous 等于 now 的时候 remaining = wait\n      // 记录下等待的时间和 now - previous 的差值\n      // 不会执行下面的 if else 函数\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果 remaining <= 0\n      // 第一次函数执行的时候被调用，因为这个时候 now >> wait remaining <= 0\n      if (remaining <= 0 || remaining > wait) {\n        // 当超出等待时间之后调用的时候\n        // 返回调用的结果，清除 timeout\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        // 获取到 func 执行之后的结果\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n        // 如果 timeout 为 null\n        // 开启一个新的队列等待\n        // 如果 options.trailing === false, 表示禁用最后一次执行\n      } else if (!timeout && options.trailing !== false) {\n        // 如果没有超过等待时间\n        // remaining 时间之后调用 later函数\n        // 对于在一段时间内应用同一个函数的时候，只是改变的later 函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n首先，需要明白一点，函数式编程同样可以首先数据的共享。\n\n```\nfunction getIndex() {\n  let index = 0;\n  // return 返回的是一个函数\n  return function () {\n    index++;\n    console.log(index);\n  }\n}\n\nlet getIndexFn = getIndex();\n// 因为在个过程中，通过getIndex 返回的是一个函数\n// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次\ngetIndexFn(); // 1\ngetIndexFn(); // 2\n```\n\n练习:\n\n```javascript\nfunction throttle (func, wait, options) {\n  let context, args, result;\n  let timeout = null;\n  let previous = 0;\n  if (!options) options = {};\n  let later = funciton () {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n  };\n  return funcion () {\n    let now = now();\n    if (!previous && options.leading === false) previous = now;\n    let remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 如果第一次执行\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        cleatTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  }\n}\n```\n\n#### `debounce`\n\n`_.debounce(function, wait, [immediate])`\n\n`debounce` 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 `wait` 毫秒之后进行执行。\n\n当函数重复调用的时候，函数执行只是发生在最后一次调用的 `wait` 毫秒之后进行执行。\n\n自己写的:\n\n```javascript\nfunction debounce(func, wait, immediate) {\n  // 定义执行上下文, 参数， 结果\n  let context, args, result;\n  let timeout = null;\n  let previous 0;\n  let remainding = 0;\n  immediate = immediate || false;\n  let later = function () {\n    result = func.apply(context, args);\n    timeout = null;\n    context = args = null;\n  };\n  return function () {\n    let now = _.now();\n    remainding = now - previous;\n    context = this;\n    args = arguments;\n    // 保证使用 immediate 的时候立即执行函数\n    if (immediate && remainding > wait) {\n      previous = _.now();\n      result = func.apply(context, args);\n      timeout = null;\n      context = args = null;\n    } else if (!immediate) {\n      // if timeout\n      // clearTimeout 进行清除 timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      timeout = setTimeout(later, wait);\n    }\n  }\n}\n```\n\n######  源码解析\n\n```javascript\n_.debounce = function(func, wait, immediate) {\n  let timeout, args, context, timestamp, result;\n  let later = function () {\n    let last = _.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    // 这里面继续调用的时候改变的只是这个\n    timestamp = _.now();\n    let callNow = imemediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n```\n\n如下流程图如下:\n\n```flow\nst=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e\n```\n\n关于 `later` 函数如下:\n\n```\nlet later = function () {\n  let last = now() - timestamp;\n  if (last < wait && last >= 0) {\n    timeout = setTimeout(later, last - wait);\n  } else {\n    timeout = null;\n    if (!immediate) {\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  }\n}\n```\n\n这一部分实现的原理是:\n\n假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 `wait` 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 `wait` 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 `later` 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了`wait` 时间之后被调用。\n\n#### `once`\n\n创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。\n\n使用 `once` 是当 `before` 方法中 `count` 等于2的情况下进行执行的函数;\n\n```javascript\n// 向 befor 函数中传递参数为 2\n_.once = _.partial(_.before, 2);\n```\n\n\n\n#### `before`\n\n`_.before(count, function)`\n\n创建一个函数，调用不超过 `count` 次, 当`count`已经被达到的时候，最后一次调用的结果被记住并被返回。\n\n自己写的:\n\n```javascript\n/*\n* @description before 用于返回 调用不超过 count 次数的函数调用\n* @param {Numbet} count 调用函数的次数\n* @param {function} func 被调用的函数\n*/\nfunction before(count, func) {\n  let index = 1;\n  let memo;\n  return function () {\n    if (index < count) {\n      memo = func.apply(this, arguments);\n      index++;\n    }\n    return memo;\n  }\n}\n```\n\n源码分析:\n\n```javascript\n_.before = function (times, func) {\n  let memo;\n  return function () {\n    // --times\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    // 如果 times <= 1 将 func 重置为 null\n    if (times <= 1) func = null;\n    return memo;\n  }\n}\n```\n\n#### `after`\n\n`_.after(count, function)`\n\n使用 `_.after` 的作用是创建一个函数，只有调用 `count` 次之后才能得到效果。\n\n```javascript\n/*\n* @description after 用于表示 after 函数\n* @param {Number} 需要的调用次数\n* @param {function} func 规定调用次数之后的调用函数\n*/\nfunction after (times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  }\n}\n```\n\n","source":"_posts/underscore-js源码分析-十一.md","raw":"---\ntitle: underscore.js源码分析(十一)\ndate: 2017-12-07 22:09:15\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十一)\n\n`throttle`  `debounce`  `once` `after` `before`\n\n#### `throttle`\n\n函数节流\n\n`_.throttle(function, wait, [options])`\n\n使用 `throttle` 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 `wait` 毫秒调用一次这个函数。\n\n##### 源码分析\n\n```javascript\n/*\n* @description throttle 用于函数节流\n* @param func 运行的函数\n* @param wait 等待的毫秒数\n* @param options\n*/\n// previous 这里的意思的记录下上次记录下上次的时间\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      // 这里 previous 的作用\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      // 记录下被调用的时刻\n      if (!previous && options.leading === false) previous = now;\n      // 当 previous 等于 now 的时候 remaining = wait\n      // 记录下等待的时间和 now - previous 的差值\n      // 不会执行下面的 if else 函数\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果 remaining <= 0\n      // 第一次函数执行的时候被调用，因为这个时候 now >> wait remaining <= 0\n      if (remaining <= 0 || remaining > wait) {\n        // 当超出等待时间之后调用的时候\n        // 返回调用的结果，清除 timeout\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        // 获取到 func 执行之后的结果\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n        // 如果 timeout 为 null\n        // 开启一个新的队列等待\n        // 如果 options.trailing === false, 表示禁用最后一次执行\n      } else if (!timeout && options.trailing !== false) {\n        // 如果没有超过等待时间\n        // remaining 时间之后调用 later函数\n        // 对于在一段时间内应用同一个函数的时候，只是改变的later 函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n首先，需要明白一点，函数式编程同样可以首先数据的共享。\n\n```\nfunction getIndex() {\n  let index = 0;\n  // return 返回的是一个函数\n  return function () {\n    index++;\n    console.log(index);\n  }\n}\n\nlet getIndexFn = getIndex();\n// 因为在个过程中，通过getIndex 返回的是一个函数\n// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次\ngetIndexFn(); // 1\ngetIndexFn(); // 2\n```\n\n练习:\n\n```javascript\nfunction throttle (func, wait, options) {\n  let context, args, result;\n  let timeout = null;\n  let previous = 0;\n  if (!options) options = {};\n  let later = funciton () {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n  };\n  return funcion () {\n    let now = now();\n    if (!previous && options.leading === false) previous = now;\n    let remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 如果第一次执行\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        cleatTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  }\n}\n```\n\n#### `debounce`\n\n`_.debounce(function, wait, [immediate])`\n\n`debounce` 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 `wait` 毫秒之后进行执行。\n\n当函数重复调用的时候，函数执行只是发生在最后一次调用的 `wait` 毫秒之后进行执行。\n\n自己写的:\n\n```javascript\nfunction debounce(func, wait, immediate) {\n  // 定义执行上下文, 参数， 结果\n  let context, args, result;\n  let timeout = null;\n  let previous 0;\n  let remainding = 0;\n  immediate = immediate || false;\n  let later = function () {\n    result = func.apply(context, args);\n    timeout = null;\n    context = args = null;\n  };\n  return function () {\n    let now = _.now();\n    remainding = now - previous;\n    context = this;\n    args = arguments;\n    // 保证使用 immediate 的时候立即执行函数\n    if (immediate && remainding > wait) {\n      previous = _.now();\n      result = func.apply(context, args);\n      timeout = null;\n      context = args = null;\n    } else if (!immediate) {\n      // if timeout\n      // clearTimeout 进行清除 timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      timeout = setTimeout(later, wait);\n    }\n  }\n}\n```\n\n######  源码解析\n\n```javascript\n_.debounce = function(func, wait, immediate) {\n  let timeout, args, context, timestamp, result;\n  let later = function () {\n    let last = _.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    // 这里面继续调用的时候改变的只是这个\n    timestamp = _.now();\n    let callNow = imemediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n```\n\n如下流程图如下:\n\n```flow\nst=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e\n```\n\n关于 `later` 函数如下:\n\n```\nlet later = function () {\n  let last = now() - timestamp;\n  if (last < wait && last >= 0) {\n    timeout = setTimeout(later, last - wait);\n  } else {\n    timeout = null;\n    if (!immediate) {\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  }\n}\n```\n\n这一部分实现的原理是:\n\n假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 `wait` 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 `wait` 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 `later` 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了`wait` 时间之后被调用。\n\n#### `once`\n\n创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。\n\n使用 `once` 是当 `before` 方法中 `count` 等于2的情况下进行执行的函数;\n\n```javascript\n// 向 befor 函数中传递参数为 2\n_.once = _.partial(_.before, 2);\n```\n\n\n\n#### `before`\n\n`_.before(count, function)`\n\n创建一个函数，调用不超过 `count` 次, 当`count`已经被达到的时候，最后一次调用的结果被记住并被返回。\n\n自己写的:\n\n```javascript\n/*\n* @description before 用于返回 调用不超过 count 次数的函数调用\n* @param {Numbet} count 调用函数的次数\n* @param {function} func 被调用的函数\n*/\nfunction before(count, func) {\n  let index = 1;\n  let memo;\n  return function () {\n    if (index < count) {\n      memo = func.apply(this, arguments);\n      index++;\n    }\n    return memo;\n  }\n}\n```\n\n源码分析:\n\n```javascript\n_.before = function (times, func) {\n  let memo;\n  return function () {\n    // --times\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    // 如果 times <= 1 将 func 重置为 null\n    if (times <= 1) func = null;\n    return memo;\n  }\n}\n```\n\n#### `after`\n\n`_.after(count, function)`\n\n使用 `_.after` 的作用是创建一个函数，只有调用 `count` 次之后才能得到效果。\n\n```javascript\n/*\n* @description after 用于表示 after 函数\n* @param {Number} 需要的调用次数\n* @param {function} func 规定调用次数之后的调用函数\n*/\nfunction after (times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  }\n}\n```\n\n","slug":"underscore-js源码分析-十一","published":1,"updated":"2020-09-14T06:36:25.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t88003ti2osmzx0hile","content":"<h3 id=\"underscore-js-源码分析-十一\"><a href=\"#underscore-js-源码分析-十一\" class=\"headerlink\" title=\"underscore.js 源码分析(十一)\"></a>underscore.js 源码分析(十一)</h3><p><code>throttle</code>  <code>debounce</code>  <code>once</code> <code>after</code> <code>before</code></p>\n<h4 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a><code>throttle</code></h4><p>函数节流</p>\n<p><code>_.throttle(function, wait, [options])</code></p>\n<p>使用 <code>throttle</code> 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 <code>wait</code> 毫秒调用一次这个函数。</p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description throttle 用于函数节流</span></span><br><span class=\"line\"><span class=\"comment\">* @param func 运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param wait 等待的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">* @param options</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// previous 这里的意思的记录下上次记录下上次的时间</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里 previous 的作用</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 记录下被调用的时刻</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 当 previous 等于 now 的时候 remaining = wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 记录下等待的时间和 now - previous 的差值</span></span><br><span class=\"line\">      <span class=\"comment\">// 不会执行下面的 if else 函数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 第一次函数执行的时候被调用，因为这个时候 now &gt;&gt; wait remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当超出等待时间之后调用的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回调用的结果，清除 timeout</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 func 执行之后的结果</span></span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 timeout 为 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启一个新的队列等待</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 options.trailing === false, 表示禁用最后一次执行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有超过等待时间</span></span><br><span class=\"line\">        <span class=\"comment\">// remaining 时间之后调用 later函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于在一段时间内应用同一个函数的时候，只是改变的later 函数</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，需要明白一点，函数式编程同样可以首先数据的共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getIndex() &#123;</span><br><span class=\"line\">  let index = 0;</span><br><span class=\"line\">  // return 返回的是一个函数</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let getIndexFn = getIndex();</span><br><span class=\"line\">// 因为在个过程中，通过getIndex 返回的是一个函数</span><br><span class=\"line\">// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次</span><br><span class=\"line\">getIndexFn(); // 1</span><br><span class=\"line\">getIndexFn(); // 2</span><br></pre></td></tr></table></figure>\n<p>练习:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = funciton () &#123;</span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcion () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果第一次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        cleatTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a><code>debounce</code></h4><p><code>_.debounce(function, wait, [immediate])</code></p>\n<p><code>debounce</code> 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>当函数重复调用的时候，函数执行只是发生在最后一次调用的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义执行上下文, 参数， 结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> remainding = <span class=\"number\">0</span>;</span><br><span class=\"line\">  immediate = immediate || <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = _.now();</span><br><span class=\"line\">    remainding = now - previous;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保证使用 immediate 的时候立即执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate &amp;&amp; remainding &gt; wait) &#123;</span><br><span class=\"line\">      previous = _.now();</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if timeout</span></span><br><span class=\"line\">      <span class=\"comment\">// clearTimeout 进行清除 timeout</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      timeout = setTimeout(later, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = _.now() - timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里面继续调用的时候改变的只是这个</span></span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callNow = imemediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下流程图如下:</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<p>关于 <code>later</code> 函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let later = function () &#123;</span><br><span class=\"line\">  let last = now() - timestamp;</span><br><span class=\"line\">  if (last &lt; wait &amp;&amp; last &gt;= 0) &#123;</span><br><span class=\"line\">    timeout = setTimeout(later, last - wait);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    timeout = null;</span><br><span class=\"line\">    if (!immediate) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      if (!timeout) context = args = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一部分实现的原理是:</p>\n<p>假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 <code>wait</code> 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 <code>wait</code> 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 <code>later</code> 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了<code>wait</code> 时间之后被调用。</p>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a><code>once</code></h4><p>创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。</p>\n<p>使用 <code>once</code> 是当 <code>before</code> 方法中 <code>count</code> 等于2的情况下进行执行的函数;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向 befor 函数中传递参数为 2</span></span><br><span class=\"line\">_.once = _.partial(_.before, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>before</code></h4><p><code>_.before(count, function)</code></p>\n<p>创建一个函数，调用不超过 <code>count</code> 次, 当<code>count</code>已经被达到的时候，最后一次调用的结果被记住并被返回。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description before 用于返回 调用不超过 count 次数的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Numbet&#125; count 调用函数的次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 被调用的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">before</span>(<span class=\"params\">count, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; count) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// --times</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 times &lt;= 1 将 func 重置为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a><code>after</code></h4><p><code>_.after(count, function)</code></p>\n<p>使用 <code>_.after</code> 的作用是创建一个函数，只有调用 <code>count</code> 次之后才能得到效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description after 用于表示 after 函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Number&#125; 需要的调用次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 规定调用次数之后的调用函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">after</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十一\"><a href=\"#underscore-js-源码分析-十一\" class=\"headerlink\" title=\"underscore.js 源码分析(十一)\"></a>underscore.js 源码分析(十一)</h3><p><code>throttle</code>  <code>debounce</code>  <code>once</code> <code>after</code> <code>before</code></p>\n<h4 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a><code>throttle</code></h4><p>函数节流</p>\n<p><code>_.throttle(function, wait, [options])</code></p>\n<p>使用 <code>throttle</code> 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 <code>wait</code> 毫秒调用一次这个函数。</p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description throttle 用于函数节流</span></span><br><span class=\"line\"><span class=\"comment\">* @param func 运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param wait 等待的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">* @param options</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// previous 这里的意思的记录下上次记录下上次的时间</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里 previous 的作用</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 记录下被调用的时刻</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 当 previous 等于 now 的时候 remaining = wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 记录下等待的时间和 now - previous 的差值</span></span><br><span class=\"line\">      <span class=\"comment\">// 不会执行下面的 if else 函数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 第一次函数执行的时候被调用，因为这个时候 now &gt;&gt; wait remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当超出等待时间之后调用的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回调用的结果，清除 timeout</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 func 执行之后的结果</span></span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 timeout 为 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启一个新的队列等待</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 options.trailing === false, 表示禁用最后一次执行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有超过等待时间</span></span><br><span class=\"line\">        <span class=\"comment\">// remaining 时间之后调用 later函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于在一段时间内应用同一个函数的时候，只是改变的later 函数</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，需要明白一点，函数式编程同样可以首先数据的共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getIndex() &#123;</span><br><span class=\"line\">  let index = 0;</span><br><span class=\"line\">  // return 返回的是一个函数</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let getIndexFn = getIndex();</span><br><span class=\"line\">// 因为在个过程中，通过getIndex 返回的是一个函数</span><br><span class=\"line\">// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次</span><br><span class=\"line\">getIndexFn(); // 1</span><br><span class=\"line\">getIndexFn(); // 2</span><br></pre></td></tr></table></figure>\n<p>练习:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = funciton () &#123;</span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcion () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果第一次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        cleatTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a><code>debounce</code></h4><p><code>_.debounce(function, wait, [immediate])</code></p>\n<p><code>debounce</code> 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>当函数重复调用的时候，函数执行只是发生在最后一次调用的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义执行上下文, 参数， 结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> remainding = <span class=\"number\">0</span>;</span><br><span class=\"line\">  immediate = immediate || <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = _.now();</span><br><span class=\"line\">    remainding = now - previous;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保证使用 immediate 的时候立即执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate &amp;&amp; remainding &gt; wait) &#123;</span><br><span class=\"line\">      previous = _.now();</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if timeout</span></span><br><span class=\"line\">      <span class=\"comment\">// clearTimeout 进行清除 timeout</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      timeout = setTimeout(later, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = _.now() - timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里面继续调用的时候改变的只是这个</span></span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callNow = imemediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下流程图如下:</p>\n<div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<p>关于 <code>later</code> 函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let later = function () &#123;</span><br><span class=\"line\">  let last = now() - timestamp;</span><br><span class=\"line\">  if (last &lt; wait &amp;&amp; last &gt;= 0) &#123;</span><br><span class=\"line\">    timeout = setTimeout(later, last - wait);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    timeout = null;</span><br><span class=\"line\">    if (!immediate) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      if (!timeout) context = args = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一部分实现的原理是:</p>\n<p>假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 <code>wait</code> 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 <code>wait</code> 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 <code>later</code> 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了<code>wait</code> 时间之后被调用。</p>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a><code>once</code></h4><p>创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。</p>\n<p>使用 <code>once</code> 是当 <code>before</code> 方法中 <code>count</code> 等于2的情况下进行执行的函数;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向 befor 函数中传递参数为 2</span></span><br><span class=\"line\">_.once = _.partial(_.before, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>before</code></h4><p><code>_.before(count, function)</code></p>\n<p>创建一个函数，调用不超过 <code>count</code> 次, 当<code>count</code>已经被达到的时候，最后一次调用的结果被记住并被返回。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description before 用于返回 调用不超过 count 次数的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Numbet&#125; count 调用函数的次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 被调用的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">before</span>(<span class=\"params\">count, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; count) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// --times</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 times &lt;= 1 将 func 重置为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a><code>after</code></h4><p><code>_.after(count, function)</code></p>\n<p>使用 <code>_.after</code> 的作用是创建一个函数，只有调用 <code>count</code> 次之后才能得到效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description after 用于表示 after 函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Number&#125; 需要的调用次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 规定调用次数之后的调用函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">after</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></p>\n"},{"title":"underscore.js源码分析(四)","date":"2017-11-23T12:54:45.000Z","_content":"\n### underscore.js 源码分析(四)\n\n`_.min` `_.sortBy` `_.groupBy` `_.indexBy` `_.countBy`\n\n#### `_.min`\n\n`_.min(list, [iteratee], [context])`\n\n类似于使用 `_.max` 这个函数用于获取到 `list` 中的最小值, 其中 `iteratee` 是作为的筛选的依据。\n\n源码如下:\n\n```javascript\n_.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          // 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n#### `_.sortBy`\n\n`_.sortBy(list, iteratee, [context])`\n\n使用 `_.sortBy` 返回的是一个经过排序之后的数组。排序的依据是根据 `iteratee` 函数进行判断的。\n\n返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。\n\n##### 实例\n\n##### 源码分析\n\n```javascript\n_.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n    }), 'value');\n  };\n```\n\n在 `_.sortBy` 函数中存在着多个的函数，下面一一进行分析。\n\n`_.pluck` 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。\n\n看来是用 `_.map...` 这个方法返回的是一个对象数组。\n\n```javascript\n// _.pluck 函数用于\nreturn _.pluck(_.map(obj, function(value, index, list) {\n    // balabala\n}), 'value')\n```\n\n在 `_.map...` 中执行了两步操作: 调用了使用的 `_.map` 方法以及接下来调用 `sort` 方法。\n\n```javascript\n// _.map 方法 obj 是一个对象数组\n// 返回的是一个数组，数组中包含有对象\n// value: 对象的值\n// index: 对象的键\n// criteria: 对象运行iteratee 之后返回的值\n_.map(obj, function(value, index, list) {\n  return {\n    // 对象中返回了三个值\n    // {value: '', index: '', criteria: ''}\n    value: value,\n    index: index,\n    criteria: iteratee(value, index, list)\n  }\n})\n```\n\n对于使用 `_.map` 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  `sort` 方法。\n\n关于数组的 `sort` 方法:\n\n***\n\n关于使用数组的 `sort` 方法\n\n```javascript\nArray.sort(sortBy);\n// sortBy 是一个用来进行排序依据的函数\n```\n\n>使用 sort() 方法的时候，如果不传递 `sortBy` 的时候，使用数组的 `sort` 方法默认的是按照字符编码的顺序进行排序\n\n例如:\n\n```javascript\nlet a = [1, 2, 4, 23];\n// 在原来的数组上进行的改变，并没有生成一个新的数组\na.sort() // [1, 2, 23, 4]\n```\n\n`sortBy` 是用来进行排序的函数:\n\n`sortBy` 接收两个参数，用来对于这两个参数进行比较。\n\n***\n\n 接下来执行的是 `sort` 函数\n\n```javascript\n.sort(function(left, right) {\n  // 在使用 comparator 之后进行比较 left.index - right.index\n  // 为什么呢？\n  return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n})\n```\n\n这个函数的作用是对于上面返回的数组对象进行 `sort` 排序。 返回的是 `_.comparator(left.criteria, right.criteria)` 或者 `left.index - right.index`。\n\n看来是用进行比较。\n\n其中 `_.comparator` 的方法。\n\n```javascript\n// 传入要进行比较的函数参数 a, b\n_.comparator = function(a, b) {\n  // 如果 a === b 返回 0\n    if (a === b) return 0;\n  // 判断 a >= a  b >= b\n  // 为什么呢？\n    var isAComparable = a >= a, isBComparable = b >= b;\n  // 如果其中一个为 true\n    if (isAComparable || isBComparable) {\n      if (isAComparable && !isBComparable) return -1;\n      if (isBComparable && !isAComparable) return 1;\n    }\n    return a > b ? 1 : (b > a) ? -1 : 0;\n  };\n\n```\n\n#### `_.groupBy`\n\n##### 实例\n\n`_.groupBy(list, iteratee, [context])`\n\n将一个集合分为多个的集合，通过使用 `iteratee` 函数进行分组，如果 `iteratee` 是一个字符串而不是一个函数的时候，将这个 `iteratee` 作为元素的属性名来进行分组。\n\n如下:\n\n```javascript\n_.groupBy([1, 2, 4], function(num) {return num % 2;}) // { 0: [2, 4], 1: [1] }\n// 返回一个对象\n// 对象的属性是函数中返回的值\n// 相应属性的值是 list 数组中运行函数得到的相应属性的集合\n```\n\n##### 源码解析\n\n```javascript\n_.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n```\n\n在上面的函数中，存在两个函数: `group` 以及 `_.has`\n\n关于使用 <span id=\"group\"> `group` <span>函数:\n\n```javascript\n// 接收一个 behavior 作为参数\nvar group = function(behavior) {\n  // 返回一个函数，这个函数就是返回的 _.groupBy\n    return function(obj, iteratee, context) {\n      // 定义 result 是一个对象\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        // 对于使用 obj 进行遍历, 获取到 key\n        // 将 list 中的 value, index 传入\n        var key = iteratee(value, index, obj);\n        // 执行 behavior 函数\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n```\n\n在上面的函数中 `behavior` 函数是在 `_.groupBy` 中的函数是下面的这个:\n\n```javascript\nif (_.has(result, key)) result[key].push(value); else result[key] = [value];\n```\n\n使用 `_.has` 方法用来判断对象 `result` 中是否含有属性 `key`:\n\n`_.has` 方法如下:\n\n```javascript\nlet _.has = function (obj, key) {\n  // 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true\n  return obj !== null && Object.prototype.hasOwnProperty.call(obj, key);\n}\n```\n\n####　`_.indexBy`\n\n`_.indexBy(list, iteratee, [context])`\n\n使用 `_.indexBy` 用来返回在列表中每一个元素键的 `iteratee` 函数。 返回一个每一项索引的对象。\n\n>使用 `_.indexBy` 和使用 `_.groupBy` 的区别在于:\n>\n>使用 `_.indexBy` 你需要知道键值对是唯一的，比如:\n>\n>```javascript\n>let list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n>_.indexBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:{name: \"张宁宁\", age: 50}}\n>_.groupBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:[{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}]};\n>```\n>\n>\n\n#####  实例\n\n```javascript\nlet list = [{name: '张三', age: 12}， {name: '李四', age: 13}];\n_.indexBy(list, 'age');\n=> \n{\n    '12': {name: '张三', age: 12},\n    '13': {name: '李四', age: 13}\n}\n```\n\n\n\n##### 源码解析\n\n类似于使用 `_.groupBy` 的源码, 使用 `_.indexBy` 的源码如下:\n\n```javascript\n_.indexBy = group(function(result, value, key) {\n    result[key] = value;\n});\n```\n\n#### `_.countBy`\n\n`_.countBy(list, iteratee, [context])` \n\n返回各组中对象的数量的计数。返回在该组中值的数目。\n\n##### 实例\n\n```javascript\nlet list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n_.countBy(list, function(value) { return value.age });\n=>\n{ 20: 1, 50: 1 }\n```\n\n##### 源码如下\n\n```javascript\nlet _.countBy = group(function(result, value, key) {\n  // 如果在 result 中存在 key result[key] ++ \n  // 否则 将 result[key] = 1;\n  if (_.has(result, key)) result[key] ++; else result[key] = 1; \n})\n```\n\n其中 [`group`](# group) 函数；\n\n####  `shuffle`\n\n##### 实例\n\n用来返回一个随机乱序的副本。并没有改变 `list` 的值。\n\n```javascript\nlet list = [1, 2, 3, 4, 5, 6];\n_.shuffle(list)\n[2,6,3,1,5,4]\n```\n\n##### 源码分析\n\n使用 `_.shuffle` 的源码如下:\n\n```javascript\n_.shuffle = function(obj) {\n  // 获取到数组的值或者对象的值\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n  // var length = set.length\n    var length = set.length;\n  // shuffled 是一个数组\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n    }\n  // 返回生成的随机数组\n    return shuffled;\n};\n```\n\n对于使用 `_.random` 的函数如下:\n\n```javascript\n// 这个函数的目的是用来生成\n_.random = function (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  // 加了一个 1 表示生成的数中可以包括 max\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n```\n\n`Math.floor` : 向下取整\n\n`Math.random`  用于生成 `0 - 1` 之间的随机数;\n\n>注意:  使用的是生成 `min` 和 `max` 之间的值得时候: `min` : inclusive 包括 `max` : exclusive 不包括\n\n```javascript\nMath.random() * (max - min) + min\n// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max\n```\n\n在 `shuffle` 函数中，使用了一个分牌算法：\n\n```javascript\nfor (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n }\n```\n\n\n\n***\n\n使用 分牌算法的原理如下:\n\n存在两个数组 a 和 b\n\n现在想要将 a 中的元素随机生成到 b 中\n\n```sequence\na-->b: index\nnote left of a: a 中遍历\nb-->b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值\nb-->a: rand(随机生成的\\n位于(0, index) 之间的数值)\na--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand\n```\n\n\n\n\n\n***\n\n如上图所示的算法:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks\n```\n\n","source":"_posts/underscore-js源码分析-四.md","raw":"---\ntitle: underscore.js源码分析(四)\ndate: 2017-11-23 20:54:45\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(四)\n\n`_.min` `_.sortBy` `_.groupBy` `_.indexBy` `_.countBy`\n\n#### `_.min`\n\n`_.min(list, [iteratee], [context])`\n\n类似于使用 `_.max` 这个函数用于获取到 `list` 中的最小值, 其中 `iteratee` 是作为的筛选的依据。\n\n源码如下:\n\n```javascript\n_.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          // 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n#### `_.sortBy`\n\n`_.sortBy(list, iteratee, [context])`\n\n使用 `_.sortBy` 返回的是一个经过排序之后的数组。排序的依据是根据 `iteratee` 函数进行判断的。\n\n返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。\n\n##### 实例\n\n##### 源码分析\n\n```javascript\n_.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n    }), 'value');\n  };\n```\n\n在 `_.sortBy` 函数中存在着多个的函数，下面一一进行分析。\n\n`_.pluck` 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。\n\n看来是用 `_.map...` 这个方法返回的是一个对象数组。\n\n```javascript\n// _.pluck 函数用于\nreturn _.pluck(_.map(obj, function(value, index, list) {\n    // balabala\n}), 'value')\n```\n\n在 `_.map...` 中执行了两步操作: 调用了使用的 `_.map` 方法以及接下来调用 `sort` 方法。\n\n```javascript\n// _.map 方法 obj 是一个对象数组\n// 返回的是一个数组，数组中包含有对象\n// value: 对象的值\n// index: 对象的键\n// criteria: 对象运行iteratee 之后返回的值\n_.map(obj, function(value, index, list) {\n  return {\n    // 对象中返回了三个值\n    // {value: '', index: '', criteria: ''}\n    value: value,\n    index: index,\n    criteria: iteratee(value, index, list)\n  }\n})\n```\n\n对于使用 `_.map` 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  `sort` 方法。\n\n关于数组的 `sort` 方法:\n\n***\n\n关于使用数组的 `sort` 方法\n\n```javascript\nArray.sort(sortBy);\n// sortBy 是一个用来进行排序依据的函数\n```\n\n>使用 sort() 方法的时候，如果不传递 `sortBy` 的时候，使用数组的 `sort` 方法默认的是按照字符编码的顺序进行排序\n\n例如:\n\n```javascript\nlet a = [1, 2, 4, 23];\n// 在原来的数组上进行的改变，并没有生成一个新的数组\na.sort() // [1, 2, 23, 4]\n```\n\n`sortBy` 是用来进行排序的函数:\n\n`sortBy` 接收两个参数，用来对于这两个参数进行比较。\n\n***\n\n 接下来执行的是 `sort` 函数\n\n```javascript\n.sort(function(left, right) {\n  // 在使用 comparator 之后进行比较 left.index - right.index\n  // 为什么呢？\n  return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n})\n```\n\n这个函数的作用是对于上面返回的数组对象进行 `sort` 排序。 返回的是 `_.comparator(left.criteria, right.criteria)` 或者 `left.index - right.index`。\n\n看来是用进行比较。\n\n其中 `_.comparator` 的方法。\n\n```javascript\n// 传入要进行比较的函数参数 a, b\n_.comparator = function(a, b) {\n  // 如果 a === b 返回 0\n    if (a === b) return 0;\n  // 判断 a >= a  b >= b\n  // 为什么呢？\n    var isAComparable = a >= a, isBComparable = b >= b;\n  // 如果其中一个为 true\n    if (isAComparable || isBComparable) {\n      if (isAComparable && !isBComparable) return -1;\n      if (isBComparable && !isAComparable) return 1;\n    }\n    return a > b ? 1 : (b > a) ? -1 : 0;\n  };\n\n```\n\n#### `_.groupBy`\n\n##### 实例\n\n`_.groupBy(list, iteratee, [context])`\n\n将一个集合分为多个的集合，通过使用 `iteratee` 函数进行分组，如果 `iteratee` 是一个字符串而不是一个函数的时候，将这个 `iteratee` 作为元素的属性名来进行分组。\n\n如下:\n\n```javascript\n_.groupBy([1, 2, 4], function(num) {return num % 2;}) // { 0: [2, 4], 1: [1] }\n// 返回一个对象\n// 对象的属性是函数中返回的值\n// 相应属性的值是 list 数组中运行函数得到的相应属性的集合\n```\n\n##### 源码解析\n\n```javascript\n_.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n```\n\n在上面的函数中，存在两个函数: `group` 以及 `_.has`\n\n关于使用 <span id=\"group\"> `group` <span>函数:\n\n```javascript\n// 接收一个 behavior 作为参数\nvar group = function(behavior) {\n  // 返回一个函数，这个函数就是返回的 _.groupBy\n    return function(obj, iteratee, context) {\n      // 定义 result 是一个对象\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        // 对于使用 obj 进行遍历, 获取到 key\n        // 将 list 中的 value, index 传入\n        var key = iteratee(value, index, obj);\n        // 执行 behavior 函数\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n```\n\n在上面的函数中 `behavior` 函数是在 `_.groupBy` 中的函数是下面的这个:\n\n```javascript\nif (_.has(result, key)) result[key].push(value); else result[key] = [value];\n```\n\n使用 `_.has` 方法用来判断对象 `result` 中是否含有属性 `key`:\n\n`_.has` 方法如下:\n\n```javascript\nlet _.has = function (obj, key) {\n  // 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true\n  return obj !== null && Object.prototype.hasOwnProperty.call(obj, key);\n}\n```\n\n####　`_.indexBy`\n\n`_.indexBy(list, iteratee, [context])`\n\n使用 `_.indexBy` 用来返回在列表中每一个元素键的 `iteratee` 函数。 返回一个每一项索引的对象。\n\n>使用 `_.indexBy` 和使用 `_.groupBy` 的区别在于:\n>\n>使用 `_.indexBy` 你需要知道键值对是唯一的，比如:\n>\n>```javascript\n>let list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n>_.indexBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:{name: \"张宁宁\", age: 50}}\n>_.groupBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:[{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}]};\n>```\n>\n>\n\n#####  实例\n\n```javascript\nlet list = [{name: '张三', age: 12}， {name: '李四', age: 13}];\n_.indexBy(list, 'age');\n=> \n{\n    '12': {name: '张三', age: 12},\n    '13': {name: '李四', age: 13}\n}\n```\n\n\n\n##### 源码解析\n\n类似于使用 `_.groupBy` 的源码, 使用 `_.indexBy` 的源码如下:\n\n```javascript\n_.indexBy = group(function(result, value, key) {\n    result[key] = value;\n});\n```\n\n#### `_.countBy`\n\n`_.countBy(list, iteratee, [context])` \n\n返回各组中对象的数量的计数。返回在该组中值的数目。\n\n##### 实例\n\n```javascript\nlet list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n_.countBy(list, function(value) { return value.age });\n=>\n{ 20: 1, 50: 1 }\n```\n\n##### 源码如下\n\n```javascript\nlet _.countBy = group(function(result, value, key) {\n  // 如果在 result 中存在 key result[key] ++ \n  // 否则 将 result[key] = 1;\n  if (_.has(result, key)) result[key] ++; else result[key] = 1; \n})\n```\n\n其中 [`group`](# group) 函数；\n\n####  `shuffle`\n\n##### 实例\n\n用来返回一个随机乱序的副本。并没有改变 `list` 的值。\n\n```javascript\nlet list = [1, 2, 3, 4, 5, 6];\n_.shuffle(list)\n[2,6,3,1,5,4]\n```\n\n##### 源码分析\n\n使用 `_.shuffle` 的源码如下:\n\n```javascript\n_.shuffle = function(obj) {\n  // 获取到数组的值或者对象的值\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n  // var length = set.length\n    var length = set.length;\n  // shuffled 是一个数组\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n    }\n  // 返回生成的随机数组\n    return shuffled;\n};\n```\n\n对于使用 `_.random` 的函数如下:\n\n```javascript\n// 这个函数的目的是用来生成\n_.random = function (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  // 加了一个 1 表示生成的数中可以包括 max\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n```\n\n`Math.floor` : 向下取整\n\n`Math.random`  用于生成 `0 - 1` 之间的随机数;\n\n>注意:  使用的是生成 `min` 和 `max` 之间的值得时候: `min` : inclusive 包括 `max` : exclusive 不包括\n\n```javascript\nMath.random() * (max - min) + min\n// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max\n```\n\n在 `shuffle` 函数中，使用了一个分牌算法：\n\n```javascript\nfor (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n }\n```\n\n\n\n***\n\n使用 分牌算法的原理如下:\n\n存在两个数组 a 和 b\n\n现在想要将 a 中的元素随机生成到 b 中\n\n```sequence\na-->b: index\nnote left of a: a 中遍历\nb-->b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值\nb-->a: rand(随机生成的\\n位于(0, index) 之间的数值)\na--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand\n```\n\n\n\n\n\n***\n\n如上图所示的算法:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks\n```\n\n","slug":"underscore-js源码分析-四","published":1,"updated":"2020-09-14T06:36:25.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t89003xi2osqtxgpolf","content":"<h3 id=\"underscore-js-源码分析-四\"><a href=\"#underscore-js-源码分析-四\" class=\"headerlink\" title=\"underscore.js 源码分析(四)\"></a>underscore.js 源码分析(四)</h3><p><code>_.min</code> <code>_.sortBy</code> <code>_.groupBy</code> <code>_.indexBy</code> <code>_.countBy</code></p>\n<h4 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"_.min\"></a><code>_.min</code></h4><p><code>_.min(list, [iteratee], [context])</code></p>\n<p>类似于使用 <code>_.max</code> 这个函数用于获取到 <code>list</code> 中的最小值, 其中 <code>iteratee</code> 是作为的筛选的依据。</p>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值</span></span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a><code>_.sortBy</code></h4><p><code>_.sortBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.sortBy</code> 返回的是一个经过排序之后的数组。排序的依据是根据 <code>iteratee</code> 函数进行判断的。</p>\n<p>返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">        index: index,</span><br><span class=\"line\">        criteria: iteratee(value, index, list)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.sortBy</code> 函数中存在着多个的函数，下面一一进行分析。</p>\n<p><code>_.pluck</code> 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。</p>\n<p>看来是用 <code>_.map...</code> 这个方法返回的是一个对象数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.pluck 函数用于</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// balabala</span></span><br><span class=\"line\">&#125;), <span class=\"string\">'value'</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.map...</code> 中执行了两步操作: 调用了使用的 <code>_.map</code> 方法以及接下来调用 <code>sort</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.map 方法 obj 是一个对象数组</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个数组，数组中包含有对象</span></span><br><span class=\"line\"><span class=\"comment\">// value: 对象的值</span></span><br><span class=\"line\"><span class=\"comment\">// index: 对象的键</span></span><br><span class=\"line\"><span class=\"comment\">// criteria: 对象运行iteratee 之后返回的值</span></span><br><span class=\"line\">_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象中返回了三个值</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: '', index: '', criteria: ''&#125;</span></span><br><span class=\"line\">    value: value,</span><br><span class=\"line\">    index: index,</span><br><span class=\"line\">    criteria: iteratee(value, index, list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.map</code> 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  <code>sort</code> 方法。</p>\n<p>关于数组的 <code>sort</code> 方法:</p>\n<hr>\n<p>关于使用数组的 <code>sort</code> 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.sort(sortBy);</span><br><span class=\"line\"><span class=\"comment\">// sortBy 是一个用来进行排序依据的函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 sort() 方法的时候，如果不传递 <code>sortBy</code> 的时候，使用数组的 <code>sort</code> 方法默认的是按照字符编码的顺序进行排序</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"comment\">// 在原来的数组上进行的改变，并没有生成一个新的数组</span></span><br><span class=\"line\">a.sort() <span class=\"comment\">// [1, 2, 23, 4]</span></span><br></pre></td></tr></table></figure>\n<p><code>sortBy</code> 是用来进行排序的函数:</p>\n<p><code>sortBy</code> 接收两个参数，用来对于这两个参数进行比较。</p>\n<hr>\n<p> 接下来执行的是 <code>sort</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在使用 comparator 之后进行比较 left.index - right.index</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个函数的作用是对于上面返回的数组对象进行 <code>sort</code> 排序。 返回的是 <code>_.comparator(left.criteria, right.criteria)</code> 或者 <code>left.index - right.index</code>。</p>\n<p>看来是用进行比较。</p>\n<p>其中 <code>_.comparator</code> 的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入要进行比较的函数参数 a, b</span></span><br><span class=\"line\">_.comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a === b 返回 0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 a &gt;= a  b &gt;= b</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAComparable = a &gt;= a, isBComparable = b &gt;= b;</span><br><span class=\"line\">  <span class=\"comment\">// 如果其中一个为 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAComparable || isBComparable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isAComparable &amp;&amp; !isBComparable) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isBComparable &amp;&amp; !isAComparable) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? <span class=\"number\">1</span> : (b &gt; a) ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"_.groupBy\"></a><code>_.groupBy</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.groupBy(list, iteratee, [context])</code></p>\n<p>将一个集合分为多个的集合，通过使用 <code>iteratee</code> 函数进行分组，如果 <code>iteratee</code> 是一个字符串而不是一个函数的时候，将这个 <code>iteratee</code> 作为元素的属性名来进行分组。</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num % <span class=\"number\">2</span>;&#125;) <span class=\"comment\">// &#123; 0: [2, 4], 1: [1] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 对象的属性是函数中返回的值</span></span><br><span class=\"line\"><span class=\"comment\">// 相应属性的值是 list 数组中运行函数得到的相应属性的集合</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，存在两个函数: <code>group</code> 以及 <code>_.has</code></p>\n<p>关于使用 <span id=\"group\"> <code>group</code> <span>函数:</span></span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收一个 behavior 作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数，这个函数就是返回的 _.groupBy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 result 是一个对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对于使用 obj 进行遍历, 获取到 key</span></span><br><span class=\"line\">        <span class=\"comment\">// 将 list 中的 value, index 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 执行 behavior 函数</span></span><br><span class=\"line\">        behavior(result, value, key);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中 <code>behavior</code> 函数是在 <code>_.groupBy</code> 中的函数是下面的这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_.has</code> 方法用来判断对象 <code>result</code> 中是否含有属性 <code>key</code>:</p>\n<p><code>_.has</code> 方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.has = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_.indexBy</code></p>\n<p><code>_.indexBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.indexBy</code> 用来返回在列表中每一个元素键的 <code>iteratee</code> 函数。 返回一个每一项索引的对象。</p>\n<blockquote>\n<p>使用 <code>_.indexBy</code> 和使用 <code>_.groupBy</code> 的区别在于:</p>\n<p>使用 <code>_.indexBy</code> 你需要知道键值对是唯一的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">&gt;_.indexBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;&#125;</span><br><span class=\"line\">&gt;_.groupBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:[&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;]&#125;;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;， &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;];</span><br><span class=\"line\">_.indexBy(list, <span class=\"string\">'age'</span>);</span><br><span class=\"line\">=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'12'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'13'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>类似于使用 <code>_.groupBy</code> 的源码, 使用 <code>_.indexBy</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    result[key] = value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"countBy\"><a href=\"#countBy\" class=\"headerlink\" title=\"_.countBy\"></a><code>_.countBy</code></h4><p><code>_.countBy(list, iteratee, [context])</code> </p>\n<p>返回各组中对象的数量的计数。返回在该组中值的数目。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">_.countBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.age &#125;);</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\">&#123; <span class=\"number\">20</span>: <span class=\"number\">1</span>, <span class=\"number\">50</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下\"></a>源码如下</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在 result 中存在 key result[key] ++ </span></span><br><span class=\"line\">  <span class=\"comment\">// 否则 将 result[key] = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.has(result, key)) result[key] ++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中 <a href=\"# group\"><code>group</code></a> 函数；</p>\n<h4 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a><code>shuffle</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>用来返回一个随机乱序的副本。并没有改变 <code>list</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">_.shuffle(list)</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.shuffle</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到数组的值或者对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = obj &amp;&amp; obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">  // var length = <span class=\"keyword\">set</span>.length</span><br><span class=\"line\">    var length = <span class=\"keyword\">set</span>.length;</span><br><span class=\"line\">  // shuffled 是一个数组</span><br><span class=\"line\">    var shuffled = Array(length);</span><br><span class=\"line\">    for (var index = 0, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = <span class=\"keyword\">set</span>[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // 返回生成的随机数组</span><br><span class=\"line\">    return shuffled;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.random</code> 的函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数的目的是用来生成</span></span><br><span class=\"line\">_.random = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    max = min;</span><br><span class=\"line\">    min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加了一个 1 表示生成的数中可以包括 max</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Math.floor</code> : 向下取整</p>\n<p><code>Math.random</code>  用于生成 <code>0 - 1</code> 之间的随机数;</p>\n<blockquote>\n<p>注意:  使用的是生成 <code>min</code> 和 <code>max</code> 之间的值得时候: <code>min</code> : inclusive 包括 <code>max</code> : exclusive 不包括</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random() * (max - min) + min</span><br><span class=\"line\"><span class=\"comment\">// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>shuffle</code> 函数中，使用了一个分牌算法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = <span class=\"keyword\">set</span>[index];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用 分牌算法的原理如下:</p>\n<p>存在两个数组 a 和 b</p>\n<p>现在想要将 a 中的元素随机生成到 b 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a--&gt;b: index</span><br><span class=\"line\">note left of a: a 中遍历</span><br><span class=\"line\">b--&gt;b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值</span><br><span class=\"line\">b--&gt;a: rand(随机生成的\\n位于(0, index) 之间的数值)</span><br><span class=\"line\">a--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如上图所示的算法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-四\"><a href=\"#underscore-js-源码分析-四\" class=\"headerlink\" title=\"underscore.js 源码分析(四)\"></a>underscore.js 源码分析(四)</h3><p><code>_.min</code> <code>_.sortBy</code> <code>_.groupBy</code> <code>_.indexBy</code> <code>_.countBy</code></p>\n<h4 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"_.min\"></a><code>_.min</code></h4><p><code>_.min(list, [iteratee], [context])</code></p>\n<p>类似于使用 <code>_.max</code> 这个函数用于获取到 <code>list</code> 中的最小值, 其中 <code>iteratee</code> 是作为的筛选的依据。</p>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值</span></span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a><code>_.sortBy</code></h4><p><code>_.sortBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.sortBy</code> 返回的是一个经过排序之后的数组。排序的依据是根据 <code>iteratee</code> 函数进行判断的。</p>\n<p>返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">        index: index,</span><br><span class=\"line\">        criteria: iteratee(value, index, list)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.sortBy</code> 函数中存在着多个的函数，下面一一进行分析。</p>\n<p><code>_.pluck</code> 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。</p>\n<p>看来是用 <code>_.map...</code> 这个方法返回的是一个对象数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.pluck 函数用于</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// balabala</span></span><br><span class=\"line\">&#125;), <span class=\"string\">'value'</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.map...</code> 中执行了两步操作: 调用了使用的 <code>_.map</code> 方法以及接下来调用 <code>sort</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.map 方法 obj 是一个对象数组</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个数组，数组中包含有对象</span></span><br><span class=\"line\"><span class=\"comment\">// value: 对象的值</span></span><br><span class=\"line\"><span class=\"comment\">// index: 对象的键</span></span><br><span class=\"line\"><span class=\"comment\">// criteria: 对象运行iteratee 之后返回的值</span></span><br><span class=\"line\">_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象中返回了三个值</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: '', index: '', criteria: ''&#125;</span></span><br><span class=\"line\">    value: value,</span><br><span class=\"line\">    index: index,</span><br><span class=\"line\">    criteria: iteratee(value, index, list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.map</code> 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  <code>sort</code> 方法。</p>\n<p>关于数组的 <code>sort</code> 方法:</p>\n<hr>\n<p>关于使用数组的 <code>sort</code> 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.sort(sortBy);</span><br><span class=\"line\"><span class=\"comment\">// sortBy 是一个用来进行排序依据的函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 sort() 方法的时候，如果不传递 <code>sortBy</code> 的时候，使用数组的 <code>sort</code> 方法默认的是按照字符编码的顺序进行排序</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"comment\">// 在原来的数组上进行的改变，并没有生成一个新的数组</span></span><br><span class=\"line\">a.sort() <span class=\"comment\">// [1, 2, 23, 4]</span></span><br></pre></td></tr></table></figure>\n<p><code>sortBy</code> 是用来进行排序的函数:</p>\n<p><code>sortBy</code> 接收两个参数，用来对于这两个参数进行比较。</p>\n<hr>\n<p> 接下来执行的是 <code>sort</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在使用 comparator 之后进行比较 left.index - right.index</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个函数的作用是对于上面返回的数组对象进行 <code>sort</code> 排序。 返回的是 <code>_.comparator(left.criteria, right.criteria)</code> 或者 <code>left.index - right.index</code>。</p>\n<p>看来是用进行比较。</p>\n<p>其中 <code>_.comparator</code> 的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入要进行比较的函数参数 a, b</span></span><br><span class=\"line\">_.comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a === b 返回 0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 a &gt;= a  b &gt;= b</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAComparable = a &gt;= a, isBComparable = b &gt;= b;</span><br><span class=\"line\">  <span class=\"comment\">// 如果其中一个为 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAComparable || isBComparable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isAComparable &amp;&amp; !isBComparable) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isBComparable &amp;&amp; !isAComparable) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? <span class=\"number\">1</span> : (b &gt; a) ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"_.groupBy\"></a><code>_.groupBy</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.groupBy(list, iteratee, [context])</code></p>\n<p>将一个集合分为多个的集合，通过使用 <code>iteratee</code> 函数进行分组，如果 <code>iteratee</code> 是一个字符串而不是一个函数的时候，将这个 <code>iteratee</code> 作为元素的属性名来进行分组。</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num % <span class=\"number\">2</span>;&#125;) <span class=\"comment\">// &#123; 0: [2, 4], 1: [1] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 对象的属性是函数中返回的值</span></span><br><span class=\"line\"><span class=\"comment\">// 相应属性的值是 list 数组中运行函数得到的相应属性的集合</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，存在两个函数: <code>group</code> 以及 <code>_.has</code></p>\n<p>关于使用 <span id=\"group\"> <code>group</code> <span>函数:</span></span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收一个 behavior 作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数，这个函数就是返回的 _.groupBy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 result 是一个对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对于使用 obj 进行遍历, 获取到 key</span></span><br><span class=\"line\">        <span class=\"comment\">// 将 list 中的 value, index 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 执行 behavior 函数</span></span><br><span class=\"line\">        behavior(result, value, key);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中 <code>behavior</code> 函数是在 <code>_.groupBy</code> 中的函数是下面的这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_.has</code> 方法用来判断对象 <code>result</code> 中是否含有属性 <code>key</code>:</p>\n<p><code>_.has</code> 方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.has = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_.indexBy</code></p>\n<p><code>_.indexBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.indexBy</code> 用来返回在列表中每一个元素键的 <code>iteratee</code> 函数。 返回一个每一项索引的对象。</p>\n<blockquote>\n<p>使用 <code>_.indexBy</code> 和使用 <code>_.groupBy</code> 的区别在于:</p>\n<p>使用 <code>_.indexBy</code> 你需要知道键值对是唯一的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">&gt;_.indexBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;&#125;</span><br><span class=\"line\">&gt;_.groupBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:[&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;]&#125;;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;， &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;];</span><br><span class=\"line\">_.indexBy(list, <span class=\"string\">'age'</span>);</span><br><span class=\"line\">=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'12'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'13'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>类似于使用 <code>_.groupBy</code> 的源码, 使用 <code>_.indexBy</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    result[key] = value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"countBy\"><a href=\"#countBy\" class=\"headerlink\" title=\"_.countBy\"></a><code>_.countBy</code></h4><p><code>_.countBy(list, iteratee, [context])</code> </p>\n<p>返回各组中对象的数量的计数。返回在该组中值的数目。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">_.countBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.age &#125;);</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\">&#123; <span class=\"number\">20</span>: <span class=\"number\">1</span>, <span class=\"number\">50</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下\"></a>源码如下</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在 result 中存在 key result[key] ++ </span></span><br><span class=\"line\">  <span class=\"comment\">// 否则 将 result[key] = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.has(result, key)) result[key] ++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中 <a href=\"# group\"><code>group</code></a> 函数；</p>\n<h4 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a><code>shuffle</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>用来返回一个随机乱序的副本。并没有改变 <code>list</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">_.shuffle(list)</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.shuffle</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到数组的值或者对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">set</span> = obj &amp;&amp; obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">  // var length = <span class=\"keyword\">set</span>.length</span><br><span class=\"line\">    var length = <span class=\"keyword\">set</span>.length;</span><br><span class=\"line\">  // shuffled 是一个数组</span><br><span class=\"line\">    var shuffled = Array(length);</span><br><span class=\"line\">    for (var index = 0, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = <span class=\"keyword\">set</span>[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  // 返回生成的随机数组</span><br><span class=\"line\">    return shuffled;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.random</code> 的函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数的目的是用来生成</span></span><br><span class=\"line\">_.random = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    max = min;</span><br><span class=\"line\">    min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加了一个 1 表示生成的数中可以包括 max</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Math.floor</code> : 向下取整</p>\n<p><code>Math.random</code>  用于生成 <code>0 - 1</code> 之间的随机数;</p>\n<blockquote>\n<p>注意:  使用的是生成 <code>min</code> 和 <code>max</code> 之间的值得时候: <code>min</code> : inclusive 包括 <code>max</code> : exclusive 不包括</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random() * (max - min) + min</span><br><span class=\"line\"><span class=\"comment\">// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>shuffle</code> 函数中，使用了一个分牌算法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = <span class=\"keyword\">set</span>[index];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用 分牌算法的原理如下:</p>\n<p>存在两个数组 a 和 b</p>\n<p>现在想要将 a 中的元素随机生成到 b 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a--&gt;b: index</span><br><span class=\"line\">note left of a: a 中遍历</span><br><span class=\"line\">b--&gt;b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值</span><br><span class=\"line\">b--&gt;a: rand(随机生成的\\n位于(0, index) 之间的数值)</span><br><span class=\"line\">a--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如上图所示的算法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十四)","date":"2017-12-12T13:44:03.000Z","_content":"\n### underscore.js 源码分析(十四)\n\n`extend` `extendOwn` `pick` `omit`  `default`\n\n#### `extend`\n\n`_.extend(destination, *sources)`\n\n将多个对象  `souces` 覆盖到 `destination` 上面，返回被覆盖掉的 `destination` 上面。\n\n使用 `extend` 类似于使用 `Object.assign` 用来将多个对象进行合并。\n\n自己写的代码如下:\n\n```javascript\nfunction extend(destination) {\n  let sources = Array.prototyep.slice.call(arguments, 1);\n  let len = sources.length;\n  for (let i = 0; i < len; i++) {\n    let currrentSource = sources[i];\n    let key = _.keys(currentSource);\n    for (let index = 0; index < keys.length; index++) {\n      destination[keys[index]] = currentScource[keys[index]];\n    }\n  }\n}\n```\n\n源码分析:\n\n```javascript\nlet createAssigner = function (keysFunc, undefinedOnly) {\n  return function (obj) {\n    let length = arguments.length;\n    // 进行边界处理\n    // 当传入一个参数的时候或者 obj === null 的时候, 返回 obj\n    if (length < 2 || obj === null) return obj;\n    for (let index = 1; index < length; index++) {\n      // 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得\n      let source = arguments[index];\n           keys = keysFunc(source);\n           l = keys.length;\n      for (let i = 0; i < l; i++) {\n        let key = keys[i];\n        // 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候\n        // 接下来判断 obj[key] 是否为 undefined(void 0)\n        if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n      }     \n    }\n  }\n}\n```\n\n#### `extendOwn`\n\n使用  `extendOwn` 实现的效果类似于使用  `extends`, 实现的效果是只是复制自己的属性到目标对象。\n\n`_.extendOwn(destination, *source)`\n\n复制 `source` 属性的值到 `destination` 只是复制自身的属性。(不包括继承的属性)\n\n这个函数与 `_.extend` 的不同之处在于不会将 `source` 对象中继承到的属性复制到 `destination` 之中。\n\n使用 `extendOwn` 与 `extend` 的不同在于: 源码不同\n\n```javascript\n// 使用 _.allKeys 获得到包括自身和继承得到的属性\n_.extend = createAssigner(_.allKeys);\n// 使用 extendOwn 获得到仅仅包括自身的属性\n_.extendOwn = _.assign = createAssigner(_.keys);\n```\n\n#### `pick`\n\n`_.pick(object, *keys)`  \n\n使用这个属性用于返回 `object` 副本, 过滤出  `keys(有效的键组成的数组)` 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key\n\n使用 `pick` 的源码如下。\n\n```javascript\n_.pick = function(object, oiteratee, context) {\n  let result = {}, obj = object, iteratee, keys;\n  if (obj == null) return result;\n  // 如果 oiteratee 是一个函数的话\n  if (_.isFunction(oiteratee)) {\n    // 使用 _.allKeys 获得到 obj 中的所有键\n    keys = _.allKeys(obj);\n    iteratee = optiomizeCb(oiteratee, context);\n  } else {\n    // 如果 oiteratee 不是一个函数的时候\n    // 表示这时候用于筛选出对象 object 中包含 keys 的内容\n    // 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识\n    keys = flatten(arguments, false, false, 1);\n    // 返回在 obj 中的 key\n    iteratee = function(value, key, obj) { return key in obj; };\n    obj = Object(obj);\n  }\n  for (let i = 0; length = keys.length; i < length; i++) {\n    let key = keys[i];\n    let value = obj[key];\n    // 这里通过使用不同的函数来实现对于不同情况下的处理条件\n    // 通过改变 iteratee 函数的不同来实现不同的处理流程\n    // if (iteratee(value, key, obj))\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n}\n```\n\n上面中有一个 `flatten` 函数, 使用 `flatten` 函数的目的是将多层嵌套的数组转化为一维数组。\n\n`flatten`源码:\n\n```\nlet flatten = function(input, shallow, strict, startIndex) {\n  let output = [], idx = 0;\n  for (let i = startIndex || 0, length = getLength(input); i < length; i++) {\n    let value = input[i];\n    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n      if (!shallow) value = flatten(value, shallow, strict);\n      let j = 0; len = value.length;\n      output.length += len;\n      while (j < len) {\n        output[idex++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n```\n\n自己写的函数: `pick`\n\n```javascript\nfunction pick(obj, oiteratee) {\n  // 边界处理 如果 obj === null 或者 typeof obj !== 'object'\n  // 返回一个空对象\n  if (obj === null || typeof obj !== 'object') {\n    return {};\n  }\n  let output = {};\n  let keys = Object.keys(obj);\n  let len = keys.length;\n  let iteratee;\n  let choiceKeys = Array.prototype.slice.call(arguments, 1);\n  if (typeof oiteratee === 'function') {\n    iteratee = oiteratee;\n  } else {\n    iteratee = function (value, key) { retutn choiceKeys.includes(key); };\n  }\n  for (let i = 0; i < len; i++) {\n    let key = keys[i];\n    if (iteratee(obj[key], key)) output[key] = obj[key];\n  }\n  return output;\n}\n```\n\n#### `omit` \n\n`omit(object, *keys)`\n\n使用 `omit` 函数的目的是与使用 `pick` 函数相反，返回一个 `object` 副本，过滤出除去  `keys` 中的属性值，或者接收一个判断函数，指定忽略哪一个 `key` 值。\n\n`omit` 源码如下:\n\n```javascript\n_.omit = function (obj, iteratee, context) {\n  if (_.isFunction(iteratee))　{\n    iteratee = _.negate(iteratee);\n  } else {\n    let keys = _.map(flatten(arguments, false, false, 1), String);\n    iteratee = function() {\n      return !_.contains(keys, key)\n    };\n  }\n  return _.pick(obj, iteratee, context);\n}\n```\n\n####   `default`\n\n`_.defaults(object, *defaults)`\n\n使用 `default` 的目的是使用 `default` 对象填充 `object` 中的 `undefined` 属性，并且返回这个 `object`。\n\n当 `object` 中存在 `default` 中的属性被填充的时候，使用 `defaults` 方法不会起作用。\n\n使用 `_.defaults` 方法的时候源码如下:\n\n```javascript\n// 使用 createAssigner(keysFunc, undefinedOnly);\n// 传递两个参数： keysFunc 表示对于键的处理函数\n// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性\n_.default = createAssigner(_.allKeys, true);\n```\n\n在 `createAssigner` 的函数中使用 `_.default` 方法主要是使用下面的这句函数:\n\n```\n// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined\nif (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n```\n\n","source":"_posts/underscore-js源码分析-十四.md","raw":"---\ntitle: underscore.js源码分析(十四)\ndate: 2017-12-12 21:44:03\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十四)\n\n`extend` `extendOwn` `pick` `omit`  `default`\n\n#### `extend`\n\n`_.extend(destination, *sources)`\n\n将多个对象  `souces` 覆盖到 `destination` 上面，返回被覆盖掉的 `destination` 上面。\n\n使用 `extend` 类似于使用 `Object.assign` 用来将多个对象进行合并。\n\n自己写的代码如下:\n\n```javascript\nfunction extend(destination) {\n  let sources = Array.prototyep.slice.call(arguments, 1);\n  let len = sources.length;\n  for (let i = 0; i < len; i++) {\n    let currrentSource = sources[i];\n    let key = _.keys(currentSource);\n    for (let index = 0; index < keys.length; index++) {\n      destination[keys[index]] = currentScource[keys[index]];\n    }\n  }\n}\n```\n\n源码分析:\n\n```javascript\nlet createAssigner = function (keysFunc, undefinedOnly) {\n  return function (obj) {\n    let length = arguments.length;\n    // 进行边界处理\n    // 当传入一个参数的时候或者 obj === null 的时候, 返回 obj\n    if (length < 2 || obj === null) return obj;\n    for (let index = 1; index < length; index++) {\n      // 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得\n      let source = arguments[index];\n           keys = keysFunc(source);\n           l = keys.length;\n      for (let i = 0; i < l; i++) {\n        let key = keys[i];\n        // 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候\n        // 接下来判断 obj[key] 是否为 undefined(void 0)\n        if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n      }     \n    }\n  }\n}\n```\n\n#### `extendOwn`\n\n使用  `extendOwn` 实现的效果类似于使用  `extends`, 实现的效果是只是复制自己的属性到目标对象。\n\n`_.extendOwn(destination, *source)`\n\n复制 `source` 属性的值到 `destination` 只是复制自身的属性。(不包括继承的属性)\n\n这个函数与 `_.extend` 的不同之处在于不会将 `source` 对象中继承到的属性复制到 `destination` 之中。\n\n使用 `extendOwn` 与 `extend` 的不同在于: 源码不同\n\n```javascript\n// 使用 _.allKeys 获得到包括自身和继承得到的属性\n_.extend = createAssigner(_.allKeys);\n// 使用 extendOwn 获得到仅仅包括自身的属性\n_.extendOwn = _.assign = createAssigner(_.keys);\n```\n\n#### `pick`\n\n`_.pick(object, *keys)`  \n\n使用这个属性用于返回 `object` 副本, 过滤出  `keys(有效的键组成的数组)` 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key\n\n使用 `pick` 的源码如下。\n\n```javascript\n_.pick = function(object, oiteratee, context) {\n  let result = {}, obj = object, iteratee, keys;\n  if (obj == null) return result;\n  // 如果 oiteratee 是一个函数的话\n  if (_.isFunction(oiteratee)) {\n    // 使用 _.allKeys 获得到 obj 中的所有键\n    keys = _.allKeys(obj);\n    iteratee = optiomizeCb(oiteratee, context);\n  } else {\n    // 如果 oiteratee 不是一个函数的时候\n    // 表示这时候用于筛选出对象 object 中包含 keys 的内容\n    // 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识\n    keys = flatten(arguments, false, false, 1);\n    // 返回在 obj 中的 key\n    iteratee = function(value, key, obj) { return key in obj; };\n    obj = Object(obj);\n  }\n  for (let i = 0; length = keys.length; i < length; i++) {\n    let key = keys[i];\n    let value = obj[key];\n    // 这里通过使用不同的函数来实现对于不同情况下的处理条件\n    // 通过改变 iteratee 函数的不同来实现不同的处理流程\n    // if (iteratee(value, key, obj))\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n}\n```\n\n上面中有一个 `flatten` 函数, 使用 `flatten` 函数的目的是将多层嵌套的数组转化为一维数组。\n\n`flatten`源码:\n\n```\nlet flatten = function(input, shallow, strict, startIndex) {\n  let output = [], idx = 0;\n  for (let i = startIndex || 0, length = getLength(input); i < length; i++) {\n    let value = input[i];\n    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n      if (!shallow) value = flatten(value, shallow, strict);\n      let j = 0; len = value.length;\n      output.length += len;\n      while (j < len) {\n        output[idex++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n```\n\n自己写的函数: `pick`\n\n```javascript\nfunction pick(obj, oiteratee) {\n  // 边界处理 如果 obj === null 或者 typeof obj !== 'object'\n  // 返回一个空对象\n  if (obj === null || typeof obj !== 'object') {\n    return {};\n  }\n  let output = {};\n  let keys = Object.keys(obj);\n  let len = keys.length;\n  let iteratee;\n  let choiceKeys = Array.prototype.slice.call(arguments, 1);\n  if (typeof oiteratee === 'function') {\n    iteratee = oiteratee;\n  } else {\n    iteratee = function (value, key) { retutn choiceKeys.includes(key); };\n  }\n  for (let i = 0; i < len; i++) {\n    let key = keys[i];\n    if (iteratee(obj[key], key)) output[key] = obj[key];\n  }\n  return output;\n}\n```\n\n#### `omit` \n\n`omit(object, *keys)`\n\n使用 `omit` 函数的目的是与使用 `pick` 函数相反，返回一个 `object` 副本，过滤出除去  `keys` 中的属性值，或者接收一个判断函数，指定忽略哪一个 `key` 值。\n\n`omit` 源码如下:\n\n```javascript\n_.omit = function (obj, iteratee, context) {\n  if (_.isFunction(iteratee))　{\n    iteratee = _.negate(iteratee);\n  } else {\n    let keys = _.map(flatten(arguments, false, false, 1), String);\n    iteratee = function() {\n      return !_.contains(keys, key)\n    };\n  }\n  return _.pick(obj, iteratee, context);\n}\n```\n\n####   `default`\n\n`_.defaults(object, *defaults)`\n\n使用 `default` 的目的是使用 `default` 对象填充 `object` 中的 `undefined` 属性，并且返回这个 `object`。\n\n当 `object` 中存在 `default` 中的属性被填充的时候，使用 `defaults` 方法不会起作用。\n\n使用 `_.defaults` 方法的时候源码如下:\n\n```javascript\n// 使用 createAssigner(keysFunc, undefinedOnly);\n// 传递两个参数： keysFunc 表示对于键的处理函数\n// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性\n_.default = createAssigner(_.allKeys, true);\n```\n\n在 `createAssigner` 的函数中使用 `_.default` 方法主要是使用下面的这句函数:\n\n```\n// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined\nif (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n```\n\n","slug":"underscore-js源码分析-十四","published":1,"updated":"2020-09-14T06:36:25.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8a003zi2os0e5dx9x8","content":"<h3 id=\"underscore-js-源码分析-十四\"><a href=\"#underscore-js-源码分析-十四\" class=\"headerlink\" title=\"underscore.js 源码分析(十四)\"></a>underscore.js 源码分析(十四)</h3><p><code>extend</code> <code>extendOwn</code> <code>pick</code> <code>omit</code>  <code>default</code></p>\n<h4 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a><code>extend</code></h4><p><code>_.extend(destination, *sources)</code></p>\n<p>将多个对象  <code>souces</code> 覆盖到 <code>destination</code> 上面，返回被覆盖掉的 <code>destination</code> 上面。</p>\n<p>使用 <code>extend</code> 类似于使用 <code>Object.assign</code> 用来将多个对象进行合并。</p>\n<p>自己写的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">destination</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sources = <span class=\"built_in\">Array</span>.prototyep.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = sources.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currrentSource = sources[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = _.keys(currentSource);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; keys.length; index++) &#123;</span><br><span class=\"line\">      destination[keys[index]] = currentScource[keys[index]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"comment\">// 进行边界处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 当传入一个参数的时候或者 obj === null 的时候, 返回 obj</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\">           keys = keysFunc(source);</span><br><span class=\"line\">           l = keys.length;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"comment\">// 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 接下来判断 obj[key] 是否为 undefined(void 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"extendOwn\"><a href=\"#extendOwn\" class=\"headerlink\" title=\"extendOwn\"></a><code>extendOwn</code></h4><p>使用  <code>extendOwn</code> 实现的效果类似于使用  <code>extends</code>, 实现的效果是只是复制自己的属性到目标对象。</p>\n<p><code>_.extendOwn(destination, *source)</code></p>\n<p>复制 <code>source</code> 属性的值到 <code>destination</code> 只是复制自身的属性。(不包括继承的属性)</p>\n<p>这个函数与 <code>_.extend</code> 的不同之处在于不会将 <code>source</code> 对象中继承到的属性复制到 <code>destination</code> 之中。</p>\n<p>使用 <code>extendOwn</code> 与 <code>extend</code> 的不同在于: 源码不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 _.allKeys 获得到包括自身和继承得到的属性</span></span><br><span class=\"line\">_.extend = createAssigner(_.allKeys);</span><br><span class=\"line\"><span class=\"comment\">// 使用 extendOwn 获得到仅仅包括自身的属性</span></span><br><span class=\"line\">_.extendOwn = _.assign = createAssigner(_.keys);</span><br></pre></td></tr></table></figure>\n<h4 id=\"pick\"><a href=\"#pick\" class=\"headerlink\" title=\"pick\"></a><code>pick</code></h4><p><code>_.pick(object, *keys)</code>  </p>\n<p>使用这个属性用于返回 <code>object</code> 副本, 过滤出  <code>keys(有效的键组成的数组)</code> 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key</p>\n<p>使用 <code>pick</code> 的源码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;, obj = object, iteratee, keys;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 oiteratee 是一个函数的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.allKeys 获得到 obj 中的所有键</span></span><br><span class=\"line\">    keys = _.allKeys(obj);</span><br><span class=\"line\">    iteratee = optiomizeCb(oiteratee, context);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 oiteratee 不是一个函数的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示这时候用于筛选出对象 object 中包含 keys 的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识</span></span><br><span class=\"line\">    keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回在 obj 中的 key</span></span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[key];</span><br><span class=\"line\">    <span class=\"comment\">// 这里通过使用不同的函数来实现对于不同情况下的处理条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过改变 iteratee 函数的不同来实现不同的处理流程</span></span><br><span class=\"line\">    <span class=\"comment\">// if (iteratee(value, key, obj))</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中有一个 <code>flatten</code> 函数, 使用 <code>flatten</code> 函数的目的是将多层嵌套的数组转化为一维数组。</p>\n<p><code>flatten</code>源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flatten = function(input, shallow, strict, startIndex) &#123;</span><br><span class=\"line\">  let output = [], idx = 0;</span><br><span class=\"line\">  for (let i = startIndex || 0, length = getLength(input); i &lt; length; i++) &#123;</span><br><span class=\"line\">    let value = input[i];</span><br><span class=\"line\">    if (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">      if (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">      let j = 0; len = value.length;</span><br><span class=\"line\">      output.length += len;</span><br><span class=\"line\">      while (j &lt; len) &#123;</span><br><span class=\"line\">        output[idex++] = value[j++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (!strict) &#123;</span><br><span class=\"line\">      output[idx++] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自己写的函数: <code>pick</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, oiteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界处理 如果 obj === null 或者 typeof obj !== 'object'</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> iteratee;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> choiceKeys = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> oiteratee === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    iteratee = oiteratee;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123; retutn choiceKeys.includes(key); &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(obj[key], key)) output[key] = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"omit\"><a href=\"#omit\" class=\"headerlink\" title=\"omit\"></a><code>omit</code></h4><p><code>omit(object, *keys)</code></p>\n<p>使用 <code>omit</code> 函数的目的是与使用 <code>pick</code> 函数相反，返回一个 <code>object</code> 副本，过滤出除去  <code>keys</code> 中的属性值，或者接收一个判断函数，指定忽略哪一个 <code>key</code> 值。</p>\n<p><code>omit</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.omit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(iteratee))　&#123;</span><br><span class=\"line\">    iteratee = _.negate(iteratee);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(keys, key)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p><code>_.defaults(object, *defaults)</code></p>\n<p>使用 <code>default</code> 的目的是使用 <code>default</code> 对象填充 <code>object</code> 中的 <code>undefined</code> 属性，并且返回这个 <code>object</code>。</p>\n<p>当 <code>object</code> 中存在 <code>default</code> 中的属性被填充的时候，使用 <code>defaults</code> 方法不会起作用。</p>\n<p>使用 <code>_.defaults</code> 方法的时候源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 createAssigner(keysFunc, undefinedOnly);</span></span><br><span class=\"line\"><span class=\"comment\">// 传递两个参数： keysFunc 表示对于键的处理函数</span></span><br><span class=\"line\"><span class=\"comment\">// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性</span></span><br><span class=\"line\">_.default = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>在 <code>createAssigner</code> 的函数中使用 <code>_.default</code> 方法主要是使用下面的这句函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined</span><br><span class=\"line\">if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十四\"><a href=\"#underscore-js-源码分析-十四\" class=\"headerlink\" title=\"underscore.js 源码分析(十四)\"></a>underscore.js 源码分析(十四)</h3><p><code>extend</code> <code>extendOwn</code> <code>pick</code> <code>omit</code>  <code>default</code></p>\n<h4 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a><code>extend</code></h4><p><code>_.extend(destination, *sources)</code></p>\n<p>将多个对象  <code>souces</code> 覆盖到 <code>destination</code> 上面，返回被覆盖掉的 <code>destination</code> 上面。</p>\n<p>使用 <code>extend</code> 类似于使用 <code>Object.assign</code> 用来将多个对象进行合并。</p>\n<p>自己写的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">destination</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sources = <span class=\"built_in\">Array</span>.prototyep.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = sources.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currrentSource = sources[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = _.keys(currentSource);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; keys.length; index++) &#123;</span><br><span class=\"line\">      destination[keys[index]] = currentScource[keys[index]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"comment\">// 进行边界处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 当传入一个参数的时候或者 obj === null 的时候, 返回 obj</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\">           keys = keysFunc(source);</span><br><span class=\"line\">           l = keys.length;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"comment\">// 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 接下来判断 obj[key] 是否为 undefined(void 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"extendOwn\"><a href=\"#extendOwn\" class=\"headerlink\" title=\"extendOwn\"></a><code>extendOwn</code></h4><p>使用  <code>extendOwn</code> 实现的效果类似于使用  <code>extends</code>, 实现的效果是只是复制自己的属性到目标对象。</p>\n<p><code>_.extendOwn(destination, *source)</code></p>\n<p>复制 <code>source</code> 属性的值到 <code>destination</code> 只是复制自身的属性。(不包括继承的属性)</p>\n<p>这个函数与 <code>_.extend</code> 的不同之处在于不会将 <code>source</code> 对象中继承到的属性复制到 <code>destination</code> 之中。</p>\n<p>使用 <code>extendOwn</code> 与 <code>extend</code> 的不同在于: 源码不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 _.allKeys 获得到包括自身和继承得到的属性</span></span><br><span class=\"line\">_.extend = createAssigner(_.allKeys);</span><br><span class=\"line\"><span class=\"comment\">// 使用 extendOwn 获得到仅仅包括自身的属性</span></span><br><span class=\"line\">_.extendOwn = _.assign = createAssigner(_.keys);</span><br></pre></td></tr></table></figure>\n<h4 id=\"pick\"><a href=\"#pick\" class=\"headerlink\" title=\"pick\"></a><code>pick</code></h4><p><code>_.pick(object, *keys)</code>  </p>\n<p>使用这个属性用于返回 <code>object</code> 副本, 过滤出  <code>keys(有效的键组成的数组)</code> 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key</p>\n<p>使用 <code>pick</code> 的源码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;, obj = object, iteratee, keys;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 oiteratee 是一个函数的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.allKeys 获得到 obj 中的所有键</span></span><br><span class=\"line\">    keys = _.allKeys(obj);</span><br><span class=\"line\">    iteratee = optiomizeCb(oiteratee, context);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 oiteratee 不是一个函数的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示这时候用于筛选出对象 object 中包含 keys 的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识</span></span><br><span class=\"line\">    keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回在 obj 中的 key</span></span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[key];</span><br><span class=\"line\">    <span class=\"comment\">// 这里通过使用不同的函数来实现对于不同情况下的处理条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过改变 iteratee 函数的不同来实现不同的处理流程</span></span><br><span class=\"line\">    <span class=\"comment\">// if (iteratee(value, key, obj))</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中有一个 <code>flatten</code> 函数, 使用 <code>flatten</code> 函数的目的是将多层嵌套的数组转化为一维数组。</p>\n<p><code>flatten</code>源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flatten = function(input, shallow, strict, startIndex) &#123;</span><br><span class=\"line\">  let output = [], idx = 0;</span><br><span class=\"line\">  for (let i = startIndex || 0, length = getLength(input); i &lt; length; i++) &#123;</span><br><span class=\"line\">    let value = input[i];</span><br><span class=\"line\">    if (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">      if (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">      let j = 0; len = value.length;</span><br><span class=\"line\">      output.length += len;</span><br><span class=\"line\">      while (j &lt; len) &#123;</span><br><span class=\"line\">        output[idex++] = value[j++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (!strict) &#123;</span><br><span class=\"line\">      output[idx++] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自己写的函数: <code>pick</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, oiteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界处理 如果 obj === null 或者 typeof obj !== 'object'</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> iteratee;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> choiceKeys = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> oiteratee === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    iteratee = oiteratee;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123; retutn choiceKeys.includes(key); &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(obj[key], key)) output[key] = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"omit\"><a href=\"#omit\" class=\"headerlink\" title=\"omit\"></a><code>omit</code></h4><p><code>omit(object, *keys)</code></p>\n<p>使用 <code>omit</code> 函数的目的是与使用 <code>pick</code> 函数相反，返回一个 <code>object</code> 副本，过滤出除去  <code>keys</code> 中的属性值，或者接收一个判断函数，指定忽略哪一个 <code>key</code> 值。</p>\n<p><code>omit</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.omit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(iteratee))　&#123;</span><br><span class=\"line\">    iteratee = _.negate(iteratee);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(keys, key)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p><code>_.defaults(object, *defaults)</code></p>\n<p>使用 <code>default</code> 的目的是使用 <code>default</code> 对象填充 <code>object</code> 中的 <code>undefined</code> 属性，并且返回这个 <code>object</code>。</p>\n<p>当 <code>object</code> 中存在 <code>default</code> 中的属性被填充的时候，使用 <code>defaults</code> 方法不会起作用。</p>\n<p>使用 <code>_.defaults</code> 方法的时候源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 createAssigner(keysFunc, undefinedOnly);</span></span><br><span class=\"line\"><span class=\"comment\">// 传递两个参数： keysFunc 表示对于键的处理函数</span></span><br><span class=\"line\"><span class=\"comment\">// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性</span></span><br><span class=\"line\">_.default = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>在 <code>createAssigner</code> 的函数中使用 <code>_.default</code> 方法主要是使用下面的这句函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined</span><br><span class=\"line\">if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];</span><br></pre></td></tr></table></figure>\n"},{"title":"vertical-align && line-height","date":"2018-03-26T12:35:00.000Z","_content":"\n### vertical-align\n\n关于 `vertical-align` 的字面意思是垂直居中的意思， 其中 `vertical-align` 有下面几种支持的属性：\n\n| 值               | 含义                                       |\n| --------------- | ---------------------------------------- |\n| `baseline`(初始值) | 一个元素的基线和父元素的基线对齐                         |\n| `sub`           | 将元素作为一个下标，该元素的基线会相当于父元素的基线降低             |\n| `super`         | 将元素作为一个上标， 该元素的基线会相当于父元素的基线升高            |\n| `top`           | 把对齐的子元素的顶端与父元素顶端对齐。                      |\n| `text-top`      | 类似于使用 `text-bottom` ， 将元素行内文本的顶端与父元素的顶端对齐 |\n| `middle`        | 居中对齐，常用于图像的垂直居中                          |\n| `bottom`        | 将元素行内框的低端与父元素的低端对齐                       |\n| `text-bottom`   | 行内文本的底端与行框的低端对齐                          |\n| `百分数`           | 将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 `line-height` 的百分数。 |\n| `length`        | 使用 `length` 用于将元素升高或者降低指定的距离             |\n| `inherit`       | 从父元素下继承属性                                |\n\n*注意：这里的 `vertical-align` 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 `vertical-align` 的影响。*\n\n`vertical-align` 作用效果在图像垂直居中的时候的作用：\n\n```html\n<div class=\"wrap\">\n  <img class=\"img\" alt=\"这是一张图片\">\n</div>\n```\n\n我们知道对于行内元素的垂直居中我们可以使用 `line-height = height` 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：\n\n```css\n.wrap {\n    width: 200px;\n    height: 300px;\n    line-height: 300px;\n    background-color: blue;\n}\n.img {\n    width: 50px;\n    height: 50px;\n}\n```\n\n结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/vertical-align.png)\n\n如上图所示， 使用 `line-height = height` 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 `img` 元素上添加 `vertical-align:middle` 效果， 最终效果如下：\n\n```css\n.img {\n    vertical-align: middle;\n}\n```\n\n​                                                ![](http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png)  \n\n注意： 这里的 `vertical-align` 主要参照的是父元素的行高， 因此在设置 `vertical-align: middle` 的时候，需要将父元素的 `line-height` 设置为 父元素的 `height` 高度。\n\n####  `vertical-align:middle`  \n\n`vertical-align: middle` 经常用于图像的居中， 我们要注意的一点就是，当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐， 这里的 *1ex* 是相对于父元素的 `font-size` 进行定义的，例如下面这个例子：\n\n```html\n<span class=\"allDemo\">\n\t<span class=\"demo1\">我是一段文字</span><span class=\"demo2\">我是第二段文字</span>\n</span>\n```\n\n*对于 demo1 进行 `vertical-align: middle`*: \n\n```css\n.allDemo {\n\tdisplay: inline-block;\n\tbackground-color: lightslategray;\n}\n.demo2 {\n\tline-height: 100px;\n\tbackground-color: lightgreen;\n}\n.demo1{\n\tbackground-color: lightcoral;\n\tvertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png)\n\n如上图所示， `class = \"demo2\"` 这段文字， `vertical-align` 默认是 `baseline`,其元素框底端是与行框的基线对齐的，`demo1` 相比于 `demo2` 元素而言， 元素下移， 这是 `vertical-align: middle` 之后的结果， 图示如下:\n\n![](https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png)\n\n如果我们将父元素的 `font-size` 置为0， 我们将会看到下面的情况：\n\n代码如下：\n\n```css\n.allDemo { font-size: 0px };\n.demo1 { font-size: 16px };\n.demo2 { font-size: 16px };\n```\n\n\n\n![](https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png)\n\n`vertical-align` 各属性作用位置如下：\n\n![](https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png)\n\n\n\n### line-height\n\n###  `line-height` 与 `line box` 之间的关系\n`line-height` 从字面意义上来讲， 是 `行高` 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 `line-height` 之前，我们先来认识一下 `line boxes` 和 `inline boxes` 这两个东西。\n#### `line boxes`  与 `inline boxes`  \n`inline boxes` : 可以认为是包裹在 `inline` 元素外面的的一层外层， 例如 `span` 元素， `img` 图片元素等 `inline` 形式的元素，对于 `inline` 水平的元素，都会形成一层的 `inline boxes` 进行包裹。  \n`line boxex` : 对于 `line boxes` 你可以认为 `line boxes` 用于包裹一行元素， 也就是说，对于一行 `inline` 水平的元素而言， 在外面有一个 `line boxes` 进行包裹， 如果一行有多个 `inline` 水平的元素，那么，这一行的 `line boxes` 就会包含有多个的 `inline boxex`。\n**对于 `line boxes` 的元素的高度， 他的高度是获取该 `box` 下面的所有的 `inline boxes` 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 `line boxes` 的最大高度**。\n\n**这里 `inline boxes` 的高度是什么呢？ 就是今天我们要说的 `line-height`**.\n行高具体来讲就是两行文字之间基线之间的距离：  \n如下图所示：\n![image](https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png)\n上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 `vertical-align` 改变的就是基线的高低大小。 \n\n#### 使用 `line-height` 实现的垂直居中实现\n我们经常使用 `line-height = height` 实现行内元素的垂直居中效果， 这里的 `height` ， 更为确切的说是  我们将要居中 `line boxes` 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。\n\n#### 使用 `line-height = height` 在图片中垂直居中效果的失效。\nhtml:\n```html\n<div class=\"demo\">\n        <img src=\"./picture.png\" alt=\"垂直居中的图片\" class=\"img\">\n</div>\n```\n\nCSS:\n```css\n.demo {\n    display: inline-block;\n    line-height: 150px;\n    height: 150px;\n    background-color: lightblue;\n}\n.img {\t\n    height: 50px;\n}\n```\n最终结果如下：\n\n![image](https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png)\n\n并没有居中！\n\n对于图片元素而言， 使用 `line-height = height` 并不能实现元素的垂直居中，要想实现这种效果， 就需要 `vertcial-align: middle` 出马了。\n\n但是使用 `vertical-align:middle` 就能保证万无一失了吗？\n\n### `font-size: 0px` 在图片居中时的应用\n\n在讲解 `vertical-align:middle` 的时候， 我们使用 `vertical-align: middle` 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。\n\n```html\n<div class=\"imgWrap\">\n\t<img src=\"img.png\" class=\"img\">\n</div>\n```\n\n```css\n.imgWrap {\n    line-height: 40px;\n    background-color: lightblue;\n}\n.img {\n    width: 50px;\n    height: 30px;\n    vertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png)\n\n我们看到，这个时候使用 `vertical-align:middle` 并没有实现真正的垂直居中， 原因是什么呢？\n\n因为就如同我们刚才说的那样：\n\n>当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐\n\n我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 `vertical-align` 的时候并不是这样， 为了解决这个问题， 我们使用了`font-size: 0`这个属性。\n\n代码如下：\n\n```CSS\n.imgWrap {\n  font-size: 0;\n}\n```\n\n居中成功！\n\n![mark](http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png)\n\n`font-size: 0px` 起的作用是：\n\n1. 基线和中线之间的距离是根据字母  `x` 的高度进行计算的， 通过设置 `font-size` 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。\n2. 使用 `vertical-align:middle` 对齐的不是父元素的基线， 而是基线上面  `0.5ex` 这样一个高度的点， 但是这个高度是由父元素的 `font-size` 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   \n\n### 参考链接\n\n[张鑫旭：css行高line-height的一些深入理解及应用](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/) ","source":"_posts/vertical-align.md","raw":"---\ntitle: vertical-align && line-height\ndate: 2018-03-26 20:35:00\ntags: vertical-align && line-height\ncategories: CSS\n---\n\n### vertical-align\n\n关于 `vertical-align` 的字面意思是垂直居中的意思， 其中 `vertical-align` 有下面几种支持的属性：\n\n| 值               | 含义                                       |\n| --------------- | ---------------------------------------- |\n| `baseline`(初始值) | 一个元素的基线和父元素的基线对齐                         |\n| `sub`           | 将元素作为一个下标，该元素的基线会相当于父元素的基线降低             |\n| `super`         | 将元素作为一个上标， 该元素的基线会相当于父元素的基线升高            |\n| `top`           | 把对齐的子元素的顶端与父元素顶端对齐。                      |\n| `text-top`      | 类似于使用 `text-bottom` ， 将元素行内文本的顶端与父元素的顶端对齐 |\n| `middle`        | 居中对齐，常用于图像的垂直居中                          |\n| `bottom`        | 将元素行内框的低端与父元素的低端对齐                       |\n| `text-bottom`   | 行内文本的底端与行框的低端对齐                          |\n| `百分数`           | 将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 `line-height` 的百分数。 |\n| `length`        | 使用 `length` 用于将元素升高或者降低指定的距离             |\n| `inherit`       | 从父元素下继承属性                                |\n\n*注意：这里的 `vertical-align` 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 `vertical-align` 的影响。*\n\n`vertical-align` 作用效果在图像垂直居中的时候的作用：\n\n```html\n<div class=\"wrap\">\n  <img class=\"img\" alt=\"这是一张图片\">\n</div>\n```\n\n我们知道对于行内元素的垂直居中我们可以使用 `line-height = height` 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：\n\n```css\n.wrap {\n    width: 200px;\n    height: 300px;\n    line-height: 300px;\n    background-color: blue;\n}\n.img {\n    width: 50px;\n    height: 50px;\n}\n```\n\n结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/vertical-align.png)\n\n如上图所示， 使用 `line-height = height` 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 `img` 元素上添加 `vertical-align:middle` 效果， 最终效果如下：\n\n```css\n.img {\n    vertical-align: middle;\n}\n```\n\n​                                                ![](http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png)  \n\n注意： 这里的 `vertical-align` 主要参照的是父元素的行高， 因此在设置 `vertical-align: middle` 的时候，需要将父元素的 `line-height` 设置为 父元素的 `height` 高度。\n\n####  `vertical-align:middle`  \n\n`vertical-align: middle` 经常用于图像的居中， 我们要注意的一点就是，当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐， 这里的 *1ex* 是相对于父元素的 `font-size` 进行定义的，例如下面这个例子：\n\n```html\n<span class=\"allDemo\">\n\t<span class=\"demo1\">我是一段文字</span><span class=\"demo2\">我是第二段文字</span>\n</span>\n```\n\n*对于 demo1 进行 `vertical-align: middle`*: \n\n```css\n.allDemo {\n\tdisplay: inline-block;\n\tbackground-color: lightslategray;\n}\n.demo2 {\n\tline-height: 100px;\n\tbackground-color: lightgreen;\n}\n.demo1{\n\tbackground-color: lightcoral;\n\tvertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png)\n\n如上图所示， `class = \"demo2\"` 这段文字， `vertical-align` 默认是 `baseline`,其元素框底端是与行框的基线对齐的，`demo1` 相比于 `demo2` 元素而言， 元素下移， 这是 `vertical-align: middle` 之后的结果， 图示如下:\n\n![](https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png)\n\n如果我们将父元素的 `font-size` 置为0， 我们将会看到下面的情况：\n\n代码如下：\n\n```css\n.allDemo { font-size: 0px };\n.demo1 { font-size: 16px };\n.demo2 { font-size: 16px };\n```\n\n\n\n![](https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png)\n\n`vertical-align` 各属性作用位置如下：\n\n![](https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png)\n\n\n\n### line-height\n\n###  `line-height` 与 `line box` 之间的关系\n`line-height` 从字面意义上来讲， 是 `行高` 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 `line-height` 之前，我们先来认识一下 `line boxes` 和 `inline boxes` 这两个东西。\n#### `line boxes`  与 `inline boxes`  \n`inline boxes` : 可以认为是包裹在 `inline` 元素外面的的一层外层， 例如 `span` 元素， `img` 图片元素等 `inline` 形式的元素，对于 `inline` 水平的元素，都会形成一层的 `inline boxes` 进行包裹。  \n`line boxex` : 对于 `line boxes` 你可以认为 `line boxes` 用于包裹一行元素， 也就是说，对于一行 `inline` 水平的元素而言， 在外面有一个 `line boxes` 进行包裹， 如果一行有多个 `inline` 水平的元素，那么，这一行的 `line boxes` 就会包含有多个的 `inline boxex`。\n**对于 `line boxes` 的元素的高度， 他的高度是获取该 `box` 下面的所有的 `inline boxes` 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 `line boxes` 的最大高度**。\n\n**这里 `inline boxes` 的高度是什么呢？ 就是今天我们要说的 `line-height`**.\n行高具体来讲就是两行文字之间基线之间的距离：  \n如下图所示：\n![image](https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png)\n上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 `vertical-align` 改变的就是基线的高低大小。 \n\n#### 使用 `line-height` 实现的垂直居中实现\n我们经常使用 `line-height = height` 实现行内元素的垂直居中效果， 这里的 `height` ， 更为确切的说是  我们将要居中 `line boxes` 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。\n\n#### 使用 `line-height = height` 在图片中垂直居中效果的失效。\nhtml:\n```html\n<div class=\"demo\">\n        <img src=\"./picture.png\" alt=\"垂直居中的图片\" class=\"img\">\n</div>\n```\n\nCSS:\n```css\n.demo {\n    display: inline-block;\n    line-height: 150px;\n    height: 150px;\n    background-color: lightblue;\n}\n.img {\t\n    height: 50px;\n}\n```\n最终结果如下：\n\n![image](https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png)\n\n并没有居中！\n\n对于图片元素而言， 使用 `line-height = height` 并不能实现元素的垂直居中，要想实现这种效果， 就需要 `vertcial-align: middle` 出马了。\n\n但是使用 `vertical-align:middle` 就能保证万无一失了吗？\n\n### `font-size: 0px` 在图片居中时的应用\n\n在讲解 `vertical-align:middle` 的时候， 我们使用 `vertical-align: middle` 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。\n\n```html\n<div class=\"imgWrap\">\n\t<img src=\"img.png\" class=\"img\">\n</div>\n```\n\n```css\n.imgWrap {\n    line-height: 40px;\n    background-color: lightblue;\n}\n.img {\n    width: 50px;\n    height: 30px;\n    vertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png)\n\n我们看到，这个时候使用 `vertical-align:middle` 并没有实现真正的垂直居中， 原因是什么呢？\n\n因为就如同我们刚才说的那样：\n\n>当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐\n\n我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 `vertical-align` 的时候并不是这样， 为了解决这个问题， 我们使用了`font-size: 0`这个属性。\n\n代码如下：\n\n```CSS\n.imgWrap {\n  font-size: 0;\n}\n```\n\n居中成功！\n\n![mark](http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png)\n\n`font-size: 0px` 起的作用是：\n\n1. 基线和中线之间的距离是根据字母  `x` 的高度进行计算的， 通过设置 `font-size` 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。\n2. 使用 `vertical-align:middle` 对齐的不是父元素的基线， 而是基线上面  `0.5ex` 这样一个高度的点， 但是这个高度是由父元素的 `font-size` 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   \n\n### 参考链接\n\n[张鑫旭：css行高line-height的一些深入理解及应用](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/) ","slug":"vertical-align","published":1,"updated":"2020-09-14T06:36:25.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8b0043i2osty9ley4t","content":"<h3 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h3><p>关于 <code>vertical-align</code> 的字面意思是垂直居中的意思， 其中 <code>vertical-align</code> 有下面几种支持的属性：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseline</code>(初始值)</td>\n<td>一个元素的基线和父元素的基线对齐</td>\n</tr>\n<tr>\n<td><code>sub</code></td>\n<td>将元素作为一个下标，该元素的基线会相当于父元素的基线降低</td>\n</tr>\n<tr>\n<td><code>super</code></td>\n<td>将元素作为一个上标， 该元素的基线会相当于父元素的基线升高</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>把对齐的子元素的顶端与父元素顶端对齐。</td>\n</tr>\n<tr>\n<td><code>text-top</code></td>\n<td>类似于使用 <code>text-bottom</code> ， 将元素行内文本的顶端与父元素的顶端对齐</td>\n</tr>\n<tr>\n<td><code>middle</code></td>\n<td>居中对齐，常用于图像的垂直居中</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td>将元素行内框的低端与父元素的低端对齐</td>\n</tr>\n<tr>\n<td><code>text-bottom</code></td>\n<td>行内文本的底端与行框的低端对齐</td>\n</tr>\n<tr>\n<td><code>百分数</code></td>\n<td>将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 <code>line-height</code> 的百分数。</td>\n</tr>\n<tr>\n<td><code>length</code></td>\n<td>使用 <code>length</code> 用于将元素升高或者降低指定的距离</td>\n</tr>\n<tr>\n<td><code>inherit</code></td>\n<td>从父元素下继承属性</td>\n</tr>\n</tbody>\n</table>\n<p><em>注意：这里的 <code>vertical-align</code> 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 <code>vertical-align</code> 的影响。</em></p>\n<p><code>vertical-align</code> 作用效果在图像垂直居中的时候的作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"这是一张图片\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们知道对于行内元素的垂直居中我们可以使用 <code>line-height = height</code> 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align.png\" alt></p>\n<p>如上图所示， 使用 <code>line-height = height</code> 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 <code>img</code> 元素上添加 <code>vertical-align:middle</code> 效果， 最终效果如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​                                                <img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png\" alt>  </p>\n<p>注意： 这里的 <code>vertical-align</code> 主要参照的是父元素的行高， 因此在设置 <code>vertical-align: middle</code> 的时候，需要将父元素的 <code>line-height</code> 设置为 父元素的 <code>height</code> 高度。</p>\n<h4 id=\"vertical-align-middle\"><a href=\"#vertical-align-middle\" class=\"headerlink\" title=\"vertical-align:middle\"></a><code>vertical-align:middle</code></h4><p><code>vertical-align: middle</code> 经常用于图像的居中， 我们要注意的一点就是，当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐， 这里的 <em>1ex</em> 是相对于父元素的 <code>font-size</code> 进行定义的，例如下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"allDemo\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo1\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo2\"</span>&gt;</span>我是第二段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>对于 demo1 进行 <code>vertical-align: middle</code></em>: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightslategray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png\" alt></p>\n<p>如上图所示， <code>class = &quot;demo2&quot;</code> 这段文字， <code>vertical-align</code> 默认是 <code>baseline</code>,其元素框底端是与行框的基线对齐的，<code>demo1</code> 相比于 <code>demo2</code> 元素而言， 元素下移， 这是 <code>vertical-align: middle</code> 之后的结果， 图示如下:</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png\" alt></p>\n<p>如果我们将父元素的 <code>font-size</code> 置为0， 我们将会看到下面的情况：</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">0px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png\" alt></p>\n<p><code>vertical-align</code> 各属性作用位置如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png\" alt></p>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><h3 id=\"line-height-与-line-box-之间的关系\"><a href=\"#line-height-与-line-box-之间的关系\" class=\"headerlink\" title=\"line-height 与 line box 之间的关系\"></a><code>line-height</code> 与 <code>line box</code> 之间的关系</h3><p><code>line-height</code> 从字面意义上来讲， 是 <code>行高</code> 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 <code>line-height</code> 之前，我们先来认识一下 <code>line boxes</code> 和 <code>inline boxes</code> 这两个东西。</p>\n<h4 id=\"line-boxes-与-inline-boxes\"><a href=\"#line-boxes-与-inline-boxes\" class=\"headerlink\" title=\"line boxes  与 inline boxes\"></a><code>line boxes</code>  与 <code>inline boxes</code></h4><p><code>inline boxes</code> : 可以认为是包裹在 <code>inline</code> 元素外面的的一层外层， 例如 <code>span</code> 元素， <code>img</code> 图片元素等 <code>inline</code> 形式的元素，对于 <code>inline</code> 水平的元素，都会形成一层的 <code>inline boxes</code> 进行包裹。<br><code>line boxex</code> : 对于 <code>line boxes</code> 你可以认为 <code>line boxes</code> 用于包裹一行元素， 也就是说，对于一行 <code>inline</code> 水平的元素而言， 在外面有一个 <code>line boxes</code> 进行包裹， 如果一行有多个 <code>inline</code> 水平的元素，那么，这一行的 <code>line boxes</code> 就会包含有多个的 <code>inline boxex</code>。<br><strong>对于 <code>line boxes</code> 的元素的高度， 他的高度是获取该 <code>box</code> 下面的所有的 <code>inline boxes</code> 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 <code>line boxes</code> 的最大高度</strong>。</p>\n<p><strong>这里 <code>inline boxes</code> 的高度是什么呢？ 就是今天我们要说的 <code>line-height</code></strong>.<br>行高具体来讲就是两行文字之间基线之间的距离：<br>如下图所示：<br><img src=\"https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png\" alt=\"image\"><br>上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 <code>vertical-align</code> 改变的就是基线的高低大小。 </p>\n<h4 id=\"使用-line-height-实现的垂直居中实现\"><a href=\"#使用-line-height-实现的垂直居中实现\" class=\"headerlink\" title=\"使用 line-height 实现的垂直居中实现\"></a>使用 <code>line-height</code> 实现的垂直居中实现</h4><p>我们经常使用 <code>line-height = height</code> 实现行内元素的垂直居中效果， 这里的 <code>height</code> ， 更为确切的说是  我们将要居中 <code>line boxes</code> 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。</p>\n<h4 id=\"使用-line-height-height-在图片中垂直居中效果的失效。\"><a href=\"#使用-line-height-height-在图片中垂直居中效果的失效。\" class=\"headerlink\" title=\"使用 line-height = height 在图片中垂直居中效果的失效。\"></a>使用 <code>line-height = height</code> 在图片中垂直居中效果的失效。</h4><p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./picture.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"垂直居中的图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;\t</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png\" alt=\"image\"></p>\n<p>并没有居中！</p>\n<p>对于图片元素而言， 使用 <code>line-height = height</code> 并不能实现元素的垂直居中，要想实现这种效果， 就需要 <code>vertcial-align: middle</code> 出马了。</p>\n<p>但是使用 <code>vertical-align:middle</code> 就能保证万无一失了吗？</p>\n<h3 id=\"font-size-0px-在图片居中时的应用\"><a href=\"#font-size-0px-在图片居中时的应用\" class=\"headerlink\" title=\"font-size: 0px 在图片居中时的应用\"></a><code>font-size: 0px</code> 在图片居中时的应用</h3><p>在讲解 <code>vertical-align:middle</code> 的时候， 我们使用 <code>vertical-align: middle</code> 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgWrap\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png\" alt></p>\n<p>我们看到，这个时候使用 <code>vertical-align:middle</code> 并没有实现真正的垂直居中， 原因是什么呢？</p>\n<p>因为就如同我们刚才说的那样：</p>\n<blockquote>\n<p>当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐</p>\n</blockquote>\n<p>我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 <code>vertical-align</code> 的时候并不是这样， 为了解决这个问题， 我们使用了<code>font-size: 0</code>这个属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>居中成功！</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png\" alt=\"mark\"></p>\n<p><code>font-size: 0px</code> 起的作用是：</p>\n<ol>\n<li>基线和中线之间的距离是根据字母  <code>x</code> 的高度进行计算的， 通过设置 <code>font-size</code> 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。</li>\n<li>使用 <code>vertical-align:middle</code> 对齐的不是父元素的基线， 而是基线上面  <code>0.5ex</code> 这样一个高度的点， 但是这个高度是由父元素的 <code>font-size</code> 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   </li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">张鑫旭：css行高line-height的一些深入理解及应用</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h3><p>关于 <code>vertical-align</code> 的字面意思是垂直居中的意思， 其中 <code>vertical-align</code> 有下面几种支持的属性：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseline</code>(初始值)</td>\n<td>一个元素的基线和父元素的基线对齐</td>\n</tr>\n<tr>\n<td><code>sub</code></td>\n<td>将元素作为一个下标，该元素的基线会相当于父元素的基线降低</td>\n</tr>\n<tr>\n<td><code>super</code></td>\n<td>将元素作为一个上标， 该元素的基线会相当于父元素的基线升高</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>把对齐的子元素的顶端与父元素顶端对齐。</td>\n</tr>\n<tr>\n<td><code>text-top</code></td>\n<td>类似于使用 <code>text-bottom</code> ， 将元素行内文本的顶端与父元素的顶端对齐</td>\n</tr>\n<tr>\n<td><code>middle</code></td>\n<td>居中对齐，常用于图像的垂直居中</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td>将元素行内框的低端与父元素的低端对齐</td>\n</tr>\n<tr>\n<td><code>text-bottom</code></td>\n<td>行内文本的底端与行框的低端对齐</td>\n</tr>\n<tr>\n<td><code>百分数</code></td>\n<td>将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 <code>line-height</code> 的百分数。</td>\n</tr>\n<tr>\n<td><code>length</code></td>\n<td>使用 <code>length</code> 用于将元素升高或者降低指定的距离</td>\n</tr>\n<tr>\n<td><code>inherit</code></td>\n<td>从父元素下继承属性</td>\n</tr>\n</tbody>\n</table>\n<p><em>注意：这里的 <code>vertical-align</code> 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 <code>vertical-align</code> 的影响。</em></p>\n<p><code>vertical-align</code> 作用效果在图像垂直居中的时候的作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"这是一张图片\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们知道对于行内元素的垂直居中我们可以使用 <code>line-height = height</code> 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align.png\" alt></p>\n<p>如上图所示， 使用 <code>line-height = height</code> 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 <code>img</code> 元素上添加 <code>vertical-align:middle</code> 效果， 最终效果如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​                                                <img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png\" alt>  </p>\n<p>注意： 这里的 <code>vertical-align</code> 主要参照的是父元素的行高， 因此在设置 <code>vertical-align: middle</code> 的时候，需要将父元素的 <code>line-height</code> 设置为 父元素的 <code>height</code> 高度。</p>\n<h4 id=\"vertical-align-middle\"><a href=\"#vertical-align-middle\" class=\"headerlink\" title=\"vertical-align:middle\"></a><code>vertical-align:middle</code></h4><p><code>vertical-align: middle</code> 经常用于图像的居中， 我们要注意的一点就是，当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐， 这里的 <em>1ex</em> 是相对于父元素的 <code>font-size</code> 进行定义的，例如下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"allDemo\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo1\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo2\"</span>&gt;</span>我是第二段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>对于 demo1 进行 <code>vertical-align: middle</code></em>: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightslategray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png\" alt></p>\n<p>如上图所示， <code>class = &quot;demo2&quot;</code> 这段文字， <code>vertical-align</code> 默认是 <code>baseline</code>,其元素框底端是与行框的基线对齐的，<code>demo1</code> 相比于 <code>demo2</code> 元素而言， 元素下移， 这是 <code>vertical-align: middle</code> 之后的结果， 图示如下:</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png\" alt></p>\n<p>如果我们将父元素的 <code>font-size</code> 置为0， 我们将会看到下面的情况：</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">0px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png\" alt></p>\n<p><code>vertical-align</code> 各属性作用位置如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png\" alt></p>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><h3 id=\"line-height-与-line-box-之间的关系\"><a href=\"#line-height-与-line-box-之间的关系\" class=\"headerlink\" title=\"line-height 与 line box 之间的关系\"></a><code>line-height</code> 与 <code>line box</code> 之间的关系</h3><p><code>line-height</code> 从字面意义上来讲， 是 <code>行高</code> 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 <code>line-height</code> 之前，我们先来认识一下 <code>line boxes</code> 和 <code>inline boxes</code> 这两个东西。</p>\n<h4 id=\"line-boxes-与-inline-boxes\"><a href=\"#line-boxes-与-inline-boxes\" class=\"headerlink\" title=\"line boxes  与 inline boxes\"></a><code>line boxes</code>  与 <code>inline boxes</code></h4><p><code>inline boxes</code> : 可以认为是包裹在 <code>inline</code> 元素外面的的一层外层， 例如 <code>span</code> 元素， <code>img</code> 图片元素等 <code>inline</code> 形式的元素，对于 <code>inline</code> 水平的元素，都会形成一层的 <code>inline boxes</code> 进行包裹。<br><code>line boxex</code> : 对于 <code>line boxes</code> 你可以认为 <code>line boxes</code> 用于包裹一行元素， 也就是说，对于一行 <code>inline</code> 水平的元素而言， 在外面有一个 <code>line boxes</code> 进行包裹， 如果一行有多个 <code>inline</code> 水平的元素，那么，这一行的 <code>line boxes</code> 就会包含有多个的 <code>inline boxex</code>。<br><strong>对于 <code>line boxes</code> 的元素的高度， 他的高度是获取该 <code>box</code> 下面的所有的 <code>inline boxes</code> 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 <code>line boxes</code> 的最大高度</strong>。</p>\n<p><strong>这里 <code>inline boxes</code> 的高度是什么呢？ 就是今天我们要说的 <code>line-height</code></strong>.<br>行高具体来讲就是两行文字之间基线之间的距离：<br>如下图所示：<br><img src=\"https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png\" alt=\"image\"><br>上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 <code>vertical-align</code> 改变的就是基线的高低大小。 </p>\n<h4 id=\"使用-line-height-实现的垂直居中实现\"><a href=\"#使用-line-height-实现的垂直居中实现\" class=\"headerlink\" title=\"使用 line-height 实现的垂直居中实现\"></a>使用 <code>line-height</code> 实现的垂直居中实现</h4><p>我们经常使用 <code>line-height = height</code> 实现行内元素的垂直居中效果， 这里的 <code>height</code> ， 更为确切的说是  我们将要居中 <code>line boxes</code> 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。</p>\n<h4 id=\"使用-line-height-height-在图片中垂直居中效果的失效。\"><a href=\"#使用-line-height-height-在图片中垂直居中效果的失效。\" class=\"headerlink\" title=\"使用 line-height = height 在图片中垂直居中效果的失效。\"></a>使用 <code>line-height = height</code> 在图片中垂直居中效果的失效。</h4><p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./picture.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"垂直居中的图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;\t</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png\" alt=\"image\"></p>\n<p>并没有居中！</p>\n<p>对于图片元素而言， 使用 <code>line-height = height</code> 并不能实现元素的垂直居中，要想实现这种效果， 就需要 <code>vertcial-align: middle</code> 出马了。</p>\n<p>但是使用 <code>vertical-align:middle</code> 就能保证万无一失了吗？</p>\n<h3 id=\"font-size-0px-在图片居中时的应用\"><a href=\"#font-size-0px-在图片居中时的应用\" class=\"headerlink\" title=\"font-size: 0px 在图片居中时的应用\"></a><code>font-size: 0px</code> 在图片居中时的应用</h3><p>在讲解 <code>vertical-align:middle</code> 的时候， 我们使用 <code>vertical-align: middle</code> 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgWrap\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png\" alt></p>\n<p>我们看到，这个时候使用 <code>vertical-align:middle</code> 并没有实现真正的垂直居中， 原因是什么呢？</p>\n<p>因为就如同我们刚才说的那样：</p>\n<blockquote>\n<p>当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐</p>\n</blockquote>\n<p>我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 <code>vertical-align</code> 的时候并不是这样， 为了解决这个问题， 我们使用了<code>font-size: 0</code>这个属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>居中成功！</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png\" alt=\"mark\"></p>\n<p><code>font-size: 0px</code> 起的作用是：</p>\n<ol>\n<li>基线和中线之间的距离是根据字母  <code>x</code> 的高度进行计算的， 通过设置 <code>font-size</code> 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。</li>\n<li>使用 <code>vertical-align:middle</code> 对齐的不是父元素的基线， 而是基线上面  <code>0.5ex</code> 这样一个高度的点， 但是这个高度是由父元素的 <code>font-size</code> 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   </li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">张鑫旭：css行高line-height的一些深入理解及应用</a> </p>\n"},{"title":"vue源码：utils 函数","date":"2019-04-05T08:39:34.000Z","_content":"\n#### utils 函数\n\n***\n\n在 vue 的 utils.js  文件中提供了一些使用的公共方法， 下面是在阅读这部分代码的时候的一些笔记：\n\n##### 判断值的类型\n\n```js\n// 使用 Object.toString 得到的是 [object type]\n// 可以获取到 type 值来获取到要进行判断的类型\nconst _toString = Object.prototype.toString\nfunction toRowType = value => _toString.call(value).slice(8, -1)\n```\n\n如下： 判断值为纯对象：\n\n```js\nfunction isPlainObject = obj => toRowType(obj) === '[object Object]';\n```\n\n判断为正则\n\n```js\nfunction isRegExp = val => toRowType(val) === '[object RegExp]';\n```\n\n##### 判断一个值为 `promise`\n\n```js\nfunction isPromise(val) {\n  return val !== undefind && \n  \t\t\t val !== null && \n  \t\t\t typeof val.then === 'function' && \n  \t\t\t typeof val.catch === 'function'\n}\n```\n\n也可以使用 `instanceof` 方法进行判断：\n\n```js\nfunction isPromise(val) {\n  return val instanceof Promise;\n}\n```\n\n上面的那种方法更多的是为了一些浏览器不能兼容 promise 的原因\n\n##### 通过函数的方法判断字符串中是否含有字符串\n\n```js\nfunction makeMap(str) {\n  // 使用 Object.create 用来创建一个 “干净”的对象\n  const map = Object.create(null);\n  const list = str.split(',');\n  for (let i = 0; i < list.length; i ++) {\n    map[list[i]] = true\n  }\n  return val => map[val];\n}\n```\n\n在 vue 中，使用上面的方法用来判断一串使用逗号分割的字符串中是否包含有某个字符串：\n\n目前， 使用 es6 的 `includes` 可以实现这种效果。\n\n上面的 `Object.create` 方法， 可以创建自继承自传入值的对象， 例如上面的 `Object.create(null)` 代码就是创建了一个空对象， 与 `{}` 对象不同的是， 通过 `create` 创建的空对象， 没有继承 `Object.prototype` 上面的方法。\n\n例如：\n\n{% asset_img code.png%}\n\n在上面中 使用 `create` 创建的空对象， 原型上面没有任何的属性\n\n使用 `Object.create` 创建空对象的好处如下：\n\n+ 创建的对象比较“干净”,  我们可以实现自定义的比如 `toString` 方法\n+ 使用 `for in` 的时候无需使用 `hasOwnProperty` 方法判断属性是不是继承的来的属性， 并且必用遍历继承的属性而提高了性能。\n\n##### 校验相等， 对于对象， 判断是否 “看起来” 一样：\n\n在代码中使用 `looseEqual`  这个函数， 如下：\n\n```js\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n*/\nexport function looseEqual (a, b){\n  if (a === b) return true\n  const isObjectA = isObject(a)\n  const isObjectB = isObject(b)\n  // 当都为对象的时候\n  if (isObjectA && isObjectB) {\n    try {\n      const isArrayA = Array.isArray(a)\n      const isArrayB = Array.isArray(b)\n      // 当都为数组的时候\n      // 这里判断数组相等， 可以先判断数组长度是否相等\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every((e, i) => {\n          return looseEqual(e, b[i])\n        })\n        // 对于时间判断的时候， 通过 getTime() 来判断\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        const keysA = Object.keys(a)\n        const keysB = Object.keys(b)\n        // 判断都为对象的时候\n        return keysA.length === keysB.length && keysA.every(key => {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n```\n\n##### once 函数方法\n\n```js\n// 确保 fn 只会调用一次\nfunction once(fn) {\n  let called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n```\n\n##### 正则相关\n\n代码中， 使用正则中的 `replace` 方法实现了对于变量命名由驼峰式转变为为连字符式：\n\n```js\nfunction hyhenate(str) {\n  return str.replace(/\\B([A-Z])/g, '-$1').toLowerCase()\n}\nhyhenate('myComponent'); // my-component\n```\n\n相关 `replace` 的一些特性， 在博客文章  [正则表达式（二）：基础方法](<https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/>) 中已经说明， 需要注意的一些地方：\n\n+ 正则表达式中需要添加标识符 `g` 用来进行全局匹配捕获\n+ 正则中使用括号包裹的表示一个捕获组进行捕获到的数据\n+ 使用 `\\B` 表示匹配单词内部\n\n使用正则将连字符单词转换为驼峰式的单词：\n\n```js\nfunction camelize(str) {\n  return str.replace(/-(\\w)/g, (_, c) => c ? c.toUpperCase() : '')\n}\ncamelize('my-component'); // myComponent\n```\n\n注意： 关于 `replace` 的第二个参数,  可以阅读  [正则表达式（二）：基础方法](<https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/>)   中关于<a href=\"/2019/01/20/正则表达式（二）：基础方法/#replaceFn\">replace</a>的相关知识。\n\n","source":"_posts/vue 源码：utils 函数.md","raw":"---\ntitle: vue源码：utils 函数\ndate: 2019-04-05 16:39:34\ntags: vue 源码\ncategories: 源码阅读\n---\n\n#### utils 函数\n\n***\n\n在 vue 的 utils.js  文件中提供了一些使用的公共方法， 下面是在阅读这部分代码的时候的一些笔记：\n\n##### 判断值的类型\n\n```js\n// 使用 Object.toString 得到的是 [object type]\n// 可以获取到 type 值来获取到要进行判断的类型\nconst _toString = Object.prototype.toString\nfunction toRowType = value => _toString.call(value).slice(8, -1)\n```\n\n如下： 判断值为纯对象：\n\n```js\nfunction isPlainObject = obj => toRowType(obj) === '[object Object]';\n```\n\n判断为正则\n\n```js\nfunction isRegExp = val => toRowType(val) === '[object RegExp]';\n```\n\n##### 判断一个值为 `promise`\n\n```js\nfunction isPromise(val) {\n  return val !== undefind && \n  \t\t\t val !== null && \n  \t\t\t typeof val.then === 'function' && \n  \t\t\t typeof val.catch === 'function'\n}\n```\n\n也可以使用 `instanceof` 方法进行判断：\n\n```js\nfunction isPromise(val) {\n  return val instanceof Promise;\n}\n```\n\n上面的那种方法更多的是为了一些浏览器不能兼容 promise 的原因\n\n##### 通过函数的方法判断字符串中是否含有字符串\n\n```js\nfunction makeMap(str) {\n  // 使用 Object.create 用来创建一个 “干净”的对象\n  const map = Object.create(null);\n  const list = str.split(',');\n  for (let i = 0; i < list.length; i ++) {\n    map[list[i]] = true\n  }\n  return val => map[val];\n}\n```\n\n在 vue 中，使用上面的方法用来判断一串使用逗号分割的字符串中是否包含有某个字符串：\n\n目前， 使用 es6 的 `includes` 可以实现这种效果。\n\n上面的 `Object.create` 方法， 可以创建自继承自传入值的对象， 例如上面的 `Object.create(null)` 代码就是创建了一个空对象， 与 `{}` 对象不同的是， 通过 `create` 创建的空对象， 没有继承 `Object.prototype` 上面的方法。\n\n例如：\n\n{% asset_img code.png%}\n\n在上面中 使用 `create` 创建的空对象， 原型上面没有任何的属性\n\n使用 `Object.create` 创建空对象的好处如下：\n\n+ 创建的对象比较“干净”,  我们可以实现自定义的比如 `toString` 方法\n+ 使用 `for in` 的时候无需使用 `hasOwnProperty` 方法判断属性是不是继承的来的属性， 并且必用遍历继承的属性而提高了性能。\n\n##### 校验相等， 对于对象， 判断是否 “看起来” 一样：\n\n在代码中使用 `looseEqual`  这个函数， 如下：\n\n```js\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n*/\nexport function looseEqual (a, b){\n  if (a === b) return true\n  const isObjectA = isObject(a)\n  const isObjectB = isObject(b)\n  // 当都为对象的时候\n  if (isObjectA && isObjectB) {\n    try {\n      const isArrayA = Array.isArray(a)\n      const isArrayB = Array.isArray(b)\n      // 当都为数组的时候\n      // 这里判断数组相等， 可以先判断数组长度是否相等\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every((e, i) => {\n          return looseEqual(e, b[i])\n        })\n        // 对于时间判断的时候， 通过 getTime() 来判断\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        const keysA = Object.keys(a)\n        const keysB = Object.keys(b)\n        // 判断都为对象的时候\n        return keysA.length === keysB.length && keysA.every(key => {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n```\n\n##### once 函数方法\n\n```js\n// 确保 fn 只会调用一次\nfunction once(fn) {\n  let called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n```\n\n##### 正则相关\n\n代码中， 使用正则中的 `replace` 方法实现了对于变量命名由驼峰式转变为为连字符式：\n\n```js\nfunction hyhenate(str) {\n  return str.replace(/\\B([A-Z])/g, '-$1').toLowerCase()\n}\nhyhenate('myComponent'); // my-component\n```\n\n相关 `replace` 的一些特性， 在博客文章  [正则表达式（二）：基础方法](<https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/>) 中已经说明， 需要注意的一些地方：\n\n+ 正则表达式中需要添加标识符 `g` 用来进行全局匹配捕获\n+ 正则中使用括号包裹的表示一个捕获组进行捕获到的数据\n+ 使用 `\\B` 表示匹配单词内部\n\n使用正则将连字符单词转换为驼峰式的单词：\n\n```js\nfunction camelize(str) {\n  return str.replace(/-(\\w)/g, (_, c) => c ? c.toUpperCase() : '')\n}\ncamelize('my-component'); // myComponent\n```\n\n注意： 关于 `replace` 的第二个参数,  可以阅读  [正则表达式（二）：基础方法](<https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/>)   中关于<a href=\"/2019/01/20/正则表达式（二）：基础方法/#replaceFn\">replace</a>的相关知识。\n\n","slug":"vue 源码：utils 函数","published":1,"updated":"2020-09-14T06:36:25.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8c0044i2osic28ptrw","content":"<h4 id=\"utils-函数\"><a href=\"#utils-函数\" class=\"headerlink\" title=\"utils 函数\"></a>utils 函数</h4><hr>\n<p>在 vue 的 utils.js  文件中提供了一些使用的公共方法， 下面是在阅读这部分代码的时候的一些笔记：</p>\n<h5 id=\"判断值的类型\"><a href=\"#判断值的类型\" class=\"headerlink\" title=\"判断值的类型\"></a>判断值的类型</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Object.toString 得到的是 [object type]</span></span><br><span class=\"line\"><span class=\"comment\">// 可以获取到 type 值来获取到要进行判断的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toRowType</span> = <span class=\"title\">value</span> =&gt; <span class=\"title\">_toString</span>.<span class=\"title\">call</span>(<span class=\"params\">value</span>).<span class=\"title\">slice</span>(<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">-1</span></span>)</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断值为纯对象：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPlainObject = obj =&gt; toRowType(obj) === '[object Object]';</span><br></pre></td></tr></table></figure>\n<p>判断为正则</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isRegExp = val =&gt; toRowType(val) === '[object RegExp]';</span><br></pre></td></tr></table></figure>\n<h5 id=\"判断一个值为-promise\"><a href=\"#判断一个值为-promise\" class=\"headerlink\" title=\"判断一个值为 promise\"></a>判断一个值为 <code>promise</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val !== undefind &amp;&amp; </span><br><span class=\"line\">  \t\t\t val !== <span class=\"literal\">null</span> &amp;&amp; </span><br><span class=\"line\">  \t\t\t <span class=\"keyword\">typeof</span> val.then === <span class=\"string\">'function'</span> &amp;&amp; </span><br><span class=\"line\">  \t\t\t <span class=\"keyword\">typeof</span> val.catch === <span class=\"string\">'function'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 <code>instanceof</code> 方法进行判断：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的那种方法更多的是为了一些浏览器不能兼容 promise 的原因</p>\n<h5 id=\"通过函数的方法判断字符串中是否含有字符串\"><a href=\"#通过函数的方法判断字符串中是否含有字符串\" class=\"headerlink\" title=\"通过函数的方法判断字符串中是否含有字符串\"></a>通过函数的方法判断字符串中是否含有字符串</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeMap</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.create 用来创建一个 “干净”的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = str.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i ++) &#123;</span><br><span class=\"line\">    map[list[i]] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> map[val];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 vue 中，使用上面的方法用来判断一串使用逗号分割的字符串中是否包含有某个字符串：</p>\n<p>目前， 使用 es6 的 <code>includes</code> 可以实现这种效果。</p>\n<p>上面的 <code>Object.create</code> 方法， 可以创建自继承自传入值的对象， 例如上面的 <code>Object.create(null)</code> 代码就是创建了一个空对象， 与 <code>{}</code> 对象不同的是， 通过 <code>create</code> 创建的空对象， 没有继承 <code>Object.prototype</code> 上面的方法。</p>\n<p>例如：</p>\n<img src=\"/2019/04/05/vue%20源码：utils%20函数/code.png\">\n<p>在上面中 使用 <code>create</code> 创建的空对象， 原型上面没有任何的属性</p>\n<p>使用 <code>Object.create</code> 创建空对象的好处如下：</p>\n<ul>\n<li>创建的对象比较“干净”,  我们可以实现自定义的比如 <code>toString</code> 方法</li>\n<li>使用 <code>for in</code> 的时候无需使用 <code>hasOwnProperty</code> 方法判断属性是不是继承的来的属性， 并且必用遍历继承的属性而提高了性能。</li>\n</ul>\n<h5 id=\"校验相等，-对于对象，-判断是否-“看起来”-一样：\"><a href=\"#校验相等，-对于对象，-判断是否-“看起来”-一样：\" class=\"headerlink\" title=\"校验相等， 对于对象， 判断是否 “看起来” 一样：\"></a>校验相等， 对于对象， 判断是否 “看起来” 一样：</h5><p>在代码中使用 <code>looseEqual</code>  这个函数， 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if two values are loosely equal - that is,</span></span><br><span class=\"line\"><span class=\"comment\"> * if they are plain objects, do they have the same shape?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">looseEqual</span> (<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjectA = isObject(a)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjectB = isObject(b)</span><br><span class=\"line\">  <span class=\"comment\">// 当都为对象的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObjectA &amp;&amp; isObjectB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isArrayA = <span class=\"built_in\">Array</span>.isArray(a)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isArrayB = <span class=\"built_in\">Array</span>.isArray(b)</span><br><span class=\"line\">      <span class=\"comment\">// 当都为数组的时候</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里判断数组相等， 可以先判断数组长度是否相等</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isArrayA &amp;&amp; isArrayB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.length === b.length &amp;&amp; a.every(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> looseEqual(e, b[i])</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 对于时间判断的时候， 通过 getTime() 来判断</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span> &amp;&amp; b <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.getTime() === b.getTime()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isArrayA &amp;&amp; !isArrayB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keysA = <span class=\"built_in\">Object</span>.keys(a)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keysB = <span class=\"built_in\">Object</span>.keys(b)</span><br><span class=\"line\">        <span class=\"comment\">// 判断都为对象的时候</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> keysA.length === keysB.length &amp;&amp; keysA.every(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> looseEqual(a[key], b[key])</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isObjectA &amp;&amp; !isObjectB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(a) === <span class=\"built_in\">String</span>(b)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"once-函数方法\"><a href=\"#once-函数方法\" class=\"headerlink\" title=\"once 函数方法\"></a>once 函数方法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 确保 fn 只会调用一次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">once</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"正则相关\"><a href=\"#正则相关\" class=\"headerlink\" title=\"正则相关\"></a>正则相关</h5><p>代码中， 使用正则中的 <code>replace</code> 方法实现了对于变量命名由驼峰式转变为为连字符式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hyhenate</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\B([A-Z])/g</span>, <span class=\"string\">'-$1'</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hyhenate(<span class=\"string\">'myComponent'</span>); <span class=\"comment\">// my-component</span></span><br></pre></td></tr></table></figure>\n<p>相关 <code>replace</code> 的一些特性， 在博客文章  <a href=\"https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/\">正则表达式（二）：基础方法</a> 中已经说明， 需要注意的一些地方：</p>\n<ul>\n<li>正则表达式中需要添加标识符 <code>g</code> 用来进行全局匹配捕获</li>\n<li>正则中使用括号包裹的表示一个捕获组进行捕获到的数据</li>\n<li>使用 <code>\\B</code> 表示匹配单词内部</li>\n</ul>\n<p>使用正则将连字符单词转换为驼峰式的单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-(\\w)/g</span>, (_, c) =&gt; c ? c.toUpperCase() : <span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camelize(<span class=\"string\">'my-component'</span>); <span class=\"comment\">// myComponent</span></span><br></pre></td></tr></table></figure>\n<p>注意： 关于 <code>replace</code> 的第二个参数,  可以阅读  <a href=\"https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/\">正则表达式（二）：基础方法</a>   中关于<a href=\"/2019/01/20/正则表达式（二）：基础方法/#replaceFn\">replace</a>的相关知识。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"utils-函数\"><a href=\"#utils-函数\" class=\"headerlink\" title=\"utils 函数\"></a>utils 函数</h4><hr>\n<p>在 vue 的 utils.js  文件中提供了一些使用的公共方法， 下面是在阅读这部分代码的时候的一些笔记：</p>\n<h5 id=\"判断值的类型\"><a href=\"#判断值的类型\" class=\"headerlink\" title=\"判断值的类型\"></a>判断值的类型</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Object.toString 得到的是 [object type]</span></span><br><span class=\"line\"><span class=\"comment\">// 可以获取到 type 值来获取到要进行判断的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _toString = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toRowType</span> = <span class=\"title\">value</span> =&gt; <span class=\"title\">_toString</span>.<span class=\"title\">call</span>(<span class=\"params\">value</span>).<span class=\"title\">slice</span>(<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">-1</span></span>)</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断值为纯对象：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPlainObject = obj =&gt; toRowType(obj) === '[object Object]';</span><br></pre></td></tr></table></figure>\n<p>判断为正则</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isRegExp = val =&gt; toRowType(val) === '[object RegExp]';</span><br></pre></td></tr></table></figure>\n<h5 id=\"判断一个值为-promise\"><a href=\"#判断一个值为-promise\" class=\"headerlink\" title=\"判断一个值为 promise\"></a>判断一个值为 <code>promise</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val !== undefind &amp;&amp; </span><br><span class=\"line\">  \t\t\t val !== <span class=\"literal\">null</span> &amp;&amp; </span><br><span class=\"line\">  \t\t\t <span class=\"keyword\">typeof</span> val.then === <span class=\"string\">'function'</span> &amp;&amp; </span><br><span class=\"line\">  \t\t\t <span class=\"keyword\">typeof</span> val.catch === <span class=\"string\">'function'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以使用 <code>instanceof</code> 方法进行判断：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的那种方法更多的是为了一些浏览器不能兼容 promise 的原因</p>\n<h5 id=\"通过函数的方法判断字符串中是否含有字符串\"><a href=\"#通过函数的方法判断字符串中是否含有字符串\" class=\"headerlink\" title=\"通过函数的方法判断字符串中是否含有字符串\"></a>通过函数的方法判断字符串中是否含有字符串</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeMap</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.create 用来创建一个 “干净”的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = str.split(<span class=\"string\">','</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i ++) &#123;</span><br><span class=\"line\">    map[list[i]] = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> map[val];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 vue 中，使用上面的方法用来判断一串使用逗号分割的字符串中是否包含有某个字符串：</p>\n<p>目前， 使用 es6 的 <code>includes</code> 可以实现这种效果。</p>\n<p>上面的 <code>Object.create</code> 方法， 可以创建自继承自传入值的对象， 例如上面的 <code>Object.create(null)</code> 代码就是创建了一个空对象， 与 <code>{}</code> 对象不同的是， 通过 <code>create</code> 创建的空对象， 没有继承 <code>Object.prototype</code> 上面的方法。</p>\n<p>例如：</p>\n<img src=\"/2019/04/05/vue%20源码：utils%20函数/code.png\">\n<p>在上面中 使用 <code>create</code> 创建的空对象， 原型上面没有任何的属性</p>\n<p>使用 <code>Object.create</code> 创建空对象的好处如下：</p>\n<ul>\n<li>创建的对象比较“干净”,  我们可以实现自定义的比如 <code>toString</code> 方法</li>\n<li>使用 <code>for in</code> 的时候无需使用 <code>hasOwnProperty</code> 方法判断属性是不是继承的来的属性， 并且必用遍历继承的属性而提高了性能。</li>\n</ul>\n<h5 id=\"校验相等，-对于对象，-判断是否-“看起来”-一样：\"><a href=\"#校验相等，-对于对象，-判断是否-“看起来”-一样：\" class=\"headerlink\" title=\"校验相等， 对于对象， 判断是否 “看起来” 一样：\"></a>校验相等， 对于对象， 判断是否 “看起来” 一样：</h5><p>在代码中使用 <code>looseEqual</code>  这个函数， 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check if two values are loosely equal - that is,</span></span><br><span class=\"line\"><span class=\"comment\"> * if they are plain objects, do they have the same shape?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">looseEqual</span> (<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjectA = isObject(a)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjectB = isObject(b)</span><br><span class=\"line\">  <span class=\"comment\">// 当都为对象的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObjectA &amp;&amp; isObjectB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isArrayA = <span class=\"built_in\">Array</span>.isArray(a)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isArrayB = <span class=\"built_in\">Array</span>.isArray(b)</span><br><span class=\"line\">      <span class=\"comment\">// 当都为数组的时候</span></span><br><span class=\"line\">      <span class=\"comment\">// 这里判断数组相等， 可以先判断数组长度是否相等</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isArrayA &amp;&amp; isArrayB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.length === b.length &amp;&amp; a.every(<span class=\"function\">(<span class=\"params\">e, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> looseEqual(e, b[i])</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 对于时间判断的时候， 通过 getTime() 来判断</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span> &amp;&amp; b <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.getTime() === b.getTime()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isArrayA &amp;&amp; !isArrayB) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keysA = <span class=\"built_in\">Object</span>.keys(a)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keysB = <span class=\"built_in\">Object</span>.keys(b)</span><br><span class=\"line\">        <span class=\"comment\">// 判断都为对象的时候</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> keysA.length === keysB.length &amp;&amp; keysA.every(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> looseEqual(a[key], b[key])</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isObjectA &amp;&amp; !isObjectB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>(a) === <span class=\"built_in\">String</span>(b)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"once-函数方法\"><a href=\"#once-函数方法\" class=\"headerlink\" title=\"once 函数方法\"></a>once 函数方法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 确保 fn 只会调用一次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">once</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"正则相关\"><a href=\"#正则相关\" class=\"headerlink\" title=\"正则相关\"></a>正则相关</h5><p>代码中， 使用正则中的 <code>replace</code> 方法实现了对于变量命名由驼峰式转变为为连字符式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hyhenate</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/\\B([A-Z])/g</span>, <span class=\"string\">'-$1'</span>).toLowerCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hyhenate(<span class=\"string\">'myComponent'</span>); <span class=\"comment\">// my-component</span></span><br></pre></td></tr></table></figure>\n<p>相关 <code>replace</code> 的一些特性， 在博客文章  <a href=\"https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/\">正则表达式（二）：基础方法</a> 中已经说明， 需要注意的一些地方：</p>\n<ul>\n<li>正则表达式中需要添加标识符 <code>g</code> 用来进行全局匹配捕获</li>\n<li>正则中使用括号包裹的表示一个捕获组进行捕获到的数据</li>\n<li>使用 <code>\\B</code> 表示匹配单词内部</li>\n</ul>\n<p>使用正则将连字符单词转换为驼峰式的单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-(\\w)/g</span>, (_, c) =&gt; c ? c.toUpperCase() : <span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camelize(<span class=\"string\">'my-component'</span>); <span class=\"comment\">// myComponent</span></span><br></pre></td></tr></table></figure>\n<p>注意： 关于 <code>replace</code> 的第二个参数,  可以阅读  <a href=\"https://newpromise.github.io/2019/01/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/\">正则表达式（二）：基础方法</a>   中关于<a href=\"/2019/01/20/正则表达式（二）：基础方法/#replaceFn\">replace</a>的相关知识。</p>\n"},{"title":"事件监听代码","date":"2018-05-06T02:38:39.000Z","_content":"\n简单的事件监听函数，从 `N3-components` 组件代码中发现的：\n\n```javascript\nconst EventListener = {\n    listen (listen, eventType, callback) {\n        // 如果存在 addEventListener\n        if (target.addEventListener) {\n            target.addEventListener(eventType, callback, false);\n            return {\n                remove () {\n                    target.removeEventListener(eventType, callback, false);\n                }\n            }\n          // 如果存在 attachEvent 事件\n        } else if (target.attachEvent) {\n\t\t    target.attachEvent('on' + eventType);\n            return {\n                remove () {\n                    target.detachEvent('on' + eventType, callback);\n                }\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/事件监听代码.md","raw":"---\ntitle: 事件监听代码\ndate: 2018-05-06 10:38:39\ntags: 事件监听\ncategories: 代码集\n---\n\n简单的事件监听函数，从 `N3-components` 组件代码中发现的：\n\n```javascript\nconst EventListener = {\n    listen (listen, eventType, callback) {\n        // 如果存在 addEventListener\n        if (target.addEventListener) {\n            target.addEventListener(eventType, callback, false);\n            return {\n                remove () {\n                    target.removeEventListener(eventType, callback, false);\n                }\n            }\n          // 如果存在 attachEvent 事件\n        } else if (target.attachEvent) {\n\t\t    target.attachEvent('on' + eventType);\n            return {\n                remove () {\n                    target.detachEvent('on' + eventType, callback);\n                }\n            }\n        }\n    }\n}\n```\n\n","slug":"事件监听代码","published":1,"updated":"2020-09-14T06:36:25.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8d0049i2osnbt797bv","content":"<p>简单的事件监听函数，从 <code>N3-components</code> 组件代码中发现的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventListener = &#123;</span><br><span class=\"line\">    listen (listen, eventType, callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在 addEventListener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 attachEvent 事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">\t\t    target.attachEvent(<span class=\"string\">'on'</span> + eventType);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>简单的事件监听函数，从 <code>N3-components</code> 组件代码中发现的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventListener = &#123;</span><br><span class=\"line\">    listen (listen, eventType, callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在 addEventListener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 attachEvent 事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">\t\t    target.attachEvent(<span class=\"string\">'on'</span> + eventType);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue 知识总结","date":"2018-04-29T04:13:38.000Z","_content":"\n在项目开发中，发现对于 `vue` 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：\n\n###  计算属性和侦听器 \n\n在  `vue.js` 中，通过使用 `watch` 以及 `computed` 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 `watch`, 但是在一些情况下，使用 `comnputed` 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 `vue.js` 官方文档：[计算属性和侦听器](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8) \n\n`watch`:\n\n`watch`侦听器相对于 `computed` 而言更为通用，使用 `watch` 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：\n\n```javascript\n// 监听某一个数据\nwatch: {\n    value: function (newVal, oldVal) {\n        // some action\n    }\n}\n// 监听对象中的某一个属性\nwatch: {\n    \"object.value\"： function (newVal, oldVal) {\n        // some action\n    }\n}\n```\n\n注意： 使用 `watch` 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 `deep: true`:\n\n```javascript\nwatch: {\n  object: {\n      handler: function (newVal, oldVal) {\n          // somn action\n      },\n      deep: true\n  }\n}\n```\n\n如果想要回调在监听之后立即被调用， 可以设置 `immediate:true` ：\n\n```vue\nwatch: {\n  object: {\n    // 回调函数立即被调用不管监听对象有没有被调用\n    handler: function (newVal, oldVal) {\n      // some action\n    },\n    deep: true,\n    immediate: true\n  }\n}\n```\n\n\n\n`computed`:\n\n在有些地方， 我们使用 `computed` 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：\n\n```javascript\ndata() {\n    person: {\n        name: \"\",\n        age: \"\",\n        sex: \"\"\n    }\n},\ncomputed: {\n    personMsg: function () {\n      // 这里可以监听到对象的变化\n        const { name, age, sex } = this.person;\n        return `${name} is a ${age} ${sex}`;\n    }\n}\n```\n\n当上面代码中的 `this.person` 中的数据发生变化的时候， `personMsg` 就会实时的发生变化：\n\n对于 `computed` 的使用， 注意下面两点：\n\n1. 对于上面代码中的计算属性： `personMsg` 的取值决定于 `this.person` 的值， 这里计算函数实际上拦截了计算属性的 `getter` 函数， 计算属性可以在模版中像其他 `data` 中的数据一样被使用\n\n   ```html\n   <div>{{ personMsg }}<div>\n   ```\n\n2. 使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。\n\n   ```javascript\n   methods: {\n     personMsg () {\n       return this.msg;\n     }\n   }\n   ```","source":"_posts/vue 知识总结.md","raw":"---\ntitle: vue 知识总结\ndate: 2018-04-29 12:13:38\ntags: vue 知识总结（一）\ncategories: vue\n---\n\n在项目开发中，发现对于 `vue` 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：\n\n###  计算属性和侦听器 \n\n在  `vue.js` 中，通过使用 `watch` 以及 `computed` 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 `watch`, 但是在一些情况下，使用 `comnputed` 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 `vue.js` 官方文档：[计算属性和侦听器](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8) \n\n`watch`:\n\n`watch`侦听器相对于 `computed` 而言更为通用，使用 `watch` 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：\n\n```javascript\n// 监听某一个数据\nwatch: {\n    value: function (newVal, oldVal) {\n        // some action\n    }\n}\n// 监听对象中的某一个属性\nwatch: {\n    \"object.value\"： function (newVal, oldVal) {\n        // some action\n    }\n}\n```\n\n注意： 使用 `watch` 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 `deep: true`:\n\n```javascript\nwatch: {\n  object: {\n      handler: function (newVal, oldVal) {\n          // somn action\n      },\n      deep: true\n  }\n}\n```\n\n如果想要回调在监听之后立即被调用， 可以设置 `immediate:true` ：\n\n```vue\nwatch: {\n  object: {\n    // 回调函数立即被调用不管监听对象有没有被调用\n    handler: function (newVal, oldVal) {\n      // some action\n    },\n    deep: true,\n    immediate: true\n  }\n}\n```\n\n\n\n`computed`:\n\n在有些地方， 我们使用 `computed` 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：\n\n```javascript\ndata() {\n    person: {\n        name: \"\",\n        age: \"\",\n        sex: \"\"\n    }\n},\ncomputed: {\n    personMsg: function () {\n      // 这里可以监听到对象的变化\n        const { name, age, sex } = this.person;\n        return `${name} is a ${age} ${sex}`;\n    }\n}\n```\n\n当上面代码中的 `this.person` 中的数据发生变化的时候， `personMsg` 就会实时的发生变化：\n\n对于 `computed` 的使用， 注意下面两点：\n\n1. 对于上面代码中的计算属性： `personMsg` 的取值决定于 `this.person` 的值， 这里计算函数实际上拦截了计算属性的 `getter` 函数， 计算属性可以在模版中像其他 `data` 中的数据一样被使用\n\n   ```html\n   <div>{{ personMsg }}<div>\n   ```\n\n2. 使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。\n\n   ```javascript\n   methods: {\n     personMsg () {\n       return this.msg;\n     }\n   }\n   ```","slug":"vue 知识总结","published":1,"updated":"2020-09-14T06:36:25.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8g004ai2osoefb6n74","content":"<p>在项目开发中，发现对于 <code>vue</code> 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：</p>\n<h3 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h3><p>在  <code>vue.js</code> 中，通过使用 <code>watch</code> 以及 <code>computed</code> 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 <code>watch</code>, 但是在一些情况下，使用 <code>comnputed</code> 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 <code>vue.js</code> 官方文档：<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">计算属性和侦听器</a> </p>\n<p><code>watch</code>:</p>\n<p><code>watch</code>侦听器相对于 <code>computed</code> 而言更为通用，使用 <code>watch</code> 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听某一个数据</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听对象中的某一个属性</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"object.value\"</span>： <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 <code>watch</code> 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 <code>deep: true</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// somn action</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要回调在监听之后立即被调用， 可以设置 <code>immediate:true</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">    // 回调函数立即被调用不管监听对象有没有被调用</span><br><span class=\"line\">    handler: function (newVal, oldVal) &#123;</span><br><span class=\"line\">      // some action</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,</span><br><span class=\"line\">    immediate: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>computed</code>:</p>\n<p>在有些地方， 我们使用 <code>computed</code> 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    person: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        age: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        sex: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    personMsg: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以监听到对象的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; name, age, sex &#125; = <span class=\"keyword\">this</span>.person;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> is a <span class=\"subst\">$&#123;age&#125;</span> <span class=\"subst\">$&#123;sex&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当上面代码中的 <code>this.person</code> 中的数据发生变化的时候， <code>personMsg</code> 就会实时的发生变化：</p>\n<p>对于 <code>computed</code> 的使用， 注意下面两点：</p>\n<ol>\n<li><p>对于上面代码中的计算属性： <code>personMsg</code> 的取值决定于 <code>this.person</code> 的值， 这里计算函数实际上拦截了计算属性的 <code>getter</code> 函数， 计算属性可以在模版中像其他 <code>data</code> 中的数据一样被使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; personMsg &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  personMsg () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.msg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中，发现对于 <code>vue</code> 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：</p>\n<h3 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h3><p>在  <code>vue.js</code> 中，通过使用 <code>watch</code> 以及 <code>computed</code> 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 <code>watch</code>, 但是在一些情况下，使用 <code>comnputed</code> 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 <code>vue.js</code> 官方文档：<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">计算属性和侦听器</a> </p>\n<p><code>watch</code>:</p>\n<p><code>watch</code>侦听器相对于 <code>computed</code> 而言更为通用，使用 <code>watch</code> 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听某一个数据</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听对象中的某一个属性</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"object.value\"</span>： <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 <code>watch</code> 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 <code>deep: true</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// somn action</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要回调在监听之后立即被调用， 可以设置 <code>immediate:true</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">    // 回调函数立即被调用不管监听对象有没有被调用</span><br><span class=\"line\">    handler: function (newVal, oldVal) &#123;</span><br><span class=\"line\">      // some action</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,</span><br><span class=\"line\">    immediate: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>computed</code>:</p>\n<p>在有些地方， 我们使用 <code>computed</code> 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    person: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        age: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        sex: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    personMsg: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以监听到对象的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; name, age, sex &#125; = <span class=\"keyword\">this</span>.person;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> is a <span class=\"subst\">$&#123;age&#125;</span> <span class=\"subst\">$&#123;sex&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当上面代码中的 <code>this.person</code> 中的数据发生变化的时候， <code>personMsg</code> 就会实时的发生变化：</p>\n<p>对于 <code>computed</code> 的使用， 注意下面两点：</p>\n<ol>\n<li><p>对于上面代码中的计算属性： <code>personMsg</code> 的取值决定于 <code>this.person</code> 的值， 这里计算函数实际上拦截了计算属性的 <code>getter</code> 函数， 计算属性可以在模版中像其他 <code>data</code> 中的数据一样被使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; personMsg &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  personMsg () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.msg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"while and do","date":"2017-12-09T01:46:32.000Z","_content":"\n#### 运算符优先级\n\n关于运算符的优先级，存在下面的优先级级别:\n\n(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)\n\n|                . [ ] ( )                 | 提取属性与调用函数 （优先级  () > .） |\n| :--------------------------------------: | :---------------------: |\n| `delete`   `new`   `typeof `  `+` ` -`  `!` |          一元运算符          |\n|              `*`  `/`  `%`               |       乘法， 除法, 求余        |\n|                 `+`  `-`                 |       加法/ 连接  减法        |\n|          `>=`  `<=`   `>`  `<`           |         不等式运算符          |\n|              `===`   `!==`               |          等式运算符          |\n|                   `&&`                   |           逻辑与           |\n|                   `||`                   |           逻辑或           |\n|                   `?:`                   |           三元            |\n\n使用运算符优先级中注意:  `&&` > `||`\n\n下面是一些使用运算符的一些例子:\n\n1.  对于点号运算符以及加号运算符\n\n   ```javascript\n   +\"2.34567\".toFixed(2);\n   // 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数\n   // 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function\n   ```\n\n   上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 `toFixed()` 函数， 当然会出现错误，\n\n   解决办法， 添加 `()` 因为这时候括号的优先级要高于点号:\n\n   ```javascript\n   (+\"2.34567\").toFixed(2)\n   ```\n\n   2. 逻辑与的操作符  `&&` 的操作符优先级要高于 `||` 的操作符优先级。\n\n      例如对于下面的这个程序而言:\n\n      ```javascript\n      true || false && false\n      // 因为这里 && 操作符的优先级要高于 || 因此这里会返回 true\n      ```\n\n      注意: 这里对于 `||` 以及 `&&` 操作符的理解要正确:\n\n      这两个操作符返回的都是值，而不是 `true` 或者 `false\n\n   3.  `[] == ![]`\n\n      上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。\n\n      在上面这个过程中， 因为 `!` 的优先级要高于 `==`, 因此先执行 `!` 进行类型转换， 因为这里 `[]` 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)\n\n      >通过使用布尔强制类型转换结果为 `false` 的被称作假值， 假值有下面几种：\n      >\n      >`undefined`, `null`, `false`, `+0, -0 和 NaN`, \" \"\n      >\n      >ps: 其他的类型不要进来 （`[], {}` : 你们看我干嘛？）\n\n      首先执行下面的操作：\n\n      ```javascript\n      ![] ===> false\n      ```\n\n      这个时候等号右边的值变成了 `false`,这个时候使用 `==` 会进行强制类型转换，将布尔值转换为数字\n\n      ```javascript\n      Number(false) ===> 0\n      ```\n\n      这个时候 `==` 两边分别是 `object` 以及 `number` 类型的值， 这个时候需要将 `obejct` 转为数字：\n\n      ```javascript\n      Number([].valueOf()) ===> 0\n      ```\n\n      因此， 上面的等式经过转换之后，变成了下面的这种：\n\n      ```javascript\n      0 === 0 // true\n      ```\n\n\n\n","source":"_posts/while-and-do.md","raw":"---\ntitle: while and do\ndate: 2017-12-09 09:46:32\ntags: whileordo\ncategories: 笔记\n---\n\n#### 运算符优先级\n\n关于运算符的优先级，存在下面的优先级级别:\n\n(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)\n\n|                . [ ] ( )                 | 提取属性与调用函数 （优先级  () > .） |\n| :--------------------------------------: | :---------------------: |\n| `delete`   `new`   `typeof `  `+` ` -`  `!` |          一元运算符          |\n|              `*`  `/`  `%`               |       乘法， 除法, 求余        |\n|                 `+`  `-`                 |       加法/ 连接  减法        |\n|          `>=`  `<=`   `>`  `<`           |         不等式运算符          |\n|              `===`   `!==`               |          等式运算符          |\n|                   `&&`                   |           逻辑与           |\n|                   `||`                   |           逻辑或           |\n|                   `?:`                   |           三元            |\n\n使用运算符优先级中注意:  `&&` > `||`\n\n下面是一些使用运算符的一些例子:\n\n1.  对于点号运算符以及加号运算符\n\n   ```javascript\n   +\"2.34567\".toFixed(2);\n   // 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数\n   // 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function\n   ```\n\n   上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 `toFixed()` 函数， 当然会出现错误，\n\n   解决办法， 添加 `()` 因为这时候括号的优先级要高于点号:\n\n   ```javascript\n   (+\"2.34567\").toFixed(2)\n   ```\n\n   2. 逻辑与的操作符  `&&` 的操作符优先级要高于 `||` 的操作符优先级。\n\n      例如对于下面的这个程序而言:\n\n      ```javascript\n      true || false && false\n      // 因为这里 && 操作符的优先级要高于 || 因此这里会返回 true\n      ```\n\n      注意: 这里对于 `||` 以及 `&&` 操作符的理解要正确:\n\n      这两个操作符返回的都是值，而不是 `true` 或者 `false\n\n   3.  `[] == ![]`\n\n      上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。\n\n      在上面这个过程中， 因为 `!` 的优先级要高于 `==`, 因此先执行 `!` 进行类型转换， 因为这里 `[]` 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)\n\n      >通过使用布尔强制类型转换结果为 `false` 的被称作假值， 假值有下面几种：\n      >\n      >`undefined`, `null`, `false`, `+0, -0 和 NaN`, \" \"\n      >\n      >ps: 其他的类型不要进来 （`[], {}` : 你们看我干嘛？）\n\n      首先执行下面的操作：\n\n      ```javascript\n      ![] ===> false\n      ```\n\n      这个时候等号右边的值变成了 `false`,这个时候使用 `==` 会进行强制类型转换，将布尔值转换为数字\n\n      ```javascript\n      Number(false) ===> 0\n      ```\n\n      这个时候 `==` 两边分别是 `object` 以及 `number` 类型的值， 这个时候需要将 `obejct` 转为数字：\n\n      ```javascript\n      Number([].valueOf()) ===> 0\n      ```\n\n      因此， 上面的等式经过转换之后，变成了下面的这种：\n\n      ```javascript\n      0 === 0 // true\n      ```\n\n\n\n","slug":"while-and-do","published":1,"updated":"2020-09-14T06:36:25.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8j004ei2oscezfgabb","content":"<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><p>关于运算符的优先级，存在下面的优先级级别:</p>\n<p>(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">. [ ] ( )</th>\n<th style=\"text-align:center\">提取属性与调用函数 （优先级  () &gt; .）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>delete</code>   <code>new</code>   <code>typeof</code>  <code>+</code> <code>-</code>  <code>!</code></td>\n<td style=\"text-align:center\">一元运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code>  <code>/</code>  <code>%</code></td>\n<td style=\"text-align:center\">乘法， 除法, 求余</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code>  <code>-</code></td>\n<td style=\"text-align:center\">加法/ 连接  减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code>  <code>&lt;=</code>   <code>&gt;</code>  <code>&lt;</code></td>\n<td style=\"text-align:center\">不等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>===</code>   <code>!==</code></td>\n<td style=\"text-align:center\">等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:center\">逻辑与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:center\"></td>\n<td>`</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?:</code></td>\n<td style=\"text-align:center\">三元</td>\n</tr>\n</tbody>\n</table>\n<p>使用运算符优先级中注意:  <code>&amp;&amp;</code> &gt; <code>||</code></p>\n<p>下面是一些使用运算符的一些例子:</p>\n<ol>\n<li><p>对于点号运算符以及加号运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">\"2.34567\"</span>.toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\">// 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function</span></span><br></pre></td></tr></table></figure>\n<p>上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 <code>toFixed()</code> 函数， 当然会出现错误，</p>\n<p>解决办法， 添加 <code>()</code> 因为这时候括号的优先级要高于点号:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(+<span class=\"string\">\"2.34567\"</span>).toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>逻辑与的操作符  <code>&amp;&amp;</code> 的操作符优先级要高于 <code>||</code> 的操作符优先级。</p>\n<p>例如对于下面的这个程序而言:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这里 &amp;&amp; 操作符的优先级要高于 || 因此这里会返回 true</span></span><br></pre></td></tr></table></figure>\n<p>注意: 这里对于 <code>||</code> 以及 <code>&amp;&amp;</code> 操作符的理解要正确:</p>\n<p>这两个操作符返回的都是值，而不是 <code>true</code> 或者 `false</p>\n</li>\n<li><p><code>[] == ![]</code></p>\n<p>上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。</p>\n<p>在上面这个过程中， 因为 <code>!</code> 的优先级要高于 <code>==</code>, 因此先执行 <code>!</code> 进行类型转换， 因为这里 <code>[]</code> 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)</p>\n<blockquote>\n<p>通过使用布尔强制类型转换结果为 <code>false</code> 的被称作假值， 假值有下面几种：</p>\n<p><code>undefined</code>, <code>null</code>, <code>false</code>, <code>+0, -0 和 NaN</code>, “ “</p>\n<p>ps: 其他的类型不要进来 （<code>[], {}</code> : 你们看我干嘛？）</p>\n</blockquote>\n<p>首先执行下面的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![] ===&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>这个时候等号右边的值变成了 <code>false</code>,这个时候使用 <code>==</code> 会进行强制类型转换，将布尔值转换为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个时候 <code>==</code> 两边分别是 <code>object</code> 以及 <code>number</code> 类型的值， 这个时候需要将 <code>obejct</code> 转为数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>([].valueOf()) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>因此， 上面的等式经过转换之后，变成了下面的这种：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> === <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><p>关于运算符的优先级，存在下面的优先级级别:</p>\n<p>(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">. [ ] ( )</th>\n<th style=\"text-align:center\">提取属性与调用函数 （优先级  () &gt; .）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>delete</code>   <code>new</code>   <code>typeof</code>  <code>+</code> <code>-</code>  <code>!</code></td>\n<td style=\"text-align:center\">一元运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code>  <code>/</code>  <code>%</code></td>\n<td style=\"text-align:center\">乘法， 除法, 求余</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code>  <code>-</code></td>\n<td style=\"text-align:center\">加法/ 连接  减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code>  <code>&lt;=</code>   <code>&gt;</code>  <code>&lt;</code></td>\n<td style=\"text-align:center\">不等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>===</code>   <code>!==</code></td>\n<td style=\"text-align:center\">等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:center\">逻辑与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:center\"></td>\n<td>`</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?:</code></td>\n<td style=\"text-align:center\">三元</td>\n</tr>\n</tbody>\n</table>\n<p>使用运算符优先级中注意:  <code>&amp;&amp;</code> &gt; <code>||</code></p>\n<p>下面是一些使用运算符的一些例子:</p>\n<ol>\n<li><p>对于点号运算符以及加号运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">\"2.34567\"</span>.toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\">// 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function</span></span><br></pre></td></tr></table></figure>\n<p>上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 <code>toFixed()</code> 函数， 当然会出现错误，</p>\n<p>解决办法， 添加 <code>()</code> 因为这时候括号的优先级要高于点号:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(+<span class=\"string\">\"2.34567\"</span>).toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>逻辑与的操作符  <code>&amp;&amp;</code> 的操作符优先级要高于 <code>||</code> 的操作符优先级。</p>\n<p>例如对于下面的这个程序而言:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这里 &amp;&amp; 操作符的优先级要高于 || 因此这里会返回 true</span></span><br></pre></td></tr></table></figure>\n<p>注意: 这里对于 <code>||</code> 以及 <code>&amp;&amp;</code> 操作符的理解要正确:</p>\n<p>这两个操作符返回的都是值，而不是 <code>true</code> 或者 `false</p>\n</li>\n<li><p><code>[] == ![]</code></p>\n<p>上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。</p>\n<p>在上面这个过程中， 因为 <code>!</code> 的优先级要高于 <code>==</code>, 因此先执行 <code>!</code> 进行类型转换， 因为这里 <code>[]</code> 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)</p>\n<blockquote>\n<p>通过使用布尔强制类型转换结果为 <code>false</code> 的被称作假值， 假值有下面几种：</p>\n<p><code>undefined</code>, <code>null</code>, <code>false</code>, <code>+0, -0 和 NaN</code>, “ “</p>\n<p>ps: 其他的类型不要进来 （<code>[], {}</code> : 你们看我干嘛？）</p>\n</blockquote>\n<p>首先执行下面的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![] ===&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>这个时候等号右边的值变成了 <code>false</code>,这个时候使用 <code>==</code> 会进行强制类型转换，将布尔值转换为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个时候 <code>==</code> 两边分别是 <code>object</code> 以及 <code>number</code> 类型的值， 这个时候需要将 <code>obejct</code> 转为数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>([].valueOf()) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>因此， 上面的等式经过转换之后，变成了下面的这种：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> === <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"作用域 与 this 值","date":"2017-11-12T05:41:19.000Z","_content":"\n对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。\n\n### 词法作用域\n\n对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。\n\n代码如下:\n\n```\nfunction foo() {\n  console.log(a) // 2\n}\nfunction bar() {\n  var a = 3;\n  foo();\n}\nvar a = 2;\nbar();\n```\n\n因为这里面的 `foo` 函数书写在全局的作用域中，因此会被输出 `2`\n\n###  动态作用域\n\n动态作用域关心的是函数是在哪里被调用的。\n\n上面的函数中使用动态作用域的时候 最终输出应该是 `3`,因为从 `foo` 函数被调用的地方寻在变量 `a` 最后找到了 `var a = 3`.\n\n词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。\n\n使用js 中的 `this` 的时候， `this` 的效果是类似于使用动态作用域的。","source":"_posts/作用域.md","raw":"---\ntitle: 作用域 与 this 值\ndate: 2017-11-12 13:41:19\ntags: \"作用域\"\ncategories: 笔记\n---\n\n对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。\n\n### 词法作用域\n\n对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。\n\n代码如下:\n\n```\nfunction foo() {\n  console.log(a) // 2\n}\nfunction bar() {\n  var a = 3;\n  foo();\n}\nvar a = 2;\nbar();\n```\n\n因为这里面的 `foo` 函数书写在全局的作用域中，因此会被输出 `2`\n\n###  动态作用域\n\n动态作用域关心的是函数是在哪里被调用的。\n\n上面的函数中使用动态作用域的时候 最终输出应该是 `3`,因为从 `foo` 函数被调用的地方寻在变量 `a` 最后找到了 `var a = 3`.\n\n词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。\n\n使用js 中的 `this` 的时候， `this` 的效果是类似于使用动态作用域的。","slug":"作用域","published":1,"updated":"2020-09-14T06:36:25.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8k004hi2osvrwdqbrj","content":"<p>对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(a) // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">  var a = 3;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n<p>因为这里面的 <code>foo</code> 函数书写在全局的作用域中，因此会被输出 <code>2</code></p>\n<h3 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h3><p>动态作用域关心的是函数是在哪里被调用的。</p>\n<p>上面的函数中使用动态作用域的时候 最终输出应该是 <code>3</code>,因为从 <code>foo</code> 函数被调用的地方寻在变量 <code>a</code> 最后找到了 <code>var a = 3</code>.</p>\n<p>词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。</p>\n<p>使用js 中的 <code>this</code> 的时候， <code>this</code> 的效果是类似于使用动态作用域的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(a) // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">  var a = 3;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n<p>因为这里面的 <code>foo</code> 函数书写在全局的作用域中，因此会被输出 <code>2</code></p>\n<h3 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h3><p>动态作用域关心的是函数是在哪里被调用的。</p>\n<p>上面的函数中使用动态作用域的时候 最终输出应该是 <code>3</code>,因为从 <code>foo</code> 函数被调用的地方寻在变量 <code>a</code> 最后找到了 <code>var a = 3</code>.</p>\n<p>词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。</p>\n<p>使用js 中的 <code>this</code> 的时候， <code>this</code> 的效果是类似于使用动态作用域的。</p>\n"},{"title":"watch in vue.js","date":"2019-05-13T09:10:27.000Z","_content":"\n### watch 方法\n\nvue 的 watch 方法用来监听 vue 中 data 的变动, 可以接受一个函数， 对象， 字符串， 或者数组。\n\n`watch` 方法接受两个参数： `deep`  & `immediate`,  `immediate`  表明是否立即进行函数调用， `deep` 表示是否监听更深一级的对象；\n\n例如在vue 组件中：\n\n```js\nnew Vue({\n  el: '#app',\n  data() {\n    return {\n    \tdata: 1\n    }\n  },\n  watch: {\n  \tdata: function () {\n      // some code... \n  \t}\n  },\n  mounted() {\n    this.data = 2;\n  }\n }\n```\n\n当 `this.data` 发生重新赋值的时候， 就会调用 `watch`  中 `data` 后面跟的匿名函数：\n\n在 `vue.js` 中， 调用流程如下：\n\n首先， 因为在 vue `watch` 中的名称是先写在 `data` 中的，在初始化 `watch` 方法之前， 首先对于 `data` 中的数据进行了初始化，调用了 `defineReactive`  方法， 将其数据设为响应式的数据\n\n1. ##### 初始化 `watch` 方法：\n\n   ```js\n   // 初始化状态\n   // vm： vue 实例\n   function initState (vm) {\n     vm._watchers = [];\n     var opts = vm.$options;\n     if (opts.props) { initProps(vm, opts.props); }\n     if (opts.methods) { initMethods(vm, opts.methods); }\n     if (opts.data) {\n       initData(vm);\n     } else {\n       observe(vm._data = {}, true /* asRootData */);\n     }\n     if (opts.computed) { initComputed(vm, opts.computed); }\n     if (opts.watch && opts.watch !== nativeWatch) {\n       // 初始化 watch\n       initWatch(vm, opts.watch);\n     }\n   }\n   ```\n\n   `initWatch` 为如下方法：\n\n   ```js\n   // 对于 vue watch 方法中的每一个键都创建一个 watcher  \n   function initWatch (vm, watch) {\n       for (var key in watch) {\n         var handler = watch[key];\n         // 当watch 键后面跟着一个数组的时候， 对于数组里面的每一个函数， 都调用 createWatcher 方法\n         if (Array.isArray(handler)) {\n           for (var i = 0; i < handler.length; i++) {\n             createWatcher(vm, key, handler[i]);\n           }\n         } else {\n           createWatcher(vm, key, handler);\n         }\n       }\n     }\n   ```\n\n   `createWatcher` 方法： 用于在 `watch` 中某个键的相关字段进行解析：\n\n   ```js\n   // vm: vue 实例\n   // expOrFn: 创建 watcher 的一些数据名称\n   // hander 回调函数\n   function createWatcher (\n       vm,\n       expOrFn,\n       handler,\n       options\n     ) {\n       // 当执行函数是一个对象的时候， 这个时候是将 handler 的 handler调用给执行函数\n       // 这里的 options 是 watch 函数的配置信息\n       if (isPlainObject(handler)) {\n         options = handler;\n         handler = handler.handler;\n       }\n       // 当 handler 是一个字符串的时候， 会调用 vm 中相应的方法\n       if (typeof handler === 'string') {\n         handler = vm[handler];\n       }\n       //调用在 vue 实例 vm 上面的 $watch 方法\n       return vm.$watch(expOrFn, handler, options)\n     }\n   ```\n\n2. ##### 调用 vue 实例上面的 `$watch` 方法， 这个方法会对于当前的方法创建一个观察者 `watcher`\n\n   ```js\n       Vue.prototype.$watch = function (\n         expOrFn,\n         cb,\n         options\n       ) {\n         var vm = this;\n         if (isPlainObject(cb)) {\n           return createWatcher(vm, expOrFn, cb, options)\n         }\n         options = options || {};\n         options.user = true;\n         // 创建一个新的观察者\n         var watcher = new Watcher(vm, expOrFn, cb, options);\n         // 当可选项中包含有 immediate 属性的时候\n         if (options.immediate) {\n           try {\n             // 立即执行当前 watch 函数\n             cb.call(vm, watcher.value);\n           } catch (error) {\n             handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n           }\n         }\n         // 返回一个取消 watch 的函数\n         return function unwatchFn () {\n           watcher.teardown();\n         }\n       };\n     }\n   ```\n\n3. ##### 当 调用 watch 方法的时候， 将当前 `watch` 内 `data` 的回调函数作为依赖进行收集。\n\n   ```js\n   var Watcher = function Watcher (\n       vm,\n       expOrFn,\n       cb,\n       options,\n       isRenderWatcher\n     ) {\n       this.vm = vm;\n       if (isRenderWatcher) {\n         vm._watcher = this;\n       }\n       vm._watchers.push(this);\n       // options\n       if (options) {\n         this.deep = !!options.deep;\n         this.user = !!options.user;\n         this.lazy = !!options.lazy;\n         this.sync = !!options.sync;\n         this.before = options.before;\n       } else {\n         this.deep = this.user = this.lazy = this.sync = false;\n       }\n       // 回调函数被绑定到 Watcher 观察者上面的 cb 属性上面\n       this.cb = cb;\n       this.id = ++uid$1; // uid for batching\n       this.active = true;\n       this.dirty = this.lazy; // for lazy watchers\n       this.deps = [];\n       this.newDeps = [];\n       this.depIds = new _Set();\n       this.newDepIds = new _Set();\n       this.expression = expOrFn.toString();\n       // parse expression for getter\n       if (typeof expOrFn === 'function') {\n         this.getter = expOrFn;\n       } else {\n         // 这里对于监听的变量值进行解析\n         this.getter = parsePath(expOrFn);\n         console.log('this.getter', this.getter);\n         if (!this.getter) {\n           this.getter = noop;\n           warn(\n             \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n             'Watcher only accepts simple dot-delimited paths. ' +\n             'For full control, use a function instead.',\n             vm\n           );\n         }\n       }\n       this.value = this.lazy\n         ? undefined\n         : this.get();\n     };\n   \n     /**\n      * Evaluate the getter, and re-collect dependencies.\n      */\n     Watcher.prototype.get = function get () {\n       // 将当前的 Watcher 赋值给 Dep.target\n       pushTarget(this);\n       var value;\n       var vm = this.vm;\n       try {\n         // 调用 getter 方法， 触发响应式数据的 get 属性， 进行依赖搜集\n         value = this.getter.call(vm, vm);\n         console.log('this.value', value);\n       } catch (e) {\n         if (this.user) {\n           handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n         } else {\n           throw e\n         }\n       } finally {\n         // \"touch\" every property so they are all tracked as\n         // dependencies for deep watching\n         if (this.deep) {\n           traverse(value);\n         }\n         popTarget();\n         this.cleanupDeps();\n       }\n       return value\n     };\n   ```\n\n   `parsePath` 方法用于监听的字段进行解析：\n\n   ```js\n     var bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\n     function parsePath (path) {\n       if (bailRE.test(path)) {\n         return\n       }\n       // 按照 . 号进行分割为数组， 适用于我们想要监听一个对象下面的某一个属性的时候\n       var segments = path.split('.');\n       // 返回的函数作为 上面代码中的 this.getter\n       // 当调用 this.getter 函数的时候， 会触发在当前数据上面的响应式数据的 get 方法， 搜集依赖\n       return function (obj) {\n         for (var i = 0; i < segments.length; i++) {\n           if (!obj) { return }\n           obj = obj[segments[i]];\n         }\n         return obj\n       }\n     }\n   ```\n\n   当触发响应式数据的 `getter` 属性的时候，在 `defineReactive` 中, 会进行依赖收集\n\n   {%  asset_img  image-20190514150916088.png %}\n\n   当调用`dep.depend()` 的时候， 调用了 `Dep` 类的`depend` 方法：\n\n   ```js\n     Dep.prototype.depend = function depend () {\n       if (Dep.target) {\n         Dep.target.addDep(this);\n       }\n     };\n   ```\n\n   这里的`Dep.target` 是我们之前将`watcher` 赋值的那一个， 当调用 `Watcher` 上面的 `addDep` 方法的时候， 是将当前的`dep` 传入  `watcher` 实例中的 `newDeps` 属性， 并且， 当前`dep` 实例上面的 `addSub` 方法将会将 `Watcher` 存放到 这个实例的 `subs` 属性上面。\n\n   ```js\n     Watcher.prototype.addDep = function addDep (dep) {\n       var id = dep.id;\n       if (!this.newDepIds.has(id)) {\n         this.newDepIds.add(id);\n         this.newDeps.push(dep);\n         if (!this.depIds.has(id)) {\n           dep.addSub(this);\n         }\n       }\n     };\n   ```\n\n4. ##### 当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：\n\n   当监听的数据发生变化的时候， 会调用这个数据的 `set` 属性：\n\n   ```js\n         set: function reactiveSetter (newVal) {\n           //  获取到原来的值\n           var value = getter ? getter.call(obj) : val;\n           /* eslint-disable no-self-compare */\n           // 当要监听的数据没有发生变化的时候， 返回\n           if (newVal === value || (newVal !== newVal && value !== value)) {\n             return\n           }\n           /* eslint-enable no-self-compare */\n           if (customSetter) {\n             customSetter();\n           }\n           // #7981: for accessor properties without setter\n           if (getter && !setter) { return }\n           if (setter) {\n             setter.call(obj, newVal);\n           } else {\n             val = newVal;\n           }\n           childOb = !shallow && observe(newVal);\n           //  通知依赖发生变化\n           dep.notify();\n         }\n   ```\n\n   `dep.notify()` 是用来通知依赖发生变化的,  调用了 `dep` 实例上面的 `notify`  方法：\n\n   ```js\n     Dep.prototype.notify = function notify () {\n       // stabilize the subscriber list first\n       var subs = this.subs.slice();\n       if (!config.async) {\n         // subs aren't sorted in scheduler if not running async\n         // we need to sort them now to make sure they fire in correct\n         // order\n         subs.sort(function (a, b) { return a.id - b.id; });\n       }\n       // subs 中存放的是 watcher ， 调用了 watcher 实例的  update 方法。\n       for (var i = 0, l = subs.length; i < l; i++) {\n         subs[i].update();\n       }\n     };\n   ```\n\n   ```js\n     Watcher.prototype.update = function update () {\n       /* istanbul ignore else */\n       if (this.lazy) {\n         this.dirty = true;\n       } else if (this.sync) {\n         this.run();\n       } else {\n         // 调用  queueWatcher \n         queueWatcher(this);\n       }\n     };\n   ```\n\n   在 `queueWatcher` 方法中， 将当前变动的所有 `watcher` 存放数组 `queue`  中：\n\n   ```js\n    /**\n      * Push a watcher into the watcher queue.\n      * Jobs with duplicate IDs will be skipped unless it's\n      * pushed when the queue is being flushed.\n      */\n     function queueWatcher (watcher) {\n       var id = watcher.id;\n       if (has[id] == null) {\n         has[id] = true;\n         if (!flushing) {\n           // 将 watcher 存入\n           queue.push(watcher);\n         } else {\n           // if already flushing, splice the watcher based on its id\n           // if already past its id, it will be run next immediately.\n           var i = queue.length - 1;\n           while (i > index && queue[i].id > watcher.id) {\n             i--;\n           }\n           queue.splice(i + 1, 0, watcher);\n         }\n         // queue the flush\n         if (!waiting) {\n           waiting = true;\n   \n           if (!config.async) {\n             flushSchedulerQueue();\n             return\n           }\n           nextTick(flushSchedulerQueue);\n         }\n       }\n     }\n   ```\n\n5. ##### 执行 `watch` 中数据变动之后的函数回调：调用。`flushSchedulerQueue`\n\n   ```js\n     function flushSchedulerQueue () {\n       currentFlushTimestamp = getNow();\n       flushing = true;\n       var watcher, id;\n   \n       // Sort queue before flush.\n       // This ensures that:\n       // 1. Components are updated from parent to child. (because parent is always\n       //    created before the child)\n       // 2. A component's user watchers are run before its render watcher (because\n       //    user watchers are created before the render watcher)\n       // 3. If a component is destroyed during a parent component's watcher run,\n       //    its watchers can be skipped.\n       queue.sort(function (a, b) { return a.id - b.id; });\n   \n       // do not cache length because more watchers might be pushed\n       // as we run existing watchers\n       for (index = 0; index < queue.length; index++) {\n         watcher = queue[index];\n         if (watcher.before) {\n           watcher.before();\n         }\n         id = watcher.id;\n         has[id] = null;\n         // 调用 watcher 实例上面的  run 方法\n         watcher.run();\n         // in dev build, check and stop circular updates.\n         if (has[id] != null) {\n           circular[id] = (circular[id] || 0) + 1;\n           if (circular[id] > MAX_UPDATE_COUNT) {\n             warn(\n               'You may have an infinite update loop ' + (\n                 watcher.user\n                   ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n                   : \"in a component render function.\"\n               ),\n               watcher.vm\n             );\n             break\n           }\n         }\n       }\n   ```\n\n   调用 `watcher.run`  方法之后， 如下：\n\n   ```js\n   Watcher.prototype.run = function run () {\n       if (this.active) {\n         var value = this.get();\n         if (\n           value !== this.value ||\n           // Deep watchers and watchers on Object/Arrays should fire even\n           // when the value is the same, because the value may\n           // have mutated.\n           isObject(value) ||\n           this.deep\n         ) {\n           // set new value\n           var oldValue = this.value;\n           this.value = value;\n           if (this.user) {\n             try {\n               this.cb.call(this.vm, value, oldValue);\n             } catch (e) {\n               handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n             }\n           } else {\n             // 调用 watch 之后的函数方法， 传入的两个值， 当前变动的值和之前的值\n             this.cb.call(this.vm, value, oldValue);\n           }\n         }\n       }\n     };\n   ```\n\n   最终， 调用\n\n   `this.cb.call(this.vm, value, oldValue);`\n\n   执行当监听的数据发生变化时候的回调函数， 调用的时候传入两个参数： value && oldValue, 表示当前的值和变化之前的值。\n\n补充： deep 方法是如何起作用的：\n\n当我们设定 `deep` 为 true 的时候， 这个时候， 当对象中的某个属性发生变化的时候， 也会被监听到变动， 关于  `deep` 为 true 的代码在下面：\n\n```js\n Watcher.prototype.get = function get () {\n    pushTarget(this);\n    var value;\n    var vm = this.vm;\n    try {\n      // 调用 getter, 搜集依赖\n      value = this.getter.call(vm, vm);\n      // console.log('this.value', value);\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n      } else {\n        throw e\n      }\n    } finally {\n      // \"touch\" every property so they are all tracked as\n      // dependencies for deep watching\n      if (this.deep) {\n        traverse(value);\n      }\n      popTarget();\n      this.cleanupDeps();\n    }\n    return value\n  };\n```\n\n正如上面注释写明的一样， 当  `deep` 为 true 的时候， 调用 `traverse `   方法， 这个方法的作用是出发对象中每一个属性的  `get` 方法， 从而让他们的依赖得以收集：\n\ntraverse. 方法：\n\n```js\n// 递归调用对象中的属性， 通过 val[i]  或者  val[key[i]] 触发 get 方法  \nfunction traverse (val) {\n    _traverse(val, seenObjects);\n    seenObjects.clear();\n  }\n\n  function _traverse (val, seen) {\n    var i, keys;\n    var isA = Array.isArray(val);\n    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n      return\n    }\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return\n      }\n      seen.add(depId);\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) { _traverse(val[i], seen); }\n    } else {\n      keys = Object.keys(val);\n      i = keys.length;\n      // val[key[i]] 这里是关键\n      while (i--) { _traverse(val[keys[i]], seen); }\n    }\n  }\n```\n\n","source":"_posts/watch in vue.md","raw":"---\ntitle: watch in vue.js\ndate: 2019-05-13 17:10:27\ntags: vue 源码\ncategories: vue 源码阅读\n---\n\n### watch 方法\n\nvue 的 watch 方法用来监听 vue 中 data 的变动, 可以接受一个函数， 对象， 字符串， 或者数组。\n\n`watch` 方法接受两个参数： `deep`  & `immediate`,  `immediate`  表明是否立即进行函数调用， `deep` 表示是否监听更深一级的对象；\n\n例如在vue 组件中：\n\n```js\nnew Vue({\n  el: '#app',\n  data() {\n    return {\n    \tdata: 1\n    }\n  },\n  watch: {\n  \tdata: function () {\n      // some code... \n  \t}\n  },\n  mounted() {\n    this.data = 2;\n  }\n }\n```\n\n当 `this.data` 发生重新赋值的时候， 就会调用 `watch`  中 `data` 后面跟的匿名函数：\n\n在 `vue.js` 中， 调用流程如下：\n\n首先， 因为在 vue `watch` 中的名称是先写在 `data` 中的，在初始化 `watch` 方法之前， 首先对于 `data` 中的数据进行了初始化，调用了 `defineReactive`  方法， 将其数据设为响应式的数据\n\n1. ##### 初始化 `watch` 方法：\n\n   ```js\n   // 初始化状态\n   // vm： vue 实例\n   function initState (vm) {\n     vm._watchers = [];\n     var opts = vm.$options;\n     if (opts.props) { initProps(vm, opts.props); }\n     if (opts.methods) { initMethods(vm, opts.methods); }\n     if (opts.data) {\n       initData(vm);\n     } else {\n       observe(vm._data = {}, true /* asRootData */);\n     }\n     if (opts.computed) { initComputed(vm, opts.computed); }\n     if (opts.watch && opts.watch !== nativeWatch) {\n       // 初始化 watch\n       initWatch(vm, opts.watch);\n     }\n   }\n   ```\n\n   `initWatch` 为如下方法：\n\n   ```js\n   // 对于 vue watch 方法中的每一个键都创建一个 watcher  \n   function initWatch (vm, watch) {\n       for (var key in watch) {\n         var handler = watch[key];\n         // 当watch 键后面跟着一个数组的时候， 对于数组里面的每一个函数， 都调用 createWatcher 方法\n         if (Array.isArray(handler)) {\n           for (var i = 0; i < handler.length; i++) {\n             createWatcher(vm, key, handler[i]);\n           }\n         } else {\n           createWatcher(vm, key, handler);\n         }\n       }\n     }\n   ```\n\n   `createWatcher` 方法： 用于在 `watch` 中某个键的相关字段进行解析：\n\n   ```js\n   // vm: vue 实例\n   // expOrFn: 创建 watcher 的一些数据名称\n   // hander 回调函数\n   function createWatcher (\n       vm,\n       expOrFn,\n       handler,\n       options\n     ) {\n       // 当执行函数是一个对象的时候， 这个时候是将 handler 的 handler调用给执行函数\n       // 这里的 options 是 watch 函数的配置信息\n       if (isPlainObject(handler)) {\n         options = handler;\n         handler = handler.handler;\n       }\n       // 当 handler 是一个字符串的时候， 会调用 vm 中相应的方法\n       if (typeof handler === 'string') {\n         handler = vm[handler];\n       }\n       //调用在 vue 实例 vm 上面的 $watch 方法\n       return vm.$watch(expOrFn, handler, options)\n     }\n   ```\n\n2. ##### 调用 vue 实例上面的 `$watch` 方法， 这个方法会对于当前的方法创建一个观察者 `watcher`\n\n   ```js\n       Vue.prototype.$watch = function (\n         expOrFn,\n         cb,\n         options\n       ) {\n         var vm = this;\n         if (isPlainObject(cb)) {\n           return createWatcher(vm, expOrFn, cb, options)\n         }\n         options = options || {};\n         options.user = true;\n         // 创建一个新的观察者\n         var watcher = new Watcher(vm, expOrFn, cb, options);\n         // 当可选项中包含有 immediate 属性的时候\n         if (options.immediate) {\n           try {\n             // 立即执行当前 watch 函数\n             cb.call(vm, watcher.value);\n           } catch (error) {\n             handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n           }\n         }\n         // 返回一个取消 watch 的函数\n         return function unwatchFn () {\n           watcher.teardown();\n         }\n       };\n     }\n   ```\n\n3. ##### 当 调用 watch 方法的时候， 将当前 `watch` 内 `data` 的回调函数作为依赖进行收集。\n\n   ```js\n   var Watcher = function Watcher (\n       vm,\n       expOrFn,\n       cb,\n       options,\n       isRenderWatcher\n     ) {\n       this.vm = vm;\n       if (isRenderWatcher) {\n         vm._watcher = this;\n       }\n       vm._watchers.push(this);\n       // options\n       if (options) {\n         this.deep = !!options.deep;\n         this.user = !!options.user;\n         this.lazy = !!options.lazy;\n         this.sync = !!options.sync;\n         this.before = options.before;\n       } else {\n         this.deep = this.user = this.lazy = this.sync = false;\n       }\n       // 回调函数被绑定到 Watcher 观察者上面的 cb 属性上面\n       this.cb = cb;\n       this.id = ++uid$1; // uid for batching\n       this.active = true;\n       this.dirty = this.lazy; // for lazy watchers\n       this.deps = [];\n       this.newDeps = [];\n       this.depIds = new _Set();\n       this.newDepIds = new _Set();\n       this.expression = expOrFn.toString();\n       // parse expression for getter\n       if (typeof expOrFn === 'function') {\n         this.getter = expOrFn;\n       } else {\n         // 这里对于监听的变量值进行解析\n         this.getter = parsePath(expOrFn);\n         console.log('this.getter', this.getter);\n         if (!this.getter) {\n           this.getter = noop;\n           warn(\n             \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n             'Watcher only accepts simple dot-delimited paths. ' +\n             'For full control, use a function instead.',\n             vm\n           );\n         }\n       }\n       this.value = this.lazy\n         ? undefined\n         : this.get();\n     };\n   \n     /**\n      * Evaluate the getter, and re-collect dependencies.\n      */\n     Watcher.prototype.get = function get () {\n       // 将当前的 Watcher 赋值给 Dep.target\n       pushTarget(this);\n       var value;\n       var vm = this.vm;\n       try {\n         // 调用 getter 方法， 触发响应式数据的 get 属性， 进行依赖搜集\n         value = this.getter.call(vm, vm);\n         console.log('this.value', value);\n       } catch (e) {\n         if (this.user) {\n           handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n         } else {\n           throw e\n         }\n       } finally {\n         // \"touch\" every property so they are all tracked as\n         // dependencies for deep watching\n         if (this.deep) {\n           traverse(value);\n         }\n         popTarget();\n         this.cleanupDeps();\n       }\n       return value\n     };\n   ```\n\n   `parsePath` 方法用于监听的字段进行解析：\n\n   ```js\n     var bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\n     function parsePath (path) {\n       if (bailRE.test(path)) {\n         return\n       }\n       // 按照 . 号进行分割为数组， 适用于我们想要监听一个对象下面的某一个属性的时候\n       var segments = path.split('.');\n       // 返回的函数作为 上面代码中的 this.getter\n       // 当调用 this.getter 函数的时候， 会触发在当前数据上面的响应式数据的 get 方法， 搜集依赖\n       return function (obj) {\n         for (var i = 0; i < segments.length; i++) {\n           if (!obj) { return }\n           obj = obj[segments[i]];\n         }\n         return obj\n       }\n     }\n   ```\n\n   当触发响应式数据的 `getter` 属性的时候，在 `defineReactive` 中, 会进行依赖收集\n\n   {%  asset_img  image-20190514150916088.png %}\n\n   当调用`dep.depend()` 的时候， 调用了 `Dep` 类的`depend` 方法：\n\n   ```js\n     Dep.prototype.depend = function depend () {\n       if (Dep.target) {\n         Dep.target.addDep(this);\n       }\n     };\n   ```\n\n   这里的`Dep.target` 是我们之前将`watcher` 赋值的那一个， 当调用 `Watcher` 上面的 `addDep` 方法的时候， 是将当前的`dep` 传入  `watcher` 实例中的 `newDeps` 属性， 并且， 当前`dep` 实例上面的 `addSub` 方法将会将 `Watcher` 存放到 这个实例的 `subs` 属性上面。\n\n   ```js\n     Watcher.prototype.addDep = function addDep (dep) {\n       var id = dep.id;\n       if (!this.newDepIds.has(id)) {\n         this.newDepIds.add(id);\n         this.newDeps.push(dep);\n         if (!this.depIds.has(id)) {\n           dep.addSub(this);\n         }\n       }\n     };\n   ```\n\n4. ##### 当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：\n\n   当监听的数据发生变化的时候， 会调用这个数据的 `set` 属性：\n\n   ```js\n         set: function reactiveSetter (newVal) {\n           //  获取到原来的值\n           var value = getter ? getter.call(obj) : val;\n           /* eslint-disable no-self-compare */\n           // 当要监听的数据没有发生变化的时候， 返回\n           if (newVal === value || (newVal !== newVal && value !== value)) {\n             return\n           }\n           /* eslint-enable no-self-compare */\n           if (customSetter) {\n             customSetter();\n           }\n           // #7981: for accessor properties without setter\n           if (getter && !setter) { return }\n           if (setter) {\n             setter.call(obj, newVal);\n           } else {\n             val = newVal;\n           }\n           childOb = !shallow && observe(newVal);\n           //  通知依赖发生变化\n           dep.notify();\n         }\n   ```\n\n   `dep.notify()` 是用来通知依赖发生变化的,  调用了 `dep` 实例上面的 `notify`  方法：\n\n   ```js\n     Dep.prototype.notify = function notify () {\n       // stabilize the subscriber list first\n       var subs = this.subs.slice();\n       if (!config.async) {\n         // subs aren't sorted in scheduler if not running async\n         // we need to sort them now to make sure they fire in correct\n         // order\n         subs.sort(function (a, b) { return a.id - b.id; });\n       }\n       // subs 中存放的是 watcher ， 调用了 watcher 实例的  update 方法。\n       for (var i = 0, l = subs.length; i < l; i++) {\n         subs[i].update();\n       }\n     };\n   ```\n\n   ```js\n     Watcher.prototype.update = function update () {\n       /* istanbul ignore else */\n       if (this.lazy) {\n         this.dirty = true;\n       } else if (this.sync) {\n         this.run();\n       } else {\n         // 调用  queueWatcher \n         queueWatcher(this);\n       }\n     };\n   ```\n\n   在 `queueWatcher` 方法中， 将当前变动的所有 `watcher` 存放数组 `queue`  中：\n\n   ```js\n    /**\n      * Push a watcher into the watcher queue.\n      * Jobs with duplicate IDs will be skipped unless it's\n      * pushed when the queue is being flushed.\n      */\n     function queueWatcher (watcher) {\n       var id = watcher.id;\n       if (has[id] == null) {\n         has[id] = true;\n         if (!flushing) {\n           // 将 watcher 存入\n           queue.push(watcher);\n         } else {\n           // if already flushing, splice the watcher based on its id\n           // if already past its id, it will be run next immediately.\n           var i = queue.length - 1;\n           while (i > index && queue[i].id > watcher.id) {\n             i--;\n           }\n           queue.splice(i + 1, 0, watcher);\n         }\n         // queue the flush\n         if (!waiting) {\n           waiting = true;\n   \n           if (!config.async) {\n             flushSchedulerQueue();\n             return\n           }\n           nextTick(flushSchedulerQueue);\n         }\n       }\n     }\n   ```\n\n5. ##### 执行 `watch` 中数据变动之后的函数回调：调用。`flushSchedulerQueue`\n\n   ```js\n     function flushSchedulerQueue () {\n       currentFlushTimestamp = getNow();\n       flushing = true;\n       var watcher, id;\n   \n       // Sort queue before flush.\n       // This ensures that:\n       // 1. Components are updated from parent to child. (because parent is always\n       //    created before the child)\n       // 2. A component's user watchers are run before its render watcher (because\n       //    user watchers are created before the render watcher)\n       // 3. If a component is destroyed during a parent component's watcher run,\n       //    its watchers can be skipped.\n       queue.sort(function (a, b) { return a.id - b.id; });\n   \n       // do not cache length because more watchers might be pushed\n       // as we run existing watchers\n       for (index = 0; index < queue.length; index++) {\n         watcher = queue[index];\n         if (watcher.before) {\n           watcher.before();\n         }\n         id = watcher.id;\n         has[id] = null;\n         // 调用 watcher 实例上面的  run 方法\n         watcher.run();\n         // in dev build, check and stop circular updates.\n         if (has[id] != null) {\n           circular[id] = (circular[id] || 0) + 1;\n           if (circular[id] > MAX_UPDATE_COUNT) {\n             warn(\n               'You may have an infinite update loop ' + (\n                 watcher.user\n                   ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n                   : \"in a component render function.\"\n               ),\n               watcher.vm\n             );\n             break\n           }\n         }\n       }\n   ```\n\n   调用 `watcher.run`  方法之后， 如下：\n\n   ```js\n   Watcher.prototype.run = function run () {\n       if (this.active) {\n         var value = this.get();\n         if (\n           value !== this.value ||\n           // Deep watchers and watchers on Object/Arrays should fire even\n           // when the value is the same, because the value may\n           // have mutated.\n           isObject(value) ||\n           this.deep\n         ) {\n           // set new value\n           var oldValue = this.value;\n           this.value = value;\n           if (this.user) {\n             try {\n               this.cb.call(this.vm, value, oldValue);\n             } catch (e) {\n               handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n             }\n           } else {\n             // 调用 watch 之后的函数方法， 传入的两个值， 当前变动的值和之前的值\n             this.cb.call(this.vm, value, oldValue);\n           }\n         }\n       }\n     };\n   ```\n\n   最终， 调用\n\n   `this.cb.call(this.vm, value, oldValue);`\n\n   执行当监听的数据发生变化时候的回调函数， 调用的时候传入两个参数： value && oldValue, 表示当前的值和变化之前的值。\n\n补充： deep 方法是如何起作用的：\n\n当我们设定 `deep` 为 true 的时候， 这个时候， 当对象中的某个属性发生变化的时候， 也会被监听到变动， 关于  `deep` 为 true 的代码在下面：\n\n```js\n Watcher.prototype.get = function get () {\n    pushTarget(this);\n    var value;\n    var vm = this.vm;\n    try {\n      // 调用 getter, 搜集依赖\n      value = this.getter.call(vm, vm);\n      // console.log('this.value', value);\n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n      } else {\n        throw e\n      }\n    } finally {\n      // \"touch\" every property so they are all tracked as\n      // dependencies for deep watching\n      if (this.deep) {\n        traverse(value);\n      }\n      popTarget();\n      this.cleanupDeps();\n    }\n    return value\n  };\n```\n\n正如上面注释写明的一样， 当  `deep` 为 true 的时候， 调用 `traverse `   方法， 这个方法的作用是出发对象中每一个属性的  `get` 方法， 从而让他们的依赖得以收集：\n\ntraverse. 方法：\n\n```js\n// 递归调用对象中的属性， 通过 val[i]  或者  val[key[i]] 触发 get 方法  \nfunction traverse (val) {\n    _traverse(val, seenObjects);\n    seenObjects.clear();\n  }\n\n  function _traverse (val, seen) {\n    var i, keys;\n    var isA = Array.isArray(val);\n    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n      return\n    }\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return\n      }\n      seen.add(depId);\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) { _traverse(val[i], seen); }\n    } else {\n      keys = Object.keys(val);\n      i = keys.length;\n      // val[key[i]] 这里是关键\n      while (i--) { _traverse(val[keys[i]], seen); }\n    }\n  }\n```\n\n","slug":"watch in vue","published":1,"updated":"2020-09-14T06:36:25.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8m004li2osut8edupt","content":"<h3 id=\"watch-方法\"><a href=\"#watch-方法\" class=\"headerlink\" title=\"watch 方法\"></a>watch 方法</h3><p>vue 的 watch 方法用来监听 vue 中 data 的变动, 可以接受一个函数， 对象， 字符串， 或者数组。</p>\n<p><code>watch</code> 方法接受两个参数： <code>deep</code>  &amp; <code>immediate</code>,  <code>immediate</code>  表明是否立即进行函数调用， <code>deep</code> 表示是否监听更深一级的对象；</p>\n<p>例如在vue 组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    \tdata: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">  \tdata: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// some code... </span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>this.data</code> 发生重新赋值的时候， 就会调用 <code>watch</code>  中 <code>data</code> 后面跟的匿名函数：</p>\n<p>在 <code>vue.js</code> 中， 调用流程如下：</p>\n<p>首先， 因为在 vue <code>watch</code> 中的名称是先写在 <code>data</code> 中的，在初始化 <code>watch</code> 方法之前， 首先对于 <code>data</code> 中的数据进行了初始化，调用了 <code>defineReactive</code>  方法， 将其数据设为响应式的数据</p>\n<ol>\n<li><h5 id=\"初始化-watch-方法：\"><a href=\"#初始化-watch-方法：\" class=\"headerlink\" title=\"初始化 watch 方法：\"></a>初始化 <code>watch</code> 方法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\"><span class=\"comment\">// vm： vue 实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = vm.$options;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 watch</span></span><br><span class=\"line\">    initWatch(vm, opts.watch);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>initWatch</code> 为如下方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 vue watch 方法中的每一个键都创建一个 watcher  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWatch</span> (<span class=\"params\">vm, watch</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> handler = watch[key];</span><br><span class=\"line\">      <span class=\"comment\">// 当watch 键后面跟着一个数组的时候， 对于数组里面的每一个函数， 都调用 createWatcher 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(handler)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class=\"line\">          createWatcher(vm, key, handler[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        createWatcher(vm, key, handler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>createWatcher</code> 方法： 用于在 <code>watch</code> 中某个键的相关字段进行解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vm: vue 实例</span></span><br><span class=\"line\"><span class=\"comment\">// expOrFn: 创建 watcher 的一些数据名称</span></span><br><span class=\"line\"><span class=\"comment\">// hander 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWatcher</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    handler,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当执行函数是一个对象的时候， 这个时候是将 handler 的 handler调用给执行函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的 options 是 watch 函数的配置信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPlainObject(handler)) &#123;</span><br><span class=\"line\">      options = handler;</span><br><span class=\"line\">      handler = handler.handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当 handler 是一个字符串的时候， 会调用 vm 中相应的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handler === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      handler = vm[handler];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用在 vue 实例 vm 上面的 $watch 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> vm.$watch(expOrFn, handler, options)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"调用-vue-实例上面的-watch-方法，-这个方法会对于当前的方法创建一个观察者-watcher\"><a href=\"#调用-vue-实例上面的-watch-方法，-这个方法会对于当前的方法创建一个观察者-watcher\" class=\"headerlink\" title=\"调用 vue 实例上面的 $watch 方法， 这个方法会对于当前的方法创建一个观察者 watcher\"></a>调用 vue 实例上面的 <code>$watch</code> 方法， 这个方法会对于当前的方法创建一个观察者 <code>watcher</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.prototype.$watch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    cb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPlainObject(cb)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\">    options.user = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> watcher = <span class=\"keyword\">new</span> Watcher(vm, expOrFn, cb, options);</span><br><span class=\"line\">    <span class=\"comment\">// 当可选项中包含有 immediate 属性的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.immediate) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 立即执行当前 watch 函数</span></span><br><span class=\"line\">        cb.call(vm, watcher.value);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        handleError(error, vm, (<span class=\"string\">\"callback for immediate watcher \\\"\"</span> + (watcher.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个取消 watch 的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unwatchFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      watcher.teardown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"当-调用-watch-方法的时候，-将当前-watch-内-data-的回调函数作为依赖进行收集。\"><a href=\"#当-调用-watch-方法的时候，-将当前-watch-内-data-的回调函数作为依赖进行收集。\" class=\"headerlink\" title=\"当 调用 watch 方法的时候， 将当前 watch 内 data 的回调函数作为依赖进行收集。\"></a>当 调用 watch 方法的时候， 将当前 <code>watch</code> 内 <code>data</code> 的回调函数作为依赖进行收集。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Watcher = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    cb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    isRenderWatcher</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">      vm._watcher = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm._watchers.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep = !!options.deep;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.user = !!options.user;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lazy = !!options.lazy;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sync = !!options.sync;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.before = options.before;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep = <span class=\"keyword\">this</span>.user = <span class=\"keyword\">this</span>.lazy = <span class=\"keyword\">this</span>.sync = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 回调函数被绑定到 Watcher 观察者上面的 cb 属性上面</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = ++uid$<span class=\"number\">1</span>; <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"keyword\">this</span>.lazy; <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.deps = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">new</span> _Set();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds = <span class=\"keyword\">new</span> _Set();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = expOrFn.toString();</span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里对于监听的变量值进行解析</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'this.getter'</span>, <span class=\"keyword\">this</span>.getter);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.getter) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getter = noop;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">\"Failed watching path: \\\"\"</span> + expOrFn + <span class=\"string\">\"\\\" \"</span> +</span><br><span class=\"line\">          <span class=\"string\">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'For full control, use a function instead.'</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前的 Watcher 赋值给 Dep.target</span></span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getter 方法， 触发响应式数据的 get 属性， 进行依赖搜集</span></span><br><span class=\"line\">      value = <span class=\"keyword\">this</span>.getter.call(vm, vm);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'this.value'</span>, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, (<span class=\"string\">\"getter for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// \"touch\" every property so they are all tracked as</span></span><br><span class=\"line\">      <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.deep) &#123;</span><br><span class=\"line\">        traverse(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cleanupDeps();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>parsePath</code> 方法用于监听的字段进行解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bailRE = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>((<span class=\"string\">\"[^\"</span> + (unicodeRegExp.source) + <span class=\"string\">\".$_\\\\d]\"</span>));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parsePath</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bailRE.test(path)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 按照 . 号进行分割为数组， 适用于我们想要监听一个对象下面的某一个属性的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> segments = path.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回的函数作为 上面代码中的 this.getter</span></span><br><span class=\"line\">  <span class=\"comment\">// 当调用 this.getter 函数的时候， 会触发在当前数据上面的响应式数据的 get 方法， 搜集依赖</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; segments.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!obj) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      obj = obj[segments[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当触发响应式数据的 <code>getter</code> 属性的时候，在 <code>defineReactive</code> 中, 会进行依赖收集</p>\n<img src=\"/2019/05/13/watch%20in%20vue/image-20190514150916088.png\">\n<p>当调用<code>dep.depend()</code> 的时候， 调用了 <code>Dep</code> 类的<code>depend</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depend</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>Dep.target</code> 是我们之前将<code>watcher</code> 赋值的那一个， 当调用 <code>Watcher</code> 上面的 <code>addDep</code> 方法的时候， 是将当前的<code>dep</code> 传入  <code>watcher</code> 实例中的 <code>newDeps</code> 属性， 并且， 当前<code>dep</code> 实例上面的 <code>addSub</code> 方法将会将 <code>Watcher</code> 存放到 这个实例的 <code>subs</code> 属性上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.addDep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addDep</span> (<span class=\"params\">dep</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = dep.id;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds.add(id);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps.push(dep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"当依赖收集完毕之后，-当监听的值发生变化的时候，通知依赖发生变化：\"><a href=\"#当依赖收集完毕之后，-当监听的值发生变化的时候，通知依赖发生变化：\" class=\"headerlink\" title=\"当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：\"></a>当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：</h5><p>当监听的数据发生变化的时候， 会调用这个数据的 <code>set</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//  获取到原来的值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">  <span class=\"comment\">// 当要监听的数据没有发生变化的时候， 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (customSetter) &#123;</span><br><span class=\"line\">    customSetter();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">    setter.call(obj, newVal);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    val = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class=\"line\">  <span class=\"comment\">//  通知依赖发生变化</span></span><br><span class=\"line\">  dep.notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dep.notify()</code> 是用来通知依赖发生变化的,  调用了 <code>dep</code> 实例上面的 <code>notify</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> subs = <span class=\"keyword\">this</span>.subs.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!config.async) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">    <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">    <span class=\"comment\">// order</span></span><br><span class=\"line\">    subs.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a.id - b.id; &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// subs 中存放的是 watcher ， 调用了 watcher 实例的  update 方法。</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用  queueWatcher </span></span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>queueWatcher</code> 方法中， 将当前变动的所有 <code>watcher</code> 存放数组 <code>queue</code>  中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Push a watcher into the watcher queue.</span></span><br><span class=\"line\"><span class=\"comment\">  * Jobs with duplicate IDs will be skipped unless it's</span></span><br><span class=\"line\"><span class=\"comment\">  * pushed when the queue is being flushed.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> id = watcher.id;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">     has[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将 watcher 存入</span></span><br><span class=\"line\">       queue.push(watcher);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// if already flushing, splice the watcher based on its id</span></span><br><span class=\"line\">       <span class=\"comment\">// if already past its id, it will be run next immediately.</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> i = queue.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">         i--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">       waiting = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!config.async) &#123;</span><br><span class=\"line\">         flushSchedulerQueue();</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       nextTick(flushSchedulerQueue);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"执行-watch-中数据变动之后的函数回调：调用。flushSchedulerQueue\"><a href=\"#执行-watch-中数据变动之后的函数回调：调用。flushSchedulerQueue\" class=\"headerlink\" title=\"执行 watch 中数据变动之后的函数回调：调用。flushSchedulerQueue\"></a>执行 <code>watch</code> 中数据变动之后的函数回调：调用。<code>flushSchedulerQueue</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushSchedulerQueue</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  currentFlushTimestamp = getNow();</span><br><span class=\"line\">  flushing = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> watcher, id;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\">// Sort queue before flush.</span></span><br><span class=\"line\">  <span class=\"comment\">// This ensures that:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class=\"line\">  <span class=\"comment\">//    created before the child)</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class=\"line\">  <span class=\"comment\">//    user watchers are created before the render watcher)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class=\"line\">  <span class=\"comment\">//    its watchers can be skipped.</span></span><br><span class=\"line\">  queue.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a.id - b.id; &#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\">// do not cache length because more watchers might be pushed</span></span><br><span class=\"line\">  <span class=\"comment\">// as we run existing watchers</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class=\"line\">    watcher = queue[index];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher.before) &#123;</span><br><span class=\"line\">      watcher.before();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = watcher.id;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 watcher 实例上面的  run 方法</span></span><br><span class=\"line\">    watcher.run();</span><br><span class=\"line\">    <span class=\"comment\">// in dev build, check and stop circular updates.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (has[id] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      circular[id] = (circular[id] || <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">'You may have an infinite update loop '</span> + (</span><br><span class=\"line\">            watcher.user</span><br><span class=\"line\">              ? (<span class=\"string\">\"in watcher with expression \\\"\"</span> + (watcher.expression) + <span class=\"string\">\"\\\"\"</span>)</span><br><span class=\"line\">              : <span class=\"string\">\"in a component render function.\"</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          watcher.vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>调用 <code>watcher.run</code>  方法之后， 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        <span class=\"comment\">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class=\"line\">        <span class=\"comment\">// when the value is the same, because the value may</span></span><br><span class=\"line\">        <span class=\"comment\">// have mutated.</span></span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldValue = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, (<span class=\"string\">\"callback for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 调用 watch 之后的函数方法， 传入的两个值， 当前变动的值和之前的值</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>最终， 调用</p>\n<p><code>this.cb.call(this.vm, value, oldValue);</code></p>\n<p>执行当监听的数据发生变化时候的回调函数， 调用的时候传入两个参数： value &amp;&amp; oldValue, 表示当前的值和变化之前的值。</p>\n</li>\n</ol>\n<p>补充： deep 方法是如何起作用的：</p>\n<p>当我们设定 <code>deep</code> 为 true 的时候， 这个时候， 当对象中的某个属性发生变化的时候， 也会被监听到变动， 关于  <code>deep</code> 为 true 的代码在下面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   pushTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用 getter, 搜集依赖</span></span><br><span class=\"line\">     value = <span class=\"keyword\">this</span>.getter.call(vm, vm);</span><br><span class=\"line\">     <span class=\"comment\">// console.log('this.value', value);</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">       handleError(e, vm, (<span class=\"string\">\"getter for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// \"touch\" every property so they are all tracked as</span></span><br><span class=\"line\">     <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.deep) &#123;</span><br><span class=\"line\">       traverse(value);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     popTarget();</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.cleanupDeps();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> value</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>正如上面注释写明的一样， 当  <code>deep</code> 为 true 的时候， 调用 <code>traverse</code>   方法， 这个方法的作用是出发对象中每一个属性的  <code>get</code> 方法， 从而让他们的依赖得以收集：</p>\n<p>traverse. 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归调用对象中的属性， 通过 val[i]  或者  val[key[i]] 触发 get 方法  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    _traverse(val, seenObjects);</span><br><span class=\"line\">    seenObjects.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val, seen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, keys;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isA = <span class=\"built_in\">Array</span>.isArray(val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> depId = val.__ob__.dep.id;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      seen.add(depId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">      i = val.length;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123; _traverse(val[i], seen); &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      keys = <span class=\"built_in\">Object</span>.keys(val);</span><br><span class=\"line\">      i = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// val[key[i]] 这里是关键</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123; _traverse(val[keys[i]], seen); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"watch-方法\"><a href=\"#watch-方法\" class=\"headerlink\" title=\"watch 方法\"></a>watch 方法</h3><p>vue 的 watch 方法用来监听 vue 中 data 的变动, 可以接受一个函数， 对象， 字符串， 或者数组。</p>\n<p><code>watch</code> 方法接受两个参数： <code>deep</code>  &amp; <code>immediate</code>,  <code>immediate</code>  表明是否立即进行函数调用， <code>deep</code> 表示是否监听更深一级的对象；</p>\n<p>例如在vue 组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    \tdata: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">  \tdata: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// some code... </span></span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>this.data</code> 发生重新赋值的时候， 就会调用 <code>watch</code>  中 <code>data</code> 后面跟的匿名函数：</p>\n<p>在 <code>vue.js</code> 中， 调用流程如下：</p>\n<p>首先， 因为在 vue <code>watch</code> 中的名称是先写在 <code>data</code> 中的，在初始化 <code>watch</code> 方法之前， 首先对于 <code>data</code> 中的数据进行了初始化，调用了 <code>defineReactive</code>  方法， 将其数据设为响应式的数据</p>\n<ol>\n<li><h5 id=\"初始化-watch-方法：\"><a href=\"#初始化-watch-方法：\" class=\"headerlink\" title=\"初始化 watch 方法：\"></a>初始化 <code>watch</code> 方法：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化状态</span></span><br><span class=\"line\"><span class=\"comment\">// vm： vue 实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initState</span> (<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">  vm._watchers = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = vm.$options;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.props) &#123; initProps(vm, opts.props); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.methods) &#123; initMethods(vm, opts.methods); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.data) &#123;</span><br><span class=\"line\">    initData(vm);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.computed) &#123; initComputed(vm, opts.computed); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 watch</span></span><br><span class=\"line\">    initWatch(vm, opts.watch);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>initWatch</code> 为如下方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 vue watch 方法中的每一个键都创建一个 watcher  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWatch</span> (<span class=\"params\">vm, watch</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> handler = watch[key];</span><br><span class=\"line\">      <span class=\"comment\">// 当watch 键后面跟着一个数组的时候， 对于数组里面的每一个函数， 都调用 createWatcher 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(handler)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class=\"line\">          createWatcher(vm, key, handler[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        createWatcher(vm, key, handler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>createWatcher</code> 方法： 用于在 <code>watch</code> 中某个键的相关字段进行解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vm: vue 实例</span></span><br><span class=\"line\"><span class=\"comment\">// expOrFn: 创建 watcher 的一些数据名称</span></span><br><span class=\"line\"><span class=\"comment\">// hander 回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWatcher</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    handler,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当执行函数是一个对象的时候， 这个时候是将 handler 的 handler调用给执行函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里的 options 是 watch 函数的配置信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPlainObject(handler)) &#123;</span><br><span class=\"line\">      options = handler;</span><br><span class=\"line\">      handler = handler.handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当 handler 是一个字符串的时候， 会调用 vm 中相应的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handler === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      handler = vm[handler];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//调用在 vue 实例 vm 上面的 $watch 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> vm.$watch(expOrFn, handler, options)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"调用-vue-实例上面的-watch-方法，-这个方法会对于当前的方法创建一个观察者-watcher\"><a href=\"#调用-vue-实例上面的-watch-方法，-这个方法会对于当前的方法创建一个观察者-watcher\" class=\"headerlink\" title=\"调用 vue 实例上面的 $watch 方法， 这个方法会对于当前的方法创建一个观察者 watcher\"></a>调用 vue 实例上面的 <code>$watch</code> 方法， 这个方法会对于当前的方法创建一个观察者 <code>watcher</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  Vue.prototype.$watch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    cb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPlainObject(cb)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\">    options.user = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> watcher = <span class=\"keyword\">new</span> Watcher(vm, expOrFn, cb, options);</span><br><span class=\"line\">    <span class=\"comment\">// 当可选项中包含有 immediate 属性的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.immediate) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 立即执行当前 watch 函数</span></span><br><span class=\"line\">        cb.call(vm, watcher.value);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        handleError(error, vm, (<span class=\"string\">\"callback for immediate watcher \\\"\"</span> + (watcher.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个取消 watch 的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unwatchFn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      watcher.teardown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"当-调用-watch-方法的时候，-将当前-watch-内-data-的回调函数作为依赖进行收集。\"><a href=\"#当-调用-watch-方法的时候，-将当前-watch-内-data-的回调函数作为依赖进行收集。\" class=\"headerlink\" title=\"当 调用 watch 方法的时候， 将当前 watch 内 data 的回调函数作为依赖进行收集。\"></a>当 调用 watch 方法的时候， 将当前 <code>watch</code> 内 <code>data</code> 的回调函数作为依赖进行收集。</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Watcher = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    vm,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    expOrFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    cb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    options,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    isRenderWatcher</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">      vm._watcher = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm._watchers.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep = !!options.deep;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.user = !!options.user;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.lazy = !!options.lazy;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sync = !!options.sync;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.before = options.before;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep = <span class=\"keyword\">this</span>.user = <span class=\"keyword\">this</span>.lazy = <span class=\"keyword\">this</span>.sync = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 回调函数被绑定到 Watcher 观察者上面的 cb 属性上面</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = ++uid$<span class=\"number\">1</span>; <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"keyword\">this</span>.lazy; <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.deps = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">new</span> _Set();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds = <span class=\"keyword\">new</span> _Set();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.expression = expOrFn.toString();</span><br><span class=\"line\">    <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = expOrFn;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里对于监听的变量值进行解析</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getter = parsePath(expOrFn);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'this.getter'</span>, <span class=\"keyword\">this</span>.getter);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.getter) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getter = noop;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">\"Failed watching path: \\\"\"</span> + expOrFn + <span class=\"string\">\"\\\" \"</span> +</span><br><span class=\"line\">          <span class=\"string\">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'For full control, use a function instead.'</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.lazy</span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将当前的 Watcher 赋值给 Dep.target</span></span><br><span class=\"line\">    pushTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用 getter 方法， 触发响应式数据的 get 属性， 进行依赖搜集</span></span><br><span class=\"line\">      value = <span class=\"keyword\">this</span>.getter.call(vm, vm);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'this.value'</span>, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">        handleError(e, vm, (<span class=\"string\">\"getter for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// \"touch\" every property so they are all tracked as</span></span><br><span class=\"line\">      <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.deep) &#123;</span><br><span class=\"line\">        traverse(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      popTarget();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cleanupDeps();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>parsePath</code> 方法用于监听的字段进行解析：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bailRE = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>((<span class=\"string\">\"[^\"</span> + (unicodeRegExp.source) + <span class=\"string\">\".$_\\\\d]\"</span>));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parsePath</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bailRE.test(path)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 按照 . 号进行分割为数组， 适用于我们想要监听一个对象下面的某一个属性的时候</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> segments = path.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回的函数作为 上面代码中的 this.getter</span></span><br><span class=\"line\">  <span class=\"comment\">// 当调用 this.getter 函数的时候， 会触发在当前数据上面的响应式数据的 get 方法， 搜集依赖</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; segments.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!obj) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      obj = obj[segments[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当触发响应式数据的 <code>getter</code> 属性的时候，在 <code>defineReactive</code> 中, 会进行依赖收集</p>\n<img src=\"/2019/05/13/watch%20in%20vue/image-20190514150916088.png\">\n<p>当调用<code>dep.depend()</code> 的时候， 调用了 <code>Dep</code> 类的<code>depend</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depend</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">    Dep.target.addDep(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>Dep.target</code> 是我们之前将<code>watcher</code> 赋值的那一个， 当调用 <code>Watcher</code> 上面的 <code>addDep</code> 方法的时候， 是将当前的<code>dep</code> 传入  <code>watcher</code> 实例中的 <code>newDeps</code> 属性， 并且， 当前<code>dep</code> 实例上面的 <code>addSub</code> 方法将会将 <code>Watcher</code> 存放到 这个实例的 <code>subs</code> 属性上面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.addDep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addDep</span> (<span class=\"params\">dep</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> id = dep.id;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds.add(id);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps.push(dep);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"当依赖收集完毕之后，-当监听的值发生变化的时候，通知依赖发生变化：\"><a href=\"#当依赖收集完毕之后，-当监听的值发生变化的时候，通知依赖发生变化：\" class=\"headerlink\" title=\"当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：\"></a>当依赖收集完毕之后， 当监听的值发生变化的时候，通知依赖发生变化：</h5><p>当监听的数据发生变化的时候， 会调用这个数据的 <code>set</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//  获取到原来的值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">  <span class=\"comment\">// 当要监听的数据没有发生变化的时候， 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (customSetter) &#123;</span><br><span class=\"line\">    customSetter();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">    setter.call(obj, newVal);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    val = newVal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class=\"line\">  <span class=\"comment\">//  通知依赖发生变化</span></span><br><span class=\"line\">  dep.notify();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dep.notify()</code> 是用来通知依赖发生变化的,  调用了 <code>dep</code> 实例上面的 <code>notify</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> subs = <span class=\"keyword\">this</span>.subs.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!config.async) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">    <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">    <span class=\"comment\">// order</span></span><br><span class=\"line\">    subs.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a.id - b.id; &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// subs 中存放的是 watcher ， 调用了 watcher 实例的  update 方法。</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    subs[i].update();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用  queueWatcher </span></span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>queueWatcher</code> 方法中， 将当前变动的所有 <code>watcher</code> 存放数组 <code>queue</code>  中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Push a watcher into the watcher queue.</span></span><br><span class=\"line\"><span class=\"comment\">  * Jobs with duplicate IDs will be skipped unless it's</span></span><br><span class=\"line\"><span class=\"comment\">  * pushed when the queue is being flushed.</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueWatcher</span> (<span class=\"params\">watcher</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> id = watcher.id;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (has[id] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">     has[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!flushing) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 将 watcher 存入</span></span><br><span class=\"line\">       queue.push(watcher);</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// if already flushing, splice the watcher based on its id</span></span><br><span class=\"line\">       <span class=\"comment\">// if already past its id, it will be run next immediately.</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> i = queue.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class=\"line\">         i--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       queue.splice(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>, watcher);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// queue the flush</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!waiting) &#123;</span><br><span class=\"line\">       waiting = <span class=\"literal\">true</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!config.async) &#123;</span><br><span class=\"line\">         flushSchedulerQueue();</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       nextTick(flushSchedulerQueue);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"执行-watch-中数据变动之后的函数回调：调用。flushSchedulerQueue\"><a href=\"#执行-watch-中数据变动之后的函数回调：调用。flushSchedulerQueue\" class=\"headerlink\" title=\"执行 watch 中数据变动之后的函数回调：调用。flushSchedulerQueue\"></a>执行 <code>watch</code> 中数据变动之后的函数回调：调用。<code>flushSchedulerQueue</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flushSchedulerQueue</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  currentFlushTimestamp = getNow();</span><br><span class=\"line\">  flushing = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> watcher, id;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\">// Sort queue before flush.</span></span><br><span class=\"line\">  <span class=\"comment\">// This ensures that:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class=\"line\">  <span class=\"comment\">//    created before the child)</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. A component's user watchers are run before its render watcher (because</span></span><br><span class=\"line\">  <span class=\"comment\">//    user watchers are created before the render watcher)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. If a component is destroyed during a parent component's watcher run,</span></span><br><span class=\"line\">  <span class=\"comment\">//    its watchers can be skipped.</span></span><br><span class=\"line\">  queue.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123; <span class=\"keyword\">return</span> a.id - b.id; &#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\">// do not cache length because more watchers might be pushed</span></span><br><span class=\"line\">  <span class=\"comment\">// as we run existing watchers</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class=\"line\">    watcher = queue[index];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watcher.before) &#123;</span><br><span class=\"line\">      watcher.before();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    id = watcher.id;</span><br><span class=\"line\">    has[id] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 watcher 实例上面的  run 方法</span></span><br><span class=\"line\">    watcher.run();</span><br><span class=\"line\">    <span class=\"comment\">// in dev build, check and stop circular updates.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (has[id] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      circular[id] = (circular[id] || <span class=\"number\">0</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">'You may have an infinite update loop '</span> + (</span><br><span class=\"line\">            watcher.user</span><br><span class=\"line\">              ? (<span class=\"string\">\"in watcher with expression \\\"\"</span> + (watcher.expression) + <span class=\"string\">\"\\\"\"</span>)</span><br><span class=\"line\">              : <span class=\"string\">\"in a component render function.\"</span></span><br><span class=\"line\">          ),</span><br><span class=\"line\">          watcher.vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>调用 <code>watcher.run</code>  方法之后， 如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">        <span class=\"comment\">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class=\"line\">        <span class=\"comment\">// when the value is the same, because the value may</span></span><br><span class=\"line\">        <span class=\"comment\">// have mutated.</span></span><br><span class=\"line\">        isObject(value) ||</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// set new value</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldValue = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            handleError(e, <span class=\"keyword\">this</span>.vm, (<span class=\"string\">\"callback for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 调用 watch 之后的函数方法， 传入的两个值， 当前变动的值和之前的值</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>最终， 调用</p>\n<p><code>this.cb.call(this.vm, value, oldValue);</code></p>\n<p>执行当监听的数据发生变化时候的回调函数， 调用的时候传入两个参数： value &amp;&amp; oldValue, 表示当前的值和变化之前的值。</p>\n</li>\n</ol>\n<p>补充： deep 方法是如何起作用的：</p>\n<p>当我们设定 <code>deep</code> 为 true 的时候， 这个时候， 当对象中的某个属性发生变化的时候， 也会被监听到变动， 关于  <code>deep</code> 为 true 的代码在下面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   pushTarget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> value;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>.vm;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用 getter, 搜集依赖</span></span><br><span class=\"line\">     value = <span class=\"keyword\">this</span>.getter.call(vm, vm);</span><br><span class=\"line\">     <span class=\"comment\">// console.log('this.value', value);</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">       handleError(e, vm, (<span class=\"string\">\"getter for watcher \\\"\"</span> + (<span class=\"keyword\">this</span>.expression) + <span class=\"string\">\"\\\"\"</span>));</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// \"touch\" every property so they are all tracked as</span></span><br><span class=\"line\">     <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.deep) &#123;</span><br><span class=\"line\">       traverse(value);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     popTarget();</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.cleanupDeps();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> value</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>正如上面注释写明的一样， 当  <code>deep</code> 为 true 的时候， 调用 <code>traverse</code>   方法， 这个方法的作用是出发对象中每一个属性的  <code>get</code> 方法， 从而让他们的依赖得以收集：</p>\n<p>traverse. 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归调用对象中的属性， 通过 val[i]  或者  val[key[i]] 触发 get 方法  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    _traverse(val, seenObjects);</span><br><span class=\"line\">    seenObjects.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_traverse</span> (<span class=\"params\">val, seen</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, keys;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isA = <span class=\"built_in\">Array</span>.isArray(val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class=\"built_in\">Object</span>.isFrozen(val) || val <span class=\"keyword\">instanceof</span> VNode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val.__ob__) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> depId = val.__ob__.dep.id;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (seen.has(depId)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      seen.add(depId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isA) &#123;</span><br><span class=\"line\">      i = val.length;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123; _traverse(val[i], seen); &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      keys = <span class=\"built_in\">Object</span>.keys(val);</span><br><span class=\"line\">      i = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// val[key[i]] 这里是关键</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123; _traverse(val[keys[i]], seen); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"作用域：函数作用域和块作用域","date":"2017-08-20T04:28:14.000Z","_content":"\n### 作用域单元\n\n作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。\n\n#### 为什么要创建块作用域\n\n例如代码如下：\n\n```\nif (true) {\n  var bar = 2\n}\nconsole.log(bar) // 2\n\n\nfor (var i =0 ;i < 10; i++) {\n  console.log(i)\n}\nconsole.log(i);\n```\n\n在上面的代码中，使用了 `var` 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。\n\n使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。\n\n#### 创建块作用域的几种方式\n\n1.try catch 语句会在 catch 语句中创建一个块作用域\n\n```\ntry {\n    consolel.log(a);\n}\ncatch (err) {\n    console.log(err.name); // 抛出错误的名字\n}\nconsole.log(err.name) // err is not defined\n```\n\n声明的catch 内变量只在 catch 语句内部被使用到\n\n2.let 会为声明的变量隐式的创建块作用域\n\n```\nif (true) {\n  let bar = 2\n}\nconsole.log(bar)// bar is not defined\n```\n\n通过使用 `let`  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。\n\n也可以通过使用 ` { }` 来显式的为 ` let` 声明一个用于绑定的块:\n\n```\nif () {\n  let bar = 2;\n  {\n    let foo = 3;\n  }\n  console.log(foo); // foo is not defined\n}\n```\n\n使用  `let` 可以创建作用域，相对于使用 `var` 而言,`var` 会将变量定义到全局作用域中，使用 `let` 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。\n\n3.使用 `const`也可以创建块状作用域，使用 `const` 创建的是常量，试图修改会导致错误:\n\n```\nif (true) {\n  const a = 2;\n}\nconsole.log(a) // a is not defined\n```\n\n#### 总结\n\n使用 `var ` 定义的变量会被定义到全局变量中，使用`let` 可以创建块状作用域，使用`let`定义的变量依赖的函数要和声明的变量放在同一个作用域；\n\n使用 `{}` 可以声明显式的作用域；","source":"_posts/作用域：函数作用域和块作用域.md","raw":"---\ntitle: 作用域：函数作用域和块作用域\ndate: 2017-08-20 12:28:14\ntags: \"作用域\"\ncategories: js读书总结\n---\n\n### 作用域单元\n\n作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。\n\n#### 为什么要创建块作用域\n\n例如代码如下：\n\n```\nif (true) {\n  var bar = 2\n}\nconsole.log(bar) // 2\n\n\nfor (var i =0 ;i < 10; i++) {\n  console.log(i)\n}\nconsole.log(i);\n```\n\n在上面的代码中，使用了 `var` 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。\n\n使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。\n\n#### 创建块作用域的几种方式\n\n1.try catch 语句会在 catch 语句中创建一个块作用域\n\n```\ntry {\n    consolel.log(a);\n}\ncatch (err) {\n    console.log(err.name); // 抛出错误的名字\n}\nconsole.log(err.name) // err is not defined\n```\n\n声明的catch 内变量只在 catch 语句内部被使用到\n\n2.let 会为声明的变量隐式的创建块作用域\n\n```\nif (true) {\n  let bar = 2\n}\nconsole.log(bar)// bar is not defined\n```\n\n通过使用 `let`  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。\n\n也可以通过使用 ` { }` 来显式的为 ` let` 声明一个用于绑定的块:\n\n```\nif () {\n  let bar = 2;\n  {\n    let foo = 3;\n  }\n  console.log(foo); // foo is not defined\n}\n```\n\n使用  `let` 可以创建作用域，相对于使用 `var` 而言,`var` 会将变量定义到全局作用域中，使用 `let` 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。\n\n3.使用 `const`也可以创建块状作用域，使用 `const` 创建的是常量，试图修改会导致错误:\n\n```\nif (true) {\n  const a = 2;\n}\nconsole.log(a) // a is not defined\n```\n\n#### 总结\n\n使用 `var ` 定义的变量会被定义到全局变量中，使用`let` 可以创建块状作用域，使用`let`定义的变量依赖的函数要和声明的变量放在同一个作用域；\n\n使用 `{}` 可以声明显式的作用域；","slug":"作用域：函数作用域和块作用域","published":1,"updated":"2020-09-14T06:36:25.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8n004oi2osjw5tpumh","content":"<h3 id=\"作用域单元\"><a href=\"#作用域单元\" class=\"headerlink\" title=\"作用域单元\"></a>作用域单元</h3><p>作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。</p>\n<h4 id=\"为什么要创建块作用域\"><a href=\"#为什么要创建块作用域\" class=\"headerlink\" title=\"为什么要创建块作用域\"></a>为什么要创建块作用域</h4><p>例如代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar) // 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var i =0 ;i &lt; 10; i++) &#123;</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，使用了 <code>var</code> 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。</p>\n<p>使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。</p>\n<h4 id=\"创建块作用域的几种方式\"><a href=\"#创建块作用域的几种方式\" class=\"headerlink\" title=\"创建块作用域的几种方式\"></a>创建块作用域的几种方式</h4><p>1.try catch 语句会在 catch 语句中创建一个块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    consolel.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (err) &#123;</span><br><span class=\"line\">    console.log(err.name); // 抛出错误的名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(err.name) // err is not defined</span><br></pre></td></tr></table></figure>\n<p>声明的catch 内变量只在 catch 语句内部被使用到</p>\n<p>2.let 会为声明的变量隐式的创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  let bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar)// bar is not defined</span><br></pre></td></tr></table></figure>\n<p>通过使用 <code>let</code>  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。</p>\n<p>也可以通过使用 <code>{ }</code> 来显式的为 <code>let</code> 声明一个用于绑定的块:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if () &#123;</span><br><span class=\"line\">  let bar = 2;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let foo = 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(foo); // foo is not defined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用  <code>let</code> 可以创建作用域，相对于使用 <code>var</code> 而言,<code>var</code> 会将变量定义到全局作用域中，使用 <code>let</code> 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。</p>\n<p>3.使用 <code>const</code>也可以创建块状作用域，使用 <code>const</code> 创建的是常量，试图修改会导致错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  const a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a) // a is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用 <code>var</code> 定义的变量会被定义到全局变量中，使用<code>let</code> 可以创建块状作用域，使用<code>let</code>定义的变量依赖的函数要和声明的变量放在同一个作用域；</p>\n<p>使用 <code>{}</code> 可以声明显式的作用域；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"作用域单元\"><a href=\"#作用域单元\" class=\"headerlink\" title=\"作用域单元\"></a>作用域单元</h3><p>作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。</p>\n<h4 id=\"为什么要创建块作用域\"><a href=\"#为什么要创建块作用域\" class=\"headerlink\" title=\"为什么要创建块作用域\"></a>为什么要创建块作用域</h4><p>例如代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar) // 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var i =0 ;i &lt; 10; i++) &#123;</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，使用了 <code>var</code> 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。</p>\n<p>使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。</p>\n<h4 id=\"创建块作用域的几种方式\"><a href=\"#创建块作用域的几种方式\" class=\"headerlink\" title=\"创建块作用域的几种方式\"></a>创建块作用域的几种方式</h4><p>1.try catch 语句会在 catch 语句中创建一个块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    consolel.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (err) &#123;</span><br><span class=\"line\">    console.log(err.name); // 抛出错误的名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(err.name) // err is not defined</span><br></pre></td></tr></table></figure>\n<p>声明的catch 内变量只在 catch 语句内部被使用到</p>\n<p>2.let 会为声明的变量隐式的创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  let bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar)// bar is not defined</span><br></pre></td></tr></table></figure>\n<p>通过使用 <code>let</code>  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。</p>\n<p>也可以通过使用 <code>{ }</code> 来显式的为 <code>let</code> 声明一个用于绑定的块:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if () &#123;</span><br><span class=\"line\">  let bar = 2;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let foo = 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(foo); // foo is not defined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用  <code>let</code> 可以创建作用域，相对于使用 <code>var</code> 而言,<code>var</code> 会将变量定义到全局作用域中，使用 <code>let</code> 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。</p>\n<p>3.使用 <code>const</code>也可以创建块状作用域，使用 <code>const</code> 创建的是常量，试图修改会导致错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  const a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a) // a is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用 <code>var</code> 定义的变量会被定义到全局变量中，使用<code>let</code> 可以创建块状作用域，使用<code>let</code>定义的变量依赖的函数要和声明的变量放在同一个作用域；</p>\n<p>使用 <code>{}</code> 可以声明显式的作用域；</p>\n"},{"title":"函数式编程（一）","date":"2019-09-14T02:02:34.000Z","_content":"\n函数式编程是一种编程范式， 与之相对应的是面向对象编程和指令式编程等。\n\n函数式编程（FP）要更加偏向于声明式而不是命令式；\n\n> 声明式关注于程序做什么， 命令式关注于程序怎样做\n\n在FP 中， 有下面几个关键词：\n\n* 纯函数\n* 函数组合\n* 避免状态共享\n* 避免状态的变化\n* 避免副作用\n\n1. 纯函数\n\n   纯函数给定特定的输入值，将总会返回同样的输出值，且没有副作用， 纯函数具有引用透明性的特点，这使得我们更易追踪数据的变化， 减少问题的发生\n\n2. 函数组合\n\n   函数组合可以根据我们传入的多个函数返回多个函数组合的新函数，或者根据传入的多个函数进行计算\n\n3. 避免状态共享\n\n   状态共享的问题在于你需要了解某一个函数的功能时， 你需要知道函数中使用到的共享变量的调用历史记录， 另外， 使用共享的状态时， 调用函数的顺序不同会导致最终共享状态数据的不同\n\n4. 状态不变性\n\n   当函数中的数据被创建之后将不会被更改，如果创建的数据在被创建之后可以被调用的函数更改，那么将会导致程序中的数据流混乱\n\n5. 避免副作用\n\n   副作用指的是调用函数之后， 改变了函数之外的状态， 或者导致其他的可以被观测到的行为\n\n   比如以下副作用：\n\n   * 改变外部对象或者变量属性\n   * 写文件\n   * 错发任何外部的程序\n   * 调用其他含有副作用的函数\n\n   避免上面的副作用可以使得我们易于扩展， 重构， debug 代码\n\n函数式编程中的一些其他应用：\n\n### 高阶函数\n\n高阶函数可以接受函数作为参数， 返回一种新的函数，高阶函数经常被用作：\n\n* 抽象或者隔离动作， 行为， 例如回调函数或者 promises\n* 创造作用于范围广范的数据类型的工具方法\n* 实现函数组合或者函数重用，通过将函数作为参数传递或者创建柯里化的函数\n* 接口函数列表， 返回这些输入方法的组合\n\n","source":"_posts/函数式编程（1）.md","raw":"---\ntitle: 函数式编程（一）\ndate: 2019-09-14 10:02:34\ntags: FP\ncategories: 笔记\n---\n\n函数式编程是一种编程范式， 与之相对应的是面向对象编程和指令式编程等。\n\n函数式编程（FP）要更加偏向于声明式而不是命令式；\n\n> 声明式关注于程序做什么， 命令式关注于程序怎样做\n\n在FP 中， 有下面几个关键词：\n\n* 纯函数\n* 函数组合\n* 避免状态共享\n* 避免状态的变化\n* 避免副作用\n\n1. 纯函数\n\n   纯函数给定特定的输入值，将总会返回同样的输出值，且没有副作用， 纯函数具有引用透明性的特点，这使得我们更易追踪数据的变化， 减少问题的发生\n\n2. 函数组合\n\n   函数组合可以根据我们传入的多个函数返回多个函数组合的新函数，或者根据传入的多个函数进行计算\n\n3. 避免状态共享\n\n   状态共享的问题在于你需要了解某一个函数的功能时， 你需要知道函数中使用到的共享变量的调用历史记录， 另外， 使用共享的状态时， 调用函数的顺序不同会导致最终共享状态数据的不同\n\n4. 状态不变性\n\n   当函数中的数据被创建之后将不会被更改，如果创建的数据在被创建之后可以被调用的函数更改，那么将会导致程序中的数据流混乱\n\n5. 避免副作用\n\n   副作用指的是调用函数之后， 改变了函数之外的状态， 或者导致其他的可以被观测到的行为\n\n   比如以下副作用：\n\n   * 改变外部对象或者变量属性\n   * 写文件\n   * 错发任何外部的程序\n   * 调用其他含有副作用的函数\n\n   避免上面的副作用可以使得我们易于扩展， 重构， debug 代码\n\n函数式编程中的一些其他应用：\n\n### 高阶函数\n\n高阶函数可以接受函数作为参数， 返回一种新的函数，高阶函数经常被用作：\n\n* 抽象或者隔离动作， 行为， 例如回调函数或者 promises\n* 创造作用于范围广范的数据类型的工具方法\n* 实现函数组合或者函数重用，通过将函数作为参数传递或者创建柯里化的函数\n* 接口函数列表， 返回这些输入方法的组合\n\n","slug":"函数式编程（1）","published":1,"updated":"2020-09-14T06:36:25.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8o004ti2osk0ex91hs","content":"<p>函数式编程是一种编程范式， 与之相对应的是面向对象编程和指令式编程等。</p>\n<p>函数式编程（FP）要更加偏向于声明式而不是命令式；</p>\n<blockquote>\n<p>声明式关注于程序做什么， 命令式关注于程序怎样做</p>\n</blockquote>\n<p>在FP 中， 有下面几个关键词：</p>\n<ul>\n<li>纯函数</li>\n<li>函数组合</li>\n<li>避免状态共享</li>\n<li>避免状态的变化</li>\n<li>避免副作用</li>\n</ul>\n<ol>\n<li><p>纯函数</p>\n<p>纯函数给定特定的输入值，将总会返回同样的输出值，且没有副作用， 纯函数具有引用透明性的特点，这使得我们更易追踪数据的变化， 减少问题的发生</p>\n</li>\n<li><p>函数组合</p>\n<p>函数组合可以根据我们传入的多个函数返回多个函数组合的新函数，或者根据传入的多个函数进行计算</p>\n</li>\n<li><p>避免状态共享</p>\n<p>状态共享的问题在于你需要了解某一个函数的功能时， 你需要知道函数中使用到的共享变量的调用历史记录， 另外， 使用共享的状态时， 调用函数的顺序不同会导致最终共享状态数据的不同</p>\n</li>\n<li><p>状态不变性</p>\n<p>当函数中的数据被创建之后将不会被更改，如果创建的数据在被创建之后可以被调用的函数更改，那么将会导致程序中的数据流混乱</p>\n</li>\n<li><p>避免副作用</p>\n<p>副作用指的是调用函数之后， 改变了函数之外的状态， 或者导致其他的可以被观测到的行为</p>\n<p>比如以下副作用：</p>\n<ul>\n<li>改变外部对象或者变量属性</li>\n<li>写文件</li>\n<li>错发任何外部的程序</li>\n<li>调用其他含有副作用的函数</li>\n</ul>\n<p>避免上面的副作用可以使得我们易于扩展， 重构， debug 代码</p>\n</li>\n</ol>\n<p>函数式编程中的一些其他应用：</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>高阶函数可以接受函数作为参数， 返回一种新的函数，高阶函数经常被用作：</p>\n<ul>\n<li>抽象或者隔离动作， 行为， 例如回调函数或者 promises</li>\n<li>创造作用于范围广范的数据类型的工具方法</li>\n<li>实现函数组合或者函数重用，通过将函数作为参数传递或者创建柯里化的函数</li>\n<li>接口函数列表， 返回这些输入方法的组合</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>函数式编程是一种编程范式， 与之相对应的是面向对象编程和指令式编程等。</p>\n<p>函数式编程（FP）要更加偏向于声明式而不是命令式；</p>\n<blockquote>\n<p>声明式关注于程序做什么， 命令式关注于程序怎样做</p>\n</blockquote>\n<p>在FP 中， 有下面几个关键词：</p>\n<ul>\n<li>纯函数</li>\n<li>函数组合</li>\n<li>避免状态共享</li>\n<li>避免状态的变化</li>\n<li>避免副作用</li>\n</ul>\n<ol>\n<li><p>纯函数</p>\n<p>纯函数给定特定的输入值，将总会返回同样的输出值，且没有副作用， 纯函数具有引用透明性的特点，这使得我们更易追踪数据的变化， 减少问题的发生</p>\n</li>\n<li><p>函数组合</p>\n<p>函数组合可以根据我们传入的多个函数返回多个函数组合的新函数，或者根据传入的多个函数进行计算</p>\n</li>\n<li><p>避免状态共享</p>\n<p>状态共享的问题在于你需要了解某一个函数的功能时， 你需要知道函数中使用到的共享变量的调用历史记录， 另外， 使用共享的状态时， 调用函数的顺序不同会导致最终共享状态数据的不同</p>\n</li>\n<li><p>状态不变性</p>\n<p>当函数中的数据被创建之后将不会被更改，如果创建的数据在被创建之后可以被调用的函数更改，那么将会导致程序中的数据流混乱</p>\n</li>\n<li><p>避免副作用</p>\n<p>副作用指的是调用函数之后， 改变了函数之外的状态， 或者导致其他的可以被观测到的行为</p>\n<p>比如以下副作用：</p>\n<ul>\n<li>改变外部对象或者变量属性</li>\n<li>写文件</li>\n<li>错发任何外部的程序</li>\n<li>调用其他含有副作用的函数</li>\n</ul>\n<p>避免上面的副作用可以使得我们易于扩展， 重构， debug 代码</p>\n</li>\n</ol>\n<p>函数式编程中的一些其他应用：</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>高阶函数可以接受函数作为参数， 返回一种新的函数，高阶函数经常被用作：</p>\n<ul>\n<li>抽象或者隔离动作， 行为， 例如回调函数或者 promises</li>\n<li>创造作用于范围广范的数据类型的工具方法</li>\n<li>实现函数组合或者函数重用，通过将函数作为参数传递或者创建柯里化的函数</li>\n<li>接口函数列表， 返回这些输入方法的组合</li>\n</ul>\n"},{"title":"使用 browserify 处理virtual-dom模块的一个例子","date":"2020-09-13T13:38:20.000Z","_content":"\n使用 browserify 来实现程序在node环境和浏览器环境的适配： 适配不同的模块加载方式\n\n有的时候js文件需要在 node 和 浏览器环境下都能执行，除了兼容性问题之外，还有一点是 node 和 浏览器平台引入文件时的模块机制是不同的 ：\n\nNode 中使用 `Commonjs` 的模块加载机制，Commonjs 模块加载机制如下：\n\n使用：使用 `require` 加载模块， 使用 `module.exports` 向外部暴露模块\n\n特定： 模块同时加载，这种特点在 node 环境下是不存在问题的， 因为 node 环境下模块都是在本地磁盘，加载比较快， 但是在浏览器环境下时会出现阻塞渲染的问题\n\n为了解决异步加载模块的问题，`AMD(https://github.com/amdjs/amdjs-api/wiki)`  和 `CMD` 通过不同的方式实现异步加载模块：\n\nAMD   :  相关库： `requireJs`\n\n写法：\n\n```js\ndefine(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) {\n  return someExportedValue;\n});\nrequire([\"module\", \"../file\"], function(module, file) { /* ... */ });\n```\n\nCMD:  相关库： `seaJs`\n\n``` js\ndefine(function(require, exports, module) {\n  var add = require('math').add;\n  exports.increment = function(val) {\n    return add(val, 1);\n  };\n});\n```\n\n除了 `AMD` 和 `CMD` 两个规范之外，使用`es6`  的模块加载是浏览器的另一种模块加载机制，也是未来的主流\n\n使用 `es6` 模块加载实现动态加载的方法： `import(module)`\n\n```\n// 导入 dayJs 模块\n// import(...) 返回 promise\nconst dayJs = await import('dayjs');\n```\n\n使用 `browserify` 是如何实现的适配各种模块加载的呢 ？\n\n具体代码如下：\n\n按照 [`virtual-dom`](https://github.com/Matt-Esch/virtual-dom) 这个包为例：这个包的作用是生成虚拟dom对象\n\n执行 `package.json` 中的命令：\n\n```js\n\"dist\": \"browserify  virtual-dom index.js > dist/virtual-dom.js\",\n```\n\n打包时，使用 `browserify` 来处理， 最终打包完成后的文件输出到 `dist/virtual-dom.js` 中， 在打包后的代码中，我们可以看到如下的代码结构：\n\n处理之后的代码中：将原来文件中 `require(...)` 这样的文件引用替换为具体的执行函数\n\n```js\n// 自执行方法 f 为下面的 函数1\n(function (f) {\n    // 这里根据不同的模块加载方式来导出 virtual-dom 这个包的代码\n    // 如果是 CommonJs 规范，比如在 node 中使用\n    // 这里当执行 f() 之后，执行路径是：\n    // 函数1 作为参数 f 传入， 执行 f 函数1 执行 ==>\n    // 函数1 执行 ==> 返回函数 e （为自执行函数）\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        // 在不同环境下，给不同全局变量挂载 virtualDom 变量值为 f 函数执行后的结果\n        g.virtualDom = f()\n    }\n\n})(\n  // 函数1 作为参数 f 传入上面的参数\n  function () {\n    var define, module, exports;\n    // 函数 e 也是一个自执行函数，接受三个参数：\n    // 这里参数的各个部分\n    // t: 表示下面的对象1\n    // n: 表示下面的对象2\n    // r: 表示下面的对象3\n    // 这里返回的结构为 (function e(t, n, r) {})(对象1,对象2,对象3)(4)\n    // 函数e为自执行函数，执行后返回函数 s， s 接受 4 作为参数，最终这里 return\n    // 的结果为 s(4) 之后的返回值\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a) return a(o, !0);\n                    if (i) return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {\n                    exports: {}\n                };\n                // 这里的 t[o]0 表示每个模块的方法\n                // 这里的 t[o]1 表示文件对象，文件对象的键名为引用的文件地址，建值为该文件在对象1中的key\n                // 这里使用 call 会立即执行 t[o]0 这个方法\n                t[o][0].call(l.exports, function (e) {\n                    // 这里的 function (e) {}, l, l.exports \n                    // 分别表示 function (require, module, exports) 中的 require, module,         \n                    // exports 这三个参数\n                    // 所以当调用 module.exports 的时候， 实际上 module.exports === l.exports\n                    var n = t[o][1][e];\n                    // 获取到文件地址对象对应的值\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            // 这里是 s 方法的返回值\n            return n[o].exports\n        }\n        var i = typeof require == \"function\" && require; \n        for (var o = 0; o < r.length; o++) s(r[o]);\n        return s\n    })(\n      // 对象1\n      {\n      ===== 从之前的代码中抽取出来的一些代码 =====\n      这个对象中的元素的结构都是一样的：\n      对象的键key为数字，表示当前文件的标识\n      对象的值是一个数组， 这个数组中有两个元素，一个元素是 `function(require, module, exports) {}` \t\t\t方法包裹的文件内的方法，另外一个元素是上面文件中使用 require 引用的文件路径和文件标识对象\n      ...\n      // 为什么这里要先进行处理呢 ？ 因为可以认为这里是程序的主入口\n      // 分析程序先从这里进入开始分析\n      4: [function (require, module, exports) {\n        var diff = require(\"./diff.js\")\n        var patch = require(\"./patch.js\")\n        var h = require(\"./h.js\")\n        var create = require(\"./create-element.js\")\n        var VNode = require('./vnode/vnode.js')\n        var VText = require('./vnode/vtext.js')\n\n        module.exports = {\n          diff: diff,\n          patch: patch,\n          h: h,\n          create: create,\n          VNode: VNode,\n          VText: VText\n        }\n\n      }, {\n        \"./create-element.js\": 1,\n        \"./diff.js\": 2,\n        \"./h.js\": 3,\n        \"./patch.js\": 13,\n        \"./vnode/vnode.js\": 31,\n        \"./vnode/vtext.js\": 33\n      }],\n      ...\n    }, \n    // 对象2\n    {}, \n    // 对象3\n    [4]\n    // 这里的参数 （4） 实际上是 上面函数 s 接受的参数\n   )(4)\n  }\n);\n```\n\n","source":"_posts/使用 browserify 处理virtual-dom模块的一个例子.md","raw":"---\ntitle: 使用 browserify 处理virtual-dom模块的一个例子\ndate: 2020-09-13 21:38:20\ntags: js-module\t\ncategories: 源码阅读\n---\n\n使用 browserify 来实现程序在node环境和浏览器环境的适配： 适配不同的模块加载方式\n\n有的时候js文件需要在 node 和 浏览器环境下都能执行，除了兼容性问题之外，还有一点是 node 和 浏览器平台引入文件时的模块机制是不同的 ：\n\nNode 中使用 `Commonjs` 的模块加载机制，Commonjs 模块加载机制如下：\n\n使用：使用 `require` 加载模块， 使用 `module.exports` 向外部暴露模块\n\n特定： 模块同时加载，这种特点在 node 环境下是不存在问题的， 因为 node 环境下模块都是在本地磁盘，加载比较快， 但是在浏览器环境下时会出现阻塞渲染的问题\n\n为了解决异步加载模块的问题，`AMD(https://github.com/amdjs/amdjs-api/wiki)`  和 `CMD` 通过不同的方式实现异步加载模块：\n\nAMD   :  相关库： `requireJs`\n\n写法：\n\n```js\ndefine(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) {\n  return someExportedValue;\n});\nrequire([\"module\", \"../file\"], function(module, file) { /* ... */ });\n```\n\nCMD:  相关库： `seaJs`\n\n``` js\ndefine(function(require, exports, module) {\n  var add = require('math').add;\n  exports.increment = function(val) {\n    return add(val, 1);\n  };\n});\n```\n\n除了 `AMD` 和 `CMD` 两个规范之外，使用`es6`  的模块加载是浏览器的另一种模块加载机制，也是未来的主流\n\n使用 `es6` 模块加载实现动态加载的方法： `import(module)`\n\n```\n// 导入 dayJs 模块\n// import(...) 返回 promise\nconst dayJs = await import('dayjs');\n```\n\n使用 `browserify` 是如何实现的适配各种模块加载的呢 ？\n\n具体代码如下：\n\n按照 [`virtual-dom`](https://github.com/Matt-Esch/virtual-dom) 这个包为例：这个包的作用是生成虚拟dom对象\n\n执行 `package.json` 中的命令：\n\n```js\n\"dist\": \"browserify  virtual-dom index.js > dist/virtual-dom.js\",\n```\n\n打包时，使用 `browserify` 来处理， 最终打包完成后的文件输出到 `dist/virtual-dom.js` 中， 在打包后的代码中，我们可以看到如下的代码结构：\n\n处理之后的代码中：将原来文件中 `require(...)` 这样的文件引用替换为具体的执行函数\n\n```js\n// 自执行方法 f 为下面的 函数1\n(function (f) {\n    // 这里根据不同的模块加载方式来导出 virtual-dom 这个包的代码\n    // 如果是 CommonJs 规范，比如在 node 中使用\n    // 这里当执行 f() 之后，执行路径是：\n    // 函数1 作为参数 f 传入， 执行 f 函数1 执行 ==>\n    // 函数1 执行 ==> 返回函数 e （为自执行函数）\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        // 在不同环境下，给不同全局变量挂载 virtualDom 变量值为 f 函数执行后的结果\n        g.virtualDom = f()\n    }\n\n})(\n  // 函数1 作为参数 f 传入上面的参数\n  function () {\n    var define, module, exports;\n    // 函数 e 也是一个自执行函数，接受三个参数：\n    // 这里参数的各个部分\n    // t: 表示下面的对象1\n    // n: 表示下面的对象2\n    // r: 表示下面的对象3\n    // 这里返回的结构为 (function e(t, n, r) {})(对象1,对象2,对象3)(4)\n    // 函数e为自执行函数，执行后返回函数 s， s 接受 4 作为参数，最终这里 return\n    // 的结果为 s(4) 之后的返回值\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a) return a(o, !0);\n                    if (i) return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {\n                    exports: {}\n                };\n                // 这里的 t[o]0 表示每个模块的方法\n                // 这里的 t[o]1 表示文件对象，文件对象的键名为引用的文件地址，建值为该文件在对象1中的key\n                // 这里使用 call 会立即执行 t[o]0 这个方法\n                t[o][0].call(l.exports, function (e) {\n                    // 这里的 function (e) {}, l, l.exports \n                    // 分别表示 function (require, module, exports) 中的 require, module,         \n                    // exports 这三个参数\n                    // 所以当调用 module.exports 的时候， 实际上 module.exports === l.exports\n                    var n = t[o][1][e];\n                    // 获取到文件地址对象对应的值\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            // 这里是 s 方法的返回值\n            return n[o].exports\n        }\n        var i = typeof require == \"function\" && require; \n        for (var o = 0; o < r.length; o++) s(r[o]);\n        return s\n    })(\n      // 对象1\n      {\n      ===== 从之前的代码中抽取出来的一些代码 =====\n      这个对象中的元素的结构都是一样的：\n      对象的键key为数字，表示当前文件的标识\n      对象的值是一个数组， 这个数组中有两个元素，一个元素是 `function(require, module, exports) {}` \t\t\t方法包裹的文件内的方法，另外一个元素是上面文件中使用 require 引用的文件路径和文件标识对象\n      ...\n      // 为什么这里要先进行处理呢 ？ 因为可以认为这里是程序的主入口\n      // 分析程序先从这里进入开始分析\n      4: [function (require, module, exports) {\n        var diff = require(\"./diff.js\")\n        var patch = require(\"./patch.js\")\n        var h = require(\"./h.js\")\n        var create = require(\"./create-element.js\")\n        var VNode = require('./vnode/vnode.js')\n        var VText = require('./vnode/vtext.js')\n\n        module.exports = {\n          diff: diff,\n          patch: patch,\n          h: h,\n          create: create,\n          VNode: VNode,\n          VText: VText\n        }\n\n      }, {\n        \"./create-element.js\": 1,\n        \"./diff.js\": 2,\n        \"./h.js\": 3,\n        \"./patch.js\": 13,\n        \"./vnode/vnode.js\": 31,\n        \"./vnode/vtext.js\": 33\n      }],\n      ...\n    }, \n    // 对象2\n    {}, \n    // 对象3\n    [4]\n    // 这里的参数 （4） 实际上是 上面函数 s 接受的参数\n   )(4)\n  }\n);\n```\n\n","slug":"使用 browserify 处理virtual-dom模块的一个例子","published":1,"updated":"2020-09-14T06:36:25.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8p004vi2osq7ysl9xy","content":"<p>使用 browserify 来实现程序在node环境和浏览器环境的适配： 适配不同的模块加载方式</p>\n<p>有的时候js文件需要在 node 和 浏览器环境下都能执行，除了兼容性问题之外，还有一点是 node 和 浏览器平台引入文件时的模块机制是不同的 ：</p>\n<p>Node 中使用 <code>Commonjs</code> 的模块加载机制，Commonjs 模块加载机制如下：</p>\n<p>使用：使用 <code>require</code> 加载模块， 使用 <code>module.exports</code> 向外部暴露模块</p>\n<p>特定： 模块同时加载，这种特点在 node 环境下是不存在问题的， 因为 node 环境下模块都是在本地磁盘，加载比较快， 但是在浏览器环境下时会出现阻塞渲染的问题</p>\n<p>为了解决异步加载模块的问题，<code>AMD(https://github.com/amdjs/amdjs-api/wiki)</code>  和 <code>CMD</code> 通过不同的方式实现异步加载模块：</p>\n<p>AMD   :  相关库： <code>requireJs</code></p>\n<p>写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>, [<span class=\"string\">\"dep1\"</span>, <span class=\"string\">\"dep2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1, d2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> someExportedValue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>, <span class=\"string\">\"../file\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, file</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>CMD:  相关库： <code>seaJs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>).add;</span><br><span class=\"line\">  exports.increment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add(val, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>除了 <code>AMD</code> 和 <code>CMD</code> 两个规范之外，使用<code>es6</code>  的模块加载是浏览器的另一种模块加载机制，也是未来的主流</p>\n<p>使用 <code>es6</code> 模块加载实现动态加载的方法： <code>import(module)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 导入 dayJs 模块</span><br><span class=\"line\">// import(...) 返回 promise</span><br><span class=\"line\">const dayJs = await import(&apos;dayjs&apos;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>browserify</code> 是如何实现的适配各种模块加载的呢 ？</p>\n<p>具体代码如下：</p>\n<p>按照 <a href=\"https://github.com/Matt-Esch/virtual-dom\" target=\"_blank\" rel=\"noopener\"><code>virtual-dom</code></a> 这个包为例：这个包的作用是生成虚拟dom对象</p>\n<p>执行 <code>package.json</code> 中的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dist\"</span>: <span class=\"string\">\"browserify  virtual-dom index.js &gt; dist/virtual-dom.js\"</span>,</span><br></pre></td></tr></table></figure>\n<p>打包时，使用 <code>browserify</code> 来处理， 最终打包完成后的文件输出到 <code>dist/virtual-dom.js</code> 中， 在打包后的代码中，我们可以看到如下的代码结构：</p>\n<p>处理之后的代码中：将原来文件中 <code>require(...)</code> 这样的文件引用替换为具体的执行函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自执行方法 f 为下面的 函数1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里根据不同的模块加载方式来导出 virtual-dom 这个包的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是 CommonJs 规范，比如在 node 中使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里当执行 f() 之后，执行路径是：</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数1 作为参数 f 传入， 执行 f 函数1 执行 ==&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数1 执行 ==&gt; 返回函数 e （为自执行函数）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = f()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">        define([], f)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> g;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = <span class=\"built_in\">window</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = global</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = self</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            g = <span class=\"keyword\">this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在不同环境下，给不同全局变量挂载 virtualDom 变量值为 f 函数执行后的结果</span></span><br><span class=\"line\">        g.virtualDom = f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(</span><br><span class=\"line\">  <span class=\"comment\">// 函数1 作为参数 f 传入上面的参数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> define, <span class=\"built_in\">module</span>, exports;</span><br><span class=\"line\">    <span class=\"comment\">// 函数 e 也是一个自执行函数，接受三个参数：</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里参数的各个部分</span></span><br><span class=\"line\">    <span class=\"comment\">// t: 表示下面的对象1</span></span><br><span class=\"line\">    <span class=\"comment\">// n: 表示下面的对象2</span></span><br><span class=\"line\">    <span class=\"comment\">// r: 表示下面的对象3</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的结构为 (function e(t, n, r) &#123;&#125;)(对象1,对象2,对象3)(4)</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数e为自执行函数，执行后返回函数 s， s 接受 4 作为参数，最终这里 return</span></span><br><span class=\"line\">    <span class=\"comment\">// 的结果为 s(4) 之后的返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">t, n, r</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\">o, u</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!n[o]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!t[o]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> a = <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> == <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"built_in\">require</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!u &amp;&amp; a) <span class=\"keyword\">return</span> a(o, !<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i) <span class=\"keyword\">return</span> i(o, !<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Cannot find module '\"</span> + o + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> f.code = <span class=\"string\">\"MODULE_NOT_FOUND\"</span>, f</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> l = n[o] = &#123;</span><br><span class=\"line\">                    exports: &#123;&#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"comment\">// 这里的 t[o]0 表示每个模块的方法</span></span><br><span class=\"line\">                <span class=\"comment\">// 这里的 t[o]1 表示文件对象，文件对象的键名为引用的文件地址，建值为该文件在对象1中的key</span></span><br><span class=\"line\">                <span class=\"comment\">// 这里使用 call 会立即执行 t[o]0 这个方法</span></span><br><span class=\"line\">                t[o][<span class=\"number\">0</span>].call(l.exports, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 这里的 function (e) &#123;&#125;, l, l.exports </span></span><br><span class=\"line\">                    <span class=\"comment\">// 分别表示 function (require, module, exports) 中的 require, module,         </span></span><br><span class=\"line\">                    <span class=\"comment\">// exports 这三个参数</span></span><br><span class=\"line\">                    <span class=\"comment\">// 所以当调用 module.exports 的时候， 实际上 module.exports === l.exports</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> n = t[o][<span class=\"number\">1</span>][e];</span><br><span class=\"line\">                    <span class=\"comment\">// 获取到文件地址对象对应的值</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> s(n ? n : e)</span><br><span class=\"line\">                &#125;, l, l.exports, e, t, n, r)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 这里是 s 方法的返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> n[o].exports</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> == <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"built_in\">require</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> o = <span class=\"number\">0</span>; o &lt; r.length; o++) s(r[o]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\">    &#125;)(</span><br><span class=\"line\">      <span class=\"comment\">// 对象1</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      ===== 从之前的代码中抽取出来的一些代码 =====</span><br><span class=\"line\">      这个对象中的元素的结构都是一样的：</span><br><span class=\"line\">      对象的键key为数字，表示当前文件的标识</span><br><span class=\"line\">      对象的值是一个数组， 这个数组中有两个元素，一个元素是 <span class=\"string\">`function(require, module, exports) &#123;&#125;`</span> \t\t\t方法包裹的文件内的方法，另外一个元素是上面文件中使用 <span class=\"built_in\">require</span> 引用的文件路径和文件标识对象</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"comment\">// 为什么这里要先进行处理呢 ？ 因为可以认为这里是程序的主入口</span></span><br><span class=\"line\">      <span class=\"comment\">// 分析程序先从这里进入开始分析</span></span><br><span class=\"line\">      <span class=\"number\">4</span>: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, module, exports</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> diff = <span class=\"built_in\">require</span>(<span class=\"string\">\"./diff.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> patch = <span class=\"built_in\">require</span>(<span class=\"string\">\"./patch.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = <span class=\"built_in\">require</span>(<span class=\"string\">\"./h.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> create = <span class=\"built_in\">require</span>(<span class=\"string\">\"./create-element.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> VNode = <span class=\"built_in\">require</span>(<span class=\"string\">'./vnode/vnode.js'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> VText = <span class=\"built_in\">require</span>(<span class=\"string\">'./vnode/vtext.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">          diff: diff,</span><br><span class=\"line\">          patch: patch,</span><br><span class=\"line\">          h: h,</span><br><span class=\"line\">          create: create,</span><br><span class=\"line\">          VNode: VNode,</span><br><span class=\"line\">          VText: VText</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"./create-element.js\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./diff.js\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./h.js\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./patch.js\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./vnode/vnode.js\"</span>: <span class=\"number\">31</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./vnode/vtext.js\"</span>: <span class=\"number\">33</span></span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"comment\">// 对象2</span></span><br><span class=\"line\">    &#123;&#125;, </span><br><span class=\"line\">    <span class=\"comment\">// 对象3</span></span><br><span class=\"line\">    [<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 这里的参数 （4） 实际上是 上面函数 s 接受的参数</span></span><br><span class=\"line\">   )(<span class=\"number\">4</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 browserify 来实现程序在node环境和浏览器环境的适配： 适配不同的模块加载方式</p>\n<p>有的时候js文件需要在 node 和 浏览器环境下都能执行，除了兼容性问题之外，还有一点是 node 和 浏览器平台引入文件时的模块机制是不同的 ：</p>\n<p>Node 中使用 <code>Commonjs</code> 的模块加载机制，Commonjs 模块加载机制如下：</p>\n<p>使用：使用 <code>require</code> 加载模块， 使用 <code>module.exports</code> 向外部暴露模块</p>\n<p>特定： 模块同时加载，这种特点在 node 环境下是不存在问题的， 因为 node 环境下模块都是在本地磁盘，加载比较快， 但是在浏览器环境下时会出现阻塞渲染的问题</p>\n<p>为了解决异步加载模块的问题，<code>AMD(https://github.com/amdjs/amdjs-api/wiki)</code>  和 <code>CMD</code> 通过不同的方式实现异步加载模块：</p>\n<p>AMD   :  相关库： <code>requireJs</code></p>\n<p>写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>, [<span class=\"string\">\"dep1\"</span>, <span class=\"string\">\"dep2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1, d2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> someExportedValue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>, <span class=\"string\">\"../file\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, file</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>CMD:  相关库： <code>seaJs</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>).add;</span><br><span class=\"line\">  exports.increment = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> add(val, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>除了 <code>AMD</code> 和 <code>CMD</code> 两个规范之外，使用<code>es6</code>  的模块加载是浏览器的另一种模块加载机制，也是未来的主流</p>\n<p>使用 <code>es6</code> 模块加载实现动态加载的方法： <code>import(module)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 导入 dayJs 模块</span><br><span class=\"line\">// import(...) 返回 promise</span><br><span class=\"line\">const dayJs = await import(&apos;dayjs&apos;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>browserify</code> 是如何实现的适配各种模块加载的呢 ？</p>\n<p>具体代码如下：</p>\n<p>按照 <a href=\"https://github.com/Matt-Esch/virtual-dom\" target=\"_blank\" rel=\"noopener\"><code>virtual-dom</code></a> 这个包为例：这个包的作用是生成虚拟dom对象</p>\n<p>执行 <code>package.json</code> 中的命令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dist\"</span>: <span class=\"string\">\"browserify  virtual-dom index.js &gt; dist/virtual-dom.js\"</span>,</span><br></pre></td></tr></table></figure>\n<p>打包时，使用 <code>browserify</code> 来处理， 最终打包完成后的文件输出到 <code>dist/virtual-dom.js</code> 中， 在打包后的代码中，我们可以看到如下的代码结构：</p>\n<p>处理之后的代码中：将原来文件中 <code>require(...)</code> 这样的文件引用替换为具体的执行函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自执行方法 f 为下面的 函数1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里根据不同的模块加载方式来导出 virtual-dom 这个包的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果是 CommonJs 规范，比如在 node 中使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里当执行 f() 之后，执行路径是：</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数1 作为参数 f 传入， 执行 f 函数1 执行 ==&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数1 执行 ==&gt; 返回函数 e （为自执行函数）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = f()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) &#123;</span><br><span class=\"line\">        define([], f)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> g;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = <span class=\"built_in\">window</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> global !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = global</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> self !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            g = self</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            g = <span class=\"keyword\">this</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 在不同环境下，给不同全局变量挂载 virtualDom 变量值为 f 函数执行后的结果</span></span><br><span class=\"line\">        g.virtualDom = f()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(</span><br><span class=\"line\">  <span class=\"comment\">// 函数1 作为参数 f 传入上面的参数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> define, <span class=\"built_in\">module</span>, exports;</span><br><span class=\"line\">    <span class=\"comment\">// 函数 e 也是一个自执行函数，接受三个参数：</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里参数的各个部分</span></span><br><span class=\"line\">    <span class=\"comment\">// t: 表示下面的对象1</span></span><br><span class=\"line\">    <span class=\"comment\">// n: 表示下面的对象2</span></span><br><span class=\"line\">    <span class=\"comment\">// r: 表示下面的对象3</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里返回的结构为 (function e(t, n, r) &#123;&#125;)(对象1,对象2,对象3)(4)</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数e为自执行函数，执行后返回函数 s， s 接受 4 作为参数，最终这里 return</span></span><br><span class=\"line\">    <span class=\"comment\">// 的结果为 s(4) 之后的返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">t, n, r</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">s</span>(<span class=\"params\">o, u</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!n[o]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!t[o]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> a = <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> == <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"built_in\">require</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!u &amp;&amp; a) <span class=\"keyword\">return</span> a(o, !<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i) <span class=\"keyword\">return</span> i(o, !<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Cannot find module '\"</span> + o + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> f.code = <span class=\"string\">\"MODULE_NOT_FOUND\"</span>, f</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> l = n[o] = &#123;</span><br><span class=\"line\">                    exports: &#123;&#125;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"comment\">// 这里的 t[o]0 表示每个模块的方法</span></span><br><span class=\"line\">                <span class=\"comment\">// 这里的 t[o]1 表示文件对象，文件对象的键名为引用的文件地址，建值为该文件在对象1中的key</span></span><br><span class=\"line\">                <span class=\"comment\">// 这里使用 call 会立即执行 t[o]0 这个方法</span></span><br><span class=\"line\">                t[o][<span class=\"number\">0</span>].call(l.exports, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 这里的 function (e) &#123;&#125;, l, l.exports </span></span><br><span class=\"line\">                    <span class=\"comment\">// 分别表示 function (require, module, exports) 中的 require, module,         </span></span><br><span class=\"line\">                    <span class=\"comment\">// exports 这三个参数</span></span><br><span class=\"line\">                    <span class=\"comment\">// 所以当调用 module.exports 的时候， 实际上 module.exports === l.exports</span></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> n = t[o][<span class=\"number\">1</span>][e];</span><br><span class=\"line\">                    <span class=\"comment\">// 获取到文件地址对象对应的值</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> s(n ? n : e)</span><br><span class=\"line\">                &#125;, l, l.exports, e, t, n, r)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 这里是 s 方法的返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> n[o].exports</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"keyword\">typeof</span> <span class=\"built_in\">require</span> == <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"built_in\">require</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> o = <span class=\"number\">0</span>; o &lt; r.length; o++) s(r[o]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\">    &#125;)(</span><br><span class=\"line\">      <span class=\"comment\">// 对象1</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      ===== 从之前的代码中抽取出来的一些代码 =====</span><br><span class=\"line\">      这个对象中的元素的结构都是一样的：</span><br><span class=\"line\">      对象的键key为数字，表示当前文件的标识</span><br><span class=\"line\">      对象的值是一个数组， 这个数组中有两个元素，一个元素是 <span class=\"string\">`function(require, module, exports) &#123;&#125;`</span> \t\t\t方法包裹的文件内的方法，另外一个元素是上面文件中使用 <span class=\"built_in\">require</span> 引用的文件路径和文件标识对象</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"comment\">// 为什么这里要先进行处理呢 ？ 因为可以认为这里是程序的主入口</span></span><br><span class=\"line\">      <span class=\"comment\">// 分析程序先从这里进入开始分析</span></span><br><span class=\"line\">      <span class=\"number\">4</span>: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">require, module, exports</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> diff = <span class=\"built_in\">require</span>(<span class=\"string\">\"./diff.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> patch = <span class=\"built_in\">require</span>(<span class=\"string\">\"./patch.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> h = <span class=\"built_in\">require</span>(<span class=\"string\">\"./h.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> create = <span class=\"built_in\">require</span>(<span class=\"string\">\"./create-element.js\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> VNode = <span class=\"built_in\">require</span>(<span class=\"string\">'./vnode/vnode.js'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> VText = <span class=\"built_in\">require</span>(<span class=\"string\">'./vnode/vtext.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">          diff: diff,</span><br><span class=\"line\">          patch: patch,</span><br><span class=\"line\">          h: h,</span><br><span class=\"line\">          create: create,</span><br><span class=\"line\">          VNode: VNode,</span><br><span class=\"line\">          VText: VText</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"./create-element.js\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./diff.js\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./h.js\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./patch.js\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./vnode/vnode.js\"</span>: <span class=\"number\">31</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./vnode/vtext.js\"</span>: <span class=\"number\">33</span></span><br><span class=\"line\">      &#125;],</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    <span class=\"comment\">// 对象2</span></span><br><span class=\"line\">    &#123;&#125;, </span><br><span class=\"line\">    <span class=\"comment\">// 对象3</span></span><br><span class=\"line\">    [<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 这里的参数 （4） 实际上是 上面函数 s 接受的参数</span></span><br><span class=\"line\">   )(<span class=\"number\">4</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n"},{"title":"函数节流","date":"2017-08-26T02:02:34.000Z","_content":"\n#### 函数节流\n\n代码如下:\n\n```\nvar processor = {\n  timeoutId: null,\n  preformProcessing: function () {\n    //实际上要进行执行的代码\n  }，\n  process: function () {\n    clearTimeout(this.timeoutId);\n    var that = this;\n    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 \n    this.timeoutId = setTimeout(function () {\n      that.preformProcessing();\n    }, 100)\n  }\n}\nprocessor.process() // 开始执行函数\n```\n\n使用函数节流的思想是：\n\n假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，`process` 函数会首先清除延时器，重新开始进行延时操作，\n\n为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：\n\n```\nfunction throttle (method, context) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function () {\n  \t\tmethod.call(context)\n  },100)\n}\n```\n\n定时器使用 `call` 方法实现在适当的环境下执行函数，如果传入的 `context` 为空，那么就会在全局作用域中执行函数。\n\n\n\n#### 总结\n\n使用函数节流用来防止函数在一定时间内多次被触发操作。\n\nsetTimeout内的 `this` 指向值：\n\n```\nvar timer = setTimeout(function () {\n\tconsole.log(this) // window\n}, 2000);\ntimer;\n```\n\n因为使用 setTimeout  `this` 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。","source":"_posts/函数节流.md","raw":"---\ntitle: 函数节流\ndate: 2017-08-26 10:02:34\ntags: '节流'\ncategories: '代码集'\n---\n\n#### 函数节流\n\n代码如下:\n\n```\nvar processor = {\n  timeoutId: null,\n  preformProcessing: function () {\n    //实际上要进行执行的代码\n  }，\n  process: function () {\n    clearTimeout(this.timeoutId);\n    var that = this;\n    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 \n    this.timeoutId = setTimeout(function () {\n      that.preformProcessing();\n    }, 100)\n  }\n}\nprocessor.process() // 开始执行函数\n```\n\n使用函数节流的思想是：\n\n假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，`process` 函数会首先清除延时器，重新开始进行延时操作，\n\n为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：\n\n```\nfunction throttle (method, context) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function () {\n  \t\tmethod.call(context)\n  },100)\n}\n```\n\n定时器使用 `call` 方法实现在适当的环境下执行函数，如果传入的 `context` 为空，那么就会在全局作用域中执行函数。\n\n\n\n#### 总结\n\n使用函数节流用来防止函数在一定时间内多次被触发操作。\n\nsetTimeout内的 `this` 指向值：\n\n```\nvar timer = setTimeout(function () {\n\tconsole.log(this) // window\n}, 2000);\ntimer;\n```\n\n因为使用 setTimeout  `this` 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。","slug":"函数节流","published":1,"updated":"2020-09-14T06:36:25.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8q004yi2osexwa7qjm","content":"<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var processor = &#123;</span><br><span class=\"line\">  timeoutId: null,</span><br><span class=\"line\">  preformProcessing: function () &#123;</span><br><span class=\"line\">    //实际上要进行执行的代码</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  process: function () &#123;</span><br><span class=\"line\">    clearTimeout(this.timeoutId);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 </span><br><span class=\"line\">    this.timeoutId = setTimeout(function () &#123;</span><br><span class=\"line\">      that.preformProcessing();</span><br><span class=\"line\">    &#125;, 100)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processor.process() // 开始执行函数</span><br></pre></td></tr></table></figure>\n<p>使用函数节流的思想是：</p>\n<p>假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，<code>process</code> 函数会首先清除延时器，重新开始进行延时操作，</p>\n<p>为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (method, context) &#123;</span><br><span class=\"line\">  clearTimeout(method.tId);</span><br><span class=\"line\">  method.tId = setTimeout(function () &#123;</span><br><span class=\"line\">  \t\tmethod.call(context)</span><br><span class=\"line\">  &#125;,100)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时器使用 <code>call</code> 方法实现在适当的环境下执行函数，如果传入的 <code>context</code> 为空，那么就会在全局作用域中执行函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用函数节流用来防止函数在一定时间内多次被触发操作。</p>\n<p>setTimeout内的 <code>this</code> 指向值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = setTimeout(function () &#123;</span><br><span class=\"line\">\tconsole.log(this) // window</span><br><span class=\"line\">&#125;, 2000);</span><br><span class=\"line\">timer;</span><br></pre></td></tr></table></figure>\n<p>因为使用 setTimeout  <code>this</code> 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var processor = &#123;</span><br><span class=\"line\">  timeoutId: null,</span><br><span class=\"line\">  preformProcessing: function () &#123;</span><br><span class=\"line\">    //实际上要进行执行的代码</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  process: function () &#123;</span><br><span class=\"line\">    clearTimeout(this.timeoutId);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 </span><br><span class=\"line\">    this.timeoutId = setTimeout(function () &#123;</span><br><span class=\"line\">      that.preformProcessing();</span><br><span class=\"line\">    &#125;, 100)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processor.process() // 开始执行函数</span><br></pre></td></tr></table></figure>\n<p>使用函数节流的思想是：</p>\n<p>假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，<code>process</code> 函数会首先清除延时器，重新开始进行延时操作，</p>\n<p>为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (method, context) &#123;</span><br><span class=\"line\">  clearTimeout(method.tId);</span><br><span class=\"line\">  method.tId = setTimeout(function () &#123;</span><br><span class=\"line\">  \t\tmethod.call(context)</span><br><span class=\"line\">  &#125;,100)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时器使用 <code>call</code> 方法实现在适当的环境下执行函数，如果传入的 <code>context</code> 为空，那么就会在全局作用域中执行函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用函数节流用来防止函数在一定时间内多次被触发操作。</p>\n<p>setTimeout内的 <code>this</code> 指向值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = setTimeout(function () &#123;</span><br><span class=\"line\">\tconsole.log(this) // window</span><br><span class=\"line\">&#125;, 2000);</span><br><span class=\"line\">timer;</span><br></pre></td></tr></table></figure>\n<p>因为使用 setTimeout  <code>this</code> 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。</p>\n"},{"title":"前端路由的实现","date":"2019-01-12T08:44:49.000Z","_content":"\n## 前端路由的两种实现方式\n\n### 路由是什么？\n\n路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。\n\n对于前端应用， 路由可以分为前端路由以及后端路由两种类型。\n\n#### 后端路由：\n\n在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：\n\n优点：\n\n- 有利于 SEO 优化。\n- 首屏加载速度快。\n\n缺点：\n\n- 每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。\n\n#### 前端路由：\n\n前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。\n\n优点： \n\n- 除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。\n- 组件的复用度高， 提高页面加载性能。\n- 前后端分离开发。\n- 当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。\n\n缺点： \n\n- 首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。\n- SEO 性能差。\n- 首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。\n\n### 前端路由的实现方式：\n\n更新视图但不重新请求页面时前端路由的核心之一。\n\n实现前端路由主要有两种模式， hash 以及 history 模式。\n\n\n\n#### hash： \n\nhash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  `#` 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。\n\nhash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。\n\n可以通过使用监听 `hashchange` 监听 hash 值的改变：\n\n```javascript\nwindow.addEventListener('hashchange', func, false);\n```\n\n这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。\n\n##### history：\n\nhistory 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。\n\n>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口\n\nwindow.history 提供了一些方法用于操作浏览器的页面行为：\n\n`window.history.back();` : url 回退， 类似于点击浏览器上方的回退按钮。\n\n`window.history.forward()`; url 前进， 类似于点击浏览器上方的前进按钮。\n\n`window.history.go(1)`: 前进到下一个页面。与 forward 相同。\n\n`window.history.go(-1):` 回退到上一个页面， 和 back 相同。\n\n 在 HTML5 中， 新增了两个新的 API： `pushState` 和 `replaceState`.\n\n```javascript\nwindow.history.pushState(state, title, url);\nwindow.history.replaceState(state, title, url);\n```\n\n使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。\n\n\n\n这两个 api 都有三个参数：\n\n- 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。\n- 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。\n- 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。\n\n使用 `pushState` 用于增加一条新的历史记录， 使用 `replaceState` 将会替换掉当前的历史记录。\n\n当活动历史记录中的条目更改的时候， 将会触发 `popstate`  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 `pushState` 或者 `replaceState` 中传入的参数 `state`\n\n```javascript\nconst state = { bar: 'foo' };\nwindow.history.pushState(state, '', 'route');\nwindow.addEventListener('popstate', function (e) {\n  console.log('state', e.state); // { bar: 'foo' }\n});\n```\n\n##### 两种路由实现方式的区别：\n\n- 使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 `#` 号之后的数值。\n- 使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。\n- 在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。","source":"_posts/前端路由的实现方式.md","raw":"---\ntitle: 前端路由的实现\ndate: 2019-01-12 16:44:49\ntags: route\ncategories: js\n\n---\n\n## 前端路由的两种实现方式\n\n### 路由是什么？\n\n路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。\n\n对于前端应用， 路由可以分为前端路由以及后端路由两种类型。\n\n#### 后端路由：\n\n在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：\n\n优点：\n\n- 有利于 SEO 优化。\n- 首屏加载速度快。\n\n缺点：\n\n- 每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。\n\n#### 前端路由：\n\n前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。\n\n优点： \n\n- 除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。\n- 组件的复用度高， 提高页面加载性能。\n- 前后端分离开发。\n- 当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。\n\n缺点： \n\n- 首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。\n- SEO 性能差。\n- 首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。\n\n### 前端路由的实现方式：\n\n更新视图但不重新请求页面时前端路由的核心之一。\n\n实现前端路由主要有两种模式， hash 以及 history 模式。\n\n\n\n#### hash： \n\nhash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  `#` 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。\n\nhash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。\n\n可以通过使用监听 `hashchange` 监听 hash 值的改变：\n\n```javascript\nwindow.addEventListener('hashchange', func, false);\n```\n\n这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。\n\n##### history：\n\nhistory 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。\n\n>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口\n\nwindow.history 提供了一些方法用于操作浏览器的页面行为：\n\n`window.history.back();` : url 回退， 类似于点击浏览器上方的回退按钮。\n\n`window.history.forward()`; url 前进， 类似于点击浏览器上方的前进按钮。\n\n`window.history.go(1)`: 前进到下一个页面。与 forward 相同。\n\n`window.history.go(-1):` 回退到上一个页面， 和 back 相同。\n\n 在 HTML5 中， 新增了两个新的 API： `pushState` 和 `replaceState`.\n\n```javascript\nwindow.history.pushState(state, title, url);\nwindow.history.replaceState(state, title, url);\n```\n\n使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。\n\n\n\n这两个 api 都有三个参数：\n\n- 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。\n- 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。\n- 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。\n\n使用 `pushState` 用于增加一条新的历史记录， 使用 `replaceState` 将会替换掉当前的历史记录。\n\n当活动历史记录中的条目更改的时候， 将会触发 `popstate`  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 `pushState` 或者 `replaceState` 中传入的参数 `state`\n\n```javascript\nconst state = { bar: 'foo' };\nwindow.history.pushState(state, '', 'route');\nwindow.addEventListener('popstate', function (e) {\n  console.log('state', e.state); // { bar: 'foo' }\n});\n```\n\n##### 两种路由实现方式的区别：\n\n- 使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 `#` 号之后的数值。\n- 使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。\n- 在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。","slug":"前端路由的实现方式","published":1,"updated":"2020-09-14T06:36:25.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8s0052i2oso5bu1acx","content":"<h2 id=\"前端路由的两种实现方式\"><a href=\"#前端路由的两种实现方式\" class=\"headerlink\" title=\"前端路由的两种实现方式\"></a>前端路由的两种实现方式</h2><h3 id=\"路由是什么？\"><a href=\"#路由是什么？\" class=\"headerlink\" title=\"路由是什么？\"></a>路由是什么？</h3><p>路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。</p>\n<p>对于前端应用， 路由可以分为前端路由以及后端路由两种类型。</p>\n<h4 id=\"后端路由：\"><a href=\"#后端路由：\" class=\"headerlink\" title=\"后端路由：\"></a>后端路由：</h4><p>在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>有利于 SEO 优化。</li>\n<li>首屏加载速度快。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。</li>\n</ul>\n<h4 id=\"前端路由：\"><a href=\"#前端路由：\" class=\"headerlink\" title=\"前端路由：\"></a>前端路由：</h4><p>前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。</p>\n<p>优点： </p>\n<ul>\n<li>除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。</li>\n<li>组件的复用度高， 提高页面加载性能。</li>\n<li>前后端分离开发。</li>\n<li>当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。</li>\n</ul>\n<p>缺点： </p>\n<ul>\n<li>首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。</li>\n<li>SEO 性能差。</li>\n<li>首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。</li>\n</ul>\n<h3 id=\"前端路由的实现方式：\"><a href=\"#前端路由的实现方式：\" class=\"headerlink\" title=\"前端路由的实现方式：\"></a>前端路由的实现方式：</h3><p>更新视图但不重新请求页面时前端路由的核心之一。</p>\n<p>实现前端路由主要有两种模式， hash 以及 history 模式。</p>\n<h4 id=\"hash：\"><a href=\"#hash：\" class=\"headerlink\" title=\"hash：\"></a>hash：</h4><p>hash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  <code>#</code> 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。</p>\n<p>hash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。</p>\n<p>可以通过使用监听 <code>hashchange</code> 监听 hash 值的改变：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, func, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。</p>\n<h5 id=\"history：\"><a href=\"#history：\" class=\"headerlink\" title=\"history：\"></a>history：</h5><p>history 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。</p>\n<blockquote>\n<p>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口</p>\n</blockquote>\n<p>window.history 提供了一些方法用于操作浏览器的页面行为：</p>\n<p><code>window.history.back();</code> : url 回退， 类似于点击浏览器上方的回退按钮。</p>\n<p><code>window.history.forward()</code>; url 前进， 类似于点击浏览器上方的前进按钮。</p>\n<p><code>window.history.go(1)</code>: 前进到下一个页面。与 forward 相同。</p>\n<p><code>window.history.go(-1):</code> 回退到上一个页面， 和 back 相同。</p>\n<p> 在 HTML5 中， 新增了两个新的 API： <code>pushState</code> 和 <code>replaceState</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, title, url);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(state, title, url);</span><br></pre></td></tr></table></figure>\n<p>使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。</p>\n<p>这两个 api 都有三个参数：</p>\n<ul>\n<li>状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>\n<li>标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>\n<li>地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</li>\n</ul>\n<p>使用 <code>pushState</code> 用于增加一条新的历史记录， 使用 <code>replaceState</code> 将会替换掉当前的历史记录。</p>\n<p>当活动历史记录中的条目更改的时候， 将会触发 <code>popstate</code>  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 <code>pushState</code> 或者 <code>replaceState</code> 中传入的参数 <code>state</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'route'</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'state'</span>, e.state); <span class=\"comment\">// &#123; bar: 'foo' &#125;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"两种路由实现方式的区别：\"><a href=\"#两种路由实现方式的区别：\" class=\"headerlink\" title=\"两种路由实现方式的区别：\"></a>两种路由实现方式的区别：</h5><ul>\n<li>使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 <code>#</code> 号之后的数值。</li>\n<li>使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。</li>\n<li>在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端路由的两种实现方式\"><a href=\"#前端路由的两种实现方式\" class=\"headerlink\" title=\"前端路由的两种实现方式\"></a>前端路由的两种实现方式</h2><h3 id=\"路由是什么？\"><a href=\"#路由是什么？\" class=\"headerlink\" title=\"路由是什么？\"></a>路由是什么？</h3><p>路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。</p>\n<p>对于前端应用， 路由可以分为前端路由以及后端路由两种类型。</p>\n<h4 id=\"后端路由：\"><a href=\"#后端路由：\" class=\"headerlink\" title=\"后端路由：\"></a>后端路由：</h4><p>在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>有利于 SEO 优化。</li>\n<li>首屏加载速度快。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。</li>\n</ul>\n<h4 id=\"前端路由：\"><a href=\"#前端路由：\" class=\"headerlink\" title=\"前端路由：\"></a>前端路由：</h4><p>前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。</p>\n<p>优点： </p>\n<ul>\n<li>除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。</li>\n<li>组件的复用度高， 提高页面加载性能。</li>\n<li>前后端分离开发。</li>\n<li>当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。</li>\n</ul>\n<p>缺点： </p>\n<ul>\n<li>首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。</li>\n<li>SEO 性能差。</li>\n<li>首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。</li>\n</ul>\n<h3 id=\"前端路由的实现方式：\"><a href=\"#前端路由的实现方式：\" class=\"headerlink\" title=\"前端路由的实现方式：\"></a>前端路由的实现方式：</h3><p>更新视图但不重新请求页面时前端路由的核心之一。</p>\n<p>实现前端路由主要有两种模式， hash 以及 history 模式。</p>\n<h4 id=\"hash：\"><a href=\"#hash：\" class=\"headerlink\" title=\"hash：\"></a>hash：</h4><p>hash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  <code>#</code> 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。</p>\n<p>hash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。</p>\n<p>可以通过使用监听 <code>hashchange</code> 监听 hash 值的改变：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, func, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。</p>\n<h5 id=\"history：\"><a href=\"#history：\" class=\"headerlink\" title=\"history：\"></a>history：</h5><p>history 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。</p>\n<blockquote>\n<p>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口</p>\n</blockquote>\n<p>window.history 提供了一些方法用于操作浏览器的页面行为：</p>\n<p><code>window.history.back();</code> : url 回退， 类似于点击浏览器上方的回退按钮。</p>\n<p><code>window.history.forward()</code>; url 前进， 类似于点击浏览器上方的前进按钮。</p>\n<p><code>window.history.go(1)</code>: 前进到下一个页面。与 forward 相同。</p>\n<p><code>window.history.go(-1):</code> 回退到上一个页面， 和 back 相同。</p>\n<p> 在 HTML5 中， 新增了两个新的 API： <code>pushState</code> 和 <code>replaceState</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, title, url);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(state, title, url);</span><br></pre></td></tr></table></figure>\n<p>使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。</p>\n<p>这两个 api 都有三个参数：</p>\n<ul>\n<li>状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>\n<li>标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>\n<li>地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</li>\n</ul>\n<p>使用 <code>pushState</code> 用于增加一条新的历史记录， 使用 <code>replaceState</code> 将会替换掉当前的历史记录。</p>\n<p>当活动历史记录中的条目更改的时候， 将会触发 <code>popstate</code>  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 <code>pushState</code> 或者 <code>replaceState</code> 中传入的参数 <code>state</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'route'</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'state'</span>, e.state); <span class=\"comment\">// &#123; bar: 'foo' &#125;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"两种路由实现方式的区别：\"><a href=\"#两种路由实现方式的区别：\" class=\"headerlink\" title=\"两种路由实现方式的区别：\"></a>两种路由实现方式的区别：</h5><ul>\n<li>使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 <code>#</code> 号之后的数值。</li>\n<li>使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。</li>\n<li>在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。</li>\n</ul>\n"},{"title":"实现machine函数","date":"2019-04-01T09:54:06.000Z","_content":"\n机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。\n\n{% asset_img  mechine.png%}\n\n实现一个类似于 `machine` 的函数：\n\n```js\n/**\n * \n * @param {String} machineName 机器名称\n * @description 机器函数\n */\nfunction machine(machineName) {\n  let fnList = [];\n  fnList.push(() => {\n    console.log(`start ${machineName}`);\n  });\n  const doFnMap = {\n    do(doName) {\n      console.log(`do ${doName}`);\n    },\n    // 执行机器函数\n    execute() {\n      const handleFn = () => {\n        if (fnList.length > 0) {\n          const fnNow = fnList.shift();\n          const fnVal = fnNow();\n          if (fnVal instanceof Promise) {\n            fnVal.then(() => {\n              handleFn();\n            });\n          } else {\n            handleFn();\n          }\n        } else {\n          console.log(`end ${machineName}`);\n        }\n      };\n      handleFn();\n    },\n    // 执行机器前等待时间\n    waitFirst(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait first ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    waitEnd(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait end ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    // 执行过程中等待时间\n    wait: (time) => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          console.log(`wait ${time}s`);\n          resolve();\n        }, time * 1000)\n      })\n    }\n  };\n  let proxy;\n  // proxy 代理拦截\n  // 获取到需要执行的函数名之后，将其放入执行函数队列数组\n  proxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n  return proxy;\n}\n```\n\n执行效果如下：\n\n```js\n machine('machine').waitFirst(3).do('eat').do('run').wait(5).do('sleep').execute()\n```\n\n执行结果：\n\n{% asset_img  imageconsole.png%}\n\n![](实现machine函数/imageconsole.png)\n\n上面代码的主要思路是， 通过使用 `proxy` 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 `execute` 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 `wait`或者 `waitFirst` 函数的时候， 等待 `wait` 或者 `waitFirst` 函数执行完毕之后执行：\n\n```js\n// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise\nif (fnVal instanceof Promise) {\n  fnVal.then(() => {\n  \thandleFn();\n  });\n} else {\n  handleFn();\n}\n```\n\n在执行过程中， 当调用执行方法的时候， 在代码中通过使用 `proxy` 进行拦截处理：\n\n```js\nproxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n```\n\n使用 `Proxy` 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 `proxy` 中的 `get` 方法，设置了当调用 `doFnMap` 中的方法的时候， 调用`get` 方法，在 `get` 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。\n\n","source":"_posts/实现machine函数.md","raw":"---\ntitle: 实现machine函数\ndate: 2019-04-01 17:54:06\ntags: machine 函数\ncategories: 代码集\n---\n\n机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。\n\n{% asset_img  mechine.png%}\n\n实现一个类似于 `machine` 的函数：\n\n```js\n/**\n * \n * @param {String} machineName 机器名称\n * @description 机器函数\n */\nfunction machine(machineName) {\n  let fnList = [];\n  fnList.push(() => {\n    console.log(`start ${machineName}`);\n  });\n  const doFnMap = {\n    do(doName) {\n      console.log(`do ${doName}`);\n    },\n    // 执行机器函数\n    execute() {\n      const handleFn = () => {\n        if (fnList.length > 0) {\n          const fnNow = fnList.shift();\n          const fnVal = fnNow();\n          if (fnVal instanceof Promise) {\n            fnVal.then(() => {\n              handleFn();\n            });\n          } else {\n            handleFn();\n          }\n        } else {\n          console.log(`end ${machineName}`);\n        }\n      };\n      handleFn();\n    },\n    // 执行机器前等待时间\n    waitFirst(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait first ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    waitEnd(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait end ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    // 执行过程中等待时间\n    wait: (time) => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          console.log(`wait ${time}s`);\n          resolve();\n        }, time * 1000)\n      })\n    }\n  };\n  let proxy;\n  // proxy 代理拦截\n  // 获取到需要执行的函数名之后，将其放入执行函数队列数组\n  proxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n  return proxy;\n}\n```\n\n执行效果如下：\n\n```js\n machine('machine').waitFirst(3).do('eat').do('run').wait(5).do('sleep').execute()\n```\n\n执行结果：\n\n{% asset_img  imageconsole.png%}\n\n![](实现machine函数/imageconsole.png)\n\n上面代码的主要思路是， 通过使用 `proxy` 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 `execute` 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 `wait`或者 `waitFirst` 函数的时候， 等待 `wait` 或者 `waitFirst` 函数执行完毕之后执行：\n\n```js\n// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise\nif (fnVal instanceof Promise) {\n  fnVal.then(() => {\n  \thandleFn();\n  });\n} else {\n  handleFn();\n}\n```\n\n在执行过程中， 当调用执行方法的时候， 在代码中通过使用 `proxy` 进行拦截处理：\n\n```js\nproxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n```\n\n使用 `Proxy` 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 `proxy` 中的 `get` 方法，设置了当调用 `doFnMap` 中的方法的时候， 调用`get` 方法，在 `get` 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。\n\n","slug":"实现machine函数","published":1,"updated":"2020-09-14T06:36:25.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8u0055i2osi2sqwifo","content":"<p>机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。</p>\n<img src=\"/2019/04/01/实现machine函数/mechine.png\">\n<p>实现一个类似于 <code>machine</code> 的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;String&#125;</span> </span>machineName 机器名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>机器函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">machine</span>(<span class=\"params\">machineName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fnList = [];</span><br><span class=\"line\">  fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`start <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doFnMap = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(doName) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`do <span class=\"subst\">$&#123;doName&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器函数</span></span><br><span class=\"line\">    execute() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fnList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnNow = fnList.shift();</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnVal = fnNow();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              handleFn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handleFn();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`end <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      handleFn();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器前等待时间</span></span><br><span class=\"line\">    waitFirst(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait first <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitEnd(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait end <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行过程中等待时间</span></span><br><span class=\"line\">    wait: <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy;</span><br><span class=\"line\">  <span class=\"comment\">// proxy 代理拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取到需要执行的函数名之后，将其放入执行函数队列数组</span></span><br><span class=\"line\">  proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function (target, property) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine(<span class=\"string\">'machine'</span>).waitFirst(<span class=\"number\">3</span>).do(<span class=\"string\">'eat'</span>).do(<span class=\"string\">'run'</span>).wait(<span class=\"number\">5</span>).do(<span class=\"string\">'sleep'</span>).execute()</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<img src=\"/2019/04/01/实现machine函数/imageconsole.png\">\n<p><img src=\"实现machine函数/imageconsole.png\" alt></p>\n<p>上面代码的主要思路是， 通过使用 <code>proxy</code> 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 <code>execute</code> 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 <code>wait</code>或者 <code>waitFirst</code> 函数的时候， 等待 <code>wait</code> 或者 <code>waitFirst</code> 函数执行完毕之后执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">  fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  \thandleFn();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  handleFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行过程中， 当调用执行方法的时候， 在代码中通过使用 <code>proxy</code> 进行拦截处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function (target, property) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Proxy</code> 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 <code>proxy</code> 中的 <code>get</code> 方法，设置了当调用 <code>doFnMap</code> 中的方法的时候， 调用<code>get</code> 方法，在 <code>get</code> 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。</p>\n<img src=\"/2019/04/01/实现machine函数/mechine.png\">\n<p>实现一个类似于 <code>machine</code> 的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;String&#125;</span> </span>machineName 机器名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>机器函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">machine</span>(<span class=\"params\">machineName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fnList = [];</span><br><span class=\"line\">  fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`start <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doFnMap = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(doName) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`do <span class=\"subst\">$&#123;doName&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器函数</span></span><br><span class=\"line\">    execute() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fnList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnNow = fnList.shift();</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnVal = fnNow();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              handleFn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handleFn();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`end <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      handleFn();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器前等待时间</span></span><br><span class=\"line\">    waitFirst(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait first <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitEnd(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait end <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行过程中等待时间</span></span><br><span class=\"line\">    wait: <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy;</span><br><span class=\"line\">  <span class=\"comment\">// proxy 代理拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取到需要执行的函数名之后，将其放入执行函数队列数组</span></span><br><span class=\"line\">  proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function (target, property) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine(<span class=\"string\">'machine'</span>).waitFirst(<span class=\"number\">3</span>).do(<span class=\"string\">'eat'</span>).do(<span class=\"string\">'run'</span>).wait(<span class=\"number\">5</span>).do(<span class=\"string\">'sleep'</span>).execute()</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<img src=\"/2019/04/01/实现machine函数/imageconsole.png\">\n<p><img src=\"实现machine函数/imageconsole.png\" alt></p>\n<p>上面代码的主要思路是， 通过使用 <code>proxy</code> 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 <code>execute</code> 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 <code>wait</code>或者 <code>waitFirst</code> 函数的时候， 等待 <code>wait</code> 或者 <code>waitFirst</code> 函数执行完毕之后执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">  fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  \thandleFn();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  handleFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行过程中， 当调用执行方法的时候， 在代码中通过使用 <code>proxy</code> 进行拦截处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function (target, property) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Proxy</code> 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 <code>proxy</code> 中的 <code>get</code> 方法，设置了当调用 <code>doFnMap</code> 中的方法的时候， 调用<code>get</code> 方法，在 <code>get</code> 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。</p>\n"},{"title":"对象复制","date":"2017-11-04T04:39:37.000Z","_content":"\n#### 复制对象\n\n对于变量进行复制的代码如下:\n\n```javascript\nfunction clone(obj) {\n  if (obj && typeof obj === 'object') {\n    let cloneObj = Object.prototype.toString.call(obj).slice(8, -1) === 'Array' ? [] : {};\n    for (let prop in obj) {\n      if (obj[prop] && typeof obj[prop] === 'object') {\n        cloneObj[prop] = clone(obj[prop]);\n      } else {\n        cloneObj[prop] = obj[prop];    \n      }\n    }\n    return cloneObj;\n  } else {\n    return obj;\n  }\n}\n```\n\n#### 要点\n\n1. 使用 `Object.prototype.toString.call()` 来判断数据是属于对象的哪一种子类型\n\n   ```\n   let a = [];\n   typeof a; // object\n   Object.prototype.toString.call(a) // \"[object, Array]\"\n   Object.prototype.toString.call(a).slice(8, -1) // \"Array\"\n   ```\n\n2. 在 js 中 `null` 代表假值, 并且 `typeof null` 为 `object`\n\n   检测类型为不为 `null`\n\n   ```javascript\n   if (typeof obj === 'object' && obj) {\n   }\n   // 对于如果检查到的类型为 null 的时候\n   if (obj === null) {\n   // do something      \n   }\n   ```\n\n3.  `null` 表示类型尚未定义，表示未定义的类型， `undefined` 表示值没有被声明\n\n#### 获取class\n\n使用原生的方法获取到 `class` 值的方法如下:\n\n```javascript\nfunction getClass(parent, sClass) {\n  let elements = parent.getElementsByTagName('*');\n  let eleResult = [];\n  // 使用 '\\\\b' 进行匹配一个单词的边界\n  let classReg = new RegExp('\\\\b' + sClass + '\\\\b', i);\n  for (let i = 0; i < elements.length; i++) {\n    if (classReg.test(elements[i].className)) {\n      eleResult.push(elements[i]);\n    }\n  }\n  return eleResult;\n}\n```\n\n","source":"_posts/对象复制.md","raw":"---\ntitle: 对象复制\ndate: 2017-11-04 12:39:37\ntags: 对象复制\ncategories: '代码集'\n---\n\n#### 复制对象\n\n对于变量进行复制的代码如下:\n\n```javascript\nfunction clone(obj) {\n  if (obj && typeof obj === 'object') {\n    let cloneObj = Object.prototype.toString.call(obj).slice(8, -1) === 'Array' ? [] : {};\n    for (let prop in obj) {\n      if (obj[prop] && typeof obj[prop] === 'object') {\n        cloneObj[prop] = clone(obj[prop]);\n      } else {\n        cloneObj[prop] = obj[prop];    \n      }\n    }\n    return cloneObj;\n  } else {\n    return obj;\n  }\n}\n```\n\n#### 要点\n\n1. 使用 `Object.prototype.toString.call()` 来判断数据是属于对象的哪一种子类型\n\n   ```\n   let a = [];\n   typeof a; // object\n   Object.prototype.toString.call(a) // \"[object, Array]\"\n   Object.prototype.toString.call(a).slice(8, -1) // \"Array\"\n   ```\n\n2. 在 js 中 `null` 代表假值, 并且 `typeof null` 为 `object`\n\n   检测类型为不为 `null`\n\n   ```javascript\n   if (typeof obj === 'object' && obj) {\n   }\n   // 对于如果检查到的类型为 null 的时候\n   if (obj === null) {\n   // do something      \n   }\n   ```\n\n3.  `null` 表示类型尚未定义，表示未定义的类型， `undefined` 表示值没有被声明\n\n#### 获取class\n\n使用原生的方法获取到 `class` 值的方法如下:\n\n```javascript\nfunction getClass(parent, sClass) {\n  let elements = parent.getElementsByTagName('*');\n  let eleResult = [];\n  // 使用 '\\\\b' 进行匹配一个单词的边界\n  let classReg = new RegExp('\\\\b' + sClass + '\\\\b', i);\n  for (let i = 0; i < elements.length; i++) {\n    if (classReg.test(elements[i].className)) {\n      eleResult.push(elements[i]);\n    }\n  }\n  return eleResult;\n}\n```\n\n","slug":"对象复制","published":1,"updated":"2020-09-14T06:36:25.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8w0058i2os6wp54htc","content":"<h4 id=\"复制对象\"><a href=\"#复制对象\" class=\"headerlink\" title=\"复制对象\"></a>复制对象</h4><p>对于变量进行复制的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneObj = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[prop] &amp;&amp; <span class=\"keyword\">typeof</span> obj[prop] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        cloneObj[prop] = clone(obj[prop]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[prop] = obj[prop];    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><ol>\n<li><p>使用 <code>Object.prototype.toString.call()</code> 来判断数据是属于对象的哪一种子类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [];</span><br><span class=\"line\">typeof a; // object</span><br><span class=\"line\">Object.prototype.toString.call(a) // &quot;[object, Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(a).slice(8, -1) // &quot;Array&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 js 中 <code>null</code> 代表假值, 并且 <code>typeof null</code> 为 <code>object</code></p>\n<p>检测类型为不为 <code>null</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 对于如果检查到的类型为 null 的时候</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something      </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>null</code> 表示类型尚未定义，表示未定义的类型， <code>undefined</code> 表示值没有被声明</p>\n</li>\n</ol>\n<h4 id=\"获取class\"><a href=\"#获取class\" class=\"headerlink\" title=\"获取class\"></a>获取class</h4><p>使用原生的方法获取到 <code>class</code> 值的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClass</span>(<span class=\"params\">parent, sClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elements = parent.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleResult = [];</span><br><span class=\"line\">  <span class=\"comment\">// 使用 '\\\\b' 进行匹配一个单词的边界</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> classReg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span> + sClass + <span class=\"string\">'\\\\b'</span>, i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classReg.test(elements[i].className)) &#123;</span><br><span class=\"line\">      eleResult.push(elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eleResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"复制对象\"><a href=\"#复制对象\" class=\"headerlink\" title=\"复制对象\"></a>复制对象</h4><p>对于变量进行复制的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneObj = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[prop] &amp;&amp; <span class=\"keyword\">typeof</span> obj[prop] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        cloneObj[prop] = clone(obj[prop]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[prop] = obj[prop];    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><ol>\n<li><p>使用 <code>Object.prototype.toString.call()</code> 来判断数据是属于对象的哪一种子类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [];</span><br><span class=\"line\">typeof a; // object</span><br><span class=\"line\">Object.prototype.toString.call(a) // &quot;[object, Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(a).slice(8, -1) // &quot;Array&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 js 中 <code>null</code> 代表假值, 并且 <code>typeof null</code> 为 <code>object</code></p>\n<p>检测类型为不为 <code>null</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 对于如果检查到的类型为 null 的时候</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something      </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>null</code> 表示类型尚未定义，表示未定义的类型， <code>undefined</code> 表示值没有被声明</p>\n</li>\n</ol>\n<h4 id=\"获取class\"><a href=\"#获取class\" class=\"headerlink\" title=\"获取class\"></a>获取class</h4><p>使用原生的方法获取到 <code>class</code> 值的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClass</span>(<span class=\"params\">parent, sClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elements = parent.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleResult = [];</span><br><span class=\"line\">  <span class=\"comment\">// 使用 '\\\\b' 进行匹配一个单词的边界</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> classReg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span> + sClass + <span class=\"string\">'\\\\b'</span>, i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classReg.test(elements[i].className)) &#123;</span><br><span class=\"line\">      eleResult.push(elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eleResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"排序算法","date":"2017-10-12T03:57:30.000Z","_content":"\n***\n\n补充关于空间复制度和时间复杂度的概念。\n\n### 冒泡排序\n\n使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。\n\n```javascript\nfunction bubbleSort (arr) {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    // 保证一轮循环之后 arr[i] 是 i 之后数组的最小值\n    for (let j = i + 1; j < len; j++) {\n    // 比较相邻两个的大小, 将较大的那个排到后面去\n    // 始终保证\n      if (arr[j] < arr[i]) {\n        // 使用 es6 结构赋值进行交换\n\t\tlet t = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = t;\n      }\n    }\n  }\n}\n```\n\n### 快速排序\n\n使用快速排序的基本原理是:\n\n算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。\n\n```javascript\n/*\n* @description quickSort 用于进行快速排序\n* @return {Array} 经过排序之后的数组\n*/\nfunction quicksort(arr) {\n  if (arr.length <= 1) {\n    return arr;    \n  }\n  let first = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < first) {\n      leftArr.push(arr[i]);  \n    }\n    if (arr[i] > first) {\n      rightArr.push(arr[i]);    \n    }\n  }\n  // 一层一层剥开我的心\n  // 一直一直进行递归~~\n  return [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);\n}\n```\n\n### 插入排序\n\n使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。\n\n```javascript\n/*\n* @description insertSort 用于进行插入排序\n* @param {Array} arr 进行排序的数组\n* @return {Array} arr 返回进过排序之后的数组\n*/\nfunction insertSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > temp) {\n        // 将大于 temp 的元素向后推一位\n        // 这些元素是之前已经被排好序的\n        arr[j + 1] = arr[j];\n        // 将元素插入到 arr[j] 的位置\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n\n\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2017-10-12 11:57:30\ntags: 算法\ncategories: '代码集'\n---\n\n***\n\n补充关于空间复制度和时间复杂度的概念。\n\n### 冒泡排序\n\n使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。\n\n```javascript\nfunction bubbleSort (arr) {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    // 保证一轮循环之后 arr[i] 是 i 之后数组的最小值\n    for (let j = i + 1; j < len; j++) {\n    // 比较相邻两个的大小, 将较大的那个排到后面去\n    // 始终保证\n      if (arr[j] < arr[i]) {\n        // 使用 es6 结构赋值进行交换\n\t\tlet t = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = t;\n      }\n    }\n  }\n}\n```\n\n### 快速排序\n\n使用快速排序的基本原理是:\n\n算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。\n\n```javascript\n/*\n* @description quickSort 用于进行快速排序\n* @return {Array} 经过排序之后的数组\n*/\nfunction quicksort(arr) {\n  if (arr.length <= 1) {\n    return arr;    \n  }\n  let first = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < first) {\n      leftArr.push(arr[i]);  \n    }\n    if (arr[i] > first) {\n      rightArr.push(arr[i]);    \n    }\n  }\n  // 一层一层剥开我的心\n  // 一直一直进行递归~~\n  return [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);\n}\n```\n\n### 插入排序\n\n使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。\n\n```javascript\n/*\n* @description insertSort 用于进行插入排序\n* @param {Array} arr 进行排序的数组\n* @return {Array} arr 返回进过排序之后的数组\n*/\nfunction insertSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > temp) {\n        // 将大于 temp 的元素向后推一位\n        // 这些元素是之前已经被排好序的\n        arr[j + 1] = arr[j];\n        // 将元素插入到 arr[j] 的位置\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n\n\n","slug":"排序算法","published":1,"updated":"2020-09-14T06:36:25.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8x005ci2os0snpqv4r","content":"<hr>\n<p>补充关于空间复制度和时间复杂度的概念。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证一轮循环之后 arr[i] 是 i 之后数组的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比较相邻两个的大小, 将较大的那个排到后面去</span></span><br><span class=\"line\">    <span class=\"comment\">// 始终保证</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 es6 结构赋值进行交换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>使用快速排序的基本原理是:</p>\n<p>算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description quickSort 用于进行快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; 经过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; first) &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; first) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 一层一层剥开我的心</span></span><br><span class=\"line\">  <span class=\"comment\">// 一直一直进行递归~~</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description insertSort 用于进行插入排序</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Array&#125; arr 进行排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; arr 返回进过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将大于 temp 的元素向后推一位</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些元素是之前已经被排好序的</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        <span class=\"comment\">// 将元素插入到 arr[j] 的位置</span></span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>补充关于空间复制度和时间复杂度的概念。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证一轮循环之后 arr[i] 是 i 之后数组的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比较相邻两个的大小, 将较大的那个排到后面去</span></span><br><span class=\"line\">    <span class=\"comment\">// 始终保证</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 es6 结构赋值进行交换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>使用快速排序的基本原理是:</p>\n<p>算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description quickSort 用于进行快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; 经过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; first) &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; first) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 一层一层剥开我的心</span></span><br><span class=\"line\">  <span class=\"comment\">// 一直一直进行递归~~</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description insertSort 用于进行插入排序</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Array&#125; arr 进行排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; arr 返回进过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将大于 temp 的元素向后推一位</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些元素是之前已经被排好序的</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        <span class=\"comment\">// 将元素插入到 arr[j] 的位置</span></span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据结构：栈和队列","date":"2019-09-28T09:05:33.000Z","_content":"\n## 栈\n\n栈是一种特殊的线性表，这种线性表仅允许在表尾（栈顶）进行插入和删除工作：\n\n将可以被插入和删除元素的位置称为`栈顶`， 将另一端称为 `栈底`， 如果栈没有任何的元素， 这个栈被称为 `空栈`；\n\n栈的数据元素的进出遵循后进先出的原则，简称为  *LIFO (Last In First Out)* 结构；\n\n栈的插入被称为入栈， 栈的删除被称为出栈， 在程序中我们可以将其称为 `push` 和 `pop`;\n\n在 js 中， 我们使用数组的 `push` 和 `pop` 方法模拟栈的入栈和出栈操作；\n\n### 栈的应用\n\n#### 递归\n\n我们将调用函数自身或者间接调用自身的函数称为 *递归*\n\n 在每一层递归的过程中， 我们需要存储当前调用函数的局部变量， 参数值等数据信息存储到栈中，当递归返回之后， 再将这些数据从栈中弹出数据\n\n#### 使用栈实现四则运算表达式\n\n如下面程序， 实现将一串运算表达式进行计算的代码：\n\n```js\n// 对于逆波兰法表示的后缀表达式计算求值\nfunction RPNcompute(mathStrStack) {\n  let stack = [];\n  for (let num of mathStrStack) {\n    if (Number.isNaN(+num)) {\n      const num1 = stack.pop();\n      const num2 = stack.pop();\n      const total = num2 + num + num1;\n      stack.push(eval(total));\n    } else {\n      stack.push(num);\n    }\n  }\n  return stack.pop();\n}\n\n// 将中缀表达式转为后缀表达式\nfunction toPostFixExpression(expression) {\n  let expressionArr = expression.split(' ');\n  let stack = [];\n  let outputStr = '';\n  // 处理符号入栈与出栈\n  function pushStack(s) {\n    let result = '';\n    if (!stack.length) {\n      stack.push(s);\n      return '';\n    };\n    while (stack.length) {\n      let stackTopData = stack.pop();\n      if (s === ')') {\n        if (stackTopData === '(') break;\n        result += stackTopData + ' ';\n      } else if (['+', '-', '*', '/'].includes(s)){\n        const isLower = ['+', '-'].includes(s);\n        // 当栈顶元素优先级大于等于当前入栈元素时， 栈顶元素依次出栈\n        if (['/', '*'].concat(isLower ? ['+', '-'] : []).includes(stackTopData)) {\n          result += stackTopData + ' ';\n          if (!stack.length) {\n            stack.push(s);\n            break;\n          };\n        } else {\n          stack.push(stackTopData);\n          stack.push(s);\n          break;\n        }\n      } else {\n        stack.push(stackTopData);\n        stack.push(s);\n        break;\n      }\n    }\n    return result;\n  }\n  for (let num of expressionArr) {\n    if (Number.isNaN(+num)) {\n      outputStr += pushStack(num);\n    } else {\n      outputStr += `${num} `;\n    }\n  }\n  return outputStr + stack.reverse().join(' ');\n}\n\n\nfunction compute(mathStr) {\n  let stackArr = toPostFixExpression(mathStr).split(' ');\n  return RPNcompute(stackArr);\n}\n// 示例：\ncompute('9 + ( 3 - 1 ) * 3 + 10 / 2');\n// 20\ncompute('9 + 3 * ( 2 + 2 / 2 ) - 10 / 5');\n// 16\n```\n\n关于 中缀表达式转后缀表达式（逆波兰）法规则如下:\n\n从左到右遍历中缀表达式的每个数字和符号，如果是数字那么就输出，成为后缀表达式的一部分，如果是符号， 那么判断该符号与栈顶符号的优先级，是右括号或者优先级低于等于栈顶符号， 那么栈顶符号依次出栈并输出，并将当前符号进栈， 一直到最终输出后缀表达式为止。\n\n运算符号优先级： 乘除 > 加减\n\n对于后缀表达式的计算规则如下：\n\n从左到右遍历后缀表达式的每个数字和符号，如果遇到数字那么就入栈，遇到是符号， 那么就将处于栈顶的两个数字出栈， 进行运算，并将运算结果入栈， 一直到最终获得到结果。\n\n## 队列\n\n> 队列是只允许在一端进行插入操作， 而在另一端进行删除操作的线性表\n\n队列遵循的是先进先出的线性表， 在程序设计中的应用， 比如我们在显示器上记事本上文字的输出。\n\n在日常生活中， 比如我们购买火车票时的排队。\n\n### 队列的线式存储结构\n\n在 js 中， 我们使用数组的 `push` 和 `shift(表头弹出)` 这两个 api 实现队列的模拟。\n\n#### 顺序存储\n\n使用顺序存储时，我们将队列数据元素按照顺序存储到数组中， 当我们想要对于队列进行出列操作时， 因为出列操作是在表头出列， 因此，出列数据元素后面的每一个数据都会向前移动一个元素位置， 这样会造成程序性能的损耗。\n\n{% asset_image image-20191002114710061-9988030.png%}\n\n![image-20191002114710061](数据结构：栈和队列/image-20191002114710061-9988030.png)\n\n这个时候的时间复杂度为  `O(n)`\n\n为了解决这个移动队列数据元素的问题， 我们可以引入两个指针： `front`: 指向队头元素， `rear`: 指向队尾元素的下一个位置\n\n当我们对于队列进行添加和删除元素的时候， 只要改变 `front` 和 `rear` 指针的位置就可以了， 不需要移动每个队列元素:\n\n```javascript\nfunction queue(queueLen) {\n  const queueArr = new Array(queueLen);\n  let front = 0;\n  let rear = 0;\n  this.out = function () {\n    queueArr[front] = undefined;\n    front ++;\n    return queueArr;\n  };\n  this.add = function (data) {\n    queueArr[rear] = data;\n    rear ++;\n    return queueArr;\n  }\n  return this;\n}\n```\n\n对于上面的代码， 存在一个问题是， 如果我们当删除数据时， 队列不往前移动， 那么当我们新增队列数据元素的时候， 可以会增加到规定的队列长度之外的元素：\n\n比如：\n\n```js\nconst queueList = queue(2);\n\nqueueList.add(1);\nqueueList.add(2);\nqueueList.out();\nconsole.log(queueList.add(3));\n// [ undefined, 2, 3 ]\n// 队列长度超出了我们规定的 2 的长度的队列长度\n```\n\n这个时候， 队列数据填充情况如下图所示：\n\n{% asset_image image-20191002141645991-9997006.png%}\n\n![image-20191002141645991](数据结构：栈和队列/image-20191002141645991-9997006.png)\n\n这个时候虽然添加的数据位置超出了队列的长度， 但是删除的队列的第 0 位 和 第 1 位元素却是空的， 我们的溢出是“假溢出”。\n\n我们思考， 如何能够利用删除之后的空间， 防止假溢出？\n\n#### **循环队列**\n\n循环队列相比上面的存储方法而言， 有一些不同， 主要是体现在  `rear` 指针的指向，`rear` 指针在队列初始化的时候指向下标 为 0 的位置,  当到达队列列尾的时候， `rear` 指针移动到队列列头\n\n```js\nfunction queue(queueSize) {\n  const queueArr = new Array(queueSize);\n  let front = 0;\n  let rear = 0;\n  this.out = function () {\n    if (front === rear) {\n      console.log('empty');\n      return;\n    };\n    queueArr[front] = undefined;\n    // 使用 %（取模）操作来进行归 0 操作\n    front = (front + 1) % queueSize;\n    return queueArr;\n  };\n  this.add = function (data) {\n    if (isFull()) {\n      console.log('full');\n      return;\n    };\n    queueArr[rear] = data;\n    rear = (rear + 1) % queueSize;\n    return queueArr;\n  }\n  this.queueLength = function () {\n    return (rear - front + queueSize) % queueSize;\n  }\n  function isFull() {\n    return (rear + 1) % queueSize === front;\n  }\n  return this;\n}\n\n```\n\n### 链式存储结构\n\n队列的链式存储结构其实就是单链表。与普通的单链表不同的是， 只能操作链表的头部和尾部节点，\n\n队列的链式存储结构被称为 `链队列`；\n\n### 总结\n\n当已知队列空间大小的情况下， 可以使用 `循环队列`， 否则， 如果不知道队列的长度， 使用 `链对列`\n\n","source":"_posts/数据结构：栈和队列.md","raw":"---\ntitle: 数据结构：栈和队列\ndate: 2019-09-28 17:05:33\ntags: 栈 和 队列\ncategories: 数据结构\n---\n\n## 栈\n\n栈是一种特殊的线性表，这种线性表仅允许在表尾（栈顶）进行插入和删除工作：\n\n将可以被插入和删除元素的位置称为`栈顶`， 将另一端称为 `栈底`， 如果栈没有任何的元素， 这个栈被称为 `空栈`；\n\n栈的数据元素的进出遵循后进先出的原则，简称为  *LIFO (Last In First Out)* 结构；\n\n栈的插入被称为入栈， 栈的删除被称为出栈， 在程序中我们可以将其称为 `push` 和 `pop`;\n\n在 js 中， 我们使用数组的 `push` 和 `pop` 方法模拟栈的入栈和出栈操作；\n\n### 栈的应用\n\n#### 递归\n\n我们将调用函数自身或者间接调用自身的函数称为 *递归*\n\n 在每一层递归的过程中， 我们需要存储当前调用函数的局部变量， 参数值等数据信息存储到栈中，当递归返回之后， 再将这些数据从栈中弹出数据\n\n#### 使用栈实现四则运算表达式\n\n如下面程序， 实现将一串运算表达式进行计算的代码：\n\n```js\n// 对于逆波兰法表示的后缀表达式计算求值\nfunction RPNcompute(mathStrStack) {\n  let stack = [];\n  for (let num of mathStrStack) {\n    if (Number.isNaN(+num)) {\n      const num1 = stack.pop();\n      const num2 = stack.pop();\n      const total = num2 + num + num1;\n      stack.push(eval(total));\n    } else {\n      stack.push(num);\n    }\n  }\n  return stack.pop();\n}\n\n// 将中缀表达式转为后缀表达式\nfunction toPostFixExpression(expression) {\n  let expressionArr = expression.split(' ');\n  let stack = [];\n  let outputStr = '';\n  // 处理符号入栈与出栈\n  function pushStack(s) {\n    let result = '';\n    if (!stack.length) {\n      stack.push(s);\n      return '';\n    };\n    while (stack.length) {\n      let stackTopData = stack.pop();\n      if (s === ')') {\n        if (stackTopData === '(') break;\n        result += stackTopData + ' ';\n      } else if (['+', '-', '*', '/'].includes(s)){\n        const isLower = ['+', '-'].includes(s);\n        // 当栈顶元素优先级大于等于当前入栈元素时， 栈顶元素依次出栈\n        if (['/', '*'].concat(isLower ? ['+', '-'] : []).includes(stackTopData)) {\n          result += stackTopData + ' ';\n          if (!stack.length) {\n            stack.push(s);\n            break;\n          };\n        } else {\n          stack.push(stackTopData);\n          stack.push(s);\n          break;\n        }\n      } else {\n        stack.push(stackTopData);\n        stack.push(s);\n        break;\n      }\n    }\n    return result;\n  }\n  for (let num of expressionArr) {\n    if (Number.isNaN(+num)) {\n      outputStr += pushStack(num);\n    } else {\n      outputStr += `${num} `;\n    }\n  }\n  return outputStr + stack.reverse().join(' ');\n}\n\n\nfunction compute(mathStr) {\n  let stackArr = toPostFixExpression(mathStr).split(' ');\n  return RPNcompute(stackArr);\n}\n// 示例：\ncompute('9 + ( 3 - 1 ) * 3 + 10 / 2');\n// 20\ncompute('9 + 3 * ( 2 + 2 / 2 ) - 10 / 5');\n// 16\n```\n\n关于 中缀表达式转后缀表达式（逆波兰）法规则如下:\n\n从左到右遍历中缀表达式的每个数字和符号，如果是数字那么就输出，成为后缀表达式的一部分，如果是符号， 那么判断该符号与栈顶符号的优先级，是右括号或者优先级低于等于栈顶符号， 那么栈顶符号依次出栈并输出，并将当前符号进栈， 一直到最终输出后缀表达式为止。\n\n运算符号优先级： 乘除 > 加减\n\n对于后缀表达式的计算规则如下：\n\n从左到右遍历后缀表达式的每个数字和符号，如果遇到数字那么就入栈，遇到是符号， 那么就将处于栈顶的两个数字出栈， 进行运算，并将运算结果入栈， 一直到最终获得到结果。\n\n## 队列\n\n> 队列是只允许在一端进行插入操作， 而在另一端进行删除操作的线性表\n\n队列遵循的是先进先出的线性表， 在程序设计中的应用， 比如我们在显示器上记事本上文字的输出。\n\n在日常生活中， 比如我们购买火车票时的排队。\n\n### 队列的线式存储结构\n\n在 js 中， 我们使用数组的 `push` 和 `shift(表头弹出)` 这两个 api 实现队列的模拟。\n\n#### 顺序存储\n\n使用顺序存储时，我们将队列数据元素按照顺序存储到数组中， 当我们想要对于队列进行出列操作时， 因为出列操作是在表头出列， 因此，出列数据元素后面的每一个数据都会向前移动一个元素位置， 这样会造成程序性能的损耗。\n\n{% asset_image image-20191002114710061-9988030.png%}\n\n![image-20191002114710061](数据结构：栈和队列/image-20191002114710061-9988030.png)\n\n这个时候的时间复杂度为  `O(n)`\n\n为了解决这个移动队列数据元素的问题， 我们可以引入两个指针： `front`: 指向队头元素， `rear`: 指向队尾元素的下一个位置\n\n当我们对于队列进行添加和删除元素的时候， 只要改变 `front` 和 `rear` 指针的位置就可以了， 不需要移动每个队列元素:\n\n```javascript\nfunction queue(queueLen) {\n  const queueArr = new Array(queueLen);\n  let front = 0;\n  let rear = 0;\n  this.out = function () {\n    queueArr[front] = undefined;\n    front ++;\n    return queueArr;\n  };\n  this.add = function (data) {\n    queueArr[rear] = data;\n    rear ++;\n    return queueArr;\n  }\n  return this;\n}\n```\n\n对于上面的代码， 存在一个问题是， 如果我们当删除数据时， 队列不往前移动， 那么当我们新增队列数据元素的时候， 可以会增加到规定的队列长度之外的元素：\n\n比如：\n\n```js\nconst queueList = queue(2);\n\nqueueList.add(1);\nqueueList.add(2);\nqueueList.out();\nconsole.log(queueList.add(3));\n// [ undefined, 2, 3 ]\n// 队列长度超出了我们规定的 2 的长度的队列长度\n```\n\n这个时候， 队列数据填充情况如下图所示：\n\n{% asset_image image-20191002141645991-9997006.png%}\n\n![image-20191002141645991](数据结构：栈和队列/image-20191002141645991-9997006.png)\n\n这个时候虽然添加的数据位置超出了队列的长度， 但是删除的队列的第 0 位 和 第 1 位元素却是空的， 我们的溢出是“假溢出”。\n\n我们思考， 如何能够利用删除之后的空间， 防止假溢出？\n\n#### **循环队列**\n\n循环队列相比上面的存储方法而言， 有一些不同， 主要是体现在  `rear` 指针的指向，`rear` 指针在队列初始化的时候指向下标 为 0 的位置,  当到达队列列尾的时候， `rear` 指针移动到队列列头\n\n```js\nfunction queue(queueSize) {\n  const queueArr = new Array(queueSize);\n  let front = 0;\n  let rear = 0;\n  this.out = function () {\n    if (front === rear) {\n      console.log('empty');\n      return;\n    };\n    queueArr[front] = undefined;\n    // 使用 %（取模）操作来进行归 0 操作\n    front = (front + 1) % queueSize;\n    return queueArr;\n  };\n  this.add = function (data) {\n    if (isFull()) {\n      console.log('full');\n      return;\n    };\n    queueArr[rear] = data;\n    rear = (rear + 1) % queueSize;\n    return queueArr;\n  }\n  this.queueLength = function () {\n    return (rear - front + queueSize) % queueSize;\n  }\n  function isFull() {\n    return (rear + 1) % queueSize === front;\n  }\n  return this;\n}\n\n```\n\n### 链式存储结构\n\n队列的链式存储结构其实就是单链表。与普通的单链表不同的是， 只能操作链表的头部和尾部节点，\n\n队列的链式存储结构被称为 `链队列`；\n\n### 总结\n\n当已知队列空间大小的情况下， 可以使用 `循环队列`， 否则， 如果不知道队列的长度， 使用 `链对列`\n\n","slug":"数据结构：栈和队列","published":1,"updated":"2020-09-14T06:36:25.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t8z005fi2os52da4930","content":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种特殊的线性表，这种线性表仅允许在表尾（栈顶）进行插入和删除工作：</p>\n<p>将可以被插入和删除元素的位置称为<code>栈顶</code>， 将另一端称为 <code>栈底</code>， 如果栈没有任何的元素， 这个栈被称为 <code>空栈</code>；</p>\n<p>栈的数据元素的进出遵循后进先出的原则，简称为  <em>LIFO (Last In First Out)</em> 结构；</p>\n<p>栈的插入被称为入栈， 栈的删除被称为出栈， 在程序中我们可以将其称为 <code>push</code> 和 <code>pop</code>;</p>\n<p>在 js 中， 我们使用数组的 <code>push</code> 和 <code>pop</code> 方法模拟栈的入栈和出栈操作；</p>\n<h3 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h3><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><p>我们将调用函数自身或者间接调用自身的函数称为 <em>递归</em></p>\n<p> 在每一层递归的过程中， 我们需要存储当前调用函数的局部变量， 参数值等数据信息存储到栈中，当递归返回之后， 再将这些数据从栈中弹出数据</p>\n<h4 id=\"使用栈实现四则运算表达式\"><a href=\"#使用栈实现四则运算表达式\" class=\"headerlink\" title=\"使用栈实现四则运算表达式\"></a>使用栈实现四则运算表达式</h4><p>如下面程序， 实现将一串运算表达式进行计算的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于逆波兰法表示的后缀表达式计算求值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RPNcompute</span>(<span class=\"params\">mathStrStack</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> mathStrStack) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(+num)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num1 = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num2 = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> total = num2 + num + num1;</span><br><span class=\"line\">      stack.push(<span class=\"built_in\">eval</span>(total));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      stack.push(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将中缀表达式转为后缀表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPostFixExpression</span>(<span class=\"params\">expression</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> expressionArr = expression.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> outputStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 处理符号入栈与出栈</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushStack</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!stack.length) &#123;</span><br><span class=\"line\">      stack.push(s);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> stackTopData = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stackTopData === <span class=\"string\">'('</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        result += stackTopData + <span class=\"string\">' '</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'*'</span>, <span class=\"string\">'/'</span>].includes(s))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isLower = [<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>].includes(s);</span><br><span class=\"line\">        <span class=\"comment\">// 当栈顶元素优先级大于等于当前入栈元素时， 栈顶元素依次出栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"string\">'/'</span>, <span class=\"string\">'*'</span>].concat(isLower ? [<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>] : []).includes(stackTopData)) &#123;</span><br><span class=\"line\">          result += stackTopData + <span class=\"string\">' '</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!stack.length) &#123;</span><br><span class=\"line\">            stack.push(s);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          stack.push(stackTopData);</span><br><span class=\"line\">          stack.push(s);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        stack.push(stackTopData);</span><br><span class=\"line\">        stack.push(s);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> expressionArr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(+num)) &#123;</span><br><span class=\"line\">      outputStr += pushStack(num);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      outputStr += <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span> `</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> outputStr + stack.reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\">mathStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stackArr = toPostFixExpression(mathStr).split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> RPNcompute(stackArr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 示例：</span></span><br><span class=\"line\">compute(<span class=\"string\">'9 + ( 3 - 1 ) * 3 + 10 / 2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br><span class=\"line\">compute(<span class=\"string\">'9 + 3 * ( 2 + 2 / 2 ) - 10 / 5'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n<p>关于 中缀表达式转后缀表达式（逆波兰）法规则如下:</p>\n<p>从左到右遍历中缀表达式的每个数字和符号，如果是数字那么就输出，成为后缀表达式的一部分，如果是符号， 那么判断该符号与栈顶符号的优先级，是右括号或者优先级低于等于栈顶符号， 那么栈顶符号依次出栈并输出，并将当前符号进栈， 一直到最终输出后缀表达式为止。</p>\n<p>运算符号优先级： 乘除 &gt; 加减</p>\n<p>对于后缀表达式的计算规则如下：</p>\n<p>从左到右遍历后缀表达式的每个数字和符号，如果遇到数字那么就入栈，遇到是符号， 那么就将处于栈顶的两个数字出栈， 进行运算，并将运算结果入栈， 一直到最终获得到结果。</p>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><blockquote>\n<p>队列是只允许在一端进行插入操作， 而在另一端进行删除操作的线性表</p>\n</blockquote>\n<p>队列遵循的是先进先出的线性表， 在程序设计中的应用， 比如我们在显示器上记事本上文字的输出。</p>\n<p>在日常生活中， 比如我们购买火车票时的排队。</p>\n<h3 id=\"队列的线式存储结构\"><a href=\"#队列的线式存储结构\" class=\"headerlink\" title=\"队列的线式存储结构\"></a>队列的线式存储结构</h3><p>在 js 中， 我们使用数组的 <code>push</code> 和 <code>shift(表头弹出)</code> 这两个 api 实现队列的模拟。</p>\n<h4 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h4><p>使用顺序存储时，我们将队列数据元素按照顺序存储到数组中， 当我们想要对于队列进行出列操作时， 因为出列操作是在表头出列， 因此，出列数据元素后面的每一个数据都会向前移动一个元素位置， 这样会造成程序性能的损耗。</p>\n<img src=\"/2019/09/28/数据结构：栈和队列/image-20191002114710061-9988030.png\">\n<p><img src=\"数据结构：栈和队列/image-20191002114710061-9988030.png\" alt=\"image-20191002114710061\"></p>\n<p>这个时候的时间复杂度为  <code>O(n)</code></p>\n<p>为了解决这个移动队列数据元素的问题， 我们可以引入两个指针： <code>front</code>: 指向队头元素， <code>rear</code>: 指向队尾元素的下一个位置</p>\n<p>当我们对于队列进行添加和删除元素的时候， 只要改变 <code>front</code> 和 <code>rear</code> 指针的位置就可以了， 不需要移动每个队列元素:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">queueLen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(queueLen);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> front = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.out = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    queueArr[front] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    front ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    queueArr[rear] = data;</span><br><span class=\"line\">    rear ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的代码， 存在一个问题是， 如果我们当删除数据时， 队列不往前移动， 那么当我们新增队列数据元素的时候， 可以会增加到规定的队列长度之外的元素：</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queueList = queue(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">queueList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">queueList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">queueList.out();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queueList.add(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// [ undefined, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 队列长度超出了我们规定的 2 的长度的队列长度</span></span><br></pre></td></tr></table></figure>\n<p>这个时候， 队列数据填充情况如下图所示：</p>\n<img src=\"/2019/09/28/数据结构：栈和队列/image-20191002141645991-9997006.png\">\n<p><img src=\"数据结构：栈和队列/image-20191002141645991-9997006.png\" alt=\"image-20191002141645991\"></p>\n<p>这个时候虽然添加的数据位置超出了队列的长度， 但是删除的队列的第 0 位 和 第 1 位元素却是空的， 我们的溢出是“假溢出”。</p>\n<p>我们思考， 如何能够利用删除之后的空间， 防止假溢出？</p>\n<h4 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a><strong>循环队列</strong></h4><p>循环队列相比上面的存储方法而言， 有一些不同， 主要是体现在  <code>rear</code> 指针的指向，<code>rear</code> 指针在队列初始化的时候指向下标 为 0 的位置,  当到达队列列尾的时候， <code>rear</code> 指针移动到队列列头</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">queueSize</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(queueSize);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> front = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.out = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (front === rear) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    queueArr[front] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 %（取模）操作来进行归 0 操作</span></span><br><span class=\"line\">    front = (front + <span class=\"number\">1</span>) % queueSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'full'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    queueArr[rear] = data;</span><br><span class=\"line\">    rear = (rear + <span class=\"number\">1</span>) % queueSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queueLength = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rear - front + queueSize) % queueSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFull</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % queueSize === front;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h3><p>队列的链式存储结构其实就是单链表。与普通的单链表不同的是， 只能操作链表的头部和尾部节点，</p>\n<p>队列的链式存储结构被称为 <code>链队列</code>；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>当已知队列空间大小的情况下， 可以使用 <code>循环队列</code>， 否则， 如果不知道队列的长度， 使用 <code>链对列</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种特殊的线性表，这种线性表仅允许在表尾（栈顶）进行插入和删除工作：</p>\n<p>将可以被插入和删除元素的位置称为<code>栈顶</code>， 将另一端称为 <code>栈底</code>， 如果栈没有任何的元素， 这个栈被称为 <code>空栈</code>；</p>\n<p>栈的数据元素的进出遵循后进先出的原则，简称为  <em>LIFO (Last In First Out)</em> 结构；</p>\n<p>栈的插入被称为入栈， 栈的删除被称为出栈， 在程序中我们可以将其称为 <code>push</code> 和 <code>pop</code>;</p>\n<p>在 js 中， 我们使用数组的 <code>push</code> 和 <code>pop</code> 方法模拟栈的入栈和出栈操作；</p>\n<h3 id=\"栈的应用\"><a href=\"#栈的应用\" class=\"headerlink\" title=\"栈的应用\"></a>栈的应用</h3><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><p>我们将调用函数自身或者间接调用自身的函数称为 <em>递归</em></p>\n<p> 在每一层递归的过程中， 我们需要存储当前调用函数的局部变量， 参数值等数据信息存储到栈中，当递归返回之后， 再将这些数据从栈中弹出数据</p>\n<h4 id=\"使用栈实现四则运算表达式\"><a href=\"#使用栈实现四则运算表达式\" class=\"headerlink\" title=\"使用栈实现四则运算表达式\"></a>使用栈实现四则运算表达式</h4><p>如下面程序， 实现将一串运算表达式进行计算的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于逆波兰法表示的后缀表达式计算求值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RPNcompute</span>(<span class=\"params\">mathStrStack</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> mathStrStack) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(+num)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num1 = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> num2 = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> total = num2 + num + num1;</span><br><span class=\"line\">      stack.push(<span class=\"built_in\">eval</span>(total));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      stack.push(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.pop();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将中缀表达式转为后缀表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPostFixExpression</span>(<span class=\"params\">expression</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> expressionArr = expression.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> outputStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 处理符号入栈与出栈</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushStack</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!stack.length) &#123;</span><br><span class=\"line\">      stack.push(s);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> stackTopData = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stackTopData === <span class=\"string\">'('</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        result += stackTopData + <span class=\"string\">' '</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'*'</span>, <span class=\"string\">'/'</span>].includes(s))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isLower = [<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>].includes(s);</span><br><span class=\"line\">        <span class=\"comment\">// 当栈顶元素优先级大于等于当前入栈元素时， 栈顶元素依次出栈</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"string\">'/'</span>, <span class=\"string\">'*'</span>].concat(isLower ? [<span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>] : []).includes(stackTopData)) &#123;</span><br><span class=\"line\">          result += stackTopData + <span class=\"string\">' '</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!stack.length) &#123;</span><br><span class=\"line\">            stack.push(s);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          stack.push(stackTopData);</span><br><span class=\"line\">          stack.push(s);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        stack.push(stackTopData);</span><br><span class=\"line\">        stack.push(s);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> expressionArr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>.isNaN(+num)) &#123;</span><br><span class=\"line\">      outputStr += pushStack(num);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      outputStr += <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span> `</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> outputStr + stack.reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\">mathStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stackArr = toPostFixExpression(mathStr).split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> RPNcompute(stackArr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 示例：</span></span><br><span class=\"line\">compute(<span class=\"string\">'9 + ( 3 - 1 ) * 3 + 10 / 2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 20</span></span><br><span class=\"line\">compute(<span class=\"string\">'9 + 3 * ( 2 + 2 / 2 ) - 10 / 5'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n<p>关于 中缀表达式转后缀表达式（逆波兰）法规则如下:</p>\n<p>从左到右遍历中缀表达式的每个数字和符号，如果是数字那么就输出，成为后缀表达式的一部分，如果是符号， 那么判断该符号与栈顶符号的优先级，是右括号或者优先级低于等于栈顶符号， 那么栈顶符号依次出栈并输出，并将当前符号进栈， 一直到最终输出后缀表达式为止。</p>\n<p>运算符号优先级： 乘除 &gt; 加减</p>\n<p>对于后缀表达式的计算规则如下：</p>\n<p>从左到右遍历后缀表达式的每个数字和符号，如果遇到数字那么就入栈，遇到是符号， 那么就将处于栈顶的两个数字出栈， 进行运算，并将运算结果入栈， 一直到最终获得到结果。</p>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><blockquote>\n<p>队列是只允许在一端进行插入操作， 而在另一端进行删除操作的线性表</p>\n</blockquote>\n<p>队列遵循的是先进先出的线性表， 在程序设计中的应用， 比如我们在显示器上记事本上文字的输出。</p>\n<p>在日常生活中， 比如我们购买火车票时的排队。</p>\n<h3 id=\"队列的线式存储结构\"><a href=\"#队列的线式存储结构\" class=\"headerlink\" title=\"队列的线式存储结构\"></a>队列的线式存储结构</h3><p>在 js 中， 我们使用数组的 <code>push</code> 和 <code>shift(表头弹出)</code> 这两个 api 实现队列的模拟。</p>\n<h4 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h4><p>使用顺序存储时，我们将队列数据元素按照顺序存储到数组中， 当我们想要对于队列进行出列操作时， 因为出列操作是在表头出列， 因此，出列数据元素后面的每一个数据都会向前移动一个元素位置， 这样会造成程序性能的损耗。</p>\n<img src=\"/2019/09/28/数据结构：栈和队列/image-20191002114710061-9988030.png\">\n<p><img src=\"数据结构：栈和队列/image-20191002114710061-9988030.png\" alt=\"image-20191002114710061\"></p>\n<p>这个时候的时间复杂度为  <code>O(n)</code></p>\n<p>为了解决这个移动队列数据元素的问题， 我们可以引入两个指针： <code>front</code>: 指向队头元素， <code>rear</code>: 指向队尾元素的下一个位置</p>\n<p>当我们对于队列进行添加和删除元素的时候， 只要改变 <code>front</code> 和 <code>rear</code> 指针的位置就可以了， 不需要移动每个队列元素:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">queueLen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(queueLen);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> front = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.out = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    queueArr[front] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    front ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    queueArr[rear] = data;</span><br><span class=\"line\">    rear ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于上面的代码， 存在一个问题是， 如果我们当删除数据时， 队列不往前移动， 那么当我们新增队列数据元素的时候， 可以会增加到规定的队列长度之外的元素：</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queueList = queue(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">queueList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">queueList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">queueList.out();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(queueList.add(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// [ undefined, 2, 3 ]</span></span><br><span class=\"line\"><span class=\"comment\">// 队列长度超出了我们规定的 2 的长度的队列长度</span></span><br></pre></td></tr></table></figure>\n<p>这个时候， 队列数据填充情况如下图所示：</p>\n<img src=\"/2019/09/28/数据结构：栈和队列/image-20191002141645991-9997006.png\">\n<p><img src=\"数据结构：栈和队列/image-20191002141645991-9997006.png\" alt=\"image-20191002141645991\"></p>\n<p>这个时候虽然添加的数据位置超出了队列的长度， 但是删除的队列的第 0 位 和 第 1 位元素却是空的， 我们的溢出是“假溢出”。</p>\n<p>我们思考， 如何能够利用删除之后的空间， 防止假溢出？</p>\n<h4 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a><strong>循环队列</strong></h4><p>循环队列相比上面的存储方法而言， 有一些不同， 主要是体现在  <code>rear</code> 指针的指向，<code>rear</code> 指针在队列初始化的时候指向下标 为 0 的位置,  当到达队列列尾的时候， <code>rear</code> 指针移动到队列列头</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queue</span>(<span class=\"params\">queueSize</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(queueSize);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> front = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.out = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (front === rear) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    queueArr[front] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 %（取模）操作来进行归 0 操作</span></span><br><span class=\"line\">    front = (front + <span class=\"number\">1</span>) % queueSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'full'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    queueArr[rear] = data;</span><br><span class=\"line\">    rear = (rear + <span class=\"number\">1</span>) % queueSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queueArr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.queueLength = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rear - front + queueSize) % queueSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFull</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % queueSize === front;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"链式存储结构\"><a href=\"#链式存储结构\" class=\"headerlink\" title=\"链式存储结构\"></a>链式存储结构</h3><p>队列的链式存储结构其实就是单链表。与普通的单链表不同的是， 只能操作链表的头部和尾部节点，</p>\n<p>队列的链式存储结构被称为 <code>链队列</code>；</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>当已知队列空间大小的情况下， 可以使用 <code>循环队列</code>， 否则， 如果不知道队列的长度， 使用 <code>链对列</code></p>\n"},{"title":"数据结构：树","date":"2019-10-03T03:19:09.000Z","_content":"\n# 树\n\n树是这样的一种结构：\n{% asset_image image-20191003112501951.png%}\n![image-20191003112501951](数据结构：树/image-20191003112501951.png)\n\n对于树的定义如下：\n\n> 树是 n (n >= 0) 个结点的有限集，n = 0 时称为空树，在任意一棵非空树中，\n>\n> 1. 有且仅用一个特定的称为 根（root）的节点\n> 2. 当 n > 1 时，其余结点可分为 m（m > 0）个互不相交的有限集 T1, T2, ...Tn, 其中每一个集合本身也是一棵树， 并且称为 根的子树， \n\n对于树的存储方式， 可以使用三种表示法来存储树之间结点之间的相互关系：\n\n双亲表示法， 孩子表示法， 孩子兄弟表示法\n\n双亲表示法：\n\n以一段连续的空间存储树的结点， 在每一个结点中，存储当前结点其双亲结点的存储位置：\n{% asset_image image-20191003120639803.png%}\n![image-20191003120639803](数据结构：树/image-20191003120639803.png)\n\ndata为数据域， 存储当前结点的相关数据， parent 为指针域， 存储当前节点的双亲结点在数组中的下标\n\n比如下面的树使用双亲表示法表示：\n{% asset_image image-20191003120919003.png%}\n![image-20191003120919003](数据结构：树/image-20191003120919003.png)\n\n根结点的双亲位置为 -1；\n\n上面的表示法表示的树用于查找结点的双亲元素比较方便， 但是，如果这个结点下面包含有多个的子结点， 我们可以需要设置多个的指针域， 比如， 长子域， 右兄弟域等等。\n\n孩子表示法：\n\n孩子表示法的方式是：\n\n将每个结点的孩子结点排列起来，以单链表作为存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点， 那么这个单链表为空，然后 n 个头指针又组成一个线性表，存放在一个一维数组中。\n\n使用孩子表示法表示上面的树形结构：\n{% asset_image image-20191003131535048.png%}\n![image-20191003131535048](数据结构：树/image-20191003131535048.png)\n\n在上面的孩子表示法中，设计有两种结构：\n\n1. 孩子链表\n   {% asset_image image-20191003131750956.png%}\n   ![image-20191003131750956](数据结构：树/image-20191003131750956.png)\n\n   child 为数据域， 用来存储当前的子结点在表头数组中的下标， next 为指针域，存放的是下一个孩子的这个结构指针地址。\n\n2. 表头结点\n   {% asset_image image-20191003131943353.png%}\n   ![image-20191003131943353](数据结构：树/image-20191003131943353.png)\n\n   表头结点存储每个结点， 用于树形结点的遍历使用，另外， 存储长子结点的指针域；\n\n孩子兄弟表示法：\n\n孩子兄弟表示法的数据结构如下：\n{% asset_image image-20191003132343485.png%}\n![image-20191003132343485](数据结构：树/image-20191003132343485.png)\n\ndata 为数据域\n\nfirstchild 为该结点第一个孩子结点的指针域\n\nrightsib 为该结点的兄弟结点指针域\n\n使用 孩子兄弟表示法组织后的数据结构如下：\n{% asset_image image-20191003132738591.png%}\n![image-20191003132738591](数据结构：树/image-20191003132738591.png)\n\n上面的重新组织后的结构将一棵树转换为了一棵二叉树\n\n## 二叉树\n\n### 二叉树的定义\n\n> 二叉树是 n 个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的，分别称为 根结点的左子树和右子树的二叉树组成 \n\n二叉树的特点：\n\n1. 每个结点最多有两棵子树\n2. 左子树和右子树是有顺序的， 并且不能颠倒\n3. 即使树中某结点只有一棵子树，也要区分顺序\n\n如下图， 是一棵二叉树的示意图：\n{% asset_image image-20191003190231702.png%}\n![image-20191003190231702](数据结构：树/image-20191003190231702.png)\n\n根据二叉树的结构显示， 可以将二叉树分为：满二叉树， 斜树 和 完全二叉树；\n\n如下， 是满二叉树的图示：\n{% asset_image image-20191003190415734.png%}\n![image-20191003190415734](数据结构：树/image-20191003190415734.png)\n\n树的每个结点都有左右两个结点， 故称为满二叉树。\n\n### 二叉树的存储\n\n#### 顺序存储\n\n按照顺序存储二叉树， 主要是使用一维数组来顺序存储树中的各个结点，比如， 存储如下树结构：\n{% asset_image image-20191003190805122.png%}\n![image-20191003190805122](数据结构：树/image-20191003190805122.png)\n\n使用顺序存储如下：\n{% asset_image image-20191003190824306.png%}\n![image-20191003190824306](数据结构：树/image-20191003190824306.png)\n\n对于不存在的结点， 我们将不存在的结点设为 `^` 即可。\n\n使用顺序存储存在的问题在于， 我们需要对于不存在的结点分配存储空间，比如，对于下面这个右斜树而言：\n{% asset_image image-20191003191127941.png%}\n![image-20191003191127941](数据结构：树/image-20191003191127941.png)\n\n这样造成了存储空间的浪费。\n\n#### 链式存储\n\n对于二叉树结点的存储， 我们使用一种被称为 “二叉链表” 的链式存储结构来存储，\n\n二叉链表是下面的这种结构：\n{% asset_image image-20191003191435274.png%}\n![image-20191003191435274](数据结构：树/image-20191003191435274.png)\n\n这个结构中包含有一个数据域和两个指针域， 数据域表明当前结点的数据，指针域分别为二叉树左右两个结点的地址指针。\n\n使用链式存储后的最终的存储链表结构如下：\n{% asset_image image-20191003191659327.png%}\n![image-20191003191659327](数据结构：树/image-20191003191659327.png)\n\n### 二叉树的遍历\n\n二叉树的遍历是指从根结点出发， 依次访问到二叉树中的每一个结点，使得每个结点被访问到并且仅被访问到一次。\n\n二叉树的遍历方法， 按照访问次序的不同， 可以分为 前序遍历， 中序遍历 以及 后序遍历\n\n#### 前序遍历\n\n前序遍历的遍历顺序是先访问二叉树的左子树， 然后访问二叉树的右子树\n\n{% asset_image image-20191012122817189.png%}\n\n![image-20191012122817189](数据结构：树/image-20191012122817189-0854497.png)\n\n如， 上图， 二叉树的访问顺序是：\n\nABDGHCEIF\n\n#### 中序遍历\n\n中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树\n\n{% asset_image image-20191014162511259.png%}\n\n\n\n![image-20191014162511259](数据结构：树/image-20191014162511259-1041511.png)\n\n如上图， 那么 二叉树的访问顺序是：\n\nGDHBAEICF\n\n#### 后序遍历\n\n判断二叉树是否为空， 如果是空， 那么空操作返回，否则的话， 从左到 右通过先叶子后结点的方式遍历访问左右子树\n\n{% asset_image image-20191014163237408.png%}\n\n\n\n![image-20191014163237408](数据结构：树/image-20191014163237408-1041957.png)\n\n使用后序遍历的方法来访问二叉树的顺序是：\n\nGHDBIEFCA\n\n### 二叉树的创建\n\n二叉树的创建可以像二叉树创建方法中传入一串树来实现，通过一定的二叉树的遍历顺序来依次创建结点， 对于空结点， 二叉树中的字符串可以为 ‘#’\n\n按照前序遍历创建的二叉树的方法如下:\n\n```js\n// 创建二叉树\n// treeStr: 树的字符串， 空结点 ‘#’\nfunction createTree(treeStr) {\n  let tree = {};\n  // 创建树节点\n  let treeStack = treeStr.split('');\n  function createNode(node) {\n    let nodeData = treeStack.shift();\n    if (!nodeData) return;\n    if (nodeData !== '#') {\n      node.data = nodeData;\n    } else {\n      return true;\n    }\n    // 当父节点没有左结点的时候， 创建左结点\n    if (!node.lChild || !node.lChild.hasOwnProperty('data')) {\n      if (treeStack.length >= 1) node.lChild = {};\n      if (createNode(node.lChild)) delete node.lChild;\n    }\n    if (!node.rChild || !node.rChild.hasOwnProperty('data')) {\n      if (treeStack.length >= 1) node.rChild = {};\n      if (createNode(node.rChild)) delete node.rChild;\n    }\n    return;\n  }\n  createNode(tree);\n}\n```\n\n对于树的创建和访问一样， 也是进行依次遍历， 使用递归进行遍历访问， 需要注意的是：\n\n要存在相应的条件， 使得能够跳出递归。\n\n对于递归而言， 注意递归循环的跳出是比较重要的。\n\n同样，也可以按照中序遍历和后序遍历的次序来创建树， 只是递归的顺序不同而已。\n\n另外， 判断对象中某个属性是否存在， 最好不要用直接访问属性的方式进行判断， 因为不知道这个属性的值可能是 `undefined`,  或者 `0` 等导致属性访问后为 `false` 的值。\n\n可以使用 `hasOwnProperty` 的方式来判断属性是否在对象上面:\n\n```\nObject.hasOwnPropery(prop);\n```\n\n注意： 这个方法只能够获取到该对象上面的自身属性， 不能获取到该对象原型上面的属性\n\n（for in 是可以获取到继承的属性的， 并且继承的属性是可枚举的）\n\n为了防止对象上面有 `hasOwnProperty` 属性覆盖掉从对象上面继承的， 我们需要通过 `Object` 来调用：\n\n```\nObject.hasOwnProperty.call(obj, 'property');\n```\n\n\n\n","source":"_posts/数据结构：树.md","raw":"---\ntitle: 数据结构：树\ndate: 2019-10-03 11:19:09\ntags: 树\ncategories: 数据结构\n---\n\n# 树\n\n树是这样的一种结构：\n{% asset_image image-20191003112501951.png%}\n![image-20191003112501951](数据结构：树/image-20191003112501951.png)\n\n对于树的定义如下：\n\n> 树是 n (n >= 0) 个结点的有限集，n = 0 时称为空树，在任意一棵非空树中，\n>\n> 1. 有且仅用一个特定的称为 根（root）的节点\n> 2. 当 n > 1 时，其余结点可分为 m（m > 0）个互不相交的有限集 T1, T2, ...Tn, 其中每一个集合本身也是一棵树， 并且称为 根的子树， \n\n对于树的存储方式， 可以使用三种表示法来存储树之间结点之间的相互关系：\n\n双亲表示法， 孩子表示法， 孩子兄弟表示法\n\n双亲表示法：\n\n以一段连续的空间存储树的结点， 在每一个结点中，存储当前结点其双亲结点的存储位置：\n{% asset_image image-20191003120639803.png%}\n![image-20191003120639803](数据结构：树/image-20191003120639803.png)\n\ndata为数据域， 存储当前结点的相关数据， parent 为指针域， 存储当前节点的双亲结点在数组中的下标\n\n比如下面的树使用双亲表示法表示：\n{% asset_image image-20191003120919003.png%}\n![image-20191003120919003](数据结构：树/image-20191003120919003.png)\n\n根结点的双亲位置为 -1；\n\n上面的表示法表示的树用于查找结点的双亲元素比较方便， 但是，如果这个结点下面包含有多个的子结点， 我们可以需要设置多个的指针域， 比如， 长子域， 右兄弟域等等。\n\n孩子表示法：\n\n孩子表示法的方式是：\n\n将每个结点的孩子结点排列起来，以单链表作为存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点， 那么这个单链表为空，然后 n 个头指针又组成一个线性表，存放在一个一维数组中。\n\n使用孩子表示法表示上面的树形结构：\n{% asset_image image-20191003131535048.png%}\n![image-20191003131535048](数据结构：树/image-20191003131535048.png)\n\n在上面的孩子表示法中，设计有两种结构：\n\n1. 孩子链表\n   {% asset_image image-20191003131750956.png%}\n   ![image-20191003131750956](数据结构：树/image-20191003131750956.png)\n\n   child 为数据域， 用来存储当前的子结点在表头数组中的下标， next 为指针域，存放的是下一个孩子的这个结构指针地址。\n\n2. 表头结点\n   {% asset_image image-20191003131943353.png%}\n   ![image-20191003131943353](数据结构：树/image-20191003131943353.png)\n\n   表头结点存储每个结点， 用于树形结点的遍历使用，另外， 存储长子结点的指针域；\n\n孩子兄弟表示法：\n\n孩子兄弟表示法的数据结构如下：\n{% asset_image image-20191003132343485.png%}\n![image-20191003132343485](数据结构：树/image-20191003132343485.png)\n\ndata 为数据域\n\nfirstchild 为该结点第一个孩子结点的指针域\n\nrightsib 为该结点的兄弟结点指针域\n\n使用 孩子兄弟表示法组织后的数据结构如下：\n{% asset_image image-20191003132738591.png%}\n![image-20191003132738591](数据结构：树/image-20191003132738591.png)\n\n上面的重新组织后的结构将一棵树转换为了一棵二叉树\n\n## 二叉树\n\n### 二叉树的定义\n\n> 二叉树是 n 个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的，分别称为 根结点的左子树和右子树的二叉树组成 \n\n二叉树的特点：\n\n1. 每个结点最多有两棵子树\n2. 左子树和右子树是有顺序的， 并且不能颠倒\n3. 即使树中某结点只有一棵子树，也要区分顺序\n\n如下图， 是一棵二叉树的示意图：\n{% asset_image image-20191003190231702.png%}\n![image-20191003190231702](数据结构：树/image-20191003190231702.png)\n\n根据二叉树的结构显示， 可以将二叉树分为：满二叉树， 斜树 和 完全二叉树；\n\n如下， 是满二叉树的图示：\n{% asset_image image-20191003190415734.png%}\n![image-20191003190415734](数据结构：树/image-20191003190415734.png)\n\n树的每个结点都有左右两个结点， 故称为满二叉树。\n\n### 二叉树的存储\n\n#### 顺序存储\n\n按照顺序存储二叉树， 主要是使用一维数组来顺序存储树中的各个结点，比如， 存储如下树结构：\n{% asset_image image-20191003190805122.png%}\n![image-20191003190805122](数据结构：树/image-20191003190805122.png)\n\n使用顺序存储如下：\n{% asset_image image-20191003190824306.png%}\n![image-20191003190824306](数据结构：树/image-20191003190824306.png)\n\n对于不存在的结点， 我们将不存在的结点设为 `^` 即可。\n\n使用顺序存储存在的问题在于， 我们需要对于不存在的结点分配存储空间，比如，对于下面这个右斜树而言：\n{% asset_image image-20191003191127941.png%}\n![image-20191003191127941](数据结构：树/image-20191003191127941.png)\n\n这样造成了存储空间的浪费。\n\n#### 链式存储\n\n对于二叉树结点的存储， 我们使用一种被称为 “二叉链表” 的链式存储结构来存储，\n\n二叉链表是下面的这种结构：\n{% asset_image image-20191003191435274.png%}\n![image-20191003191435274](数据结构：树/image-20191003191435274.png)\n\n这个结构中包含有一个数据域和两个指针域， 数据域表明当前结点的数据，指针域分别为二叉树左右两个结点的地址指针。\n\n使用链式存储后的最终的存储链表结构如下：\n{% asset_image image-20191003191659327.png%}\n![image-20191003191659327](数据结构：树/image-20191003191659327.png)\n\n### 二叉树的遍历\n\n二叉树的遍历是指从根结点出发， 依次访问到二叉树中的每一个结点，使得每个结点被访问到并且仅被访问到一次。\n\n二叉树的遍历方法， 按照访问次序的不同， 可以分为 前序遍历， 中序遍历 以及 后序遍历\n\n#### 前序遍历\n\n前序遍历的遍历顺序是先访问二叉树的左子树， 然后访问二叉树的右子树\n\n{% asset_image image-20191012122817189.png%}\n\n![image-20191012122817189](数据结构：树/image-20191012122817189-0854497.png)\n\n如， 上图， 二叉树的访问顺序是：\n\nABDGHCEIF\n\n#### 中序遍历\n\n中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树\n\n{% asset_image image-20191014162511259.png%}\n\n\n\n![image-20191014162511259](数据结构：树/image-20191014162511259-1041511.png)\n\n如上图， 那么 二叉树的访问顺序是：\n\nGDHBAEICF\n\n#### 后序遍历\n\n判断二叉树是否为空， 如果是空， 那么空操作返回，否则的话， 从左到 右通过先叶子后结点的方式遍历访问左右子树\n\n{% asset_image image-20191014163237408.png%}\n\n\n\n![image-20191014163237408](数据结构：树/image-20191014163237408-1041957.png)\n\n使用后序遍历的方法来访问二叉树的顺序是：\n\nGHDBIEFCA\n\n### 二叉树的创建\n\n二叉树的创建可以像二叉树创建方法中传入一串树来实现，通过一定的二叉树的遍历顺序来依次创建结点， 对于空结点， 二叉树中的字符串可以为 ‘#’\n\n按照前序遍历创建的二叉树的方法如下:\n\n```js\n// 创建二叉树\n// treeStr: 树的字符串， 空结点 ‘#’\nfunction createTree(treeStr) {\n  let tree = {};\n  // 创建树节点\n  let treeStack = treeStr.split('');\n  function createNode(node) {\n    let nodeData = treeStack.shift();\n    if (!nodeData) return;\n    if (nodeData !== '#') {\n      node.data = nodeData;\n    } else {\n      return true;\n    }\n    // 当父节点没有左结点的时候， 创建左结点\n    if (!node.lChild || !node.lChild.hasOwnProperty('data')) {\n      if (treeStack.length >= 1) node.lChild = {};\n      if (createNode(node.lChild)) delete node.lChild;\n    }\n    if (!node.rChild || !node.rChild.hasOwnProperty('data')) {\n      if (treeStack.length >= 1) node.rChild = {};\n      if (createNode(node.rChild)) delete node.rChild;\n    }\n    return;\n  }\n  createNode(tree);\n}\n```\n\n对于树的创建和访问一样， 也是进行依次遍历， 使用递归进行遍历访问， 需要注意的是：\n\n要存在相应的条件， 使得能够跳出递归。\n\n对于递归而言， 注意递归循环的跳出是比较重要的。\n\n同样，也可以按照中序遍历和后序遍历的次序来创建树， 只是递归的顺序不同而已。\n\n另外， 判断对象中某个属性是否存在， 最好不要用直接访问属性的方式进行判断， 因为不知道这个属性的值可能是 `undefined`,  或者 `0` 等导致属性访问后为 `false` 的值。\n\n可以使用 `hasOwnProperty` 的方式来判断属性是否在对象上面:\n\n```\nObject.hasOwnPropery(prop);\n```\n\n注意： 这个方法只能够获取到该对象上面的自身属性， 不能获取到该对象原型上面的属性\n\n（for in 是可以获取到继承的属性的， 并且继承的属性是可枚举的）\n\n为了防止对象上面有 `hasOwnProperty` 属性覆盖掉从对象上面继承的， 我们需要通过 `Object` 来调用：\n\n```\nObject.hasOwnProperty.call(obj, 'property');\n```\n\n\n\n","slug":"数据结构：树","published":1,"updated":"2020-09-14T06:36:25.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t90005ji2osxbn6lb3w","content":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是这样的一种结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003112501951.png\"><br><img src=\"数据结构：树/image-20191003112501951.png\" alt=\"image-20191003112501951\"></p>\n<p>对于树的定义如下：</p>\n<blockquote>\n<p>树是 n (n &gt;= 0) 个结点的有限集，n = 0 时称为空树，在任意一棵非空树中，</p>\n<ol>\n<li>有且仅用一个特定的称为 根（root）的节点</li>\n<li>当 n &gt; 1 时，其余结点可分为 m（m &gt; 0）个互不相交的有限集 T1, T2, …Tn, 其中每一个集合本身也是一棵树， 并且称为 根的子树， </li>\n</ol>\n</blockquote>\n<p>对于树的存储方式， 可以使用三种表示法来存储树之间结点之间的相互关系：</p>\n<p>双亲表示法， 孩子表示法， 孩子兄弟表示法</p>\n<p>双亲表示法：</p>\n<p>以一段连续的空间存储树的结点， 在每一个结点中，存储当前结点其双亲结点的存储位置：<br><img src=\"/2019/10/03/数据结构：树/image-20191003120639803.png\"><br><img src=\"数据结构：树/image-20191003120639803.png\" alt=\"image-20191003120639803\"></p>\n<p>data为数据域， 存储当前结点的相关数据， parent 为指针域， 存储当前节点的双亲结点在数组中的下标</p>\n<p>比如下面的树使用双亲表示法表示：<br><img src=\"/2019/10/03/数据结构：树/image-20191003120919003.png\"><br><img src=\"数据结构：树/image-20191003120919003.png\" alt=\"image-20191003120919003\"></p>\n<p>根结点的双亲位置为 -1；</p>\n<p>上面的表示法表示的树用于查找结点的双亲元素比较方便， 但是，如果这个结点下面包含有多个的子结点， 我们可以需要设置多个的指针域， 比如， 长子域， 右兄弟域等等。</p>\n<p>孩子表示法：</p>\n<p>孩子表示法的方式是：</p>\n<p>将每个结点的孩子结点排列起来，以单链表作为存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点， 那么这个单链表为空，然后 n 个头指针又组成一个线性表，存放在一个一维数组中。</p>\n<p>使用孩子表示法表示上面的树形结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003131535048.png\"><br><img src=\"数据结构：树/image-20191003131535048.png\" alt=\"image-20191003131535048\"></p>\n<p>在上面的孩子表示法中，设计有两种结构：</p>\n<ol>\n<li><p>孩子链表</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191003131750956.png\">\n<p><img src=\"数据结构：树/image-20191003131750956.png\" alt=\"image-20191003131750956\"></p>\n<p>child 为数据域， 用来存储当前的子结点在表头数组中的下标， next 为指针域，存放的是下一个孩子的这个结构指针地址。</p>\n</li>\n<li><p>表头结点</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191003131943353.png\">\n<p><img src=\"数据结构：树/image-20191003131943353.png\" alt=\"image-20191003131943353\"></p>\n<p>表头结点存储每个结点， 用于树形结点的遍历使用，另外， 存储长子结点的指针域；</p>\n</li>\n</ol>\n<p>孩子兄弟表示法：</p>\n<p>孩子兄弟表示法的数据结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003132343485.png\"><br><img src=\"数据结构：树/image-20191003132343485.png\" alt=\"image-20191003132343485\"></p>\n<p>data 为数据域</p>\n<p>firstchild 为该结点第一个孩子结点的指针域</p>\n<p>rightsib 为该结点的兄弟结点指针域</p>\n<p>使用 孩子兄弟表示法组织后的数据结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003132738591.png\"><br><img src=\"数据结构：树/image-20191003132738591.png\" alt=\"image-20191003132738591\"></p>\n<p>上面的重新组织后的结构将一棵树转换为了一棵二叉树</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h3><blockquote>\n<p>二叉树是 n 个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的，分别称为 根结点的左子树和右子树的二叉树组成 </p>\n</blockquote>\n<p>二叉树的特点：</p>\n<ol>\n<li>每个结点最多有两棵子树</li>\n<li>左子树和右子树是有顺序的， 并且不能颠倒</li>\n<li>即使树中某结点只有一棵子树，也要区分顺序</li>\n</ol>\n<p>如下图， 是一棵二叉树的示意图：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190231702.png\"><br><img src=\"数据结构：树/image-20191003190231702.png\" alt=\"image-20191003190231702\"></p>\n<p>根据二叉树的结构显示， 可以将二叉树分为：满二叉树， 斜树 和 完全二叉树；</p>\n<p>如下， 是满二叉树的图示：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190415734.png\"><br><img src=\"数据结构：树/image-20191003190415734.png\" alt=\"image-20191003190415734\"></p>\n<p>树的每个结点都有左右两个结点， 故称为满二叉树。</p>\n<h3 id=\"二叉树的存储\"><a href=\"#二叉树的存储\" class=\"headerlink\" title=\"二叉树的存储\"></a>二叉树的存储</h3><h4 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h4><p>按照顺序存储二叉树， 主要是使用一维数组来顺序存储树中的各个结点，比如， 存储如下树结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190805122.png\"><br><img src=\"数据结构：树/image-20191003190805122.png\" alt=\"image-20191003190805122\"></p>\n<p>使用顺序存储如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190824306.png\"><br><img src=\"数据结构：树/image-20191003190824306.png\" alt=\"image-20191003190824306\"></p>\n<p>对于不存在的结点， 我们将不存在的结点设为 <code>^</code> 即可。</p>\n<p>使用顺序存储存在的问题在于， 我们需要对于不存在的结点分配存储空间，比如，对于下面这个右斜树而言：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191127941.png\"><br><img src=\"数据结构：树/image-20191003191127941.png\" alt=\"image-20191003191127941\"></p>\n<p>这样造成了存储空间的浪费。</p>\n<h4 id=\"链式存储\"><a href=\"#链式存储\" class=\"headerlink\" title=\"链式存储\"></a>链式存储</h4><p>对于二叉树结点的存储， 我们使用一种被称为 “二叉链表” 的链式存储结构来存储，</p>\n<p>二叉链表是下面的这种结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191435274.png\"><br><img src=\"数据结构：树/image-20191003191435274.png\" alt=\"image-20191003191435274\"></p>\n<p>这个结构中包含有一个数据域和两个指针域， 数据域表明当前结点的数据，指针域分别为二叉树左右两个结点的地址指针。</p>\n<p>使用链式存储后的最终的存储链表结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191659327.png\"><br><img src=\"数据结构：树/image-20191003191659327.png\" alt=\"image-20191003191659327\"></p>\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><p>二叉树的遍历是指从根结点出发， 依次访问到二叉树中的每一个结点，使得每个结点被访问到并且仅被访问到一次。</p>\n<p>二叉树的遍历方法， 按照访问次序的不同， 可以分为 前序遍历， 中序遍历 以及 后序遍历</p>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>前序遍历的遍历顺序是先访问二叉树的左子树， 然后访问二叉树的右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191012122817189.png\">\n<p><img src=\"数据结构：树/image-20191012122817189-0854497.png\" alt=\"image-20191012122817189\"></p>\n<p>如， 上图， 二叉树的访问顺序是：</p>\n<p>ABDGHCEIF</p>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191014162511259.png\">\n<p><img src=\"数据结构：树/image-20191014162511259-1041511.png\" alt=\"image-20191014162511259\"></p>\n<p>如上图， 那么 二叉树的访问顺序是：</p>\n<p>GDHBAEICF</p>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>判断二叉树是否为空， 如果是空， 那么空操作返回，否则的话， 从左到 右通过先叶子后结点的方式遍历访问左右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191014163237408.png\">\n<p><img src=\"数据结构：树/image-20191014163237408-1041957.png\" alt=\"image-20191014163237408\"></p>\n<p>使用后序遍历的方法来访问二叉树的顺序是：</p>\n<p>GHDBIEFCA</p>\n<h3 id=\"二叉树的创建\"><a href=\"#二叉树的创建\" class=\"headerlink\" title=\"二叉树的创建\"></a>二叉树的创建</h3><p>二叉树的创建可以像二叉树创建方法中传入一串树来实现，通过一定的二叉树的遍历顺序来依次创建结点， 对于空结点， 二叉树中的字符串可以为 ‘#’</p>\n<p>按照前序遍历创建的二叉树的方法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建二叉树</span></span><br><span class=\"line\"><span class=\"comment\">// treeStr: 树的字符串， 空结点 ‘#’</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTree</span>(<span class=\"params\">treeStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建树节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> treeStack = treeStr.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createNode</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeData = treeStack.shift();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeData) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodeData !== <span class=\"string\">'#'</span>) &#123;</span><br><span class=\"line\">      node.data = nodeData;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当父节点没有左结点的时候， 创建左结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.lChild || !node.lChild.hasOwnProperty(<span class=\"string\">'data'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeStack.length &gt;= <span class=\"number\">1</span>) node.lChild = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (createNode(node.lChild)) <span class=\"keyword\">delete</span> node.lChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.rChild || !node.rChild.hasOwnProperty(<span class=\"string\">'data'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeStack.length &gt;= <span class=\"number\">1</span>) node.rChild = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (createNode(node.rChild)) <span class=\"keyword\">delete</span> node.rChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createNode(tree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于树的创建和访问一样， 也是进行依次遍历， 使用递归进行遍历访问， 需要注意的是：</p>\n<p>要存在相应的条件， 使得能够跳出递归。</p>\n<p>对于递归而言， 注意递归循环的跳出是比较重要的。</p>\n<p>同样，也可以按照中序遍历和后序遍历的次序来创建树， 只是递归的顺序不同而已。</p>\n<p>另外， 判断对象中某个属性是否存在， 最好不要用直接访问属性的方式进行判断， 因为不知道这个属性的值可能是 <code>undefined</code>,  或者 <code>0</code> 等导致属性访问后为 <code>false</code> 的值。</p>\n<p>可以使用 <code>hasOwnProperty</code> 的方式来判断属性是否在对象上面:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.hasOwnPropery(prop);</span><br></pre></td></tr></table></figure>\n<p>注意： 这个方法只能够获取到该对象上面的自身属性， 不能获取到该对象原型上面的属性</p>\n<p>（for in 是可以获取到继承的属性的， 并且继承的属性是可枚举的）</p>\n<p>为了防止对象上面有 <code>hasOwnProperty</code> 属性覆盖掉从对象上面继承的， 我们需要通过 <code>Object</code> 来调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.hasOwnProperty.call(obj, &apos;property&apos;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>树是这样的一种结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003112501951.png\"><br><img src=\"数据结构：树/image-20191003112501951.png\" alt=\"image-20191003112501951\"></p>\n<p>对于树的定义如下：</p>\n<blockquote>\n<p>树是 n (n &gt;= 0) 个结点的有限集，n = 0 时称为空树，在任意一棵非空树中，</p>\n<ol>\n<li>有且仅用一个特定的称为 根（root）的节点</li>\n<li>当 n &gt; 1 时，其余结点可分为 m（m &gt; 0）个互不相交的有限集 T1, T2, …Tn, 其中每一个集合本身也是一棵树， 并且称为 根的子树， </li>\n</ol>\n</blockquote>\n<p>对于树的存储方式， 可以使用三种表示法来存储树之间结点之间的相互关系：</p>\n<p>双亲表示法， 孩子表示法， 孩子兄弟表示法</p>\n<p>双亲表示法：</p>\n<p>以一段连续的空间存储树的结点， 在每一个结点中，存储当前结点其双亲结点的存储位置：<br><img src=\"/2019/10/03/数据结构：树/image-20191003120639803.png\"><br><img src=\"数据结构：树/image-20191003120639803.png\" alt=\"image-20191003120639803\"></p>\n<p>data为数据域， 存储当前结点的相关数据， parent 为指针域， 存储当前节点的双亲结点在数组中的下标</p>\n<p>比如下面的树使用双亲表示法表示：<br><img src=\"/2019/10/03/数据结构：树/image-20191003120919003.png\"><br><img src=\"数据结构：树/image-20191003120919003.png\" alt=\"image-20191003120919003\"></p>\n<p>根结点的双亲位置为 -1；</p>\n<p>上面的表示法表示的树用于查找结点的双亲元素比较方便， 但是，如果这个结点下面包含有多个的子结点， 我们可以需要设置多个的指针域， 比如， 长子域， 右兄弟域等等。</p>\n<p>孩子表示法：</p>\n<p>孩子表示法的方式是：</p>\n<p>将每个结点的孩子结点排列起来，以单链表作为存储结构，则 n 个结点有 n 个孩子链表，如果是叶子结点， 那么这个单链表为空，然后 n 个头指针又组成一个线性表，存放在一个一维数组中。</p>\n<p>使用孩子表示法表示上面的树形结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003131535048.png\"><br><img src=\"数据结构：树/image-20191003131535048.png\" alt=\"image-20191003131535048\"></p>\n<p>在上面的孩子表示法中，设计有两种结构：</p>\n<ol>\n<li><p>孩子链表</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191003131750956.png\">\n<p><img src=\"数据结构：树/image-20191003131750956.png\" alt=\"image-20191003131750956\"></p>\n<p>child 为数据域， 用来存储当前的子结点在表头数组中的下标， next 为指针域，存放的是下一个孩子的这个结构指针地址。</p>\n</li>\n<li><p>表头结点</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191003131943353.png\">\n<p><img src=\"数据结构：树/image-20191003131943353.png\" alt=\"image-20191003131943353\"></p>\n<p>表头结点存储每个结点， 用于树形结点的遍历使用，另外， 存储长子结点的指针域；</p>\n</li>\n</ol>\n<p>孩子兄弟表示法：</p>\n<p>孩子兄弟表示法的数据结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003132343485.png\"><br><img src=\"数据结构：树/image-20191003132343485.png\" alt=\"image-20191003132343485\"></p>\n<p>data 为数据域</p>\n<p>firstchild 为该结点第一个孩子结点的指针域</p>\n<p>rightsib 为该结点的兄弟结点指针域</p>\n<p>使用 孩子兄弟表示法组织后的数据结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003132738591.png\"><br><img src=\"数据结构：树/image-20191003132738591.png\" alt=\"image-20191003132738591\"></p>\n<p>上面的重新组织后的结构将一棵树转换为了一棵二叉树</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h3><blockquote>\n<p>二叉树是 n 个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的，分别称为 根结点的左子树和右子树的二叉树组成 </p>\n</blockquote>\n<p>二叉树的特点：</p>\n<ol>\n<li>每个结点最多有两棵子树</li>\n<li>左子树和右子树是有顺序的， 并且不能颠倒</li>\n<li>即使树中某结点只有一棵子树，也要区分顺序</li>\n</ol>\n<p>如下图， 是一棵二叉树的示意图：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190231702.png\"><br><img src=\"数据结构：树/image-20191003190231702.png\" alt=\"image-20191003190231702\"></p>\n<p>根据二叉树的结构显示， 可以将二叉树分为：满二叉树， 斜树 和 完全二叉树；</p>\n<p>如下， 是满二叉树的图示：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190415734.png\"><br><img src=\"数据结构：树/image-20191003190415734.png\" alt=\"image-20191003190415734\"></p>\n<p>树的每个结点都有左右两个结点， 故称为满二叉树。</p>\n<h3 id=\"二叉树的存储\"><a href=\"#二叉树的存储\" class=\"headerlink\" title=\"二叉树的存储\"></a>二叉树的存储</h3><h4 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h4><p>按照顺序存储二叉树， 主要是使用一维数组来顺序存储树中的各个结点，比如， 存储如下树结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190805122.png\"><br><img src=\"数据结构：树/image-20191003190805122.png\" alt=\"image-20191003190805122\"></p>\n<p>使用顺序存储如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003190824306.png\"><br><img src=\"数据结构：树/image-20191003190824306.png\" alt=\"image-20191003190824306\"></p>\n<p>对于不存在的结点， 我们将不存在的结点设为 <code>^</code> 即可。</p>\n<p>使用顺序存储存在的问题在于， 我们需要对于不存在的结点分配存储空间，比如，对于下面这个右斜树而言：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191127941.png\"><br><img src=\"数据结构：树/image-20191003191127941.png\" alt=\"image-20191003191127941\"></p>\n<p>这样造成了存储空间的浪费。</p>\n<h4 id=\"链式存储\"><a href=\"#链式存储\" class=\"headerlink\" title=\"链式存储\"></a>链式存储</h4><p>对于二叉树结点的存储， 我们使用一种被称为 “二叉链表” 的链式存储结构来存储，</p>\n<p>二叉链表是下面的这种结构：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191435274.png\"><br><img src=\"数据结构：树/image-20191003191435274.png\" alt=\"image-20191003191435274\"></p>\n<p>这个结构中包含有一个数据域和两个指针域， 数据域表明当前结点的数据，指针域分别为二叉树左右两个结点的地址指针。</p>\n<p>使用链式存储后的最终的存储链表结构如下：<br><img src=\"/2019/10/03/数据结构：树/image-20191003191659327.png\"><br><img src=\"数据结构：树/image-20191003191659327.png\" alt=\"image-20191003191659327\"></p>\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><p>二叉树的遍历是指从根结点出发， 依次访问到二叉树中的每一个结点，使得每个结点被访问到并且仅被访问到一次。</p>\n<p>二叉树的遍历方法， 按照访问次序的不同， 可以分为 前序遍历， 中序遍历 以及 后序遍历</p>\n<h4 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h4><p>前序遍历的遍历顺序是先访问二叉树的左子树， 然后访问二叉树的右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191012122817189.png\">\n<p><img src=\"数据结构：树/image-20191012122817189-0854497.png\" alt=\"image-20191012122817189\"></p>\n<p>如， 上图， 二叉树的访问顺序是：</p>\n<p>ABDGHCEIF</p>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191014162511259.png\">\n<p><img src=\"数据结构：树/image-20191014162511259-1041511.png\" alt=\"image-20191014162511259\"></p>\n<p>如上图， 那么 二叉树的访问顺序是：</p>\n<p>GDHBAEICF</p>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>判断二叉树是否为空， 如果是空， 那么空操作返回，否则的话， 从左到 右通过先叶子后结点的方式遍历访问左右子树</p>\n<img src=\"/2019/10/03/数据结构：树/image-20191014163237408.png\">\n<p><img src=\"数据结构：树/image-20191014163237408-1041957.png\" alt=\"image-20191014163237408\"></p>\n<p>使用后序遍历的方法来访问二叉树的顺序是：</p>\n<p>GHDBIEFCA</p>\n<h3 id=\"二叉树的创建\"><a href=\"#二叉树的创建\" class=\"headerlink\" title=\"二叉树的创建\"></a>二叉树的创建</h3><p>二叉树的创建可以像二叉树创建方法中传入一串树来实现，通过一定的二叉树的遍历顺序来依次创建结点， 对于空结点， 二叉树中的字符串可以为 ‘#’</p>\n<p>按照前序遍历创建的二叉树的方法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建二叉树</span></span><br><span class=\"line\"><span class=\"comment\">// treeStr: 树的字符串， 空结点 ‘#’</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTree</span>(<span class=\"params\">treeStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建树节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> treeStack = treeStr.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createNode</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeData = treeStack.shift();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeData) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodeData !== <span class=\"string\">'#'</span>) &#123;</span><br><span class=\"line\">      node.data = nodeData;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当父节点没有左结点的时候， 创建左结点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.lChild || !node.lChild.hasOwnProperty(<span class=\"string\">'data'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeStack.length &gt;= <span class=\"number\">1</span>) node.lChild = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (createNode(node.lChild)) <span class=\"keyword\">delete</span> node.lChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.rChild || !node.rChild.hasOwnProperty(<span class=\"string\">'data'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeStack.length &gt;= <span class=\"number\">1</span>) node.rChild = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (createNode(node.rChild)) <span class=\"keyword\">delete</span> node.rChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createNode(tree);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于树的创建和访问一样， 也是进行依次遍历， 使用递归进行遍历访问， 需要注意的是：</p>\n<p>要存在相应的条件， 使得能够跳出递归。</p>\n<p>对于递归而言， 注意递归循环的跳出是比较重要的。</p>\n<p>同样，也可以按照中序遍历和后序遍历的次序来创建树， 只是递归的顺序不同而已。</p>\n<p>另外， 判断对象中某个属性是否存在， 最好不要用直接访问属性的方式进行判断， 因为不知道这个属性的值可能是 <code>undefined</code>,  或者 <code>0</code> 等导致属性访问后为 <code>false</code> 的值。</p>\n<p>可以使用 <code>hasOwnProperty</code> 的方式来判断属性是否在对象上面:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.hasOwnPropery(prop);</span><br></pre></td></tr></table></figure>\n<p>注意： 这个方法只能够获取到该对象上面的自身属性， 不能获取到该对象原型上面的属性</p>\n<p>（for in 是可以获取到继承的属性的， 并且继承的属性是可枚举的）</p>\n<p>为了防止对象上面有 <code>hasOwnProperty</code> 属性覆盖掉从对象上面继承的， 我们需要通过 <code>Object</code> 来调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.hasOwnProperty.call(obj, &apos;property&apos;);</span><br></pre></td></tr></table></figure>\n"},{"title":"数据结构（一）：线性表","date":"2019-09-21T12:28:52.000Z","_content":"\n## 数据结构简介\n\n> 数据结构是相互之间存在一种或者多种特定关系的数据元素的集合\n\n数据结构分为**逻辑结构**和**物理结构**；\n\n数据对象中数据元素之间的关系称为逻辑结构， 在数据结构中， 存在下面四种逻辑结构：\n\n* 集合结构\n\n  集合结构中的元素除了同属于同一集合之外。 没有其他的任何关系， 如同所示：\n\n  {% asset_image image-20190921203850921-9069530.png%}\n\n  ![](数据结构：线性表/image-20190921203850921-9069530.png)\n\n* 线性结构： 线性结构中的元素是一对一的关系：\n\n  {% asset_image image-顺序表.jpg%}\n\n  ![](数据结构：线性表/image-顺序表.jpg)\n\n* 树形结构：树形结构中的元素关系是一对多的层次关系, 比如： 二叉树\n\n  {% asset_image image-20190921211634571-9071794.png%}\n\n  ![image-20190921211634571](数据结构：线性表/image-20190921211634571-9071794.png)\n\n* 图形结构： 图形结构中的元素之间的关系是一对多的关系\n\n  {% asset_image image-20190921211723626-9071843.png%}\n\n\n\n  ![image-20190921211723626](数据结构：线性表/image-20190921211723626-9071843.png)\n\n物理结构： 是指数据的逻辑结构在计算机中的存储方式；\n\n物理结构包括顺序存储结构和链式存储结构；\n\n顺序存储结构的数据逻辑关系和物理关系是一致的， 即是数据存放在地址连续的存储单元里面；\n\n链式存储结构数据间的存储地址并不连续，数据之间的存储关系并不表示他们之间的逻辑关系，这些数据的地址信息存放在数据的指针中。通过数据的指针来表明数据之间的存储关系。\n\n## 数据结构之线性表\n\n> 线性表是零个或者多个数据元素的有限序列\n\n线性表是一种序列， 这表明线性表中数据的关系之间都是一对一的关系，如果元素存在多个， 那么第一个元素没有前元素， 最后一个元素没有后元素， 其他元素有且只有一个前元素和后元素，\n\n### 线性表的顺序存储结构\n\n顺序存储结构是物理结构和逻辑结构一致的一种结构， 比如， 我们使用一个一维数组来存储数据，实现顺序存储结构；\n\n```js\nlet list  = [1, 2, 3, 4];\n```\n\n在顺序存储结构中， 地址和数据之间的关系是一致的，比如， 我们想要获取 第 i 个元素， 我们可以通过   `list[i - 1]` 来获取数据。\n\n#### 删除和插入元素\n\n当我们需要删除或者插入元素的时候， 对于顺序存储结构需要移动比较多的元素， 当我们需要删除一个元素， 需要将该数据项后面的数据都需要向前提前一位：\n\n```js\n// 从线性表中删除某个数据\nfunction deleteData(list, i) {\n  if (list.length === 0) return list;\n  if (i < 1 || i > list.length) return list;\n  if (i < list.length) {\n    for (let index = i; index < list.length; index ++) {\n      list[index -1] = list[index];\n    }\n  }\n  list.length --;\n  return list;\n}\n\nlet list = [1, 2, 3, 4];\n\nconsole.log(deleteData(list, 2));\n// [1, 3, 4]\n```\n\n对于线性表的插入和删除数据操作，其时间复杂度为 O(n);\n\n#### 优缺点\n\n对于线性表的顺序存储结构， 其优点是：\n\n1. 可以快速的存取表中任意位置的元素\n2. 无须为表中的逻辑关系增加额外的存储空间\n\n缺点：\n\n对于线性表中插入和删除元素操作需要移动大量的元素\n\n### 线性表的链式存储结构\n\n顺序存储结构对于插入和删除元素需要移动大量元素的原因是数据之间的逻辑关系和存储关系一致且相互之间按照次序排列，需要移动大量的元素来保持相互之间的存储关系和逻辑关系的一致。\n\n这种问题可以通过使用链式存储结构来解决，链式存储结果的特点是逻辑关系和存储关系分离， 当逻辑关系改变时， 不会引起存储关系的变化\n\n线性表的链式结构由一个个的节点（Node）构成， 每个节点中包含有一个数据域和一个或者多个指针域， 顾名思义， 数据域用于存储当前节点的数据， 指针域用来存储下一个节点的位置信息， 根据节点中指针域的数量不同， 将链表分为单链表和双链表；\n\n#### 单链表\n\n单链表示意图如下：\n\n{% asset_image image-20190921230012405-9078012.png%}\n\n![image-20190921230012405](数据结构：线性表/image-20190921230012405-9078012.png)\n\n在上图中我们可以看到， 在链表中相邻的数据的存储位置并不连续，数据之间的关系通过节点中的指针域中的地址来表明。\n\n一些要点：\n\n1. 链表中的最后一个节点的指针为空， 我们常常将其置为 `null`\n2. 为了更方便的对于链表进行操作， 我们在第一个节点之前设置一个头节点，这个节点的指针指向第一个节点， 节点中的数据可以包含有链表的长度等信息。\n3. 头指针不为空，是链表的必要元素\n\n链表中节点之间的逻辑关系如图所示：\n\n{% asset_image image-20190921231032685-9078632.png%}\n\n![image-20190921231032685](数据结构：线性表/image-20190921231032685-9078632.png)\n\n##### 单链表的读取\n\n链表中数据的关系是通过指针来表示的，想要读取单链表的数据，我们需要通过指针来操作， 比如读取程序如下:\n\n```js\n// 创建一个新的链表\nfunction linkList() {\n  let list = {\n    data: { length: 0 },\n    next: null\n  };\n  const headNodeData = list.data;\n  const headNode = list;\n  // 链表新增节点\n  this.add = function (value) {\n    let node = { data: value, next: null };\n    let next = list.next;\n    let currentNode = list;\n    while (next) {\n      currentNode = next;\n      next = next.next;\n    }\n    currentNode.next = node;\n    headNodeData.length ++;\n    return list;\n  }\n  // 获取链表中的某个节点\n  this.get = function (i) {\n    if (i < 1 || i > headNodeData.length) return null;\n    let next = list.next;\n    let nodeIndex = 0;\n    while (next) {\n      nodeIndex ++;\n      if (i === nodeIndex) break;\n      next = next.next;\n    }\n    return next;\n  }\n  return this;\n}\n\nlet linkedList = linkList();\nlinkedList.add(1)；\n// { data: { length: 1 }, next: { data: 1, next: null } }\nlinkedList.get(1)；\n// { data: 1, next: null }\n```\n\n单链表的查找数据的核心思想是**工作指针后移**；\n\n##### 单链表的插入和删除\n\n代码如下：\n\n```js\n// 在第 i 个数据后插入元素, 元素值为 value\nthis.append = function (i, value) {\n  const node = this.get(i);\n  if (!node) {\n    console.log('node not exist');\n    return;\n  }\n  const newNode = { data: value, next: null };\n  newNode.next = node.next;\n  node.next = newNode;\n  return list;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.append(1, 2);\n// { data: { length: 1 },\n// next: { data: 1, next: { data: 2, next: null } } }\n```\n\n对于单链表的插入数据项， 我们要做的仅仅是改变相应节点的指针的指向，原理如图所示：\n\n{% asset_image image-20190922101043201-9118243.png%}\n\n\n\n![image-20190922101043201](数据结构：线性表/image-20190922101043201-9118243.png)\n\n我们想要在`p` 节点之后插入节点 `s`, 我们要做的是将 p 节点的指针 `next` 指向要插入的节点， 同时将要插入的节点的指针指向插入前的下一个节点。\n\n注意： 这里的顺序是：\n\n```js\ns.next --> p.next;\np.next --> s;\n```\n\n顺序不可以更换；\n\n插入成功之后的效果如下图所示：\n\n{% asset_image image-20190922101526386-9118526.png%}\n\n![image-20190922101526386](数据结构：线性表/image-20190922101526386-9118526.png)\n\n单链表的删除：\n\n实现单链表的删除功能也是通过指针来完成的，实现原理如下图所示：\n\n{% asset_image image-20190922102047839-9118847.png%}\n\n![image-20190922102047839](数据结构：线性表/image-20190922102047839-9118847.png)\n\n代码如下：\n\n```js\n// 删除第 i 个节点的元素\nthis.delete = function (i) {\n  let nodeNext = ((i - 1 === 0) ? headNode : this.get(i - 1));\n  if (!nodeNext || !nodeNext.next) return false;\n  const deleteNode = nodeNext.next;\n  nodeNext.next =  nodeNext.next.next;\n  headNodeData.length --;\n  deleteNode = null;\n  return true;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.add(2);\nlinkedList.delete(1);\n// { data: { length: 1 }, next: { data: 2, next: null } }\nlinkedList.delete(1);\n// { data: { length: 0 }, next: null }\n```\n\n##### 单链表的整表删除\n\n```js\nthis.deleteAll = function () {\n  let deleteNode = headNode\n  let freeNode;\n  while (deleteNode && deleteNode.next) {\n    freeNode = deleteNode.next;\n    deleteNode.next = null;\n    deleteNode = freeNode;\n    headNodeData.length --;\n  }\n  return true;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.add(2);\nlinkedList.deleteAll();\nconsole.log('list', linkedList.list);\n// { data: { length: 0 }, next: null }\n```\n\n#### 循环链表\n\n> 在单链表中终端节点的指针端由空指针指向头节点，就使得整个单链表形成一个环，这种头尾相接的链表称为循环链表\n\n循环链表如下图所示：\n\n{% asset_image image-20190923224009682-9249609.png%}\n\n![image-20190923224009682](数据结构：线性表/image-20190923224009682-9249609.png)\n\n循环链表相比于单链表不同的地方在于终端节点的指针指向不同的，使用循环链表的作用是可以从一个节点出发，查找到列表中的所有节点。\n\n#### 双向链表\n\n双向链表和单链表的区别在于： 实现双向链表的节点中存在两个指针域，在单链表的基础上，创建另外一个指针指向上一个节点，如下图所示：\n\n{% asset_image image-20190923224650271-9250010.png%}\n\n![image-20190923224650271](数据结构：线性表/image-20190923224650271-9250010.png)\n\n相比于单链表而言， 使用双向链表可以实现在前后两个方向上面的节点查找， 比单链表相比，双向链表可以实现在前后两个方向上面的数据节点查找， 当然缺点是会多出一个指针域来指向上一个节点。\n\n### 对比\n\n如果线性表需要频繁的查找， 很少进行插入和删除工作时， 适合采用顺序存储结构；\n\n如果涉及到频繁的插入和删除数据工作， 那么适合采用链式存储结构","source":"_posts/数据结构：线性表.md","raw":"---\ntitle: 数据结构（一）：线性表\ndate: 2019-09-21 20:28:52\ntags: 线性表\ncategories: 数据结构\n---\n\n## 数据结构简介\n\n> 数据结构是相互之间存在一种或者多种特定关系的数据元素的集合\n\n数据结构分为**逻辑结构**和**物理结构**；\n\n数据对象中数据元素之间的关系称为逻辑结构， 在数据结构中， 存在下面四种逻辑结构：\n\n* 集合结构\n\n  集合结构中的元素除了同属于同一集合之外。 没有其他的任何关系， 如同所示：\n\n  {% asset_image image-20190921203850921-9069530.png%}\n\n  ![](数据结构：线性表/image-20190921203850921-9069530.png)\n\n* 线性结构： 线性结构中的元素是一对一的关系：\n\n  {% asset_image image-顺序表.jpg%}\n\n  ![](数据结构：线性表/image-顺序表.jpg)\n\n* 树形结构：树形结构中的元素关系是一对多的层次关系, 比如： 二叉树\n\n  {% asset_image image-20190921211634571-9071794.png%}\n\n  ![image-20190921211634571](数据结构：线性表/image-20190921211634571-9071794.png)\n\n* 图形结构： 图形结构中的元素之间的关系是一对多的关系\n\n  {% asset_image image-20190921211723626-9071843.png%}\n\n\n\n  ![image-20190921211723626](数据结构：线性表/image-20190921211723626-9071843.png)\n\n物理结构： 是指数据的逻辑结构在计算机中的存储方式；\n\n物理结构包括顺序存储结构和链式存储结构；\n\n顺序存储结构的数据逻辑关系和物理关系是一致的， 即是数据存放在地址连续的存储单元里面；\n\n链式存储结构数据间的存储地址并不连续，数据之间的存储关系并不表示他们之间的逻辑关系，这些数据的地址信息存放在数据的指针中。通过数据的指针来表明数据之间的存储关系。\n\n## 数据结构之线性表\n\n> 线性表是零个或者多个数据元素的有限序列\n\n线性表是一种序列， 这表明线性表中数据的关系之间都是一对一的关系，如果元素存在多个， 那么第一个元素没有前元素， 最后一个元素没有后元素， 其他元素有且只有一个前元素和后元素，\n\n### 线性表的顺序存储结构\n\n顺序存储结构是物理结构和逻辑结构一致的一种结构， 比如， 我们使用一个一维数组来存储数据，实现顺序存储结构；\n\n```js\nlet list  = [1, 2, 3, 4];\n```\n\n在顺序存储结构中， 地址和数据之间的关系是一致的，比如， 我们想要获取 第 i 个元素， 我们可以通过   `list[i - 1]` 来获取数据。\n\n#### 删除和插入元素\n\n当我们需要删除或者插入元素的时候， 对于顺序存储结构需要移动比较多的元素， 当我们需要删除一个元素， 需要将该数据项后面的数据都需要向前提前一位：\n\n```js\n// 从线性表中删除某个数据\nfunction deleteData(list, i) {\n  if (list.length === 0) return list;\n  if (i < 1 || i > list.length) return list;\n  if (i < list.length) {\n    for (let index = i; index < list.length; index ++) {\n      list[index -1] = list[index];\n    }\n  }\n  list.length --;\n  return list;\n}\n\nlet list = [1, 2, 3, 4];\n\nconsole.log(deleteData(list, 2));\n// [1, 3, 4]\n```\n\n对于线性表的插入和删除数据操作，其时间复杂度为 O(n);\n\n#### 优缺点\n\n对于线性表的顺序存储结构， 其优点是：\n\n1. 可以快速的存取表中任意位置的元素\n2. 无须为表中的逻辑关系增加额外的存储空间\n\n缺点：\n\n对于线性表中插入和删除元素操作需要移动大量的元素\n\n### 线性表的链式存储结构\n\n顺序存储结构对于插入和删除元素需要移动大量元素的原因是数据之间的逻辑关系和存储关系一致且相互之间按照次序排列，需要移动大量的元素来保持相互之间的存储关系和逻辑关系的一致。\n\n这种问题可以通过使用链式存储结构来解决，链式存储结果的特点是逻辑关系和存储关系分离， 当逻辑关系改变时， 不会引起存储关系的变化\n\n线性表的链式结构由一个个的节点（Node）构成， 每个节点中包含有一个数据域和一个或者多个指针域， 顾名思义， 数据域用于存储当前节点的数据， 指针域用来存储下一个节点的位置信息， 根据节点中指针域的数量不同， 将链表分为单链表和双链表；\n\n#### 单链表\n\n单链表示意图如下：\n\n{% asset_image image-20190921230012405-9078012.png%}\n\n![image-20190921230012405](数据结构：线性表/image-20190921230012405-9078012.png)\n\n在上图中我们可以看到， 在链表中相邻的数据的存储位置并不连续，数据之间的关系通过节点中的指针域中的地址来表明。\n\n一些要点：\n\n1. 链表中的最后一个节点的指针为空， 我们常常将其置为 `null`\n2. 为了更方便的对于链表进行操作， 我们在第一个节点之前设置一个头节点，这个节点的指针指向第一个节点， 节点中的数据可以包含有链表的长度等信息。\n3. 头指针不为空，是链表的必要元素\n\n链表中节点之间的逻辑关系如图所示：\n\n{% asset_image image-20190921231032685-9078632.png%}\n\n![image-20190921231032685](数据结构：线性表/image-20190921231032685-9078632.png)\n\n##### 单链表的读取\n\n链表中数据的关系是通过指针来表示的，想要读取单链表的数据，我们需要通过指针来操作， 比如读取程序如下:\n\n```js\n// 创建一个新的链表\nfunction linkList() {\n  let list = {\n    data: { length: 0 },\n    next: null\n  };\n  const headNodeData = list.data;\n  const headNode = list;\n  // 链表新增节点\n  this.add = function (value) {\n    let node = { data: value, next: null };\n    let next = list.next;\n    let currentNode = list;\n    while (next) {\n      currentNode = next;\n      next = next.next;\n    }\n    currentNode.next = node;\n    headNodeData.length ++;\n    return list;\n  }\n  // 获取链表中的某个节点\n  this.get = function (i) {\n    if (i < 1 || i > headNodeData.length) return null;\n    let next = list.next;\n    let nodeIndex = 0;\n    while (next) {\n      nodeIndex ++;\n      if (i === nodeIndex) break;\n      next = next.next;\n    }\n    return next;\n  }\n  return this;\n}\n\nlet linkedList = linkList();\nlinkedList.add(1)；\n// { data: { length: 1 }, next: { data: 1, next: null } }\nlinkedList.get(1)；\n// { data: 1, next: null }\n```\n\n单链表的查找数据的核心思想是**工作指针后移**；\n\n##### 单链表的插入和删除\n\n代码如下：\n\n```js\n// 在第 i 个数据后插入元素, 元素值为 value\nthis.append = function (i, value) {\n  const node = this.get(i);\n  if (!node) {\n    console.log('node not exist');\n    return;\n  }\n  const newNode = { data: value, next: null };\n  newNode.next = node.next;\n  node.next = newNode;\n  return list;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.append(1, 2);\n// { data: { length: 1 },\n// next: { data: 1, next: { data: 2, next: null } } }\n```\n\n对于单链表的插入数据项， 我们要做的仅仅是改变相应节点的指针的指向，原理如图所示：\n\n{% asset_image image-20190922101043201-9118243.png%}\n\n\n\n![image-20190922101043201](数据结构：线性表/image-20190922101043201-9118243.png)\n\n我们想要在`p` 节点之后插入节点 `s`, 我们要做的是将 p 节点的指针 `next` 指向要插入的节点， 同时将要插入的节点的指针指向插入前的下一个节点。\n\n注意： 这里的顺序是：\n\n```js\ns.next --> p.next;\np.next --> s;\n```\n\n顺序不可以更换；\n\n插入成功之后的效果如下图所示：\n\n{% asset_image image-20190922101526386-9118526.png%}\n\n![image-20190922101526386](数据结构：线性表/image-20190922101526386-9118526.png)\n\n单链表的删除：\n\n实现单链表的删除功能也是通过指针来完成的，实现原理如下图所示：\n\n{% asset_image image-20190922102047839-9118847.png%}\n\n![image-20190922102047839](数据结构：线性表/image-20190922102047839-9118847.png)\n\n代码如下：\n\n```js\n// 删除第 i 个节点的元素\nthis.delete = function (i) {\n  let nodeNext = ((i - 1 === 0) ? headNode : this.get(i - 1));\n  if (!nodeNext || !nodeNext.next) return false;\n  const deleteNode = nodeNext.next;\n  nodeNext.next =  nodeNext.next.next;\n  headNodeData.length --;\n  deleteNode = null;\n  return true;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.add(2);\nlinkedList.delete(1);\n// { data: { length: 1 }, next: { data: 2, next: null } }\nlinkedList.delete(1);\n// { data: { length: 0 }, next: null }\n```\n\n##### 单链表的整表删除\n\n```js\nthis.deleteAll = function () {\n  let deleteNode = headNode\n  let freeNode;\n  while (deleteNode && deleteNode.next) {\n    freeNode = deleteNode.next;\n    deleteNode.next = null;\n    deleteNode = freeNode;\n    headNodeData.length --;\n  }\n  return true;\n}\nlet linkedList = linkList();\nlinkedList.add(1);\nlinkedList.add(2);\nlinkedList.deleteAll();\nconsole.log('list', linkedList.list);\n// { data: { length: 0 }, next: null }\n```\n\n#### 循环链表\n\n> 在单链表中终端节点的指针端由空指针指向头节点，就使得整个单链表形成一个环，这种头尾相接的链表称为循环链表\n\n循环链表如下图所示：\n\n{% asset_image image-20190923224009682-9249609.png%}\n\n![image-20190923224009682](数据结构：线性表/image-20190923224009682-9249609.png)\n\n循环链表相比于单链表不同的地方在于终端节点的指针指向不同的，使用循环链表的作用是可以从一个节点出发，查找到列表中的所有节点。\n\n#### 双向链表\n\n双向链表和单链表的区别在于： 实现双向链表的节点中存在两个指针域，在单链表的基础上，创建另外一个指针指向上一个节点，如下图所示：\n\n{% asset_image image-20190923224650271-9250010.png%}\n\n![image-20190923224650271](数据结构：线性表/image-20190923224650271-9250010.png)\n\n相比于单链表而言， 使用双向链表可以实现在前后两个方向上面的节点查找， 比单链表相比，双向链表可以实现在前后两个方向上面的数据节点查找， 当然缺点是会多出一个指针域来指向上一个节点。\n\n### 对比\n\n如果线性表需要频繁的查找， 很少进行插入和删除工作时， 适合采用顺序存储结构；\n\n如果涉及到频繁的插入和删除数据工作， 那么适合采用链式存储结构","slug":"数据结构：线性表","published":1,"updated":"2020-09-14T06:36:26.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t92005mi2osn058vn5o","content":"<h2 id=\"数据结构简介\"><a href=\"#数据结构简介\" class=\"headerlink\" title=\"数据结构简介\"></a>数据结构简介</h2><blockquote>\n<p>数据结构是相互之间存在一种或者多种特定关系的数据元素的集合</p>\n</blockquote>\n<p>数据结构分为<strong>逻辑结构</strong>和<strong>物理结构</strong>；</p>\n<p>数据对象中数据元素之间的关系称为逻辑结构， 在数据结构中， 存在下面四种逻辑结构：</p>\n<ul>\n<li><p>集合结构</p>\n<p>集合结构中的元素除了同属于同一集合之外。 没有其他的任何关系， 如同所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921203850921-9069530.png\">\n<p><img src=\"数据结构：线性表/image-20190921203850921-9069530.png\" alt></p>\n</li>\n<li><p>线性结构： 线性结构中的元素是一对一的关系：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-顺序表.jpg\">\n<p><img src=\"数据结构：线性表/image-顺序表.jpg\" alt></p>\n</li>\n<li><p>树形结构：树形结构中的元素关系是一对多的层次关系, 比如： 二叉树</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921211634571-9071794.png\">\n<p><img src=\"数据结构：线性表/image-20190921211634571-9071794.png\" alt=\"image-20190921211634571\"></p>\n</li>\n<li><p>图形结构： 图形结构中的元素之间的关系是一对多的关系</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921211723626-9071843.png\">\n</li>\n</ul>\n<p>  <img src=\"数据结构：线性表/image-20190921211723626-9071843.png\" alt=\"image-20190921211723626\"></p>\n<p>物理结构： 是指数据的逻辑结构在计算机中的存储方式；</p>\n<p>物理结构包括顺序存储结构和链式存储结构；</p>\n<p>顺序存储结构的数据逻辑关系和物理关系是一致的， 即是数据存放在地址连续的存储单元里面；</p>\n<p>链式存储结构数据间的存储地址并不连续，数据之间的存储关系并不表示他们之间的逻辑关系，这些数据的地址信息存放在数据的指针中。通过数据的指针来表明数据之间的存储关系。</p>\n<h2 id=\"数据结构之线性表\"><a href=\"#数据结构之线性表\" class=\"headerlink\" title=\"数据结构之线性表\"></a>数据结构之线性表</h2><blockquote>\n<p>线性表是零个或者多个数据元素的有限序列</p>\n</blockquote>\n<p>线性表是一种序列， 这表明线性表中数据的关系之间都是一对一的关系，如果元素存在多个， 那么第一个元素没有前元素， 最后一个元素没有后元素， 其他元素有且只有一个前元素和后元素，</p>\n<h3 id=\"线性表的顺序存储结构\"><a href=\"#线性表的顺序存储结构\" class=\"headerlink\" title=\"线性表的顺序存储结构\"></a>线性表的顺序存储结构</h3><p>顺序存储结构是物理结构和逻辑结构一致的一种结构， 比如， 我们使用一个一维数组来存储数据，实现顺序存储结构；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list  = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<p>在顺序存储结构中， 地址和数据之间的关系是一致的，比如， 我们想要获取 第 i 个元素， 我们可以通过   <code>list[i - 1]</code> 来获取数据。</p>\n<h4 id=\"删除和插入元素\"><a href=\"#删除和插入元素\" class=\"headerlink\" title=\"删除和插入元素\"></a>删除和插入元素</h4><p>当我们需要删除或者插入元素的时候， 对于顺序存储结构需要移动比较多的元素， 当我们需要删除一个元素， 需要将该数据项后面的数据都需要向前提前一位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从线性表中删除某个数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteData</span>(<span class=\"params\">list, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; list.length) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; list.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = i; index &lt; list.length; index ++) &#123;</span><br><span class=\"line\">      list[index <span class=\"number\">-1</span>] = list[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  list.length --;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deleteData(list, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>对于线性表的插入和删除数据操作，其时间复杂度为 O(n);</p>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>对于线性表的顺序存储结构， 其优点是：</p>\n<ol>\n<li>可以快速的存取表中任意位置的元素</li>\n<li>无须为表中的逻辑关系增加额外的存储空间</li>\n</ol>\n<p>缺点：</p>\n<p>对于线性表中插入和删除元素操作需要移动大量的元素</p>\n<h3 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h3><p>顺序存储结构对于插入和删除元素需要移动大量元素的原因是数据之间的逻辑关系和存储关系一致且相互之间按照次序排列，需要移动大量的元素来保持相互之间的存储关系和逻辑关系的一致。</p>\n<p>这种问题可以通过使用链式存储结构来解决，链式存储结果的特点是逻辑关系和存储关系分离， 当逻辑关系改变时， 不会引起存储关系的变化</p>\n<p>线性表的链式结构由一个个的节点（Node）构成， 每个节点中包含有一个数据域和一个或者多个指针域， 顾名思义， 数据域用于存储当前节点的数据， 指针域用来存储下一个节点的位置信息， 根据节点中指针域的数量不同， 将链表分为单链表和双链表；</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>单链表示意图如下：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921230012405-9078012.png\">\n<p><img src=\"数据结构：线性表/image-20190921230012405-9078012.png\" alt=\"image-20190921230012405\"></p>\n<p>在上图中我们可以看到， 在链表中相邻的数据的存储位置并不连续，数据之间的关系通过节点中的指针域中的地址来表明。</p>\n<p>一些要点：</p>\n<ol>\n<li>链表中的最后一个节点的指针为空， 我们常常将其置为 <code>null</code></li>\n<li>为了更方便的对于链表进行操作， 我们在第一个节点之前设置一个头节点，这个节点的指针指向第一个节点， 节点中的数据可以包含有链表的长度等信息。</li>\n<li>头指针不为空，是链表的必要元素</li>\n</ol>\n<p>链表中节点之间的逻辑关系如图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921231032685-9078632.png\">\n<p><img src=\"数据结构：线性表/image-20190921231032685-9078632.png\" alt=\"image-20190921231032685\"></p>\n<h5 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h5><p>链表中数据的关系是通过指针来表示的，想要读取单链表的数据，我们需要通过指针来操作， 比如读取程序如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">    data: &#123; <span class=\"attr\">length</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">    next: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> headNodeData = list.data;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> headNode = list;</span><br><span class=\"line\">  <span class=\"comment\">// 链表新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = &#123; <span class=\"attr\">data</span>: value, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = list.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (next) &#123;</span><br><span class=\"line\">      currentNode = next;</span><br><span class=\"line\">      next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentNode.next = node;</span><br><span class=\"line\">    headNodeData.length ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取链表中的某个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; headNodeData.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = list.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (next) &#123;</span><br><span class=\"line\">      nodeIndex ++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === nodeIndex) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>)；</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;, next: &#123; data: 1, next: null &#125; &#125;</span></span><br><span class=\"line\">linkedList.get(<span class=\"number\">1</span>)；</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: 1, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<p>单链表的查找数据的核心思想是<strong>工作指针后移</strong>；</p>\n<h5 id=\"单链表的插入和删除\"><a href=\"#单链表的插入和删除\" class=\"headerlink\" title=\"单链表的插入和删除\"></a>单链表的插入和删除</h5><p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在第 i 个数据后插入元素, 元素值为 value</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"keyword\">this</span>.get(i);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'node not exist'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = &#123; <span class=\"attr\">data</span>: value, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  newNode.next = node.next;</span><br><span class=\"line\">  node.next = newNode;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.append(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// next: &#123; data: 1, next: &#123; data: 2, next: null &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于单链表的插入数据项， 我们要做的仅仅是改变相应节点的指针的指向，原理如图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922101043201-9118243.png\">\n<p><img src=\"数据结构：线性表/image-20190922101043201-9118243.png\" alt=\"image-20190922101043201\"></p>\n<p>我们想要在<code>p</code> 节点之后插入节点 <code>s</code>, 我们要做的是将 p 节点的指针 <code>next</code> 指向要插入的节点， 同时将要插入的节点的指针指向插入前的下一个节点。</p>\n<p>注意： 这里的顺序是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.next --&gt; p.next;</span><br><span class=\"line\">p.next --&gt; s;</span><br></pre></td></tr></table></figure>\n<p>顺序不可以更换；</p>\n<p>插入成功之后的效果如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922101526386-9118526.png\">\n<p><img src=\"数据结构：线性表/image-20190922101526386-9118526.png\" alt=\"image-20190922101526386\"></p>\n<p>单链表的删除：</p>\n<p>实现单链表的删除功能也是通过指针来完成的，实现原理如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922102047839-9118847.png\">\n<p><img src=\"数据结构：线性表/image-20190922102047839-9118847.png\" alt=\"image-20190922102047839\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除第 i 个节点的元素</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.delete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nodeNext = ((i - <span class=\"number\">1</span> === <span class=\"number\">0</span>) ? headNode : <span class=\"keyword\">this</span>.get(i - <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nodeNext || !nodeNext.next) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deleteNode = nodeNext.next;</span><br><span class=\"line\">  nodeNext.next =  nodeNext.next.next;</span><br><span class=\"line\">  headNodeData.length --;</span><br><span class=\"line\">  deleteNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">linkedList.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;, next: &#123; data: 2, next: null &#125; &#125;</span></span><br><span class=\"line\">linkedList.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 0 &#125;, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"单链表的整表删除\"><a href=\"#单链表的整表删除\" class=\"headerlink\" title=\"单链表的整表删除\"></a>单链表的整表删除</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.deleteAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> deleteNode = headNode</span><br><span class=\"line\">  <span class=\"keyword\">let</span> freeNode;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (deleteNode &amp;&amp; deleteNode.next) &#123;</span><br><span class=\"line\">    freeNode = deleteNode.next;</span><br><span class=\"line\">    deleteNode.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    deleteNode = freeNode;</span><br><span class=\"line\">    headNodeData.length --;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">linkedList.deleteAll();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list'</span>, linkedList.list);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 0 &#125;, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><blockquote>\n<p>在单链表中终端节点的指针端由空指针指向头节点，就使得整个单链表形成一个环，这种头尾相接的链表称为循环链表</p>\n</blockquote>\n<p>循环链表如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190923224009682-9249609.png\">\n<p><img src=\"数据结构：线性表/image-20190923224009682-9249609.png\" alt=\"image-20190923224009682\"></p>\n<p>循环链表相比于单链表不同的地方在于终端节点的指针指向不同的，使用循环链表的作用是可以从一个节点出发，查找到列表中的所有节点。</p>\n<h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><p>双向链表和单链表的区别在于： 实现双向链表的节点中存在两个指针域，在单链表的基础上，创建另外一个指针指向上一个节点，如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190923224650271-9250010.png\">\n<p><img src=\"数据结构：线性表/image-20190923224650271-9250010.png\" alt=\"image-20190923224650271\"></p>\n<p>相比于单链表而言， 使用双向链表可以实现在前后两个方向上面的节点查找， 比单链表相比，双向链表可以实现在前后两个方向上面的数据节点查找， 当然缺点是会多出一个指针域来指向上一个节点。</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>如果线性表需要频繁的查找， 很少进行插入和删除工作时， 适合采用顺序存储结构；</p>\n<p>如果涉及到频繁的插入和删除数据工作， 那么适合采用链式存储结构</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构简介\"><a href=\"#数据结构简介\" class=\"headerlink\" title=\"数据结构简介\"></a>数据结构简介</h2><blockquote>\n<p>数据结构是相互之间存在一种或者多种特定关系的数据元素的集合</p>\n</blockquote>\n<p>数据结构分为<strong>逻辑结构</strong>和<strong>物理结构</strong>；</p>\n<p>数据对象中数据元素之间的关系称为逻辑结构， 在数据结构中， 存在下面四种逻辑结构：</p>\n<ul>\n<li><p>集合结构</p>\n<p>集合结构中的元素除了同属于同一集合之外。 没有其他的任何关系， 如同所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921203850921-9069530.png\">\n<p><img src=\"数据结构：线性表/image-20190921203850921-9069530.png\" alt></p>\n</li>\n<li><p>线性结构： 线性结构中的元素是一对一的关系：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-顺序表.jpg\">\n<p><img src=\"数据结构：线性表/image-顺序表.jpg\" alt></p>\n</li>\n<li><p>树形结构：树形结构中的元素关系是一对多的层次关系, 比如： 二叉树</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921211634571-9071794.png\">\n<p><img src=\"数据结构：线性表/image-20190921211634571-9071794.png\" alt=\"image-20190921211634571\"></p>\n</li>\n<li><p>图形结构： 图形结构中的元素之间的关系是一对多的关系</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921211723626-9071843.png\">\n</li>\n</ul>\n<p>  <img src=\"数据结构：线性表/image-20190921211723626-9071843.png\" alt=\"image-20190921211723626\"></p>\n<p>物理结构： 是指数据的逻辑结构在计算机中的存储方式；</p>\n<p>物理结构包括顺序存储结构和链式存储结构；</p>\n<p>顺序存储结构的数据逻辑关系和物理关系是一致的， 即是数据存放在地址连续的存储单元里面；</p>\n<p>链式存储结构数据间的存储地址并不连续，数据之间的存储关系并不表示他们之间的逻辑关系，这些数据的地址信息存放在数据的指针中。通过数据的指针来表明数据之间的存储关系。</p>\n<h2 id=\"数据结构之线性表\"><a href=\"#数据结构之线性表\" class=\"headerlink\" title=\"数据结构之线性表\"></a>数据结构之线性表</h2><blockquote>\n<p>线性表是零个或者多个数据元素的有限序列</p>\n</blockquote>\n<p>线性表是一种序列， 这表明线性表中数据的关系之间都是一对一的关系，如果元素存在多个， 那么第一个元素没有前元素， 最后一个元素没有后元素， 其他元素有且只有一个前元素和后元素，</p>\n<h3 id=\"线性表的顺序存储结构\"><a href=\"#线性表的顺序存储结构\" class=\"headerlink\" title=\"线性表的顺序存储结构\"></a>线性表的顺序存储结构</h3><p>顺序存储结构是物理结构和逻辑结构一致的一种结构， 比如， 我们使用一个一维数组来存储数据，实现顺序存储结构；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list  = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<p>在顺序存储结构中， 地址和数据之间的关系是一致的，比如， 我们想要获取 第 i 个元素， 我们可以通过   <code>list[i - 1]</code> 来获取数据。</p>\n<h4 id=\"删除和插入元素\"><a href=\"#删除和插入元素\" class=\"headerlink\" title=\"删除和插入元素\"></a>删除和插入元素</h4><p>当我们需要删除或者插入元素的时候， 对于顺序存储结构需要移动比较多的元素， 当我们需要删除一个元素， 需要将该数据项后面的数据都需要向前提前一位：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从线性表中删除某个数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteData</span>(<span class=\"params\">list, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; list.length) <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; list.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = i; index &lt; list.length; index ++) &#123;</span><br><span class=\"line\">      list[index <span class=\"number\">-1</span>] = list[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  list.length --;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deleteData(list, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>对于线性表的插入和删除数据操作，其时间复杂度为 O(n);</p>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p>对于线性表的顺序存储结构， 其优点是：</p>\n<ol>\n<li>可以快速的存取表中任意位置的元素</li>\n<li>无须为表中的逻辑关系增加额外的存储空间</li>\n</ol>\n<p>缺点：</p>\n<p>对于线性表中插入和删除元素操作需要移动大量的元素</p>\n<h3 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h3><p>顺序存储结构对于插入和删除元素需要移动大量元素的原因是数据之间的逻辑关系和存储关系一致且相互之间按照次序排列，需要移动大量的元素来保持相互之间的存储关系和逻辑关系的一致。</p>\n<p>这种问题可以通过使用链式存储结构来解决，链式存储结果的特点是逻辑关系和存储关系分离， 当逻辑关系改变时， 不会引起存储关系的变化</p>\n<p>线性表的链式结构由一个个的节点（Node）构成， 每个节点中包含有一个数据域和一个或者多个指针域， 顾名思义， 数据域用于存储当前节点的数据， 指针域用来存储下一个节点的位置信息， 根据节点中指针域的数量不同， 将链表分为单链表和双链表；</p>\n<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><p>单链表示意图如下：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921230012405-9078012.png\">\n<p><img src=\"数据结构：线性表/image-20190921230012405-9078012.png\" alt=\"image-20190921230012405\"></p>\n<p>在上图中我们可以看到， 在链表中相邻的数据的存储位置并不连续，数据之间的关系通过节点中的指针域中的地址来表明。</p>\n<p>一些要点：</p>\n<ol>\n<li>链表中的最后一个节点的指针为空， 我们常常将其置为 <code>null</code></li>\n<li>为了更方便的对于链表进行操作， 我们在第一个节点之前设置一个头节点，这个节点的指针指向第一个节点， 节点中的数据可以包含有链表的长度等信息。</li>\n<li>头指针不为空，是链表的必要元素</li>\n</ol>\n<p>链表中节点之间的逻辑关系如图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190921231032685-9078632.png\">\n<p><img src=\"数据结构：线性表/image-20190921231032685-9078632.png\" alt=\"image-20190921231032685\"></p>\n<h5 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h5><p>链表中数据的关系是通过指针来表示的，想要读取单链表的数据，我们需要通过指针来操作， 比如读取程序如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">    data: &#123; <span class=\"attr\">length</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">    next: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> headNodeData = list.data;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> headNode = list;</span><br><span class=\"line\">  <span class=\"comment\">// 链表新增节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = &#123; <span class=\"attr\">data</span>: value, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = list.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentNode = list;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (next) &#123;</span><br><span class=\"line\">      currentNode = next;</span><br><span class=\"line\">      next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    currentNode.next = node;</span><br><span class=\"line\">    headNodeData.length ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取链表中的某个节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; headNodeData.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = list.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodeIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (next) &#123;</span><br><span class=\"line\">      nodeIndex ++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === nodeIndex) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>)；</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;, next: &#123; data: 1, next: null &#125; &#125;</span></span><br><span class=\"line\">linkedList.get(<span class=\"number\">1</span>)；</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: 1, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<p>单链表的查找数据的核心思想是<strong>工作指针后移</strong>；</p>\n<h5 id=\"单链表的插入和删除\"><a href=\"#单链表的插入和删除\" class=\"headerlink\" title=\"单链表的插入和删除\"></a>单链表的插入和删除</h5><p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在第 i 个数据后插入元素, 元素值为 value</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"keyword\">this</span>.get(i);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'node not exist'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newNode = &#123; <span class=\"attr\">data</span>: value, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  newNode.next = node.next;</span><br><span class=\"line\">  node.next = newNode;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.append(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// next: &#123; data: 1, next: &#123; data: 2, next: null &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于单链表的插入数据项， 我们要做的仅仅是改变相应节点的指针的指向，原理如图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922101043201-9118243.png\">\n<p><img src=\"数据结构：线性表/image-20190922101043201-9118243.png\" alt=\"image-20190922101043201\"></p>\n<p>我们想要在<code>p</code> 节点之后插入节点 <code>s</code>, 我们要做的是将 p 节点的指针 <code>next</code> 指向要插入的节点， 同时将要插入的节点的指针指向插入前的下一个节点。</p>\n<p>注意： 这里的顺序是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.next --&gt; p.next;</span><br><span class=\"line\">p.next --&gt; s;</span><br></pre></td></tr></table></figure>\n<p>顺序不可以更换；</p>\n<p>插入成功之后的效果如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922101526386-9118526.png\">\n<p><img src=\"数据结构：线性表/image-20190922101526386-9118526.png\" alt=\"image-20190922101526386\"></p>\n<p>单链表的删除：</p>\n<p>实现单链表的删除功能也是通过指针来完成的，实现原理如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190922102047839-9118847.png\">\n<p><img src=\"数据结构：线性表/image-20190922102047839-9118847.png\" alt=\"image-20190922102047839\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除第 i 个节点的元素</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.delete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nodeNext = ((i - <span class=\"number\">1</span> === <span class=\"number\">0</span>) ? headNode : <span class=\"keyword\">this</span>.get(i - <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nodeNext || !nodeNext.next) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deleteNode = nodeNext.next;</span><br><span class=\"line\">  nodeNext.next =  nodeNext.next.next;</span><br><span class=\"line\">  headNodeData.length --;</span><br><span class=\"line\">  deleteNode = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">linkedList.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 1 &#125;, next: &#123; data: 2, next: null &#125; &#125;</span></span><br><span class=\"line\">linkedList.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 0 &#125;, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"单链表的整表删除\"><a href=\"#单链表的整表删除\" class=\"headerlink\" title=\"单链表的整表删除\"></a>单链表的整表删除</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.deleteAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> deleteNode = headNode</span><br><span class=\"line\">  <span class=\"keyword\">let</span> freeNode;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (deleteNode &amp;&amp; deleteNode.next) &#123;</span><br><span class=\"line\">    freeNode = deleteNode.next;</span><br><span class=\"line\">    deleteNode.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    deleteNode = freeNode;</span><br><span class=\"line\">    headNodeData.length --;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> linkedList = linkList();</span><br><span class=\"line\">linkedList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">linkedList.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">linkedList.deleteAll();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list'</span>, linkedList.list);</span><br><span class=\"line\"><span class=\"comment\">// &#123; data: &#123; length: 0 &#125;, next: null &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h4><blockquote>\n<p>在单链表中终端节点的指针端由空指针指向头节点，就使得整个单链表形成一个环，这种头尾相接的链表称为循环链表</p>\n</blockquote>\n<p>循环链表如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190923224009682-9249609.png\">\n<p><img src=\"数据结构：线性表/image-20190923224009682-9249609.png\" alt=\"image-20190923224009682\"></p>\n<p>循环链表相比于单链表不同的地方在于终端节点的指针指向不同的，使用循环链表的作用是可以从一个节点出发，查找到列表中的所有节点。</p>\n<h4 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h4><p>双向链表和单链表的区别在于： 实现双向链表的节点中存在两个指针域，在单链表的基础上，创建另外一个指针指向上一个节点，如下图所示：</p>\n<img src=\"/2019/09/21/数据结构：线性表/image-20190923224650271-9250010.png\">\n<p><img src=\"数据结构：线性表/image-20190923224650271-9250010.png\" alt=\"image-20190923224650271\"></p>\n<p>相比于单链表而言， 使用双向链表可以实现在前后两个方向上面的节点查找， 比单链表相比，双向链表可以实现在前后两个方向上面的数据节点查找， 当然缺点是会多出一个指针域来指向上一个节点。</p>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p>如果线性表需要频繁的查找， 很少进行插入和删除工作时， 适合采用顺序存储结构；</p>\n<p>如果涉及到频繁的插入和删除数据工作， 那么适合采用链式存储结构</p>\n"},{"title":"正则表达式（一）：理论基础部分","date":"2018-12-15T06:55:14.000Z","_content":"\n在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；\n\n正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。\n\n### 创建正则表达式的两种方式：\n\n创建两种正则表达式有两种方法：\n\n1. `let reg = new RegExp(pattern[, flags])`\n2. `let reg = /pattern/flags`\n\n上面两种方法创建正则除了包含有一个表达式 `pattern` 之外， 还包括一个可选的 `flags`  字段， 这个字段包含有几种字段：\n\n- g： 全局匹配正则表达式\n- i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。\n- m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值\n\n通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： `exec`, `match` `test` 等方法。\n\n###  元字符\n\n正则表达式中的元字符是用来匹配**一个位置**或者**字符集合**中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；\n\n匹配位置的元字符：\n\n| 元字符  | 含义                           |\n| ---- | ---------------------------- |\n| `^`  | 匹配行的开始位置                     |\n| `$`  | 匹配行的结束位置                     |\n| `\\b` | 可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处 |\n\n匹配字符的元字符：\n\n| 元字符  | 含义                         |\n| ---- | -------------------------- |\n| `.`  | 匹配除换行符之外的任意字符              |\n| `\\w` | 匹配单词字符（包括字母， 数字，下划线和汉字）    |\n| `\\W` | 匹配任意的非单词字符（和 `\\w`） 相反      |\n| `\\s` | 匹配任意的空白字符， 比如空格符， 制表符或者换行符 |\n| `\\S` | 匹配任意的非空白符                  |\n| `\\d` | 用于匹配任意的数字                  |\n| `\\D` | 用于匹配任意的非数字字符               |\n\n###  字符类\n\n字符类是一个字符集合， 使用方括号 `[]` 定义， 表示匹配到方括号中的任意一个：\n\n*注意： 除了 `-` 以及 `^` (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义*\n\n例如：\n\n```haskell\n/<H[123456]>/\n```\n\n表示匹配 `H1` `H2` ... `H6`  中的任意一个标签\n\n在方括号中可以使用 `-` 用作连接符表示字符的范围：\n\n`[0-9]` 表示匹配 0 到 9  范围类的数字\n\n`[a-z]` 表示匹配 a 到 z 范围内的小写字母\n\n`[a-zA-Z]` 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母\n\n在方括号中当 `^` 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：\n\n```javascript\n/[^0-8]/.test(9); // true\n```\n\n要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：\n\n```js\n/[a\\-c]/.test('-');\n// true\n```\n\n\n\n### 限定符\n\n使用字符类方括号 `[]` 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：\n\n限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 \n\n对于限定符有下面几种情况 ：\n\n对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 `?` 表示懒惰匹配；\n\n| 字符或者表达式  | 说明                    |\n| -------- | --------------------- |\n| `{n}`    | 重复 n 次                |\n| `{n, }`  | 表示至少重复 n 次            |\n| `{n, m}` | 重复至少n 次， 至多 m 次       |\n| `*`      | 重复至少0次， 等同于 `{0, }`   |\n| `+`      | 重复至少 1 次， 等同于 `{1, }` |\n| `?`      | 重复 0 次 或者 1           |\n\n例如：\n\n```javascript\nconst reg = /a.*b/;\n\"aabab\".match(reg); // aabab\n\nconst reg = /a.{0,1}b/;\n\"aabab\".match(reg); // aab\n```\n\n使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。\n\n例如：\n\n```javascript\nconst reg1 = /a.+b/;\nconst reg2 = /a.+?b/;\nconst str = \"avbaab\";\n\n// 贪婪匹配\nstr.match(reg1);  // avbaab\n// 懒惰匹配\nstr.match(reg2); // avb\n```\n\n\n\n### 替换\n\n在正则表达式中 `|` 用于表示当字符串匹配了 `|` 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，\n\n类似于 js 中的 `||` 操作符， 当 `|` 左边的正则不匹配， 那么进行右边的正则匹配。\n\n```javascript\nlet reg1 = \\d{5} - \\d{3} | d{5}; // 同时可以匹配 12345-678 或者 12345\n```\n\n> 注意： 使用 `|` 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。\n>\n> ```js\n> let str = 'goodbye';\n> // | 两边不能有空格\n> let regex = /goodbye|good/g;\n> str.match(regex); // ['goodbye']\n> ```\n\n### 分组\n\n使用 `()` 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配\n\n例如：\n\n```javascript\n// 匹配一个 ip 地址\nlet reg = /(\\d{1,3}\\.){3}/d{1,3}/;\n```\n\n### 总结\n\n在正则中使用 `[]` 以及 `|` 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：\n\n| 描述符 | 优点                                                         | 缺点                                                         |\n| ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `[]`   | 适合单个字符之间的匹配， 需要转义的特殊字符比较少（`^`  和 `-`） | 不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用`^`） 两种逻辑 |\n| 竖直   | 可以匹配多个字符的字符串                                     | 当匹配正则中的特殊字符的时候需要进行转义                     |\n\n\n\n","source":"_posts/正则表达式（一）：理论基础部分.md","raw":"---\ntitle: 正则表达式（一）：理论基础部分\ndate: 2018-12-15 14:55:14\ntags: 正则表达式\ncategories: js\n---\n\n在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；\n\n正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。\n\n### 创建正则表达式的两种方式：\n\n创建两种正则表达式有两种方法：\n\n1. `let reg = new RegExp(pattern[, flags])`\n2. `let reg = /pattern/flags`\n\n上面两种方法创建正则除了包含有一个表达式 `pattern` 之外， 还包括一个可选的 `flags`  字段， 这个字段包含有几种字段：\n\n- g： 全局匹配正则表达式\n- i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。\n- m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值\n\n通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： `exec`, `match` `test` 等方法。\n\n###  元字符\n\n正则表达式中的元字符是用来匹配**一个位置**或者**字符集合**中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；\n\n匹配位置的元字符：\n\n| 元字符  | 含义                           |\n| ---- | ---------------------------- |\n| `^`  | 匹配行的开始位置                     |\n| `$`  | 匹配行的结束位置                     |\n| `\\b` | 可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处 |\n\n匹配字符的元字符：\n\n| 元字符  | 含义                         |\n| ---- | -------------------------- |\n| `.`  | 匹配除换行符之外的任意字符              |\n| `\\w` | 匹配单词字符（包括字母， 数字，下划线和汉字）    |\n| `\\W` | 匹配任意的非单词字符（和 `\\w`） 相反      |\n| `\\s` | 匹配任意的空白字符， 比如空格符， 制表符或者换行符 |\n| `\\S` | 匹配任意的非空白符                  |\n| `\\d` | 用于匹配任意的数字                  |\n| `\\D` | 用于匹配任意的非数字字符               |\n\n###  字符类\n\n字符类是一个字符集合， 使用方括号 `[]` 定义， 表示匹配到方括号中的任意一个：\n\n*注意： 除了 `-` 以及 `^` (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义*\n\n例如：\n\n```haskell\n/<H[123456]>/\n```\n\n表示匹配 `H1` `H2` ... `H6`  中的任意一个标签\n\n在方括号中可以使用 `-` 用作连接符表示字符的范围：\n\n`[0-9]` 表示匹配 0 到 9  范围类的数字\n\n`[a-z]` 表示匹配 a 到 z 范围内的小写字母\n\n`[a-zA-Z]` 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母\n\n在方括号中当 `^` 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：\n\n```javascript\n/[^0-8]/.test(9); // true\n```\n\n要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：\n\n```js\n/[a\\-c]/.test('-');\n// true\n```\n\n\n\n### 限定符\n\n使用字符类方括号 `[]` 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：\n\n限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 \n\n对于限定符有下面几种情况 ：\n\n对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 `?` 表示懒惰匹配；\n\n| 字符或者表达式  | 说明                    |\n| -------- | --------------------- |\n| `{n}`    | 重复 n 次                |\n| `{n, }`  | 表示至少重复 n 次            |\n| `{n, m}` | 重复至少n 次， 至多 m 次       |\n| `*`      | 重复至少0次， 等同于 `{0, }`   |\n| `+`      | 重复至少 1 次， 等同于 `{1, }` |\n| `?`      | 重复 0 次 或者 1           |\n\n例如：\n\n```javascript\nconst reg = /a.*b/;\n\"aabab\".match(reg); // aabab\n\nconst reg = /a.{0,1}b/;\n\"aabab\".match(reg); // aab\n```\n\n使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。\n\n例如：\n\n```javascript\nconst reg1 = /a.+b/;\nconst reg2 = /a.+?b/;\nconst str = \"avbaab\";\n\n// 贪婪匹配\nstr.match(reg1);  // avbaab\n// 懒惰匹配\nstr.match(reg2); // avb\n```\n\n\n\n### 替换\n\n在正则表达式中 `|` 用于表示当字符串匹配了 `|` 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，\n\n类似于 js 中的 `||` 操作符， 当 `|` 左边的正则不匹配， 那么进行右边的正则匹配。\n\n```javascript\nlet reg1 = \\d{5} - \\d{3} | d{5}; // 同时可以匹配 12345-678 或者 12345\n```\n\n> 注意： 使用 `|` 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。\n>\n> ```js\n> let str = 'goodbye';\n> // | 两边不能有空格\n> let regex = /goodbye|good/g;\n> str.match(regex); // ['goodbye']\n> ```\n\n### 分组\n\n使用 `()` 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配\n\n例如：\n\n```javascript\n// 匹配一个 ip 地址\nlet reg = /(\\d{1,3}\\.){3}/d{1,3}/;\n```\n\n### 总结\n\n在正则中使用 `[]` 以及 `|` 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：\n\n| 描述符 | 优点                                                         | 缺点                                                         |\n| ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `[]`   | 适合单个字符之间的匹配， 需要转义的特殊字符比较少（`^`  和 `-`） | 不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用`^`） 两种逻辑 |\n| 竖直   | 可以匹配多个字符的字符串                                     | 当匹配正则中的特殊字符的时候需要进行转义                     |\n\n\n\n","slug":"正则表达式（一）：理论基础部分","published":1,"updated":"2020-09-14T06:36:26.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t93005qi2osxd9kyquj","content":"<p>在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；</p>\n<p>正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。</p>\n<h3 id=\"创建正则表达式的两种方式：\"><a href=\"#创建正则表达式的两种方式：\" class=\"headerlink\" title=\"创建正则表达式的两种方式：\"></a>创建正则表达式的两种方式：</h3><p>创建两种正则表达式有两种方法：</p>\n<ol>\n<li><code>let reg = new RegExp(pattern[, flags])</code></li>\n<li><code>let reg = /pattern/flags</code></li>\n</ol>\n<p>上面两种方法创建正则除了包含有一个表达式 <code>pattern</code> 之外， 还包括一个可选的 <code>flags</code>  字段， 这个字段包含有几种字段：</p>\n<ul>\n<li>g： 全局匹配正则表达式</li>\n<li>i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。</li>\n<li>m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值</li>\n</ul>\n<p>通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： <code>exec</code>, <code>match</code> <code>test</code> 等方法。</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>正则表达式中的元字符是用来匹配<strong>一个位置</strong>或者<strong>字符集合</strong>中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；</p>\n<p>匹配位置的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>匹配行的开始位置</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配行的结束位置</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处</td>\n</tr>\n</tbody>\n</table>\n<p>匹配字符的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符之外的任意字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配单词字符（包括字母， 数字，下划线和汉字）</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意的非单词字符（和 <code>\\w</code>） 相反</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任意的空白字符， 比如空格符， 制表符或者换行符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任意的非空白符</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>用于匹配任意的数字</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>用于匹配任意的非数字字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>字符类是一个字符集合， 使用方括号 <code>[]</code> 定义， 表示匹配到方括号中的任意一个：</p>\n<p><em>注意： 除了 <code>-</code> 以及 <code>^</code> (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义</em></p>\n<p>例如：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;<span class=\"type\">H</span>[<span class=\"number\">123456</span>]&gt;/</span><br></pre></td></tr></table></figure>\n<p>表示匹配 <code>H1</code> <code>H2</code> … <code>H6</code>  中的任意一个标签</p>\n<p>在方括号中可以使用 <code>-</code> 用作连接符表示字符的范围：</p>\n<p><code>[0-9]</code> 表示匹配 0 到 9  范围类的数字</p>\n<p><code>[a-z]</code> 表示匹配 a 到 z 范围内的小写字母</p>\n<p><code>[a-zA-Z]</code> 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母</p>\n<p>在方括号中当 <code>^</code> 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^<span class=\"number\">0</span><span class=\"number\">-8</span>]/.test(<span class=\"number\">9</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[a\\-c]/.test(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>使用字符类方括号 <code>[]</code> 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：</p>\n<p>限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 </p>\n<p>对于限定符有下面几种情况 ：</p>\n<p>对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 <code>?</code> 表示懒惰匹配；</p>\n<table>\n<thead>\n<tr>\n<th>字符或者表达式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{n}</code></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, }</code></td>\n<td>表示至少重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, m}</code></td>\n<td>重复至少n 次， 至多 m 次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>重复至少0次， 等同于 <code>{0, }</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复至少 1 次， 等同于 <code>{1, }</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复 0 次 或者 1</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.*b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aabab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.&#123;0,1&#125;b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aab</span></span><br></pre></td></tr></table></figure>\n<p>使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg1 = <span class=\"regexp\">/a.+b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/a.+?b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"avbaab\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 贪婪匹配</span></span><br><span class=\"line\">str.match(reg1);  <span class=\"comment\">// avbaab</span></span><br><span class=\"line\"><span class=\"comment\">// 懒惰匹配</span></span><br><span class=\"line\">str.match(reg2); <span class=\"comment\">// avb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>在正则表达式中 <code>|</code> 用于表示当字符串匹配了 <code>|</code> 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，</p>\n<p>类似于 js 中的 <code>||</code> 操作符， 当 <code>|</code> 左边的正则不匹配， 那么进行右边的正则匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg1 = \\d&#123;<span class=\"number\">5</span>&#125; - \\d&#123;<span class=\"number\">3</span>&#125; | d&#123;<span class=\"number\">5</span>&#125;; <span class=\"comment\">// 同时可以匹配 12345-678 或者 12345</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 使用 <code>|</code> 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'goodbye'</span>;</span><br><span class=\"line\">&gt; <span class=\"comment\">// | 两边不能有空格</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/goodbye|good/g</span>;</span><br><span class=\"line\">&gt; str.match(regex); <span class=\"comment\">// ['goodbye']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>使用 <code>()</code> 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配一个 ip 地址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;1,3&#125;\\.)&#123;3&#125;/</span>d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;/;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在正则中使用 <code>[]</code> 以及 <code>|</code> 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>适合单个字符之间的匹配， 需要转义的特殊字符比较少（<code>^</code>  和 <code>-</code>）</td>\n<td>不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用<code>^</code>） 两种逻辑</td>\n</tr>\n<tr>\n<td>竖直</td>\n<td>可以匹配多个字符的字符串</td>\n<td>当匹配正则中的特殊字符的时候需要进行转义</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；</p>\n<p>正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。</p>\n<h3 id=\"创建正则表达式的两种方式：\"><a href=\"#创建正则表达式的两种方式：\" class=\"headerlink\" title=\"创建正则表达式的两种方式：\"></a>创建正则表达式的两种方式：</h3><p>创建两种正则表达式有两种方法：</p>\n<ol>\n<li><code>let reg = new RegExp(pattern[, flags])</code></li>\n<li><code>let reg = /pattern/flags</code></li>\n</ol>\n<p>上面两种方法创建正则除了包含有一个表达式 <code>pattern</code> 之外， 还包括一个可选的 <code>flags</code>  字段， 这个字段包含有几种字段：</p>\n<ul>\n<li>g： 全局匹配正则表达式</li>\n<li>i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。</li>\n<li>m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值</li>\n</ul>\n<p>通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： <code>exec</code>, <code>match</code> <code>test</code> 等方法。</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>正则表达式中的元字符是用来匹配<strong>一个位置</strong>或者<strong>字符集合</strong>中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；</p>\n<p>匹配位置的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>匹配行的开始位置</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配行的结束位置</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处</td>\n</tr>\n</tbody>\n</table>\n<p>匹配字符的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符之外的任意字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配单词字符（包括字母， 数字，下划线和汉字）</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意的非单词字符（和 <code>\\w</code>） 相反</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任意的空白字符， 比如空格符， 制表符或者换行符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任意的非空白符</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>用于匹配任意的数字</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>用于匹配任意的非数字字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>字符类是一个字符集合， 使用方括号 <code>[]</code> 定义， 表示匹配到方括号中的任意一个：</p>\n<p><em>注意： 除了 <code>-</code> 以及 <code>^</code> (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义</em></p>\n<p>例如：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;<span class=\"type\">H</span>[<span class=\"number\">123456</span>]&gt;/</span><br></pre></td></tr></table></figure>\n<p>表示匹配 <code>H1</code> <code>H2</code> … <code>H6</code>  中的任意一个标签</p>\n<p>在方括号中可以使用 <code>-</code> 用作连接符表示字符的范围：</p>\n<p><code>[0-9]</code> 表示匹配 0 到 9  范围类的数字</p>\n<p><code>[a-z]</code> 表示匹配 a 到 z 范围内的小写字母</p>\n<p><code>[a-zA-Z]</code> 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母</p>\n<p>在方括号中当 <code>^</code> 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^<span class=\"number\">0</span><span class=\"number\">-8</span>]/.test(<span class=\"number\">9</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[a\\-c]/.test(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>使用字符类方括号 <code>[]</code> 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：</p>\n<p>限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 </p>\n<p>对于限定符有下面几种情况 ：</p>\n<p>对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 <code>?</code> 表示懒惰匹配；</p>\n<table>\n<thead>\n<tr>\n<th>字符或者表达式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{n}</code></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, }</code></td>\n<td>表示至少重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, m}</code></td>\n<td>重复至少n 次， 至多 m 次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>重复至少0次， 等同于 <code>{0, }</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复至少 1 次， 等同于 <code>{1, }</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复 0 次 或者 1</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.*b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aabab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.&#123;0,1&#125;b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aab</span></span><br></pre></td></tr></table></figure>\n<p>使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg1 = <span class=\"regexp\">/a.+b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/a.+?b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"avbaab\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 贪婪匹配</span></span><br><span class=\"line\">str.match(reg1);  <span class=\"comment\">// avbaab</span></span><br><span class=\"line\"><span class=\"comment\">// 懒惰匹配</span></span><br><span class=\"line\">str.match(reg2); <span class=\"comment\">// avb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>在正则表达式中 <code>|</code> 用于表示当字符串匹配了 <code>|</code> 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，</p>\n<p>类似于 js 中的 <code>||</code> 操作符， 当 <code>|</code> 左边的正则不匹配， 那么进行右边的正则匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg1 = \\d&#123;<span class=\"number\">5</span>&#125; - \\d&#123;<span class=\"number\">3</span>&#125; | d&#123;<span class=\"number\">5</span>&#125;; <span class=\"comment\">// 同时可以匹配 12345-678 或者 12345</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 使用 <code>|</code> 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'goodbye'</span>;</span><br><span class=\"line\">&gt; <span class=\"comment\">// | 两边不能有空格</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/goodbye|good/g</span>;</span><br><span class=\"line\">&gt; str.match(regex); <span class=\"comment\">// ['goodbye']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>使用 <code>()</code> 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配一个 ip 地址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;1,3&#125;\\.)&#123;3&#125;/</span>d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;/;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在正则中使用 <code>[]</code> 以及 <code>|</code> 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>适合单个字符之间的匹配， 需要转义的特殊字符比较少（<code>^</code>  和 <code>-</code>）</td>\n<td>不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用<code>^</code>） 两种逻辑</td>\n</tr>\n<tr>\n<td>竖直</td>\n<td>可以匹配多个字符的字符串</td>\n<td>当匹配正则中的特殊字符的时候需要进行转义</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"正则表达式（三）：一些例子","date":"2019-01-27T04:05:57.000Z","_content":"\n### 下面是使用正则表达式的一些示例：\n\n1. 实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。\n\n   ```\n   let pattern = /^[a-zA-a]\\w{7, 15}/;\n   ```\n\n2. 验证是否含有^%&'',;=?$\"等字符\n\n   ```\n   let pattern = /[\\^%&$\".'=?]/;\n   // \"\\\" 用于转义 `^`\n   ```\n\n3. 整数正则\n\n4. ```\n   let pattern = /^-?\\d+$/;\n   ```\n\n5. 匹配数字， 小数点后最大两位小数\n\n   ```js\n   let pattern = /^\\d+/.?\\d{0, 2}$/;\n   ```\n\n6. 手机号码的匹配\n\n   ```\n   let pattern = /^1[34578]\\d{9}$/;\n   ```\n\n7. 匹配16进制颜色值\n\n   ```\n   // 比如匹配如下的颜色\n   // #ffbbad  #Fc01DF  #FFF  #ffE\n   let pattern = /[0-9a-fA-F]{6} | [0-9a-fA-F]{3}/;\n   // 使用 | 用来表示正则表达式中分支结构\n   ```\n\n8. 匹配 24 小时时间\n\n   ```\n   // 例如匹配 23:59 和 02:12\n   // 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容\n   let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;\n   ```\n\n9. 匹配日期\n\n   例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：\n\n   ```\n   let pattern = /^[0-9]{4}-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;\n   ```\n\n10. 匹配 innerHTML 中的类名\n\n   如果我们想要进行匹配这样一个innterHtml 中的类名：\n\n   ```js\n   let innerHtml = '<div class=\"content\"><div class=\"body\"></div></div>';\n   \n   pattern = /class=\".*?\"/i;\n   \n   test = innerHtml.match(pattern)[0];\n   // class=\"content\"\n   // 使用 ？进行的是贪婪匹配， 会      匹配尽量少的字符\n   ```\n\n11. 对于字符串中的 `trim` 方法：使用正则表达式清除字符串两边的空格：\n\n    ```js\n    let str = '  hello  ';\n    let regex = /^\\s+|\\s+$/g;\n    let res = str.replace(regex, ''); // hello\n    ```\n\n12. 验证 URL 为绝对路径\n\n    ```javascript\n    /*\n    A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n    RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus, period, or hyphen.\n    */\n    // ? 非贪婪匹配 表明前面匹配的 () 内字符的数量可能为 0 次 匹配 // 的情况\n    function isAbsoluteURL(url) {\n      return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n    }\n    ```\n\n\n\n","source":"_posts/正则表达式（三）：一些例子.md","raw":"---\ntitle: 正则表达式（三）：一些例子\ndate: 2019-01-27 12:05:57\ntags: 正则表达式\ncategories: js\n---\n\n### 下面是使用正则表达式的一些示例：\n\n1. 实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。\n\n   ```\n   let pattern = /^[a-zA-a]\\w{7, 15}/;\n   ```\n\n2. 验证是否含有^%&'',;=?$\"等字符\n\n   ```\n   let pattern = /[\\^%&$\".'=?]/;\n   // \"\\\" 用于转义 `^`\n   ```\n\n3. 整数正则\n\n4. ```\n   let pattern = /^-?\\d+$/;\n   ```\n\n5. 匹配数字， 小数点后最大两位小数\n\n   ```js\n   let pattern = /^\\d+/.?\\d{0, 2}$/;\n   ```\n\n6. 手机号码的匹配\n\n   ```\n   let pattern = /^1[34578]\\d{9}$/;\n   ```\n\n7. 匹配16进制颜色值\n\n   ```\n   // 比如匹配如下的颜色\n   // #ffbbad  #Fc01DF  #FFF  #ffE\n   let pattern = /[0-9a-fA-F]{6} | [0-9a-fA-F]{3}/;\n   // 使用 | 用来表示正则表达式中分支结构\n   ```\n\n8. 匹配 24 小时时间\n\n   ```\n   // 例如匹配 23:59 和 02:12\n   // 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容\n   let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;\n   ```\n\n9. 匹配日期\n\n   例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：\n\n   ```\n   let pattern = /^[0-9]{4}-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;\n   ```\n\n10. 匹配 innerHTML 中的类名\n\n   如果我们想要进行匹配这样一个innterHtml 中的类名：\n\n   ```js\n   let innerHtml = '<div class=\"content\"><div class=\"body\"></div></div>';\n   \n   pattern = /class=\".*?\"/i;\n   \n   test = innerHtml.match(pattern)[0];\n   // class=\"content\"\n   // 使用 ？进行的是贪婪匹配， 会      匹配尽量少的字符\n   ```\n\n11. 对于字符串中的 `trim` 方法：使用正则表达式清除字符串两边的空格：\n\n    ```js\n    let str = '  hello  ';\n    let regex = /^\\s+|\\s+$/g;\n    let res = str.replace(regex, ''); // hello\n    ```\n\n12. 验证 URL 为绝对路径\n\n    ```javascript\n    /*\n    A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n    RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus, period, or hyphen.\n    */\n    // ? 非贪婪匹配 表明前面匹配的 () 内字符的数量可能为 0 次 匹配 // 的情况\n    function isAbsoluteURL(url) {\n      return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n    }\n    ```\n\n\n\n","slug":"正则表达式（三）：一些例子","published":1,"updated":"2020-09-14T06:36:26.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t95005ti2os4di0fjrb","content":"<h3 id=\"下面是使用正则表达式的一些示例：\"><a href=\"#下面是使用正则表达式的一些示例：\" class=\"headerlink\" title=\"下面是使用正则表达式的一些示例：\"></a>下面是使用正则表达式的一些示例：</h3><ol>\n<li><p>实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[a-zA-a]\\w&#123;7, 15&#125;/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否含有^%&amp;’’,;=?$”等字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /[\\^%&amp;$&quot;.&apos;=?]/;</span><br><span class=\"line\">// &quot;\\&quot; 用于转义 `^`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数正则</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^-?\\d+$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配数字， 小数点后最大两位小数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/^\\d+/</span>.?\\d&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手机号码的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^1[34578]\\d&#123;9&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配16进制颜色值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 比如匹配如下的颜色</span><br><span class=\"line\">// #ffbbad  #Fc01DF  #FFF  #ffE</span><br><span class=\"line\">let pattern = /[0-9a-fA-F]&#123;6&#125; | [0-9a-fA-F]&#123;3&#125;/;</span><br><span class=\"line\">// 使用 | 用来表示正则表达式中分支结构</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 24 小时时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如匹配 23:59 和 02:12</span><br><span class=\"line\">// 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容</span><br><span class=\"line\">let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配日期</p>\n<p>例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[0-9]&#123;4&#125;-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 innerHTML 中的类名</p>\n<p>如果我们想要进行匹配这样一个innterHtml 中的类名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> innerHtml = <span class=\"string\">'&lt;div class=\"content\"&gt;&lt;div class=\"body\"&gt;&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"regexp\">/class=\".*?\"/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test = innerHtml.match(pattern)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// class=\"content\"</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 ？进行的是贪婪匹配， 会      匹配尽量少的字符</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于字符串中的 <code>trim</code> 方法：使用正则表达式清除字符串两边的空格：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hello  '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证 URL 为绝对路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">A URL is considered absolute if it begins with \"&lt;scheme&gt;://\" or \"//\" (protocol-relative URL).</span></span><br><span class=\"line\"><span class=\"comment\">RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus, period, or hyphen.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// ? 非贪婪匹配 表明前面匹配的 () 内字符的数量可能为 0 次 匹配 // 的情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAbsoluteURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i</span>.test(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下面是使用正则表达式的一些示例：\"><a href=\"#下面是使用正则表达式的一些示例：\" class=\"headerlink\" title=\"下面是使用正则表达式的一些示例：\"></a>下面是使用正则表达式的一些示例：</h3><ol>\n<li><p>实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[a-zA-a]\\w&#123;7, 15&#125;/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否含有^%&amp;’’,;=?$”等字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /[\\^%&amp;$&quot;.&apos;=?]/;</span><br><span class=\"line\">// &quot;\\&quot; 用于转义 `^`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数正则</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^-?\\d+$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配数字， 小数点后最大两位小数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/^\\d+/</span>.?\\d&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手机号码的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^1[34578]\\d&#123;9&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配16进制颜色值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 比如匹配如下的颜色</span><br><span class=\"line\">// #ffbbad  #Fc01DF  #FFF  #ffE</span><br><span class=\"line\">let pattern = /[0-9a-fA-F]&#123;6&#125; | [0-9a-fA-F]&#123;3&#125;/;</span><br><span class=\"line\">// 使用 | 用来表示正则表达式中分支结构</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 24 小时时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如匹配 23:59 和 02:12</span><br><span class=\"line\">// 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容</span><br><span class=\"line\">let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配日期</p>\n<p>例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[0-9]&#123;4&#125;-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 innerHTML 中的类名</p>\n<p>如果我们想要进行匹配这样一个innterHtml 中的类名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> innerHtml = <span class=\"string\">'&lt;div class=\"content\"&gt;&lt;div class=\"body\"&gt;&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"regexp\">/class=\".*?\"/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test = innerHtml.match(pattern)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// class=\"content\"</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 ？进行的是贪婪匹配， 会      匹配尽量少的字符</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于字符串中的 <code>trim</code> 方法：使用正则表达式清除字符串两边的空格：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hello  '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>); <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证 URL 为绝对路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">A URL is considered absolute if it begins with \"&lt;scheme&gt;://\" or \"//\" (protocol-relative URL).</span></span><br><span class=\"line\"><span class=\"comment\">RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus, period, or hyphen.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// ? 非贪婪匹配 表明前面匹配的 () 内字符的数量可能为 0 次 匹配 // 的情况</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAbsoluteURL</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i</span>.test(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"正则表达式（五）：括号与正则符号优先级","date":"2019-02-05T06:45:20.000Z","_content":"\n# 括号\n\n## 作用\n\n### 提供分组和分支结构\n\n分组和分支结构是括号中的基础使用， 作用是提供一个子表达式\n\n#### 分组\n\n使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：\n\n```js\nlet str = 'abababc ab';\nlet regex = /(ab)+/g;\nstr.match(regex); // Array(2) [\"ababab\", \"ab\"]\n```\n\n#### 分支结构\n\n我们在正则中使用 `|` 表明匹配 `|`  符号左边或者右边的正则， 使用括号包裹`|` 用来限定 `|` 的作用范围， 例如：\n\n```js\nlet str = 'ab ac';\nlet regex = /a(b|c)/g;\n// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c\n// 加上括号表明分支结构只有 b 和 c\nstr.match(regex); // ['ab', 'ac']\n```\n\n> 在使用 match 的时候，添加全局标识符 `g` 加不加是不同的：\n>\n> 上面的代码如果不用添加 `g` 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 `ab` 就会返回。\n>\n> ```js\n> let str = 'ab ac';\n> let regex = /a(b|c)/;\n> str.match(regex);\n> // ['ab', 'b']\n> ```\n\n\n\n### 分组引用\n\n在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。\n\n例如， 我们想要对于日期进行匹配：\n\n```\nlet date = '2019-02-05';\nlet regex = /(\\d{4}-(\\d{2})-(\\d{2}))/;\ndate.match(regex); //  [\"2018-02-02\", \"2018\", \"02\", \"02\"]\n```\n\n> 这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。\n\n# 符号的优先级\n\n在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：\n\n从上到下：\n\n| 描述符       | 操作符                                        |\n| ------------ | --------------------------------------------- |\n| 转义符       | `\\`                                           |\n| 括号与方括号 | `(...)` `(?:...)` `(?=...)` `(?!...)` `[...]` |\n| 量词限定符   | `{m}` `{m, n}` `{m, }` `?`  `*` `+`           |\n| 位置和序列   | `^`  `$`  `\\元字符`  `一般字符`               |\n| 管道符       | `|`                                           |\n\n上面的操作符从上到下， 优先级从高到低；\n\n示例： `/ab?(c|de*)+|fg/`\n\n上面的操作过程如下：\n\n因为在正则中存在管道符 `|` 用于分割为 `ab?(c|de*)+`  和 `fg` 两个部分， 先执行这两个部分：\n\n执行 `ab?(c|de*)+`: 在这个过程中，先执行括号内的正则， 然后执行字符 `a`, `b` `?` 以及 `+`, 在括号内\n\n`c|de*` 的执行顺序中， 先执行 `c`, `de*`,  其中 `*` 是和 `e` 在一起的， 因此 `*` 限定的量词是 `e`;\n\n如下：  匹配一个字符串， 字符串中的字符为  `a` , `b`, `c` 中的一个， 并且， 字符串的长度为 3 的倍数；\n\n```js\nlet regexp = /([abc]{3})+/;\n```\n\n 这里是将量词 3 使用括号进行包裹\n\n如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：\n\n3位数.3位数.3位数.3位数\n\n其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：\n\n```js\n/0{0,2}\\d+/ // 匹配 000 - 009\n```\n\n对于两位数而言， 进行匹配：\n\n```js\n/0?\\d{2}/\n```\n\n对于三位数而言， 需要进行匹配：\n\n```js\n/1\\d{2}/ // 匹配 100 - 199\n```\n\n```js\n/2[0-4]\\d/ // 匹配 200 - 249\n```\n\n```js\n/25[0-5]/ // 匹配 250 -255\n```\n\n上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 `|` 进行连接：\n\n```js\n(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\n```\n\n匹配`.` 号：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/\n```\n\n上面的也可以第二部分可以使用 `\\2`  进行代替：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)\\2$/\n```\n\n\n\n\n\n","source":"_posts/正则表达式（五）：括号.md","raw":"---\ntitle: 正则表达式（五）：括号与正则符号优先级\ndate: 2019-02-05 14:45:20\ntags: 正则表达式\ncategories: js\n---\n\n# 括号\n\n## 作用\n\n### 提供分组和分支结构\n\n分组和分支结构是括号中的基础使用， 作用是提供一个子表达式\n\n#### 分组\n\n使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：\n\n```js\nlet str = 'abababc ab';\nlet regex = /(ab)+/g;\nstr.match(regex); // Array(2) [\"ababab\", \"ab\"]\n```\n\n#### 分支结构\n\n我们在正则中使用 `|` 表明匹配 `|`  符号左边或者右边的正则， 使用括号包裹`|` 用来限定 `|` 的作用范围， 例如：\n\n```js\nlet str = 'ab ac';\nlet regex = /a(b|c)/g;\n// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c\n// 加上括号表明分支结构只有 b 和 c\nstr.match(regex); // ['ab', 'ac']\n```\n\n> 在使用 match 的时候，添加全局标识符 `g` 加不加是不同的：\n>\n> 上面的代码如果不用添加 `g` 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 `ab` 就会返回。\n>\n> ```js\n> let str = 'ab ac';\n> let regex = /a(b|c)/;\n> str.match(regex);\n> // ['ab', 'b']\n> ```\n\n\n\n### 分组引用\n\n在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。\n\n例如， 我们想要对于日期进行匹配：\n\n```\nlet date = '2019-02-05';\nlet regex = /(\\d{4}-(\\d{2})-(\\d{2}))/;\ndate.match(regex); //  [\"2018-02-02\", \"2018\", \"02\", \"02\"]\n```\n\n> 这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。\n\n# 符号的优先级\n\n在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：\n\n从上到下：\n\n| 描述符       | 操作符                                        |\n| ------------ | --------------------------------------------- |\n| 转义符       | `\\`                                           |\n| 括号与方括号 | `(...)` `(?:...)` `(?=...)` `(?!...)` `[...]` |\n| 量词限定符   | `{m}` `{m, n}` `{m, }` `?`  `*` `+`           |\n| 位置和序列   | `^`  `$`  `\\元字符`  `一般字符`               |\n| 管道符       | `|`                                           |\n\n上面的操作符从上到下， 优先级从高到低；\n\n示例： `/ab?(c|de*)+|fg/`\n\n上面的操作过程如下：\n\n因为在正则中存在管道符 `|` 用于分割为 `ab?(c|de*)+`  和 `fg` 两个部分， 先执行这两个部分：\n\n执行 `ab?(c|de*)+`: 在这个过程中，先执行括号内的正则， 然后执行字符 `a`, `b` `?` 以及 `+`, 在括号内\n\n`c|de*` 的执行顺序中， 先执行 `c`, `de*`,  其中 `*` 是和 `e` 在一起的， 因此 `*` 限定的量词是 `e`;\n\n如下：  匹配一个字符串， 字符串中的字符为  `a` , `b`, `c` 中的一个， 并且， 字符串的长度为 3 的倍数；\n\n```js\nlet regexp = /([abc]{3})+/;\n```\n\n 这里是将量词 3 使用括号进行包裹\n\n如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：\n\n3位数.3位数.3位数.3位数\n\n其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：\n\n```js\n/0{0,2}\\d+/ // 匹配 000 - 009\n```\n\n对于两位数而言， 进行匹配：\n\n```js\n/0?\\d{2}/\n```\n\n对于三位数而言， 需要进行匹配：\n\n```js\n/1\\d{2}/ // 匹配 100 - 199\n```\n\n```js\n/2[0-4]\\d/ // 匹配 200 - 249\n```\n\n```js\n/25[0-5]/ // 匹配 250 -255\n```\n\n上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 `|` 进行连接：\n\n```js\n(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\n```\n\n匹配`.` 号：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/\n```\n\n上面的也可以第二部分可以使用 `\\2`  进行代替：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)\\2$/\n```\n\n\n\n\n\n","slug":"正则表达式（五）：括号","published":1,"updated":"2020-09-14T06:36:26.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t96005xi2osb0z3w3mi","content":"<h1 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><h3 id=\"提供分组和分支结构\"><a href=\"#提供分组和分支结构\" class=\"headerlink\" title=\"提供分组和分支结构\"></a>提供分组和分支结构</h3><p>分组和分支结构是括号中的基础使用， 作用是提供一个子表达式</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abababc ab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(ab)+/g</span>;</span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// Array(2) [\"ababab\", \"ab\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h4><p>我们在正则中使用 <code>|</code> 表明匹配 <code>|</code>  符号左边或者右边的正则， 使用括号包裹<code>|</code> 用来限定 <code>|</code> 的作用范围， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号表明分支结构只有 b 和 c</span></span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// ['ab', 'ac']</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用 match 的时候，添加全局标识符 <code>g</code> 加不加是不同的：</p>\n<p>上面的代码如果不用添加 <code>g</code> 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 <code>ab</code> 就会返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/</span>;</span><br><span class=\"line\">&gt; str.match(regex);</span><br><span class=\"line\">&gt; <span class=\"comment\">// ['ab', 'b']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组引用\"><a href=\"#分组引用\" class=\"headerlink\" title=\"分组引用\"></a>分组引用</h3><p>在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。</p>\n<p>例如， 我们想要对于日期进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let date = &apos;2019-02-05&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;-(\\d&#123;2&#125;)-(\\d&#123;2&#125;))/;</span><br><span class=\"line\">date.match(regex); //  [&quot;2018-02-02&quot;, &quot;2018&quot;, &quot;02&quot;, &quot;02&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。</p>\n</blockquote>\n<h1 id=\"符号的优先级\"><a href=\"#符号的优先级\" class=\"headerlink\" title=\"符号的优先级\"></a>符号的优先级</h1><p>在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：</p>\n<p>从上到下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>转义符</td>\n<td><code>\\</code></td>\n</tr>\n<tr>\n<td>括号与方括号</td>\n<td><code>(...)</code> <code>(?:...)</code> <code>(?=...)</code> <code>(?!...)</code> <code>[...]</code></td>\n</tr>\n<tr>\n<td>量词限定符</td>\n<td><code>{m}</code> <code>{m, n}</code> <code>{m, }</code> <code>?</code>  <code>*</code> <code>+</code></td>\n</tr>\n<tr>\n<td>位置和序列</td>\n<td><code>^</code>  <code>$</code>  <code>\\元字符</code>  <code>一般字符</code></td>\n</tr>\n<tr>\n<td>管道符</td>\n<td>`</td>\n<td>`</td>\n</tr>\n</tbody>\n</table>\n<p>上面的操作符从上到下， 优先级从高到低；</p>\n<p>示例： <code>/ab?(c|de*)+|fg/</code></p>\n<p>上面的操作过程如下：</p>\n<p>因为在正则中存在管道符 <code>|</code> 用于分割为 <code>ab?(c|de*)+</code>  和 <code>fg</code> 两个部分， 先执行这两个部分：</p>\n<p>执行 <code>ab?(c|de*)+</code>: 在这个过程中，先执行括号内的正则， 然后执行字符 <code>a</code>, <code>b</code> <code>?</code> 以及 <code>+</code>, 在括号内</p>\n<p><code>c|de*</code> 的执行顺序中， 先执行 <code>c</code>, <code>de*</code>,  其中 <code>*</code> 是和 <code>e</code> 在一起的， 因此 <code>*</code> 限定的量词是 <code>e</code>;</p>\n<p>如下：  匹配一个字符串， 字符串中的字符为  <code>a</code> , <code>b</code>, <code>c</code> 中的一个， 并且， 字符串的长度为 3 的倍数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/([abc]&#123;3&#125;)+/</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里是将量词 3 使用括号进行包裹</p>\n<p>如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：</p>\n<p>3位数.3位数.3位数.3位数</p>\n<p>其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d+<span class=\"regexp\">/ /</span><span class=\"regexp\">/ 匹配 000 - 009</span></span><br></pre></td></tr></table></figure>\n<p>对于两位数而言， 进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;/</span><br></pre></td></tr></table></figure>\n<p>对于三位数而言， 需要进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;/ <span class=\"comment\">// 匹配 100 - 199</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d/ <span class=\"comment\">// 匹配 200 - 249</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]/ <span class=\"comment\">// 匹配 250 -255</span></span><br></pre></td></tr></table></figure>\n<p>上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 <code>|</code> 进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])</span><br></pre></td></tr></table></figure>\n<p>匹配<code>.</code> 号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])$/</span><br></pre></td></tr></table></figure>\n<p>上面的也可以第二部分可以使用 <code>\\2</code>  进行代替：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)\\<span class=\"number\">2</span>$/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><h3 id=\"提供分组和分支结构\"><a href=\"#提供分组和分支结构\" class=\"headerlink\" title=\"提供分组和分支结构\"></a>提供分组和分支结构</h3><p>分组和分支结构是括号中的基础使用， 作用是提供一个子表达式</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abababc ab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(ab)+/g</span>;</span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// Array(2) [\"ababab\", \"ab\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h4><p>我们在正则中使用 <code>|</code> 表明匹配 <code>|</code>  符号左边或者右边的正则， 使用括号包裹<code>|</code> 用来限定 <code>|</code> 的作用范围， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号表明分支结构只有 b 和 c</span></span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// ['ab', 'ac']</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用 match 的时候，添加全局标识符 <code>g</code> 加不加是不同的：</p>\n<p>上面的代码如果不用添加 <code>g</code> 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 <code>ab</code> 就会返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/</span>;</span><br><span class=\"line\">&gt; str.match(regex);</span><br><span class=\"line\">&gt; <span class=\"comment\">// ['ab', 'b']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组引用\"><a href=\"#分组引用\" class=\"headerlink\" title=\"分组引用\"></a>分组引用</h3><p>在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。</p>\n<p>例如， 我们想要对于日期进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let date = &apos;2019-02-05&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;-(\\d&#123;2&#125;)-(\\d&#123;2&#125;))/;</span><br><span class=\"line\">date.match(regex); //  [&quot;2018-02-02&quot;, &quot;2018&quot;, &quot;02&quot;, &quot;02&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。</p>\n</blockquote>\n<h1 id=\"符号的优先级\"><a href=\"#符号的优先级\" class=\"headerlink\" title=\"符号的优先级\"></a>符号的优先级</h1><p>在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：</p>\n<p>从上到下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>转义符</td>\n<td><code>\\</code></td>\n</tr>\n<tr>\n<td>括号与方括号</td>\n<td><code>(...)</code> <code>(?:...)</code> <code>(?=...)</code> <code>(?!...)</code> <code>[...]</code></td>\n</tr>\n<tr>\n<td>量词限定符</td>\n<td><code>{m}</code> <code>{m, n}</code> <code>{m, }</code> <code>?</code>  <code>*</code> <code>+</code></td>\n</tr>\n<tr>\n<td>位置和序列</td>\n<td><code>^</code>  <code>$</code>  <code>\\元字符</code>  <code>一般字符</code></td>\n</tr>\n<tr>\n<td>管道符</td>\n<td>`</td>\n<td>`</td>\n</tr>\n</tbody>\n</table>\n<p>上面的操作符从上到下， 优先级从高到低；</p>\n<p>示例： <code>/ab?(c|de*)+|fg/</code></p>\n<p>上面的操作过程如下：</p>\n<p>因为在正则中存在管道符 <code>|</code> 用于分割为 <code>ab?(c|de*)+</code>  和 <code>fg</code> 两个部分， 先执行这两个部分：</p>\n<p>执行 <code>ab?(c|de*)+</code>: 在这个过程中，先执行括号内的正则， 然后执行字符 <code>a</code>, <code>b</code> <code>?</code> 以及 <code>+</code>, 在括号内</p>\n<p><code>c|de*</code> 的执行顺序中， 先执行 <code>c</code>, <code>de*</code>,  其中 <code>*</code> 是和 <code>e</code> 在一起的， 因此 <code>*</code> 限定的量词是 <code>e</code>;</p>\n<p>如下：  匹配一个字符串， 字符串中的字符为  <code>a</code> , <code>b</code>, <code>c</code> 中的一个， 并且， 字符串的长度为 3 的倍数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/([abc]&#123;3&#125;)+/</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里是将量词 3 使用括号进行包裹</p>\n<p>如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：</p>\n<p>3位数.3位数.3位数.3位数</p>\n<p>其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d+<span class=\"regexp\">/ /</span><span class=\"regexp\">/ 匹配 000 - 009</span></span><br></pre></td></tr></table></figure>\n<p>对于两位数而言， 进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;/</span><br></pre></td></tr></table></figure>\n<p>对于三位数而言， 需要进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;/ <span class=\"comment\">// 匹配 100 - 199</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d/ <span class=\"comment\">// 匹配 200 - 249</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]/ <span class=\"comment\">// 匹配 250 -255</span></span><br></pre></td></tr></table></figure>\n<p>上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 <code>|</code> 进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])</span><br></pre></td></tr></table></figure>\n<p>匹配<code>.</code> 号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])$/</span><br></pre></td></tr></table></figure>\n<p>上面的也可以第二部分可以使用 <code>\\2</code>  进行代替：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)\\<span class=\"number\">2</span>$/</span><br></pre></td></tr></table></figure>\n"},{"title":"正则表达式（四）：匹配","date":"2019-02-04T06:33:08.000Z","_content":"\n正则表达式中的位置匹配：\n\n**正则表达式是匹配模式， 要么匹配字符， 要么匹配位置**\n\n对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：\n\n`^  `   `$`  `\\b`  `\\B`    `(?=p)` `(?!p)`\n\n|  字符   | 匹配含义                                                     |\n| :-----: | ------------------------------------------------------------ |\n|   `^`   | 匹配字符串的开头                                             |\n|   `$`   | 匹配字符串的结尾                                             |\n|  `\\b`   | 单词边界， 具体就是 `\\w` 与 `\\W` 之间的位置, 以及字符串的开始位置和结尾位置 |\n|  `\\B`   | 是 `/b` 之外的位置                                           |\n| `(?=P)` | `p` 是一个模式， 这个正则表达式匹配的是`P` 之前的位置， 或者当前位置之后的字符要匹配正则表达式 `P` |\n| `(?!P)` | 这个与 `(?=P)` 意思相反， 是除了 `(?=P)` 之外的位置          |\n\n#### `^` 以及 `$`\n\n用于匹配字符串开头或者字符串结尾的位置：\n\n如下例子：将字符的开头和结尾添加特定的字符：\n\n```\nlet str = 'hello';\nlet regex = /^|$/g;\nlet res = str.replace(regex, '*');\nconsole.log(res); // '*hello*'\n```\n\n例如下面， 使用 `replace`  代替     `trim`  方法：\n\n```js\nlet str = '  hell o   ';\nlet regex = /^\\s+|\\s+$/g;\nlet res = str.replace(regex, '');\n// hell o\n```\n\n#### `\\b` 以及 `\\B`\n\n使用 `\\b` 的作用是匹配单词边界之间的位置， 具体而言是 `\\w` 以及 `\\W`   之间的位置：\n\n`\\w`: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字\n\n示例如下：\n\n```js\nlet str = 'hel lo';\nlet regex = /\\b/g;\nlet res = str.replace(regex, '#');\n// #hel# #lo#\n```\n\n使用 `\\B` 则和 `\\b`  相反， 匹配的位置是单词字符内的位置：\n\n```js\nregex = /\\B/g;\nres = str.replace(regex, '#');\n// h#e#l l#o;\n```\n\n#### `(?=P)` 以及 `(?!P)`\n\n使用 `(?=P)` 用来匹配特定字符前的位置, `P` 是一个正则表达式；\n\n如下： 给单词中的 l 字符前面添加字符 `#`:\n\n```js\nregex = /(?=l)/g;\nstr = 'hello';\nlet res = str.replace(regex, '#');\n// he#l#lo\n```\n\n给每一个单词字符前面添加一个字符 `*`\n\n```\nregex = /(?=\\w)/g;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*e*l *l*o\n```\n\n使用 `(?!P)` 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：\n\n例如上面的例子， 我们使用 `(?!P)` 来代替 `(?=P)`:\n\n```js\nregex = /(?!l)/;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*ell*o*\n// 当我们仅仅想匹配到单词内部的时候\nregex = /(?!l)(?!^)(?!$)/;\n// h*ell*o\n```\n\n这里的 `(?!^)(?!$)` 是匹配除了单词开头和结尾的位置， 这里可以使用 `/B` 来进行代替;  \n\n`regex = /(?!l)(\\B)/` \n\n如下， 给一个数字添加千位分隔符 ','  \n\n```js\nlet str = \"12345678\";\nlet regex = /(?!^)(?=(\\d{3})+$))/g;\nlet res = str.replace(regex, ','); // 12,345,678\n```\n\n分析：\n\n给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ' ,';  \n\n```javascript\n(\\d{3})+$ // 匹配结尾处向前 3 个或者多个 3 字符倍数的字符\n```\n\n```javascript\n(?=(\\d{3})+$) // 匹配 3 个字符或者 3 个字符倍数的字符前面的位置\n```\n\n```javascript\n(?!^) // 匹配非开头的位置\n```\n\n如下， 给钱数添加人民币符号 `¥`\n\n```js\nlet number = '1234';\nlet regex = /(?=^)/;\nlet res = number.replace(regex, '¥ ');\n// ¥ 1234\n```\n\n如下： 判断一段字符中必须包含有数字：\n\n```js\nlet str = 'str123';\nlet regex = /(?=.*[0-9])^/g;\n// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]\n// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字\nlet res = regex.test(str); // true\n```\n\n如下： 判断字符中不能全部为数字,  可以使用 `?!P` 进行判断\n\n判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：\n\n```\n// 判断6位字符串中全部为数字\nlet regex = /(?=[0-9]{6})/\n```\n\n因为 `?!` 和 `?=` 互为反义， 因此， 判断不能全部为数字的正则如下：\n\n```js\nlet regex = /(?![0-9]{6})/\nlet str = '123456';\nregex.test(str); // false\nstr = 'a23456';\nregex.test(str); // true\n```\n\n","source":"_posts/正则表达式（四）：正则表达式进阶，-匹配位置.md","raw":"---\ntitle: 正则表达式（四）：匹配\ndate: 2019-02-04 14:33:08\ntags: 正则表达式\ncategories: js\n---\n\n正则表达式中的位置匹配：\n\n**正则表达式是匹配模式， 要么匹配字符， 要么匹配位置**\n\n对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：\n\n`^  `   `$`  `\\b`  `\\B`    `(?=p)` `(?!p)`\n\n|  字符   | 匹配含义                                                     |\n| :-----: | ------------------------------------------------------------ |\n|   `^`   | 匹配字符串的开头                                             |\n|   `$`   | 匹配字符串的结尾                                             |\n|  `\\b`   | 单词边界， 具体就是 `\\w` 与 `\\W` 之间的位置, 以及字符串的开始位置和结尾位置 |\n|  `\\B`   | 是 `/b` 之外的位置                                           |\n| `(?=P)` | `p` 是一个模式， 这个正则表达式匹配的是`P` 之前的位置， 或者当前位置之后的字符要匹配正则表达式 `P` |\n| `(?!P)` | 这个与 `(?=P)` 意思相反， 是除了 `(?=P)` 之外的位置          |\n\n#### `^` 以及 `$`\n\n用于匹配字符串开头或者字符串结尾的位置：\n\n如下例子：将字符的开头和结尾添加特定的字符：\n\n```\nlet str = 'hello';\nlet regex = /^|$/g;\nlet res = str.replace(regex, '*');\nconsole.log(res); // '*hello*'\n```\n\n例如下面， 使用 `replace`  代替     `trim`  方法：\n\n```js\nlet str = '  hell o   ';\nlet regex = /^\\s+|\\s+$/g;\nlet res = str.replace(regex, '');\n// hell o\n```\n\n#### `\\b` 以及 `\\B`\n\n使用 `\\b` 的作用是匹配单词边界之间的位置， 具体而言是 `\\w` 以及 `\\W`   之间的位置：\n\n`\\w`: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字\n\n示例如下：\n\n```js\nlet str = 'hel lo';\nlet regex = /\\b/g;\nlet res = str.replace(regex, '#');\n// #hel# #lo#\n```\n\n使用 `\\B` 则和 `\\b`  相反， 匹配的位置是单词字符内的位置：\n\n```js\nregex = /\\B/g;\nres = str.replace(regex, '#');\n// h#e#l l#o;\n```\n\n#### `(?=P)` 以及 `(?!P)`\n\n使用 `(?=P)` 用来匹配特定字符前的位置, `P` 是一个正则表达式；\n\n如下： 给单词中的 l 字符前面添加字符 `#`:\n\n```js\nregex = /(?=l)/g;\nstr = 'hello';\nlet res = str.replace(regex, '#');\n// he#l#lo\n```\n\n给每一个单词字符前面添加一个字符 `*`\n\n```\nregex = /(?=\\w)/g;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*e*l *l*o\n```\n\n使用 `(?!P)` 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：\n\n例如上面的例子， 我们使用 `(?!P)` 来代替 `(?=P)`:\n\n```js\nregex = /(?!l)/;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*ell*o*\n// 当我们仅仅想匹配到单词内部的时候\nregex = /(?!l)(?!^)(?!$)/;\n// h*ell*o\n```\n\n这里的 `(?!^)(?!$)` 是匹配除了单词开头和结尾的位置， 这里可以使用 `/B` 来进行代替;  \n\n`regex = /(?!l)(\\B)/` \n\n如下， 给一个数字添加千位分隔符 ','  \n\n```js\nlet str = \"12345678\";\nlet regex = /(?!^)(?=(\\d{3})+$))/g;\nlet res = str.replace(regex, ','); // 12,345,678\n```\n\n分析：\n\n给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ' ,';  \n\n```javascript\n(\\d{3})+$ // 匹配结尾处向前 3 个或者多个 3 字符倍数的字符\n```\n\n```javascript\n(?=(\\d{3})+$) // 匹配 3 个字符或者 3 个字符倍数的字符前面的位置\n```\n\n```javascript\n(?!^) // 匹配非开头的位置\n```\n\n如下， 给钱数添加人民币符号 `¥`\n\n```js\nlet number = '1234';\nlet regex = /(?=^)/;\nlet res = number.replace(regex, '¥ ');\n// ¥ 1234\n```\n\n如下： 判断一段字符中必须包含有数字：\n\n```js\nlet str = 'str123';\nlet regex = /(?=.*[0-9])^/g;\n// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]\n// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字\nlet res = regex.test(str); // true\n```\n\n如下： 判断字符中不能全部为数字,  可以使用 `?!P` 进行判断\n\n判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：\n\n```\n// 判断6位字符串中全部为数字\nlet regex = /(?=[0-9]{6})/\n```\n\n因为 `?!` 和 `?=` 互为反义， 因此， 判断不能全部为数字的正则如下：\n\n```js\nlet regex = /(?![0-9]{6})/\nlet str = '123456';\nregex.test(str); // false\nstr = 'a23456';\nregex.test(str); // true\n```\n\n","slug":"正则表达式（四）：正则表达式进阶，-匹配位置","published":1,"updated":"2020-09-14T06:36:26.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t980060i2osasapxusy","content":"<p>正则表达式中的位置匹配：</p>\n<p><strong>正则表达式是匹配模式， 要么匹配字符， 要么匹配位置</strong></p>\n<p>对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：</p>\n<p><code>^</code>   <code>$</code>  <code>\\b</code>  <code>\\B</code>    <code>(?=p)</code> <code>(?!p)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th>匹配含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td>匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td>匹配字符串的结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td>单词边界， 具体就是 <code>\\w</code> 与 <code>\\W</code> 之间的位置, 以及字符串的开始位置和结尾位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td>是 <code>/b</code> 之外的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?=P)</code></td>\n<td><code>p</code> 是一个模式， 这个正则表达式匹配的是<code>P</code> 之前的位置， 或者当前位置之后的字符要匹配正则表达式 <code>P</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?!P)</code></td>\n<td>这个与 <code>(?=P)</code> 意思相反， 是除了 <code>(?=P)</code> 之外的位置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"以及\"><a href=\"#以及\" class=\"headerlink\" title=\"^ 以及 $\"></a><code>^</code> 以及 <code>$</code></h4><p>用于匹配字符串开头或者字符串结尾的位置：</p>\n<p>如下例子：将字符的开头和结尾添加特定的字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello&apos;;</span><br><span class=\"line\">let regex = /^|$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">console.log(res); // &apos;*hello*&apos;</span><br></pre></td></tr></table></figure>\n<p>例如下面， 使用 <code>replace</code>  代替     <code>trim</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hell o   '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// hell o</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"b-以及-B\"><a href=\"#b-以及-B\" class=\"headerlink\" title=\"\\b 以及 \\B\"></a><code>\\b</code> 以及 <code>\\B</code></h4><p>使用 <code>\\b</code> 的作用是匹配单词边界之间的位置， 具体而言是 <code>\\w</code> 以及 <code>\\W</code>   之间的位置：</p>\n<p><code>\\w</code>: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字</p>\n<p>示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hel lo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/\\b/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// #hel# #lo#</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>\\B</code> 则和 <code>\\b</code>  相反， 匹配的位置是单词字符内的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/\\B/g</span>;</span><br><span class=\"line\">res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// h#e#l l#o;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"P-以及-P\"><a href=\"#P-以及-P\" class=\"headerlink\" title=\"(?=P) 以及 (?!P)\"></a><code>(?=P)</code> 以及 <code>(?!P)</code></h4><p>使用 <code>(?=P)</code> 用来匹配特定字符前的位置, <code>P</code> 是一个正则表达式；</p>\n<p>如下： 给单词中的 l 字符前面添加字符 <code>#</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?=l)/g</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// he#l#lo</span></span><br></pre></td></tr></table></figure>\n<p>给每一个单词字符前面添加一个字符 <code>*</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = /(?=\\w)/g;</span><br><span class=\"line\">str = &apos;hello&apos;;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">// *h*e*l *l*o</span><br></pre></td></tr></table></figure>\n<p>使用 <code>(?!P)</code> 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：</p>\n<p>例如上面的例子， 我们使用 <code>(?!P)</code> 来代替 <code>(?=P)</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?!l)/</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'*'</span>);</span><br><span class=\"line\"><span class=\"comment\">// *h*ell*o*</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们仅仅想匹配到单词内部的时候</span></span><br><span class=\"line\">regex = <span class=\"regexp\">/(?!l)(?!^)(?!$)/</span>;</span><br><span class=\"line\"><span class=\"comment\">// h*ell*o</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>(?!^)(?!$)</code> 是匹配除了单词开头和结尾的位置， 这里可以使用 <code>/B</code> 来进行代替;  </p>\n<p><code>regex = /(?!l)(\\B)/</code> </p>\n<p>如下， 给一个数字添加千位分隔符 ‘,’  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"12345678\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">','</span>); <span class=\"comment\">// 12,345,678</span></span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ‘ ,’;  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;<span class=\"number\">3</span>&#125;)+$ <span class=\"comment\">// 匹配结尾处向前 3 个或者多个 3 字符倍数的字符</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?=(\\d&#123;<span class=\"number\">3</span>&#125;)+$) <span class=\"comment\">// 匹配 3 个字符或者 3 个字符倍数的字符前面的位置</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^) <span class=\"comment\">// 匹配非开头的位置</span></span><br></pre></td></tr></table></figure>\n<p>如下， 给钱数添加人民币符号 <code>¥</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"string\">'1234'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=^)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = number.replace(regex, <span class=\"string\">'¥ '</span>);</span><br><span class=\"line\"><span class=\"comment\">// ¥ 1234</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断一段字符中必须包含有数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=.*[0-9])^/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]</span></span><br><span class=\"line\"><span class=\"comment\">// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断字符中不能全部为数字,  可以使用 <code>?!P</code> 进行判断</p>\n<p>判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断6位字符串中全部为数字</span><br><span class=\"line\">let regex = /(?=[0-9]&#123;6&#125;)/</span><br></pre></td></tr></table></figure>\n<p>因为 <code>?!</code> 和 <code>?=</code> 互为反义， 因此， 判断不能全部为数字的正则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?![0-9]&#123;6&#125;)/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// false</span></span><br><span class=\"line\">str = <span class=\"string\">'a23456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>正则表达式中的位置匹配：</p>\n<p><strong>正则表达式是匹配模式， 要么匹配字符， 要么匹配位置</strong></p>\n<p>对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：</p>\n<p><code>^</code>   <code>$</code>  <code>\\b</code>  <code>\\B</code>    <code>(?=p)</code> <code>(?!p)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th>匹配含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td>匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td>匹配字符串的结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td>单词边界， 具体就是 <code>\\w</code> 与 <code>\\W</code> 之间的位置, 以及字符串的开始位置和结尾位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td>是 <code>/b</code> 之外的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?=P)</code></td>\n<td><code>p</code> 是一个模式， 这个正则表达式匹配的是<code>P</code> 之前的位置， 或者当前位置之后的字符要匹配正则表达式 <code>P</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?!P)</code></td>\n<td>这个与 <code>(?=P)</code> 意思相反， 是除了 <code>(?=P)</code> 之外的位置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"以及\"><a href=\"#以及\" class=\"headerlink\" title=\"^ 以及 $\"></a><code>^</code> 以及 <code>$</code></h4><p>用于匹配字符串开头或者字符串结尾的位置：</p>\n<p>如下例子：将字符的开头和结尾添加特定的字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello&apos;;</span><br><span class=\"line\">let regex = /^|$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">console.log(res); // &apos;*hello*&apos;</span><br></pre></td></tr></table></figure>\n<p>例如下面， 使用 <code>replace</code>  代替     <code>trim</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hell o   '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// hell o</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"b-以及-B\"><a href=\"#b-以及-B\" class=\"headerlink\" title=\"\\b 以及 \\B\"></a><code>\\b</code> 以及 <code>\\B</code></h4><p>使用 <code>\\b</code> 的作用是匹配单词边界之间的位置， 具体而言是 <code>\\w</code> 以及 <code>\\W</code>   之间的位置：</p>\n<p><code>\\w</code>: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字</p>\n<p>示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hel lo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/\\b/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// #hel# #lo#</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>\\B</code> 则和 <code>\\b</code>  相反， 匹配的位置是单词字符内的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/\\B/g</span>;</span><br><span class=\"line\">res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// h#e#l l#o;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"P-以及-P\"><a href=\"#P-以及-P\" class=\"headerlink\" title=\"(?=P) 以及 (?!P)\"></a><code>(?=P)</code> 以及 <code>(?!P)</code></h4><p>使用 <code>(?=P)</code> 用来匹配特定字符前的位置, <code>P</code> 是一个正则表达式；</p>\n<p>如下： 给单词中的 l 字符前面添加字符 <code>#</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?=l)/g</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// he#l#lo</span></span><br></pre></td></tr></table></figure>\n<p>给每一个单词字符前面添加一个字符 <code>*</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = /(?=\\w)/g;</span><br><span class=\"line\">str = &apos;hello&apos;;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">// *h*e*l *l*o</span><br></pre></td></tr></table></figure>\n<p>使用 <code>(?!P)</code> 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：</p>\n<p>例如上面的例子， 我们使用 <code>(?!P)</code> 来代替 <code>(?=P)</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?!l)/</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'*'</span>);</span><br><span class=\"line\"><span class=\"comment\">// *h*ell*o*</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们仅仅想匹配到单词内部的时候</span></span><br><span class=\"line\">regex = <span class=\"regexp\">/(?!l)(?!^)(?!$)/</span>;</span><br><span class=\"line\"><span class=\"comment\">// h*ell*o</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>(?!^)(?!$)</code> 是匹配除了单词开头和结尾的位置， 这里可以使用 <code>/B</code> 来进行代替;  </p>\n<p><code>regex = /(?!l)(\\B)/</code> </p>\n<p>如下， 给一个数字添加千位分隔符 ‘,’  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"12345678\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">','</span>); <span class=\"comment\">// 12,345,678</span></span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ‘ ,’;  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;<span class=\"number\">3</span>&#125;)+$ <span class=\"comment\">// 匹配结尾处向前 3 个或者多个 3 字符倍数的字符</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?=(\\d&#123;<span class=\"number\">3</span>&#125;)+$) <span class=\"comment\">// 匹配 3 个字符或者 3 个字符倍数的字符前面的位置</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^) <span class=\"comment\">// 匹配非开头的位置</span></span><br></pre></td></tr></table></figure>\n<p>如下， 给钱数添加人民币符号 <code>¥</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"string\">'1234'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=^)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = number.replace(regex, <span class=\"string\">'¥ '</span>);</span><br><span class=\"line\"><span class=\"comment\">// ¥ 1234</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断一段字符中必须包含有数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=.*[0-9])^/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]</span></span><br><span class=\"line\"><span class=\"comment\">// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断字符中不能全部为数字,  可以使用 <code>?!P</code> 进行判断</p>\n<p>判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断6位字符串中全部为数字</span><br><span class=\"line\">let regex = /(?=[0-9]&#123;6&#125;)/</span><br></pre></td></tr></table></figure>\n<p>因为 <code>?!</code> 和 <code>?=</code> 互为反义， 因此， 判断不能全部为数字的正则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?![0-9]&#123;6&#125;)/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// false</span></span><br><span class=\"line\">str = <span class=\"string\">'a23456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"日历","date":"2017-08-31T15:02:53.000Z","_content":"\n#### 使用面向对象的 js 代码写法，写了一个日历，代码如下\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    单个时间<input type=\"text\" id=\"startTime\">\n    时间段<input type=\"text\" id=\"longTime\">\n</div>\n<div id=\"content\">\n</div>\n<script>\n\n    (function (window){\n        function $(tag, parent) {\n            var children = [];\n            if (tag.indexOf('#') !== -1) {\n                children = document.getElementById(tag.slice(1));\n            } else if (tag.indexOf('.') !== -1) {\n                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n            } else {\n                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n            }\n            return children;\n        }\n\n        function listenEvent(dom,event,fn) {\n            \n            if (dom.attachEvent) {\n                dom.attachEvent('on' + event, fn);\n            } else {\n                dom.addEventListener(event, fn);\n            }\n        }\n\n        function dateUI (isSingle ,inputIdName, callBack) {\n            this.isSingle = isSingle;\n            this.inputIdName = inputIdName;\n            this.callBack = callBack;\n            \n            var date = new Date();\n\n            this.data = {\n                weekDay: ['日', '一', '二', '三', '四', '五', '六'],\n                minDate: '',\n                maxData: '',\n                year: 2017,\n                month: 8,\n                selectDays: []\n            }\n            this.data.year = 2017;\n            this.data.month = 8;\n\n        }\n\n        dateUI.prototype = {\n            $ : function (tag, parent) {\n                var children = [];\n                if (tag.indexOf('#') !== -1) {\n                    children = document.getElementById(tag.slice(1));\n                } else if (tag.indexOf('.') !== -1) {\n                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n                } else {\n                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n                }\n                return children;\n            },\n            listenEvent: function (dom, event, fn) {\n                if (dom.attachEvent) {\n                    dom.attachEvent('on' + event, fn);\n                } else {\n                    dom.addEventListener(event, fn);\n                }\n            },\n            initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n            },\n            reactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n            dateAct: function () {\n                var that = this;\n                var inputAdd = ['#month', '#year'];\n                that.listenEvent(that.$('#back') ,'click', function () {\n                    that.data.month++;\n                    that.initDate();\n                });\n                that.listenEvent(that.$('#pre') ,'click', function () {\n                    that.data.month--;\n                    that.initDate();\n                });\n                inputAdd.map(function (item) {\n                    that.listenEvent($(item) ,'change', function () {\n                        if (item === '#month') {\n                            that.data.month = $(item).value;\n                        } else {\n                            that.data.year = $(item).value;\n                        }\n                        that.initDate();\n                    })\n                });\n            },\n            initDate: function () {\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                var startDate = date.getDay();\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                for (let i = 0 ; i < 42; i++) {\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {\n                                // 这里有bug\n\n                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {\n                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                that.callBack();\n                            };\n                        } else {\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n            initColor: function (year, month, day) {\n                \n                    var that = this;\n                    var _minDate;\n                    var _maxDate;\n                    if (year) {\n                        var obj = {};\n                        obj.year = year;\n                        obj.month = month;\n                        obj.day = day;\n                        if (that.isSingle) {\n                            that.data.selectDays[0] = obj;\n                        } else {\n                            that.data.selectDays.push(obj);\n                            if (that.data.selectDays.length >= 2) {\n                                that.data.selectDays[1] = obj;\n                                that.data.selectDays.length = 2;\n                            }\n                        }\n                    } else {\n                        that.tds.map(function (item) {\n                            item.className = '';\n                        });\n                        \n                        that.data.selectDays.map(function (key) {\n                \n                            ((key.year === that.data.year) && (key.month === that.data.month)) ? that.tds[key.day].className = 'tdActive'  : '' ;\n                        });\n\n                        if (that.data.selectDays.length === 2) {\n                            if (that.data.selectDays.length === 2) {\n                                if (that.data.selectDays[0].day < that.data.selectDays[1].day) {\n                                    _minDate = that.data.selectDays[0].day;\n                                    _maxDate = that.data.selectDays[1].day;\n                                } else {\n                                    _maxDate = that.data.selectDays[0].day;\n                                    _minDate = that.data.selectDays[1].day;\n                                }\n                            }\n                            for (var j = _minDate + 1; j < _maxDate; j++) {\n                                if (that.data.selectDays[0].month === that.data.selectDays[1].month && that.data.selectDays[0].month === that.data.month) {\n                                    that.tds[j].className = 'timeBar';\n                                } else {\n                                    that.tds[j].className = '';\n                                }\n                            }\n                        }\n                    }\n            }\n\n        };\n        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素\n        // data.year // data.month 表示真实的年和月\n        // data 对象， 用来集中管理数据信息\n\n        // initTable 用于初始化表格，构建日期选择框\n\n\n        // initData 将data 内的数据和 input 输入框内的数据进行同步，\n        // 自动同步\n        if (window.dateCanlender !== 'undefined') {\n            listenEvent(document.getElementById('startTime'), 'click', function () {\n                $('#content').style.display = 'block'\n            });\n            var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n                dateCanlender.initTable();\n                dateCanlender.tds = document.getElementsByTagName('td');\n                dateCanlender.tds = [].slice.call(dateCanlender.tds);\n                dateCanlender.reactData();\n                var date = new Date();\n                dateCanlender.data.year = date.getFullYear();\n                dateCanlender.data.month = date.getMonth() + 1;\n               \n                dateCanlender.initDate();\n                dateCanlender.dateAct();\n        }\n    }(window))\n</script>\n<style>\n    #content {\n        display: none;\n        border: 2px solid darkgray;\n        padding: 10px;\n        margin: 50px auto;\n        width: 300px;\n    }\n    #title {\n        margin: 10px 0;\n        display: flex;\n        justify-content: space-between;\n    }\n    #title span, #title input {\n        display: inline-block;\n        width: 25%;\n        text-align: center;\n        flex: 1;\n    }\n    #title input {\n        margin: 0 10px;\n    }\n    #main {\n        width: 300px;\n    }\n    table, table thead {\n        width: 100%;\n    }\n    table thead tr {\n        width: 100%;\n        margin: 10px 0;\n        /*\n        display: flex;\n        justify-content: space-between;\n        */\n    }\n    table td {\n        text-align: center;\n    }\n    .tdActive {\n        color: white;\n        background-color: skyblue;\n    }\n\n    .timeBar {\n        background-color: gray;\n    }\n    .notClick{\n        color: lightgray;\n    }\n</style>\n</body>\n</html>\n```\n\n#### 思路\n\n这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。\n\n代码如下:\n\n```\nfunction person () {\n    }\nperson.prototype.eye = 2;\nvar he = new person();\nhe.eye // 2\n```\n\n上面的代码中，通过使用 `new` 操作符创建了 `person` 构造函数的一个实例，在构造函数中定义了一个属性 `eye` ，根据在原型链中的继承的特性，使用 `new` 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。\n\n>在通过 `new ` 操作符的过程中发生了什么？\n>\n>1.创建一个新对象\n>\n>2.将构造函数的作用域赋给新对象，（这时候 `this` 指向这个新对象）\n>\n>3.执行构造函数的代码 （这个新对象添加属性）\n>\n>4.返回新对象\n\n在上面的代码中\n\n```\n var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n```\n\n这段代码创建了构造函数 `dateUI` 的一个新实例。\n\n在构造函数的原型上，给原型添加方法 : `initTable`   `reactData`  `initDate`     ` initColor`     `dateAct`\n\n`initTable`  用来初始化表格，生成表格\n\n```\n initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n```\n\n上面中的代码 `[].slice.call(that.tds)` 将类数组对象 `tds` 转化为数组，从而可以使用数组的方法\n\n>数组中 `slice` 的方法\n\n`reactData`: 将数据变为可以跟踪变化的形式，类似于在 `vue` 中的，将  `data` 数据变为可响应式的，使用的是 \n\n`Object.defineProperty()` 方法, `getter`  `setter` 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。\n\n代码如下:\n\n```\nreactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n```\n\n`initDate` 用来像表格中填入数据：\n\n代码如下：\n\n```\n initDate: function () {\n \t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                // startDate 得到的是当月 1 号的星期几\n                var startDate = date.getDay();\n                // allDates 得到的是当前月全部的日期\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                // 下面的程序用来向表格内填入天的号数\n                for (let i = 0 ; i < 42; i++) {\n                \t// 判断开始时间，即判断表格中位于 1 号之前的表格\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        // 定义位于中间的表格可以点击区域\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {                                         \n                                // 将当前的年 月 表格输存入数组                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                // 清空input 框内的数据\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                // 点击事件完成之后调用回调函数\n                                that.callBack();\n                            };\n                        } else {\n                        // 使用 onclick = null 回收点击事件\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n                                \n```\n\n在上段代码中使用的日期对象的一些方法；\n\n`initColor` ：用来重置表格的颜色\n\n`dateAct` 用来定义日历的一些行为\n\n#### 代码总结:\n\n1.使用面向对象的写法进行编写的，而非之前的面向过程编写\n\n2.熟悉 js 中关于使用日期事件的一些方法\n\n#### 在代码中的一些问题:\n\n1.代码逻辑混乱，这一部分需要加强\n\n2.代码中需要规范，包括注释，变量的定义\n\n3.使用面向对象的写法的时候，需要知道使用 使用 `property` 构建函数的时候发生了什么，以及代码中 `this` 的指向值\n\n#### little  Tips\n\n1. `addEventListener`  `attachEvent`\n\n   ```\n   <div id='btn'>\n   </div>\n   <script>\n   \twindow.onload = function () {\n         var button = document.getElementById('btn');\n         Good.addEventListener('click', function () {\n   \t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素\n   \t\t})\n   \t}\n   </script>\n   ```\n\n   > `addEventistener` 用于监听事件\n   >\n   > `target.addEventListenter(event, fn , [userCapture])`\n   >\n   > `event` : 表示要进行监听的事件 [string]\n   >\n   > `fn` :表示 监听到事件之后的回调函数\n   >\n   > `userCapture` : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]\n\n   **在 `addEventListener`中定义的 `this` 值指向的是 tartget 对象**\n\n   在 IE 下 使用 `attachEvent` 来实现类似 `addEventListener` 的行为:\n\n   实现兼容性：\n\n   ```\n   function listenEvent(dom,event,fn) {\n               \n               if (dom.attachEvent) {\n                   dom.attachEvent('on' + event, fn);\n               } else {\n                   dom.addEventListener(event, fn);\n               }\n           }\n   ```\n\n\n2.使用 `Date`对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的\n\n","source":"_posts/日历.md","raw":"---\ntitle: 日历\ndate: 2017-08-31 23:02:53\ntags: '日历'\ncategories: 代码集\n---\n\n#### 使用面向对象的 js 代码写法，写了一个日历，代码如下\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    单个时间<input type=\"text\" id=\"startTime\">\n    时间段<input type=\"text\" id=\"longTime\">\n</div>\n<div id=\"content\">\n</div>\n<script>\n\n    (function (window){\n        function $(tag, parent) {\n            var children = [];\n            if (tag.indexOf('#') !== -1) {\n                children = document.getElementById(tag.slice(1));\n            } else if (tag.indexOf('.') !== -1) {\n                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n            } else {\n                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n            }\n            return children;\n        }\n\n        function listenEvent(dom,event,fn) {\n            \n            if (dom.attachEvent) {\n                dom.attachEvent('on' + event, fn);\n            } else {\n                dom.addEventListener(event, fn);\n            }\n        }\n\n        function dateUI (isSingle ,inputIdName, callBack) {\n            this.isSingle = isSingle;\n            this.inputIdName = inputIdName;\n            this.callBack = callBack;\n            \n            var date = new Date();\n\n            this.data = {\n                weekDay: ['日', '一', '二', '三', '四', '五', '六'],\n                minDate: '',\n                maxData: '',\n                year: 2017,\n                month: 8,\n                selectDays: []\n            }\n            this.data.year = 2017;\n            this.data.month = 8;\n\n        }\n\n        dateUI.prototype = {\n            $ : function (tag, parent) {\n                var children = [];\n                if (tag.indexOf('#') !== -1) {\n                    children = document.getElementById(tag.slice(1));\n                } else if (tag.indexOf('.') !== -1) {\n                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n                } else {\n                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n                }\n                return children;\n            },\n            listenEvent: function (dom, event, fn) {\n                if (dom.attachEvent) {\n                    dom.attachEvent('on' + event, fn);\n                } else {\n                    dom.addEventListener(event, fn);\n                }\n            },\n            initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n            },\n            reactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n            dateAct: function () {\n                var that = this;\n                var inputAdd = ['#month', '#year'];\n                that.listenEvent(that.$('#back') ,'click', function () {\n                    that.data.month++;\n                    that.initDate();\n                });\n                that.listenEvent(that.$('#pre') ,'click', function () {\n                    that.data.month--;\n                    that.initDate();\n                });\n                inputAdd.map(function (item) {\n                    that.listenEvent($(item) ,'change', function () {\n                        if (item === '#month') {\n                            that.data.month = $(item).value;\n                        } else {\n                            that.data.year = $(item).value;\n                        }\n                        that.initDate();\n                    })\n                });\n            },\n            initDate: function () {\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                var startDate = date.getDay();\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                for (let i = 0 ; i < 42; i++) {\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {\n                                // 这里有bug\n\n                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {\n                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                that.callBack();\n                            };\n                        } else {\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n            initColor: function (year, month, day) {\n                \n                    var that = this;\n                    var _minDate;\n                    var _maxDate;\n                    if (year) {\n                        var obj = {};\n                        obj.year = year;\n                        obj.month = month;\n                        obj.day = day;\n                        if (that.isSingle) {\n                            that.data.selectDays[0] = obj;\n                        } else {\n                            that.data.selectDays.push(obj);\n                            if (that.data.selectDays.length >= 2) {\n                                that.data.selectDays[1] = obj;\n                                that.data.selectDays.length = 2;\n                            }\n                        }\n                    } else {\n                        that.tds.map(function (item) {\n                            item.className = '';\n                        });\n                        \n                        that.data.selectDays.map(function (key) {\n                \n                            ((key.year === that.data.year) && (key.month === that.data.month)) ? that.tds[key.day].className = 'tdActive'  : '' ;\n                        });\n\n                        if (that.data.selectDays.length === 2) {\n                            if (that.data.selectDays.length === 2) {\n                                if (that.data.selectDays[0].day < that.data.selectDays[1].day) {\n                                    _minDate = that.data.selectDays[0].day;\n                                    _maxDate = that.data.selectDays[1].day;\n                                } else {\n                                    _maxDate = that.data.selectDays[0].day;\n                                    _minDate = that.data.selectDays[1].day;\n                                }\n                            }\n                            for (var j = _minDate + 1; j < _maxDate; j++) {\n                                if (that.data.selectDays[0].month === that.data.selectDays[1].month && that.data.selectDays[0].month === that.data.month) {\n                                    that.tds[j].className = 'timeBar';\n                                } else {\n                                    that.tds[j].className = '';\n                                }\n                            }\n                        }\n                    }\n            }\n\n        };\n        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素\n        // data.year // data.month 表示真实的年和月\n        // data 对象， 用来集中管理数据信息\n\n        // initTable 用于初始化表格，构建日期选择框\n\n\n        // initData 将data 内的数据和 input 输入框内的数据进行同步，\n        // 自动同步\n        if (window.dateCanlender !== 'undefined') {\n            listenEvent(document.getElementById('startTime'), 'click', function () {\n                $('#content').style.display = 'block'\n            });\n            var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n                dateCanlender.initTable();\n                dateCanlender.tds = document.getElementsByTagName('td');\n                dateCanlender.tds = [].slice.call(dateCanlender.tds);\n                dateCanlender.reactData();\n                var date = new Date();\n                dateCanlender.data.year = date.getFullYear();\n                dateCanlender.data.month = date.getMonth() + 1;\n               \n                dateCanlender.initDate();\n                dateCanlender.dateAct();\n        }\n    }(window))\n</script>\n<style>\n    #content {\n        display: none;\n        border: 2px solid darkgray;\n        padding: 10px;\n        margin: 50px auto;\n        width: 300px;\n    }\n    #title {\n        margin: 10px 0;\n        display: flex;\n        justify-content: space-between;\n    }\n    #title span, #title input {\n        display: inline-block;\n        width: 25%;\n        text-align: center;\n        flex: 1;\n    }\n    #title input {\n        margin: 0 10px;\n    }\n    #main {\n        width: 300px;\n    }\n    table, table thead {\n        width: 100%;\n    }\n    table thead tr {\n        width: 100%;\n        margin: 10px 0;\n        /*\n        display: flex;\n        justify-content: space-between;\n        */\n    }\n    table td {\n        text-align: center;\n    }\n    .tdActive {\n        color: white;\n        background-color: skyblue;\n    }\n\n    .timeBar {\n        background-color: gray;\n    }\n    .notClick{\n        color: lightgray;\n    }\n</style>\n</body>\n</html>\n```\n\n#### 思路\n\n这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。\n\n代码如下:\n\n```\nfunction person () {\n    }\nperson.prototype.eye = 2;\nvar he = new person();\nhe.eye // 2\n```\n\n上面的代码中，通过使用 `new` 操作符创建了 `person` 构造函数的一个实例，在构造函数中定义了一个属性 `eye` ，根据在原型链中的继承的特性，使用 `new` 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。\n\n>在通过 `new ` 操作符的过程中发生了什么？\n>\n>1.创建一个新对象\n>\n>2.将构造函数的作用域赋给新对象，（这时候 `this` 指向这个新对象）\n>\n>3.执行构造函数的代码 （这个新对象添加属性）\n>\n>4.返回新对象\n\n在上面的代码中\n\n```\n var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n```\n\n这段代码创建了构造函数 `dateUI` 的一个新实例。\n\n在构造函数的原型上，给原型添加方法 : `initTable`   `reactData`  `initDate`     ` initColor`     `dateAct`\n\n`initTable`  用来初始化表格，生成表格\n\n```\n initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n```\n\n上面中的代码 `[].slice.call(that.tds)` 将类数组对象 `tds` 转化为数组，从而可以使用数组的方法\n\n>数组中 `slice` 的方法\n\n`reactData`: 将数据变为可以跟踪变化的形式，类似于在 `vue` 中的，将  `data` 数据变为可响应式的，使用的是 \n\n`Object.defineProperty()` 方法, `getter`  `setter` 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。\n\n代码如下:\n\n```\nreactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n```\n\n`initDate` 用来像表格中填入数据：\n\n代码如下：\n\n```\n initDate: function () {\n \t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                // startDate 得到的是当月 1 号的星期几\n                var startDate = date.getDay();\n                // allDates 得到的是当前月全部的日期\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                // 下面的程序用来向表格内填入天的号数\n                for (let i = 0 ; i < 42; i++) {\n                \t// 判断开始时间，即判断表格中位于 1 号之前的表格\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        // 定义位于中间的表格可以点击区域\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {                                         \n                                // 将当前的年 月 表格输存入数组                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                // 清空input 框内的数据\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                // 点击事件完成之后调用回调函数\n                                that.callBack();\n                            };\n                        } else {\n                        // 使用 onclick = null 回收点击事件\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n                                \n```\n\n在上段代码中使用的日期对象的一些方法；\n\n`initColor` ：用来重置表格的颜色\n\n`dateAct` 用来定义日历的一些行为\n\n#### 代码总结:\n\n1.使用面向对象的写法进行编写的，而非之前的面向过程编写\n\n2.熟悉 js 中关于使用日期事件的一些方法\n\n#### 在代码中的一些问题:\n\n1.代码逻辑混乱，这一部分需要加强\n\n2.代码中需要规范，包括注释，变量的定义\n\n3.使用面向对象的写法的时候，需要知道使用 使用 `property` 构建函数的时候发生了什么，以及代码中 `this` 的指向值\n\n#### little  Tips\n\n1. `addEventListener`  `attachEvent`\n\n   ```\n   <div id='btn'>\n   </div>\n   <script>\n   \twindow.onload = function () {\n         var button = document.getElementById('btn');\n         Good.addEventListener('click', function () {\n   \t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素\n   \t\t})\n   \t}\n   </script>\n   ```\n\n   > `addEventistener` 用于监听事件\n   >\n   > `target.addEventListenter(event, fn , [userCapture])`\n   >\n   > `event` : 表示要进行监听的事件 [string]\n   >\n   > `fn` :表示 监听到事件之后的回调函数\n   >\n   > `userCapture` : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]\n\n   **在 `addEventListener`中定义的 `this` 值指向的是 tartget 对象**\n\n   在 IE 下 使用 `attachEvent` 来实现类似 `addEventListener` 的行为:\n\n   实现兼容性：\n\n   ```\n   function listenEvent(dom,event,fn) {\n               \n               if (dom.attachEvent) {\n                   dom.attachEvent('on' + event, fn);\n               } else {\n                   dom.addEventListener(event, fn);\n               }\n           }\n   ```\n\n\n2.使用 `Date`对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的\n\n","slug":"日历","published":1,"updated":"2020-09-14T06:36:26.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t990064i2oseit9bnn3","content":"<h4 id=\"使用面向对象的-js-代码写法，写了一个日历，代码如下\"><a href=\"#使用面向对象的-js-代码写法，写了一个日历，代码如下\" class=\"headerlink\" title=\"使用面向对象的 js 代码写法，写了一个日历，代码如下\"></a>使用面向对象的 js 代码写法，写了一个日历，代码如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    单个时间&lt;input type=&quot;text&quot; id=&quot;startTime&quot;&gt;</span><br><span class=\"line\">    时间段&lt;input type=&quot;text&quot; id=&quot;longTime&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    (function (window)&#123;</span><br><span class=\"line\">        function $(tag, parent) &#123;</span><br><span class=\"line\">            var children = [];</span><br><span class=\"line\">            if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">            &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return children;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function dateUI (isSingle ,inputIdName, callBack) &#123;</span><br><span class=\"line\">            this.isSingle = isSingle;</span><br><span class=\"line\">            this.inputIdName = inputIdName;</span><br><span class=\"line\">            this.callBack = callBack;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var date = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">            this.data = &#123;</span><br><span class=\"line\">                weekDay: [&apos;日&apos;, &apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;],</span><br><span class=\"line\">                minDate: &apos;&apos;,</span><br><span class=\"line\">                maxData: &apos;&apos;,</span><br><span class=\"line\">                year: 2017,</span><br><span class=\"line\">                month: 8,</span><br><span class=\"line\">                selectDays: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.data.year = 2017;</span><br><span class=\"line\">            this.data.month = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dateUI.prototype = &#123;</span><br><span class=\"line\">            $ : function (tag, parent) &#123;</span><br><span class=\"line\">                var children = [];</span><br><span class=\"line\">                if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">                &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return children;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            listenEvent: function (dom, event, fn) &#123;</span><br><span class=\"line\">                if (dom.attachEvent) &#123;</span><br><span class=\"line\">                    dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    dom.addEventListener(event, fn);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initTable: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">                title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">                var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">                var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">                table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">                main.appendChild(table);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">                for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var _ROW = 6;</span><br><span class=\"line\">                var _COL = 7;</span><br><span class=\"line\">                for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                    for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                        that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.tds = [].slice.call(that.tds);</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            dateAct: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var inputAdd = [&apos;#month&apos;, &apos;#year&apos;];</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#back&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month++;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#pre&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month--;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                inputAdd.map(function (item) &#123;</span><br><span class=\"line\">                    that.listenEvent($(item) ,&apos;change&apos;, function () &#123;</span><br><span class=\"line\">                        if (item === &apos;#month&apos;) &#123;</span><br><span class=\"line\">                            that.data.month = $(item).value;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.year = $(item).value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        that.initDate();</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initDate: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">                var startDate = date.getDay();</span><br><span class=\"line\">                var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">                var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.initColor();</span><br><span class=\"line\">                var j = 0;</span><br><span class=\"line\">                startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">                for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">                    if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                        j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                        tds[i].innerHTML = j;</span><br><span class=\"line\">                        if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                            tds[i].onclick = function () &#123;</span><br><span class=\"line\">                                // 这里有bug</span><br><span class=\"line\"></span><br><span class=\"line\">                                </span><br><span class=\"line\">                                that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                                that.initColor();</span><br><span class=\"line\">                                that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                                that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                    if (!that.isSingle) &#123;</span><br><span class=\"line\">                                        var min;</span><br><span class=\"line\">                                        that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                                if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                    min = item;</span><br><span class=\"line\">                                                &#125; else &#123;</span><br><span class=\"line\">                                                    min = that.data.selectDays[0];</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        );</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                that.callBack();</span><br><span class=\"line\">                            &#125;;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            tds[i].onclick = null;</span><br><span class=\"line\">                            tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                        document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                        tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initColor: function (year, month, day) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                    var that = this;</span><br><span class=\"line\">                    var _minDate;</span><br><span class=\"line\">                    var _maxDate;</span><br><span class=\"line\">                    if (year) &#123;</span><br><span class=\"line\">                        var obj = &#123;&#125;;</span><br><span class=\"line\">                        obj.year = year;</span><br><span class=\"line\">                        obj.month = month;</span><br><span class=\"line\">                        obj.day = day;</span><br><span class=\"line\">                        if (that.isSingle) &#123;</span><br><span class=\"line\">                            that.data.selectDays[0] = obj;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.selectDays.push(obj);</span><br><span class=\"line\">                            if (that.data.selectDays.length &gt;= 2) &#123;</span><br><span class=\"line\">                                that.data.selectDays[1] = obj;</span><br><span class=\"line\">                                that.data.selectDays.length = 2;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        that.tds.map(function (item) &#123;</span><br><span class=\"line\">                            item.className = &apos;&apos;;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        that.data.selectDays.map(function (key) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                            ((key.year === that.data.year) &amp;&amp; (key.month === that.data.month)) ? that.tds[key.day].className = &apos;tdActive&apos;  : &apos;&apos; ;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                            if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].day &lt; that.data.selectDays[1].day) &#123;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            for (var j = _minDate + 1; j &lt; _maxDate; j++) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].month === that.data.selectDays[1].month &amp;&amp; that.data.selectDays[0].month === that.data.month) &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;timeBar&apos;;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素</span><br><span class=\"line\">        // data.year // data.month 表示真实的年和月</span><br><span class=\"line\">        // data 对象， 用来集中管理数据信息</span><br><span class=\"line\"></span><br><span class=\"line\">        // initTable 用于初始化表格，构建日期选择框</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // initData 将data 内的数据和 input 输入框内的数据进行同步，</span><br><span class=\"line\">        // 自动同步</span><br><span class=\"line\">        if (window.dateCanlender !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">            listenEvent(document.getElementById(&apos;startTime&apos;), &apos;click&apos;, function () &#123;</span><br><span class=\"line\">                $(&apos;#content&apos;).style.display = &apos;block&apos;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">                dateCanlender.initTable();</span><br><span class=\"line\">                dateCanlender.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                dateCanlender.tds = [].slice.call(dateCanlender.tds);</span><br><span class=\"line\">                dateCanlender.reactData();</span><br><span class=\"line\">                var date = new Date();</span><br><span class=\"line\">                dateCanlender.data.year = date.getFullYear();</span><br><span class=\"line\">                dateCanlender.data.month = date.getMonth() + 1;</span><br><span class=\"line\">               </span><br><span class=\"line\">                dateCanlender.initDate();</span><br><span class=\"line\">                dateCanlender.dateAct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(window))</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    #content &#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">        border: 2px solid darkgray;</span><br><span class=\"line\">        padding: 10px;</span><br><span class=\"line\">        margin: 50px auto;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title &#123;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title span, #title input &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title input &#123;</span><br><span class=\"line\">        margin: 0 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #main &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table, table thead &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table thead tr &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table td &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .tdActive &#123;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background-color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .timeBar &#123;</span><br><span class=\"line\">        background-color: gray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .notClick&#123;</span><br><span class=\"line\">        color: lightgray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">person.prototype.eye = 2;</span><br><span class=\"line\">var he = new person();</span><br><span class=\"line\">he.eye // 2</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，通过使用 <code>new</code> 操作符创建了 <code>person</code> 构造函数的一个实例，在构造函数中定义了一个属性 <code>eye</code> ，根据在原型链中的继承的特性，使用 <code>new</code> 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。</p>\n<blockquote>\n<p>在通过 <code>new</code> 操作符的过程中发生了什么？</p>\n<p>1.创建一个新对象</p>\n<p>2.将构造函数的作用域赋给新对象，（这时候 <code>this</code> 指向这个新对象）</p>\n<p>3.执行构造函数的代码 （这个新对象添加属性）</p>\n<p>4.返回新对象</p>\n</blockquote>\n<p>在上面的代码中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码创建了构造函数 <code>dateUI</code> 的一个新实例。</p>\n<p>在构造函数的原型上，给原型添加方法 : <code>initTable</code>   <code>reactData</code>  <code>initDate</code>     <code>initColor</code>     <code>dateAct</code></p>\n<p><code>initTable</code>  用来初始化表格，生成表格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTable: function () &#123;</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">               title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">               var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">               var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">               table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">               main.appendChild(table);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">               for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               var _ROW = 6;</span><br><span class=\"line\">               var _COL = 7;</span><br><span class=\"line\">               for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                   for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                       that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.tds = [].slice.call(that.tds);</span><br></pre></td></tr></table></figure>\n<p>上面中的代码 <code>[].slice.call(that.tds)</code> 将类数组对象 <code>tds</code> 转化为数组，从而可以使用数组的方法</p>\n<blockquote>\n<p>数组中 <code>slice</code> 的方法</p>\n</blockquote>\n<p><code>reactData</code>: 将数据变为可以跟踪变化的形式，类似于在 <code>vue</code> 中的，将  <code>data</code> 数据变为可响应式的，使用的是 </p>\n<p><code>Object.defineProperty()</code> 方法, <code>getter</code>  <code>setter</code> 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p><code>initDate</code> 用来像表格中填入数据：</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initDate: function () &#123;</span><br><span class=\"line\">\t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">               // startDate 得到的是当月 1 号的星期几</span><br><span class=\"line\">               var startDate = date.getDay();</span><br><span class=\"line\">               // allDates 得到的是当前月全部的日期</span><br><span class=\"line\">               var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">               var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.initColor();</span><br><span class=\"line\">               var j = 0;</span><br><span class=\"line\">               startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">               // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">               // 下面的程序用来向表格内填入天的号数</span><br><span class=\"line\">               for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">               \t// 判断开始时间，即判断表格中位于 1 号之前的表格</span><br><span class=\"line\">                   if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                       j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                       tds[i].innerHTML = j;</span><br><span class=\"line\">                       // 定义位于中间的表格可以点击区域</span><br><span class=\"line\">                       if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                           tds[i].onclick = function () &#123;                                         </span><br><span class=\"line\">                               // 将当前的年 月 表格输存入数组                                </span><br><span class=\"line\">                               that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                               that.initColor();</span><br><span class=\"line\">                               // 清空input 框内的数据</span><br><span class=\"line\">                               that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                               that.data.selectDays.map(function (item, index, array) &#123;                                    </span><br><span class=\"line\">                                   that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                   if (!that.isSingle) &#123;</span><br><span class=\"line\">                                       var min;</span><br><span class=\"line\">                                       that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                               if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                   min = item;</span><br><span class=\"line\">                                               &#125; else &#123;</span><br><span class=\"line\">                                                   min = that.data.selectDays[0];</span><br><span class=\"line\">                                               &#125;</span><br><span class=\"line\">                                           &#125;</span><br><span class=\"line\">                                       );</span><br><span class=\"line\">                                   &#125;</span><br><span class=\"line\">                               &#125;);</span><br><span class=\"line\">                               // 点击事件完成之后调用回调函数</span><br><span class=\"line\">                               that.callBack();</span><br><span class=\"line\">                           &#125;;</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                       // 使用 onclick = null 回收点击事件</span><br><span class=\"line\">                           tds[i].onclick = null;</span><br><span class=\"line\">                           tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                       document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                       tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;,</span><br></pre></td></tr></table></figure>\n<p>在上段代码中使用的日期对象的一些方法；</p>\n<p><code>initColor</code> ：用来重置表格的颜色</p>\n<p><code>dateAct</code> 用来定义日历的一些行为</p>\n<h4 id=\"代码总结\"><a href=\"#代码总结\" class=\"headerlink\" title=\"代码总结:\"></a>代码总结:</h4><p>1.使用面向对象的写法进行编写的，而非之前的面向过程编写</p>\n<p>2.熟悉 js 中关于使用日期事件的一些方法</p>\n<h4 id=\"在代码中的一些问题\"><a href=\"#在代码中的一些问题\" class=\"headerlink\" title=\"在代码中的一些问题:\"></a>在代码中的一些问题:</h4><p>1.代码逻辑混乱，这一部分需要加强</p>\n<p>2.代码中需要规范，包括注释，变量的定义</p>\n<p>3.使用面向对象的写法的时候，需要知道使用 使用 <code>property</code> 构建函数的时候发生了什么，以及代码中 <code>this</code> 的指向值</p>\n<h4 id=\"little-Tips\"><a href=\"#little-Tips\" class=\"headerlink\" title=\"little  Tips\"></a>little  Tips</h4><ol>\n<li><p><code>addEventListener</code>  <code>attachEvent</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;btn&apos;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.onload = function () &#123;</span><br><span class=\"line\">      var button = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\">      Good.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">\t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>addEventistener</code> 用于监听事件</p>\n<p><code>target.addEventListenter(event, fn , [userCapture])</code></p>\n<p><code>event</code> : 表示要进行监听的事件 [string]</p>\n<p><code>fn</code> :表示 监听到事件之后的回调函数</p>\n<p><code>userCapture</code> : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]</p>\n</blockquote>\n<p><strong>在 <code>addEventListener</code>中定义的 <code>this</code> 值指向的是 tartget 对象</strong></p>\n<p>在 IE 下 使用 <code>attachEvent</code> 来实现类似 <code>addEventListener</code> 的行为:</p>\n<p>实现兼容性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>Date</code>对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"使用面向对象的-js-代码写法，写了一个日历，代码如下\"><a href=\"#使用面向对象的-js-代码写法，写了一个日历，代码如下\" class=\"headerlink\" title=\"使用面向对象的 js 代码写法，写了一个日历，代码如下\"></a>使用面向对象的 js 代码写法，写了一个日历，代码如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    单个时间&lt;input type=&quot;text&quot; id=&quot;startTime&quot;&gt;</span><br><span class=\"line\">    时间段&lt;input type=&quot;text&quot; id=&quot;longTime&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    (function (window)&#123;</span><br><span class=\"line\">        function $(tag, parent) &#123;</span><br><span class=\"line\">            var children = [];</span><br><span class=\"line\">            if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">            &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return children;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function dateUI (isSingle ,inputIdName, callBack) &#123;</span><br><span class=\"line\">            this.isSingle = isSingle;</span><br><span class=\"line\">            this.inputIdName = inputIdName;</span><br><span class=\"line\">            this.callBack = callBack;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var date = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">            this.data = &#123;</span><br><span class=\"line\">                weekDay: [&apos;日&apos;, &apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;],</span><br><span class=\"line\">                minDate: &apos;&apos;,</span><br><span class=\"line\">                maxData: &apos;&apos;,</span><br><span class=\"line\">                year: 2017,</span><br><span class=\"line\">                month: 8,</span><br><span class=\"line\">                selectDays: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.data.year = 2017;</span><br><span class=\"line\">            this.data.month = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dateUI.prototype = &#123;</span><br><span class=\"line\">            $ : function (tag, parent) &#123;</span><br><span class=\"line\">                var children = [];</span><br><span class=\"line\">                if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">                &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return children;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            listenEvent: function (dom, event, fn) &#123;</span><br><span class=\"line\">                if (dom.attachEvent) &#123;</span><br><span class=\"line\">                    dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    dom.addEventListener(event, fn);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initTable: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">                title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">                var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">                var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">                table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">                main.appendChild(table);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">                for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var _ROW = 6;</span><br><span class=\"line\">                var _COL = 7;</span><br><span class=\"line\">                for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                    for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                        that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.tds = [].slice.call(that.tds);</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            dateAct: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var inputAdd = [&apos;#month&apos;, &apos;#year&apos;];</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#back&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month++;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#pre&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month--;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                inputAdd.map(function (item) &#123;</span><br><span class=\"line\">                    that.listenEvent($(item) ,&apos;change&apos;, function () &#123;</span><br><span class=\"line\">                        if (item === &apos;#month&apos;) &#123;</span><br><span class=\"line\">                            that.data.month = $(item).value;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.year = $(item).value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        that.initDate();</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initDate: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">                var startDate = date.getDay();</span><br><span class=\"line\">                var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">                var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.initColor();</span><br><span class=\"line\">                var j = 0;</span><br><span class=\"line\">                startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">                for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">                    if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                        j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                        tds[i].innerHTML = j;</span><br><span class=\"line\">                        if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                            tds[i].onclick = function () &#123;</span><br><span class=\"line\">                                // 这里有bug</span><br><span class=\"line\"></span><br><span class=\"line\">                                </span><br><span class=\"line\">                                that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                                that.initColor();</span><br><span class=\"line\">                                that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                                that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                    if (!that.isSingle) &#123;</span><br><span class=\"line\">                                        var min;</span><br><span class=\"line\">                                        that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                                if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                    min = item;</span><br><span class=\"line\">                                                &#125; else &#123;</span><br><span class=\"line\">                                                    min = that.data.selectDays[0];</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        );</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                that.callBack();</span><br><span class=\"line\">                            &#125;;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            tds[i].onclick = null;</span><br><span class=\"line\">                            tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                        document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                        tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initColor: function (year, month, day) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                    var that = this;</span><br><span class=\"line\">                    var _minDate;</span><br><span class=\"line\">                    var _maxDate;</span><br><span class=\"line\">                    if (year) &#123;</span><br><span class=\"line\">                        var obj = &#123;&#125;;</span><br><span class=\"line\">                        obj.year = year;</span><br><span class=\"line\">                        obj.month = month;</span><br><span class=\"line\">                        obj.day = day;</span><br><span class=\"line\">                        if (that.isSingle) &#123;</span><br><span class=\"line\">                            that.data.selectDays[0] = obj;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.selectDays.push(obj);</span><br><span class=\"line\">                            if (that.data.selectDays.length &gt;= 2) &#123;</span><br><span class=\"line\">                                that.data.selectDays[1] = obj;</span><br><span class=\"line\">                                that.data.selectDays.length = 2;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        that.tds.map(function (item) &#123;</span><br><span class=\"line\">                            item.className = &apos;&apos;;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        that.data.selectDays.map(function (key) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                            ((key.year === that.data.year) &amp;&amp; (key.month === that.data.month)) ? that.tds[key.day].className = &apos;tdActive&apos;  : &apos;&apos; ;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                            if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].day &lt; that.data.selectDays[1].day) &#123;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            for (var j = _minDate + 1; j &lt; _maxDate; j++) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].month === that.data.selectDays[1].month &amp;&amp; that.data.selectDays[0].month === that.data.month) &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;timeBar&apos;;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素</span><br><span class=\"line\">        // data.year // data.month 表示真实的年和月</span><br><span class=\"line\">        // data 对象， 用来集中管理数据信息</span><br><span class=\"line\"></span><br><span class=\"line\">        // initTable 用于初始化表格，构建日期选择框</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // initData 将data 内的数据和 input 输入框内的数据进行同步，</span><br><span class=\"line\">        // 自动同步</span><br><span class=\"line\">        if (window.dateCanlender !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">            listenEvent(document.getElementById(&apos;startTime&apos;), &apos;click&apos;, function () &#123;</span><br><span class=\"line\">                $(&apos;#content&apos;).style.display = &apos;block&apos;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">                dateCanlender.initTable();</span><br><span class=\"line\">                dateCanlender.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                dateCanlender.tds = [].slice.call(dateCanlender.tds);</span><br><span class=\"line\">                dateCanlender.reactData();</span><br><span class=\"line\">                var date = new Date();</span><br><span class=\"line\">                dateCanlender.data.year = date.getFullYear();</span><br><span class=\"line\">                dateCanlender.data.month = date.getMonth() + 1;</span><br><span class=\"line\">               </span><br><span class=\"line\">                dateCanlender.initDate();</span><br><span class=\"line\">                dateCanlender.dateAct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(window))</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    #content &#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">        border: 2px solid darkgray;</span><br><span class=\"line\">        padding: 10px;</span><br><span class=\"line\">        margin: 50px auto;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title &#123;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title span, #title input &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title input &#123;</span><br><span class=\"line\">        margin: 0 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #main &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table, table thead &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table thead tr &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table td &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .tdActive &#123;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background-color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .timeBar &#123;</span><br><span class=\"line\">        background-color: gray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .notClick&#123;</span><br><span class=\"line\">        color: lightgray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">person.prototype.eye = 2;</span><br><span class=\"line\">var he = new person();</span><br><span class=\"line\">he.eye // 2</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，通过使用 <code>new</code> 操作符创建了 <code>person</code> 构造函数的一个实例，在构造函数中定义了一个属性 <code>eye</code> ，根据在原型链中的继承的特性，使用 <code>new</code> 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。</p>\n<blockquote>\n<p>在通过 <code>new</code> 操作符的过程中发生了什么？</p>\n<p>1.创建一个新对象</p>\n<p>2.将构造函数的作用域赋给新对象，（这时候 <code>this</code> 指向这个新对象）</p>\n<p>3.执行构造函数的代码 （这个新对象添加属性）</p>\n<p>4.返回新对象</p>\n</blockquote>\n<p>在上面的代码中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码创建了构造函数 <code>dateUI</code> 的一个新实例。</p>\n<p>在构造函数的原型上，给原型添加方法 : <code>initTable</code>   <code>reactData</code>  <code>initDate</code>     <code>initColor</code>     <code>dateAct</code></p>\n<p><code>initTable</code>  用来初始化表格，生成表格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTable: function () &#123;</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">               title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">               var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">               var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">               table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">               main.appendChild(table);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">               for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               var _ROW = 6;</span><br><span class=\"line\">               var _COL = 7;</span><br><span class=\"line\">               for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                   for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                       that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.tds = [].slice.call(that.tds);</span><br></pre></td></tr></table></figure>\n<p>上面中的代码 <code>[].slice.call(that.tds)</code> 将类数组对象 <code>tds</code> 转化为数组，从而可以使用数组的方法</p>\n<blockquote>\n<p>数组中 <code>slice</code> 的方法</p>\n</blockquote>\n<p><code>reactData</code>: 将数据变为可以跟踪变化的形式，类似于在 <code>vue</code> 中的，将  <code>data</code> 数据变为可响应式的，使用的是 </p>\n<p><code>Object.defineProperty()</code> 方法, <code>getter</code>  <code>setter</code> 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p><code>initDate</code> 用来像表格中填入数据：</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initDate: function () &#123;</span><br><span class=\"line\">\t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">               // startDate 得到的是当月 1 号的星期几</span><br><span class=\"line\">               var startDate = date.getDay();</span><br><span class=\"line\">               // allDates 得到的是当前月全部的日期</span><br><span class=\"line\">               var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">               var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.initColor();</span><br><span class=\"line\">               var j = 0;</span><br><span class=\"line\">               startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">               // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">               // 下面的程序用来向表格内填入天的号数</span><br><span class=\"line\">               for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">               \t// 判断开始时间，即判断表格中位于 1 号之前的表格</span><br><span class=\"line\">                   if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                       j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                       tds[i].innerHTML = j;</span><br><span class=\"line\">                       // 定义位于中间的表格可以点击区域</span><br><span class=\"line\">                       if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                           tds[i].onclick = function () &#123;                                         </span><br><span class=\"line\">                               // 将当前的年 月 表格输存入数组                                </span><br><span class=\"line\">                               that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                               that.initColor();</span><br><span class=\"line\">                               // 清空input 框内的数据</span><br><span class=\"line\">                               that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                               that.data.selectDays.map(function (item, index, array) &#123;                                    </span><br><span class=\"line\">                                   that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                   if (!that.isSingle) &#123;</span><br><span class=\"line\">                                       var min;</span><br><span class=\"line\">                                       that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                               if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                   min = item;</span><br><span class=\"line\">                                               &#125; else &#123;</span><br><span class=\"line\">                                                   min = that.data.selectDays[0];</span><br><span class=\"line\">                                               &#125;</span><br><span class=\"line\">                                           &#125;</span><br><span class=\"line\">                                       );</span><br><span class=\"line\">                                   &#125;</span><br><span class=\"line\">                               &#125;);</span><br><span class=\"line\">                               // 点击事件完成之后调用回调函数</span><br><span class=\"line\">                               that.callBack();</span><br><span class=\"line\">                           &#125;;</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                       // 使用 onclick = null 回收点击事件</span><br><span class=\"line\">                           tds[i].onclick = null;</span><br><span class=\"line\">                           tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                       document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                       tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;,</span><br></pre></td></tr></table></figure>\n<p>在上段代码中使用的日期对象的一些方法；</p>\n<p><code>initColor</code> ：用来重置表格的颜色</p>\n<p><code>dateAct</code> 用来定义日历的一些行为</p>\n<h4 id=\"代码总结\"><a href=\"#代码总结\" class=\"headerlink\" title=\"代码总结:\"></a>代码总结:</h4><p>1.使用面向对象的写法进行编写的，而非之前的面向过程编写</p>\n<p>2.熟悉 js 中关于使用日期事件的一些方法</p>\n<h4 id=\"在代码中的一些问题\"><a href=\"#在代码中的一些问题\" class=\"headerlink\" title=\"在代码中的一些问题:\"></a>在代码中的一些问题:</h4><p>1.代码逻辑混乱，这一部分需要加强</p>\n<p>2.代码中需要规范，包括注释，变量的定义</p>\n<p>3.使用面向对象的写法的时候，需要知道使用 使用 <code>property</code> 构建函数的时候发生了什么，以及代码中 <code>this</code> 的指向值</p>\n<h4 id=\"little-Tips\"><a href=\"#little-Tips\" class=\"headerlink\" title=\"little  Tips\"></a>little  Tips</h4><ol>\n<li><p><code>addEventListener</code>  <code>attachEvent</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;btn&apos;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.onload = function () &#123;</span><br><span class=\"line\">      var button = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\">      Good.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">\t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>addEventistener</code> 用于监听事件</p>\n<p><code>target.addEventListenter(event, fn , [userCapture])</code></p>\n<p><code>event</code> : 表示要进行监听的事件 [string]</p>\n<p><code>fn</code> :表示 监听到事件之后的回调函数</p>\n<p><code>userCapture</code> : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]</p>\n</blockquote>\n<p><strong>在 <code>addEventListener</code>中定义的 <code>this</code> 值指向的是 tartget 对象</strong></p>\n<p>在 IE 下 使用 <code>attachEvent</code> 来实现类似 <code>addEventListener</code> 的行为:</p>\n<p>实现兼容性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>Date</code>对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的</p>\n"},{"title":"生活","date":"2017-08-26T11:29:06.000Z","_content":"\n####   圣经\n\n> `你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗？”`\n>\n> ​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)\n\n前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。\n\n\n\n人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。\n\n每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。\n\n世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。\n\n脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。\n\n你太懒了，也太怂了，你能否可以克服自己？\n\n饮冰十年，难凉热血。\n\n不要想着战胜困难，先要战胜自己。","source":"_posts/生活.md","raw":"---\ntitle: 生活\ndate: 2017-08-26 19:29:06\ncategories: '生活'\n---\n\n####   圣经\n\n> `你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗？”`\n>\n> ​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)\n\n前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。\n\n\n\n人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。\n\n每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。\n\n世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。\n\n脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。\n\n你太懒了，也太怂了，你能否可以克服自己？\n\n饮冰十年，难凉热血。\n\n不要想着战胜困难，先要战胜自己。","slug":"生活","published":1,"updated":"2020-09-14T06:36:26.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9a0066i2os4hlw9xcc","content":"<h4 id=\"圣经\"><a href=\"#圣经\" class=\"headerlink\" title=\"圣经\"></a>圣经</h4><blockquote>\n<p><code>你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗？”</code></p>\n<p>​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)</p>\n</blockquote>\n<p>前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。</p>\n<p>人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。</p>\n<p>每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。</p>\n<p>世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。</p>\n<p>脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。</p>\n<p>你太懒了，也太怂了，你能否可以克服自己？</p>\n<p>饮冰十年，难凉热血。</p>\n<p>不要想着战胜困难，先要战胜自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"圣经\"><a href=\"#圣经\" class=\"headerlink\" title=\"圣经\"></a>圣经</h4><blockquote>\n<p><code>你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗？”</code></p>\n<p>​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)</p>\n</blockquote>\n<p>前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。</p>\n<p>人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。</p>\n<p>每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。</p>\n<p>世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。</p>\n<p>脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。</p>\n<p>你太懒了，也太怂了，你能否可以克服自己？</p>\n<p>饮冰十年，难凉热血。</p>\n<p>不要想着战胜困难，先要战胜自己。</p>\n"},{"title":"浏览器渲染过程","date":"2018-03-12T16:11:34.000Z","_content":"\n## 浏览器渲染过程以及原理\n\n### 浏览器渲染的过程\n\n对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:\n\n1. DNS 查询（DNS 根据服务器地址查找到IP地址）\n2. TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）\n3. HTTP 请求以及响应（请求响应数据）\n4. 服务器响应（后端响应数据）\n5. 客户端渲染  \n\n对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：\n\n1.  处理 HTML 标记并且构建 DOM 树。\n2.  处理 CSS 标记并且构建 CSSOM 树。\n3.  将 DOM 以及 CSSOM 合并为一个渲染树。\n4.  根据渲染树进行布局,以计算每个节点的几何信息。\n5.  将各个节点绘制到屏幕上去。\n\n在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。\n\n### 阻塞渲染\n\n在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 `javascript` 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。\n\n使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。\n\n在实际使用的时候应该遵循下面两个原则：\n\n1. CSS资源要优于JavaScript 资源进行加载。\n2. 尽量避免使用 JavaScript 进行DOM 的操作。\n\n### 解决渲染阻塞的几种方法\n\n#### CSS\n\n对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：\n\n1. 提高CSS页面的加载速度\n\n   提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。\n\n   少用 `@import ` 用于引入 CSS 文件, 使用 `@import` 会影响 CSS 文件的加载速度。\n\n2. 加快解析速度， 提高解析性能。\n\n   减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。","source":"_posts/浏览器渲染过程.md","raw":"---\ntitle: 浏览器渲染过程\ndate: 2018-03-13 00:11:34\ntags: 浏览器渲染\n---\n\n## 浏览器渲染过程以及原理\n\n### 浏览器渲染的过程\n\n对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:\n\n1. DNS 查询（DNS 根据服务器地址查找到IP地址）\n2. TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）\n3. HTTP 请求以及响应（请求响应数据）\n4. 服务器响应（后端响应数据）\n5. 客户端渲染  \n\n对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：\n\n1.  处理 HTML 标记并且构建 DOM 树。\n2.  处理 CSS 标记并且构建 CSSOM 树。\n3.  将 DOM 以及 CSSOM 合并为一个渲染树。\n4.  根据渲染树进行布局,以计算每个节点的几何信息。\n5.  将各个节点绘制到屏幕上去。\n\n在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。\n\n### 阻塞渲染\n\n在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 `javascript` 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。\n\n使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。\n\n在实际使用的时候应该遵循下面两个原则：\n\n1. CSS资源要优于JavaScript 资源进行加载。\n2. 尽量避免使用 JavaScript 进行DOM 的操作。\n\n### 解决渲染阻塞的几种方法\n\n#### CSS\n\n对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：\n\n1. 提高CSS页面的加载速度\n\n   提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。\n\n   少用 `@import ` 用于引入 CSS 文件, 使用 `@import` 会影响 CSS 文件的加载速度。\n\n2. 加快解析速度， 提高解析性能。\n\n   减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。","slug":"浏览器渲染过程","published":1,"updated":"2020-09-14T06:36:26.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9d006bi2os3w8pqmkm","content":"<h2 id=\"浏览器渲染过程以及原理\"><a href=\"#浏览器渲染过程以及原理\" class=\"headerlink\" title=\"浏览器渲染过程以及原理\"></a>浏览器渲染过程以及原理</h2><h3 id=\"浏览器渲染的过程\"><a href=\"#浏览器渲染的过程\" class=\"headerlink\" title=\"浏览器渲染的过程\"></a>浏览器渲染的过程</h3><p>对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:</p>\n<ol>\n<li>DNS 查询（DNS 根据服务器地址查找到IP地址）</li>\n<li>TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）</li>\n<li>HTTP 请求以及响应（请求响应数据）</li>\n<li>服务器响应（后端响应数据）</li>\n<li>客户端渲染  </li>\n</ol>\n<p>对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：</p>\n<ol>\n<li>处理 HTML 标记并且构建 DOM 树。</li>\n<li>处理 CSS 标记并且构建 CSSOM 树。</li>\n<li>将 DOM 以及 CSSOM 合并为一个渲染树。</li>\n<li>根据渲染树进行布局,以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上去。</li>\n</ol>\n<p>在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。</p>\n<h3 id=\"阻塞渲染\"><a href=\"#阻塞渲染\" class=\"headerlink\" title=\"阻塞渲染\"></a>阻塞渲染</h3><p>在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 <code>javascript</code> 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。</p>\n<p>使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。</p>\n<p>在实际使用的时候应该遵循下面两个原则：</p>\n<ol>\n<li>CSS资源要优于JavaScript 资源进行加载。</li>\n<li>尽量避免使用 JavaScript 进行DOM 的操作。</li>\n</ol>\n<h3 id=\"解决渲染阻塞的几种方法\"><a href=\"#解决渲染阻塞的几种方法\" class=\"headerlink\" title=\"解决渲染阻塞的几种方法\"></a>解决渲染阻塞的几种方法</h3><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：</p>\n<ol>\n<li><p>提高CSS页面的加载速度</p>\n<p>提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。</p>\n<p>少用 <code>@import</code> 用于引入 CSS 文件, 使用 <code>@import</code> 会影响 CSS 文件的加载速度。</p>\n</li>\n<li><p>加快解析速度， 提高解析性能。</p>\n<p>减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浏览器渲染过程以及原理\"><a href=\"#浏览器渲染过程以及原理\" class=\"headerlink\" title=\"浏览器渲染过程以及原理\"></a>浏览器渲染过程以及原理</h2><h3 id=\"浏览器渲染的过程\"><a href=\"#浏览器渲染的过程\" class=\"headerlink\" title=\"浏览器渲染的过程\"></a>浏览器渲染的过程</h3><p>对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:</p>\n<ol>\n<li>DNS 查询（DNS 根据服务器地址查找到IP地址）</li>\n<li>TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）</li>\n<li>HTTP 请求以及响应（请求响应数据）</li>\n<li>服务器响应（后端响应数据）</li>\n<li>客户端渲染  </li>\n</ol>\n<p>对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：</p>\n<ol>\n<li>处理 HTML 标记并且构建 DOM 树。</li>\n<li>处理 CSS 标记并且构建 CSSOM 树。</li>\n<li>将 DOM 以及 CSSOM 合并为一个渲染树。</li>\n<li>根据渲染树进行布局,以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上去。</li>\n</ol>\n<p>在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。</p>\n<h3 id=\"阻塞渲染\"><a href=\"#阻塞渲染\" class=\"headerlink\" title=\"阻塞渲染\"></a>阻塞渲染</h3><p>在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 <code>javascript</code> 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。</p>\n<p>使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。</p>\n<p>在实际使用的时候应该遵循下面两个原则：</p>\n<ol>\n<li>CSS资源要优于JavaScript 资源进行加载。</li>\n<li>尽量避免使用 JavaScript 进行DOM 的操作。</li>\n</ol>\n<h3 id=\"解决渲染阻塞的几种方法\"><a href=\"#解决渲染阻塞的几种方法\" class=\"headerlink\" title=\"解决渲染阻塞的几种方法\"></a>解决渲染阻塞的几种方法</h3><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：</p>\n<ol>\n<li><p>提高CSS页面的加载速度</p>\n<p>提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。</p>\n<p>少用 <code>@import</code> 用于引入 CSS 文件, 使用 <code>@import</code> 会影响 CSS 文件的加载速度。</p>\n</li>\n<li><p>加快解析速度， 提高解析性能。</p>\n<p>减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。</p>\n</li>\n</ol>\n"},{"title":"正则表达式：基础方法","date":"2019-01-20T06:33:08.000Z","_content":"\n下面是一些正则表达式的一些常用方法：\n\n# 正则表达式中的属性和方法\n\n创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。\n\n我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：\n\n例如：\n\n```\nlet pattern = /.at/g;\nlet str = 'bat, cat';\nlet matches = pattern.exec(str);\nconsole.log('lastIndex', pattern.lastIndex); // 3\n```\n\n###  一些属性\n\n| 属性            | 含义                                                         | 示例                                                         |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `lastIndex`     | 下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 `g` 的时候， 这个值始终是 0 | 上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 `,` 位置为 3 |\n| `flags`(es6)    | 获取当前正则的修饰符                                         | g                                                            |\n| `global`        | 布尔值， 表示是否设置了 g 标志                               | `pattern.global`: true                                       |\n| `ignoreCase`    | 布尔值， 表示是否设置了 i 标志                               |                                                              |\n| `multiline`     | 表示是否设置了 m                                             |                                                              |\n| `sticky`        | 表示是否这种了 y 标志                                        |                                                              |\n| `dotall` es2018 | 表示是否含有 s 修饰符                                        |                                                              |\n| `source`        | 表示当前的匹配字符串                                         | \".at\"                                                        |\n\nTips:\n\n-   使用 `lastIndex` 是可以改变的， 使用 `lastIndex` 可以决定需要进行开始匹配的位置\n\n  ```js\n  let pattern = new RegExp('.at', 'g');\n  let str = \"cat, bat\";\n  \n  pattern.lastIndex = 4;\n  let matches = pattern.exec(str);\n  // matches\n  // [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]\n  ```\n\n\n### 一些方法\n\n#### RegExp.prototype.test\n\n使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：\n\n示例：\n\n```javascript\nlet pattern = /test/g;\nlet str = 'test string';\npattern.test(str); // true\n```\n\n```javascript\nlet pattern = /[cb]at/g;\nlet str = \"cat, bat\";\npattern.test(str); // true\n```\n\n#### `RegExp.prototype.exec`\n\n 使用  `exec` 方法用于获取到匹配到的数组：\n\n```\nlet pattern = /.at/;\nlet str = \"cat, bat\";\n\nlet matches = pattern.exec(str);\n// [ 'cat', index: 0, input: 'cat, bat', groups: undefined ]\n// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 \n// 'cat, bat'\n```\n\n如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 `null`;\n\n使用 `exec` 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 `cat`  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 `index`, `input` 以及 `groups` ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：\n\n- `index`: index 表明匹配数组中第一个值在字符串中的位置。\n- `input`：input 表明当前匹配的字符串\n-  `groups`: groups 是 es2018 中提出的一个新的方法  \n\n> 注意： 当正则表达式中包含有全局匹配 `g` 的时候，每次调用 `exec` 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  `exec` 只会调用第一次匹配到的信息。\n\n```js\nlet pattern = new RegExp('.at', 'g');\nlet str = \"cat, bat, dat\";\nlet matches = pattern.exec(str);\n\nwhile(matches) {\n  console.log(pattern.lastIndex, matches[0]);\n  matches = pattern.exec(str);\n}\n// 3 'cat'\n// 8 'bat'\n// 13 'dat'\n```\n\n### 应用正则表达式的一些方法：\n\n#### `String.prototype.match`\n\n`str.match(regexp)`\n\n接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。\n\n> 注意， 在使用 `match` 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：\n>\n> 例如下面这个例子：\n>\n> ```as1\n> var regex = /(\\d{4})-(\\d{2})-(\\d{2})/g;\n> var string = \"2017-06-12\";\n> console.log( string.match(regex) );\n> // [\"2017-06-12\"] 没有获得到捕获组 括号内的匹配项\n> // 当正则表达式中不含有 g 标识符的时候\n> regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n> // [\"2017-06-12\", \"2017\", \"06\", \"12\"]`String.prototype.search`\n> // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t\n> ```\n\n\n\n#### `String.prototype.search`\n\n`str.search(regexp)`\n\n接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1\n\n```\nlet str = 'hello world';\nstr.search(/world/); // 6\n```\n\n使用 `indexOf` 方法也可以用来查找到字符串中的某一个字符， 相比 `indexOf` 方法， 个人认为 `search `\n\n 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：\n\n```js\nlet str = \"search Word\";\nstr.search(/word/i); // 6\n```\n\n**注意：**\n\n**当我们使用 `search` 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式**\n\n如下：\n\n ```js\nlet str = \"2019.02.05\";\nstr.search('.'); // 0\n// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0\n ```\n\n\n\n#### `String.prototype.replace`\n\n`str.replace(regexp, replaceStr)`\n\n使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。\n\n注意： 使用 `replace` 方法的时候 `replaceStr` 中使用 `$1`, `$2` 以及 `$3` 可以表示 `RegExp.$1`, `RegExp.$2`\n\n`RegExp.$3`  \n\n如下， 转换日期的格式问题：\n\n```\nlet str = '2018-02-02';\nlet regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nstr.replace(regex, '$3/$2/$1'); // 02/02/2018\n```\n\n如下， 隐藏手机号码中间四位的数字：\n\n```\nlet str = '15656568620';\nlet regex = /(\\d{3})(\\d{4})(\\d{4})/;\nstr.replace(regex, '$1****$3');\n// 156****8620\n```\n\n使用 `replace` 可以实现更为强大的功能， 因为第二个参数的 `replaceStr` 可以有多个具有特殊含义的字符：\n\n| 属性                | 描述符                                      |\n| ------------------- | ------------------------------------------- |\n| `$1` `$2` ... `$99` | 匹配地 `$1` , `$2` ... `$99` 分组捕获的文本 |\n| `$&`                | 匹配到的子串文本                            |\n| $`                  | 匹配到的子串的左边文本                      |\n| $'                  | 匹配到的子串的                              |\n| $$                  | 表示美元符号                                |\n| 其他符号            | 符号本身                                    |\n\n如下， 我们想要将一段金钱文字都添加上一个 `$` 符号：\n\n```js\nlet str = '100, 200, 300';\nlet regex = /(\\d+)/g;\nstr.replace(regex, '$$ $&');\n// $100, $200, $300\n```\n\n>使用 `replace` 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 `replace` 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。\n\n**<a  name=\"replaceFn\">replace 第二个参数除了接受一个字符串之外， 还可以接受一个函数</a>**\n\n如下：\n\n```js\nfunction replaceStr (matchChar, captureChar, charIndex, matchStr) {\n  console.table([{ matchChar, captureChar, charIndex, matchStr }]);\n  return captureChar ? captureChar.toUpperCase() : '';\n}\n// 将连字符相连的单词转换为驼峰式的写法\nfunction camelize(str) {\n  return str.replace(/-(\\w)/g, replaceStr)\n}\ncamelize(\"my-component\");\n```\n\n最终打印结果如下：\n\n{% asset_img  replace.jpg%}\n\n上面各个参数如下：\n\n| matchChar(第一个参数)  | captureChar(第二个参数) | charIndex(第三个参数)              | matchStr(第四个参数) |\n| ---------------------- | ----------------------- | ---------------------------------- | -------------------- |\n| 正则匹配匹配到的字符串 | 捕获组捕获到的字符      | matchChar 在整个字符串中的起始位置 | 被匹配的字符串       |\n\n注意： 当匹配正则中没有 `()` 也就是没有捕获组的时候， 参数总体向前挪动， 最后一个参数为  `undefined`\n\n例如上面的代码中：修改为如下：\n\n```js\nfunction replaceStr (matchChar, captureChar, charIndex, matchStr) {\n  console.table([{ matchChar, captureChar, charIndex, matchStr }]);\n  // return captureChar ? captureChar.toUpperCase() : '';\n}\nfunction camelize(str) {\n  return str.replace(/-\\w/g, replaceStr)\n}\n\ncamelize(\"my-component\");\n```\n\n最终打印结果如下：\n\n{% asset_img  vueCodeReplace1.jpg%}\n\n上面可以看到， 当正则中没有捕获组了之后， 捕获组参数 `captureChar` 消失掉了， `charIndex` 以及 `matchStr` 参数向前挪动了一位， 从而导致最后一位为 `undefined`\n\n### 其他\n\n1. 使用 `$1` `$2` .. 可以获取到被匹配到的捕获组中的数据， `$1` 获取到第一个捕获组数据， `$2` 获取到第二个捕获组数据， 依次类推\n\n   例如：\n\n   ```js\n   str = '2018-02-02';\n   regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n   regex.test(str);\n   RegExp.$1 // 2018\n   RegExp.$2 // 02\n   RegExp.$3 // 02\n   ```\n\n2. 可以在正则中使用 `\\1` 或者 `\\2` 之类的表示引用分组 `$1`  `$2` ....， 例如： \n\n   我们想要匹配如下的日期格式：\n\n   2019-02-05\n\n   2019.02.05\n\n   2019/02/05\n\n   我们注意到， 对于   `-` 或 `.` 或 `/` 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：\n\n   ```\n   let regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\n   let str = '2019-02-05';\n   regex.test(str); // true\n   ```\n\n   但是上面的正则也可以匹配到 2019-02.05 这样的格式；\n\n   当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：\n\n   ```\n   let regex = /\\d{4}(-|/\\|\\.)\\d{2}\\1\\d{2}/;\n   ```\n\n   如下： 匹配 html 中的匹配标签：\n\n   ```js\n   let html = \"<p>我是一段文字</p>\";\n   let regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\n   regex.test(html); // true\n   // 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符\n   // 匹配含有 class 的元素属性\n   html = \"<p class=\"content\">我是一段文字</p>\";\n   regex = /<([^>]+).*>[\\d\\D]*<\\/\\1>/;\n   regex.test(html) // true\n   ```\n","source":"_posts/正则表达式：基础方法.md","raw":"---\ntitle: 正则表达式：基础方法\ndate: 2019-01-20 14:33:08\ntags: 正则表达式\ncategories: js\n---\n\n下面是一些正则表达式的一些常用方法：\n\n# 正则表达式中的属性和方法\n\n创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。\n\n我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：\n\n例如：\n\n```\nlet pattern = /.at/g;\nlet str = 'bat, cat';\nlet matches = pattern.exec(str);\nconsole.log('lastIndex', pattern.lastIndex); // 3\n```\n\n###  一些属性\n\n| 属性            | 含义                                                         | 示例                                                         |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `lastIndex`     | 下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 `g` 的时候， 这个值始终是 0 | 上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 `,` 位置为 3 |\n| `flags`(es6)    | 获取当前正则的修饰符                                         | g                                                            |\n| `global`        | 布尔值， 表示是否设置了 g 标志                               | `pattern.global`: true                                       |\n| `ignoreCase`    | 布尔值， 表示是否设置了 i 标志                               |                                                              |\n| `multiline`     | 表示是否设置了 m                                             |                                                              |\n| `sticky`        | 表示是否这种了 y 标志                                        |                                                              |\n| `dotall` es2018 | 表示是否含有 s 修饰符                                        |                                                              |\n| `source`        | 表示当前的匹配字符串                                         | \".at\"                                                        |\n\nTips:\n\n-   使用 `lastIndex` 是可以改变的， 使用 `lastIndex` 可以决定需要进行开始匹配的位置\n\n  ```js\n  let pattern = new RegExp('.at', 'g');\n  let str = \"cat, bat\";\n  \n  pattern.lastIndex = 4;\n  let matches = pattern.exec(str);\n  // matches\n  // [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]\n  ```\n\n\n### 一些方法\n\n#### RegExp.prototype.test\n\n使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：\n\n示例：\n\n```javascript\nlet pattern = /test/g;\nlet str = 'test string';\npattern.test(str); // true\n```\n\n```javascript\nlet pattern = /[cb]at/g;\nlet str = \"cat, bat\";\npattern.test(str); // true\n```\n\n#### `RegExp.prototype.exec`\n\n 使用  `exec` 方法用于获取到匹配到的数组：\n\n```\nlet pattern = /.at/;\nlet str = \"cat, bat\";\n\nlet matches = pattern.exec(str);\n// [ 'cat', index: 0, input: 'cat, bat', groups: undefined ]\n// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 \n// 'cat, bat'\n```\n\n如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 `null`;\n\n使用 `exec` 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 `cat`  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 `index`, `input` 以及 `groups` ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：\n\n- `index`: index 表明匹配数组中第一个值在字符串中的位置。\n- `input`：input 表明当前匹配的字符串\n-  `groups`: groups 是 es2018 中提出的一个新的方法  \n\n> 注意： 当正则表达式中包含有全局匹配 `g` 的时候，每次调用 `exec` 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  `exec` 只会调用第一次匹配到的信息。\n\n```js\nlet pattern = new RegExp('.at', 'g');\nlet str = \"cat, bat, dat\";\nlet matches = pattern.exec(str);\n\nwhile(matches) {\n  console.log(pattern.lastIndex, matches[0]);\n  matches = pattern.exec(str);\n}\n// 3 'cat'\n// 8 'bat'\n// 13 'dat'\n```\n\n### 应用正则表达式的一些方法：\n\n#### `String.prototype.match`\n\n`str.match(regexp)`\n\n接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。\n\n> 注意， 在使用 `match` 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：\n>\n> 例如下面这个例子：\n>\n> ```as1\n> var regex = /(\\d{4})-(\\d{2})-(\\d{2})/g;\n> var string = \"2017-06-12\";\n> console.log( string.match(regex) );\n> // [\"2017-06-12\"] 没有获得到捕获组 括号内的匹配项\n> // 当正则表达式中不含有 g 标识符的时候\n> regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n> // [\"2017-06-12\", \"2017\", \"06\", \"12\"]`String.prototype.search`\n> // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t\n> ```\n\n\n\n#### `String.prototype.search`\n\n`str.search(regexp)`\n\n接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1\n\n```\nlet str = 'hello world';\nstr.search(/world/); // 6\n```\n\n使用 `indexOf` 方法也可以用来查找到字符串中的某一个字符， 相比 `indexOf` 方法， 个人认为 `search `\n\n 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：\n\n```js\nlet str = \"search Word\";\nstr.search(/word/i); // 6\n```\n\n**注意：**\n\n**当我们使用 `search` 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式**\n\n如下：\n\n ```js\nlet str = \"2019.02.05\";\nstr.search('.'); // 0\n// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0\n ```\n\n\n\n#### `String.prototype.replace`\n\n`str.replace(regexp, replaceStr)`\n\n使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。\n\n注意： 使用 `replace` 方法的时候 `replaceStr` 中使用 `$1`, `$2` 以及 `$3` 可以表示 `RegExp.$1`, `RegExp.$2`\n\n`RegExp.$3`  \n\n如下， 转换日期的格式问题：\n\n```\nlet str = '2018-02-02';\nlet regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nstr.replace(regex, '$3/$2/$1'); // 02/02/2018\n```\n\n如下， 隐藏手机号码中间四位的数字：\n\n```\nlet str = '15656568620';\nlet regex = /(\\d{3})(\\d{4})(\\d{4})/;\nstr.replace(regex, '$1****$3');\n// 156****8620\n```\n\n使用 `replace` 可以实现更为强大的功能， 因为第二个参数的 `replaceStr` 可以有多个具有特殊含义的字符：\n\n| 属性                | 描述符                                      |\n| ------------------- | ------------------------------------------- |\n| `$1` `$2` ... `$99` | 匹配地 `$1` , `$2` ... `$99` 分组捕获的文本 |\n| `$&`                | 匹配到的子串文本                            |\n| $`                  | 匹配到的子串的左边文本                      |\n| $'                  | 匹配到的子串的                              |\n| $$                  | 表示美元符号                                |\n| 其他符号            | 符号本身                                    |\n\n如下， 我们想要将一段金钱文字都添加上一个 `$` 符号：\n\n```js\nlet str = '100, 200, 300';\nlet regex = /(\\d+)/g;\nstr.replace(regex, '$$ $&');\n// $100, $200, $300\n```\n\n>使用 `replace` 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 `replace` 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。\n\n**<a  name=\"replaceFn\">replace 第二个参数除了接受一个字符串之外， 还可以接受一个函数</a>**\n\n如下：\n\n```js\nfunction replaceStr (matchChar, captureChar, charIndex, matchStr) {\n  console.table([{ matchChar, captureChar, charIndex, matchStr }]);\n  return captureChar ? captureChar.toUpperCase() : '';\n}\n// 将连字符相连的单词转换为驼峰式的写法\nfunction camelize(str) {\n  return str.replace(/-(\\w)/g, replaceStr)\n}\ncamelize(\"my-component\");\n```\n\n最终打印结果如下：\n\n{% asset_img  replace.jpg%}\n\n上面各个参数如下：\n\n| matchChar(第一个参数)  | captureChar(第二个参数) | charIndex(第三个参数)              | matchStr(第四个参数) |\n| ---------------------- | ----------------------- | ---------------------------------- | -------------------- |\n| 正则匹配匹配到的字符串 | 捕获组捕获到的字符      | matchChar 在整个字符串中的起始位置 | 被匹配的字符串       |\n\n注意： 当匹配正则中没有 `()` 也就是没有捕获组的时候， 参数总体向前挪动， 最后一个参数为  `undefined`\n\n例如上面的代码中：修改为如下：\n\n```js\nfunction replaceStr (matchChar, captureChar, charIndex, matchStr) {\n  console.table([{ matchChar, captureChar, charIndex, matchStr }]);\n  // return captureChar ? captureChar.toUpperCase() : '';\n}\nfunction camelize(str) {\n  return str.replace(/-\\w/g, replaceStr)\n}\n\ncamelize(\"my-component\");\n```\n\n最终打印结果如下：\n\n{% asset_img  vueCodeReplace1.jpg%}\n\n上面可以看到， 当正则中没有捕获组了之后， 捕获组参数 `captureChar` 消失掉了， `charIndex` 以及 `matchStr` 参数向前挪动了一位， 从而导致最后一位为 `undefined`\n\n### 其他\n\n1. 使用 `$1` `$2` .. 可以获取到被匹配到的捕获组中的数据， `$1` 获取到第一个捕获组数据， `$2` 获取到第二个捕获组数据， 依次类推\n\n   例如：\n\n   ```js\n   str = '2018-02-02';\n   regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n   regex.test(str);\n   RegExp.$1 // 2018\n   RegExp.$2 // 02\n   RegExp.$3 // 02\n   ```\n\n2. 可以在正则中使用 `\\1` 或者 `\\2` 之类的表示引用分组 `$1`  `$2` ....， 例如： \n\n   我们想要匹配如下的日期格式：\n\n   2019-02-05\n\n   2019.02.05\n\n   2019/02/05\n\n   我们注意到， 对于   `-` 或 `.` 或 `/` 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：\n\n   ```\n   let regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\n   let str = '2019-02-05';\n   regex.test(str); // true\n   ```\n\n   但是上面的正则也可以匹配到 2019-02.05 这样的格式；\n\n   当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：\n\n   ```\n   let regex = /\\d{4}(-|/\\|\\.)\\d{2}\\1\\d{2}/;\n   ```\n\n   如下： 匹配 html 中的匹配标签：\n\n   ```js\n   let html = \"<p>我是一段文字</p>\";\n   let regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\n   regex.test(html); // true\n   // 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符\n   // 匹配含有 class 的元素属性\n   html = \"<p class=\"content\">我是一段文字</p>\";\n   regex = /<([^>]+).*>[\\d\\D]*<\\/\\1>/;\n   regex.test(html) // true\n   ```\n","slug":"正则表达式：基础方法","published":1,"updated":"2020-09-14T06:36:26.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9e006di2os4dwp2way","content":"<p>下面是一些正则表达式的一些常用方法：</p>\n<h1 id=\"正则表达式中的属性和方法\"><a href=\"#正则表达式中的属性和方法\" class=\"headerlink\" title=\"正则表达式中的属性和方法\"></a>正则表达式中的属性和方法</h1><p>创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。</p>\n<p>我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/g;</span><br><span class=\"line\">let str = &apos;bat, cat&apos;;</span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">console.log(&apos;lastIndex&apos;, pattern.lastIndex); // 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lastIndex</code></td>\n<td>下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 <code>g</code> 的时候， 这个值始终是 0</td>\n<td>上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 <code>,</code> 位置为 3</td>\n</tr>\n<tr>\n<td><code>flags</code>(es6)</td>\n<td>获取当前正则的修饰符</td>\n<td>g</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td>布尔值， 表示是否设置了 g 标志</td>\n<td><code>pattern.global</code>: true</td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>布尔值， 表示是否设置了 i 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>表示是否设置了 m</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>表示是否这种了 y 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>dotall</code> es2018</td>\n<td>表示是否含有 s 修饰符</td>\n<td></td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>表示当前的匹配字符串</td>\n<td>“.at”</td>\n</tr>\n</tbody>\n</table>\n<p>Tips:</p>\n<ul>\n<li><p>使用 <code>lastIndex</code> 是可以改变的， 使用 <code>lastIndex</code> 可以决定需要进行开始匹配的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern.lastIndex = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"><span class=\"comment\">// matches</span></span><br><span class=\"line\"><span class=\"comment\">// [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h3><h4 id=\"RegExp-prototype-test\"><a href=\"#RegExp-prototype-test\" class=\"headerlink\" title=\"RegExp.prototype.test\"></a>RegExp.prototype.test</h4><p>使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'test string'</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/[cb]at/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp-prototype-exec\"><a href=\"#RegExp-prototype-exec\" class=\"headerlink\" title=\"RegExp.prototype.exec\"></a><code>RegExp.prototype.exec</code></h4><p> 使用  <code>exec</code> 方法用于获取到匹配到的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/;</span><br><span class=\"line\">let str = &quot;cat, bat&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">// [ &apos;cat&apos;, index: 0, input: &apos;cat, bat&apos;, groups: undefined ]</span><br><span class=\"line\">// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 </span><br><span class=\"line\">// &apos;cat, bat&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 <code>null</code>;</p>\n<p>使用 <code>exec</code> 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 <code>cat</code>  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 <code>index</code>, <code>input</code> 以及 <code>groups</code> ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：</p>\n<ul>\n<li><code>index</code>: index 表明匹配数组中第一个值在字符串中的位置。</li>\n<li><code>input</code>：input 表明当前匹配的字符串</li>\n<li><code>groups</code>: groups 是 es2018 中提出的一个新的方法  </li>\n</ul>\n<blockquote>\n<p>注意： 当正则表达式中包含有全局匹配 <code>g</code> 的时候，每次调用 <code>exec</code> 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  <code>exec</code> 只会调用第一次匹配到的信息。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat, dat\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(matches) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(pattern.lastIndex, matches[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  matches = pattern.exec(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3 'cat'</span></span><br><span class=\"line\"><span class=\"comment\">// 8 'bat'</span></span><br><span class=\"line\"><span class=\"comment\">// 13 'dat'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用正则表达式的一些方法：\"><a href=\"#应用正则表达式的一些方法：\" class=\"headerlink\" title=\"应用正则表达式的一些方法：\"></a>应用正则表达式的一些方法：</h3><h4 id=\"String-prototype-match\"><a href=\"#String-prototype-match\" class=\"headerlink\" title=\"String.prototype.match\"></a><code>String.prototype.match</code></h4><p><code>str.match(regexp)</code></p>\n<p>接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。</p>\n<blockquote>\n<p>注意， 在使用 <code>match</code> 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;</span><br><span class=\"line\">&gt; var string = &quot;2017-06-12&quot;;</span><br><span class=\"line\">&gt; console.log( string.match(regex) );</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;] 没有获得到捕获组 括号内的匹配项</span><br><span class=\"line\">&gt; // 当正则表达式中不含有 g 标识符的时候</span><br><span class=\"line\">&gt; regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;]`String.prototype.search`</span><br><span class=\"line\">&gt; // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"String-prototype-search\"><a href=\"#String-prototype-search\" class=\"headerlink\" title=\"String.prototype.search\"></a><code>String.prototype.search</code></h4><p><code>str.search(regexp)</code></p>\n<p>接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello world&apos;;</span><br><span class=\"line\">str.search(/world/); // 6</span><br></pre></td></tr></table></figure>\n<p>使用 <code>indexOf</code> 方法也可以用来查找到字符串中的某一个字符， 相比 <code>indexOf</code> 方法， 个人认为 <code>search</code></p>\n<p> 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"search Word\"</span>;</span><br><span class=\"line\">str.search(<span class=\"regexp\">/word/i</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p><strong>当我们使用 <code>search</code> 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式</strong></p>\n<p>如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"2019.02.05\"</span>;</span><br><span class=\"line\">str.search(<span class=\"string\">'.'</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"String-prototype-replace\"><a href=\"#String-prototype-replace\" class=\"headerlink\" title=\"String.prototype.replace\"></a><code>String.prototype.replace</code></h4><p><code>str.replace(regexp, replaceStr)</code></p>\n<p>使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。</p>\n<p>注意： 使用 <code>replace</code> 方法的时候 <code>replaceStr</code> 中使用 <code>$1</code>, <code>$2</code> 以及 <code>$3</code> 可以表示 <code>RegExp.$1</code>, <code>RegExp.$2</code></p>\n<p><code>RegExp.$3</code>  </p>\n<p>如下， 转换日期的格式问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;2018-02-02&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$3/$2/$1&apos;); // 02/02/2018</span><br></pre></td></tr></table></figure>\n<p>如下， 隐藏手机号码中间四位的数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;15656568620&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$1****$3&apos;);</span><br><span class=\"line\">// 156****8620</span><br></pre></td></tr></table></figure>\n<p>使用 <code>replace</code> 可以实现更为强大的功能， 因为第二个参数的 <code>replaceStr</code> 可以有多个具有特殊含义的字符：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$1</code> <code>$2</code> … <code>$99</code></td>\n<td>匹配地 <code>$1</code> , <code>$2</code> … <code>$99</code> 分组捕获的文本</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>匹配到的子串文本</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>匹配到的子串的左边文本</td>\n</tr>\n<tr>\n<td>$’</td>\n<td>匹配到的子串的</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>表示美元符号</td>\n</tr>\n<tr>\n<td>其他符号</td>\n<td>符号本身</td>\n</tr>\n</tbody>\n</table>\n<p>如下， 我们想要将一段金钱文字都添加上一个 <code>$</code> 符号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'100, 200, 300'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(\\d+)/g</span>;</span><br><span class=\"line\">str.replace(regex, <span class=\"string\">'$$ $&amp;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// $100, $200, $300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>replace</code> 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 <code>replace</code> 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。</p>\n</blockquote>\n<p><strong><a name=\"replaceFn\">replace 第二个参数除了接受一个字符串之外， 还可以接受一个函数</a></strong></p>\n<p>如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceStr</span> (<span class=\"params\">matchChar, captureChar, charIndex, matchStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.table([&#123; matchChar, captureChar, charIndex, matchStr &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> captureChar ? captureChar.toUpperCase() : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将连字符相连的单词转换为驼峰式的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-(\\w)/g</span>, replaceStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camelize(<span class=\"string\">\"my-component\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最终打印结果如下：</p>\n<img src=\"/2019/01/20/正则表达式：基础方法/replace.jpg\">\n<p>上面各个参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>matchChar(第一个参数)</th>\n<th>captureChar(第二个参数)</th>\n<th>charIndex(第三个参数)</th>\n<th>matchStr(第四个参数)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>正则匹配匹配到的字符串</td>\n<td>捕获组捕获到的字符</td>\n<td>matchChar 在整个字符串中的起始位置</td>\n<td>被匹配的字符串</td>\n</tr>\n</tbody>\n</table>\n<p>注意： 当匹配正则中没有 <code>()</code> 也就是没有捕获组的时候， 参数总体向前挪动， 最后一个参数为  <code>undefined</code></p>\n<p>例如上面的代码中：修改为如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceStr</span> (<span class=\"params\">matchChar, captureChar, charIndex, matchStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.table([&#123; matchChar, captureChar, charIndex, matchStr &#125;]);</span><br><span class=\"line\">  <span class=\"comment\">// return captureChar ? captureChar.toUpperCase() : '';</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-\\w/g</span>, replaceStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">camelize(<span class=\"string\">\"my-component\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最终打印结果如下：</p>\n<img src=\"/2019/01/20/正则表达式：基础方法/vueCodeReplace1.jpg\">\n<p>上面可以看到， 当正则中没有捕获组了之后， 捕获组参数 <code>captureChar</code> 消失掉了， <code>charIndex</code> 以及 <code>matchStr</code> 参数向前挪动了一位， 从而导致最后一位为 <code>undefined</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p>使用 <code>$1</code> <code>$2</code> .. 可以获取到被匹配到的捕获组中的数据， <code>$1</code> 获取到第一个捕获组数据， <code>$2</code> 获取到第二个捕获组数据， 依次类推</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'2018-02-02'</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\">regex.test(str);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span> <span class=\"comment\">// 2018</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span> <span class=\"comment\">// 02</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span> <span class=\"comment\">// 02</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以在正则中使用 <code>\\1</code> 或者 <code>\\2</code> 之类的表示引用分组 <code>$1</code>  <code>$2</code> ….， 例如： </p>\n<p>我们想要匹配如下的日期格式：</p>\n<p>2019-02-05</p>\n<p>2019.02.05</p>\n<p>2019/02/05</p>\n<p>我们注意到， 对于   <code>-</code> 或 <code>.</code> 或 <code>/</code> 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;(-|\\/|\\.)\\d&#123;2&#125;/;</span><br><span class=\"line\">let str = &apos;2019-02-05&apos;;</span><br><span class=\"line\">regex.test(str); // true</span><br></pre></td></tr></table></figure>\n<p>但是上面的正则也可以匹配到 2019-02.05 这样的格式；</p>\n<p>当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|/\\|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/;</span><br></pre></td></tr></table></figure>\n<p>如下： 匹配 html 中的匹配标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> html = <span class=\"string\">\"&lt;p&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/&lt;([^&gt;]+)&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配含有 class 的元素属性</span></span><br><span class=\"line\">html = <span class=\"string\">\"&lt;p class=\"</span>content<span class=\"string\">\"&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/&lt;([^&gt;]+).*&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>下面是一些正则表达式的一些常用方法：</p>\n<h1 id=\"正则表达式中的属性和方法\"><a href=\"#正则表达式中的属性和方法\" class=\"headerlink\" title=\"正则表达式中的属性和方法\"></a>正则表达式中的属性和方法</h1><p>创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。</p>\n<p>我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/g;</span><br><span class=\"line\">let str = &apos;bat, cat&apos;;</span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">console.log(&apos;lastIndex&apos;, pattern.lastIndex); // 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lastIndex</code></td>\n<td>下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 <code>g</code> 的时候， 这个值始终是 0</td>\n<td>上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 <code>,</code> 位置为 3</td>\n</tr>\n<tr>\n<td><code>flags</code>(es6)</td>\n<td>获取当前正则的修饰符</td>\n<td>g</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td>布尔值， 表示是否设置了 g 标志</td>\n<td><code>pattern.global</code>: true</td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>布尔值， 表示是否设置了 i 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>表示是否设置了 m</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>表示是否这种了 y 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>dotall</code> es2018</td>\n<td>表示是否含有 s 修饰符</td>\n<td></td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>表示当前的匹配字符串</td>\n<td>“.at”</td>\n</tr>\n</tbody>\n</table>\n<p>Tips:</p>\n<ul>\n<li><p>使用 <code>lastIndex</code> 是可以改变的， 使用 <code>lastIndex</code> 可以决定需要进行开始匹配的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern.lastIndex = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"><span class=\"comment\">// matches</span></span><br><span class=\"line\"><span class=\"comment\">// [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h3><h4 id=\"RegExp-prototype-test\"><a href=\"#RegExp-prototype-test\" class=\"headerlink\" title=\"RegExp.prototype.test\"></a>RegExp.prototype.test</h4><p>使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'test string'</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/[cb]at/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp-prototype-exec\"><a href=\"#RegExp-prototype-exec\" class=\"headerlink\" title=\"RegExp.prototype.exec\"></a><code>RegExp.prototype.exec</code></h4><p> 使用  <code>exec</code> 方法用于获取到匹配到的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/;</span><br><span class=\"line\">let str = &quot;cat, bat&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">// [ &apos;cat&apos;, index: 0, input: &apos;cat, bat&apos;, groups: undefined ]</span><br><span class=\"line\">// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 </span><br><span class=\"line\">// &apos;cat, bat&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 <code>null</code>;</p>\n<p>使用 <code>exec</code> 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 <code>cat</code>  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 <code>index</code>, <code>input</code> 以及 <code>groups</code> ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：</p>\n<ul>\n<li><code>index</code>: index 表明匹配数组中第一个值在字符串中的位置。</li>\n<li><code>input</code>：input 表明当前匹配的字符串</li>\n<li><code>groups</code>: groups 是 es2018 中提出的一个新的方法  </li>\n</ul>\n<blockquote>\n<p>注意： 当正则表达式中包含有全局匹配 <code>g</code> 的时候，每次调用 <code>exec</code> 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  <code>exec</code> 只会调用第一次匹配到的信息。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat, dat\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(matches) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(pattern.lastIndex, matches[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  matches = pattern.exec(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3 'cat'</span></span><br><span class=\"line\"><span class=\"comment\">// 8 'bat'</span></span><br><span class=\"line\"><span class=\"comment\">// 13 'dat'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用正则表达式的一些方法：\"><a href=\"#应用正则表达式的一些方法：\" class=\"headerlink\" title=\"应用正则表达式的一些方法：\"></a>应用正则表达式的一些方法：</h3><h4 id=\"String-prototype-match\"><a href=\"#String-prototype-match\" class=\"headerlink\" title=\"String.prototype.match\"></a><code>String.prototype.match</code></h4><p><code>str.match(regexp)</code></p>\n<p>接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。</p>\n<blockquote>\n<p>注意， 在使用 <code>match</code> 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;</span><br><span class=\"line\">&gt; var string = &quot;2017-06-12&quot;;</span><br><span class=\"line\">&gt; console.log( string.match(regex) );</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;] 没有获得到捕获组 括号内的匹配项</span><br><span class=\"line\">&gt; // 当正则表达式中不含有 g 标识符的时候</span><br><span class=\"line\">&gt; regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;]`String.prototype.search`</span><br><span class=\"line\">&gt; // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"String-prototype-search\"><a href=\"#String-prototype-search\" class=\"headerlink\" title=\"String.prototype.search\"></a><code>String.prototype.search</code></h4><p><code>str.search(regexp)</code></p>\n<p>接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello world&apos;;</span><br><span class=\"line\">str.search(/world/); // 6</span><br></pre></td></tr></table></figure>\n<p>使用 <code>indexOf</code> 方法也可以用来查找到字符串中的某一个字符， 相比 <code>indexOf</code> 方法， 个人认为 <code>search</code></p>\n<p> 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"search Word\"</span>;</span><br><span class=\"line\">str.search(<span class=\"regexp\">/word/i</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p><strong>当我们使用 <code>search</code> 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式</strong></p>\n<p>如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"2019.02.05\"</span>;</span><br><span class=\"line\">str.search(<span class=\"string\">'.'</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"String-prototype-replace\"><a href=\"#String-prototype-replace\" class=\"headerlink\" title=\"String.prototype.replace\"></a><code>String.prototype.replace</code></h4><p><code>str.replace(regexp, replaceStr)</code></p>\n<p>使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。</p>\n<p>注意： 使用 <code>replace</code> 方法的时候 <code>replaceStr</code> 中使用 <code>$1</code>, <code>$2</code> 以及 <code>$3</code> 可以表示 <code>RegExp.$1</code>, <code>RegExp.$2</code></p>\n<p><code>RegExp.$3</code>  </p>\n<p>如下， 转换日期的格式问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;2018-02-02&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$3/$2/$1&apos;); // 02/02/2018</span><br></pre></td></tr></table></figure>\n<p>如下， 隐藏手机号码中间四位的数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;15656568620&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$1****$3&apos;);</span><br><span class=\"line\">// 156****8620</span><br></pre></td></tr></table></figure>\n<p>使用 <code>replace</code> 可以实现更为强大的功能， 因为第二个参数的 <code>replaceStr</code> 可以有多个具有特殊含义的字符：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$1</code> <code>$2</code> … <code>$99</code></td>\n<td>匹配地 <code>$1</code> , <code>$2</code> … <code>$99</code> 分组捕获的文本</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>匹配到的子串文本</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>匹配到的子串的左边文本</td>\n</tr>\n<tr>\n<td>$’</td>\n<td>匹配到的子串的</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>表示美元符号</td>\n</tr>\n<tr>\n<td>其他符号</td>\n<td>符号本身</td>\n</tr>\n</tbody>\n</table>\n<p>如下， 我们想要将一段金钱文字都添加上一个 <code>$</code> 符号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'100, 200, 300'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(\\d+)/g</span>;</span><br><span class=\"line\">str.replace(regex, <span class=\"string\">'$$ $&amp;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// $100, $200, $300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>replace</code> 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 <code>replace</code> 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。</p>\n</blockquote>\n<p><strong><a name=\"replaceFn\">replace 第二个参数除了接受一个字符串之外， 还可以接受一个函数</a></strong></p>\n<p>如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceStr</span> (<span class=\"params\">matchChar, captureChar, charIndex, matchStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.table([&#123; matchChar, captureChar, charIndex, matchStr &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> captureChar ? captureChar.toUpperCase() : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将连字符相连的单词转换为驼峰式的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-(\\w)/g</span>, replaceStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camelize(<span class=\"string\">\"my-component\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最终打印结果如下：</p>\n<img src=\"/2019/01/20/正则表达式：基础方法/replace.jpg\">\n<p>上面各个参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>matchChar(第一个参数)</th>\n<th>captureChar(第二个参数)</th>\n<th>charIndex(第三个参数)</th>\n<th>matchStr(第四个参数)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>正则匹配匹配到的字符串</td>\n<td>捕获组捕获到的字符</td>\n<td>matchChar 在整个字符串中的起始位置</td>\n<td>被匹配的字符串</td>\n</tr>\n</tbody>\n</table>\n<p>注意： 当匹配正则中没有 <code>()</code> 也就是没有捕获组的时候， 参数总体向前挪动， 最后一个参数为  <code>undefined</code></p>\n<p>例如上面的代码中：修改为如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceStr</span> (<span class=\"params\">matchChar, captureChar, charIndex, matchStr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.table([&#123; matchChar, captureChar, charIndex, matchStr &#125;]);</span><br><span class=\"line\">  <span class=\"comment\">// return captureChar ? captureChar.toUpperCase() : '';</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camelize</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/-\\w/g</span>, replaceStr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">camelize(<span class=\"string\">\"my-component\"</span>);</span><br></pre></td></tr></table></figure>\n<p>最终打印结果如下：</p>\n<img src=\"/2019/01/20/正则表达式：基础方法/vueCodeReplace1.jpg\">\n<p>上面可以看到， 当正则中没有捕获组了之后， 捕获组参数 <code>captureChar</code> 消失掉了， <code>charIndex</code> 以及 <code>matchStr</code> 参数向前挪动了一位， 从而导致最后一位为 <code>undefined</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p>使用 <code>$1</code> <code>$2</code> .. 可以获取到被匹配到的捕获组中的数据， <code>$1</code> 获取到第一个捕获组数据， <code>$2</code> 获取到第二个捕获组数据， 依次类推</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'2018-02-02'</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\">regex.test(str);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span> <span class=\"comment\">// 2018</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span> <span class=\"comment\">// 02</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span> <span class=\"comment\">// 02</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以在正则中使用 <code>\\1</code> 或者 <code>\\2</code> 之类的表示引用分组 <code>$1</code>  <code>$2</code> ….， 例如： </p>\n<p>我们想要匹配如下的日期格式：</p>\n<p>2019-02-05</p>\n<p>2019.02.05</p>\n<p>2019/02/05</p>\n<p>我们注意到， 对于   <code>-</code> 或 <code>.</code> 或 <code>/</code> 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;(-|\\/|\\.)\\d&#123;2&#125;/;</span><br><span class=\"line\">let str = &apos;2019-02-05&apos;;</span><br><span class=\"line\">regex.test(str); // true</span><br></pre></td></tr></table></figure>\n<p>但是上面的正则也可以匹配到 2019-02.05 这样的格式；</p>\n<p>当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|/\\|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/;</span><br></pre></td></tr></table></figure>\n<p>如下： 匹配 html 中的匹配标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> html = <span class=\"string\">\"&lt;p&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/&lt;([^&gt;]+)&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配含有 class 的元素属性</span></span><br><span class=\"line\">html = <span class=\"string\">\"&lt;p class=\"</span>content<span class=\"string\">\"&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/&lt;([^&gt;]+).*&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"获取数组中特定值的数组","date":"2018-06-11T15:49:38.000Z","_content":"\n有如下题目：\n\n根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。\n\n自己想了一下， 实现方法如下：\n\n```javascript\n/**\n** description 得到\n** arr 传入的数组\n** value 得到的类数组的值\n** maxLen 类数组的最大长度\n**/\nfunction compile(arr, value, maxLen = arr.length) {\n    if (!arr.length || !value) return;\n    let result = [];\n    let tempArr = [];\n    const len = arr.length;\n    let nowIndex = 0;\n    while (nowIndex < len) {\n        if (tempArr.length > 0) {\n            let temp = [];\n            for (let item of tempArr) {\n                temp.push([...item, arr[nowIndex]]);\n            }\n            tempArr = [...tempArr, ...temp];\n        }\n        tempArr.push([arr[nowIndex]]);\n        nowIndex++;\n    }\n    result = tempArr.filter(arr => (arr.reduce((pev, now) => (pev = pev + now) && pev, 0) === value) && (arr.length <= maxLen) );\n    return result;\n}\n```\n\n实现的效果如下：\n\n```javascript\ncompile([1, 2, 3], 5)  // [2, 3]\n```\n\n\n","source":"_posts/获取数组中特定值的数组.md","raw":"---\ntitle: 获取数组中特定值的数组\ndate: 2018-06-11 23:49:38\ntags: 数组\ncategories: 代码集\n---\n\n有如下题目：\n\n根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。\n\n自己想了一下， 实现方法如下：\n\n```javascript\n/**\n** description 得到\n** arr 传入的数组\n** value 得到的类数组的值\n** maxLen 类数组的最大长度\n**/\nfunction compile(arr, value, maxLen = arr.length) {\n    if (!arr.length || !value) return;\n    let result = [];\n    let tempArr = [];\n    const len = arr.length;\n    let nowIndex = 0;\n    while (nowIndex < len) {\n        if (tempArr.length > 0) {\n            let temp = [];\n            for (let item of tempArr) {\n                temp.push([...item, arr[nowIndex]]);\n            }\n            tempArr = [...tempArr, ...temp];\n        }\n        tempArr.push([arr[nowIndex]]);\n        nowIndex++;\n    }\n    result = tempArr.filter(arr => (arr.reduce((pev, now) => (pev = pev + now) && pev, 0) === value) && (arr.length <= maxLen) );\n    return result;\n}\n```\n\n实现的效果如下：\n\n```javascript\ncompile([1, 2, 3], 5)  // [2, 3]\n```\n\n\n","slug":"获取数组中特定值的数组","published":1,"updated":"2020-09-14T06:36:26.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9g006ii2osm7ecmaf3","content":"<p>有如下题目：</p>\n<p>根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。</p>\n<p>自己想了一下， 实现方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** description 得到</span></span><br><span class=\"line\"><span class=\"comment\">** arr 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">** value 得到的类数组的值</span></span><br><span class=\"line\"><span class=\"comment\">** maxLen 类数组的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">arr, value, maxLen = arr.length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length || !value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nowIndex &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempArr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> tempArr) &#123;</span><br><span class=\"line\">                temp.push([...item, arr[nowIndex]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tempArr = [...tempArr, ...temp];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempArr.push([arr[nowIndex]]);</span><br><span class=\"line\">        nowIndex++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = tempArr.filter(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"function\">(<span class=\"params\">arr.reduce((pev, now</span>) =&gt;</span> (pev = pev + now) &amp;&amp; pev, <span class=\"number\">0</span>) === value) &amp;&amp; (arr.length &lt;= maxLen) );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)  <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有如下题目：</p>\n<p>根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。</p>\n<p>自己想了一下， 实现方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** description 得到</span></span><br><span class=\"line\"><span class=\"comment\">** arr 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">** value 得到的类数组的值</span></span><br><span class=\"line\"><span class=\"comment\">** maxLen 类数组的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">arr, value, maxLen = arr.length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length || !value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nowIndex &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempArr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> tempArr) &#123;</span><br><span class=\"line\">                temp.push([...item, arr[nowIndex]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tempArr = [...tempArr, ...temp];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempArr.push([arr[nowIndex]]);</span><br><span class=\"line\">        nowIndex++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = tempArr.filter(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"function\">(<span class=\"params\">arr.reduce((pev, now</span>) =&gt;</span> (pev = pev + now) &amp;&amp; pev, <span class=\"number\">0</span>) === value) &amp;&amp; (arr.length &lt;= maxLen) );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)  <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"移动端touch事件","date":"2017-08-19T00:40:01.000Z","_content":"\n####  touch事件\n\n当我们手指触摸屏幕的时候，touch事件有这几个事件:\n\ntouchstart : 当手指触摸手机屏幕的时候触发  \n\ntouchmove : 当手指当手机屏幕上移动的时候触发  \n\ntouchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 `touchend` 中定义调用。\n\ntouchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作\n\n<!--more-->\n\n#### touch 事件对象\n\ntouch事件对象返回了下面几个属性:  \n\ntouches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象\n\ntargetTouches: 当前对象上所有触摸点的集合  \n\nchangedTouched: 自从变化之后的所有touch对象数组  \n\n##### touch 事件返回的对象中的属性集合\n\n返回的触摸点对象如下：\n\n```\nTouchList {\nlength: 1\n0: Touch\nclientX: 57.36600112915039\nclientY: 31.8700008392334\nforce: 1\nidentifier: 0\npageX: 57.36600112915039\npageY: 31.8700008392334\nradiusX: 36.65040588378906\nradiusY: 36.65040588378906\nrotationAngle: 0\nscreenX: 547\nscreenY: 167\ntarget: div#demo\n__proto__: Touch\n__proto__: TouchList\n```\n\n各个触摸点的属性解释如下:  \n\nclientX，clientY: 触摸点在视口中的距离  \n\npageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  \n\nscreenX, screenY: 触摸点距离屏幕的距离  \n\ntarget: touch事件作用到的事件对象  \n\n####  在uc浏览器下遇到的问题\n\n使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:\n\n解决办法: 在touchmove的时候阻止默认行为，~~监听touchcancel 替代 touchend事件:~~\n\n```\ntouch(event) {\n  switch (event.type) {\n    case 'touchstart':\n    \t....\n    \tbreak;\n    case 'touchmove':\n    \t....\n    \tevent.preventDefault();\n    \tbreak;\n    case 'touchend':\n    \t....\n    \tbreak;\n  } \n}\n```\n\n情况并不像我之前想的那样，`touchcancel` 的行为并不是类似于 `touchend` \n\n#### touchcancel 事件\n\n`touchcancel` 从字面意思上来讲，是取消`touch` 操作的意思，在 MDN 上是这样解释的: \n\n>The `touchcancel` event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\\n>\n>`touchcancel` 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）\n\n我是这样理解的： `touchcancel` 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 `touchend` 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，`touchcancel` 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 `touchend` 事件，从`touchend` 事件中的方法不会被执行。\n\n当手指在按钮上下滑动的时候，`touchcancel` 事件是不会被调用的。可以把`touchcancel` 事件视为防止误操作事件。","source":"_posts/移动端touch事件.md","raw":"---\ntitle: 移动端touch事件\ndate: 2017-08-19 08:40:01\ntags: 移动端touch事件\n---\n\n####  touch事件\n\n当我们手指触摸屏幕的时候，touch事件有这几个事件:\n\ntouchstart : 当手指触摸手机屏幕的时候触发  \n\ntouchmove : 当手指当手机屏幕上移动的时候触发  \n\ntouchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 `touchend` 中定义调用。\n\ntouchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作\n\n<!--more-->\n\n#### touch 事件对象\n\ntouch事件对象返回了下面几个属性:  \n\ntouches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象\n\ntargetTouches: 当前对象上所有触摸点的集合  \n\nchangedTouched: 自从变化之后的所有touch对象数组  \n\n##### touch 事件返回的对象中的属性集合\n\n返回的触摸点对象如下：\n\n```\nTouchList {\nlength: 1\n0: Touch\nclientX: 57.36600112915039\nclientY: 31.8700008392334\nforce: 1\nidentifier: 0\npageX: 57.36600112915039\npageY: 31.8700008392334\nradiusX: 36.65040588378906\nradiusY: 36.65040588378906\nrotationAngle: 0\nscreenX: 547\nscreenY: 167\ntarget: div#demo\n__proto__: Touch\n__proto__: TouchList\n```\n\n各个触摸点的属性解释如下:  \n\nclientX，clientY: 触摸点在视口中的距离  \n\npageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  \n\nscreenX, screenY: 触摸点距离屏幕的距离  \n\ntarget: touch事件作用到的事件对象  \n\n####  在uc浏览器下遇到的问题\n\n使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:\n\n解决办法: 在touchmove的时候阻止默认行为，~~监听touchcancel 替代 touchend事件:~~\n\n```\ntouch(event) {\n  switch (event.type) {\n    case 'touchstart':\n    \t....\n    \tbreak;\n    case 'touchmove':\n    \t....\n    \tevent.preventDefault();\n    \tbreak;\n    case 'touchend':\n    \t....\n    \tbreak;\n  } \n}\n```\n\n情况并不像我之前想的那样，`touchcancel` 的行为并不是类似于 `touchend` \n\n#### touchcancel 事件\n\n`touchcancel` 从字面意思上来讲，是取消`touch` 操作的意思，在 MDN 上是这样解释的: \n\n>The `touchcancel` event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\\n>\n>`touchcancel` 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）\n\n我是这样理解的： `touchcancel` 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 `touchend` 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，`touchcancel` 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 `touchend` 事件，从`touchend` 事件中的方法不会被执行。\n\n当手指在按钮上下滑动的时候，`touchcancel` 事件是不会被调用的。可以把`touchcancel` 事件视为防止误操作事件。","slug":"移动端touch事件","published":1,"updated":"2020-09-14T06:36:26.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9h006ki2osbv0qkaqp","content":"<h4 id=\"touch事件\"><a href=\"#touch事件\" class=\"headerlink\" title=\"touch事件\"></a>touch事件</h4><p>当我们手指触摸屏幕的时候，touch事件有这几个事件:</p>\n<p>touchstart : 当手指触摸手机屏幕的时候触发  </p>\n<p>touchmove : 当手指当手机屏幕上移动的时候触发  </p>\n<p>touchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 <code>touchend</code> 中定义调用。</p>\n<p>touchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作</p>\n<a id=\"more\"></a>\n<h4 id=\"touch-事件对象\"><a href=\"#touch-事件对象\" class=\"headerlink\" title=\"touch 事件对象\"></a>touch 事件对象</h4><p>touch事件对象返回了下面几个属性:  </p>\n<p>touches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象</p>\n<p>targetTouches: 当前对象上所有触摸点的集合  </p>\n<p>changedTouched: 自从变化之后的所有touch对象数组  </p>\n<h5 id=\"touch-事件返回的对象中的属性集合\"><a href=\"#touch-事件返回的对象中的属性集合\" class=\"headerlink\" title=\"touch 事件返回的对象中的属性集合\"></a>touch 事件返回的对象中的属性集合</h5><p>返回的触摸点对象如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchList &#123;</span><br><span class=\"line\">length: 1</span><br><span class=\"line\">0: Touch</span><br><span class=\"line\">clientX: 57.36600112915039</span><br><span class=\"line\">clientY: 31.8700008392334</span><br><span class=\"line\">force: 1</span><br><span class=\"line\">identifier: 0</span><br><span class=\"line\">pageX: 57.36600112915039</span><br><span class=\"line\">pageY: 31.8700008392334</span><br><span class=\"line\">radiusX: 36.65040588378906</span><br><span class=\"line\">radiusY: 36.65040588378906</span><br><span class=\"line\">rotationAngle: 0</span><br><span class=\"line\">screenX: 547</span><br><span class=\"line\">screenY: 167</span><br><span class=\"line\">target: div#demo</span><br><span class=\"line\">__proto__: Touch</span><br><span class=\"line\">__proto__: TouchList</span><br></pre></td></tr></table></figure>\n<p>各个触摸点的属性解释如下:  </p>\n<p>clientX，clientY: 触摸点在视口中的距离  </p>\n<p>pageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  </p>\n<p>screenX, screenY: 触摸点距离屏幕的距离  </p>\n<p>target: touch事件作用到的事件对象  </p>\n<h4 id=\"在uc浏览器下遇到的问题\"><a href=\"#在uc浏览器下遇到的问题\" class=\"headerlink\" title=\"在uc浏览器下遇到的问题\"></a>在uc浏览器下遇到的问题</h4><p>使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:</p>\n<p>解决办法: 在touchmove的时候阻止默认行为，<del>监听touchcancel 替代 touchend事件:</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch(event) &#123;</span><br><span class=\"line\">  switch (event.type) &#123;</span><br><span class=\"line\">    case &apos;touchstart&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchmove&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tevent.preventDefault();</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchend&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况并不像我之前想的那样，<code>touchcancel</code> 的行为并不是类似于 <code>touchend</code> </p>\n<h4 id=\"touchcancel-事件\"><a href=\"#touchcancel-事件\" class=\"headerlink\" title=\"touchcancel 事件\"></a>touchcancel 事件</h4><p><code>touchcancel</code> 从字面意思上来讲，是取消<code>touch</code> 操作的意思，在 MDN 上是这样解释的: </p>\n<blockquote>\n<p>The <code>touchcancel</code> event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\</p>\n<p><code>touchcancel</code> 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）</p>\n</blockquote>\n<p>我是这样理解的： <code>touchcancel</code> 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 <code>touchend</code> 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，<code>touchcancel</code> 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 <code>touchend</code> 事件，从<code>touchend</code> 事件中的方法不会被执行。</p>\n<p>当手指在按钮上下滑动的时候，<code>touchcancel</code> 事件是不会被调用的。可以把<code>touchcancel</code> 事件视为防止误操作事件。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"touch事件\"><a href=\"#touch事件\" class=\"headerlink\" title=\"touch事件\"></a>touch事件</h4><p>当我们手指触摸屏幕的时候，touch事件有这几个事件:</p>\n<p>touchstart : 当手指触摸手机屏幕的时候触发  </p>\n<p>touchmove : 当手指当手机屏幕上移动的时候触发  </p>\n<p>touchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 <code>touchend</code> 中定义调用。</p>\n<p>touchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作</p>","more":"<h4 id=\"touch-事件对象\"><a href=\"#touch-事件对象\" class=\"headerlink\" title=\"touch 事件对象\"></a>touch 事件对象</h4><p>touch事件对象返回了下面几个属性:  </p>\n<p>touches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象</p>\n<p>targetTouches: 当前对象上所有触摸点的集合  </p>\n<p>changedTouched: 自从变化之后的所有touch对象数组  </p>\n<h5 id=\"touch-事件返回的对象中的属性集合\"><a href=\"#touch-事件返回的对象中的属性集合\" class=\"headerlink\" title=\"touch 事件返回的对象中的属性集合\"></a>touch 事件返回的对象中的属性集合</h5><p>返回的触摸点对象如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchList &#123;</span><br><span class=\"line\">length: 1</span><br><span class=\"line\">0: Touch</span><br><span class=\"line\">clientX: 57.36600112915039</span><br><span class=\"line\">clientY: 31.8700008392334</span><br><span class=\"line\">force: 1</span><br><span class=\"line\">identifier: 0</span><br><span class=\"line\">pageX: 57.36600112915039</span><br><span class=\"line\">pageY: 31.8700008392334</span><br><span class=\"line\">radiusX: 36.65040588378906</span><br><span class=\"line\">radiusY: 36.65040588378906</span><br><span class=\"line\">rotationAngle: 0</span><br><span class=\"line\">screenX: 547</span><br><span class=\"line\">screenY: 167</span><br><span class=\"line\">target: div#demo</span><br><span class=\"line\">__proto__: Touch</span><br><span class=\"line\">__proto__: TouchList</span><br></pre></td></tr></table></figure>\n<p>各个触摸点的属性解释如下:  </p>\n<p>clientX，clientY: 触摸点在视口中的距离  </p>\n<p>pageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  </p>\n<p>screenX, screenY: 触摸点距离屏幕的距离  </p>\n<p>target: touch事件作用到的事件对象  </p>\n<h4 id=\"在uc浏览器下遇到的问题\"><a href=\"#在uc浏览器下遇到的问题\" class=\"headerlink\" title=\"在uc浏览器下遇到的问题\"></a>在uc浏览器下遇到的问题</h4><p>使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:</p>\n<p>解决办法: 在touchmove的时候阻止默认行为，<del>监听touchcancel 替代 touchend事件:</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch(event) &#123;</span><br><span class=\"line\">  switch (event.type) &#123;</span><br><span class=\"line\">    case &apos;touchstart&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchmove&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tevent.preventDefault();</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchend&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况并不像我之前想的那样，<code>touchcancel</code> 的行为并不是类似于 <code>touchend</code> </p>\n<h4 id=\"touchcancel-事件\"><a href=\"#touchcancel-事件\" class=\"headerlink\" title=\"touchcancel 事件\"></a>touchcancel 事件</h4><p><code>touchcancel</code> 从字面意思上来讲，是取消<code>touch</code> 操作的意思，在 MDN 上是这样解释的: </p>\n<blockquote>\n<p>The <code>touchcancel</code> event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\</p>\n<p><code>touchcancel</code> 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）</p>\n</blockquote>\n<p>我是这样理解的： <code>touchcancel</code> 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 <code>touchend</code> 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，<code>touchcancel</code> 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 <code>touchend</code> 事件，从<code>touchend</code> 事件中的方法不会被执行。</p>\n<p>当手指在按钮上下滑动的时候，<code>touchcancel</code> 事件是不会被调用的。可以把<code>touchcancel</code> 事件视为防止误操作事件。</p>"},{"title":"聊聊js中的类","date":"2018-05-15T15:17:09.000Z","_content":"\n对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。\n\n实现类的机制在 js 中有两种方法： `prototype` 以及   es6 中`class` 关键字， 下面分别就这两种探讨一下 `js` 中类的形成：\n\n###  使用 `prototype` 实现类\n\n#### 什么是 `prototype`\n\n在 `js` 中创建对象的时候，对象中默认存在一个 `prototype`（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 `_proto_`） 属性，这个属性是一个 `指针`，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：\n\n```javascript\nlet obj = {};\nobj._proto_ = { name: \"张宁宁\" };\nobj.name // 张宁宁\n```\n\n\n\n想要了解这个过程，我们需要知道当我们在使用 `.` 或者 `[]` 查找元素属性的时候，元素属性是如何被查找到的。\n\n**当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值**\n\n上面的例子中， 虽然我们没有在 `obj` 上面定义一个 `name` 属性，但是我们在 `obj` 对象的原型上定义了一个 `name` 属性，因此还是可以查找到的。同样， 对于定义在 `prototype` 上的属性，使用 `for in` 操作符也是可以访问到的。\n\n```javascript\nfor (let key in obj) {\n  console.log(key);\n}\n// name*\n```\n\n使用`hasOwnProperty` 方法可以判断定义的属性是在对象本身上面还是在原型上面。\n\n注意： 使用 `Object.keys` 是不能获得到定义在对象原型上面的属性的。\n\n```javascript\nObject.keys(obj); // []\n```\n\n\n\n#### 了解原型链\n\n##### 原型链的实现方式\n\n在 `javascript` 中，原型链是被用来实现继承的主要方法， 基本的原理如下：\n\n> 使用原型链实现在 `js` 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例\n\n我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。\n\n代码实现：\n\n```javascript\nfunction func1 () {\n  this.value = true;\n}\nfunction func2 () {\n}\nfunc2.prototype.getValue = function () {\n    return this.value;\n}\nfunc1.prototype = new func2()\nconst instance = new func1();\n// 或者 const instance = Object.create(func1.prototype);\n// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj\ninstance.getValue(); // true\n```\n\n上面的这个过程其实也可以说是我们重写了构造函数的原型;\n\n##### 原型链的终点\n\n对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。\n\n我们知道在 `javascript` 中， 存在下面几种基本类型：\n\n`undefined`, `null` , `Boolean` , `Number`, `String` 这五种基本类型和一种复杂的数据类型： `Object`.\n\n实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 `Object` 的实例。\n\n```javascript\nlet newObj = new Object();\n```\n\n\n\n这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： `Object.keys`, `Object.values` 这些方法实际上是定义在对象的原型上面的。\n\n```javascript\nlet obj = {};\nobj._proto_  // Object.prototype\n```\n\n而对于 `Object.prototype` 上面，实际上也是存在一个 `prototype` 属性， 只不过这个属性指向的是 `null`;\n\n###  `new` 操作符\n\n我们使用 `new` 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 `new` 标识符号将一个普通函数转变为一个构造函数:\n\n使用 `new` 操作符创造构造函数的实例的时候发生的过程如下：\n\n1. 创建一个新对象。\n2. 将这个新对象的原型对象指向构造函数的原型\n3. 返回这个新对象。\n\n在 `高级程序设计` 这本书中有这样一句话：\n\n> 这两个对象( `person` 的实例)都有一个`constructor(构造函数)`属性，这个属性指向 `person`.\n\n上面这句话第一次读的时候不好理解，看起来感觉像是 `constructor` 属性是定义在实例上面的，实际上， 这里在实例上能够获得 `constructor` 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 `constructor` 属性，这个属性指向构造函数。 \n\n","source":"_posts/聊聊js中的类.md","raw":"---\ntitle: 聊聊js中的类\ndate: 2018-05-15 23:17:09\ntags: js 类\ncategories: 笔记\n---\n\n对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。\n\n实现类的机制在 js 中有两种方法： `prototype` 以及   es6 中`class` 关键字， 下面分别就这两种探讨一下 `js` 中类的形成：\n\n###  使用 `prototype` 实现类\n\n#### 什么是 `prototype`\n\n在 `js` 中创建对象的时候，对象中默认存在一个 `prototype`（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 `_proto_`） 属性，这个属性是一个 `指针`，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：\n\n```javascript\nlet obj = {};\nobj._proto_ = { name: \"张宁宁\" };\nobj.name // 张宁宁\n```\n\n\n\n想要了解这个过程，我们需要知道当我们在使用 `.` 或者 `[]` 查找元素属性的时候，元素属性是如何被查找到的。\n\n**当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值**\n\n上面的例子中， 虽然我们没有在 `obj` 上面定义一个 `name` 属性，但是我们在 `obj` 对象的原型上定义了一个 `name` 属性，因此还是可以查找到的。同样， 对于定义在 `prototype` 上的属性，使用 `for in` 操作符也是可以访问到的。\n\n```javascript\nfor (let key in obj) {\n  console.log(key);\n}\n// name*\n```\n\n使用`hasOwnProperty` 方法可以判断定义的属性是在对象本身上面还是在原型上面。\n\n注意： 使用 `Object.keys` 是不能获得到定义在对象原型上面的属性的。\n\n```javascript\nObject.keys(obj); // []\n```\n\n\n\n#### 了解原型链\n\n##### 原型链的实现方式\n\n在 `javascript` 中，原型链是被用来实现继承的主要方法， 基本的原理如下：\n\n> 使用原型链实现在 `js` 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例\n\n我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。\n\n代码实现：\n\n```javascript\nfunction func1 () {\n  this.value = true;\n}\nfunction func2 () {\n}\nfunc2.prototype.getValue = function () {\n    return this.value;\n}\nfunc1.prototype = new func2()\nconst instance = new func1();\n// 或者 const instance = Object.create(func1.prototype);\n// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj\ninstance.getValue(); // true\n```\n\n上面的这个过程其实也可以说是我们重写了构造函数的原型;\n\n##### 原型链的终点\n\n对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。\n\n我们知道在 `javascript` 中， 存在下面几种基本类型：\n\n`undefined`, `null` , `Boolean` , `Number`, `String` 这五种基本类型和一种复杂的数据类型： `Object`.\n\n实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 `Object` 的实例。\n\n```javascript\nlet newObj = new Object();\n```\n\n\n\n这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： `Object.keys`, `Object.values` 这些方法实际上是定义在对象的原型上面的。\n\n```javascript\nlet obj = {};\nobj._proto_  // Object.prototype\n```\n\n而对于 `Object.prototype` 上面，实际上也是存在一个 `prototype` 属性， 只不过这个属性指向的是 `null`;\n\n###  `new` 操作符\n\n我们使用 `new` 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 `new` 标识符号将一个普通函数转变为一个构造函数:\n\n使用 `new` 操作符创造构造函数的实例的时候发生的过程如下：\n\n1. 创建一个新对象。\n2. 将这个新对象的原型对象指向构造函数的原型\n3. 返回这个新对象。\n\n在 `高级程序设计` 这本书中有这样一句话：\n\n> 这两个对象( `person` 的实例)都有一个`constructor(构造函数)`属性，这个属性指向 `person`.\n\n上面这句话第一次读的时候不好理解，看起来感觉像是 `constructor` 属性是定义在实例上面的，实际上， 这里在实例上能够获得 `constructor` 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 `constructor` 属性，这个属性指向构造函数。 \n\n","slug":"聊聊js中的类","published":1,"updated":"2020-09-14T06:36:26.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9l006oi2ostjr1hro5","content":"<p>对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。</p>\n<p>实现类的机制在 js 中有两种方法： <code>prototype</code> 以及   es6 中<code>class</code> 关键字， 下面分别就这两种探讨一下 <code>js</code> 中类的形成：</p>\n<h3 id=\"使用-prototype-实现类\"><a href=\"#使用-prototype-实现类\" class=\"headerlink\" title=\"使用 prototype 实现类\"></a>使用 <code>prototype</code> 实现类</h3><h4 id=\"什么是-prototype\"><a href=\"#什么是-prototype\" class=\"headerlink\" title=\"什么是 prototype\"></a>什么是 <code>prototype</code></h4><p>在 <code>js</code> 中创建对象的时候，对象中默认存在一个 <code>prototype</code>（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 <code>_proto_</code>） 属性，这个属性是一个 <code>指针</code>，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_ = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span> &#125;;</span><br><span class=\"line\">obj.name <span class=\"comment\">// 张宁宁</span></span><br></pre></td></tr></table></figure>\n<p>想要了解这个过程，我们需要知道当我们在使用 <code>.</code> 或者 <code>[]</code> 查找元素属性的时候，元素属性是如何被查找到的。</p>\n<p><strong>当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值</strong></p>\n<p>上面的例子中， 虽然我们没有在 <code>obj</code> 上面定义一个 <code>name</code> 属性，但是我们在 <code>obj</code> 对象的原型上定义了一个 <code>name</code> 属性，因此还是可以查找到的。同样， 对于定义在 <code>prototype</code> 上的属性，使用 <code>for in</code> 操作符也是可以访问到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// name*</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>hasOwnProperty</code> 方法可以判断定义的属性是在对象本身上面还是在原型上面。</p>\n<p>注意： 使用 <code>Object.keys</code> 是不能获得到定义在对象原型上面的属性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"了解原型链\"><a href=\"#了解原型链\" class=\"headerlink\" title=\"了解原型链\"></a>了解原型链</h4><h5 id=\"原型链的实现方式\"><a href=\"#原型链的实现方式\" class=\"headerlink\" title=\"原型链的实现方式\"></a>原型链的实现方式</h5><p>在 <code>javascript</code> 中，原型链是被用来实现继承的主要方法， 基本的原理如下：</p>\n<blockquote>\n<p>使用原型链实现在 <code>js</code> 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例</p>\n</blockquote>\n<p>我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2.prototype.getValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1.prototype = <span class=\"keyword\">new</span> func2()</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> func1();</span><br><span class=\"line\"><span class=\"comment\">// 或者 const instance = Object.create(func1.prototype);</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj</span></span><br><span class=\"line\">instance.getValue(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的这个过程其实也可以说是我们重写了构造函数的原型;</p>\n<h5 id=\"原型链的终点\"><a href=\"#原型链的终点\" class=\"headerlink\" title=\"原型链的终点\"></a>原型链的终点</h5><p>对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。</p>\n<p>我们知道在 <code>javascript</code> 中， 存在下面几种基本类型：</p>\n<p><code>undefined</code>, <code>null</code> , <code>Boolean</code> , <code>Number</code>, <code>String</code> 这五种基本类型和一种复杂的数据类型： <code>Object</code>.</p>\n<p>实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 <code>Object</code> 的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： <code>Object.keys</code>, <code>Object.values</code> 这些方法实际上是定义在对象的原型上面的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_  <span class=\"comment\">// Object.prototype</span></span><br></pre></td></tr></table></figure>\n<p>而对于 <code>Object.prototype</code> 上面，实际上也是存在一个 <code>prototype</code> 属性， 只不过这个属性指向的是 <code>null</code>;</p>\n<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a><code>new</code> 操作符</h3><p>我们使用 <code>new</code> 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 <code>new</code> 标识符号将一个普通函数转变为一个构造函数:</p>\n<p>使用 <code>new</code> 操作符创造构造函数的实例的时候发生的过程如下：</p>\n<ol>\n<li>创建一个新对象。</li>\n<li>将这个新对象的原型对象指向构造函数的原型</li>\n<li>返回这个新对象。</li>\n</ol>\n<p>在 <code>高级程序设计</code> 这本书中有这样一句话：</p>\n<blockquote>\n<p>这两个对象( <code>person</code> 的实例)都有一个<code>constructor(构造函数)</code>属性，这个属性指向 <code>person</code>.</p>\n</blockquote>\n<p>上面这句话第一次读的时候不好理解，看起来感觉像是 <code>constructor</code> 属性是定义在实例上面的，实际上， 这里在实例上能够获得 <code>constructor</code> 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 <code>constructor</code> 属性，这个属性指向构造函数。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。</p>\n<p>实现类的机制在 js 中有两种方法： <code>prototype</code> 以及   es6 中<code>class</code> 关键字， 下面分别就这两种探讨一下 <code>js</code> 中类的形成：</p>\n<h3 id=\"使用-prototype-实现类\"><a href=\"#使用-prototype-实现类\" class=\"headerlink\" title=\"使用 prototype 实现类\"></a>使用 <code>prototype</code> 实现类</h3><h4 id=\"什么是-prototype\"><a href=\"#什么是-prototype\" class=\"headerlink\" title=\"什么是 prototype\"></a>什么是 <code>prototype</code></h4><p>在 <code>js</code> 中创建对象的时候，对象中默认存在一个 <code>prototype</code>（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 <code>_proto_</code>） 属性，这个属性是一个 <code>指针</code>，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_ = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span> &#125;;</span><br><span class=\"line\">obj.name <span class=\"comment\">// 张宁宁</span></span><br></pre></td></tr></table></figure>\n<p>想要了解这个过程，我们需要知道当我们在使用 <code>.</code> 或者 <code>[]</code> 查找元素属性的时候，元素属性是如何被查找到的。</p>\n<p><strong>当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值</strong></p>\n<p>上面的例子中， 虽然我们没有在 <code>obj</code> 上面定义一个 <code>name</code> 属性，但是我们在 <code>obj</code> 对象的原型上定义了一个 <code>name</code> 属性，因此还是可以查找到的。同样， 对于定义在 <code>prototype</code> 上的属性，使用 <code>for in</code> 操作符也是可以访问到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// name*</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>hasOwnProperty</code> 方法可以判断定义的属性是在对象本身上面还是在原型上面。</p>\n<p>注意： 使用 <code>Object.keys</code> 是不能获得到定义在对象原型上面的属性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"了解原型链\"><a href=\"#了解原型链\" class=\"headerlink\" title=\"了解原型链\"></a>了解原型链</h4><h5 id=\"原型链的实现方式\"><a href=\"#原型链的实现方式\" class=\"headerlink\" title=\"原型链的实现方式\"></a>原型链的实现方式</h5><p>在 <code>javascript</code> 中，原型链是被用来实现继承的主要方法， 基本的原理如下：</p>\n<blockquote>\n<p>使用原型链实现在 <code>js</code> 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例</p>\n</blockquote>\n<p>我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2.prototype.getValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1.prototype = <span class=\"keyword\">new</span> func2()</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> func1();</span><br><span class=\"line\"><span class=\"comment\">// 或者 const instance = Object.create(func1.prototype);</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj</span></span><br><span class=\"line\">instance.getValue(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的这个过程其实也可以说是我们重写了构造函数的原型;</p>\n<h5 id=\"原型链的终点\"><a href=\"#原型链的终点\" class=\"headerlink\" title=\"原型链的终点\"></a>原型链的终点</h5><p>对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。</p>\n<p>我们知道在 <code>javascript</code> 中， 存在下面几种基本类型：</p>\n<p><code>undefined</code>, <code>null</code> , <code>Boolean</code> , <code>Number</code>, <code>String</code> 这五种基本类型和一种复杂的数据类型： <code>Object</code>.</p>\n<p>实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 <code>Object</code> 的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： <code>Object.keys</code>, <code>Object.values</code> 这些方法实际上是定义在对象的原型上面的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_  <span class=\"comment\">// Object.prototype</span></span><br></pre></td></tr></table></figure>\n<p>而对于 <code>Object.prototype</code> 上面，实际上也是存在一个 <code>prototype</code> 属性， 只不过这个属性指向的是 <code>null</code>;</p>\n<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a><code>new</code> 操作符</h3><p>我们使用 <code>new</code> 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 <code>new</code> 标识符号将一个普通函数转变为一个构造函数:</p>\n<p>使用 <code>new</code> 操作符创造构造函数的实例的时候发生的过程如下：</p>\n<ol>\n<li>创建一个新对象。</li>\n<li>将这个新对象的原型对象指向构造函数的原型</li>\n<li>返回这个新对象。</li>\n</ol>\n<p>在 <code>高级程序设计</code> 这本书中有这样一句话：</p>\n<blockquote>\n<p>这两个对象( <code>person</code> 的实例)都有一个<code>constructor(构造函数)</code>属性，这个属性指向 <code>person</code>.</p>\n</blockquote>\n<p>上面这句话第一次读的时候不好理解，看起来感觉像是 <code>constructor</code> 属性是定义在实例上面的，实际上， 这里在实例上能够获得 <code>constructor</code> 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 <code>constructor</code> 属性，这个属性指向构造函数。 </p>\n"},{"title":"设计模式：单例模式","date":"2019-04-17T09:10:27.000Z","_content":"\n### 单例模式（The Singleton Pattern）\n\n单例模式的特征是限制创建的类的实例为一个单独的对象， 比较典型的例子是： 如果实例不存在， 那么通过方法创建类的实例， 否则， 返回这个实例， 单例模式的实例仅有一个， 因此被称作单例模式；\n\n例如下面的代码：\n\n```js\nlet singleton = (function () {\n  let instance;\n  function init() {\n    return {\n      publicName: name,\n    }\n  }\n  return {\n    getInstance: function() {\n      if (instance === undefined) {\n        instance = init();\n      }\n      return instance;\n    }\n  }\n\n})();\n```\n\n当我们引用上面的实例时， 我们始终引用到的是一个实例：\n\n```js\nsingleton.getInstance() === singleton.getInstance() // true\n```\n\n使用单例模式有什么好处呢？\n\n1. 当当前页面需要一个公共的对象或者全局缓存的时候， 我们需要使用单例模式， 实现例如全局变量存储，线程池之类的功能， 使用单例可以让多个引用的实例状态保持一致， 因此这些多次引用只是引用的同一个实例\n2. 划分命名空间， 避免全局变量污染\n3. 在使用的时候实例化对象， 可以防止如果引入大的资源的时候出现较大的内存占用， 特别当创建实例的 cost 较大的时候\n\n我们可以使用单例模式的情况：\n\n>* There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.\n>* When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code.\n\n* 对于一个类而言， 必须有只有一个确定的实例， 而且对于使用者来说， 这个实例可以通过一个很明确的地方获取到, 比如上面的 `getInstance` 方法\n\n* 通过添加子类， 这个唯一的实例应该能够是可扩展的， 使用者应该在不改变原来代码的情况下是使用扩展的实例， 例如：\n\n  ```js\n  getInstance: function() {\n    if (instance === undefined) {\n      // 通过 if 的方式切换应用的类\n    \tif (useClassA) {\n        instance = new classA();\n    \t} else {\n        instance = init();\n    \t}\n    }\n  \treturn instance;\n  }\n  ```","source":"_posts/设计模式：单例模式.md","raw":"---\ntitle: 设计模式：单例模式\ndate: 2019-04-17 17:10:27\ntags: 设计模式\ncategories: 设计模式\n---\n\n### 单例模式（The Singleton Pattern）\n\n单例模式的特征是限制创建的类的实例为一个单独的对象， 比较典型的例子是： 如果实例不存在， 那么通过方法创建类的实例， 否则， 返回这个实例， 单例模式的实例仅有一个， 因此被称作单例模式；\n\n例如下面的代码：\n\n```js\nlet singleton = (function () {\n  let instance;\n  function init() {\n    return {\n      publicName: name,\n    }\n  }\n  return {\n    getInstance: function() {\n      if (instance === undefined) {\n        instance = init();\n      }\n      return instance;\n    }\n  }\n\n})();\n```\n\n当我们引用上面的实例时， 我们始终引用到的是一个实例：\n\n```js\nsingleton.getInstance() === singleton.getInstance() // true\n```\n\n使用单例模式有什么好处呢？\n\n1. 当当前页面需要一个公共的对象或者全局缓存的时候， 我们需要使用单例模式， 实现例如全局变量存储，线程池之类的功能， 使用单例可以让多个引用的实例状态保持一致， 因此这些多次引用只是引用的同一个实例\n2. 划分命名空间， 避免全局变量污染\n3. 在使用的时候实例化对象， 可以防止如果引入大的资源的时候出现较大的内存占用， 特别当创建实例的 cost 较大的时候\n\n我们可以使用单例模式的情况：\n\n>* There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.\n>* When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code.\n\n* 对于一个类而言， 必须有只有一个确定的实例， 而且对于使用者来说， 这个实例可以通过一个很明确的地方获取到, 比如上面的 `getInstance` 方法\n\n* 通过添加子类， 这个唯一的实例应该能够是可扩展的， 使用者应该在不改变原来代码的情况下是使用扩展的实例， 例如：\n\n  ```js\n  getInstance: function() {\n    if (instance === undefined) {\n      // 通过 if 的方式切换应用的类\n    \tif (useClassA) {\n        instance = new classA();\n    \t} else {\n        instance = init();\n    \t}\n    }\n  \treturn instance;\n  }\n  ```","slug":"设计模式：单例模式","published":1,"updated":"2020-09-14T06:36:26.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9m006ri2os97tmwagp","content":"<h3 id=\"单例模式（The-Singleton-Pattern）\"><a href=\"#单例模式（The-Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（The Singleton Pattern）\"></a>单例模式（The Singleton Pattern）</h3><p>单例模式的特征是限制创建的类的实例为一个单独的对象， 比较典型的例子是： 如果实例不存在， 那么通过方法创建类的实例， 否则， 返回这个实例， 单例模式的实例仅有一个， 因此被称作单例模式；</p>\n<p>例如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      publicName: name,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getInstance: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        instance = init();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>当我们引用上面的实例时， 我们始终引用到的是一个实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleton.getInstance() === singleton.getInstance() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>使用单例模式有什么好处呢？</p>\n<ol>\n<li>当当前页面需要一个公共的对象或者全局缓存的时候， 我们需要使用单例模式， 实现例如全局变量存储，线程池之类的功能， 使用单例可以让多个引用的实例状态保持一致， 因此这些多次引用只是引用的同一个实例</li>\n<li>划分命名空间， 避免全局变量污染</li>\n<li>在使用的时候实例化对象， 可以防止如果引入大的资源的时候出现较大的内存占用， 特别当创建实例的 cost 较大的时候</li>\n</ol>\n<p>我们可以使用单例模式的情况：</p>\n<blockquote>\n<ul>\n<li>There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.</li>\n<li>When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code.</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>对于一个类而言， 必须有只有一个确定的实例， 而且对于使用者来说， 这个实例可以通过一个很明确的地方获取到, 比如上面的 <code>getInstance</code> 方法</p>\n</li>\n<li><p>通过添加子类， 这个唯一的实例应该能够是可扩展的， 使用者应该在不改变原来代码的情况下是使用扩展的实例， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInstance: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instance === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 if 的方式切换应用的类</span></span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (useClassA) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> classA();</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      instance = init();</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单例模式（The-Singleton-Pattern）\"><a href=\"#单例模式（The-Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（The Singleton Pattern）\"></a>单例模式（The Singleton Pattern）</h3><p>单例模式的特征是限制创建的类的实例为一个单独的对象， 比较典型的例子是： 如果实例不存在， 那么通过方法创建类的实例， 否则， 返回这个实例， 单例模式的实例仅有一个， 因此被称作单例模式；</p>\n<p>例如下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> singleton = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      publicName: name,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    getInstance: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (instance === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        instance = init();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>当我们引用上面的实例时， 我们始终引用到的是一个实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">singleton.getInstance() === singleton.getInstance() <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>使用单例模式有什么好处呢？</p>\n<ol>\n<li>当当前页面需要一个公共的对象或者全局缓存的时候， 我们需要使用单例模式， 实现例如全局变量存储，线程池之类的功能， 使用单例可以让多个引用的实例状态保持一致， 因此这些多次引用只是引用的同一个实例</li>\n<li>划分命名空间， 避免全局变量污染</li>\n<li>在使用的时候实例化对象， 可以防止如果引入大的资源的时候出现较大的内存占用， 特别当创建实例的 cost 较大的时候</li>\n</ol>\n<p>我们可以使用单例模式的情况：</p>\n<blockquote>\n<ul>\n<li>There must be exactly one instance of a class, and it must be accessible to clients from a well-known access point.</li>\n<li>When the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code.</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>对于一个类而言， 必须有只有一个确定的实例， 而且对于使用者来说， 这个实例可以通过一个很明确的地方获取到, 比如上面的 <code>getInstance</code> 方法</p>\n</li>\n<li><p>通过添加子类， 这个唯一的实例应该能够是可扩展的， 使用者应该在不改变原来代码的情况下是使用扩展的实例， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInstance: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (instance === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 if 的方式切换应用的类</span></span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (useClassA) &#123;</span><br><span class=\"line\">      instance = <span class=\"keyword\">new</span> classA();</span><br><span class=\"line\">  \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      instance = init();</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"由目录搜索想到的多叉树向二叉树的转换","date":"2018-04-21T13:29:15.000Z","_content":"\n## 目录搜索\n\n在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：\n\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：\n\n```javascript\n{\n    children: [\n        children: [...],\n      \ttitle: ...,\n        ...\n    ],\n    title: ...,\n    ...\n}\n```\n\n这里 `title` 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 `children` 属性就不会存在。\n\n`html` 部分：\n\n```html\n<el-input v-model=\"searchContent\"></el-input>\n```\n\n`vue ` 部分\n\n```javascript\nexport default {\n  data () {\n      searchContent: \"\",\n      originMenus: \"\"\n  },\n  watch： {\n    \"route\": function () {\n  \t\t// 这里用来保存原始数组\n  \t\tthis.originMenus = Util.clone(this.menus);\n\t},\n    \"searchContent\": function (val) {\n        if (val.trim().length === 0) {\n        \tthis.menus = this.originMenus;\n        } else {\n            this.filterMenus(val, this.orginMenus);\n        }\n    },\n    methods: {\n      filterMenus(val, menus) {\n        const filterVal = val;\n        // 深拷贝对象\n        const filterMenus = Util.clone(menus);\n        const filterFn = theMenus => {\n          if (theMenus.children) {\n            let spliceIndex = 0;\n            // 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作\n            while (spliceIndex < theMenus.children.length) {\n              if (Array.isArray(theMenus.children[spliceIndex].children) &&theMenus.children[spliceIndex].children.length !== 0) {\n                // 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的\n                filterFn(theMenus.children[spliceIndex]);\n                // 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环\n                if (theMenus.children[spliceIndex].children.length !== 0) {\n                  spliceIndex++;\n                  continue;\n                }\n              }\n              // 这一部分， 如何实现有选择性的删除的？\n              // 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除\n              if (theMenus.children[spliceIndex] && theMenus.children[spliceIndex].title && theMenus.children[spliceIndex].title.indexOf(val) > -1) {\n                spliceIndex++;\n              } else {\n                theMenus.children.splice(spliceIndex, 1);\n              }\n            }\n          }\n        };\n        filterFn(filterMenus);\n        return filterMenus;\n      }\n    }\n  }\n}\n```\n\n在上面的代码中， 使用到了 `while` 循环以及一些递归的东西。\n\n## 由多叉树向二叉树的转换\n\n在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。\n\n### 二叉树\n\n二叉树是这样的一种树：\n\n> 二叉树是 n ( n >=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。\n\n#### 二叉树的特点\n\n每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。\n\n![](https://segmentfault.com/img/bVdgFE)\n\n二叉树节点的代码定义：\n\n```javascript\n node {\n   value: \"\",\n   // 左孩子\n   left: {\n     left : {\n       ...\n     },\n     right ： {\n       ...\n     }\n   },\n   // 右孩子\n   right: {\n     ...\n   }\n }\n```\n\n#### 二叉树的遍历\n\n对于二叉树而言， 存在三种遍历方式：\n\n1. 前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。\n2. 中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。\n3. 后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。\n\n下面是三种遍历的示意图：\n\n前序遍历：\n\n​\t\t\t    ![](https://segmentfault.com/img/bVdgIK)\n\n代码实现：\n\n```javascript\nfunction preOrder (node) {\n    if (node !== null) {\n      getNode(node);\n      preOrder(node.left);\n      preOrder(node.right);\n    }\n}\n```\n\n\n\n中序遍历：\n\n![](https://segmentfault.com/img/bVdgIM)\n\n代码实现：\n\n```javascript\nfunction inOrder (node) {\n  if (node !== null) {\n    // 先访问左子树\n    inOrder(node.left);\n    // 访问根节点\n    getNode(node);\n    // 访问右子树\n    inOrder(node.right);\n  }\n}\n```\n\n\n\n后序遍历：\n\n![](https://segmentfault.com/img/bVdgJs)\n\n代码实现：\n\n```javascript\nfunction postOrder (node) {\n  if (node !== null) {\n    // 先访问左节点\n    postOrder(node.left);\n    // 再访问右节点\n    postOrder(node.right);\n    getNode(node);\n  }\n}\n```\n\n\n\n#### 使用二叉树的目的\n\n上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？\n\n> 对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。\n\n> 对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  \n\n####  二叉查找树\n\n二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。\n\n如下使用数组建立一个二叉查找树：\n\n```javascript\n// 构建左节点\nfunction setLeftNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.left = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.left = {\n      value: array[len / 2]\n    };\n  }\n}\n// 构建右节点\nfunction setRightNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.right = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.right = {\n      value: array[len / 2]\n    };\n  }\n}\n// 将数组转化为二叉树\nfunction arrayToTree(array, node) {\n  const len = array.length;\n  array.sort();\n  node.value = (len % 2) !== 0 ? array[(len - 1) / 2] : array[len / 2];\n  const leftArr = array.slice(0, (len % 2) !== 0 ? (len - 1) / 2 : len / 2);\n  const rightArr = array.slice(((len) % 2) !== 0 ? (len + 1) / 2 : ((len / 2) + 1), array.length);\n  setLeftNode(leftArr, node);\n  setRightNode(rightArr, node);\n  (leftArr.length !== 0) && arrayToTree(leftArr, node.left);\n  (rightArr.length !== 0) && arrayToTree(rightArr, node.right);\n  return node;\n}\n```\n\n\n\n```javascript\nconst arr = [1, 9, 2, 6, 3, 4, 7, 8];\nlet tree = {};\nconsole.log(arrayToTree(arr, tree));\n```\n\n最终结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png)\n\n#### 多叉树\n\n如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：\n\n例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：\n\n> 多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。\n\n转化示意图如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n转化代码：\n\n```javascript\nconst treeRight = (tree, fatherChild) => {\n  if (fatherChild && fatherChild.length !== 0) {\n    fatherChild.splice(0, 1);\n    tree.right = fatherChild[0];\n    treeLeft(tree.right, fatherChild);\n    treeRight(tree.right, fatherChild);\n  }\n};\nconst treeLeft = (tree) => {\n  if (tree && tree.children) {\n    tree.left = tree.children[0];\n    treeLeft(tree.left);\n    treeRight(tree.left, tree.children);\n  }\n};\n```\n\n","source":"_posts/由目录搜索想到的多叉树向二叉树的转换.md","raw":"---\ntitle: 由目录搜索想到的多叉树向二叉树的转换\ndate: 2018-04-21 21:29:15\ntags: 二叉树\n---\n\n## 目录搜索\n\n在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：\n\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：\n\n```javascript\n{\n    children: [\n        children: [...],\n      \ttitle: ...,\n        ...\n    ],\n    title: ...,\n    ...\n}\n```\n\n这里 `title` 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 `children` 属性就不会存在。\n\n`html` 部分：\n\n```html\n<el-input v-model=\"searchContent\"></el-input>\n```\n\n`vue ` 部分\n\n```javascript\nexport default {\n  data () {\n      searchContent: \"\",\n      originMenus: \"\"\n  },\n  watch： {\n    \"route\": function () {\n  \t\t// 这里用来保存原始数组\n  \t\tthis.originMenus = Util.clone(this.menus);\n\t},\n    \"searchContent\": function (val) {\n        if (val.trim().length === 0) {\n        \tthis.menus = this.originMenus;\n        } else {\n            this.filterMenus(val, this.orginMenus);\n        }\n    },\n    methods: {\n      filterMenus(val, menus) {\n        const filterVal = val;\n        // 深拷贝对象\n        const filterMenus = Util.clone(menus);\n        const filterFn = theMenus => {\n          if (theMenus.children) {\n            let spliceIndex = 0;\n            // 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作\n            while (spliceIndex < theMenus.children.length) {\n              if (Array.isArray(theMenus.children[spliceIndex].children) &&theMenus.children[spliceIndex].children.length !== 0) {\n                // 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的\n                filterFn(theMenus.children[spliceIndex]);\n                // 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环\n                if (theMenus.children[spliceIndex].children.length !== 0) {\n                  spliceIndex++;\n                  continue;\n                }\n              }\n              // 这一部分， 如何实现有选择性的删除的？\n              // 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除\n              if (theMenus.children[spliceIndex] && theMenus.children[spliceIndex].title && theMenus.children[spliceIndex].title.indexOf(val) > -1) {\n                spliceIndex++;\n              } else {\n                theMenus.children.splice(spliceIndex, 1);\n              }\n            }\n          }\n        };\n        filterFn(filterMenus);\n        return filterMenus;\n      }\n    }\n  }\n}\n```\n\n在上面的代码中， 使用到了 `while` 循环以及一些递归的东西。\n\n## 由多叉树向二叉树的转换\n\n在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。\n\n### 二叉树\n\n二叉树是这样的一种树：\n\n> 二叉树是 n ( n >=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。\n\n#### 二叉树的特点\n\n每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。\n\n![](https://segmentfault.com/img/bVdgFE)\n\n二叉树节点的代码定义：\n\n```javascript\n node {\n   value: \"\",\n   // 左孩子\n   left: {\n     left : {\n       ...\n     },\n     right ： {\n       ...\n     }\n   },\n   // 右孩子\n   right: {\n     ...\n   }\n }\n```\n\n#### 二叉树的遍历\n\n对于二叉树而言， 存在三种遍历方式：\n\n1. 前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。\n2. 中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。\n3. 后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。\n\n下面是三种遍历的示意图：\n\n前序遍历：\n\n​\t\t\t    ![](https://segmentfault.com/img/bVdgIK)\n\n代码实现：\n\n```javascript\nfunction preOrder (node) {\n    if (node !== null) {\n      getNode(node);\n      preOrder(node.left);\n      preOrder(node.right);\n    }\n}\n```\n\n\n\n中序遍历：\n\n![](https://segmentfault.com/img/bVdgIM)\n\n代码实现：\n\n```javascript\nfunction inOrder (node) {\n  if (node !== null) {\n    // 先访问左子树\n    inOrder(node.left);\n    // 访问根节点\n    getNode(node);\n    // 访问右子树\n    inOrder(node.right);\n  }\n}\n```\n\n\n\n后序遍历：\n\n![](https://segmentfault.com/img/bVdgJs)\n\n代码实现：\n\n```javascript\nfunction postOrder (node) {\n  if (node !== null) {\n    // 先访问左节点\n    postOrder(node.left);\n    // 再访问右节点\n    postOrder(node.right);\n    getNode(node);\n  }\n}\n```\n\n\n\n#### 使用二叉树的目的\n\n上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？\n\n> 对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。\n\n> 对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  \n\n####  二叉查找树\n\n二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。\n\n如下使用数组建立一个二叉查找树：\n\n```javascript\n// 构建左节点\nfunction setLeftNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.left = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.left = {\n      value: array[len / 2]\n    };\n  }\n}\n// 构建右节点\nfunction setRightNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.right = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.right = {\n      value: array[len / 2]\n    };\n  }\n}\n// 将数组转化为二叉树\nfunction arrayToTree(array, node) {\n  const len = array.length;\n  array.sort();\n  node.value = (len % 2) !== 0 ? array[(len - 1) / 2] : array[len / 2];\n  const leftArr = array.slice(0, (len % 2) !== 0 ? (len - 1) / 2 : len / 2);\n  const rightArr = array.slice(((len) % 2) !== 0 ? (len + 1) / 2 : ((len / 2) + 1), array.length);\n  setLeftNode(leftArr, node);\n  setRightNode(rightArr, node);\n  (leftArr.length !== 0) && arrayToTree(leftArr, node.left);\n  (rightArr.length !== 0) && arrayToTree(rightArr, node.right);\n  return node;\n}\n```\n\n\n\n```javascript\nconst arr = [1, 9, 2, 6, 3, 4, 7, 8];\nlet tree = {};\nconsole.log(arrayToTree(arr, tree));\n```\n\n最终结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png)\n\n#### 多叉树\n\n如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：\n\n例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：\n\n> 多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。\n\n转化示意图如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n转化代码：\n\n```javascript\nconst treeRight = (tree, fatherChild) => {\n  if (fatherChild && fatherChild.length !== 0) {\n    fatherChild.splice(0, 1);\n    tree.right = fatherChild[0];\n    treeLeft(tree.right, fatherChild);\n    treeRight(tree.right, fatherChild);\n  }\n};\nconst treeLeft = (tree) => {\n  if (tree && tree.children) {\n    tree.left = tree.children[0];\n    treeLeft(tree.left);\n    treeRight(tree.left, tree.children);\n  }\n};\n```\n\n","slug":"由目录搜索想到的多叉树向二叉树的转换","published":1,"updated":"2020-09-14T06:36:26.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9o006vi2osu5v1020h","content":"<h2 id=\"目录搜索\"><a href=\"#目录搜索\" class=\"headerlink\" title=\"目录搜索\"></a>目录搜索</h2><p>在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：</p>\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\"><br>your browser does not support the video tag<br></video>\n\n<p>如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        children: [...],</span><br><span class=\"line\">      \ttitle: ...,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    title: ...,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>title</code> 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 <code>children</code> 属性就不会存在。</p>\n<p><code>html</code> 部分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>vue</code> 部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">      searchContent: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      originMenus: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch： &#123;</span><br><span class=\"line\">    <span class=\"string\">\"route\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">// 这里用来保存原始数组</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.originMenus = Util.clone(<span class=\"keyword\">this</span>.menus);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"searchContent\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.trim().length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.originMenus;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.filterMenus(val, <span class=\"keyword\">this</span>.orginMenus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      filterMenus(val, menus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterVal = val;</span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterMenus = Util.clone(menus);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterFn = <span class=\"function\"><span class=\"params\">theMenus</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (theMenus.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> spliceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (spliceIndex &lt; theMenus.children.length) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(theMenus.children[spliceIndex].children) &amp;&amp;theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的</span></span><br><span class=\"line\">                filterFn(theMenus.children[spliceIndex]);</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  spliceIndex++;</span><br><span class=\"line\">                  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 这一部分， 如何实现有选择性的删除的？</span></span><br><span class=\"line\">              <span class=\"comment\">// 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (theMenus.children[spliceIndex] &amp;&amp; theMenus.children[spliceIndex].title &amp;&amp; theMenus.children[spliceIndex].title.indexOf(val) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                spliceIndex++;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                theMenus.children.splice(spliceIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        filterFn(filterMenus);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterMenus;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 使用到了 <code>while</code> 循环以及一些递归的东西。</p>\n<h2 id=\"由多叉树向二叉树的转换\"><a href=\"#由多叉树向二叉树的转换\" class=\"headerlink\" title=\"由多叉树向二叉树的转换\"></a>由多叉树向二叉树的转换</h2><p>在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><p>二叉树是这样的一种树：</p>\n<blockquote>\n<p>二叉树是 n ( n &gt;=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。</p>\n</blockquote>\n<h4 id=\"二叉树的特点\"><a href=\"#二叉树的特点\" class=\"headerlink\" title=\"二叉树的特点\"></a>二叉树的特点</h4><p>每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。</p>\n<p><img src=\"https://segmentfault.com/img/bVdgFE\" alt></p>\n<p>二叉树节点的代码定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 左孩子</span></span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    left : &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right ： &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 右孩子</span></span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h4><p>对于二叉树而言， 存在三种遍历方式：</p>\n<ol>\n<li>前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。</li>\n<li>中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。</li>\n<li>后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。</li>\n</ol>\n<p>下面是三种遍历的示意图：</p>\n<p>前序遍历：</p>\n<p>​                <img src=\"https://segmentfault.com/img/bVdgIK\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      getNode(node);</span><br><span class=\"line\">      preOrder(node.left);</span><br><span class=\"line\">      preOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgIM\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左子树</span></span><br><span class=\"line\">    inOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点</span></span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">    <span class=\"comment\">// 访问右子树</span></span><br><span class=\"line\">    inOrder(node.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgJs\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左节点</span></span><br><span class=\"line\">    postOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 再访问右节点</span></span><br><span class=\"line\">    postOrder(node.right);</span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用二叉树的目的\"><a href=\"#使用二叉树的目的\" class=\"headerlink\" title=\"使用二叉树的目的\"></a>使用二叉树的目的</h4><p>上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？</p>\n<blockquote>\n<p>对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。</p>\n</blockquote>\n<blockquote>\n<p>对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  </p>\n</blockquote>\n<h4 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h4><p>二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。</p>\n<p>如下使用数组建立一个二叉查找树：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建左节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.left = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.left = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 构建右节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.right = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.right = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将数组转化为二叉树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToTree</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  array.sort();</span><br><span class=\"line\">  node.value = (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] : array[len / <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftArr = array.slice(<span class=\"number\">0</span>, (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span> : len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightArr = array.slice(((len) % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len + <span class=\"number\">1</span>) / <span class=\"number\">2</span> : ((len / <span class=\"number\">2</span>) + <span class=\"number\">1</span>), array.length);</span><br><span class=\"line\">  setLeftNode(leftArr, node);</span><br><span class=\"line\">  setRightNode(rightArr, node);</span><br><span class=\"line\">  (leftArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(leftArr, node.left);</span><br><span class=\"line\">  (rightArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(rightArr, node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayToTree(arr, tree));</span><br></pre></td></tr></table></figure>\n<p>最终结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png\" alt></p>\n<h4 id=\"多叉树\"><a href=\"#多叉树\" class=\"headerlink\" title=\"多叉树\"></a>多叉树</h4><p>如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：</p>\n<p>例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：</p>\n<blockquote>\n<p>多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。</p>\n</blockquote>\n<p>转化示意图如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt></p>\n<p>转化代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeRight = <span class=\"function\">(<span class=\"params\">tree, fatherChild</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fatherChild &amp;&amp; fatherChild.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    fatherChild.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree.right = fatherChild[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.right, fatherChild);</span><br><span class=\"line\">    treeRight(tree.right, fatherChild);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> treeLeft = <span class=\"function\">(<span class=\"params\">tree</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree &amp;&amp; tree.children) &#123;</span><br><span class=\"line\">    tree.left = tree.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.left);</span><br><span class=\"line\">    treeRight(tree.left, tree.children);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录搜索\"><a href=\"#目录搜索\" class=\"headerlink\" title=\"目录搜索\"></a>目录搜索</h2><p>在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：</p>\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\"><br>your browser does not support the video tag<br></video>\n\n<p>如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        children: [...],</span><br><span class=\"line\">      \ttitle: ...,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    title: ...,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>title</code> 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 <code>children</code> 属性就不会存在。</p>\n<p><code>html</code> 部分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>vue</code> 部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">      searchContent: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      originMenus: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch： &#123;</span><br><span class=\"line\">    <span class=\"string\">\"route\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">// 这里用来保存原始数组</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.originMenus = Util.clone(<span class=\"keyword\">this</span>.menus);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"searchContent\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.trim().length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.originMenus;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.filterMenus(val, <span class=\"keyword\">this</span>.orginMenus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      filterMenus(val, menus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterVal = val;</span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterMenus = Util.clone(menus);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterFn = <span class=\"function\"><span class=\"params\">theMenus</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (theMenus.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> spliceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (spliceIndex &lt; theMenus.children.length) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(theMenus.children[spliceIndex].children) &amp;&amp;theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的</span></span><br><span class=\"line\">                filterFn(theMenus.children[spliceIndex]);</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  spliceIndex++;</span><br><span class=\"line\">                  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 这一部分， 如何实现有选择性的删除的？</span></span><br><span class=\"line\">              <span class=\"comment\">// 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (theMenus.children[spliceIndex] &amp;&amp; theMenus.children[spliceIndex].title &amp;&amp; theMenus.children[spliceIndex].title.indexOf(val) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                spliceIndex++;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                theMenus.children.splice(spliceIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        filterFn(filterMenus);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterMenus;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 使用到了 <code>while</code> 循环以及一些递归的东西。</p>\n<h2 id=\"由多叉树向二叉树的转换\"><a href=\"#由多叉树向二叉树的转换\" class=\"headerlink\" title=\"由多叉树向二叉树的转换\"></a>由多叉树向二叉树的转换</h2><p>在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><p>二叉树是这样的一种树：</p>\n<blockquote>\n<p>二叉树是 n ( n &gt;=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。</p>\n</blockquote>\n<h4 id=\"二叉树的特点\"><a href=\"#二叉树的特点\" class=\"headerlink\" title=\"二叉树的特点\"></a>二叉树的特点</h4><p>每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。</p>\n<p><img src=\"https://segmentfault.com/img/bVdgFE\" alt></p>\n<p>二叉树节点的代码定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 左孩子</span></span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    left : &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right ： &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 右孩子</span></span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h4><p>对于二叉树而言， 存在三种遍历方式：</p>\n<ol>\n<li>前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。</li>\n<li>中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。</li>\n<li>后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。</li>\n</ol>\n<p>下面是三种遍历的示意图：</p>\n<p>前序遍历：</p>\n<p>​                <img src=\"https://segmentfault.com/img/bVdgIK\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      getNode(node);</span><br><span class=\"line\">      preOrder(node.left);</span><br><span class=\"line\">      preOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgIM\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左子树</span></span><br><span class=\"line\">    inOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点</span></span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">    <span class=\"comment\">// 访问右子树</span></span><br><span class=\"line\">    inOrder(node.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgJs\" alt></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左节点</span></span><br><span class=\"line\">    postOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 再访问右节点</span></span><br><span class=\"line\">    postOrder(node.right);</span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用二叉树的目的\"><a href=\"#使用二叉树的目的\" class=\"headerlink\" title=\"使用二叉树的目的\"></a>使用二叉树的目的</h4><p>上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？</p>\n<blockquote>\n<p>对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。</p>\n</blockquote>\n<blockquote>\n<p>对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  </p>\n</blockquote>\n<h4 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h4><p>二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。</p>\n<p>如下使用数组建立一个二叉查找树：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建左节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.left = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.left = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 构建右节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.right = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.right = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将数组转化为二叉树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToTree</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  array.sort();</span><br><span class=\"line\">  node.value = (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] : array[len / <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftArr = array.slice(<span class=\"number\">0</span>, (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span> : len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightArr = array.slice(((len) % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len + <span class=\"number\">1</span>) / <span class=\"number\">2</span> : ((len / <span class=\"number\">2</span>) + <span class=\"number\">1</span>), array.length);</span><br><span class=\"line\">  setLeftNode(leftArr, node);</span><br><span class=\"line\">  setRightNode(rightArr, node);</span><br><span class=\"line\">  (leftArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(leftArr, node.left);</span><br><span class=\"line\">  (rightArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(rightArr, node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayToTree(arr, tree));</span><br></pre></td></tr></table></figure>\n<p>最终结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png\" alt></p>\n<h4 id=\"多叉树\"><a href=\"#多叉树\" class=\"headerlink\" title=\"多叉树\"></a>多叉树</h4><p>如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：</p>\n<p>例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：</p>\n<blockquote>\n<p>多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。</p>\n</blockquote>\n<p>转化示意图如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt></p>\n<p>转化代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeRight = <span class=\"function\">(<span class=\"params\">tree, fatherChild</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fatherChild &amp;&amp; fatherChild.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    fatherChild.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree.right = fatherChild[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.right, fatherChild);</span><br><span class=\"line\">    treeRight(tree.right, fatherChild);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> treeLeft = <span class=\"function\">(<span class=\"params\">tree</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree &amp;&amp; tree.children) &#123;</span><br><span class=\"line\">    tree.left = tree.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.left);</span><br><span class=\"line\">    treeRight(tree.left, tree.children);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"谈谈 window.location 对象","date":"2019-01-20T06:27:20.000Z","_content":"\n## 谈谈 `window.location` 对象\n\n`window.location` 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：\n\n以我们在 页面 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location 下获取 `window.location` 为例：\n\n```\nancestorOrigins: DOMStringList {length: 0}\nassign: ƒ ()\nhash: \"\"\nhost: \"developer.mozilla.org\"\nhostname: \"developer.mozilla.org\"\nhref: \"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\"\norigin: \"https://developer.mozilla.org\"\npathname: \"/zh-CN/docs/Web/API/Window/location\"\nport: \"\"\nprotocol: \"https:\"\nreload: ƒ reload()\nreplace: ƒ ()\nsearch: \"\"\ntoString: ƒ toString()\nvalueOf: ƒ valueOf()\nSymbol(Symbol.toPrimitive): undefined\n__proto__: Location\n```\n\n上面的这些值表明了在 `window.location` 中的一些属性和方法：\n\n| 属性名   | 含义                                                      | 示例                                                      |\n| -------- | --------------------------------------------------------- | --------------------------------------------------------- |\n| href     | 当前页面的url                                             | https://example.com:8080/page/childpage?pageId=1#identify |\n| host     | host  包含端口名                                          | example.com:8080                                          |\n| hostname | 不包含端口名                                              | example.com                                               |\n| pathname | 路径名                                                    | /page/childpage                                           |\n| origin   | 源网址                                                    | https://example.com:8080 是 网址在第一个 '/' 之前的部分   |\n| port     | 端口号                                                    | 8080                                                      |\n| protocol | 协议名                                                    | https                                                     |\n| search   | 截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容 | ?pageId=1                                                 |\n| hash     | 标识符                                                    | `#identify`                                               |\n\n除了上面几种属性之外， 还包括一些方法：\n\n```\nwindow.location.reload() // 对于当前页面进行重载操作\nwindow.location.replace(rul) // 对于当前页面进行替换\nwindow.location.assign(url) // 会触发页面重载并且跳转到指定的 url\n```\n\ntips：\n\n- 使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。\n\n","source":"_posts/谈谈-window-location-对象.md","raw":"---\ntitle: 谈谈 window.location 对象\ndate: 2019-01-20 14:27:20\ntags: window.location\ncategories: html5\n---\n\n## 谈谈 `window.location` 对象\n\n`window.location` 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：\n\n以我们在 页面 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location 下获取 `window.location` 为例：\n\n```\nancestorOrigins: DOMStringList {length: 0}\nassign: ƒ ()\nhash: \"\"\nhost: \"developer.mozilla.org\"\nhostname: \"developer.mozilla.org\"\nhref: \"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\"\norigin: \"https://developer.mozilla.org\"\npathname: \"/zh-CN/docs/Web/API/Window/location\"\nport: \"\"\nprotocol: \"https:\"\nreload: ƒ reload()\nreplace: ƒ ()\nsearch: \"\"\ntoString: ƒ toString()\nvalueOf: ƒ valueOf()\nSymbol(Symbol.toPrimitive): undefined\n__proto__: Location\n```\n\n上面的这些值表明了在 `window.location` 中的一些属性和方法：\n\n| 属性名   | 含义                                                      | 示例                                                      |\n| -------- | --------------------------------------------------------- | --------------------------------------------------------- |\n| href     | 当前页面的url                                             | https://example.com:8080/page/childpage?pageId=1#identify |\n| host     | host  包含端口名                                          | example.com:8080                                          |\n| hostname | 不包含端口名                                              | example.com                                               |\n| pathname | 路径名                                                    | /page/childpage                                           |\n| origin   | 源网址                                                    | https://example.com:8080 是 网址在第一个 '/' 之前的部分   |\n| port     | 端口号                                                    | 8080                                                      |\n| protocol | 协议名                                                    | https                                                     |\n| search   | 截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容 | ?pageId=1                                                 |\n| hash     | 标识符                                                    | `#identify`                                               |\n\n除了上面几种属性之外， 还包括一些方法：\n\n```\nwindow.location.reload() // 对于当前页面进行重载操作\nwindow.location.replace(rul) // 对于当前页面进行替换\nwindow.location.assign(url) // 会触发页面重载并且跳转到指定的 url\n```\n\ntips：\n\n- 使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。\n\n","slug":"谈谈-window-location-对象","published":1,"updated":"2020-09-14T06:36:26.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9p006yi2osi8osu8js","content":"<h2 id=\"谈谈-window-location-对象\"><a href=\"#谈谈-window-location-对象\" class=\"headerlink\" title=\"谈谈 window.location 对象\"></a>谈谈 <code>window.location</code> 对象</h2><p><code>window.location</code> 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：</p>\n<p>以我们在 页面 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</a> 下获取 <code>window.location</code> 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ancestorOrigins: DOMStringList &#123;length: 0&#125;</span><br><span class=\"line\">assign: ƒ ()</span><br><span class=\"line\">hash: &quot;&quot;</span><br><span class=\"line\">host: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">hostname: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">href: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">origin: &quot;https://developer.mozilla.org&quot;</span><br><span class=\"line\">pathname: &quot;/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">port: &quot;&quot;</span><br><span class=\"line\">protocol: &quot;https:&quot;</span><br><span class=\"line\">reload: ƒ reload()</span><br><span class=\"line\">replace: ƒ ()</span><br><span class=\"line\">search: &quot;&quot;</span><br><span class=\"line\">toString: ƒ toString()</span><br><span class=\"line\">valueOf: ƒ valueOf()</span><br><span class=\"line\">Symbol(Symbol.toPrimitive): undefined</span><br><span class=\"line\">__proto__: Location</span><br></pre></td></tr></table></figure>\n<p>上面的这些值表明了在 <code>window.location</code> 中的一些属性和方法：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>当前页面的url</td>\n<td><a href=\"https://example.com:8080/page/childpage?pageId=1#identify\" target=\"_blank\" rel=\"noopener\">https://example.com:8080/page/childpage?pageId=1#identify</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>host  包含端口名</td>\n<td>example.com:8080</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>不包含端口名</td>\n<td>example.com</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>路径名</td>\n<td>/page/childpage</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>源网址</td>\n<td><a href=\"https://example.com:8080\" target=\"_blank\" rel=\"noopener\">https://example.com:8080</a> 是 网址在第一个 ‘/‘ 之前的部分</td>\n</tr>\n<tr>\n<td>port</td>\n<td>端口号</td>\n<td>8080</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>协议名</td>\n<td>https</td>\n</tr>\n<tr>\n<td>search</td>\n<td>截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容</td>\n<td>?pageId=1</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>标识符</td>\n<td><code>#identify</code></td>\n</tr>\n</tbody>\n</table>\n<p>除了上面几种属性之外， 还包括一些方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.reload() // 对于当前页面进行重载操作</span><br><span class=\"line\">window.location.replace(rul) // 对于当前页面进行替换</span><br><span class=\"line\">window.location.assign(url) // 会触发页面重载并且跳转到指定的 url</span><br></pre></td></tr></table></figure>\n<p>tips：</p>\n<ul>\n<li>使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"谈谈-window-location-对象\"><a href=\"#谈谈-window-location-对象\" class=\"headerlink\" title=\"谈谈 window.location 对象\"></a>谈谈 <code>window.location</code> 对象</h2><p><code>window.location</code> 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：</p>\n<p>以我们在 页面 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</a> 下获取 <code>window.location</code> 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ancestorOrigins: DOMStringList &#123;length: 0&#125;</span><br><span class=\"line\">assign: ƒ ()</span><br><span class=\"line\">hash: &quot;&quot;</span><br><span class=\"line\">host: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">hostname: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">href: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">origin: &quot;https://developer.mozilla.org&quot;</span><br><span class=\"line\">pathname: &quot;/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">port: &quot;&quot;</span><br><span class=\"line\">protocol: &quot;https:&quot;</span><br><span class=\"line\">reload: ƒ reload()</span><br><span class=\"line\">replace: ƒ ()</span><br><span class=\"line\">search: &quot;&quot;</span><br><span class=\"line\">toString: ƒ toString()</span><br><span class=\"line\">valueOf: ƒ valueOf()</span><br><span class=\"line\">Symbol(Symbol.toPrimitive): undefined</span><br><span class=\"line\">__proto__: Location</span><br></pre></td></tr></table></figure>\n<p>上面的这些值表明了在 <code>window.location</code> 中的一些属性和方法：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>当前页面的url</td>\n<td><a href=\"https://example.com:8080/page/childpage?pageId=1#identify\" target=\"_blank\" rel=\"noopener\">https://example.com:8080/page/childpage?pageId=1#identify</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>host  包含端口名</td>\n<td>example.com:8080</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>不包含端口名</td>\n<td>example.com</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>路径名</td>\n<td>/page/childpage</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>源网址</td>\n<td><a href=\"https://example.com:8080\" target=\"_blank\" rel=\"noopener\">https://example.com:8080</a> 是 网址在第一个 ‘/‘ 之前的部分</td>\n</tr>\n<tr>\n<td>port</td>\n<td>端口号</td>\n<td>8080</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>协议名</td>\n<td>https</td>\n</tr>\n<tr>\n<td>search</td>\n<td>截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容</td>\n<td>?pageId=1</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>标识符</td>\n<td><code>#identify</code></td>\n</tr>\n</tbody>\n</table>\n<p>除了上面几种属性之外， 还包括一些方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.reload() // 对于当前页面进行重载操作</span><br><span class=\"line\">window.location.replace(rul) // 对于当前页面进行替换</span><br><span class=\"line\">window.location.assign(url) // 会触发页面重载并且跳转到指定的 url</span><br></pre></td></tr></table></figure>\n<p>tips：</p>\n<ul>\n<li>使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。</li>\n</ul>\n"},{"title":"设计模式：观察者模式","date":"2019-04-14T09:10:27.000Z","_content":"\n### 观察者模式\n\n使用观察者模式的一个常见的场景是： 一个观察对象需要通知一组相互独立的观察者发生变化， 并且这个观察对象和观察者之间是松耦合的关系。\n\n观察者模式是由观察者和观察对象组成的， 观察对象维护一组观察者，这组观察者依赖观察对象， 当观察对象的状态发生变化的时候， 会自动通知这组观察者发生动作。\n\n一个观察对象由属于自己的一组观察者， 观察对象的作用是注册， 删除观察者， 以及在合适的时机触发观察者。\n\n在其他书籍中对于观察者模式的一些定义如下：\n\n>\"One or more observers are interested in the state of a subject and register their interest with the subject by attaching themselves. When something changes in our subject that the observer may be interested in, a notify message is sent which calls the update method in each observer. When the observer is no longer interested in the subject's state, they can simply detach themselves.\"\n\n在观察者模式中， 存在下面四种组成部分：\n\n* 观察对象：维护一组观察者， 可以新增 / 删除观察者， 通知观察者发生变化的逻辑\n* 观察者： 提供一个当观察者对象状态发生变化的时候进行状态变化的一个接口\n* 观察对象实例： 当相关状态发生变化的时候通知观察者,\n* 观察者实例： 具体化一个数据改变的接口， 这个观察者实例是和观察对象相关联的\n\n下面是一个观察者模式的模型：\n\n```js\n// 一组观察者， 扩展了一些删除， 添加观察者的一些方法\nclass ObserverList {\n  constructor () {\n    this.observers = [];\n  }\n  append(ob) {\n    this.observers.push(ob);\n  }\n  delete(obIndex) {\n    this.observers.splice(obIndex, 1);\n  }\n  get(obIndex) {\n    return this.observers[obIndex];\n  }\n  clear() {\n    this.observers = [];\n  }\n  count() {\n    return this.observers.length;\n  }\n  getList() {\n    return this.observers;\n  }\n}\n\n// 观察者， 提供了一个 update 接口\nclass Observer {\n  constructor (cb) {\n    this.cb = cb;\n  }\n  update() {\n    this.cb();\n  }\n}\n\n// 观察者对象\nclass Subject {\n  constructor() {\n    // 维护一组观察者\n    this.observerList = new ObserverList();\n  }\n  add(ob) {\n    this.observerList.append(ob);\n  }\n  notify() {\n    for (let ob of this.observerList.getList()) {\n      ob.update();\n    }\n  }\n  remove(obIndex) {\n    this.observerList.delete(obIndex);\n  }\n}\n\nconst subject = new Subject();\nconst observer = new Observer(action);\n\nconst action = () => {\n  console.log('hello world');\n};\n\n// 注册观察者\nsubject.add(observer);\n\n// 通知与之依赖的观察者动作\nsubject.notify();\n\n```\n\n上面的观察者模式， 其实可以使用下面的图进行说明：\n\n{% asset_img observer.jpg %}\n\n在上面的代码中， 我们可以发现， 观察者和观察者对象之间是松耦合的， 观察者对象维护者一组观察者， 观察者对象需要做的是通知相关观察者进行更新。\n\n### 和发布/订阅模式的区别\n\n上面的代码使用发布/订阅模式实现如下：\n\n```js\nclass EventMananger {\n  constructor() {\n    this.events = {};\n  }\n  publish(event) {\n    if (!this.events[event]) return false;\n    let eventCount = this.events[event].length;\n    while (eventCount--) {\n      this.events[event][eventCount]();\n    }\n  }\n  subscribe(event, fn) {\n    (this.events[event] || (this.events[event] = [])).push(fn);\n  }\n}\n\nconst mananger = new EventMananger();\n\nmananger.subscribe('action', action);\n\nmananger.publish('action');\n```\n\n两者区别：\n\n1. 对于观察者模式， 其订阅和发布消息是在同一个对象上面进行的（subject）， 对于发布订阅模式， 其角色有三种， 订阅者， 发布者 以及 中间存放方法的事件列表。发布者向事件列表中推送消息， 订阅者从事件列表中订阅消息， 并且当发布者推送消息的时候来触发订阅的事件。\n2. 发布订阅模式发布者和订阅者之间不存在耦合关系， 对于观察者模式， 观察者依赖观察对象， 这两者之间是松耦合关系\n3. 发布订阅模式应用于跨应用的情况下， 当多个应用之间进行通信的时候， 可以使用这种模式是实现通信， 对于 观察者模式， 主要应用于单个应用的情况。\n\n一些缺点：\n\n使用观察者模式存在着一些缺点：\n\n* 观察对象不知晓观察者的状态， 当某个观察者中包含有一些自增代码的时候， 调用 观察对象的 update 方法，可能会造成观察者状态的重复更新。\n\n### 两种方式在 vue 中的应用：\n\n在 vue 源码中的 `$emit`  `$on` 方法中使用了发布/订阅模式：`vm._events` 作为事件通道， 存放函数列表。\n\n`$on`\n\n订阅者\n\n```js\nVue.prototype.$on = function (event, fn) {\n  var vm = this;\n  if (Array.isArray(event)) {\n    for (var i = 0, l = event.length; i < l; i++) {\n      vm.$on(event[i], fn);\n    }\n  } else {\n    // 将相关函数存入到 vm._events 中\n    // vm._events 作为事件列表方法事件\n    (vm._events[event] || (vm._events[event] = [])).push(fn);\n    // optimize hook:event cost by using a boolean flag marked at registration\n    // instead of a hash lookup\n    if (hookRE.test(event)) {\n      vm._hasHookEvent = true;\n    }\n  }\n  return vm\n};\n```\n\n\n\n`$emit`\n\n发布者\n\n ```js\nVue.prototype.$emit = function (event) {\n  var vm = this;\n  {\n    var lowerCaseEvent = event.toLowerCase();\n    if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n      tip(\n        \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n        (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n        \"Note that HTML attributes are case-insensitive and you cannot use \" +\n        \"v-on to listen to camelCase events when using in-DOM templates. \" +\n        \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n      );\n    }\n  }\n  var cbs = vm._events[event];\n  if (cbs) {\n    cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n    var args = toArray(arguments, 1);\n    var info = \"event handler for \\\"\" + event + \"\\\"\";\n    // 触发相应的函数方法\n    for (var i = 0, l = cbs.length; i < l; i++) {\n      invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n    }\n  }\n  return vm\n};\n ```\n\n在 vue 的依赖收集过程中， 使用了观察者模式：\n\n{% asset_img  vue.png%}\n\n在 vue 源码中， 初始化data 的时候， vue 会通过一个 `defineReactive` 函数， 这个函数是实现当数据更新时相关依赖进行更新的关键， 这个函数里面对于数据的 `getter` 和 `setter` 函数内进行了一些处理， 当触发 `getter` 函数（读取）的时候会进行依赖收集， 当 触发 `setter` 函数（设置）的时候会通知相关依赖进行更新。\n\n具体代码如下：\n\n```js\nfunction defineReactive (obj, key, val, customSetter, shallow) {\n  // 这里的 new Dep() 是维护了一组观察者\n  // Dep 是观察者对象， 维护者一组观察者\n  var dep = new Dep();\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  // 使用 defineProperty  对于对象进行拦截处理\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      // 收集依赖\n      // traget 全局变量\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      //  通知依赖发生变化\n      dep.notify();\n    }\n  });\n}\n```\n\n这里 `dep` 是 用来维护者一组的观察者， 通过 `dep.depend` 方法收集到依赖， 然后通过 `dep.notify()` 来通知变动。\n\n具体到 `Dep` 的类：\n\n```js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    // 维护一组观察者 subs 内部存放了 Watcher 类的实例\n    this.subs = []\n  }\n\t// 新增观察者\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n  // 移除观察者\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n  // Dep.target 是一个 watcher 实例, 这里调用的 addDep 方法是调用在 watcher 上面的方法\n  // 在 watcher 方法上面的 addDep 方法也是调用了 addSub 方法\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n  // 用来通知这组观察者进行更新， 调用观察者中的 update 方法来更新\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    // 对于改观察者对象下面的每一个观察者都进行数据的更新处理\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\n注： `depend` 方法中的 `addDep` 方法引用的是 `Watcher` 实例上面的方法：\n\n```js\n/**\n * Add a dependency to this directive.\n */\naddDep (dep: Dep) {\n  const id = dep.id\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id)\n    this.newDeps.push(dep)\n    if (!this.depIds.has(id)) {\n      dep.addSub(this)\n    }\n  }\n}\n```\n\n这些观察者是 `Watcher` 的实例， `Watcher` 位于源码中的 `Watcher.js` 文件中， 一些更新观察者信息的方法作为实例方法。\n\n在 `Watcher` 的类中， 上面定义了`update` 的方法：\n\n```js\nupdate () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true\n  } else if (this.sync) {\n    // 执行run 函数\n    this.run()\n  } else {\n    queueWatcher(this)\n  }\n}\n\n/**\n   * Scheduler job interface.\n   * Will be called by the scheduler.\n   */\nrun () {\n  if (this.active) {\n    const value = this.get()\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      const oldValue = this.value\n      this.value = value\n      if (this.user) {\n        try {\n          // 执行 this.cb 回调\n          this.cb.call(this.vm, value, oldValue)\n        } catch (e) {\n          handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue)\n      }\n    }\n  }\n}\n```\n\n### tips\n\n1. 可以在数组中查找到对象， 或者说， js 的数组中存放的是对象的引用：\n\n   ```js\n   let a = {};\n   let arr = [{}, a];\n   arr.indexOf(a);\n   // 1 \n   ```\n","source":"_posts/设计模式：观察者模式.md","raw":"---\ntitle: 设计模式：观察者模式\ndate: 2019-04-14 17:10:27\ntags: 设计模式\ncategories: 设计模式\n---\n\n### 观察者模式\n\n使用观察者模式的一个常见的场景是： 一个观察对象需要通知一组相互独立的观察者发生变化， 并且这个观察对象和观察者之间是松耦合的关系。\n\n观察者模式是由观察者和观察对象组成的， 观察对象维护一组观察者，这组观察者依赖观察对象， 当观察对象的状态发生变化的时候， 会自动通知这组观察者发生动作。\n\n一个观察对象由属于自己的一组观察者， 观察对象的作用是注册， 删除观察者， 以及在合适的时机触发观察者。\n\n在其他书籍中对于观察者模式的一些定义如下：\n\n>\"One or more observers are interested in the state of a subject and register their interest with the subject by attaching themselves. When something changes in our subject that the observer may be interested in, a notify message is sent which calls the update method in each observer. When the observer is no longer interested in the subject's state, they can simply detach themselves.\"\n\n在观察者模式中， 存在下面四种组成部分：\n\n* 观察对象：维护一组观察者， 可以新增 / 删除观察者， 通知观察者发生变化的逻辑\n* 观察者： 提供一个当观察者对象状态发生变化的时候进行状态变化的一个接口\n* 观察对象实例： 当相关状态发生变化的时候通知观察者,\n* 观察者实例： 具体化一个数据改变的接口， 这个观察者实例是和观察对象相关联的\n\n下面是一个观察者模式的模型：\n\n```js\n// 一组观察者， 扩展了一些删除， 添加观察者的一些方法\nclass ObserverList {\n  constructor () {\n    this.observers = [];\n  }\n  append(ob) {\n    this.observers.push(ob);\n  }\n  delete(obIndex) {\n    this.observers.splice(obIndex, 1);\n  }\n  get(obIndex) {\n    return this.observers[obIndex];\n  }\n  clear() {\n    this.observers = [];\n  }\n  count() {\n    return this.observers.length;\n  }\n  getList() {\n    return this.observers;\n  }\n}\n\n// 观察者， 提供了一个 update 接口\nclass Observer {\n  constructor (cb) {\n    this.cb = cb;\n  }\n  update() {\n    this.cb();\n  }\n}\n\n// 观察者对象\nclass Subject {\n  constructor() {\n    // 维护一组观察者\n    this.observerList = new ObserverList();\n  }\n  add(ob) {\n    this.observerList.append(ob);\n  }\n  notify() {\n    for (let ob of this.observerList.getList()) {\n      ob.update();\n    }\n  }\n  remove(obIndex) {\n    this.observerList.delete(obIndex);\n  }\n}\n\nconst subject = new Subject();\nconst observer = new Observer(action);\n\nconst action = () => {\n  console.log('hello world');\n};\n\n// 注册观察者\nsubject.add(observer);\n\n// 通知与之依赖的观察者动作\nsubject.notify();\n\n```\n\n上面的观察者模式， 其实可以使用下面的图进行说明：\n\n{% asset_img observer.jpg %}\n\n在上面的代码中， 我们可以发现， 观察者和观察者对象之间是松耦合的， 观察者对象维护者一组观察者， 观察者对象需要做的是通知相关观察者进行更新。\n\n### 和发布/订阅模式的区别\n\n上面的代码使用发布/订阅模式实现如下：\n\n```js\nclass EventMananger {\n  constructor() {\n    this.events = {};\n  }\n  publish(event) {\n    if (!this.events[event]) return false;\n    let eventCount = this.events[event].length;\n    while (eventCount--) {\n      this.events[event][eventCount]();\n    }\n  }\n  subscribe(event, fn) {\n    (this.events[event] || (this.events[event] = [])).push(fn);\n  }\n}\n\nconst mananger = new EventMananger();\n\nmananger.subscribe('action', action);\n\nmananger.publish('action');\n```\n\n两者区别：\n\n1. 对于观察者模式， 其订阅和发布消息是在同一个对象上面进行的（subject）， 对于发布订阅模式， 其角色有三种， 订阅者， 发布者 以及 中间存放方法的事件列表。发布者向事件列表中推送消息， 订阅者从事件列表中订阅消息， 并且当发布者推送消息的时候来触发订阅的事件。\n2. 发布订阅模式发布者和订阅者之间不存在耦合关系， 对于观察者模式， 观察者依赖观察对象， 这两者之间是松耦合关系\n3. 发布订阅模式应用于跨应用的情况下， 当多个应用之间进行通信的时候， 可以使用这种模式是实现通信， 对于 观察者模式， 主要应用于单个应用的情况。\n\n一些缺点：\n\n使用观察者模式存在着一些缺点：\n\n* 观察对象不知晓观察者的状态， 当某个观察者中包含有一些自增代码的时候， 调用 观察对象的 update 方法，可能会造成观察者状态的重复更新。\n\n### 两种方式在 vue 中的应用：\n\n在 vue 源码中的 `$emit`  `$on` 方法中使用了发布/订阅模式：`vm._events` 作为事件通道， 存放函数列表。\n\n`$on`\n\n订阅者\n\n```js\nVue.prototype.$on = function (event, fn) {\n  var vm = this;\n  if (Array.isArray(event)) {\n    for (var i = 0, l = event.length; i < l; i++) {\n      vm.$on(event[i], fn);\n    }\n  } else {\n    // 将相关函数存入到 vm._events 中\n    // vm._events 作为事件列表方法事件\n    (vm._events[event] || (vm._events[event] = [])).push(fn);\n    // optimize hook:event cost by using a boolean flag marked at registration\n    // instead of a hash lookup\n    if (hookRE.test(event)) {\n      vm._hasHookEvent = true;\n    }\n  }\n  return vm\n};\n```\n\n\n\n`$emit`\n\n发布者\n\n ```js\nVue.prototype.$emit = function (event) {\n  var vm = this;\n  {\n    var lowerCaseEvent = event.toLowerCase();\n    if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n      tip(\n        \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n        (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n        \"Note that HTML attributes are case-insensitive and you cannot use \" +\n        \"v-on to listen to camelCase events when using in-DOM templates. \" +\n        \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n      );\n    }\n  }\n  var cbs = vm._events[event];\n  if (cbs) {\n    cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n    var args = toArray(arguments, 1);\n    var info = \"event handler for \\\"\" + event + \"\\\"\";\n    // 触发相应的函数方法\n    for (var i = 0, l = cbs.length; i < l; i++) {\n      invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n    }\n  }\n  return vm\n};\n ```\n\n在 vue 的依赖收集过程中， 使用了观察者模式：\n\n{% asset_img  vue.png%}\n\n在 vue 源码中， 初始化data 的时候， vue 会通过一个 `defineReactive` 函数， 这个函数是实现当数据更新时相关依赖进行更新的关键， 这个函数里面对于数据的 `getter` 和 `setter` 函数内进行了一些处理， 当触发 `getter` 函数（读取）的时候会进行依赖收集， 当 触发 `setter` 函数（设置）的时候会通知相关依赖进行更新。\n\n具体代码如下：\n\n```js\nfunction defineReactive (obj, key, val, customSetter, shallow) {\n  // 这里的 new Dep() 是维护了一组观察者\n  // Dep 是观察者对象， 维护者一组观察者\n  var dep = new Dep();\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  // 使用 defineProperty  对于对象进行拦截处理\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      // 收集依赖\n      // traget 全局变量\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      //  通知依赖发生变化\n      dep.notify();\n    }\n  });\n}\n```\n\n这里 `dep` 是 用来维护者一组的观察者， 通过 `dep.depend` 方法收集到依赖， 然后通过 `dep.notify()` 来通知变动。\n\n具体到 `Dep` 的类：\n\n```js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    // 维护一组观察者 subs 内部存放了 Watcher 类的实例\n    this.subs = []\n  }\n\t// 新增观察者\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n  // 移除观察者\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n  // Dep.target 是一个 watcher 实例, 这里调用的 addDep 方法是调用在 watcher 上面的方法\n  // 在 watcher 方法上面的 addDep 方法也是调用了 addSub 方法\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n  // 用来通知这组观察者进行更新， 调用观察者中的 update 方法来更新\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    // 对于改观察者对象下面的每一个观察者都进行数据的更新处理\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n```\n\n注： `depend` 方法中的 `addDep` 方法引用的是 `Watcher` 实例上面的方法：\n\n```js\n/**\n * Add a dependency to this directive.\n */\naddDep (dep: Dep) {\n  const id = dep.id\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id)\n    this.newDeps.push(dep)\n    if (!this.depIds.has(id)) {\n      dep.addSub(this)\n    }\n  }\n}\n```\n\n这些观察者是 `Watcher` 的实例， `Watcher` 位于源码中的 `Watcher.js` 文件中， 一些更新观察者信息的方法作为实例方法。\n\n在 `Watcher` 的类中， 上面定义了`update` 的方法：\n\n```js\nupdate () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true\n  } else if (this.sync) {\n    // 执行run 函数\n    this.run()\n  } else {\n    queueWatcher(this)\n  }\n}\n\n/**\n   * Scheduler job interface.\n   * Will be called by the scheduler.\n   */\nrun () {\n  if (this.active) {\n    const value = this.get()\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      const oldValue = this.value\n      this.value = value\n      if (this.user) {\n        try {\n          // 执行 this.cb 回调\n          this.cb.call(this.vm, value, oldValue)\n        } catch (e) {\n          handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue)\n      }\n    }\n  }\n}\n```\n\n### tips\n\n1. 可以在数组中查找到对象， 或者说， js 的数组中存放的是对象的引用：\n\n   ```js\n   let a = {};\n   let arr = [{}, a];\n   arr.indexOf(a);\n   // 1 \n   ```\n","slug":"设计模式：观察者模式","published":1,"updated":"2020-09-14T06:36:26.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9s0072i2osh6b2fem0","content":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>使用观察者模式的一个常见的场景是： 一个观察对象需要通知一组相互独立的观察者发生变化， 并且这个观察对象和观察者之间是松耦合的关系。</p>\n<p>观察者模式是由观察者和观察对象组成的， 观察对象维护一组观察者，这组观察者依赖观察对象， 当观察对象的状态发生变化的时候， 会自动通知这组观察者发生动作。</p>\n<p>一个观察对象由属于自己的一组观察者， 观察对象的作用是注册， 删除观察者， 以及在合适的时机触发观察者。</p>\n<p>在其他书籍中对于观察者模式的一些定义如下：</p>\n<blockquote>\n<p>“One or more observers are interested in the state of a subject and register their interest with the subject by attaching themselves. When something changes in our subject that the observer may be interested in, a notify message is sent which calls the update method in each observer. When the observer is no longer interested in the subject’s state, they can simply detach themselves.”</p>\n</blockquote>\n<p>在观察者模式中， 存在下面四种组成部分：</p>\n<ul>\n<li>观察对象：维护一组观察者， 可以新增 / 删除观察者， 通知观察者发生变化的逻辑</li>\n<li>观察者： 提供一个当观察者对象状态发生变化的时候进行状态变化的一个接口</li>\n<li>观察对象实例： 当相关状态发生变化的时候通知观察者,</li>\n<li>观察者实例： 具体化一个数据改变的接口， 这个观察者实例是和观察对象相关联的</li>\n</ul>\n<p>下面是一个观察者模式的模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一组观察者， 扩展了一些删除， 添加观察者的一些方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(ob) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(ob);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.splice(obIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers[obIndex];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  count() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getList() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者， 提供了一个 update 接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 维护一组观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = <span class=\"keyword\">new</span> ObserverList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(ob) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList.append(ob);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> ob <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observerList.getList()) &#123;</span><br><span class=\"line\">      ob.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList.delete(obIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> Observer(action);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册观察者</span></span><br><span class=\"line\">subject.add(observer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通知与之依赖的观察者动作</span></span><br><span class=\"line\">subject.notify();</span><br></pre></td></tr></table></figure>\n<p>上面的观察者模式， 其实可以使用下面的图进行说明：</p>\n<img src=\"/2019/04/14/设计模式：观察者模式/observer.jpg\">\n<p>在上面的代码中， 我们可以发现， 观察者和观察者对象之间是松耦合的， 观察者对象维护者一组观察者， 观察者对象需要做的是通知相关观察者进行更新。</p>\n<h3 id=\"和发布-订阅模式的区别\"><a href=\"#和发布-订阅模式的区别\" class=\"headerlink\" title=\"和发布/订阅模式的区别\"></a>和发布/订阅模式的区别</h3><p>上面的代码使用发布/订阅模式实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventMananger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  publish(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[event]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventCount = <span class=\"keyword\">this</span>.events[event].length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (eventCount--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[event][eventCount]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subscribe(event, fn) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.events[event] || (<span class=\"keyword\">this</span>.events[event] = [])).push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mananger = <span class=\"keyword\">new</span> EventMananger();</span><br><span class=\"line\"></span><br><span class=\"line\">mananger.subscribe(<span class=\"string\">'action'</span>, action);</span><br><span class=\"line\"></span><br><span class=\"line\">mananger.publish(<span class=\"string\">'action'</span>);</span><br></pre></td></tr></table></figure>\n<p>两者区别：</p>\n<ol>\n<li>对于观察者模式， 其订阅和发布消息是在同一个对象上面进行的（subject）， 对于发布订阅模式， 其角色有三种， 订阅者， 发布者 以及 中间存放方法的事件列表。发布者向事件列表中推送消息， 订阅者从事件列表中订阅消息， 并且当发布者推送消息的时候来触发订阅的事件。</li>\n<li>发布订阅模式发布者和订阅者之间不存在耦合关系， 对于观察者模式， 观察者依赖观察对象， 这两者之间是松耦合关系</li>\n<li>发布订阅模式应用于跨应用的情况下， 当多个应用之间进行通信的时候， 可以使用这种模式是实现通信， 对于 观察者模式， 主要应用于单个应用的情况。</li>\n</ol>\n<p>一些缺点：</p>\n<p>使用观察者模式存在着一些缺点：</p>\n<ul>\n<li>观察对象不知晓观察者的状态， 当某个观察者中包含有一些自增代码的时候， 调用 观察对象的 update 方法，可能会造成观察者状态的重复更新。</li>\n</ul>\n<h3 id=\"两种方式在-vue-中的应用：\"><a href=\"#两种方式在-vue-中的应用：\" class=\"headerlink\" title=\"两种方式在 vue 中的应用：\"></a>两种方式在 vue 中的应用：</h3><p>在 vue 源码中的 <code>$emit</code>  <code>$on</code> 方法中使用了发布/订阅模式：<code>vm._events</code> 作为事件通道， 存放函数列表。</p>\n<p><code>$on</code></p>\n<p>订阅者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(event)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = event.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      vm.$on(event[i], fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将相关函数存入到 vm._events 中</span></span><br><span class=\"line\">    <span class=\"comment\">// vm._events 作为事件列表方法事件</span></span><br><span class=\"line\">    (vm._events[event] || (vm._events[event] = [])).push(fn);</span><br><span class=\"line\">    <span class=\"comment\">// optimize hook:event cost by using a boolean flag marked at registration</span></span><br><span class=\"line\">    <span class=\"comment\">// instead of a hash lookup</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hookRE.test(event)) &#123;</span><br><span class=\"line\">      vm._hasHookEvent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>$emit</code></p>\n<p>发布者</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$emit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lowerCaseEvent = event.toLowerCase();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lowerCaseEvent !== event &amp;&amp; vm._events[lowerCaseEvent]) &#123;</span><br><span class=\"line\">      tip(</span><br><span class=\"line\">        <span class=\"string\">\"Event \\\"\"</span> + lowerCaseEvent + <span class=\"string\">\"\\\" is emitted in component \"</span> +</span><br><span class=\"line\">        (formatComponentName(vm)) + <span class=\"string\">\" but the handler is registered for \\\"\"</span> + event + <span class=\"string\">\"\\\". \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"Note that HTML attributes are case-insensitive and you cannot use \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"v-on to listen to camelCase events when using in-DOM templates. \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"You should probably use \\\"\"</span> + (hyphenate(event)) + <span class=\"string\">\"\\\" instead of \\\"\"</span> + event + <span class=\"string\">\"\\\".\"</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cbs = vm._events[event];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">    cbs = cbs.length &gt; <span class=\"number\">1</span> ? toArray(cbs) : cbs;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = <span class=\"string\">\"event handler for \\\"\"</span> + event + <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 触发相应的函数方法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = cbs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      invokeWithErrorHandling(cbs[i], vm, args, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 vue 的依赖收集过程中， 使用了观察者模式：</p>\n<img src=\"/2019/04/14/设计模式：观察者模式/vue.png\">\n<p>在 vue 源码中， 初始化data 的时候， vue 会通过一个 <code>defineReactive</code> 函数， 这个函数是实现当数据更新时相关依赖进行更新的关键， 这个函数里面对于数据的 <code>getter</code> 和 <code>setter</code> 函数内进行了一些处理， 当触发 <code>getter</code> 函数（读取）的时候会进行依赖收集， 当 触发 <code>setter</code> 函数（设置）的时候会通知相关依赖进行更新。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\">obj, key, val, customSetter, shallow</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的 new Dep() 是维护了一组观察者</span></span><br><span class=\"line\">  <span class=\"comment\">// Dep 是观察者对象， 维护者一组观察者</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> property = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.configurable === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> getter = property &amp;&amp; property.get;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> setter = property &amp;&amp; property.set;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 defineProperty  对于对象进行拦截处理</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">      <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">      <span class=\"comment\">// traget 全局变量</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (customSetter) &#123;</span><br><span class=\"line\">        customSetter();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class=\"line\">      <span class=\"comment\">//  通知依赖发生变化</span></span><br><span class=\"line\">      dep.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>dep</code> 是 用来维护者一组的观察者， 通过 <code>dep.depend</code> 方法收集到依赖， 然后通过 <code>dep.notify()</code> 来通知变动。</p>\n<p>具体到 <code>Dep</code> 的类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"comment\">// 维护一组观察者 subs 内部存放了 Watcher 类的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 新增观察者</span></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除观察者</span></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Dep.target 是一个 watcher 实例, 这里调用的 addDep 方法是调用在 watcher 上面的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 在 watcher 方法上面的 addDep 方法也是调用了 addSub 方法</span></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用来通知这组观察者进行更新， 调用观察者中的 update 方法来更新</span></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于改观察者对象下面的每一个观察者都进行数据的更新处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注： <code>depend</code> 方法中的 <code>addDep</code> 方法引用的是 <code>Watcher</code> 实例上面的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">addDep (dep: Dep) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些观察者是 <code>Watcher</code> 的实例， <code>Watcher</code> 位于源码中的 <code>Watcher.js</code> 文件中， 一些更新观察者信息的方法作为实例方法。</p>\n<p>在 <code>Watcher</code> 的类中， 上面定义了<code>update</code> 的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行run 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scheduler job interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called by the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">run () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">      <span class=\"comment\">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class=\"line\">      <span class=\"comment\">// when the value is the same, because the value may</span></span><br><span class=\"line\">      <span class=\"comment\">// have mutated.</span></span><br><span class=\"line\">      isObject(value) ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// set new value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 执行 this.cb 回调</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><ol>\n<li><p>可以在数组中查找到对象， 或者说， js 的数组中存放的是对象的引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [&#123;&#125;, a];</span><br><span class=\"line\">arr.indexOf(a);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>使用观察者模式的一个常见的场景是： 一个观察对象需要通知一组相互独立的观察者发生变化， 并且这个观察对象和观察者之间是松耦合的关系。</p>\n<p>观察者模式是由观察者和观察对象组成的， 观察对象维护一组观察者，这组观察者依赖观察对象， 当观察对象的状态发生变化的时候， 会自动通知这组观察者发生动作。</p>\n<p>一个观察对象由属于自己的一组观察者， 观察对象的作用是注册， 删除观察者， 以及在合适的时机触发观察者。</p>\n<p>在其他书籍中对于观察者模式的一些定义如下：</p>\n<blockquote>\n<p>“One or more observers are interested in the state of a subject and register their interest with the subject by attaching themselves. When something changes in our subject that the observer may be interested in, a notify message is sent which calls the update method in each observer. When the observer is no longer interested in the subject’s state, they can simply detach themselves.”</p>\n</blockquote>\n<p>在观察者模式中， 存在下面四种组成部分：</p>\n<ul>\n<li>观察对象：维护一组观察者， 可以新增 / 删除观察者， 通知观察者发生变化的逻辑</li>\n<li>观察者： 提供一个当观察者对象状态发生变化的时候进行状态变化的一个接口</li>\n<li>观察对象实例： 当相关状态发生变化的时候通知观察者,</li>\n<li>观察者实例： 具体化一个数据改变的接口， 这个观察者实例是和观察对象相关联的</li>\n</ul>\n<p>下面是一个观察者模式的模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一组观察者， 扩展了一些删除， 添加观察者的一些方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  append(ob) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.push(ob);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers.splice(obIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers[obIndex];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  count() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getList() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.observers;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者， 提供了一个 update 接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> (cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  update() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 观察者对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 维护一组观察者</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList = <span class=\"keyword\">new</span> ObserverList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add(ob) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList.append(ob);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> ob <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.observerList.getList()) &#123;</span><br><span class=\"line\">      ob.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  remove(obIndex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observerList.delete(obIndex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subject = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> Observer(action);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册观察者</span></span><br><span class=\"line\">subject.add(observer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通知与之依赖的观察者动作</span></span><br><span class=\"line\">subject.notify();</span><br></pre></td></tr></table></figure>\n<p>上面的观察者模式， 其实可以使用下面的图进行说明：</p>\n<img src=\"/2019/04/14/设计模式：观察者模式/observer.jpg\">\n<p>在上面的代码中， 我们可以发现， 观察者和观察者对象之间是松耦合的， 观察者对象维护者一组观察者， 观察者对象需要做的是通知相关观察者进行更新。</p>\n<h3 id=\"和发布-订阅模式的区别\"><a href=\"#和发布-订阅模式的区别\" class=\"headerlink\" title=\"和发布/订阅模式的区别\"></a>和发布/订阅模式的区别</h3><p>上面的代码使用发布/订阅模式实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventMananger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  publish(event) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.events[event]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> eventCount = <span class=\"keyword\">this</span>.events[event].length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (eventCount--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.events[event][eventCount]();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  subscribe(event, fn) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.events[event] || (<span class=\"keyword\">this</span>.events[event] = [])).push(fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mananger = <span class=\"keyword\">new</span> EventMananger();</span><br><span class=\"line\"></span><br><span class=\"line\">mananger.subscribe(<span class=\"string\">'action'</span>, action);</span><br><span class=\"line\"></span><br><span class=\"line\">mananger.publish(<span class=\"string\">'action'</span>);</span><br></pre></td></tr></table></figure>\n<p>两者区别：</p>\n<ol>\n<li>对于观察者模式， 其订阅和发布消息是在同一个对象上面进行的（subject）， 对于发布订阅模式， 其角色有三种， 订阅者， 发布者 以及 中间存放方法的事件列表。发布者向事件列表中推送消息， 订阅者从事件列表中订阅消息， 并且当发布者推送消息的时候来触发订阅的事件。</li>\n<li>发布订阅模式发布者和订阅者之间不存在耦合关系， 对于观察者模式， 观察者依赖观察对象， 这两者之间是松耦合关系</li>\n<li>发布订阅模式应用于跨应用的情况下， 当多个应用之间进行通信的时候， 可以使用这种模式是实现通信， 对于 观察者模式， 主要应用于单个应用的情况。</li>\n</ol>\n<p>一些缺点：</p>\n<p>使用观察者模式存在着一些缺点：</p>\n<ul>\n<li>观察对象不知晓观察者的状态， 当某个观察者中包含有一些自增代码的时候， 调用 观察对象的 update 方法，可能会造成观察者状态的重复更新。</li>\n</ul>\n<h3 id=\"两种方式在-vue-中的应用：\"><a href=\"#两种方式在-vue-中的应用：\" class=\"headerlink\" title=\"两种方式在 vue 中的应用：\"></a>两种方式在 vue 中的应用：</h3><p>在 vue 源码中的 <code>$emit</code>  <code>$on</code> 方法中使用了发布/订阅模式：<code>vm._events</code> 作为事件通道， 存放函数列表。</p>\n<p><code>$on</code></p>\n<p>订阅者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(event)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = event.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      vm.$on(event[i], fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将相关函数存入到 vm._events 中</span></span><br><span class=\"line\">    <span class=\"comment\">// vm._events 作为事件列表方法事件</span></span><br><span class=\"line\">    (vm._events[event] || (vm._events[event] = [])).push(fn);</span><br><span class=\"line\">    <span class=\"comment\">// optimize hook:event cost by using a boolean flag marked at registration</span></span><br><span class=\"line\">    <span class=\"comment\">// instead of a hash lookup</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hookRE.test(event)) &#123;</span><br><span class=\"line\">      vm._hasHookEvent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>$emit</code></p>\n<p>发布者</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$emit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lowerCaseEvent = event.toLowerCase();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lowerCaseEvent !== event &amp;&amp; vm._events[lowerCaseEvent]) &#123;</span><br><span class=\"line\">      tip(</span><br><span class=\"line\">        <span class=\"string\">\"Event \\\"\"</span> + lowerCaseEvent + <span class=\"string\">\"\\\" is emitted in component \"</span> +</span><br><span class=\"line\">        (formatComponentName(vm)) + <span class=\"string\">\" but the handler is registered for \\\"\"</span> + event + <span class=\"string\">\"\\\". \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"Note that HTML attributes are case-insensitive and you cannot use \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"v-on to listen to camelCase events when using in-DOM templates. \"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"You should probably use \\\"\"</span> + (hyphenate(event)) + <span class=\"string\">\"\\\" instead of \\\"\"</span> + event + <span class=\"string\">\"\\\".\"</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cbs = vm._events[event];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cbs) &#123;</span><br><span class=\"line\">    cbs = cbs.length &gt; <span class=\"number\">1</span> ? toArray(cbs) : cbs;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> info = <span class=\"string\">\"event handler for \\\"\"</span> + event + <span class=\"string\">\"\\\"\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 触发相应的函数方法</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = cbs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      invokeWithErrorHandling(cbs[i], vm, args, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 vue 的依赖收集过程中， 使用了观察者模式：</p>\n<img src=\"/2019/04/14/设计模式：观察者模式/vue.png\">\n<p>在 vue 源码中， 初始化data 的时候， vue 会通过一个 <code>defineReactive</code> 函数， 这个函数是实现当数据更新时相关依赖进行更新的关键， 这个函数里面对于数据的 <code>getter</code> 和 <code>setter</code> 函数内进行了一些处理， 当触发 <code>getter</code> 函数（读取）的时候会进行依赖收集， 当 触发 <code>setter</code> 函数（设置）的时候会通知相关依赖进行更新。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span> (<span class=\"params\">obj, key, val, customSetter, shallow</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的 new Dep() 是维护了一组观察者</span></span><br><span class=\"line\">  <span class=\"comment\">// Dep 是观察者对象， 维护者一组观察者</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> property = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.configurable === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> getter = property &amp;&amp; property.get;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> setter = property &amp;&amp; property.set;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"built_in\">arguments</span>.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 defineProperty  对于对象进行拦截处理</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function reactiveGetter () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">      <span class=\"comment\">// 收集依赖</span></span><br><span class=\"line\">      <span class=\"comment\">// traget 全局变量</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">            dependArray(value);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-disable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/* eslint-enable no-self-compare */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (customSetter) &#123;</span><br><span class=\"line\">        customSetter();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// #7981: for accessor properties without setter</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) &#123; <span class=\"keyword\">return</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class=\"line\">      <span class=\"comment\">//  通知依赖发生变化</span></span><br><span class=\"line\">      dep.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>dep</code> 是 用来维护者一组的观察者， 通过 <code>dep.depend</code> 方法收集到依赖， 然后通过 <code>dep.notify()</code> 来通知变动。</p>\n<p>具体到 <code>Dep</code> 的类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: ?Watcher;</span><br><span class=\"line\">  id: number;</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"comment\">// 维护一组观察者 subs 内部存放了 Watcher 类的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 新增观察者</span></span><br><span class=\"line\">  addSub (sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除观察者</span></span><br><span class=\"line\">  removeSub (sub: Watcher) &#123;</span><br><span class=\"line\">    remove(<span class=\"keyword\">this</span>.subs, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Dep.target 是一个 watcher 实例, 这里调用的 addDep 方法是调用在 watcher 上面的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 在 watcher 方法上面的 addDep 方法也是调用了 addSub 方法</span></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">      Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用来通知这组观察者进行更新， 调用观察者中的 update 方法来更新</span></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stabilize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// subs aren't sorted in scheduler if not running async</span></span><br><span class=\"line\">      <span class=\"comment\">// we need to sort them now to make sure they fire in correct</span></span><br><span class=\"line\">      <span class=\"comment\">// order</span></span><br><span class=\"line\">      subs.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于改观察者对象下面的每一个观察者都进行数据的更新处理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].update()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注： <code>depend</code> 方法中的 <code>addDep</code> 方法引用的是 <code>Watcher</code> 实例上面的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Add a dependency to this directive.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">addDep (dep: Dep) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = dep.id</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDepIds.add(id)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.newDeps.push(dep)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这些观察者是 <code>Watcher</code> 的实例， <code>Watcher</code> 位于源码中的 <code>Watcher.js</code> 文件中， 一些更新观察者信息的方法作为实例方法。</p>\n<p>在 <code>Watcher</code> 的类中， 上面定义了<code>update</code> 的方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.lazy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dirty = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行run 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    queueWatcher(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scheduler job interface.</span></span><br><span class=\"line\"><span class=\"comment\">   * Will be called by the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">run () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.active) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"keyword\">this</span>.value ||</span><br><span class=\"line\">      <span class=\"comment\">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class=\"line\">      <span class=\"comment\">// when the value is the same, because the value may</span></span><br><span class=\"line\">      <span class=\"comment\">// have mutated.</span></span><br><span class=\"line\">      isObject(value) ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.deep</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// set new value</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 执行 this.cb 回调</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          handleError(e, <span class=\"keyword\">this</span>.vm, <span class=\"string\">`callback for watcher \"<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.expression&#125;</span>\"`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><ol>\n<li><p>可以在数组中查找到对象， 或者说， js 的数组中存放的是对象的引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [&#123;&#125;, a];</span><br><span class=\"line\">arr.indexOf(a);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"阅读函数式编程（一）","date":"2018-03-20T15:50:22.000Z","_content":"\n### 函数式编程的定义\n\n在 `javascript` 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。\n\n> 在 js 中， 存在下面几种内置对象：\n>\n> 1. `String` \n> 2. `Number`\n> 3. `Boolean`\n> 4. `Object`\n> 5. `Function`\n> 6. `Array`\n> 7. `Date`\n> 8. `Regexp`\n> 9. `Error`\n>\n> 这几种内置对象相当于语言中的类，可以通过使用 `new` 操作符进行调用。\n\n使用函数式编程的目的在于：\n\n>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组\n>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。\n\n### 使用纯函数\n\n什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：\n\n>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。\n\n对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：\n\n1. 外部状态发生了改变\n2. 读取文件\n3. console.log 数据\n4. 发送请求\n\n总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。\n\n***\n\n这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：\n\n> 函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出\n\n因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。\n\n###  使用纯函数的好处\n\n1. 可缓存性\n\n   简单的一段代码如下：\n\n   ```javascript\n   let squareNumber = memorize(function (x) return { x*x });\n   squareNumber(4) => 16;\n   squareNumber(4) => 16; // 从缓存中获取到的值\n\n   // memorize 函数如下\n   function memorize(f) {\n       let cacheData = {};\n       return function() {\n           let arg = JSON.stringify(arguments);\n           cacheData[arg] = cacheData[arg] || f.apply(f, arguments);\n           return cacheData[arg];\n       }\n   }\n   ```\n\n   上面的这种纯函数的可缓存性类似于在 `js` 中的闭包的效果， 可以将值保存在函数内部。\n\n2. 依赖明确， 易于调试\n\n   对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。\n\n3. 引用透明性\n\n   > 如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。\n\n例如对于类似下面这类的代码：\n\n```javascript\nfunction isNewUser() {\n    // 判断是否是新用户\n}\nfunction loginIn(user) {\n    // 用户登录\n}\nfunction register(user) {\n    // 注册新用户\n}\nfunction start(user) {\n    if (isNewUser(user)) {\n       register(user);\n       return;\n    }\n    loginIn(user);\n}\n```\n\n在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。\n\n","source":"_posts/阅读函数式编程（一）.md","raw":"---\ntitle: 阅读函数式编程（一）\ndate: 2018-03-20 23:50:22\ntags: 函数式编程\ncategories: 读书笔记\n---\n\n### 函数式编程的定义\n\n在 `javascript` 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。\n\n> 在 js 中， 存在下面几种内置对象：\n>\n> 1. `String` \n> 2. `Number`\n> 3. `Boolean`\n> 4. `Object`\n> 5. `Function`\n> 6. `Array`\n> 7. `Date`\n> 8. `Regexp`\n> 9. `Error`\n>\n> 这几种内置对象相当于语言中的类，可以通过使用 `new` 操作符进行调用。\n\n使用函数式编程的目的在于：\n\n>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组\n>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。\n\n### 使用纯函数\n\n什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：\n\n>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。\n\n对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：\n\n1. 外部状态发生了改变\n2. 读取文件\n3. console.log 数据\n4. 发送请求\n\n总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。\n\n***\n\n这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：\n\n> 函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出\n\n因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。\n\n###  使用纯函数的好处\n\n1. 可缓存性\n\n   简单的一段代码如下：\n\n   ```javascript\n   let squareNumber = memorize(function (x) return { x*x });\n   squareNumber(4) => 16;\n   squareNumber(4) => 16; // 从缓存中获取到的值\n\n   // memorize 函数如下\n   function memorize(f) {\n       let cacheData = {};\n       return function() {\n           let arg = JSON.stringify(arguments);\n           cacheData[arg] = cacheData[arg] || f.apply(f, arguments);\n           return cacheData[arg];\n       }\n   }\n   ```\n\n   上面的这种纯函数的可缓存性类似于在 `js` 中的闭包的效果， 可以将值保存在函数内部。\n\n2. 依赖明确， 易于调试\n\n   对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。\n\n3. 引用透明性\n\n   > 如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。\n\n例如对于类似下面这类的代码：\n\n```javascript\nfunction isNewUser() {\n    // 判断是否是新用户\n}\nfunction loginIn(user) {\n    // 用户登录\n}\nfunction register(user) {\n    // 注册新用户\n}\nfunction start(user) {\n    if (isNewUser(user)) {\n       register(user);\n       return;\n    }\n    loginIn(user);\n}\n```\n\n在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。\n\n","slug":"阅读函数式编程（一）","published":1,"updated":"2020-09-14T06:36:26.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9t0075i2osklzgb7uc","content":"<h3 id=\"函数式编程的定义\"><a href=\"#函数式编程的定义\" class=\"headerlink\" title=\"函数式编程的定义\"></a>函数式编程的定义</h3><p>在 <code>javascript</code> 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。</p>\n<blockquote>\n<p>在 js 中， 存在下面几种内置对象：</p>\n<ol>\n<li><code>String</code> </li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Object</code></li>\n<li><code>Function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>Regexp</code></li>\n<li><code>Error</code></li>\n</ol>\n<p>这几种内置对象相当于语言中的类，可以通过使用 <code>new</code> 操作符进行调用。</p>\n</blockquote>\n<p>使用函数式编程的目的在于：</p>\n<blockquote>\n<p>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组<br>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。</p>\n</blockquote>\n<h3 id=\"使用纯函数\"><a href=\"#使用纯函数\" class=\"headerlink\" title=\"使用纯函数\"></a>使用纯函数</h3><p>什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：</p>\n<blockquote>\n<p>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。</p>\n</blockquote>\n<p>对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：</p>\n<ol>\n<li>外部状态发生了改变</li>\n<li>读取文件</li>\n<li>console.log 数据</li>\n<li>发送请求</li>\n</ol>\n<p>总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。</p>\n<hr>\n<p>这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：</p>\n<blockquote>\n<p>函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出</p>\n</blockquote>\n<p>因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。</p>\n<h3 id=\"使用纯函数的好处\"><a href=\"#使用纯函数的好处\" class=\"headerlink\" title=\"使用纯函数的好处\"></a>使用纯函数的好处</h3><ol>\n<li><p>可缓存性</p>\n<p>简单的一段代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> squareNumber = memorize(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) <span class=\"title\">return</span> </span>&#123; x*x &#125;);</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>; <span class=\"comment\">// 从缓存中获取到的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// memorize 函数如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cacheData = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arg = <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        cacheData[arg] = cacheData[arg] || f.apply(f, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这种纯函数的可缓存性类似于在 <code>js</code> 中的闭包的效果， 可以将值保存在函数内部。</p>\n</li>\n<li><p>依赖明确， 易于调试</p>\n<p>对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。</p>\n</li>\n<li><p>引用透明性</p>\n<blockquote>\n<p>如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。</p>\n</blockquote>\n</li>\n</ol>\n<p>例如对于类似下面这类的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNewUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginIn</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNewUser(user)) &#123;</span><br><span class=\"line\">       register(user);</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loginIn(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数式编程的定义\"><a href=\"#函数式编程的定义\" class=\"headerlink\" title=\"函数式编程的定义\"></a>函数式编程的定义</h3><p>在 <code>javascript</code> 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。</p>\n<blockquote>\n<p>在 js 中， 存在下面几种内置对象：</p>\n<ol>\n<li><code>String</code> </li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Object</code></li>\n<li><code>Function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>Regexp</code></li>\n<li><code>Error</code></li>\n</ol>\n<p>这几种内置对象相当于语言中的类，可以通过使用 <code>new</code> 操作符进行调用。</p>\n</blockquote>\n<p>使用函数式编程的目的在于：</p>\n<blockquote>\n<p>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组<br>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。</p>\n</blockquote>\n<h3 id=\"使用纯函数\"><a href=\"#使用纯函数\" class=\"headerlink\" title=\"使用纯函数\"></a>使用纯函数</h3><p>什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：</p>\n<blockquote>\n<p>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。</p>\n</blockquote>\n<p>对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：</p>\n<ol>\n<li>外部状态发生了改变</li>\n<li>读取文件</li>\n<li>console.log 数据</li>\n<li>发送请求</li>\n</ol>\n<p>总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。</p>\n<hr>\n<p>这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：</p>\n<blockquote>\n<p>函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出</p>\n</blockquote>\n<p>因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。</p>\n<h3 id=\"使用纯函数的好处\"><a href=\"#使用纯函数的好处\" class=\"headerlink\" title=\"使用纯函数的好处\"></a>使用纯函数的好处</h3><ol>\n<li><p>可缓存性</p>\n<p>简单的一段代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> squareNumber = memorize(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) <span class=\"title\">return</span> </span>&#123; x*x &#125;);</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>; <span class=\"comment\">// 从缓存中获取到的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// memorize 函数如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cacheData = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arg = <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        cacheData[arg] = cacheData[arg] || f.apply(f, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这种纯函数的可缓存性类似于在 <code>js</code> 中的闭包的效果， 可以将值保存在函数内部。</p>\n</li>\n<li><p>依赖明确， 易于调试</p>\n<p>对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。</p>\n</li>\n<li><p>引用透明性</p>\n<blockquote>\n<p>如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。</p>\n</blockquote>\n</li>\n</ol>\n<p>例如对于类似下面这类的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNewUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginIn</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNewUser(user)) &#123;</span><br><span class=\"line\">       register(user);</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loginIn(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。</p>\n"},{"title":"详解js中的线程，进程, eventLoop","date":"2018-06-20T16:08:26.000Z","_content":"\n存在下面一段代码：\n\n```javascript\nsetTimeout(function() { console.log(1) }, 0);\nnew Promise(function(resolve){\n    console.log(2);\n    for(var i = 0; i < 10000; i++) {\n        i === 9999 && resolve()\n    }\n    console.log(3);\n}).then(function () {\n    console.log(4);\n});\nconsole.log(5);\n```\n上面的代码的执行顺序， 依次输出内容分别是什么？\n正确的答案是： 2， 3， 5 ，4， 1；\n在上面的代码中， 执行的代码顺序如下：\n1. 执行 `promise` 实例内部的代码， 输出 `2`;\n2. 顺序执行后面的代码 `console.log(3)`, 输出 `3`;\n3. 执行 `console.log(5)`， 代码输出 `5`;\n4. 执行 `resolve` 函数， 执行 `resolve` 函数中的代码  `console.log(4)`, 输出 `4`;\n5. 最后执行 `setTimeout` 中的代码， 代码执行 `console.log(1)` ， 输出 `1`;\n  为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  \n\n\n###  js 中的线程\n\n在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。这些任务被放在一个任务队列中等待执行。\n\n在浏览器中， 包括下面这些线程：\n\n- js 引擎线程（例如 v8 引擎）\n- UI 渲染线程\n- 浏览器事件触发线程\n- 定时触发器线程\n- http 请求线程\n\n\n\n**这些线程的作用分别是这样的：**\n- UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。\n\n- js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理\n\n- 浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。\n\n- 定时触发器线程用于对于 `setTimeout` 或者 `setInterval` 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。\n\n  > 这里也就是说有个常见的问题： setTimeout(() => {}, 0);回调是立即执行的吗？并不是， 因为， 需要js 引擎执行完主线程上面的任务之后， 才会执行 任务列表中的任务。\n\n- http 请求线程， ajax 是委托给浏览器新开一个 http 线程\n\n在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。\n\n### `setTimeout`\n`setTimeout` 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 `setTimeout` 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：\n\n有如下代码：\n```javascript\nsetTimeout(function () { console.log(2) }, 0);\nconsole.log(1);\n```\n执行结果： 1， 2\n\n上面 `setTimeout` 中的函数会等到 `console.log(1)` 执行完成之后执行结果。\n\n### js 中的事件运行机制\n\n我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：\n\n* js 中分为同步任务和异步任务\n* 同步任务都是在主线程上面执行， 形成一个执行栈\n* 在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件\n* 当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  \n\n事件运行机制的详细图解如下：\n\n![img](https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800)\n\n### js 中的 `macrotask` 与 `microtask`\n\n在 js 中， 存在两种任务类型： `macrotask`(宏任务) 和 `microtash` (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。\n\n* `macrotask`: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，\n\n  ```\n  task ---> 渲染 ---> task\n  ```\n\n* `microtask`微任务会在宏任务执行完毕之后， 进行渲染之前执行  \n\n`macrotask` 与 `microtask` 中分别包含的几种任务类型：\n\n* `macrotask` : 代码块， `setTimeout`, `setInterval` 等\n* `microtask`: `Promise`  \n\n\n\n### 参考链接\n\n[从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://funteas.com/topic/5a64e9482630e6f31583701d)\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)","source":"_posts/详解js中的线程，进程.md","raw":"---\ntitle: 详解js中的线程，进程, eventLoop\ndate: 2018-06-21 00:08:26\ntags: js运行机制，线程\ncategories: js理论基础\n---\n\n存在下面一段代码：\n\n```javascript\nsetTimeout(function() { console.log(1) }, 0);\nnew Promise(function(resolve){\n    console.log(2);\n    for(var i = 0; i < 10000; i++) {\n        i === 9999 && resolve()\n    }\n    console.log(3);\n}).then(function () {\n    console.log(4);\n});\nconsole.log(5);\n```\n上面的代码的执行顺序， 依次输出内容分别是什么？\n正确的答案是： 2， 3， 5 ，4， 1；\n在上面的代码中， 执行的代码顺序如下：\n1. 执行 `promise` 实例内部的代码， 输出 `2`;\n2. 顺序执行后面的代码 `console.log(3)`, 输出 `3`;\n3. 执行 `console.log(5)`， 代码输出 `5`;\n4. 执行 `resolve` 函数， 执行 `resolve` 函数中的代码  `console.log(4)`, 输出 `4`;\n5. 最后执行 `setTimeout` 中的代码， 代码执行 `console.log(1)` ， 输出 `1`;\n  为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  \n\n\n###  js 中的线程\n\n在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。这些任务被放在一个任务队列中等待执行。\n\n在浏览器中， 包括下面这些线程：\n\n- js 引擎线程（例如 v8 引擎）\n- UI 渲染线程\n- 浏览器事件触发线程\n- 定时触发器线程\n- http 请求线程\n\n\n\n**这些线程的作用分别是这样的：**\n- UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。\n\n- js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理\n\n- 浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。\n\n- 定时触发器线程用于对于 `setTimeout` 或者 `setInterval` 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。\n\n  > 这里也就是说有个常见的问题： setTimeout(() => {}, 0);回调是立即执行的吗？并不是， 因为， 需要js 引擎执行完主线程上面的任务之后， 才会执行 任务列表中的任务。\n\n- http 请求线程， ajax 是委托给浏览器新开一个 http 线程\n\n在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。\n\n### `setTimeout`\n`setTimeout` 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 `setTimeout` 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：\n\n有如下代码：\n```javascript\nsetTimeout(function () { console.log(2) }, 0);\nconsole.log(1);\n```\n执行结果： 1， 2\n\n上面 `setTimeout` 中的函数会等到 `console.log(1)` 执行完成之后执行结果。\n\n### js 中的事件运行机制\n\n我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：\n\n* js 中分为同步任务和异步任务\n* 同步任务都是在主线程上面执行， 形成一个执行栈\n* 在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件\n* 当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  \n\n事件运行机制的详细图解如下：\n\n![img](https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800)\n\n### js 中的 `macrotask` 与 `microtask`\n\n在 js 中， 存在两种任务类型： `macrotask`(宏任务) 和 `microtash` (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。\n\n* `macrotask`: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，\n\n  ```\n  task ---> 渲染 ---> task\n  ```\n\n* `microtask`微任务会在宏任务执行完毕之后， 进行渲染之前执行  \n\n`macrotask` 与 `microtask` 中分别包含的几种任务类型：\n\n* `macrotask` : 代码块， `setTimeout`, `setInterval` 等\n* `microtask`: `Promise`  \n\n\n\n### 参考链接\n\n[从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://funteas.com/topic/5a64e9482630e6f31583701d)\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)","slug":"详解js中的线程，进程","published":1,"updated":"2020-09-14T06:36:26.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9v0079i2osw0hc49c0","content":"<p>存在下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        i === <span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码的执行顺序， 依次输出内容分别是什么？<br>正确的答案是： 2， 3， 5 ，4， 1；<br>在上面的代码中， 执行的代码顺序如下：</p>\n<ol>\n<li>执行 <code>promise</code> 实例内部的代码， 输出 <code>2</code>;</li>\n<li>顺序执行后面的代码 <code>console.log(3)</code>, 输出 <code>3</code>;</li>\n<li>执行 <code>console.log(5)</code>， 代码输出 <code>5</code>;</li>\n<li>执行 <code>resolve</code> 函数， 执行 <code>resolve</code> 函数中的代码  <code>console.log(4)</code>, 输出 <code>4</code>;</li>\n<li>最后执行 <code>setTimeout</code> 中的代码， 代码执行 <code>console.log(1)</code> ， 输出 <code>1</code>;<br>为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  </li>\n</ol>\n<h3 id=\"js-中的线程\"><a href=\"#js-中的线程\" class=\"headerlink\" title=\"js 中的线程\"></a>js 中的线程</h3><p>在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。这些任务被放在一个任务队列中等待执行。</p>\n<p>在浏览器中， 包括下面这些线程：</p>\n<ul>\n<li>js 引擎线程（例如 v8 引擎）</li>\n<li>UI 渲染线程</li>\n<li>浏览器事件触发线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p><strong>这些线程的作用分别是这样的：</strong></p>\n<ul>\n<li><p>UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。</p>\n</li>\n<li><p>js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理</p>\n</li>\n<li><p>浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。</p>\n</li>\n<li><p>定时触发器线程用于对于 <code>setTimeout</code> 或者 <code>setInterval</code> 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。</p>\n<blockquote>\n<p>这里也就是说有个常见的问题： setTimeout(() =&gt; {}, 0);回调是立即执行的吗？并不是， 因为， 需要js 引擎执行完主线程上面的任务之后， 才会执行 任务列表中的任务。</p>\n</blockquote>\n</li>\n<li><p>http 请求线程， ajax 是委托给浏览器新开一个 http 线程</p>\n</li>\n</ul>\n<p>在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。</p>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a><code>setTimeout</code></h3><p><code>setTimeout</code> 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 <code>setTimeout</code> 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：</p>\n<p>有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果： 1， 2</p>\n<p>上面 <code>setTimeout</code> 中的函数会等到 <code>console.log(1)</code> 执行完成之后执行结果。</p>\n<h3 id=\"js-中的事件运行机制\"><a href=\"#js-中的事件运行机制\" class=\"headerlink\" title=\"js 中的事件运行机制\"></a>js 中的事件运行机制</h3><p>我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：</p>\n<ul>\n<li>js 中分为同步任务和异步任务</li>\n<li>同步任务都是在主线程上面执行， 形成一个执行栈</li>\n<li>在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件</li>\n<li>当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  </li>\n</ul>\n<p>事件运行机制的详细图解如下：</p>\n<p><img src=\"https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800\" alt=\"img\"></p>\n<h3 id=\"js-中的-macrotask-与-microtask\"><a href=\"#js-中的-macrotask-与-microtask\" class=\"headerlink\" title=\"js 中的 macrotask 与 microtask\"></a>js 中的 <code>macrotask</code> 与 <code>microtask</code></h3><p>在 js 中， 存在两种任务类型： <code>macrotask</code>(宏任务) 和 <code>microtash</code> (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。</p>\n<ul>\n<li><p><code>macrotask</code>: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task ---&gt; 渲染 ---&gt; task</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>microtask</code>微任务会在宏任务执行完毕之后， 进行渲染之前执行  </p>\n</li>\n</ul>\n<p><code>macrotask</code> 与 <code>microtask</code> 中分别包含的几种任务类型：</p>\n<ul>\n<li><code>macrotask</code> : 代码块， <code>setTimeout</code>, <code>setInterval</code> 等</li>\n<li><code>microtask</code>: <code>Promise</code>  </li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://funteas.com/topic/5a64e9482630e6f31583701d\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>存在下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        i === <span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码的执行顺序， 依次输出内容分别是什么？<br>正确的答案是： 2， 3， 5 ，4， 1；<br>在上面的代码中， 执行的代码顺序如下：</p>\n<ol>\n<li>执行 <code>promise</code> 实例内部的代码， 输出 <code>2</code>;</li>\n<li>顺序执行后面的代码 <code>console.log(3)</code>, 输出 <code>3</code>;</li>\n<li>执行 <code>console.log(5)</code>， 代码输出 <code>5</code>;</li>\n<li>执行 <code>resolve</code> 函数， 执行 <code>resolve</code> 函数中的代码  <code>console.log(4)</code>, 输出 <code>4</code>;</li>\n<li>最后执行 <code>setTimeout</code> 中的代码， 代码执行 <code>console.log(1)</code> ， 输出 <code>1</code>;<br>为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  </li>\n</ol>\n<h3 id=\"js-中的线程\"><a href=\"#js-中的线程\" class=\"headerlink\" title=\"js 中的线程\"></a>js 中的线程</h3><p>在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。这些任务被放在一个任务队列中等待执行。</p>\n<p>在浏览器中， 包括下面这些线程：</p>\n<ul>\n<li>js 引擎线程（例如 v8 引擎）</li>\n<li>UI 渲染线程</li>\n<li>浏览器事件触发线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p><strong>这些线程的作用分别是这样的：</strong></p>\n<ul>\n<li><p>UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。</p>\n</li>\n<li><p>js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理</p>\n</li>\n<li><p>浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。</p>\n</li>\n<li><p>定时触发器线程用于对于 <code>setTimeout</code> 或者 <code>setInterval</code> 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。</p>\n<blockquote>\n<p>这里也就是说有个常见的问题： setTimeout(() =&gt; {}, 0);回调是立即执行的吗？并不是， 因为， 需要js 引擎执行完主线程上面的任务之后， 才会执行 任务列表中的任务。</p>\n</blockquote>\n</li>\n<li><p>http 请求线程， ajax 是委托给浏览器新开一个 http 线程</p>\n</li>\n</ul>\n<p>在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。</p>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a><code>setTimeout</code></h3><p><code>setTimeout</code> 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 <code>setTimeout</code> 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：</p>\n<p>有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果： 1， 2</p>\n<p>上面 <code>setTimeout</code> 中的函数会等到 <code>console.log(1)</code> 执行完成之后执行结果。</p>\n<h3 id=\"js-中的事件运行机制\"><a href=\"#js-中的事件运行机制\" class=\"headerlink\" title=\"js 中的事件运行机制\"></a>js 中的事件运行机制</h3><p>我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：</p>\n<ul>\n<li>js 中分为同步任务和异步任务</li>\n<li>同步任务都是在主线程上面执行， 形成一个执行栈</li>\n<li>在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件</li>\n<li>当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  </li>\n</ul>\n<p>事件运行机制的详细图解如下：</p>\n<p><img src=\"https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800\" alt=\"img\"></p>\n<h3 id=\"js-中的-macrotask-与-microtask\"><a href=\"#js-中的-macrotask-与-microtask\" class=\"headerlink\" title=\"js 中的 macrotask 与 microtask\"></a>js 中的 <code>macrotask</code> 与 <code>microtask</code></h3><p>在 js 中， 存在两种任务类型： <code>macrotask</code>(宏任务) 和 <code>microtash</code> (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。</p>\n<ul>\n<li><p><code>macrotask</code>: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task ---&gt; 渲染 ---&gt; task</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>microtask</code>微任务会在宏任务执行完毕之后， 进行渲染之前执行  </p>\n</li>\n</ul>\n<p><code>macrotask</code> 与 <code>microtask</code> 中分别包含的几种任务类型：</p>\n<ul>\n<li><code>macrotask</code> : 代码块， <code>setTimeout</code>, <code>setInterval</code> 等</li>\n<li><code>microtask</code>: <code>Promise</code>  </li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://funteas.com/topic/5a64e9482630e6f31583701d\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n"},{"title":"阅读函数式编程（二）","date":"2018-05-23T15:49:38.000Z","_content":"\n在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；\n\n### 基本概念\n\n在 `Wikipedia` 上面， 这样解释函数式编程：\n\n>- In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)\n>\n>- Functional Programming treats computation as the evaluation of mathematical functions.\n>\n>- Functional Programming avoids changing-state and mutable data.\n>\n>  ​\n>\n>- 在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。\n>\n>- 函数式编程将计算视作数学上函数的评估。\n>\n>- 函数编程中避免改变状态以及变化的数据。\n\n 函数式编程与命令式编程最大的区别在于：\n\n函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  \n\n这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；\n\n> 函数的定义：\n>\n> 设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===> B 称为从集合 A 到 B 的一个映射\n\n同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。\n\n例如：如果我们想要对于数组中的每一个数加1:\n\n```javascript\nconst arr = [1, 2, 3];\nfor (let index in arr) {\n  arr[index] += 1;\n}\nconsole.log(\"arr\", arr); // [2, 3, 4]\n```\n\n或者使用 `forEach`, `map` 中数组中定义的方法：\n\n```javascript\n// forEach\narr.forEach(item => item += 1);\n// map\nconst newArr = arr.map(item => item += 1);\n```\n\n***\n\n注意：使用 `map` 以及 `forEach` 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，\n\n使用 `map` 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 `forEach` 而言， 使用 `forEach` 不会改变原来的数组，返回值为 `undefined`。\n\n从函数式编程的角度而言，使用 `map` 更能体现函数式编程的特点： 不会产生副作用；\n\n***\n\n在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。\n\n### 几大特性\n\n对于函数式编程而言，存在下面几种特性：\n\n* 高阶函数\n* 没有副作用\n* 函数柯里化\n* 闭包\n\n#### 高阶函数\n\n高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；\n\n例如下面一段 `polifill` `es6` 中 `promise` 的代码中， 对于`promise` 返回成功状态或者失败状态的调用函数中是下面这样调用的：\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n在上面的代码中， 这个 `executor` 函数是被作为参数传入到 `Promise` 函数中的， 同时这个  `executor` 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。\n\n例如计算下面代码：\n\n```javascript\nfunction getSum(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSum(a + 1, b, sum + a + 1);\n    } else {\n        return sum;\n    }\n}\nfunction getSquare(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSquare(a + 1, b, sum + Math.pow(a + 1, 2));\n    } else {\n        return sum;\n    }\n}\nconst sums = getSum(1, 4);\nconst squareSums = getSquare(1, 4);\n```\n\n上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）\n\n实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：\n\n```javascript\nfunction sumFn(a, b, cb, sum = 0) {\n    if (a < b -1) {\n        return sumFn(a + 1, b, cb, cb(sum, a));\n    } else {\n        return sum;\n    }\n}\nconst addSum = sumFn(1, 4, (sum, a) => sum + 1 + a);\nconst squareSum = sumFn(1, 4, (sum, a) => sum + Math.pow(a + 1, 2));\n```\n\n在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 `cb` 中传入一个函数进行求取。\n\n我们可以看到， 在 `sumFn` 这个函数中， 函数的逻辑取决于传入的参数`cb`的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。\n\n","source":"_posts/阅读函数式编程（二）.md","raw":"---\ntitle: 阅读函数式编程（二）\ndate: 2018-05-23 23:49:38\ntags: 函数式编程\ncategories: 读书笔记\n---\n\n在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；\n\n### 基本概念\n\n在 `Wikipedia` 上面， 这样解释函数式编程：\n\n>- In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)\n>\n>- Functional Programming treats computation as the evaluation of mathematical functions.\n>\n>- Functional Programming avoids changing-state and mutable data.\n>\n>  ​\n>\n>- 在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。\n>\n>- 函数式编程将计算视作数学上函数的评估。\n>\n>- 函数编程中避免改变状态以及变化的数据。\n\n 函数式编程与命令式编程最大的区别在于：\n\n函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  \n\n这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；\n\n> 函数的定义：\n>\n> 设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===> B 称为从集合 A 到 B 的一个映射\n\n同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。\n\n例如：如果我们想要对于数组中的每一个数加1:\n\n```javascript\nconst arr = [1, 2, 3];\nfor (let index in arr) {\n  arr[index] += 1;\n}\nconsole.log(\"arr\", arr); // [2, 3, 4]\n```\n\n或者使用 `forEach`, `map` 中数组中定义的方法：\n\n```javascript\n// forEach\narr.forEach(item => item += 1);\n// map\nconst newArr = arr.map(item => item += 1);\n```\n\n***\n\n注意：使用 `map` 以及 `forEach` 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，\n\n使用 `map` 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 `forEach` 而言， 使用 `forEach` 不会改变原来的数组，返回值为 `undefined`。\n\n从函数式编程的角度而言，使用 `map` 更能体现函数式编程的特点： 不会产生副作用；\n\n***\n\n在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。\n\n### 几大特性\n\n对于函数式编程而言，存在下面几种特性：\n\n* 高阶函数\n* 没有副作用\n* 函数柯里化\n* 闭包\n\n#### 高阶函数\n\n高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；\n\n例如下面一段 `polifill` `es6` 中 `promise` 的代码中， 对于`promise` 返回成功状态或者失败状态的调用函数中是下面这样调用的：\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n在上面的代码中， 这个 `executor` 函数是被作为参数传入到 `Promise` 函数中的， 同时这个  `executor` 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。\n\n例如计算下面代码：\n\n```javascript\nfunction getSum(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSum(a + 1, b, sum + a + 1);\n    } else {\n        return sum;\n    }\n}\nfunction getSquare(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSquare(a + 1, b, sum + Math.pow(a + 1, 2));\n    } else {\n        return sum;\n    }\n}\nconst sums = getSum(1, 4);\nconst squareSums = getSquare(1, 4);\n```\n\n上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）\n\n实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：\n\n```javascript\nfunction sumFn(a, b, cb, sum = 0) {\n    if (a < b -1) {\n        return sumFn(a + 1, b, cb, cb(sum, a));\n    } else {\n        return sum;\n    }\n}\nconst addSum = sumFn(1, 4, (sum, a) => sum + 1 + a);\nconst squareSum = sumFn(1, 4, (sum, a) => sum + Math.pow(a + 1, 2));\n```\n\n在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 `cb` 中传入一个函数进行求取。\n\n我们可以看到， 在 `sumFn` 这个函数中， 函数的逻辑取决于传入的参数`cb`的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。\n\n","slug":"阅读函数式编程（二）","published":1,"updated":"2020-09-14T06:36:26.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf268t9w007ci2osc2sxj1ss","content":"<p>在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>在 <code>Wikipedia</code> 上面， 这样解释函数式编程：</p>\n<blockquote>\n<ul>\n<li><p>In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)</p>\n</li>\n<li><p>Functional Programming treats computation as the evaluation of mathematical functions.</p>\n</li>\n<li><p>Functional Programming avoids changing-state and mutable data.</p>\n<p>​</p>\n</li>\n<li><p>在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。</p>\n</li>\n<li><p>函数式编程将计算视作数学上函数的评估。</p>\n</li>\n<li><p>函数编程中避免改变状态以及变化的数据。</p>\n</li>\n</ul>\n</blockquote>\n<p> 函数式编程与命令式编程最大的区别在于：</p>\n<p>函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  </p>\n<p>这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；</p>\n<blockquote>\n<p>函数的定义：</p>\n<p>设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===&gt; B 称为从集合 A 到 B 的一个映射</p>\n</blockquote>\n<p>同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。</p>\n<p>例如：如果我们想要对于数组中的每一个数加1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  arr[index] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"arr\"</span>, arr); <span class=\"comment\">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <code>forEach</code>, <code>map</code> 中数组中定义的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：使用 <code>map</code> 以及 <code>forEach</code> 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，</p>\n<p>使用 <code>map</code> 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 <code>forEach</code> 而言， 使用 <code>forEach</code> 不会改变原来的数组，返回值为 <code>undefined</code>。</p>\n<p>从函数式编程的角度而言，使用 <code>map</code> 更能体现函数式编程的特点： 不会产生副作用；</p>\n<hr>\n<p>在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。</p>\n<h3 id=\"几大特性\"><a href=\"#几大特性\" class=\"headerlink\" title=\"几大特性\"></a>几大特性</h3><p>对于函数式编程而言，存在下面几种特性：</p>\n<ul>\n<li>高阶函数</li>\n<li>没有副作用</li>\n<li>函数柯里化</li>\n<li>闭包</li>\n</ul>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；</p>\n<p>例如下面一段 <code>polifill</code> <code>es6</code> 中 <code>promise</code> 的代码中， 对于<code>promise</code> 返回成功状态或者失败状态的调用函数中是下面这样调用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 这个 <code>executor</code> 函数是被作为参数传入到 <code>Promise</code> 函数中的， 同时这个  <code>executor</code> 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。</p>\n<p>例如计算下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(a + <span class=\"number\">1</span>, b, sum + a + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSquare</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSquare(a + <span class=\"number\">1</span>, b, sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sums = getSum(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSums = getSquare(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）</p>\n<p>实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumFn</span>(<span class=\"params\">a, b, cb, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumFn(a + <span class=\"number\">1</span>, b, cb, cb(sum, a));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> addSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"number\">1</span> + a);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 <code>cb</code> 中传入一个函数进行求取。</p>\n<p>我们可以看到， 在 <code>sumFn</code> 这个函数中， 函数的逻辑取决于传入的参数<code>cb</code>的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>在 <code>Wikipedia</code> 上面， 这样解释函数式编程：</p>\n<blockquote>\n<ul>\n<li><p>In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)</p>\n</li>\n<li><p>Functional Programming treats computation as the evaluation of mathematical functions.</p>\n</li>\n<li><p>Functional Programming avoids changing-state and mutable data.</p>\n<p>​</p>\n</li>\n<li><p>在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。</p>\n</li>\n<li><p>函数式编程将计算视作数学上函数的评估。</p>\n</li>\n<li><p>函数编程中避免改变状态以及变化的数据。</p>\n</li>\n</ul>\n</blockquote>\n<p> 函数式编程与命令式编程最大的区别在于：</p>\n<p>函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  </p>\n<p>这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；</p>\n<blockquote>\n<p>函数的定义：</p>\n<p>设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===&gt; B 称为从集合 A 到 B 的一个映射</p>\n</blockquote>\n<p>同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。</p>\n<p>例如：如果我们想要对于数组中的每一个数加1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  arr[index] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"arr\"</span>, arr); <span class=\"comment\">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <code>forEach</code>, <code>map</code> 中数组中定义的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：使用 <code>map</code> 以及 <code>forEach</code> 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，</p>\n<p>使用 <code>map</code> 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 <code>forEach</code> 而言， 使用 <code>forEach</code> 不会改变原来的数组，返回值为 <code>undefined</code>。</p>\n<p>从函数式编程的角度而言，使用 <code>map</code> 更能体现函数式编程的特点： 不会产生副作用；</p>\n<hr>\n<p>在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。</p>\n<h3 id=\"几大特性\"><a href=\"#几大特性\" class=\"headerlink\" title=\"几大特性\"></a>几大特性</h3><p>对于函数式编程而言，存在下面几种特性：</p>\n<ul>\n<li>高阶函数</li>\n<li>没有副作用</li>\n<li>函数柯里化</li>\n<li>闭包</li>\n</ul>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；</p>\n<p>例如下面一段 <code>polifill</code> <code>es6</code> 中 <code>promise</code> 的代码中， 对于<code>promise</code> 返回成功状态或者失败状态的调用函数中是下面这样调用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 这个 <code>executor</code> 函数是被作为参数传入到 <code>Promise</code> 函数中的， 同时这个  <code>executor</code> 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。</p>\n<p>例如计算下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(a + <span class=\"number\">1</span>, b, sum + a + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSquare</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSquare(a + <span class=\"number\">1</span>, b, sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sums = getSum(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSums = getSquare(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）</p>\n<p>实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumFn</span>(<span class=\"params\">a, b, cb, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumFn(a + <span class=\"number\">1</span>, b, cb, cb(sum, a));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> addSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"number\">1</span> + a);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 <code>cb</code> 中传入一个函数进行求取。</p>\n<p>我们可以看到， 在 <code>sumFn</code> 这个函数中， 函数的逻辑取决于传入的参数<code>cb</code>的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。</p>\n"}],"PostAsset":[{"_id":"source/_posts/js-Worker/v2-5887674cb213a45bef388a2f580da222_hd.jpg","post":"ckf268t6p001mi2osvts0n2ab","slug":"v2-5887674cb213a45bef388a2f580da222_hd.jpg","modified":1,"renderable":1},{"_id":"source/_posts/nextTick in vue/1.jpg","post":"ckf268t6v001vi2osan1hs3y6","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/vue 源码：utils 函数/code.png","post":"ckf268t8c0044i2osic28ptrw","slug":"code.png","modified":1,"renderable":1},{"_id":"source/_posts/watch in vue/image-20190514150916088.png","post":"ckf268t8m004li2osut8edupt","slug":"image-20190514150916088.png","modified":1,"renderable":1},{"_id":"source/_posts/encode & decode/replaceFn.png","post":"ckf268t65000vi2osjis3bg0a","slug":"replaceFn.png","modified":1,"renderable":1},{"_id":"source/_posts/encode & decode/操作符.jpg","slug":"操作符.jpg","post":"ckf268t65000vi2osjis3bg0a","modified":1,"renderable":0},{"_id":"source/_posts/node中的 events 模块/eventsPic.jpg","post":"ckf268t75002bi2osugrnatag","slug":"eventsPic.jpg","modified":1,"renderable":1},{"_id":"source/_posts/node中的 events 模块/image-20200803102619367.png","post":"ckf268t75002bi2osugrnatag","slug":"image-20200803102619367.png","modified":1,"renderable":1},{"_id":"source/_posts/实现machine函数/imageconsole.png","post":"ckf268t8u0055i2osi2sqwifo","slug":"imageconsole.png","modified":1,"renderable":1},{"_id":"source/_posts/实现machine函数/mechine.png","post":"ckf268t8u0055i2osi2sqwifo","slug":"mechine.png","modified":1,"renderable":1},{"_id":"source/_posts/正则表达式：基础方法/replace.jpg","post":"ckf268t9e006di2os4dwp2way","slug":"replace.jpg","modified":1,"renderable":1},{"_id":"source/_posts/正则表达式：基础方法/vueCodeReplace1.jpg","post":"ckf268t9e006di2os4dwp2way","slug":"vueCodeReplace1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/设计模式：观察者模式/observer.jpg","post":"ckf268t9s0072i2osh6b2fem0","slug":"observer.jpg","modified":1,"renderable":1},{"_id":"source/_posts/设计模式：观察者模式/vue.png","post":"ckf268t9s0072i2osh6b2fem0","slug":"vue.png","modified":1,"renderable":1},{"_id":"source/_posts/base64/ascii.png","post":"ckf268t61000pi2osdhu1udo3","slug":"ascii.png","modified":1,"renderable":1},{"_id":"source/_posts/base64/base64.jpg","post":"ckf268t61000pi2osdhu1udo3","slug":"base64.jpg","modified":1,"renderable":1},{"_id":"source/_posts/base64/image-20190914095537734.png","slug":"image-20190914095537734.png","post":"ckf268t61000pi2osdhu1udo3","modified":1,"renderable":0},{"_id":"source/_posts/base64/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiVg8Od2s3kAhVt8HMBHf5kBKUQjRx6BAgBEAQ&url=https%3A%2F%2Fwww.sparkfun.com%2Fnews%2F2121&psig=AOvVaw0in67YrpqGf7GuI48ZJQEE&ust=1568460848436280","post":"ckf268t61000pi2osdhu1udo3","slug":"url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwiVg8Od2s3kAhVt8HMBHf5kBKUQjRx6BAgBEAQ&url=https%3A%2F%2Fwww.sparkfun.com%2Fnews%2F2121&psig=AOvVaw0in67YrpqGf7GuI48ZJQEE&ust=1568460848436280","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：栈和队列/image-20191002114710061-9988030.png","post":"ckf268t8z005fi2os52da4930","slug":"image-20191002114710061-9988030.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：栈和队列/image-20191002114710061.png","post":"ckf268t8z005fi2os52da4930","slug":"image-20191002114710061.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：栈和队列/image-20191002141645991-9997006.png","post":"ckf268t8z005fi2os52da4930","slug":"image-20191002141645991-9997006.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：栈和队列/image-20191002141645991.png","post":"ckf268t8z005fi2os52da4930","slug":"image-20191002141645991.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921203850921-9069530.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921203850921-9069530.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921203850921.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921203850921.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921211634571-9071794.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921211634571-9071794.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921211634571.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921211634571.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921211723626-9071843.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921211723626-9071843.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921211723626.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921211723626.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921230012405-9078012.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921230012405-9078012.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921230012405.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921230012405.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921231032685-9078632.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921231032685-9078632.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190921231032685.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190921231032685.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922101043201-9118243.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922101043201-9118243.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922101043201.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922101043201.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922101526386-9118526.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922101526386-9118526.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922101526386.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922101526386.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922102047839-9118847.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922102047839-9118847.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190922102047839.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190922102047839.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190923224009682-9249609.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190923224009682-9249609.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190923224009682.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190923224009682.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190923224650271-9250010.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190923224650271-9250010.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-20190923224650271.png","post":"ckf268t92005mi2osn058vn5o","slug":"image-20190923224650271.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：线性表/image-顺序表.jpg","post":"ckf268t92005mi2osn058vn5o","slug":"image-顺序表.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003112501951.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003112501951.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003120639803.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003120639803.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003120919003.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003120919003.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003131535048.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003131535048.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003131750956.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003131750956.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003131943353.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003131943353.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003132343485.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003132343485.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003132738591.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003132738591.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003190231702.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003190231702.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003190415734.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003190415734.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003190805122.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003190805122.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003190824306.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003190824306.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003191127941.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003191127941.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003191435274.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003191435274.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003191644018.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003191644018.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191003191659327.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191003191659327.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191012122817189-0854497.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191012122817189-0854497.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191012122817189.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191012122817189.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191014162511259-1041511.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191014162511259-1041511.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191014162511259.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191014162511259.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191014163237408-1041957.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191014163237408-1041957.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构：树/image-20191014163237408.png","post":"ckf268t90005ji2osxbn6lb3w","slug":"image-20191014163237408.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckf268t4v0000i2os1tls9ro2","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t5o000ei2osrjzebecp"},{"post_id":"ckf268t570002i2osgowu5r8w","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t5y000li2osw43lgd4e"},{"post_id":"ckf268t5f0006i2os4vxlrjh5","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t63000ri2osm4ehjm9i"},{"post_id":"ckf268t5h0007i2ostirvccan","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t67000xi2os4sye439i"},{"post_id":"ckf268t63000ti2oslzcwikyg","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t6a0012i2osq6qyrlxa"},{"post_id":"ckf268t5i0008i2osebtj8kd1","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t6c0015i2ospu6lwahr"},{"post_id":"ckf268t5l000ci2osh8e15llr","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t6e0019i2osuiggvqcc"},{"post_id":"ckf268t5n000di2oslja9hdz3","category_id":"ckf268t6b0013i2osol59l62h","_id":"ckf268t6k001gi2osx8p5yjib"},{"post_id":"ckf268t6f001bi2osh7tvsf1a","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t6o001ki2os7s0x9msz"},{"post_id":"ckf268t5r000hi2osipisterc","category_id":"ckf268t6b0013i2osol59l62h","_id":"ckf268t6r001ni2osbsxjcuyt"},{"post_id":"ckf268t5w000ji2osyfcyv6ff","category_id":"ckf268t6k001fi2osvfvf7lhv","_id":"ckf268t6v001ti2osl1h6v1to"},{"post_id":"ckf268t6p001mi2osvts0n2ab","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t6w001wi2osvracj7j3"},{"post_id":"ckf268t6s001pi2osrjgxo19r","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t6y001zi2osjd4jasg0"},{"post_id":"ckf268t60000ni2osxejs072l","category_id":"ckf268t6r001oi2osh0mxjmlh","_id":"ckf268t700023i2ospfci9xlk"},{"post_id":"ckf268t61000pi2osdhu1udo3","category_id":"ckf268t6v001ui2oswtkhb7c2","_id":"ckf268t730027i2ost8clwp3y"},{"post_id":"ckf268t65000vi2osjis3bg0a","category_id":"ckf268t6y0021i2osndx2fohl","_id":"ckf268t76002di2osrayo5c5x"},{"post_id":"ckf268t710025i2osakwvwl9i","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t78002gi2osnz5f5gft"},{"post_id":"ckf268t67000yi2os4jajv3ps","category_id":"ckf268t730028i2osrd4k2ifo","_id":"ckf268t7d002mi2osvzcdwp27"},{"post_id":"ckf268t77002ei2osi011wjx5","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t7e002oi2osdsqs2tjq"},{"post_id":"ckf268t79002ii2osubp3eoqy","category_id":"ckf268t6b0013i2osol59l62h","_id":"ckf268t7h002ti2osq6yuq48e"},{"post_id":"ckf268t690011i2os1n4fz9kb","category_id":"ckf268t730028i2osrd4k2ifo","_id":"ckf268t7k002vi2os0nlxyhg9"},{"post_id":"ckf268t7d002ni2osdemzc34y","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t7m002zi2osd892vvd5"},{"post_id":"ckf268t6b0014i2osex1xwx92","category_id":"ckf268t730028i2osrd4k2ifo","_id":"ckf268t7n0032i2osslvy5hql"},{"post_id":"ckf268t6d0017i2osyi6rnida","category_id":"ckf268t730028i2osrd4k2ifo","_id":"ckf268t7p0035i2osn5ivirql"},{"post_id":"ckf268t6k001hi2osz0mqiyhw","category_id":"ckf268t7m002yi2os7mlvnafi","_id":"ckf268t7s003bi2os4cdnyvsw"},{"post_id":"ckf268t6n001ji2osdp2dz91s","category_id":"ckf268t7q0036i2osx8pceuqk","_id":"ckf268t7w003hi2os7nl5wg1m"},{"post_id":"ckf268t6u001si2osmz16wujs","category_id":"ckf268t7t003ci2oszjtf31an","_id":"ckf268t83003ni2os44hi9vyr"},{"post_id":"ckf268t6v001vi2osan1hs3y6","category_id":"ckf268t7w003ii2osh9jw3yhs","_id":"ckf268t88003vi2osf1pbe98m"},{"post_id":"ckf268t6x001yi2osimkam60w","category_id":"ckf268t7t003ci2oszjtf31an","_id":"ckf268t8b0041i2os2i6bwmfs"},{"post_id":"ckf268t6z0022i2os1vlt6z19","category_id":"ckf268t7t003ci2oszjtf31an","_id":"ckf268t8d0045i2osraf5ydpe"},{"post_id":"ckf268t8b0043i2osty9ley4t","category_id":"ckf268t5k0009i2os0gkdj2v6","_id":"ckf268t8g004bi2ossa7dm5ee"},{"post_id":"ckf268t740029i2oshfzgftfg","category_id":"ckf268t8a0040i2os8iyk43wk","_id":"ckf268t8k004fi2osv3dp6jbc"},{"post_id":"ckf268t8d0049i2osnbt797bv","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t8l004ii2oscpudk89h"},{"post_id":"ckf268t75002bi2osugrnatag","category_id":"ckf268t8d0047i2oscsnvnud9","_id":"ckf268t8m004mi2osfcp367iy"},{"post_id":"ckf268t7c002ki2os9rvn29qt","category_id":"ckf268t7w003ii2osh9jw3yhs","_id":"ckf268t8o004pi2os7cuink6p"},{"post_id":"ckf268t8m004li2osut8edupt","category_id":"ckf268t7w003ii2osh9jw3yhs","_id":"ckf268t8q004wi2osr4wzt598"},{"post_id":"ckf268t7g002ri2os8vlugews","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t8r004zi2osi52hwgp6"},{"post_id":"ckf268t7j002ui2osnsur3qzv","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t8t0054i2osxnua0zcf"},{"post_id":"ckf268t8p004vi2osq7ysl9xy","category_id":"ckf268t8d0047i2oscsnvnud9","_id":"ckf268t8w0057i2os76yinozc"},{"post_id":"ckf268t8q004yi2osexwa7qjm","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t8x005bi2os1v1mp1z7"},{"post_id":"ckf268t7l002xi2oscqdo5fim","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t8z005ei2osjg4g42dx"},{"post_id":"ckf268t8s0052i2oso5bu1acx","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t90005ii2oszwgmvlro"},{"post_id":"ckf268t8u0055i2osi2sqwifo","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t92005li2osxf94s8pl"},{"post_id":"ckf268t7n0031i2osxyxbqyej","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t93005pi2osh5bl6vb0"},{"post_id":"ckf268t8w0058i2os6wp54htc","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t94005si2osqh6yxwye"},{"post_id":"ckf268t8x005ci2os0snpqv4r","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t96005wi2os12t5qo08"},{"post_id":"ckf268t7o0034i2os5wfdgmin","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t97005yi2osls1ulmwg"},{"post_id":"ckf268t8z005fi2os52da4930","category_id":"ckf268t7q0036i2osx8pceuqk","_id":"ckf268t990063i2ospz0i9p3o"},{"post_id":"ckf268t90005ji2osxbn6lb3w","category_id":"ckf268t7q0036i2osx8pceuqk","_id":"ckf268t9a0065i2osw3lb7861"},{"post_id":"ckf268t7q0038i2os8bl7641x","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9d0069i2osb17w9csv"},{"post_id":"ckf268t92005mi2osn058vn5o","category_id":"ckf268t7q0036i2osx8pceuqk","_id":"ckf268t9e006ci2os6n1wq5lg"},{"post_id":"ckf268t93005qi2osxd9kyquj","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t9f006gi2osl8pg9rn2"},{"post_id":"ckf268t7r003ai2osxukcaew8","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9h006ji2os1nxu6sya"},{"post_id":"ckf268t95005ti2os4di0fjrb","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t9l006ni2os25icnega"},{"post_id":"ckf268t96005xi2osb0z3w3mi","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t9m006qi2osocx67dh7"},{"post_id":"ckf268t7t003ei2osb1wts23b","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9n006ui2osexk26038"},{"post_id":"ckf268t980060i2osasapxusy","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t9p006xi2os1fza5nr8"},{"post_id":"ckf268t990064i2oseit9bnn3","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t9r0071i2osqs0fj7ol"},{"post_id":"ckf268t7u003fi2osbwcvpcxl","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9t0074i2osp9xkbokw"},{"post_id":"ckf268t7x003ki2oshahbs2cg","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9u0078i2ostvow7x44"},{"post_id":"ckf268t9e006di2os4dwp2way","category_id":"ckf268t5c0004i2os29gv7i12","_id":"ckf268t9w007bi2osqln3tfx8"},{"post_id":"ckf268t9g006ii2osm7ecmaf3","category_id":"ckf268t67000wi2os7i1tie4f","_id":"ckf268t9x007gi2os9549rczx"},{"post_id":"ckf268t7z003li2oslz5zubny","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9y007ii2os1rswhw2p"},{"post_id":"ckf268t83003oi2osa4id93dr","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268t9z007mi2osyoa4elpx"},{"post_id":"ckf268t86003ri2osh0ggz7ne","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268ta0007oi2os8f2frrkx"},{"post_id":"ckf268t88003ti2osmzx0hile","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268ta0007ri2osivwg3bq0"},{"post_id":"ckf268t89003xi2osqtxgpolf","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268ta1007ti2osdnn85kdu"},{"post_id":"ckf268t8a003zi2os0e5dx9x8","category_id":"ckf268t8l004ji2os2367cei3","_id":"ckf268ta1007vi2osf26s8aot"},{"post_id":"ckf268t8c0044i2osic28ptrw","category_id":"ckf268t8d0047i2oscsnvnud9","_id":"ckf268ta2007yi2osz2kg4nml"},{"post_id":"ckf268t8g004ai2osoefb6n74","category_id":"ckf268ta0007qi2os61yxg1pd","_id":"ckf268ta30080i2osvw9foulr"},{"post_id":"ckf268t8j004ei2oscezfgabb","category_id":"ckf268ta2007wi2osizg5fg3m","_id":"ckf268ta40085i2osezl4co9z"},{"post_id":"ckf268t8k004hi2osvrwdqbrj","category_id":"ckf268ta2007wi2osizg5fg3m","_id":"ckf268ta50088i2ostf1tt218"},{"post_id":"ckf268t8n004oi2osjw5tpumh","category_id":"ckf268ta40084i2osq1x1he96","_id":"ckf268ta6008ei2os40x15o3w"},{"post_id":"ckf268t8o004ti2osk0ex91hs","category_id":"ckf268ta2007wi2osizg5fg3m","_id":"ckf268ta8008hi2osbgwjzx90"},{"post_id":"ckf268t9a0066i2os4hlw9xcc","category_id":"ckf268ta6008di2osf9oea6cx","_id":"ckf268ta9008mi2osgiwvp52t"},{"post_id":"ckf268t9l006oi2ostjr1hro5","category_id":"ckf268ta2007wi2osizg5fg3m","_id":"ckf268taa008pi2osybgh6ylq"},{"post_id":"ckf268t9m006ri2os97tmwagp","category_id":"ckf268ta9008li2oswd2qmk6y","_id":"ckf268tab008ti2osqxwmz0rr"},{"post_id":"ckf268t9p006yi2osi8osu8js","category_id":"ckf268taa008qi2osovyj91up","_id":"ckf268tad008yi2os7orgke04"},{"post_id":"ckf268t9s0072i2osh6b2fem0","category_id":"ckf268ta9008li2oswd2qmk6y","_id":"ckf268tae0091i2osmtcput77"},{"post_id":"ckf268t9t0075i2osklzgb7uc","category_id":"ckf268tad008xi2osje5owiyn","_id":"ckf268taf0095i2os14joh5cj"},{"post_id":"ckf268t9v0079i2osw0hc49c0","category_id":"ckf268tae0092i2osn1l0zyep","_id":"ckf268tag0099i2osh0e4wjnl"},{"post_id":"ckf268t9w007ci2osc2sxj1ss","category_id":"ckf268tad008xi2osje5owiyn","_id":"ckf268tag009ci2os8bmq1oou"}],"PostTag":[{"post_id":"ckf268t4v0000i2os1tls9ro2","tag_id":"ckf268t5e0005i2os7bpanulp","_id":"ckf268t5l000bi2os20h3eiyx"},{"post_id":"ckf268t570002i2osgowu5r8w","tag_id":"ckf268t5k000ai2osf19fllqc","_id":"ckf268t5s000ii2oseme8lmo3"},{"post_id":"ckf268t5f0006i2os4vxlrjh5","tag_id":"ckf268t5p000gi2osnvudb0zr","_id":"ckf268t61000oi2osqa8yepei"},{"post_id":"ckf268t5h0007i2ostirvccan","tag_id":"ckf268t5z000mi2oshpqe7x7t","_id":"ckf268t65000ui2osepbmpmf0"},{"post_id":"ckf268t5i0008i2osebtj8kd1","tag_id":"ckf268t63000si2osh7bby5h9","_id":"ckf268t690010i2osvfjbeswp"},{"post_id":"ckf268t5l000ci2osh8e15llr","tag_id":"ckf268t69000zi2osuae9j2cl","_id":"ckf268t6e0018i2oswdb99896"},{"post_id":"ckf268t5n000di2oslja9hdz3","tag_id":"ckf268t6d0016i2os4yqvtw2k","_id":"ckf268t6k001ei2osa6bhzn19"},{"post_id":"ckf268t5r000hi2osipisterc","tag_id":"ckf268t6i001ci2ossgtutbrz","_id":"ckf268t6o001li2os2z3kvtdl"},{"post_id":"ckf268t5w000ji2osyfcyv6ff","tag_id":"ckf268t6m001ii2oszw639s13","_id":"ckf268t6t001ri2osgjue1w16"},{"post_id":"ckf268t60000ni2osxejs072l","tag_id":"ckf268t6t001qi2oscw584s3p","_id":"ckf268t6y0020i2os55bpfaln"},{"post_id":"ckf268t61000pi2osdhu1udo3","tag_id":"ckf268t6x001xi2osdiqcpxw8","_id":"ckf268t730026i2os1xbeohyf"},{"post_id":"ckf268t63000ti2oslzcwikyg","tag_id":"ckf268t710024i2osk78xrnnn","_id":"ckf268t76002ci2osxipcf0j5"},{"post_id":"ckf268t65000vi2osjis3bg0a","tag_id":"ckf268t6x001xi2osdiqcpxw8","_id":"ckf268t7c002ji2osx6ahc0m4"},{"post_id":"ckf268t67000yi2os4jajv3ps","tag_id":"ckf268t78002hi2os502xmecm","_id":"ckf268t7g002qi2oscr2vst9t"},{"post_id":"ckf268t690011i2os1n4fz9kb","tag_id":"ckf268t7e002pi2osxgq49w3k","_id":"ckf268t7m0030i2oswinz6qwn"},{"post_id":"ckf268t6b0014i2osex1xwx92","tag_id":"ckf268t7k002wi2oswew3xa8d","_id":"ckf268t7q0037i2osrs8nmo9o"},{"post_id":"ckf268t6d0017i2osyi6rnida","tag_id":"ckf268t7o0033i2oss7ibb4wo","_id":"ckf268t7t003di2osjfw2h18w"},{"post_id":"ckf268t6f001bi2osh7tvsf1a","tag_id":"ckf268t7r0039i2os27e9k31l","_id":"ckf268t7x003ji2os9q26awcu"},{"post_id":"ckf268t6i001di2osfxw633gj","tag_id":"ckf268t7v003gi2oseheyepfu","_id":"ckf268t85003qi2os1b6lb8nm"},{"post_id":"ckf268t6k001hi2osz0mqiyhw","tag_id":"ckf268t82003mi2os1yhggzjw","_id":"ckf268t89003wi2osf4ijrn9r"},{"post_id":"ckf268t6n001ji2osdp2dz91s","tag_id":"ckf268t87003si2os2tz7hmu5","_id":"ckf268t8b0042i2osd4ekcpxt"},{"post_id":"ckf268t6p001mi2osvts0n2ab","tag_id":"ckf268t8a003yi2os2toy60z5","_id":"ckf268t8d0048i2ossyt96kip"},{"post_id":"ckf268t6s001pi2osrjgxo19r","tag_id":"ckf268t8d0046i2osy4uiani4","_id":"ckf268t8k004gi2osjfkta1ki"},{"post_id":"ckf268t6u001si2osmz16wujs","tag_id":"ckf268t8g004ci2os75wibgqc","_id":"ckf268t8m004ni2osdzjljj1b"},{"post_id":"ckf268t8m004li2osut8edupt","tag_id":"ckf268t8l004ki2osy0kjmier","_id":"ckf268t8o004qi2os8o1w1i9b"},{"post_id":"ckf268t6v001vi2osan1hs3y6","tag_id":"ckf268t8l004ki2osy0kjmier","_id":"ckf268t8p004ui2osuvudiz7b"},{"post_id":"ckf268t6x001yi2osimkam60w","tag_id":"ckf268t8o004si2osd2grt1ii","_id":"ckf268t8s0051i2os4eb5qswd"},{"post_id":"ckf268t6z0022i2os1vlt6z19","tag_id":"ckf268t8r0050i2oso5zvcp13","_id":"ckf268t8w0059i2os45k49wbl"},{"post_id":"ckf268t710025i2osakwvwl9i","tag_id":"ckf268t7e002pi2osxgq49w3k","_id":"ckf268t8z005gi2os2oxxxj93"},{"post_id":"ckf268t740029i2oshfzgftfg","tag_id":"ckf268t8y005di2osjb9ius9a","_id":"ckf268t93005ni2osqzrbe2he"},{"post_id":"ckf268t75002bi2osugrnatag","tag_id":"ckf268t82003mi2os1yhggzjw","_id":"ckf268t95005ui2os02152992"},{"post_id":"ckf268t77002ei2osi011wjx5","tag_id":"ckf268t94005ri2osovgqvt0i","_id":"ckf268t980061i2osx85a35dt"},{"post_id":"ckf268t79002ii2osubp3eoqy","tag_id":"ckf268t97005zi2osmwuaar80","_id":"ckf268t9d006ai2osin27uqrd"},{"post_id":"ckf268t7c002ki2os9rvn29qt","tag_id":"ckf268t8l004ki2osy0kjmier","_id":"ckf268t9f006hi2os9fe4em10"},{"post_id":"ckf268t7d002ni2osdemzc34y","tag_id":"ckf268t9f006ei2oscluzou44","_id":"ckf268t9m006pi2ospookl38m"},{"post_id":"ckf268t7g002ri2os8vlugews","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268t9p006wi2osurji6ol4"},{"post_id":"ckf268t7j002ui2osnsur3qzv","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268t9t0073i2osnc2cmsk4"},{"post_id":"ckf268t7l002xi2oscqdo5fim","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268t9w007ai2osjfklxk4o"},{"post_id":"ckf268t9t0075i2osklzgb7uc","tag_id":"ckf268t6m001ii2oszw639s13","_id":"ckf268t9w007di2osa9xbkpw2"},{"post_id":"ckf268t7n0031i2osxyxbqyej","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268t9y007hi2osnujx9yux"},{"post_id":"ckf268t9w007ci2osc2sxj1ss","tag_id":"ckf268t6m001ii2oszw639s13","_id":"ckf268t9y007ji2osqtxchzyb"},{"post_id":"ckf268t7o0034i2os5wfdgmin","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268t9z007ni2ossq6pdcik"},{"post_id":"ckf268t7q0038i2os8bl7641x","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta1007si2osscd2zm5o"},{"post_id":"ckf268t7r003ai2osxukcaew8","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta2007xi2oslz95og4r"},{"post_id":"ckf268t7t003ei2osb1wts23b","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta30082i2osth42lwt1"},{"post_id":"ckf268t7u003fi2osbwcvpcxl","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta40086i2ostdsbdonr"},{"post_id":"ckf268t7x003ki2oshahbs2cg","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta50089i2os3sym1zzo"},{"post_id":"ckf268t7z003li2oslz5zubny","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta6008ci2oscahsv885"},{"post_id":"ckf268t83003oi2osa4id93dr","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta8008gi2osu4ctna46"},{"post_id":"ckf268t86003ri2osh0ggz7ne","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268ta9008ki2os50gpentw"},{"post_id":"ckf268t88003ti2osmzx0hile","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268taa008oi2osgj728n8n"},{"post_id":"ckf268t89003xi2osqtxgpolf","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268tab008si2osz27pue9h"},{"post_id":"ckf268t8a003zi2os0e5dx9x8","tag_id":"ckf268t9k006li2osqqa3a181","_id":"ckf268tac008wi2osdbrca6mq"},{"post_id":"ckf268t8b0043i2osty9ley4t","tag_id":"ckf268tac008vi2osbptw1349","_id":"ckf268tae0090i2ossv9f6o6i"},{"post_id":"ckf268t8c0044i2osic28ptrw","tag_id":"ckf268t8l004ki2osy0kjmier","_id":"ckf268taf0094i2os8lnzjsp0"},{"post_id":"ckf268t8d0049i2osnbt797bv","tag_id":"ckf268tae0093i2os0s7h4b58","_id":"ckf268tag0098i2os6eq2hi5j"},{"post_id":"ckf268t8g004ai2osoefb6n74","tag_id":"ckf268taf0097i2osrq513afu","_id":"ckf268tag009bi2osvcdnmvnt"},{"post_id":"ckf268t8j004ei2oscezfgabb","tag_id":"ckf268tag009ai2osie9kmpqh","_id":"ckf268tah009ei2oss4hqvn1r"},{"post_id":"ckf268t8k004hi2osvrwdqbrj","tag_id":"ckf268tah009di2osi2ndtusb","_id":"ckf268tai009gi2osvc4vkx1c"},{"post_id":"ckf268t8n004oi2osjw5tpumh","tag_id":"ckf268tah009di2osi2ndtusb","_id":"ckf268tai009ii2os16z9zhpo"},{"post_id":"ckf268t8o004ti2osk0ex91hs","tag_id":"ckf268tai009hi2osn6umb1lp","_id":"ckf268taj009ki2osi4bn1op1"},{"post_id":"ckf268t8p004vi2osq7ysl9xy","tag_id":"ckf268taj009ji2osv863sw56","_id":"ckf268taj009mi2osoh1zd2ww"},{"post_id":"ckf268t8q004yi2osexwa7qjm","tag_id":"ckf268taj009li2osbw2e9j5o","_id":"ckf268taj009oi2osyrybabkl"},{"post_id":"ckf268t8s0052i2oso5bu1acx","tag_id":"ckf268taj009ni2osh5pti6zr","_id":"ckf268tak009qi2osld2qco47"},{"post_id":"ckf268t8u0055i2osi2sqwifo","tag_id":"ckf268tak009pi2osnb7bjvg0","_id":"ckf268tak009si2osiucr8wuw"},{"post_id":"ckf268t8w0058i2os6wp54htc","tag_id":"ckf268tak009ri2ospzjsr1ko","_id":"ckf268tak009ui2os9n89qwn0"},{"post_id":"ckf268t8x005ci2os0snpqv4r","tag_id":"ckf268tak009ti2os2e6qev2z","_id":"ckf268tal009wi2osu45mvzee"},{"post_id":"ckf268t8z005fi2os52da4930","tag_id":"ckf268tal009vi2oslrzvpuk7","_id":"ckf268tal009yi2os4c4r4fb1"},{"post_id":"ckf268t90005ji2osxbn6lb3w","tag_id":"ckf268tal009xi2ost90qxoap","_id":"ckf268tal00a0i2os7am70zcj"},{"post_id":"ckf268t92005mi2osn058vn5o","tag_id":"ckf268tal009zi2os7tnmys4g","_id":"ckf268tam00a2i2osrwpm18bm"},{"post_id":"ckf268t93005qi2osxd9kyquj","tag_id":"ckf268tam00a1i2osfipi3fkw","_id":"ckf268tam00a4i2os835l2r36"},{"post_id":"ckf268t95005ti2os4di0fjrb","tag_id":"ckf268tam00a1i2osfipi3fkw","_id":"ckf268tan00a6i2os1wj34cpv"},{"post_id":"ckf268t96005xi2osb0z3w3mi","tag_id":"ckf268tam00a1i2osfipi3fkw","_id":"ckf268tao00a8i2oszczdyu9x"},{"post_id":"ckf268t980060i2osasapxusy","tag_id":"ckf268tam00a1i2osfipi3fkw","_id":"ckf268tap00aai2osymv5npmc"},{"post_id":"ckf268t990064i2oseit9bnn3","tag_id":"ckf268tao00a9i2osrbdpbmls","_id":"ckf268tap00aci2osqkl4pmo5"},{"post_id":"ckf268t9d006bi2os3w8pqmkm","tag_id":"ckf268tap00abi2oshr7vacx1","_id":"ckf268taq00aei2osntebo4sv"},{"post_id":"ckf268t9e006di2os4dwp2way","tag_id":"ckf268tam00a1i2osfipi3fkw","_id":"ckf268tas00agi2oskdwrzj8b"},{"post_id":"ckf268t9g006ii2osm7ecmaf3","tag_id":"ckf268tar00afi2os37uajcl3","_id":"ckf268tat00aii2osdjhmwcst"},{"post_id":"ckf268t9h006ki2osbv0qkaqp","tag_id":"ckf268tas00ahi2osphfsd59d","_id":"ckf268tat00aki2osq5i80l7t"},{"post_id":"ckf268t9l006oi2ostjr1hro5","tag_id":"ckf268tat00aji2osjywl2wbv","_id":"ckf268tau00ami2os4ts3vk11"},{"post_id":"ckf268t9m006ri2os97tmwagp","tag_id":"ckf268tat00ali2osijhzs16i","_id":"ckf268tau00aoi2os9heazllr"},{"post_id":"ckf268t9o006vi2osu5v1020h","tag_id":"ckf268tau00ani2osatx5hecs","_id":"ckf268tav00aqi2osid3n5fch"},{"post_id":"ckf268t9p006yi2osi8osu8js","tag_id":"ckf268tau00api2osbt0h5jyg","_id":"ckf268taw00asi2os4rau9wpw"},{"post_id":"ckf268t9s0072i2osh6b2fem0","tag_id":"ckf268tat00ali2osijhzs16i","_id":"ckf268taw00aui2osni6hjafh"},{"post_id":"ckf268t9v0079i2osw0hc49c0","tag_id":"ckf268taw00ati2osii68ludb","_id":"ckf268taw00avi2osusiyb3ot"}],"Tag":[{"name":"blob","_id":"ckf268t5e0005i2os7bpanulp"},{"name":"bfc","_id":"ckf268t5k000ai2osf19fllqc"},{"name":"垂直居中","_id":"ckf268t5p000gi2osnvudb0zr"},{"name":"CSS层叠","_id":"ckf268t5z000mi2oshpqe7x7t"},{"name":"CSS 居中","_id":"ckf268t63000si2osh7bby5h9"},{"name":"ajax","_id":"ckf268t69000zi2osuae9j2cl"},{"name":"vue 响应原理","_id":"ckf268t6d0016i2os4yqvtw2k"},{"name":"组件通信","_id":"ckf268t6i001ci2ossgtutbrz"},{"name":"函数式编程","_id":"ckf268t6m001ii2oszw639s13"},{"name":"promisify","_id":"ckf268t6t001qi2oscw584s3p"},{"name":"Base64","_id":"ckf268t6x001xi2osdiqcpxw8"},{"name":"css modules","_id":"ckf268t710024i2osk78xrnnn"},{"name":"Map Set","_id":"ckf268t78002hi2os502xmecm"},{"name":"promise","_id":"ckf268t7e002pi2osxgq49w3k"},{"name":"变量解构赋值","_id":"ckf268t7k002wi2oswew3xa8d"},{"name":"对象扩展","_id":"ckf268t7o0033i2oss7ibb4wo"},{"name":"grid 布局","_id":"ckf268t7r0039i2os27e9k31l"},{"name":"0","_id":"ckf268t7v003gi2oseheyepfu"},{"name":"node","_id":"ckf268t82003mi2os1yhggzjw"},{"name":"js 链表","_id":"ckf268t87003si2os2tz7hmu5"},{"name":"Worker","_id":"ckf268t8a003yi2os2toy60z5"},{"name":"fileReader","_id":"ckf268t8d0046i2osy4uiani4"},{"name":"Timers","_id":"ckf268t8g004ci2os75wibgqc"},{"name":"vue 源码","_id":"ckf268t8l004ki2osy0kjmier"},{"name":"node.js 基础","_id":"ckf268t8o004si2osd2grt1ii"},{"name":"EventEmitter","_id":"ckf268t8r0050i2oso5zvcp13"},{"name":"promise catch","_id":"ckf268t8y005di2osjb9ius9a"},{"name":"transform","_id":"ckf268t94005ri2osovgqvt0i"},{"name":"this.nextTick","_id":"ckf268t97005zi2osmwuaar80"},{"name":"toolTip","_id":"ckf268t9f006ei2oscluzou44"},{"name":"underscore.js源码","_id":"ckf268t9k006li2osqqa3a181"},{"name":"vertical-align && line-height","_id":"ckf268tac008vi2osbptw1349"},{"name":"事件监听","_id":"ckf268tae0093i2os0s7h4b58"},{"name":"vue 知识总结（一）","_id":"ckf268taf0097i2osrq513afu"},{"name":"whileordo","_id":"ckf268tag009ai2osie9kmpqh"},{"name":"作用域","_id":"ckf268tah009di2osi2ndtusb"},{"name":"FP","_id":"ckf268tai009hi2osn6umb1lp"},{"name":"js-module","_id":"ckf268taj009ji2osv863sw56"},{"name":"节流","_id":"ckf268taj009li2osbw2e9j5o"},{"name":"route","_id":"ckf268taj009ni2osh5pti6zr"},{"name":"machine 函数","_id":"ckf268tak009pi2osnb7bjvg0"},{"name":"对象复制","_id":"ckf268tak009ri2ospzjsr1ko"},{"name":"算法","_id":"ckf268tak009ti2os2e6qev2z"},{"name":"栈 和 队列","_id":"ckf268tal009vi2oslrzvpuk7"},{"name":"树","_id":"ckf268tal009xi2ost90qxoap"},{"name":"线性表","_id":"ckf268tal009zi2os7tnmys4g"},{"name":"正则表达式","_id":"ckf268tam00a1i2osfipi3fkw"},{"name":"日历","_id":"ckf268tao00a9i2osrbdpbmls"},{"name":"浏览器渲染","_id":"ckf268tap00abi2oshr7vacx1"},{"name":"数组","_id":"ckf268tar00afi2os37uajcl3"},{"name":"移动端touch事件","_id":"ckf268tas00ahi2osphfsd59d"},{"name":"js 类","_id":"ckf268tat00aji2osjywl2wbv"},{"name":"设计模式","_id":"ckf268tat00ali2osijhzs16i"},{"name":"二叉树","_id":"ckf268tau00ani2osatx5hecs"},{"name":"window.location","_id":"ckf268tau00api2osbt0h5jyg"},{"name":"js运行机制，线程","_id":"ckf268taw00ati2osii68ludb"}]}}