{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ef74c766c340b91ded9e88c5d07c9158f7e7dbef","modified":1554129665756},{"_id":"source/favicon.ico","hash":"1beb6370d30df3caac5e51beff6bb25ca5d9a8a5","modified":1504953488000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529136414000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529136414000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1529136414000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1529136414000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1529136414000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1529136414000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1529136414000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529136414000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1529136414000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1529136414000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1529136414000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1529136414000},{"_id":"themes/next/_config.yml","hash":"d83d7921423cf24d248b73eacc31c88dc6b400d2","modified":1554221803146},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1529136414000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1529136414000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1529136414000},{"_id":"source/categories/index.md","hash":"98ba6b39641d0b8ebf4b6073df16435b7eca3cee","modified":1503195672000},{"_id":"source/_posts/Blob.md","hash":"fa6c4b2f9648bce00764e6e4638fcb162e0e5b4d","modified":1547283169000},{"_id":"source/_posts/.DS_Store","hash":"a272050c6d6f19450ee1590224b32351dba13098","modified":1554123301917},{"_id":"source/_posts/BFC.md","hash":"ee8fe56cffe5bb2c33d8d5c87e096b5feaeb83db","modified":1505636138000},{"_id":"source/_posts/CSS-未知高度内文本居中.md","hash":"2d15af0b605fe861666d10e3e22ff05c81318c00","modified":1513008488000},{"_id":"source/_posts/CSS居中效果.md","hash":"10043bf1027ed73bba0ac9010346354209780fca","modified":1534859672000},{"_id":"source/_posts/JavaScript-中的函数式编程（译）.md","hash":"140dd4ef88085c3ed75a2c222dbe26f194267937","modified":1529164996000},{"_id":"source/_posts/CSS层叠上下文.md","hash":"c34f1836bc1daed0fb5d23343558830e4d9cfdd9","modified":1503712504000},{"_id":"source/_posts/JSONP跨域-ajax请求.md","hash":"a5dea02a1c6e33d3786ac3631367a272ae744505","modified":1528637508000},{"_id":"source/_posts/css-modules-前端模块化.md","hash":"bfa3252bbfe2c5ed69c72cfaa0b9e4dc1af00b1a","modified":1536484250000},{"_id":"source/_posts/es6-Map-and-Set.md","hash":"875259e347519d32290db9951bd52ea89ad252fc","modified":1506357102000},{"_id":"source/_posts/Vue-组件之间的传值.md","hash":"be03e138cb5e1af4567d0de41b5e01e9060c9d9f","modified":1505058614000},{"_id":"source/_posts/es6-变量的解构赋值.md","hash":"6a1052c9c5a7612e6331425111eefebff763d63a","modified":1509766244000},{"_id":"source/_posts/es6-promise.md","hash":"e90234e9dc174f5ad113e569e2c58dd4f23add90","modified":1509759194000},{"_id":"source/_posts/Vue响应原理.md","hash":"96c2ee677fe46bdac2c47db441ee04706844ab55","modified":1526804414000},{"_id":"source/_posts/es6-对象的扩展.md","hash":"4c60ab42adbc41e7d9a009572cdcf8c941b47726","modified":1529159610000},{"_id":"source/_posts/grid-布局（一）.md","hash":"83bb560680cd5ef5412be2ce69b14a05ffc79a49","modified":1534651698000},{"_id":"source/_posts/js-中数据结构的实现.md","hash":"0a5ea48e04b98bf68e7fa977ce7667071a6f28cf","modified":1521649700000},{"_id":"source/_posts/js-文件上传与下载.md","hash":"56b57257bccac90a1a1c699e8eddff16a7952657","modified":1540915638000},{"_id":"source/_posts/node-js-EventEmitter.md","hash":"5e346f00ab64efc77979c6cd7081bc7c4919809a","modified":1513613110000},{"_id":"source/_posts/node-js基础-基本服务器构建.md","hash":"db6b2935c2f1acefd127e439e5fe57bf42e26813","modified":1512887876000},{"_id":"source/_posts/my-first-blog.md","hash":"a8616a8b9159fc30708144a64242ee3aa4ee0b17","modified":1509757510000},{"_id":"source/_posts/node-js-Timers.md","hash":"e8c9a5ce7d3abe4a04e3d322323fbab7064b5ca6","modified":1513996960000},{"_id":"source/_posts/promise.md","hash":"8d1c4e536c1e9be4f6df499fbaca3de5b2bc1d8b","modified":1513429766000},{"_id":"source/_posts/tooltip-的实现.md","hash":"bcf36e61fb6929e273d421641901536f2b3abb02","modified":1526096998000},{"_id":"source/_posts/translate3d.md","hash":"103c23316783993e8b8d9e7c26ef4ccd84a25792","modified":1526091958000},{"_id":"source/_posts/underscore-js-源码分析-九.md","hash":"64d7eeba951ce49d255713236b2f8ad66149f347","modified":1512441532000},{"_id":"source/_posts/this-nextTick-in-vue-js.md","hash":"80aa5c5f0fc8d12cde6ed97e2f48a076bad78b2f","modified":1516539248000},{"_id":"source/_posts/underscore-js-源码分析-五.md","hash":"771e03620fc2af7f99c5ab678f9c9fa4bdede56b","modified":1511681516000},{"_id":"source/_posts/underscore-js-源码分析-十三.md","hash":"89d1ecc409d17e8a231260abe167fc21ea86df5d","modified":1513086116000},{"_id":"source/_posts/underscore-js-源码分析-十五.md","hash":"0f8957f8bbe15f03f5f098bccdfc5d9979b80d07","modified":1513397610000},{"_id":"source/_posts/underscore-js-源码分析-十六.md","hash":"99c36211950f636eb0c0dcc7984d6acb542f925c","modified":1513407776000},{"_id":"source/_posts/underscore-js-源码解析-六.md","hash":"c2d2e26d57b692d9934ad344d8123a2705cad261","modified":1511798292000},{"_id":"source/_posts/underscore-js源码分析-一.md","hash":"858d3cf4c61279089cb0f358d109c9e3cf0fb88a","modified":1511596232000},{"_id":"source/_posts/underscore-js源码分析-七.md","hash":"cc2b6a5e3c41c0bdbe7ac7bbc4c4d68584aa2ee5","modified":1512055920000},{"_id":"source/_posts/underscore-js源码分析-八.md","hash":"5c043a47d69390b951c7dffab59bb366bfd668ee","modified":1512194106000},{"_id":"source/_posts/underscore-js源码分析-二.md","hash":"417930355129312dce7e86df0c2d9ddb7feaa4f1","modified":1511278636000},{"_id":"source/_posts/underscore-js源码分析-三.md","hash":"0a482c90ccd7722f800a8d9a619e6cae45ef7e1b","modified":1512141616000},{"_id":"source/_posts/underscore-js源码分析-十.md","hash":"fbf17e4488e1c965ed164bce408f1e1d062aea80","modified":1512655702000},{"_id":"source/_posts/underscore-js源码分析-十一.md","hash":"60451934b18ab29a948188e9fda3b76e3a1ccbe7","modified":1512811882000},{"_id":"source/_posts/underscore-js源码分析-十二.md","hash":"9a3cc3b139cc704c1b82253144f5e58ea0996951","modified":1512997958000},{"_id":"source/_posts/underscore-js源码分析-四.md","hash":"de8cec369607f8b26624cba264e1525d239693a9","modified":1511623458000},{"_id":"source/_posts/underscore-js源码分析-十四.md","hash":"22b3dd29be11b62498388c4c0d8be3728b7b2101","modified":1513264046000},{"_id":"source/_posts/vertical-align.md","hash":"59e49ac549a8ad220502c79bd023dc5d4184fbec","modified":1522517598000},{"_id":"source/_posts/vue 知识总结.md","hash":"4083b9c416dc0c43813f04f5076f45bfd7f67d2c","modified":1525573848000},{"_id":"source/_posts/事件监听代码.md","hash":"3f94283891aa8e32dd0f2b9cdf1c66d2c3cf6044","modified":1527606416000},{"_id":"source/_posts/while-and-do.md","hash":"7ef6c56560259654165777323755510078f62be0","modified":1526810078000},{"_id":"source/_posts/作用域.md","hash":"58c2fe1d6cd0f5f8fcc92a9bb3b6bd547e1224d3","modified":1512783876000},{"_id":"source/_posts/函数节流.md","hash":"2f4c74a74b321766ec1714a684076abd7cea8694","modified":1503718806000},{"_id":"source/_posts/作用域：函数作用域和块作用域.md","hash":"6088af44fef8b0ed38a8f15012b28f8d23102df5","modified":1503216448000},{"_id":"source/_posts/前端路由的实现方式.md","hash":"65663c50e81a5311804c18dc6df33f88e585a72c","modified":1547431420000},{"_id":"source/_posts/对象复制.md","hash":"a2b1ad380f086901432646895670e2a8c30d9c77","modified":1512202528000},{"_id":"source/_posts/排序算法.md","hash":"fc957c77c385277852f99b865335e46f20436ca7","modified":1512896476000},{"_id":"source/_posts/日历.md","hash":"a76de2973e30125fcf5ed7ae2223b1b143b4c626","modified":1505056570000},{"_id":"source/_posts/正则表达式（二）：基础方法.md","hash":"3a54a930fb5ac2126689c271620175d183e2d92b","modified":1554219330009},{"_id":"source/_posts/正则表达式（一）：理论基础部分.md","hash":"c2550a9a025711ac918bad2eec206d7e6c633c2c","modified":1554221742873},{"_id":"source/_posts/实现mechine函数.md","hash":"0bfbe7edac3ce3020b925255656bc56b22493fd2","modified":1554129510353},{"_id":"source/_posts/正则表达式（三）：一些例子.md","hash":"28a5865461a93c7c82a15a25fbe64f3e7146638d","modified":1549271598982},{"_id":"source/_posts/正则表达式（五）：括号.md","hash":"4c25acc160033844fc0242bf7b14966bc106c13e","modified":1554207506282},{"_id":"source/_posts/浏览器渲染过程.md","hash":"8efab0601608afa80e0bf955a686523cf61aeef9","modified":1520954864000},{"_id":"source/_posts/正则表达式（四）：正则表达式进阶，-匹配位置.md","hash":"60a985ab2e89ce1ed30aaeac352234f348dd3dc0","modified":1550382721398},{"_id":"source/_posts/生活.md","hash":"8410f9be1887ed3d841168f83f67ddae269c7bfe","modified":1554364864851},{"_id":"source/_posts/由目录搜索想到的多叉树向二叉树的转换.md","hash":"d6458ac8266bf99d280c50bdafbd8b3a848d33f9","modified":1529314686000},{"_id":"source/_posts/移动端touch事件.md","hash":"941895e3ad41c60040fc981d77ec290c2bf83a6d","modified":1503218060000},{"_id":"source/_posts/聊聊js中的类.md","hash":"de01934fa2f7c9025b791cb348b80f73b029dfd0","modified":1543895180000},{"_id":"source/_posts/详解js中的线程，进程.md","hash":"73cc8460b74d8f44192146c258e0afea9a7c5202","modified":1543895132000},{"_id":"source/_posts/获取数组中特定值的数组.md","hash":"678da068aa068fa24f5922291b2baa56875dbd2b","modified":1543895154000},{"_id":"source/_posts/阅读函数式编程（一）.md","hash":"1a082860b02aec075344562134b23cd314725077","modified":1543895202000},{"_id":"source/tags/index.md","hash":"72d4fea58a13fe2a2228e1fb264c0a1e8eabbb40","modified":1503195462000},{"_id":"source/_posts/阅读函数式编程（二）.md","hash":"fbcb46bfc58abbfb4946d821531aa28b3105c8e2","modified":1529162402000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1529136414000},{"_id":"source/_posts/谈谈-window-location-对象.md","hash":"a0bf32cd57ccef7d5118de346885fdf40f01c1be","modified":1554114762897},{"_id":"themes/next/.git/FETCH_HEAD","hash":"778b51a21e3c53e17a5b722a6329f3f7c0eb829f","modified":1534859238000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1529136414000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1529135266000},{"_id":"themes/next/.git/index","hash":"cf41b01362715f5df735abb7b51d7e0e274ae276","modified":1554257067904},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1529136414000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1529136414000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1529136414000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1529136414000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529136414000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1529136414000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1529136414000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1529136414000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1529136414000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1529136414000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1529136414000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1529136414000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1529136414000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1529136414000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1529136414000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1529136414000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1529136414000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1529136414000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1529136414000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1529136414000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1529136414000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1529136414000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1529136414000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1529136414000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1529136414000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1529136414000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1529136414000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529136414000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1529136414000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1529136414000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1529136414000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529136414000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529136414000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529136416000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"source/_posts/实现mechine函数/imageconsole.png","hash":"8ed745331df1d0794412c6f0c5e0b500603037cd","modified":1554112997791},{"_id":"source/_posts/实现mechine函数/mechine.png","hash":"f91fd01a6212578e3c9d27498a708ce7369bc97a","modified":1554113914790},{"_id":"source/_posts/实现mechine函数/.DS_Store","hash":"eaf55478037c969a5257e2dfc934bd12e8f81760","modified":1554129665757},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1529135266000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1529135266000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1529135266000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1529135266000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1529135266000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1529135266000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1529135266000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1529135266000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1529135266000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1529135266000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1529135266000},{"_id":"themes/next/.git/logs/HEAD","hash":"11ac89fc265d54685ebf4a2e15873fd22d2d23a7","modified":1529136414000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529136414000},{"_id":"themes/next/layout/_macro/post.swig","hash":"80ff1ab79dbec9a5c845dfd62ce87cbb21266522","modified":1529160832000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529136414000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1529136414000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1529136414000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529136414000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1529136414000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1529136414000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1529136414000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1529136414000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1529136414000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1529136414000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1529136414000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1529136414000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1529136414000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1529136414000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1529136414000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1529136414000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1529136414000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1529136414000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529136414000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1529136414000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1529136414000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1529136414000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1529136414000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1529136414000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1529136414000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1529136414000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1529136414000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529136414000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1529136414000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1529136414000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1529136414000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1529136414000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1529136414000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1502894872000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529136414000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529136414000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1502894872000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1502894872000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1502894872000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1502894872000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1502894872000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529136414000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1502894872000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1502894872000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502894872000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502894872000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1502894872000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529136414000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529136414000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1502894872000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502894872000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529136414000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1529136414000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529136414000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529136414000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529136414000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529136414000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529136414000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529136414000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529136414000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529136414000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529136414000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529136414000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1529136414000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1529136414000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529136414000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529136414000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1529136414000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529136414000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529136414000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529136414000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1529136414000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529136414000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529136414000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529136414000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529136414000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529136414000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529136414000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529136414000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529136414000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529136414000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529136414000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529136414000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1529136414000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529136414000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529136414000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529136414000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529136414000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529136414000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529136414000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529136414000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529136414000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529136414000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529136414000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529136414000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529136414000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1529136414000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529136414000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1529136414000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1529136414000},{"_id":"themes/next/source/images/avatar.jpg","hash":"828c8f220cb6a36f285d40c8449d851ad96427f8","modified":1509638306000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529136414000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"11ac89fc265d54685ebf4a2e15873fd22d2d23a7","modified":1529136414000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1529136414000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1529136414000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529136414000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529136414000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529136414000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529136414000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529136414000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529136414000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529136414000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529136414000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"11ac89fc265d54685ebf4a2e15873fd22d2d23a7","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529136414000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529136414000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529136414000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1529136414000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529136414000},{"_id":"themes/next/.git/objects/pack/pack-de11fe68e359cdf1ae6e6ee69d7f5d0172a92739.idx","hash":"a52e84d61b433f547bfbcd32894dc01a2ac79c61","modified":1529136414000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529136414000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529136414000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529136414000},{"_id":"themes/next/.git/objects/pack/pack-de11fe68e359cdf1ae6e6ee69d7f5d0172a92739.pack","hash":"2e005fb7731adfcffbd7904e37e3dbbad47391cf","modified":1529136414000},{"_id":"public/search.xml","hash":"54777b3942c1d6e97659bb1cb884b9fce12a549f","modified":1554364889142},{"_id":"public/categories/index.html","hash":"3a9f80c538f246fcb95f1802d0025e0e6ed3a1ef","modified":1554364889461},{"_id":"public/tags/index.html","hash":"ee6cc208b1b68665de958f4ddbbeb96298cf4a8b","modified":1554364889461},{"_id":"public/2019/04/01/实现mechine函数/index.html","hash":"5b91c5c1030fbbb6b6eb9cc30eba2f452616cc93","modified":1554364889461},{"_id":"public/2019/02/05/正则表达式（五）：括号/index.html","hash":"12a2d2b68f5aee139d92377c5d2bdc97f4411bc8","modified":1554364889461},{"_id":"public/2019/02/04/正则表达式（四）：正则表达式进阶，-匹配位置/index.html","hash":"ac5670b6d60f39c0be293355b41f700fafa8daa3","modified":1554364889461},{"_id":"public/2019/01/27/正则表达式（三）：一些例子/index.html","hash":"f357c0a96e757b0d68ce0e6006524b827b3cb61a","modified":1554364889461},{"_id":"public/2019/01/20/正则表达式（二）：基础方法/index.html","hash":"cfc92b8ff550e05442c762e682524aff2cdfc225","modified":1554364889461},{"_id":"public/2019/01/20/谈谈-window-location-对象/index.html","hash":"a1d4e62d4599a8fda27cb47bea2457ebea22b849","modified":1554364889462},{"_id":"public/2019/01/12/Blob/index.html","hash":"cce54ec27f6d8eb4df251b48e55b38910f7d0c26","modified":1554364889462},{"_id":"public/2019/01/12/前端路由的实现方式/index.html","hash":"94ef24a61710f022d9bed26d4e8347c94dacae88","modified":1554364889462},{"_id":"public/2018/12/15/正则表达式（一）：理论基础部分/index.html","hash":"810532d8509a805529178a471f89fb290ea15c0b","modified":1554364889462},{"_id":"public/2018/10/31/js-文件上传与下载/index.html","hash":"e2e3440ca5996489d8abc278453b9cf8f50a4656","modified":1554364889462},{"_id":"public/2018/09/09/css-modules-前端模块化/index.html","hash":"9a912f33833902e18bc868b775e3cade876493cc","modified":1554364889463},{"_id":"public/2018/08/18/grid-布局（一）/index.html","hash":"743a4fb6c48aeb10669cd2173069cd2aa17a2f02","modified":1554364889465},{"_id":"public/2018/06/21/详解js中的线程，进程/index.html","hash":"1c4aad65f71dbf7211fc1db3c235624391baa040","modified":1554364889465},{"_id":"public/2018/06/16/JavaScript-中的函数式编程（译）/index.html","hash":"a91178f801f59b37b6537e5c06ba9734d7c621b4","modified":1554364889465},{"_id":"public/2018/06/11/获取数组中特定值的数组/index.html","hash":"bb8dcc47beacb728424feacf2fe45f51b0ad63b0","modified":1554364889466},{"_id":"public/2018/05/23/阅读函数式编程（二）/index.html","hash":"c9af2be2a8750701417708d551aeffefbe939ddd","modified":1554364889466},{"_id":"public/2018/05/15/聊聊js中的类/index.html","hash":"716ef6bd33d1c2a9673d486b0ac79e715e8b0f7e","modified":1554364889466},{"_id":"public/2018/05/09/tooltip-的实现/index.html","hash":"e2acb5d6bbbbab4fcbfb8629755ddd567e954046","modified":1554364889466},{"_id":"public/2018/05/06/事件监听代码/index.html","hash":"10249df2f36236e260c8d3e4cdebe4805575aa6a","modified":1554364889466},{"_id":"public/2018/04/29/vue 知识总结/index.html","hash":"0563abe2ac0ce6f897c4a6e874cf184679793943","modified":1554364889466},{"_id":"public/2018/04/21/由目录搜索想到的多叉树向二叉树的转换/index.html","hash":"d94eecd5e32d3b477d8b612b204e9a9bab21597f","modified":1554364889467},{"_id":"public/2018/03/26/vertical-align/index.html","hash":"f51c890de618e9d9b65b133e145d196dd0607fe6","modified":1554364889467},{"_id":"public/2018/03/20/阅读函数式编程（一）/index.html","hash":"e4126f10fddcf8cfe75e075f3a0e2dfab8e52e04","modified":1554364889467},{"_id":"public/2018/03/13/浏览器渲染过程/index.html","hash":"9e75a31c65a16dc2376f62af82bc21f4719563a0","modified":1554364889467},{"_id":"public/2018/01/21/this-nextTick-in-vue-js/index.html","hash":"cfe8cfc0f4bf1961f629fc45979b3f25f8307c91","modified":1554364889467},{"_id":"public/2018/01/13/js-中数据结构的实现/index.html","hash":"daef8bbfd535fc887e83b5a7f6e49e64dfeaf710","modified":1554364889467},{"_id":"public/2017/12/19/node-js-Timers/index.html","hash":"265d5e2f3b609ed62e74dedfde0bb5a89847191a","modified":1554364889467},{"_id":"public/2017/12/17/node-js-EventEmitter/index.html","hash":"b03ffeb042008ed945109c59078d5624a324e053","modified":1554364889467},{"_id":"public/2017/12/16/underscore-js-源码分析-十六/index.html","hash":"0b9c1b0ffb8fc25818fa9579771e985c2b30840f","modified":1554364889467},{"_id":"public/2017/12/14/underscore-js-源码分析-十五/index.html","hash":"e286c6e1fa29ebc839d1f957802bc24952e11680","modified":1554364889468},{"_id":"public/2017/12/12/underscore-js源码分析-十四/index.html","hash":"62c97d056e0705b8e2ecc60ee1af8917f98aeee8","modified":1554364889468},{"_id":"public/2017/12/11/CSS-未知高度内文本居中/index.html","hash":"771ef9fd24a56a3f18d370140673a5bd5b434f6c","modified":1554364889468},{"_id":"public/2017/12/11/underscore-js-源码分析-十三/index.html","hash":"fd4bbac53418e8df9962ba841b6cc69a83475f2e","modified":1554364889468},{"_id":"public/2017/12/10/underscore-js源码分析-十二/index.html","hash":"b8909b1af076dcf9241a7810c7d75ea7750408d8","modified":1554364889468},{"_id":"public/2017/12/10/node-js基础-基本服务器构建/index.html","hash":"1b46c462d5bc6c44c5fb6ca1f19850c1a94e4f94","modified":1554364889468},{"_id":"public/2017/12/09/while-and-do/index.html","hash":"7d4855d569fbbedfe0556758b8907631c475b8c0","modified":1554364889468},{"_id":"public/2017/12/07/underscore-js源码分析-十一/index.html","hash":"b313bf1bfc22202ad075ff9a72a5184ef57a3699","modified":1554364889468},{"_id":"public/2017/12/05/promise/index.html","hash":"0feaad971242183becafcfb908822a4cf0992688","modified":1554364889469},{"_id":"public/2017/12/05/underscore-js源码分析-十/index.html","hash":"5eaeedd5e7f68ab6210b5dc1ad18cea798d9e117","modified":1554364889469},{"_id":"public/2017/12/04/underscore-js-源码分析-九/index.html","hash":"2ffe26c6819bd9bc1abf861b406fa557b3d1a781","modified":1554364889469},{"_id":"public/2017/12/01/underscore-js源码分析-八/index.html","hash":"a91f97e9c2fbf37e1e7c8e11cb01ffabea21936e","modified":1554364889469},{"_id":"public/2017/11/28/underscore-js源码分析-七/index.html","hash":"4fd890b35641cedd4d8d00fc1fd1d298ac87eacf","modified":1554364889469},{"_id":"public/2017/11/27/underscore-js-源码解析-六/index.html","hash":"10b99a4672bcb7427d10c892301e7fc2ab6808b2","modified":1554364889469},{"_id":"public/2017/11/26/underscore-js-源码分析-五/index.html","hash":"d462a05911dd8f9bd70a978c07a4fcc5baf136ba","modified":1554364889469},{"_id":"public/2017/11/23/underscore-js源码分析-四/index.html","hash":"ae8047e3ea549221069b416fd721c55f7a34f449","modified":1554364889469},{"_id":"public/2017/11/22/underscore-js源码分析-三/index.html","hash":"8efd3f3c2cdb6a678e05d21b5134bb5de733415a","modified":1554364889469},{"_id":"public/2017/11/20/underscore-js源码分析-二/index.html","hash":"070c91cb7d719a8872ae069885a01dad630f0a4d","modified":1554364889469},{"_id":"public/2017/11/18/underscore-js源码分析-一/index.html","hash":"beeb36f2cb18d1a2bc8da0241862f2642a990bd6","modified":1554364889469},{"_id":"public/2017/11/12/作用域/index.html","hash":"17e51adc357e69575a489629d0751752bcbd2bf3","modified":1554364889469},{"_id":"public/2017/11/05/translate3d/index.html","hash":"2c7cb3c41b9bff3240bd20bf09bebe5cb12e6ee3","modified":1554364889470},{"_id":"public/2017/11/04/对象复制/index.html","hash":"cfbf002b6a7650ead3b22a795291ff6441a400f1","modified":1554364889470},{"_id":"public/2017/10/30/es6-promise/index.html","hash":"5659817049cc5a0ecfdcad9e932d290c2e1db115","modified":1554364889470},{"_id":"public/2017/10/12/排序算法/index.html","hash":"cf9110a5de836866cb36b1433304f9e2c9f761c2","modified":1554364889470},{"_id":"public/2017/09/23/es6-Map-and-Set/index.html","hash":"fe36679e69589e7149d1762b15553744dc9e18eb","modified":1554364889470},{"_id":"public/2017/09/17/es6-对象的扩展/index.html","hash":"881f1838a89f54f07592979e51bf62d542f860f3","modified":1554364889470},{"_id":"public/2017/09/17/BFC/index.html","hash":"d7bb186c2f63184757e2beed77b62eeae66fee76","modified":1554364889470},{"_id":"public/2017/09/10/Vue-组件之间的传值/index.html","hash":"b8dc8be259033320cc9fb7351b2ab520b788a22c","modified":1554364889470},{"_id":"public/2017/09/09/es6-变量的解构赋值/index.html","hash":"98d390f620603dee7f39e9b4468cfebc78b5adef","modified":1554364889470},{"_id":"public/2017/09/09/Vue响应原理/index.html","hash":"4e5ee08fd09dfad69d74fe7a058a91df97049d62","modified":1554364889470},{"_id":"public/2017/09/03/JSONP跨域-ajax请求/index.html","hash":"a045eabe558e938cdbed04473650a676228a044e","modified":1554364889470},{"_id":"public/2017/09/02/CSS居中效果/index.html","hash":"3e039eb6d285cad4508a533eaf161713da6a16af","modified":1554364889470},{"_id":"public/2017/08/31/日历/index.html","hash":"11023aca932e665b731eccbf3baa2f671d626d2c","modified":1554364889471},{"_id":"public/2017/08/26/生活/index.html","hash":"4fe3369c5dd9b0bf1136ea820f9c3741afd1483b","modified":1554364889471},{"_id":"public/2017/08/26/函数节流/index.html","hash":"7fa2e7a64edb3348be4cffbf2f560f5cd16d3cd9","modified":1554364889471},{"_id":"public/2017/08/22/CSS层叠上下文/index.html","hash":"e2b6bede1abb59207b9309d2a999bbbdbf5a0bdd","modified":1554364889471},{"_id":"public/2017/08/19/移动端touch事件/index.html","hash":"c28213f1491585dc20418176b184c563764b73d2","modified":1554364889471},{"_id":"public/2017/08/20/作用域：函数作用域和块作用域/index.html","hash":"8aa716574b12fd36503e0ba9bd3b6ba6f83e1d3c","modified":1554364889471},{"_id":"public/2017/08/18/my-first-blog/index.html","hash":"c480bdb0c2505d51ac766edf023116c640830aac","modified":1554364889471},{"_id":"public/categories/js/index.html","hash":"1b608a3eb9293798d25bebcf200e3d3db032d5c5","modified":1554364889478},{"_id":"public/categories/CSS/index.html","hash":"41791924b30ae5383bcc441f452f6569ddeb7abe","modified":1554364889478},{"_id":"public/categories/翻译文集/index.html","hash":"05c9c0a2bc657f7d81562921d295e63705592cc9","modified":1554364889478},{"_id":"public/categories/代码集/index.html","hash":"a14f7599218f2b685fb6c650d7b78c0f568c5723","modified":1554364889478},{"_id":"public/categories/es6/index.html","hash":"f01d554761f734f8947a400779ec2220a6af7028","modified":1554364889496},{"_id":"public/categories/Vue/index.html","hash":"2c32eedd0c882616e4c08354b431c1e0b49a9b70","modified":1554364889497},{"_id":"public/categories/数据结构/index.html","hash":"8b233f1665c31ff8ff1e4e025f0745dab9e8c13c","modified":1554364889497},{"_id":"public/categories/node-js/index.html","hash":"301e334a06dc5fe662ee71fef6b15a0d988fc2c0","modified":1554364889497},{"_id":"public/categories/underscore-js-源码分析/index.html","hash":"31792d119582689575cbf92083568a039a61a327","modified":1554364889497},{"_id":"public/categories/underscore-js-源码分析/page/2/index.html","hash":"af6a149f4913be24d935032f61f17c4a556cb8ca","modified":1554364889497},{"_id":"public/categories/vue/index.html","hash":"eb6d58c9eeb55f5f94f487e612f0b962ae653dcb","modified":1554364889497},{"_id":"public/categories/笔记/index.html","hash":"44238da4de459b8eb0e5357dbae02b66b78c0377","modified":1554364889497},{"_id":"public/categories/js读书总结/index.html","hash":"55a18f1ca5bce0b869b73c67ed94c09a2dd9525f","modified":1554364889497},{"_id":"public/categories/生活/index.html","hash":"9ab205a86653a6ef274f218416fca1d366df57c7","modified":1554364889497},{"_id":"public/categories/js理论基础/index.html","hash":"ff7989fea938251c494f79d4e64f710a6731f88d","modified":1554364889497},{"_id":"public/categories/读书笔记/index.html","hash":"2c4273426299ed3ed46742136d513fdb9eff9166","modified":1554364889497},{"_id":"public/categories/html5/index.html","hash":"764b5ca066daf987be979651db822dc1faf2086e","modified":1554364889497},{"_id":"public/archives/index.html","hash":"e686a65a276123008c640d78c00bc6da5315385d","modified":1554364889475},{"_id":"public/archives/page/2/index.html","hash":"fdc9430d0d20fb52a984cab0f3bca7713279d661","modified":1554364889475},{"_id":"public/archives/page/3/index.html","hash":"cf7865937668eeb0b03ce5072af38e78384e7147","modified":1554364889475},{"_id":"public/archives/page/4/index.html","hash":"9a5ae257c4347806ccf032247f6fe0eb2df7d980","modified":1554364889475},{"_id":"public/archives/page/5/index.html","hash":"c2f086c820938f2d396288bfd7615d2db9fd3f40","modified":1554364889475},{"_id":"public/archives/page/6/index.html","hash":"5caa024ad0438457942ac0fb8e30440255fdec26","modified":1554364889475},{"_id":"public/archives/page/7/index.html","hash":"402984454130bb7bc5fe19eebec4b6188d6587bb","modified":1554364889475},{"_id":"public/archives/2017/index.html","hash":"bb49fcba62fbed37299714d98b0b0f2db256e346","modified":1554364889475},{"_id":"public/archives/2017/page/2/index.html","hash":"29c76087f4f6c60e723023a61dfe678510d0f1b8","modified":1554364889476},{"_id":"public/archives/2017/page/3/index.html","hash":"c32f91c22c40a15a84197b71742a9e9df330610f","modified":1554364889476},{"_id":"public/archives/2017/page/4/index.html","hash":"274e2c80a98d4acef2ffbfa68ef8564a91eddd14","modified":1554364889476},{"_id":"public/archives/2017/page/5/index.html","hash":"2614799c810e8aab29f029be81090d8bb30b7bbb","modified":1554364889476},{"_id":"public/archives/2017/08/index.html","hash":"b702ed6651bee756fd614b144b58945b7493220a","modified":1554364889476},{"_id":"public/archives/2017/09/index.html","hash":"c9bcea36bd04d6182110dd29af2e73d4c84a5bc9","modified":1554364889476},{"_id":"public/archives/2017/10/index.html","hash":"cde6bd02ec0feb0f331a0b5a4931180de1c4f271","modified":1554364889476},{"_id":"public/archives/2017/11/index.html","hash":"68ef0925e956fdf58c7bef0cc2ba09c530a0a539","modified":1554364889476},{"_id":"public/archives/2017/12/index.html","hash":"1cb12d15e40a542d0810b7a53dd2066abee4f16f","modified":1554364889477},{"_id":"public/archives/2017/12/page/2/index.html","hash":"36d29b10ffe3540d5d28d0e1897d60011e7d0c9f","modified":1554364889477},{"_id":"public/archives/2018/index.html","hash":"60d0a15bed1b3a86e33e1f5478f0928c33421c71","modified":1554364889477},{"_id":"public/archives/2018/page/2/index.html","hash":"01e9f899e49d0789961e2bd3889f9f01c3a8b6f7","modified":1554364889477},{"_id":"public/archives/2018/01/index.html","hash":"c374b405496a59f1d575bab3b00b8b46cf9d469f","modified":1554364889477},{"_id":"public/archives/2018/03/index.html","hash":"f6b83fa21dd8bd1d4fd3c36444242b94e4c8ad65","modified":1554364889477},{"_id":"public/archives/2018/04/index.html","hash":"3f589033f7dfc600eb02ca6fde68cad12ca3bae4","modified":1554364889477},{"_id":"public/archives/2018/05/index.html","hash":"6b54e013da46e8e33e1b074994d50e98e19d27db","modified":1554364889477},{"_id":"public/archives/2018/06/index.html","hash":"50f83b4741e1fdca883d6dcdada864461dfaa201","modified":1554364889477},{"_id":"public/archives/2018/08/index.html","hash":"8f6793af1aee88e2e1dea3a28d9d5a9eb249c695","modified":1554364889477},{"_id":"public/archives/2018/09/index.html","hash":"3e5d39ff61bfbadf19dce99037db260821ede73d","modified":1554364889477},{"_id":"public/archives/2018/10/index.html","hash":"eb996c4261451824ddda204914714e489c136640","modified":1554364889477},{"_id":"public/archives/2018/12/index.html","hash":"aa1359a20d02f29ed448a289d0a00a9fce38bc03","modified":1554364889477},{"_id":"public/archives/2019/index.html","hash":"391b9700931f538f3b19718c98e7965b35696942","modified":1554364889477},{"_id":"public/archives/2019/01/index.html","hash":"8f7f48e32963c5b2ca409e8280fbb99df5c2c8c8","modified":1554364889477},{"_id":"public/archives/2019/02/index.html","hash":"35728af73457385146b7cf648f494e412546354e","modified":1554364889477},{"_id":"public/archives/2019/04/index.html","hash":"96b1f1d06ac9a918660de0f0da32e46e1ab24549","modified":1554364889477},{"_id":"public/index.html","hash":"fe0a0857763bcf8e490924b5aff11d3e44cbfc77","modified":1554364889471},{"_id":"public/page/2/index.html","hash":"c9cb7dd6f559147ad2e02e710ace5b5a8397e469","modified":1554364889471},{"_id":"public/page/3/index.html","hash":"6276e111dd43060e788922883dda61571ea4ab95","modified":1554364889471},{"_id":"public/page/4/index.html","hash":"39f632e0da921d3945ba7957f68d0c0e1482d61a","modified":1554364889472},{"_id":"public/page/5/index.html","hash":"addf71702e411fea41277e0fc1b4bc4d36893a90","modified":1554364889472},{"_id":"public/page/6/index.html","hash":"bb1d59c09674f3a2c7b579ca3507557496a25f4a","modified":1554364889472},{"_id":"public/page/7/index.html","hash":"bd49604c854525f45ed420bac25ae84e74b8bc8a","modified":1554364889472},{"_id":"public/tags/blob/index.html","hash":"e8dbb16df3633c1f64ec647c6319b32c57aee933","modified":1554364889472},{"_id":"public/tags/bfc/index.html","hash":"3066c8818ca295cb9ae47466627225d3f3d94078","modified":1554364889472},{"_id":"public/tags/垂直居中/index.html","hash":"a067f4b160713ad54b4790e81e5b911403f71d27","modified":1554364889472},{"_id":"public/tags/CSS-居中/index.html","hash":"7126d8a5b1297b49d6fb69119eb2bc534e54fa53","modified":1554364889472},{"_id":"public/tags/函数式编程/index.html","hash":"53afc78327f1fd6b1d2d884e45a6a0cdc39070a3","modified":1554364889472},{"_id":"public/tags/CSS层叠/index.html","hash":"42b3dfef51a7c7046423aadf776381eb40507d09","modified":1554364889472},{"_id":"public/tags/ajax/index.html","hash":"a459b5f48317bbe23b41ffe76f403db49ab76e3b","modified":1554364889472},{"_id":"public/tags/css-modules/index.html","hash":"49d34fb88d39e6a26d9eb1bebe6b373a29c040aa","modified":1554364889473},{"_id":"public/tags/Map-Set/index.html","hash":"6c439b8493dcdacbf8ef71bb33dec9afec4586a4","modified":1554364889473},{"_id":"public/tags/组件通信/index.html","hash":"c61027798d671a0a2d03290258642bd7ad5507e9","modified":1554364889473},{"_id":"public/tags/变量解构赋值/index.html","hash":"9bc1043887a4d0f03b65c0dd43b6f44d4945ceb1","modified":1554364889473},{"_id":"public/tags/promise/index.html","hash":"592d6750d5ea6d087d1d6228fb19aaa2cd1b546f","modified":1554364889473},{"_id":"public/tags/vue-响应原理/index.html","hash":"61c671235f13145f737677e625e141b143536860","modified":1554364889473},{"_id":"public/tags/grid-布局/index.html","hash":"c8020ee4b2b6fc38bff27d6607396526abfb12ae","modified":1554364889473},{"_id":"public/tags/对象扩展/index.html","hash":"81c7596440f61c77c7da908d10837a0ab27d96a6","modified":1554364889473},{"_id":"public/tags/js-链表/index.html","hash":"c6f293036d5a61d9e9667aae918dc81ef0246c38","modified":1554364889473},{"_id":"public/tags/fileReader/index.html","hash":"a3f7b975702e21ca3cf4ec2903d59272e517ea0b","modified":1554364889473},{"_id":"public/tags/EventEmitter/index.html","hash":"c1e816dcab89571021120f500cc83498665e4e57","modified":1554364889473},{"_id":"public/tags/node-js-基础/index.html","hash":"0a30fae4b69f6ee92e64ce1fa7e1ceef08a3b0bc","modified":1554364889473},{"_id":"public/tags/0/index.html","hash":"46f52291642edb7387ff3dae642dfd15896a8d6e","modified":1554364889473},{"_id":"public/tags/Timers/index.html","hash":"3f6d134ad3527f496598484b8eb82d9dfda76912","modified":1554364889473},{"_id":"public/tags/toolTip/index.html","hash":"6768381b5ef794b2d0d827305d2ff9e77050c298","modified":1554364889473},{"_id":"public/tags/transform/index.html","hash":"465fff35a40f88731c393477790afd6c905ea7c7","modified":1554364889473},{"_id":"public/tags/this-nextTick/index.html","hash":"175488138c31c0d9f480087ee0a887eedbb465ff","modified":1554364889473},{"_id":"public/tags/underscore-js源码/index.html","hash":"c7683308d9ce51cf85960015f86976ef8c493142","modified":1554364889473},{"_id":"public/tags/vertical-align-line-height/index.html","hash":"7715805312ea1d8d57daac6ff1bbddb68cc11fd2","modified":1554364889474},{"_id":"public/tags/underscore-js源码/page/2/index.html","hash":"fa1ea20d0d9dee0d423c57a339f0506aae310619","modified":1554364889474},{"_id":"public/tags/vue-知识总结（一）/index.html","hash":"b47f312cbc5732687e69b9f4efdff241d6341f33","modified":1554364889474},{"_id":"public/tags/事件监听/index.html","hash":"ad85651809258b43741825276178b1475581d234","modified":1554364889474},{"_id":"public/tags/whileordo/index.html","hash":"b93d89d320b0fafd11ce3b3bf546ae1c02943024","modified":1554364889474},{"_id":"public/tags/作用域/index.html","hash":"1dee05e94de48220bd5a354a23b065465a06d05d","modified":1554364889474},{"_id":"public/tags/节流/index.html","hash":"06260a3a1dc264b0e293a8357125e971b4ba5956","modified":1554364889474},{"_id":"public/tags/route/index.html","hash":"ef18ea66d336527e6e598d61fb236679bda4ee92","modified":1554364889474},{"_id":"public/tags/对象复制/index.html","hash":"433dad5c3f6129c6b7e45fff33f1afdde2bc5a18","modified":1554364889474},{"_id":"public/tags/算法/index.html","hash":"7ff7320212767b79d22827fab3d6914ae884046d","modified":1554364889474},{"_id":"public/tags/日历/index.html","hash":"fb21d3969315a982ae43a737807e468af73db426","modified":1554364889474},{"_id":"public/tags/正则表达式/index.html","hash":"5d3f1311363d56b85e08386562bfcce7a0afeee8","modified":1554364889474},{"_id":"public/tags/mechine-函数/index.html","hash":"afa6f4eafff0c69c032f427087a8cfe2a8cd6a2a","modified":1554364889474},{"_id":"public/tags/浏览器渲染/index.html","hash":"0cd5bb4d83a674c3a1aa95ff67855721d7c616f2","modified":1554364889474},{"_id":"public/tags/二叉树/index.html","hash":"4ab4e3c0546f745cd5b1f4e09b6d569662e36f82","modified":1554364889474},{"_id":"public/tags/移动端touch事件/index.html","hash":"4632eeb81e8073b3c585579e43247583871245e7","modified":1554364889474},{"_id":"public/tags/js-类/index.html","hash":"2c1837d4d36f41baa9acbb428a94aebec22f26d0","modified":1554364889474},{"_id":"public/tags/js运行机制，线程/index.html","hash":"0152c4b6985b8788a972bdaa70a44cbbb40cde70","modified":1554364889475},{"_id":"public/tags/数组/index.html","hash":"ac5424fcb769d3d28a0be25cdb8dcff104d0553b","modified":1554364889475},{"_id":"public/tags/window-location/index.html","hash":"f18e7a24922e181b84e1ea4032d18d24e588d4d3","modified":1554364889475},{"_id":"public/favicon.ico","hash":"1beb6370d30df3caac5e51beff6bb25ca5d9a8a5","modified":1554364889511},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1554364889511},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554364889511},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554364889511},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1554364889511},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1554364889511},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1554364889512},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1554364889512},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1554364889512},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554364889512},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1554364889512},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1554364889512},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554364889512},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554364889512},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1554364889512},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554364889512},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554364889512},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1554364889512},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554364889512},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554364889512},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554364889512},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554364889512},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554364889512},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554364889513},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554364889513},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554364889513},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554364889513},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554364889513},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554364889513},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554364889513},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554364889513},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554364889513},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554364889513},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554364889513},{"_id":"public/2019/04/01/实现mechine函数/imageconsole.png","hash":"8ed745331df1d0794412c6f0c5e0b500603037cd","modified":1554364889513},{"_id":"public/2019/04/01/实现mechine函数/mechine.png","hash":"f91fd01a6212578e3c9d27498a708ce7369bc97a","modified":1554364889513},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554364890503},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554364890552},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554364890587},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1554364890587},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554364890587},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554364890587},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1554364890587},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1554364890587},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1554364890587},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1554364890588},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554364890588},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1554364890588},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554364890588},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1554364890588},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554364890588},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1554364890588},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554364890588},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1554364890588},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554364890588},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554364890588},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1554364890588},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554364890588},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554364890588},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554364890589},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554364890589},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554364890589},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1554364890589},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554364890589},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554364890590},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1554364890590},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554364890590},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554364890590},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554364890590},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554364890590},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554364890590},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554364890590},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554364890590},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554364890590},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554364890590},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1554364890590},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1554364890591},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1554364890591},{"_id":"public/css/main.css","hash":"866d48bb1b2ba9cdb6fd2fcd4e20e063dc9fd6de","modified":1554364890591},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1554364890591},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1554364890591},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1554364890591},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1554364890591},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1554364890591},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554364890591},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554364890591},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1554364890592},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1554364890591},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554364890591},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1554364890592},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554364890592},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554364890593},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554364890592},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554364890592},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554364890593},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1554364890594},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554364890594},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554364890594},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1554364890594},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554364890595},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554364890596},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554364890596},{"_id":"public/images/avatar.jpg","hash":"828c8f220cb6a36f285d40c8449d851ad96427f8","modified":1554364890640},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554364890765},{"_id":"public/atom.xml","hash":"0faa094d2c4aab95d736b04ad7881ae899e0d87f","modified":1554364889143},{"_id":"public/sitemap.xml","hash":"0497cb95ac02cbe62b50434ccf16db07075c2440","modified":1554364889416}],"Category":[{"name":"js","_id":"cju23oh6g0004s33gahnbfwtz"},{"name":"CSS","_id":"cju23oh6t0009s33gx6tlgkdb"},{"name":"翻译文集","_id":"cju23oh7g000ss33gllzryx9z"},{"name":"代码集","_id":"cju23oh7j000zs33gvu9u0598"},{"name":"es6","_id":"cju23oh7m0015s33g4zplcfbv"},{"name":"Vue","_id":"cju23oh7s001ds33g54svwq37"},{"name":"数据结构","_id":"cju23oh8r0028s33gso1yt0lq"},{"name":"node.js","_id":"cju23oh8x002gs33gbvbwjvfc"},{"name":"underscore.js 源码分析","_id":"cju23oh9f002ys33gj9ruvrdg"},{"name":"vue","_id":"cju23ohb40057s33gsxqm8zen"},{"name":"笔记","_id":"cju23ohb8005fs33gs39sqtt9"},{"name":"js读书总结","_id":"cju23ohbj005ts33gatowcerb"},{"name":"生活","_id":"cju23ohbn0061s33gb5j9loau"},{"name":"js理论基础","_id":"cju23ohbr006ds33gfngw1eb8"},{"name":"读书笔记","_id":"cju23ohbs006is33gkot9jo7o"},{"name":"html5","_id":"cju23ohbv006ps33gvhfjfcts"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-20T02:20:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-20 10:20:44\ntype: \"categories\"\n---\n","updated":"2017-08-20T02:21:12.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cju23oh5w0000s33g7qqh51uw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-08-20T02:16:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-20 10:16:58\ntype: 'tags'\n---\n","updated":"2017-08-20T02:17:42.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cju23oh6b0002s33gid5x2ri1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"blob 对象","date":"2019-01-12T08:44:49.000Z","_content":"\njs 中的 blob 数据类型：\n\n### Blob\n\n###### 什么是 blob ？\n\nblob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。\n\n在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。\n\n\n\n###### 创建 blob：\n\n```javascript\nnew Blob(array, [,options]);\n// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.\n// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型\n```\n\n如下， 将字符串保存到 blob 中， type 为 “text／plain”\n\n```\nconst blob = new Blob([\"hello world\"], { type: 'text/plain' });\n```\n\n\n\n###### 读取blob\n\n如果我们直接打印出 blob 是不能打印出来的\n\n```javascript\nBlob(11) {size: 11, type: \"text/plain\"}\n```\n\n我们可以通过使用 FileReader 读取 blob 中的数据：\n\n> FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n\n```javascript\nconst reader = new FileReader();\nreader.readAsText(blob);\nrader.onloadend = () => {\n  console.log(\"result\", reader.result);\n};\n// result \"hello world\"\n```\n\n\n\n###### 我们可以使用 blob来做什么？\n\nblob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。","source":"_posts/Blob.md","raw":"---\ntitle: blob 对象\ndate: 2019-01-12 16:44:49\ntags: blob\ncategories: js\n---\n\njs 中的 blob 数据类型：\n\n### Blob\n\n###### 什么是 blob ？\n\nblob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。\n\n在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。\n\n\n\n###### 创建 blob：\n\n```javascript\nnew Blob(array, [,options]);\n// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.\n// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型\n```\n\n如下， 将字符串保存到 blob 中， type 为 “text／plain”\n\n```\nconst blob = new Blob([\"hello world\"], { type: 'text/plain' });\n```\n\n\n\n###### 读取blob\n\n如果我们直接打印出 blob 是不能打印出来的\n\n```javascript\nBlob(11) {size: 11, type: \"text/plain\"}\n```\n\n我们可以通过使用 FileReader 读取 blob 中的数据：\n\n> FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 [FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n\n```javascript\nconst reader = new FileReader();\nreader.readAsText(blob);\nrader.onloadend = () => {\n  console.log(\"result\", reader.result);\n};\n// result \"hello world\"\n```\n\n\n\n###### 我们可以使用 blob来做什么？\n\nblob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。","slug":"Blob","published":1,"updated":"2019-01-12T08:52:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh610001s33g8x3tnqlw","content":"<p>js 中的 blob 数据类型：</p>\n<h3 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h3><h6 id=\"什么是-blob-？\"><a href=\"#什么是-blob-？\" class=\"headerlink\" title=\"什么是 blob ？\"></a>什么是 blob ？</h6><p>blob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。</p>\n<p>在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。</p>\n<h6 id=\"创建-blob：\"><a href=\"#创建-blob：\" class=\"headerlink\" title=\"创建 blob：\"></a>创建 blob：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Blob(array, [,options]);</span><br><span class=\"line\"><span class=\"comment\">// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.</span></span><br><span class=\"line\"><span class=\"comment\">// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n<p>如下， 将字符串保存到 blob 中， type 为 “text／plain”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blob = new Blob([&quot;hello world&quot;], &#123; type: &apos;text/plain&apos; &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"读取blob\"><a href=\"#读取blob\" class=\"headerlink\" title=\"读取blob\"></a>读取blob</h6><p>如果我们直接打印出 blob 是不能打印出来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blob(<span class=\"number\">11</span>) &#123;<span class=\"attr\">size</span>: <span class=\"number\">11</span>, <span class=\"attr\">type</span>: <span class=\"string\">\"text/plain\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过使用 FileReader 读取 blob 中的数据：</p>\n<blockquote>\n<p>FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsText(blob);</span><br><span class=\"line\">rader.onloadend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result\"</span>, reader.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result \"hello world\"</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"我们可以使用-blob来做什么？\"><a href=\"#我们可以使用-blob来做什么？\" class=\"headerlink\" title=\"我们可以使用 blob来做什么？\"></a>我们可以使用 blob来做什么？</h6><p>blob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>js 中的 blob 数据类型：</p>\n<h3 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h3><h6 id=\"什么是-blob-？\"><a href=\"#什么是-blob-？\" class=\"headerlink\" title=\"什么是 blob ？\"></a>什么是 blob ？</h6><p>blob 代表了一个存放文d件数据的字节包， 使用 blob 可以代替 file， 我们可以在使用 file 的地方使用 blob 作为代替。同样， blob也有和 文件 file 类似的 size 和 MIME 属性。</p>\n<p>在 blob 中可以存放二进制数据， 同时我们可以使用 arrayBuffer 进行读取数据。</p>\n<h6 id=\"创建-blob：\"><a href=\"#创建-blob：\" class=\"headerlink\" title=\"创建 blob：\"></a>创建 blob：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Blob(array, [,options]);</span><br><span class=\"line\"><span class=\"comment\">// array is an Array of ArrayBuffer, ArrayBufferView, Blob, DOMString objects, or a mix // of any of such objects, that will be put inside the Blob. DOMStrings are encoded as // UTF-8.</span></span><br><span class=\"line\"><span class=\"comment\">// options 是可选的额外参数， 比如， 可以传递一个 type， 表示放入 blob 中的数据的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n<p>如下， 将字符串保存到 blob 中， type 为 “text／plain”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blob = new Blob([&quot;hello world&quot;], &#123; type: &apos;text/plain&apos; &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"读取blob\"><a href=\"#读取blob\" class=\"headerlink\" title=\"读取blob\"></a>读取blob</h6><p>如果我们直接打印出 blob 是不能打印出来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Blob(<span class=\"number\">11</span>) &#123;<span class=\"attr\">size</span>: <span class=\"number\">11</span>, <span class=\"attr\">type</span>: <span class=\"string\">\"text/plain\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过使用 FileReader 读取 blob 中的数据：</p>\n<blockquote>\n<p>FileReader 是 web 用来异步读取电脑上的文件或者blob数据的对象， 其对于从web端操作文件提供了一系列的方法， 具体内容查看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsText(blob);</span><br><span class=\"line\">rader.onloadend = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"result\"</span>, reader.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result \"hello world\"</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"我们可以使用-blob来做什么？\"><a href=\"#我们可以使用-blob来做什么？\" class=\"headerlink\" title=\"我们可以使用 blob来做什么？\"></a>我们可以使用 blob来做什么？</h6><p>blob 提供了用于操作二进制数据的一些接口， 一些可以用来操作二进制数据的api 比如 file 对象， 都是建立在blob的对象基础之上的， 继承了blob 的一些属性和方法。</p>\n"},{"title":"CSS块状格式化上下文(BFC)","date":"2017-09-17T01:37:10.000Z","_content":"\n### BFC 的概念\n\nbfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 `blcok-level` 块状水平的 `box` 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。\n\n### BFC 的创建\n\n创建块状格式化上下文的方式有以下几种:\n\n* `float` 的值不为 `none`\n* `position` 的值不为 `static` 或者 `relative`\n* `display` 的值为 `table-cell`  `table-caption` `inline-block` `flex` `inline-flex` 中的其中一个\n* `overflow` 的值不为 `visible` (通过设置 `overflow: hidden`)\n\n我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素\n\n### BFC 的布局规则\n\n>In a block formatting context:\n>\n>- boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block boxes in a block formatting context collapse.\n>- each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n在BFC 中: \n\n* 垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 `margin` 特性决定的，在相邻的块状元素的垂直 `margin` 上会出现外边距折叠的问题\n* 每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC\n\n### BFC 的应用\n\n#### 1. 使用 BFC 用来解决外边距折叠问题\n\n****\n\n外边距折叠是特定的相邻的外边距会形成一个单独的外边距，`collpase margin` 发生在下面的这些情况:\n\n* 元素为空元素\n* `padding` 或者 `border` 为 0\n* `no clearance to seperate them` ? 什么意思\n\n更多详细的的内容 :  https://www.w3.org/TR/css3-box/#compact-boxes\n\n对于外边距坍塌，最终形成的外边距遵循的是 `M-N` 原则: \n\n如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 `M`\n\n如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 `N`\n\n如果外边距是 `none` , 得到的坍塌之后的外边距是 0\n\n\n\n存在边距坍塌的几种情况\n\n1. 相邻的块状元素之间出现外边距坍塌\n2. 父元素和内部的子元素出现的外边距坍塌\n\n****\n\n使用块状格式化上下文解决外边距层叠:\n\ncss 代码如下 :\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b2\">\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n}\n.b1, .b2 {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png)\n\n如上图所示, 父元素`container` 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 `div` `margin`  都设为 10, 最后出现折叠之后的 `margin` 也变成了 10 ，出现了元素折叠的现象\n\n如何解决： 使用 `overflow: hidden` 创建 bfc\n\n当我们给父元素创建 bfc 之后, \n\n```\n.container {\n  overflow: hidden\n}\n```\n\n可以看到:\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png)\n\n这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象\n\n但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b3\">\n\t\t<div class=\"b2\">\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n.b3 {\n  overflow: hidden\n}\n</style>\n```\n\n上面的代码中, 我们给子元素 `b2` 上创建了一个父元素，给这个父元素创建bfc \n\n最终结果如下:\n\n ![](http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png)  \n\n最终我们可以看到，因为对于 `b3` 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  \n\n#### 2.使用 BFC 进行浮动的清除\n\n使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t我是浮动元素\n\t</div>\n\t<div class=\"b2\">\n\t我是浮动的元素\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n  overflow: hidden;\n}\n.b1, .b2 {\n  float: left;\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n结果如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png)  \n\n如上图所示，使用了 bfc 清除了由于使用 `float:left` 造成的浮动现象  浮动元素的父元素高度依然存在\n\n#### 3. 使用 BFC 实现两栏自适应布局 \n\n在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：\n\n```\n<body>\n   <div class=\"container\">\n       <div class=\"aside\"></div>\n       <div class=\"main\"></div>\n   </div>\n</body>\n<style type=\"text/css\">\n   .container  {\n        width: 300px;\n   }\n   .aside {\n    width: 20%;\n    float: left;\n    height: 100px;\n    background-color: red;\n   }\n   .main {\n    width: 80%;\n    height: 200px;\n    background-color: blue;\n   }\n</style>\n```\n\n\n\n图片如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)\n\n即使 `aside` 浮动，`main` 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？\n\n根据上面的布局规则， 我们可以给 `main` 创建一个块状格式化上下文，这样，`main` 的布局就不会受到 `aside` 元素的影响\n\n```\n.main {\n  width: 80%;\n  height: 200px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n最终，我们得到了自适应布局: 从而得到了一个两栏布局\n\n![](http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)","source":"_posts/BFC.md","raw":"---\ntitle: CSS块状格式化上下文(BFC)\ndate: 2017-09-17 09:37:10\ntags: bfc\ncategories: CSS\n---\n\n### BFC 的概念\n\nbfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 `blcok-level` 块状水平的 `box` 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。\n\n### BFC 的创建\n\n创建块状格式化上下文的方式有以下几种:\n\n* `float` 的值不为 `none`\n* `position` 的值不为 `static` 或者 `relative`\n* `display` 的值为 `table-cell`  `table-caption` `inline-block` `flex` `inline-flex` 中的其中一个\n* `overflow` 的值不为 `visible` (通过设置 `overflow: hidden`)\n\n我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素\n\n### BFC 的布局规则\n\n>In a block formatting context:\n>\n>- boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block boxes in a block formatting context collapse.\n>- each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box's line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).\n\n在BFC 中: \n\n* 垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 `margin` 特性决定的，在相邻的块状元素的垂直 `margin` 上会出现外边距折叠的问题\n* 每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC\n\n### BFC 的应用\n\n#### 1. 使用 BFC 用来解决外边距折叠问题\n\n****\n\n外边距折叠是特定的相邻的外边距会形成一个单独的外边距，`collpase margin` 发生在下面的这些情况:\n\n* 元素为空元素\n* `padding` 或者 `border` 为 0\n* `no clearance to seperate them` ? 什么意思\n\n更多详细的的内容 :  https://www.w3.org/TR/css3-box/#compact-boxes\n\n对于外边距坍塌，最终形成的外边距遵循的是 `M-N` 原则: \n\n如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 `M`\n\n如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 `N`\n\n如果外边距是 `none` , 得到的坍塌之后的外边距是 0\n\n\n\n存在边距坍塌的几种情况\n\n1. 相邻的块状元素之间出现外边距坍塌\n2. 父元素和内部的子元素出现的外边距坍塌\n\n****\n\n使用块状格式化上下文解决外边距层叠:\n\ncss 代码如下 :\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b2\">\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n}\n.b1, .b2 {\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png)\n\n如上图所示, 父元素`container` 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 `div` `margin`  都设为 10, 最后出现折叠之后的 `margin` 也变成了 10 ，出现了元素折叠的现象\n\n如何解决： 使用 `overflow: hidden` 创建 bfc\n\n当我们给父元素创建 bfc 之后, \n\n```\n.container {\n  overflow: hidden\n}\n```\n\n可以看到:\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png)\n\n这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象\n\n但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t</div>\n\t<div class=\"b3\">\n\t\t<div class=\"b2\">\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n.b3 {\n  overflow: hidden\n}\n</style>\n```\n\n上面的代码中, 我们给子元素 `b2` 上创建了一个父元素，给这个父元素创建bfc \n\n最终结果如下:\n\n ![](http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png)  \n\n最终我们可以看到，因为对于 `b3` 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  \n\n#### 2.使用 BFC 进行浮动的清除\n\n使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况\n\n```\n<div class=\"container\">\n\t<div class=\"b1\">\n\t我是浮动元素\n\t</div>\n\t<div class=\"b2\">\n\t我是浮动的元素\n\t</div>\n</div>\n<style>\n.container {\n  background: blue;\n  overflow: hidden;\n}\n.b1, .b2 {\n  float: left;\n  width: 100px;\n  height: 50px;\n  margin: 10px;\n  background: red;\n}\n</style>\n```\n\n结果如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png)  \n\n如上图所示，使用了 bfc 清除了由于使用 `float:left` 造成的浮动现象  浮动元素的父元素高度依然存在\n\n#### 3. 使用 BFC 实现两栏自适应布局 \n\n在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：\n\n```\n<body>\n   <div class=\"container\">\n       <div class=\"aside\"></div>\n       <div class=\"main\"></div>\n   </div>\n</body>\n<style type=\"text/css\">\n   .container  {\n        width: 300px;\n   }\n   .aside {\n    width: 20%;\n    float: left;\n    height: 100px;\n    background-color: red;\n   }\n   .main {\n    width: 80%;\n    height: 200px;\n    background-color: blue;\n   }\n</style>\n```\n\n\n\n图片如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)\n\n即使 `aside` 浮动，`main` 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？\n\n根据上面的布局规则， 我们可以给 `main` 创建一个块状格式化上下文，这样，`main` 的布局就不会受到 `aside` 元素的影响\n\n```\n.main {\n  width: 80%;\n  height: 200px;\n  background-color: blue;\n  overflow: hidden;\n}\n```\n\n最终，我们得到了自适应布局: 从而得到了一个两栏布局\n\n![](http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png)","slug":"BFC","published":1,"updated":"2017-09-17T08:15:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6c0003s33ghgzib9ah","content":"<h3 id=\"BFC-的概念\"><a href=\"#BFC-的概念\" class=\"headerlink\" title=\"BFC 的概念\"></a>BFC 的概念</h3><p>bfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 <code>blcok-level</code> 块状水平的 <code>box</code> 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。</p>\n<h3 id=\"BFC-的创建\"><a href=\"#BFC-的创建\" class=\"headerlink\" title=\"BFC 的创建\"></a>BFC 的创建</h3><p>创建块状格式化上下文的方式有以下几种:</p>\n<ul>\n<li><code>float</code> 的值不为 <code>none</code></li>\n<li><code>position</code> 的值不为 <code>static</code> 或者 <code>relative</code></li>\n<li><code>display</code> 的值为 <code>table-cell</code>  <code>table-caption</code> <code>inline-block</code> <code>flex</code> <code>inline-flex</code> 中的其中一个</li>\n<li><code>overflow</code> 的值不为 <code>visible</code> (通过设置 <code>overflow: hidden</code>)</li>\n</ul>\n<p>我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素</p>\n<h3 id=\"BFC-的布局规则\"><a href=\"#BFC-的布局规则\" class=\"headerlink\" title=\"BFC 的布局规则\"></a>BFC 的布局规则</h3><blockquote>\n<p>In a block formatting context:</p>\n<ul>\n<li>boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block boxes in a block formatting context collapse.</li>\n<li>each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</li>\n</ul>\n</blockquote>\n<p>在BFC 中: </p>\n<ul>\n<li>垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 <code>margin</code> 特性决定的，在相邻的块状元素的垂直 <code>margin</code> 上会出现外边距折叠的问题</li>\n<li>每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC</li>\n</ul>\n<h3 id=\"BFC-的应用\"><a href=\"#BFC-的应用\" class=\"headerlink\" title=\"BFC 的应用\"></a>BFC 的应用</h3><h4 id=\"1-使用-BFC-用来解决外边距折叠问题\"><a href=\"#1-使用-BFC-用来解决外边距折叠问题\" class=\"headerlink\" title=\"1. 使用 BFC 用来解决外边距折叠问题\"></a>1. 使用 BFC 用来解决外边距折叠问题</h4><hr>\n<p>外边距折叠是特定的相邻的外边距会形成一个单独的外边距，<code>collpase margin</code> 发生在下面的这些情况:</p>\n<ul>\n<li>元素为空元素</li>\n<li><code>padding</code> 或者 <code>border</code> 为 0</li>\n<li><code>no clearance to seperate them</code> ? 什么意思</li>\n</ul>\n<p>更多详细的的内容 :  <a href=\"https://www.w3.org/TR/css3-box/#compact-boxes\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/css3-box/#compact-boxes</a></p>\n<p>对于外边距坍塌，最终形成的外边距遵循的是 <code>M-N</code> 原则: </p>\n<p>如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 <code>M</code></p>\n<p>如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 <code>N</code></p>\n<p>如果外边距是 <code>none</code> , 得到的坍塌之后的外边距是 0</p>\n<p>存在边距坍塌的几种情况</p>\n<ol>\n<li>相邻的块状元素之间出现外边距坍塌</li>\n<li>父元素和内部的子元素出现的外边距坍塌</li>\n</ol>\n<hr>\n<p>使用块状格式化上下文解决外边距层叠:</p>\n<p>css 代码如下 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png\" alt=\"\"></p>\n<p>如上图所示, 父元素<code>container</code> 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 <code>div</code> <code>margin</code>  都设为 10, 最后出现折叠之后的 <code>margin</code> 也变成了 10 ，出现了元素折叠的现象</p>\n<p>如何解决： 使用 <code>overflow: hidden</code> 创建 bfc</p>\n<p>当我们给父元素创建 bfc 之后, </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png\" alt=\"\"></p>\n<p>这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象</p>\n<p>但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b3&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.b3 &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中, 我们给子元素 <code>b2</code> 上创建了一个父元素，给这个父元素创建bfc </p>\n<p>最终结果如下:</p>\n<p> <img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png\" alt=\"\">  </p>\n<p>最终我们可以看到，因为对于 <code>b3</code> 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  </p>\n<h4 id=\"2-使用-BFC-进行浮动的清除\"><a href=\"#2-使用-BFC-进行浮动的清除\" class=\"headerlink\" title=\"2.使用 BFC 进行浮动的清除\"></a>2.使用 BFC 进行浮动的清除</h4><p>使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t我是浮动元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t我是浮动的元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>结果如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png\" alt=\"\">  </p>\n<p>如上图所示，使用了 bfc 清除了由于使用 <code>float:left</code> 造成的浮动现象  浮动元素的父元素高度依然存在</p>\n<h4 id=\"3-使用-BFC-实现两栏自适应布局\"><a href=\"#3-使用-BFC-实现两栏自适应布局\" class=\"headerlink\" title=\"3. 使用 BFC 实现两栏自适应布局\"></a>3. 使用 BFC 实现两栏自适应布局</h4><p>在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">   .container  &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .aside &#123;</span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .main &#123;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>图片如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt=\"\"></p>\n<p>即使 <code>aside</code> 浮动，<code>main</code> 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？</p>\n<p>根据上面的布局规则， 我们可以给 <code>main</code> 创建一个块状格式化上下文，这样，<code>main</code> 的布局就不会受到 <code>aside</code> 元素的影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  width: 80%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终，我们得到了自适应布局: 从而得到了一个两栏布局</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BFC-的概念\"><a href=\"#BFC-的概念\" class=\"headerlink\" title=\"BFC 的概念\"></a>BFC 的概念</h3><p>bfc 被称作: 块状格式化上下文，通过创建 bfc 可以创建出一块独立的渲染区域，在这个区域内，bfc 仅仅对于 <code>blcok-level</code> 块状水平的 <code>box</code> 起作用，bfc 上下文规定了内部的块状水平 box 如何起作用，并且创建了块状格式化上下文的容器，内部元素的布局方式不会影响到外部的区域，因此，我们可以使用 bfc 的概念实现对于浮动的清除。</p>\n<h3 id=\"BFC-的创建\"><a href=\"#BFC-的创建\" class=\"headerlink\" title=\"BFC 的创建\"></a>BFC 的创建</h3><p>创建块状格式化上下文的方式有以下几种:</p>\n<ul>\n<li><code>float</code> 的值不为 <code>none</code></li>\n<li><code>position</code> 的值不为 <code>static</code> 或者 <code>relative</code></li>\n<li><code>display</code> 的值为 <code>table-cell</code>  <code>table-caption</code> <code>inline-block</code> <code>flex</code> <code>inline-flex</code> 中的其中一个</li>\n<li><code>overflow</code> 的值不为 <code>visible</code> (通过设置 <code>overflow: hidden</code>)</li>\n</ul>\n<p>我的理解： 对于创建了块状格式化上下文的元素，在元素内部相当于定义了一个单独的区域，在这个区域内，内部子元素的布局不会影响到外部的元素</p>\n<h3 id=\"BFC-的布局规则\"><a href=\"#BFC-的布局规则\" class=\"headerlink\" title=\"BFC 的布局规则\"></a>BFC 的布局规则</h3><blockquote>\n<p>In a block formatting context:</p>\n<ul>\n<li>boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block boxes in a block formatting context collapse.</li>\n<li>each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</li>\n</ul>\n</blockquote>\n<p>在BFC 中: </p>\n<ul>\n<li>垂直方向上，内部的 box 元素从包含块的顶部开始一个接一个的布局，两个相邻块之间的垂直距离是有 <code>margin</code> 特性决定的，在相邻的块状元素的垂直 <code>margin</code> 上会出现外边距折叠的问题</li>\n<li>每一个块状元素的左边缘会紧紧跟在包含块的左边缘，甚至当有浮动元素存在的情况下也是一样的道理，除非这个块状元素创建了一个新的 BFC</li>\n</ul>\n<h3 id=\"BFC-的应用\"><a href=\"#BFC-的应用\" class=\"headerlink\" title=\"BFC 的应用\"></a>BFC 的应用</h3><h4 id=\"1-使用-BFC-用来解决外边距折叠问题\"><a href=\"#1-使用-BFC-用来解决外边距折叠问题\" class=\"headerlink\" title=\"1. 使用 BFC 用来解决外边距折叠问题\"></a>1. 使用 BFC 用来解决外边距折叠问题</h4><hr>\n<p>外边距折叠是特定的相邻的外边距会形成一个单独的外边距，<code>collpase margin</code> 发生在下面的这些情况:</p>\n<ul>\n<li>元素为空元素</li>\n<li><code>padding</code> 或者 <code>border</code> 为 0</li>\n<li><code>no clearance to seperate them</code> ? 什么意思</li>\n</ul>\n<p>更多详细的的内容 :  <a href=\"https://www.w3.org/TR/css3-box/#compact-boxes\" target=\"_blank\" rel=\"noopener\">https://www.w3.org/TR/css3-box/#compact-boxes</a></p>\n<p>对于外边距坍塌，最终形成的外边距遵循的是 <code>M-N</code> 原则: </p>\n<p>如果两个元素的外边距是正值, 最后得到的坍塌之后的外边距是两个边距的最大值 <code>M</code></p>\n<p>如果两个元素的外边距是负值，最后得到的坍塌之后的外边距是两个边距中的最小值 <code>N</code></p>\n<p>如果外边距是 <code>none</code> , 得到的坍塌之后的外边距是 0</p>\n<p>存在边距坍塌的几种情况</p>\n<ol>\n<li>相邻的块状元素之间出现外边距坍塌</li>\n<li>父元素和内部的子元素出现的外边距坍塌</li>\n</ol>\n<hr>\n<p>使用块状格式化上下文解决外边距层叠:</p>\n<p>css 代码如下 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/margin%20collapse.png\" alt=\"\"></p>\n<p>如上图所示, 父元素<code>container</code> 内部的子元素和父元素的边界坍塌，导致子元素与父元素的边界贴合，并且在子元素之间。两个 <code>div</code> <code>margin</code>  都设为 10, 最后出现折叠之后的 <code>margin</code> 也变成了 10 ，出现了元素折叠的现象</p>\n<p>如何解决： 使用 <code>overflow: hidden</code> 创建 bfc</p>\n<p>当我们给父元素创建 bfc 之后, </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E7%88%B6%E5%85%83%E7%B4%A0%20bfc.png\" alt=\"\"></p>\n<p>这时候因为父元素创建了 bfc ，因此子元素的 margin 不会出现坍塌现象，因为创建了 bf c 的元素不会和任何其它的元素出现边距折叠现象</p>\n<p>但是, 我们看到，元素内部的两个字元素还是出现了边距坍塌现象，按照上边的思想，我们可以给单独的一个子元素创建bfc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b3&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.b3 &#123;</span><br><span class=\"line\">  overflow: hidden</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中, 我们给子元素 <code>b2</code> 上创建了一个父元素，给这个父元素创建bfc </p>\n<p>最终结果如下:</p>\n<p> <img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%AD%90%E5%85%83%E7%B4%A0%20bfc.png\" alt=\"\">  </p>\n<p>最终我们可以看到，因为对于 <code>b3</code> 创建了 bfc ， 因此， 对于 bfc 内部的元素的布局是不会影响到外部的子元素的  </p>\n<h4 id=\"2-使用-BFC-进行浮动的清除\"><a href=\"#2-使用-BFC-进行浮动的清除\" class=\"headerlink\" title=\"2.使用 BFC 进行浮动的清除\"></a>2.使用 BFC 进行浮动的清除</h4><p>使用 BFC 进行浮动清除的原理还是一样的，利用位于块状上下文中的元素是不会影响到外部元素的特性，防止子元素设置浮动之后，父元素高度为 0 的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b1&quot;&gt;</span><br><span class=\"line\">\t我是浮动元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;b2&quot;&gt;</span><br><span class=\"line\">\t我是浮动的元素</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.b1, .b2 &#123;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 50px;</span><br><span class=\"line\">  margin: 10px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>结果如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/bfc%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png\" alt=\"\">  </p>\n<p>如上图所示，使用了 bfc 清除了由于使用 <code>float:left</code> 造成的浮动现象  浮动元素的父元素高度依然存在</p>\n<h4 id=\"3-使用-BFC-实现两栏自适应布局\"><a href=\"#3-使用-BFC-实现两栏自适应布局\" class=\"headerlink\" title=\"3. 使用 BFC 实现两栏自适应布局\"></a>3. 使用 BFC 实现两栏自适应布局</h4><p>在存在浮动的情况下,前面我们说过，包含块内部的子元素的左边缘会紧紧贴在其父元素的左边缘，即使存在浮动元素的情况下也是一样的，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">   &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">       &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">       &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">   .container  &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .aside &#123;</span><br><span class=\"line\">    width: 20%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .main &#123;</span><br><span class=\"line\">    width: 80%;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>图片如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/noBFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt=\"\"></p>\n<p>即使 <code>aside</code> 浮动，<code>main</code> 还是会贴在左边缘，如果我们想要实现两栏的自适应布局，如何实现？</p>\n<p>根据上面的布局规则， 我们可以给 <code>main</code> 创建一个块状格式化上下文，这样，<code>main</code> 的布局就不会受到 <code>aside</code> 元素的影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.main &#123;</span><br><span class=\"line\">  width: 80%;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终，我们得到了自适应布局: 从而得到了一个两栏布局</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/BFC%20%E8%87%AA%E9%80%82%E5%BA%94.png\" alt=\"\"></p>\n"},{"title":"CSS: 未知高度内文本居中","date":"2017-12-11T15:01:45.000Z","_content":"\n在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 `line-height = height` 可以解决问题，对于未知高度，下面有几种方法。\n\n例如下面的 `HTML` 以及 `CSS` 如下:\n\n```\n<div class=\"wrapper\">\n  <span class=\"first\">我是第一个需要居中的文字</span>\n  <span class=\"second\">我是第二个需要居中的文字</span>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 100px;\n}\n.wrapper span {\n  width: 100%;\n  display: inline-block;\n}\n.first {\n  height: 30%;\n}\n.second {\n  height: 70%;\n}\n```\n\n我们期望得到下面的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png)\n\n但是, 因为我们无法使用 `line-height = height` (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png)\n\n为了实现居中效果，我们可以采用下面的方式:\n\n1. 暴力 `flex`\n\n```css\n.wrapper span {\n  display: flex;\n  align-items: center;\n}\n```\n\n[table](http://www.jianshu.com/p/8aa3f1030908)\n\n","source":"_posts/CSS-未知高度内文本居中.md","raw":"---\ntitle: 'CSS: 未知高度内文本居中'\ndate: 2017-12-11 23:01:45\ntags: 垂直居中\ncategories: CSS\n---\n\n在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 `line-height = height` 可以解决问题，对于未知高度，下面有几种方法。\n\n例如下面的 `HTML` 以及 `CSS` 如下:\n\n```\n<div class=\"wrapper\">\n  <span class=\"first\">我是第一个需要居中的文字</span>\n  <span class=\"second\">我是第二个需要居中的文字</span>\n</div>\n```\n\n```css\n.wrapper {\n  width: 200px;\n  height: 100px;\n}\n.wrapper span {\n  width: 100%;\n  display: inline-block;\n}\n.first {\n  height: 30%;\n}\n.second {\n  height: 70%;\n}\n```\n\n我们期望得到下面的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png)\n\n但是, 因为我们无法使用 `line-height = height` (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:\n\n![](http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png)\n\n为了实现居中效果，我们可以采用下面的方式:\n\n1. 暴力 `flex`\n\n```css\n.wrapper span {\n  display: flex;\n  align-items: center;\n}\n```\n\n[table](http://www.jianshu.com/p/8aa3f1030908)\n\n","slug":"CSS-未知高度内文本居中","published":1,"updated":"2017-12-11T16:08:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6n0006s33gk9rcthn4","content":"<p>在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 <code>line-height = height</code> 可以解决问题，对于未知高度，下面有几种方法。</p>\n<p>例如下面的 <code>HTML</code> 以及 <code>CSS</code> 如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;first&quot;&gt;我是第一个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;second&quot;&gt;我是第二个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们期望得到下面的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png\" alt=\"\"></p>\n<p>但是, 因为我们无法使用 <code>line-height = height</code> (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png\" alt=\"\"></p>\n<p>为了实现居中效果，我们可以采用下面的方式:</p>\n<ol>\n<li>暴力 <code>flex</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jianshu.com/p/8aa3f1030908\" target=\"_blank\" rel=\"noopener\">table</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目中遇到过单行文本出现垂直居中的问题， 对于已知高度使用 <code>line-height = height</code> 可以解决问题，对于未知高度，下面有几种方法。</p>\n<p>例如下面的 <code>HTML</code> 以及 <code>CSS</code> 如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;first&quot;&gt;我是第一个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;second&quot;&gt;我是第二个需要居中的文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">70%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们期望得到下面的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20%E5%B1%85%E4%B8%AD.png\" alt=\"\"></p>\n<p>但是, 因为我们无法使用 <code>line-height = height</code> (你总不能计算高度 * 30% 吧， 愚蠢的做法), 我们得到这样的效果:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/span%20not%20middle.png\" alt=\"\"></p>\n<p>为了实现居中效果，我们可以采用下面的方式:</p>\n<ol>\n<li>暴力 <code>flex</code></li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jianshu.com/p/8aa3f1030908\" target=\"_blank\" rel=\"noopener\">table</a></p>\n"},{"title":"CSS居中效果","date":"2017-09-02T02:53:26.000Z","_content":"\n使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。\n\n### 居中方法\n\n#### 水平居中\n\n##### 行内元素的水平居中\n\n使用 `text-align` 的方法实现行内元素的水平居中\n\n1. `text-align: center` : 实现块状元素内部 行元素的水平居中\n\n```\n<div id = 'content'>\n\t<span>我是一段文字</span>\n</div>\n<style>\n\t#content {\n      text-align: center;\n\t}\n</style>\n```\n\n\n\n##### 块状元素的水平居中方法\n\n1.使用 `margin` 进行定位\n\n```\n<div id='content'>\n\t<div id = 'block'>\n\t</div>\n</div>\n<style>\n\t#content {\n    \twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: blue;\n\t}\n\t#block {\n       width: 50px;\n       height: 50px;\n       margin: auto;\n\t}\n</style>\n```\n\n* 注意， 对于块状元素使用 `margin: auto` 只能实现块状元素在父级块状元素内的水平居中\n\n  >如果在正常流中一个块元素的 `margin-top   margin-bottom ` 设为 `auto` 的时候，这个元素的 margin  会自动计算为 0\n  >\n  >​\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png)\n\n在上面的图片中，尽管设置了 `margin-top : 20px`  但是由于 `margin: auto` 的存在，将块元素的 `margin-top` 重新计算为 0\n\n2.借用定位元素  `position: absolute`\n\n借用定位元素实现的居中，可以实现水平，垂直居中的效果\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auto;\n```\n\n水平居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\nleft: 0;\nright: 0;\nmargin: auto;\n```\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auot;\n```\n\n完全居中:\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin: auto\n```\n\n3.借用 `display: inline-block`  来实现\n\n`display: inline-block` 这个属性很有意思:\n\n>使用了 `display: inline-block` 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列\n\n因此，我们的思路是：\n\n对于要进行水平居中的块状元素应用 `display:inline-block` , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 `text-align: center`\n\n#### 垂直居中\n\n##### 行内元素的垂直居中\n\n1.对于单行元素，使用 `line-height: height` 实现\n\n2.对于多行元素的垂直居中方法，使用 `display: table-cell`\n\n```\n<div class = 'content'>\n\t<p>我是一段文字</p>\n\t<p>我是另一段文字</p>\n</div>\n\nCSS:\n\n.content {\n  display: table-cell;\n  vertical-align: middle\n}\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png)\n\n\n\n##### 块状元素的垂直居中\n\n1.使用 `position: absolute` 来实现\n\n2.子元素声明  `display: table-cell`  `display: inline-block`  `vertical-align: middle` 来实现\n\n#### 完全居中\n\n1. `position: absolute` 来实现\n\n2. 使用  `display: table-cell`, 这时候 子元素必须要声明  `display: inline-block`\n\n   ```\n   <div id='good'>\n   \t<div class='child'></div>\n   </div>\n   <style>\n   \t#good{\n   \t\tdisplay:table-cell;\n   \t\tvertical-align: middle;\n   \t\ttext-align: center;\n   \t\twidth: 200px;\n   \t\theight: 200px;\n   \t\tbackground-color: blue;\n   \t}\n   \t.child {\n   \t\tdisplay: inline-block;\n   \t\twidth: 50px;\n   \t\theight: 50px;\n   \t\tbackground-color: red;\n   \t}\n   \t\n   ```\n\n2.使用 `display: flex` 实现居中的效果\n\n```html\n<div class=\"parent\">\n  <div class=\"children\">\n  </div>\n</div>\n```\n\n```css\n.parent {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n\n\n\n","source":"_posts/CSS居中效果.md","raw":"---\ntitle: CSS居中效果\ndate: 2017-09-02 10:53:26\ntags: CSS 居中\ncategories: CSS\n---\n\n使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。\n\n### 居中方法\n\n#### 水平居中\n\n##### 行内元素的水平居中\n\n使用 `text-align` 的方法实现行内元素的水平居中\n\n1. `text-align: center` : 实现块状元素内部 行元素的水平居中\n\n```\n<div id = 'content'>\n\t<span>我是一段文字</span>\n</div>\n<style>\n\t#content {\n      text-align: center;\n\t}\n</style>\n```\n\n\n\n##### 块状元素的水平居中方法\n\n1.使用 `margin` 进行定位\n\n```\n<div id='content'>\n\t<div id = 'block'>\n\t</div>\n</div>\n<style>\n\t#content {\n    \twidth: 200px;\n\t\theight: 200px;\n\t\tbackground-color: blue;\n\t}\n\t#block {\n       width: 50px;\n       height: 50px;\n       margin: auto;\n\t}\n</style>\n```\n\n* 注意， 对于块状元素使用 `margin: auto` 只能实现块状元素在父级块状元素内的水平居中\n\n  >如果在正常流中一个块元素的 `margin-top   margin-bottom ` 设为 `auto` 的时候，这个元素的 margin  会自动计算为 0\n  >\n  >​\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png)\n\n在上面的图片中，尽管设置了 `margin-top : 20px`  但是由于 `margin: auto` 的存在，将块元素的 `margin-top` 重新计算为 0\n\n2.借用定位元素  `position: absolute`\n\n借用定位元素实现的居中，可以实现水平，垂直居中的效果\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auto;\n```\n\n水平居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\nleft: 0;\nright: 0;\nmargin: auto;\n```\n\n垂直居中：\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nmargin: auot;\n```\n\n完全居中:\n\n```\n父元素：\nposition: relative;\n子元素：\nposition: absolute;\ntop: 0;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin: auto\n```\n\n3.借用 `display: inline-block`  来实现\n\n`display: inline-block` 这个属性很有意思:\n\n>使用了 `display: inline-block` 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列\n\n因此，我们的思路是：\n\n对于要进行水平居中的块状元素应用 `display:inline-block` , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 `text-align: center`\n\n#### 垂直居中\n\n##### 行内元素的垂直居中\n\n1.对于单行元素，使用 `line-height: height` 实现\n\n2.对于多行元素的垂直居中方法，使用 `display: table-cell`\n\n```\n<div class = 'content'>\n\t<p>我是一段文字</p>\n\t<p>我是另一段文字</p>\n</div>\n\nCSS:\n\n.content {\n  display: table-cell;\n  vertical-align: middle\n}\n```\n\n\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png)\n\n\n\n##### 块状元素的垂直居中\n\n1.使用 `position: absolute` 来实现\n\n2.子元素声明  `display: table-cell`  `display: inline-block`  `vertical-align: middle` 来实现\n\n#### 完全居中\n\n1. `position: absolute` 来实现\n\n2. 使用  `display: table-cell`, 这时候 子元素必须要声明  `display: inline-block`\n\n   ```\n   <div id='good'>\n   \t<div class='child'></div>\n   </div>\n   <style>\n   \t#good{\n   \t\tdisplay:table-cell;\n   \t\tvertical-align: middle;\n   \t\ttext-align: center;\n   \t\twidth: 200px;\n   \t\theight: 200px;\n   \t\tbackground-color: blue;\n   \t}\n   \t.child {\n   \t\tdisplay: inline-block;\n   \t\twidth: 50px;\n   \t\theight: 50px;\n   \t\tbackground-color: red;\n   \t}\n   \t\n   ```\n\n2.使用 `display: flex` 实现居中的效果\n\n```html\n<div class=\"parent\">\n  <div class=\"children\">\n  </div>\n</div>\n```\n\n```css\n.parent {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n\n\n\n","slug":"CSS居中效果","published":1,"updated":"2018-08-21T13:54:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6q0007s33gbqxyt2c7","content":"<p>使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。</p>\n<h3 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><h5 id=\"行内元素的水平居中\"><a href=\"#行内元素的水平居中\" class=\"headerlink\" title=\"行内元素的水平居中\"></a>行内元素的水平居中</h5><p>使用 <code>text-align</code> 的方法实现行内元素的水平居中</p>\n<ol>\n<li><code>text-align: center</code> : 实现块状元素内部 行元素的水平居中</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;span&gt;我是一段文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"块状元素的水平居中方法\"><a href=\"#块状元素的水平居中方法\" class=\"headerlink\" title=\"块状元素的水平居中方法\"></a>块状元素的水平居中方法</h5><p>1.使用 <code>margin</code> 进行定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;div id = &apos;block&apos;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">    \twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#block &#123;</span><br><span class=\"line\">       width: 50px;</span><br><span class=\"line\">       height: 50px;</span><br><span class=\"line\">       margin: auto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注意， 对于块状元素使用 <code>margin: auto</code> 只能实现块状元素在父级块状元素内的水平居中</p>\n<blockquote>\n<p>如果在正常流中一个块元素的 <code>margin-top   margin-bottom</code> 设为 <code>auto</code> 的时候，这个元素的 margin  会自动计算为 0</p>\n<p>​</p>\n</blockquote>\n</li>\n</ul>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png\" alt=\"\"></p>\n<p>在上面的图片中，尽管设置了 <code>margin-top : 20px</code>  但是由于 <code>margin: auto</code> 的存在，将块元素的 <code>margin-top</code> 重新计算为 0</p>\n<p>2.借用定位元素  <code>position: absolute</code></p>\n<p>借用定位元素实现的居中，可以实现水平，垂直居中的效果</p>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>水平居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auot;</span><br></pre></td></tr></table></figure>\n<p>完全居中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto</span><br></pre></td></tr></table></figure>\n<p>3.借用 <code>display: inline-block</code>  来实现</p>\n<p><code>display: inline-block</code> 这个属性很有意思:</p>\n<blockquote>\n<p>使用了 <code>display: inline-block</code> 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列</p>\n</blockquote>\n<p>因此，我们的思路是：</p>\n<p>对于要进行水平居中的块状元素应用 <code>display:inline-block</code> , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 <code>text-align: center</code></p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><h5 id=\"行内元素的垂直居中\"><a href=\"#行内元素的垂直居中\" class=\"headerlink\" title=\"行内元素的垂直居中\"></a>行内元素的垂直居中</h5><p>1.对于单行元素，使用 <code>line-height: height</code> 实现</p>\n<p>2.对于多行元素的垂直居中方法，使用 <code>display: table-cell</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是一段文字&lt;/p&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是另一段文字&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png\" alt=\"\"></p>\n<h5 id=\"块状元素的垂直居中\"><a href=\"#块状元素的垂直居中\" class=\"headerlink\" title=\"块状元素的垂直居中\"></a>块状元素的垂直居中</h5><p>1.使用 <code>position: absolute</code> 来实现</p>\n<p>2.子元素声明  <code>display: table-cell</code>  <code>display: inline-block</code>  <code>vertical-align: middle</code> 来实现</p>\n<h4 id=\"完全居中\"><a href=\"#完全居中\" class=\"headerlink\" title=\"完全居中\"></a>完全居中</h4><ol>\n<li><p><code>position: absolute</code> 来实现</p>\n</li>\n<li><p>使用  <code>display: table-cell</code>, 这时候 子元素必须要声明  <code>display: inline-block</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;good&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;child&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#good&#123;</span><br><span class=\"line\">\t\tdisplay:table-cell;</span><br><span class=\"line\">\t\tvertical-align: middle;</span><br><span class=\"line\">\t\ttext-align: center;</span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.child &#123;</span><br><span class=\"line\">\t\tdisplay: inline-block;</span><br><span class=\"line\">\t\twidth: 50px;</span><br><span class=\"line\">\t\theight: 50px;</span><br><span class=\"line\">\t\tbackground-color: red;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>display: flex</code> 实现居中的效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"children\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 CSS 并没有这么的简单，如果CSS 熟练了，开发网页就会快得多，自己实际上能够使用到的 CSS 样式不多，但是,太多的东西自己没有掌握， CSS 也有许多的技术点，只能不断的跳出自己的舒适区，不断的进行探索。</p>\n<h3 id=\"居中方法\"><a href=\"#居中方法\" class=\"headerlink\" title=\"居中方法\"></a>居中方法</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><h5 id=\"行内元素的水平居中\"><a href=\"#行内元素的水平居中\" class=\"headerlink\" title=\"行内元素的水平居中\"></a>行内元素的水平居中</h5><p>使用 <code>text-align</code> 的方法实现行内元素的水平居中</p>\n<ol>\n<li><code>text-align: center</code> : 实现块状元素内部 行元素的水平居中</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;span&gt;我是一段文字&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"块状元素的水平居中方法\"><a href=\"#块状元素的水平居中方法\" class=\"headerlink\" title=\"块状元素的水平居中方法\"></a>块状元素的水平居中方法</h5><p>1.使用 <code>margin</code> 进行定位</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;div id = &apos;block&apos;&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#content &#123;</span><br><span class=\"line\">    \twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t#block &#123;</span><br><span class=\"line\">       width: 50px;</span><br><span class=\"line\">       height: 50px;</span><br><span class=\"line\">       margin: auto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>注意， 对于块状元素使用 <code>margin: auto</code> 只能实现块状元素在父级块状元素内的水平居中</p>\n<blockquote>\n<p>如果在正常流中一个块元素的 <code>margin-top   margin-bottom</code> 设为 <code>auto</code> 的时候，这个元素的 margin  会自动计算为 0</p>\n<p>​</p>\n</blockquote>\n</li>\n</ul>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/marginAuto%20%20Snipaste_2017-09-02_12-18-20.png\" alt=\"\"></p>\n<p>在上面的图片中，尽管设置了 <code>margin-top : 20px</code>  但是由于 <code>margin: auto</code> 的存在，将块元素的 <code>margin-top</code> 重新计算为 0</p>\n<p>2.借用定位元素  <code>position: absolute</code></p>\n<p>借用定位元素实现的居中，可以实现水平，垂直居中的效果</p>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>水平居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto;</span><br></pre></td></tr></table></figure>\n<p>垂直居中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">margin: auot;</span><br></pre></td></tr></table></figure>\n<p>完全居中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父元素：</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">子元素：</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">bottom: 0;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">margin: auto</span><br></pre></td></tr></table></figure>\n<p>3.借用 <code>display: inline-block</code>  来实现</p>\n<p><code>display: inline-block</code> 这个属性很有意思:</p>\n<blockquote>\n<p>使用了 <code>display: inline-block</code> 的元素，这个元素会表现出行内块的特征，这个元素即可以像块状元素一样具有 width  和 height, 也可以是向行内元素一样，呈行内排列</p>\n</blockquote>\n<p>因此，我们的思路是：</p>\n<p>对于要进行水平居中的块状元素应用 <code>display:inline-block</code> , 使它表现出类似行状元素的特性，对于该元素的父元素，应用 <code>text-align: center</code></p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><h5 id=\"行内元素的垂直居中\"><a href=\"#行内元素的垂直居中\" class=\"headerlink\" title=\"行内元素的垂直居中\"></a>行内元素的垂直居中</h5><p>1.对于单行元素，使用 <code>line-height: height</code> 实现</p>\n<p>2.对于多行元素的垂直居中方法，使用 <code>display: table-cell</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class = &apos;content&apos;&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是一段文字&lt;/p&gt;</span><br><span class=\"line\">\t&lt;p&gt;我是另一段文字&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">CSS:</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">  display: table-cell;</span><br><span class=\"line\">  vertical-align: middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%ADSnipaste_2017-09-02_17-38-37.png\" alt=\"\"></p>\n<h5 id=\"块状元素的垂直居中\"><a href=\"#块状元素的垂直居中\" class=\"headerlink\" title=\"块状元素的垂直居中\"></a>块状元素的垂直居中</h5><p>1.使用 <code>position: absolute</code> 来实现</p>\n<p>2.子元素声明  <code>display: table-cell</code>  <code>display: inline-block</code>  <code>vertical-align: middle</code> 来实现</p>\n<h4 id=\"完全居中\"><a href=\"#完全居中\" class=\"headerlink\" title=\"完全居中\"></a>完全居中</h4><ol>\n<li><p><code>position: absolute</code> 来实现</p>\n</li>\n<li><p>使用  <code>display: table-cell</code>, 这时候 子元素必须要声明  <code>display: inline-block</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;good&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;child&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">\t#good&#123;</span><br><span class=\"line\">\t\tdisplay:table-cell;</span><br><span class=\"line\">\t\tvertical-align: middle;</span><br><span class=\"line\">\t\ttext-align: center;</span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\">\t\tbackground-color: blue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.child &#123;</span><br><span class=\"line\">\t\tdisplay: inline-block;</span><br><span class=\"line\">\t\twidth: 50px;</span><br><span class=\"line\">\t\theight: 50px;</span><br><span class=\"line\">\t\tbackground-color: red;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>display: flex</code> 实现居中的效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"children\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript 中的函数式编程（译）","date":"2018-06-16T15:59:58.000Z","_content":"\n在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。\n\n## 什么是函数式编程？\n\n- 在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）\n- 函数式编程将计算机运算视为数学概念中函数的计算。\n- 函数式编程避免改变状态以及使用可变的数据。\n\n上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。\n\n## 其他主要的编程规范或模式：\n\n- 过程式编程\n- 面向对象的编程\n- 元编程\n- 命令式编程\n- 声明式编程\n\n过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO\n\n面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。\n\n元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。\n\n命令模式 vs 声明模式\n\n- 命令模式关心描述程序如何运行, 由计算机执行的命令组成\n- 声明模式关心程序能够做什么而无需确定程序应该如何完成。\n- 函数式编程遵循声明模式。\n\n```javascript\nvar books = [\n  {name:'JavaScript', pages:450}, \n  {name:'Angular', pages:902},\n  {name:'Node', pages:732}\n];\n/* Imperative Pattern */\nfor (var i = 0; i < books.length; i++) {\n  books[i].lastRead =  new Date();\n}\n/* Declarative Pattern */\nbooks.map((book)=> {\n  book.lastReadBy = 'me';\n  return book;\n});\nconsole.log(books);\n```\n\n- 在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。\n- 第一段中借用 `for 循环`，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。\n- 第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。\n\n## 数学意义上的函数或者纯函数\n\n在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。\n\n这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。\n\nMath.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。\n\nMath.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。\n\n## 为什么要使用函数式编程\n\n- 函数式编程中的纯函数确保了不会改变在其范围之外的数据。\n- 其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。\n- 易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。\n- 让代码更具有易读性。\n- 函数式编程让代码更易于理解。\n\n## 函数式编程的例子\n\n数组函数\n\n![img](https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg)\n\n在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心\"程序如何运行\"，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。\n\n相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。\n\n- find\n- reduce\n- map\n- some\n- every\n\n## 函数链\n\n函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。\n\n![img](https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg)\n\n在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。\n\n## 支持 FP 的库\n\n下面这些库中提供了一些让代码看起来更加声明式的有用函数。\n\n- RamadaJS\n- UnderscoreJS\n- lodash\n\n## 副作用\n\n函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。\n\n```javascript\nlet meetup = {name:'JS',isActive:true,members:49};\nconst scheduleMeetup = (date, place) => {\n  meetup.date = date;\n  meetup.place = place;\n  if (meetup.members < 50)\n    meetup.isActive = false;\n}\nconst publishMeetup = () => {\n  if (meetup.isActive) {\n    meetup.publish = true;\n  }\n}\nscheduleMeetup('today','Bnagalore');\npublishMeetup();\nconsole.log(meetup);\n```\n\n上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。\n\n副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。\n\n## 不变性\n\n在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。\n\n例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。\n\n在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。\n\n## 支持不变性的库\n\nJavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:\n\n- Seamless-immutable\n- Immutable JS\n\n## 总结\n\n函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。\n\n本文翻译至[Functional Programming in JavaScript](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5)，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。","source":"_posts/JavaScript-中的函数式编程（译）.md","raw":"---\ntitle: JavaScript 中的函数式编程（译）\ndate: 2018-06-16 23:59:58\ntags: 函数式编程\ncategories: 翻译文集\n---\n\n在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。\n\n## 什么是函数式编程？\n\n- 在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）\n- 函数式编程将计算机运算视为数学概念中函数的计算。\n- 函数式编程避免改变状态以及使用可变的数据。\n\n上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。\n\n## 其他主要的编程规范或模式：\n\n- 过程式编程\n- 面向对象的编程\n- 元编程\n- 命令式编程\n- 声明式编程\n\n过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO\n\n面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。\n\n元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。\n\n命令模式 vs 声明模式\n\n- 命令模式关心描述程序如何运行, 由计算机执行的命令组成\n- 声明模式关心程序能够做什么而无需确定程序应该如何完成。\n- 函数式编程遵循声明模式。\n\n```javascript\nvar books = [\n  {name:'JavaScript', pages:450}, \n  {name:'Angular', pages:902},\n  {name:'Node', pages:732}\n];\n/* Imperative Pattern */\nfor (var i = 0; i < books.length; i++) {\n  books[i].lastRead =  new Date();\n}\n/* Declarative Pattern */\nbooks.map((book)=> {\n  book.lastReadBy = 'me';\n  return book;\n});\nconsole.log(books);\n```\n\n- 在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。\n- 第一段中借用 `for 循环`，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。\n- 第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。\n\n## 数学意义上的函数或者纯函数\n\n在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。\n\n这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。\n\nMath.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。\n\nMath.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。\n\n## 为什么要使用函数式编程\n\n- 函数式编程中的纯函数确保了不会改变在其范围之外的数据。\n- 其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。\n- 易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。\n- 让代码更具有易读性。\n- 函数式编程让代码更易于理解。\n\n## 函数式编程的例子\n\n数组函数\n\n![img](https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg)\n\n在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心\"程序如何运行\"，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。\n\n相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。\n\n- find\n- reduce\n- map\n- some\n- every\n\n## 函数链\n\n函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。\n\n![img](https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg)\n\n在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。\n\n## 支持 FP 的库\n\n下面这些库中提供了一些让代码看起来更加声明式的有用函数。\n\n- RamadaJS\n- UnderscoreJS\n- lodash\n\n## 副作用\n\n函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。\n\n```javascript\nlet meetup = {name:'JS',isActive:true,members:49};\nconst scheduleMeetup = (date, place) => {\n  meetup.date = date;\n  meetup.place = place;\n  if (meetup.members < 50)\n    meetup.isActive = false;\n}\nconst publishMeetup = () => {\n  if (meetup.isActive) {\n    meetup.publish = true;\n  }\n}\nscheduleMeetup('today','Bnagalore');\npublishMeetup();\nconsole.log(meetup);\n```\n\n上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。\n\n副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。\n\n## 不变性\n\n在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。\n\n例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。\n\n在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。\n\n## 支持不变性的库\n\nJavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:\n\n- Seamless-immutable\n- Immutable JS\n\n## 总结\n\n函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。\n\n本文翻译至[Functional Programming in JavaScript](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5)，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。","slug":"JavaScript-中的函数式编程（译）","published":1,"updated":"2018-06-16T16:03:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6s0008s33g9d0upc6p","content":"<p>在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。</p>\n<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><ul>\n<li>在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）</li>\n<li>函数式编程将计算机运算视为数学概念中函数的计算。</li>\n<li>函数式编程避免改变状态以及使用可变的数据。</li>\n</ul>\n<p>上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。</p>\n<h2 id=\"其他主要的编程规范或模式：\"><a href=\"#其他主要的编程规范或模式：\" class=\"headerlink\" title=\"其他主要的编程规范或模式：\"></a>其他主要的编程规范或模式：</h2><ul>\n<li>过程式编程</li>\n<li>面向对象的编程</li>\n<li>元编程</li>\n<li>命令式编程</li>\n<li>声明式编程</li>\n</ul>\n<p>过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO</p>\n<p>面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。</p>\n<p>元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。</p>\n<p>命令模式 vs 声明模式</p>\n<ul>\n<li>命令模式关心描述程序如何运行, 由计算机执行的命令组成</li>\n<li>声明模式关心程序能够做什么而无需确定程序应该如何完成。</li>\n<li>函数式编程遵循声明模式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JavaScript'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">450</span>&#125;, </span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Angular'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">902</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Node'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">732</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/* Imperative Pattern */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; books.length; i++) &#123;</span><br><span class=\"line\">  books[i].lastRead =  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Declarative Pattern */</span></span><br><span class=\"line\">books.map(<span class=\"function\">(<span class=\"params\">book</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  book.lastReadBy = <span class=\"string\">'me'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。</li>\n<li>第一段中借用 <code>for 循环</code>，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。</li>\n<li>第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。</li>\n</ul>\n<h2 id=\"数学意义上的函数或者纯函数\"><a href=\"#数学意义上的函数或者纯函数\" class=\"headerlink\" title=\"数学意义上的函数或者纯函数\"></a>数学意义上的函数或者纯函数</h2><p>在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。</p>\n<p>这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。</p>\n<p>Math.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。</p>\n<p>Math.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。</p>\n<h2 id=\"为什么要使用函数式编程\"><a href=\"#为什么要使用函数式编程\" class=\"headerlink\" title=\"为什么要使用函数式编程\"></a>为什么要使用函数式编程</h2><ul>\n<li>函数式编程中的纯函数确保了不会改变在其范围之外的数据。</li>\n<li>其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。</li>\n<li>易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。</li>\n<li>让代码更具有易读性。</li>\n<li>函数式编程让代码更易于理解。</li>\n</ul>\n<h2 id=\"函数式编程的例子\"><a href=\"#函数式编程的例子\" class=\"headerlink\" title=\"函数式编程的例子\"></a>函数式编程的例子</h2><p>数组函数</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心”程序如何运行”，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。</p>\n<p>相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。</p>\n<ul>\n<li>find</li>\n<li>reduce</li>\n<li>map</li>\n<li>some</li>\n<li>every</li>\n</ul>\n<h2 id=\"函数链\"><a href=\"#函数链\" class=\"headerlink\" title=\"函数链\"></a>函数链</h2><p>函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。</p>\n<h2 id=\"支持-FP-的库\"><a href=\"#支持-FP-的库\" class=\"headerlink\" title=\"支持 FP 的库\"></a>支持 FP 的库</h2><p>下面这些库中提供了一些让代码看起来更加声明式的有用函数。</p>\n<ul>\n<li>RamadaJS</li>\n<li>UnderscoreJS</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h2><p>函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meetup = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JS'</span>,<span class=\"attr\">isActive</span>:<span class=\"literal\">true</span>,<span class=\"attr\">members</span>:<span class=\"number\">49</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> scheduleMeetup = <span class=\"function\">(<span class=\"params\">date, place</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  meetup.date = date;</span><br><span class=\"line\">  meetup.place = place;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.members &lt; <span class=\"number\">50</span>)</span><br><span class=\"line\">    meetup.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> publishMeetup = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.isActive) &#123;</span><br><span class=\"line\">    meetup.publish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scheduleMeetup(<span class=\"string\">'today'</span>,<span class=\"string\">'Bnagalore'</span>);</span><br><span class=\"line\">publishMeetup();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(meetup);</span><br></pre></td></tr></table></figure>\n<p>上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。</p>\n<p>副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。</p>\n<p>例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。</p>\n<p>在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。</p>\n<h2 id=\"支持不变性的库\"><a href=\"#支持不变性的库\" class=\"headerlink\" title=\"支持不变性的库\"></a>支持不变性的库</h2><p>JavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:</p>\n<ul>\n<li>Seamless-immutable</li>\n<li>Immutable JS</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。</p>\n<p>本文翻译至<a href=\"https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a>，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在这篇文章中，我们将会学习到声明式， 纯函数， 不变性以及副作用。</p>\n<h2 id=\"什么是函数式编程？\"><a href=\"#什么是函数式编程？\" class=\"headerlink\" title=\"什么是函数式编程？\"></a>什么是函数式编程？</h2><ul>\n<li>在计算机科学中，函数是编程是一种编程范例或者模式（一种构建计算机程序结构和元素的样式）</li>\n<li>函数式编程将计算机运算视为数学概念中函数的计算。</li>\n<li>函数式编程避免改变状态以及使用可变的数据。</li>\n</ul>\n<p>上面的这些定义来自于维基百科， 在这篇文章中，我们尝试理解FP(函数式编程)的价值和意义。</p>\n<h2 id=\"其他主要的编程规范或模式：\"><a href=\"#其他主要的编程规范或模式：\" class=\"headerlink\" title=\"其他主要的编程规范或模式：\"></a>其他主要的编程规范或模式：</h2><ul>\n<li>过程式编程</li>\n<li>面向对象的编程</li>\n<li>元编程</li>\n<li>命令式编程</li>\n<li>声明式编程</li>\n</ul>\n<p>过程式编程 基于程序调用的概念，简单包括计算机将要执行的一系列的计算过程， 在程序执行期间的任何时候，任何被设定的程序都有可能被调用，包括被其他的程序被调用或者自身调用，主要的过程式编程语言有COBOL, BASIC, C, ADA 和 GO</p>\n<p>面向对象编程 基于对象的概念，对象中包含数据（属性）和程序（方法），这种模式更接近于函数式编程，一些重要的面向对象的语言包括：C++, Java, PHP, C#, Python, Ruby, Swift 等等。</p>\n<p>元编程 具备将程序视为数据的能力，这意味着程序能够被设计成能够阅读，复制， 分析或者转换为其他程序，甚至在运行的时候修改自身。</p>\n<p>命令模式 vs 声明模式</p>\n<ul>\n<li>命令模式关心描述程序如何运行, 由计算机执行的命令组成</li>\n<li>声明模式关心程序能够做什么而无需确定程序应该如何完成。</li>\n<li>函数式编程遵循声明模式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JavaScript'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">450</span>&#125;, </span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Angular'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">902</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">name</span>:<span class=\"string\">'Node'</span>, <span class=\"attr\">pages</span>:<span class=\"number\">732</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/* Imperative Pattern */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; books.length; i++) &#123;</span><br><span class=\"line\">  books[i].lastRead =  <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Declarative Pattern */</span></span><br><span class=\"line\">books.map(<span class=\"function\">(<span class=\"params\">book</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  book.lastReadBy = <span class=\"string\">'me'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在上面的这一段代码中， 我们对于书籍数组中的每一本书添加了一个新的属性，这个过程通过两种不同的方法执行。</li>\n<li>第一段中借用 <code>for 循环</code>，依据数组的长度进行迭代,接着将数组的指针计数器和数组的长度进行核对并且在每一次迭代中增加指针计数器，因此， 这更像程序/代码正在关心为了得到想要的输出结果如何进行运行操作。</li>\n<li>第二段中的代码借助于原生Js数组中的 map  这个 map  方法将函数作为参数，这个函数获取到每一个元素，因此在这种情况下代码不是在描述程序如何运行，而是讨论需要达成什么 ，在这种情况后的 map 方法 关心实际的程序执行。</li>\n</ul>\n<h2 id=\"数学意义上的函数或者纯函数\"><a href=\"#数学意义上的函数或者纯函数\" class=\"headerlink\" title=\"数学意义上的函数或者纯函数\"></a>数学意义上的函数或者纯函数</h2><p>在数学中，函数是一系列输入值和合法的输出值之间的关系，这种特性反映了每一个输入组合都关联着一个确定的输出。</p>\n<p>这函数式编程中，这种函数被称作纯函数，函数的输出结果仅仅取决于函数接收到的输入数据， 除了返回值之外， 函数不会改变输入的数据。</p>\n<p>Math.random() 不是纯函数，因为每次调用的时候总会返回一个新的值。</p>\n<p>Math.min(1, 2) 是纯函数的一个例子，对于相同的一组输入值总会返回新的值。</p>\n<h2 id=\"为什么要使用函数式编程\"><a href=\"#为什么要使用函数式编程\" class=\"headerlink\" title=\"为什么要使用函数式编程\"></a>为什么要使用函数式编程</h2><ul>\n<li>函数式编程中的纯函数确保了不会改变在其范围之外的数据。</li>\n<li>其减少了复杂程度， 我们不需要关心程序如何怎样做， 而只需要关心程序做了什么。</li>\n<li>易于测试，因为其不会取决于应用的状态，对于结果的验证也将会变得简单。</li>\n<li>让代码更具有易读性。</li>\n<li>函数式编程让代码更易于理解。</li>\n</ul>\n<h2 id=\"函数式编程的例子\"><a href=\"#函数式编程的例子\" class=\"headerlink\" title=\"函数式编程的例子\"></a>函数式编程的例子</h2><p>数组函数</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e66d6b1b5b60c7e36e852e8dc0779212_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码中， 我们试图过滤出只有活跃的 meet-ups, 我们可以看到这个功能可以使用两种不同的方法实现，在这里， 第二种方法是函数式编程，其中的 filter() 方法关心”程序如何运行”，程序只关心输入也就是 meetups数组以及输出activeMeetupsFP 但是在第一种方法中程序也关心 for 循环如何运行代码。</p>\n<p>相似的，下面的这些数组方法有助于实现函数式编程，减少代码的复杂度。</p>\n<ul>\n<li>find</li>\n<li>reduce</li>\n<li>map</li>\n<li>some</li>\n<li>every</li>\n</ul>\n<h2 id=\"函数链\"><a href=\"#函数链\" class=\"headerlink\" title=\"函数链\"></a>函数链</h2><p>函数链是用于调用多种方法的机制， 每一个方法返回一个对象， 允许在一个声明中调用链接在一起而无需变量来储存中间结果。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99715077ff8316e0a8e88a315c9bf560_b.jpg\" alt=\"img\"></p>\n<p>在上面的代码片段中， 我们想要打印出所有的活跃的 meetup 用户的总人数， 考虑到可能有10%的用户重复。</p>\n<h2 id=\"支持-FP-的库\"><a href=\"#支持-FP-的库\" class=\"headerlink\" title=\"支持 FP 的库\"></a>支持 FP 的库</h2><p>下面这些库中提供了一些让代码看起来更加声明式的有用函数。</p>\n<ul>\n<li>RamadaJS</li>\n<li>UnderscoreJS</li>\n<li>lodash</li>\n</ul>\n<h2 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h2><p>函数或者表达式除了返回一个值之外，在下面的几种情况下被认为产生了副作用： 如果其改变了其自身范围之外的程序状态， 或者与其调用的函数或者外部的程序有一个可以观察到的交互。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> meetup = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'JS'</span>,<span class=\"attr\">isActive</span>:<span class=\"literal\">true</span>,<span class=\"attr\">members</span>:<span class=\"number\">49</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> scheduleMeetup = <span class=\"function\">(<span class=\"params\">date, place</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  meetup.date = date;</span><br><span class=\"line\">  meetup.place = place;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.members &lt; <span class=\"number\">50</span>)</span><br><span class=\"line\">    meetup.isActive = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> publishMeetup = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (meetup.isActive) &#123;</span><br><span class=\"line\">    meetup.publish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scheduleMeetup(<span class=\"string\">'today'</span>,<span class=\"string\">'Bnagalore'</span>);</span><br><span class=\"line\">publishMeetup();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(meetup);</span><br></pre></td></tr></table></figure>\n<p>上面的这段代码产生了副作用，因为函数 scheduleMeetup 的本来的作用是给 meetup 添加 date 和 place, 但是这个函数改变了 isActive 的值， 而这个 isActive 正是函数 publishMeetup 所依赖的。具有副作用的 publishMeetup 函数将不会得到理想的输出， 因为其输入的值在这个过程中被改变了。 在大型的程序中（真实的程序情况下）， 很难去 debug 副作用。</p>\n<p>副作用不总是产生坏的影响，但是如果其产生的时候我们应该小心对待。</p>\n<h2 id=\"不变性\"><a href=\"#不变性\" class=\"headerlink\" title=\"不变性\"></a>不变性</h2><p>在函数运行之后，不变性是十分重要的对于确保一个函数确实没有改变原来的数据而不是返回数据的新的副本。</p>\n<p>例如， 如果数组以及对象在经历过多个函数之后， 如果我们不能保持不变性， 那么函数可能不会得到数组或者对象的原始值。</p>\n<p>在可变的对象和数组的情况下，如果发生了一些错误对于我们来说是非常困难排除bug的。</p>\n<h2 id=\"支持不变性的库\"><a href=\"#支持不变性的库\" class=\"headerlink\" title=\"支持不变性的库\"></a>支持不变性的库</h2><p>JavaScript默认没有对于使得对象或者数组不变提供任何的工具， 下面是一些可能帮助我们实现不变性的库:</p>\n<ul>\n<li>Seamless-immutable</li>\n<li>Immutable JS</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>函数式编程中主要的方面是纯函数和更小的功能， 函数不变性以及更少的副作用。</p>\n<p>本文翻译至<a href=\"https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a>，实际上翻译之后才发现这里只是一些函数式编程基础知识，对于其他的函数式编程的更多特性并没有涉及，本文仅仅作为函数式编程的基本入门知识， 如果能帮到读者，那就再好不过了。</p>\n"},{"title":"CSS层叠上下文","date":"2017-08-21T16:19:29.000Z","_content":"\n​\t最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。\n\n###  层叠上下文\n\n普通元素使用css的特殊属性可以创建层叠上下文，~~创建层叠上下文的元素的层级会高于普通的元素~~ ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。\n\n在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。\n\n###  层叠水平\n\n层叠水平类似 'level' , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。\n\n普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。\n\n### 层叠顺序\n\n层叠顺序定义的是在相同的层叠上下文中  **元素发生层叠的时候** ，特定的显示顺序, 层叠顺序图表引入顺序如下:\n\n![ ]( http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png ) \n\n> 注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 `dispplay: inline-block` 是个例外，我想是因为在 CSS 中 `内容主要，样式次之`的原因吧， `inline-block`  会被认为是内容 ， `block` 会被认为属于布局的样式\n\n如下代码所示:\n\n```\n<div class=\"con\">\n    <div class=\"block2\">\n    </div>\n    <div class=\"block1\">\n    </div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n    .block2 {\n        display: inline-block;\n        margin-bottom: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n</style>\n```\n\n效果如下:\n\n![''](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png)\n\n如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？\n\n因为我们给 block2元素添加了 `display: inline-block` 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。\n\n> 下面是两条非常重要的层叠准则如下 :\n>\n> 1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）\n>\n> 2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素\n\n### 创建层叠上下文\n\n如何创建层叠上下文呢？这里有三种途径：\n\n1.页面的根元素( html )本身带有层叠上下文\n\n对于页面的根元素 ` html` 本身具有层叠上下文的\n\n2.对于包含有 `position: absolute`  `position: relative ` 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)\n\n例如代码如下:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n    <div class=\"block1\"></div>\n    <div class=\"block2\"></div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n   .block2 {\n        margin-top: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n   }\n   // 第一种情况\n   .block1 {\n      z-index: 2;\n   } \n   .blcok2 {\n      z-index: 1;\n   }\n   // 第二种情况\n   .block1 {\n      position: relative;\n      z-index: 0;\n   } \n   .blcok2 {\n      z-index: 1000;\n   }\n</style>\n</body>\n</html>\n```\n\n我们通过对于css样式的改变出现下面的这几种情况：\n\n第一种情况:\n\n这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 `z-index` 进行比较没有起作用   **使用 `z-index`只对于层叠上下文的元素起作用**\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png)\n\n\n\n第二种情况：\n\n使用 `position: relative`  和 `z-index` 创建了层叠上下文， ~~在层次上，层叠上下文的要高于普通元素~~，因为使用 `z-index: 0` 的层叠水平会高于 display:block  元素，因此会出现下面的效果\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png)\n\n\n\n3.使用其他特殊的 css3  属性创建的层叠上下文。\n\n使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:\n\n1.当一个元素的 **父元素** 声明 `display: flex | display: inline-flex` 的时候，并且该元素的 `z-index` 不是 `auto` 而是数数值的时候，该元素变为层叠上下文元素；\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n   <div class=\"block1\">\n\n   </div>\n    <div class=\"block2\">\n\n    </div>\n</div>\n<style>\n    .con {\n        display: flex;\n    }\n    .block1 {\n        width: 200px;\n        height: 200px;\n        background-color: blue;\n    }\n    .block2 {\n        margin-left: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n     .block2 {\n       }\n     .block1 {\n         z-index: 1;\n    }\n</style>\n</body>\n</html>\n```\n\n正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面\n\n但是，当我们给 block1 添加了一个 `z-index`  不为 auto的值的时候，情况发生变化了, Magic !\n\n如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png)\n\n这是因为添加了 `z-index` 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 `display: block` 的普通元素，如果 `z-index` 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 `display: block` 元素的。\n\n2. 使用 CSS 中的 `opacity` 创建的层叠上下文元素:\n\n   我们有时候会出现想让 不透明元素内的元素显示正常，\n\n   ```\n   <div class='con'>\n   \t<div class= 'text'>我是一段文字</div>\n   <div>\n   <sytle>\n   .con{\n     width: 100px;\n     height: 100px;\n     background-color: blue;\n     opacity: 0.5;\n   }\n   .text {\n     width: 100px;\n     height: 100px;\n     background-color: red;\n     position: relative;\n     z-index: -1;\n   }\n   </style>\n   ```\n\n   在实际上，元素内的文字也会被透明度影响，这被认为是 使用 `opacity` 创建了层叠上下文元素\n\n   因为，在没有使用 `opacity` 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 `z-index` 小于零，在层叠规则上小于 `block` 元素，所以会被遮盖掉。当我们对于 `class='con'` 的元素没有设置 `opacity`的时候，效果如下：\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png)\n\n   这样效果的原因是因为：使用了 `position: relative` 和 `z-index: -1` 形成的层叠上下文，在层叠规则上要低于 其他的`block` 元素，因此图片中的红色方块就被遮挡住了；\n\n   然而，当我们对元素应用 `opacity` 当 `opacity` 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  \n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png)\n\n   Magic!\n\n   如上,\n\n   因为我们对于 `class = 'con'` 设置了 `opacity: 0.7` 创建了层叠上下文，其子元素 `class ='text' ` 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；\n\n   >上面对于使用 `opacity` 创建的层叠上下文，来解释子元素会受到父元素 `opacity` 的影响，实际上，我们也可以认为属性 `opacity` 具有继承性，子元素会继承父元素的 `opacity` 属性\n\n   对于使用  `opacity` 会影响到子元素的效果，如果我们想让子元素不受到父元素  `opacity` 的影响， 解决办法有下面的几种方法：\n\n   >借用 `background: rgba()` 了来实现\n\n   使用 这个属性可以避免 后代子元素使用 `opacity` 造成的干扰效果，\n\n   ```\n   background: rgba(R,G,B,A)\n   // R: 代表红色取值\n   // G: 代表绿色取值\n   // B: 代表蓝色取值\n   // A: 代表透明度\n   // R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色\n   ```\n\n   因此，上面的问题，我们使用 `rgba` 来解决：\n\n   `background: rgba(0,0,255,0.5)` \n\n   >还有一种方法，是让被 `opacity` 不作用在父元素上\n\n   html: \n\n   ```\n   <div class='con'>\n   \t<div class='text'>\n   \t\t<p>我是要进行显示的元素</p>\n   \t</div>\n   \t<div class='back'></div>\n   </div>\n   ```\n\n   CSS:\n\n   ```\n   .blo {\n           position: relative;\n           width: 100px;\n           height: 100px;\n       }\n   .back {\n           position: absolute;\n           top: 0;\n           left: 0;\n           width: 100%;\n           height: 100%;\n           background-color: blue;\n           opacity: 0.2;\n       }\n   ```\n\n   ​\n\n    效果如下:\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png)\n\n   #### 层叠上下文的特性：\n\n   层叠上下文元素有如下特性：\n\n   - 层叠上下文的层叠水平要比普通元素高；\n   - 层叠上下文可以阻断元素的混合模式；\n   - 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n   - 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n   - 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 ","source":"_posts/CSS层叠上下文.md","raw":"---\ntitle: CSS层叠上下文\ndate: 2017-08-22 00:19:29\ntags: CSS层叠\ncategories: CSS\n---\n\n​\t最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。\n\n###  层叠上下文\n\n普通元素使用css的特殊属性可以创建层叠上下文，~~创建层叠上下文的元素的层级会高于普通的元素~~ ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。\n\n在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。\n\n###  层叠水平\n\n层叠水平类似 'level' , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。\n\n普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。\n\n### 层叠顺序\n\n层叠顺序定义的是在相同的层叠上下文中  **元素发生层叠的时候** ，特定的显示顺序, 层叠顺序图表引入顺序如下:\n\n![ ]( http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png ) \n\n> 注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 `dispplay: inline-block` 是个例外，我想是因为在 CSS 中 `内容主要，样式次之`的原因吧， `inline-block`  会被认为是内容 ， `block` 会被认为属于布局的样式\n\n如下代码所示:\n\n```\n<div class=\"con\">\n    <div class=\"block2\">\n    </div>\n    <div class=\"block1\">\n    </div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n    .block2 {\n        display: inline-block;\n        margin-bottom: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n</style>\n```\n\n效果如下:\n\n![''](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png)\n\n如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？\n\n因为我们给 block2元素添加了 `display: inline-block` 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。\n\n> 下面是两条非常重要的层叠准则如下 :\n>\n> 1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）\n>\n> 2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素\n\n### 创建层叠上下文\n\n如何创建层叠上下文呢？这里有三种途径：\n\n1.页面的根元素( html )本身带有层叠上下文\n\n对于页面的根元素 ` html` 本身具有层叠上下文的\n\n2.对于包含有 `position: absolute`  `position: relative ` 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)\n\n例如代码如下:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n    <div class=\"block1\"></div>\n    <div class=\"block2\"></div>\n</div>\n<style>\n   .block1 {\n       width: 200px;\n       height: 200px;\n       background-color: blue;\n   }\n   .block2 {\n        margin-top: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n   }\n   // 第一种情况\n   .block1 {\n      z-index: 2;\n   } \n   .blcok2 {\n      z-index: 1;\n   }\n   // 第二种情况\n   .block1 {\n      position: relative;\n      z-index: 0;\n   } \n   .blcok2 {\n      z-index: 1000;\n   }\n</style>\n</body>\n</html>\n```\n\n我们通过对于css样式的改变出现下面的这几种情况：\n\n第一种情况:\n\n这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 `z-index` 进行比较没有起作用   **使用 `z-index`只对于层叠上下文的元素起作用**\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png)\n\n\n\n第二种情况：\n\n使用 `position: relative`  和 `z-index` 创建了层叠上下文， ~~在层次上，层叠上下文的要高于普通元素~~，因为使用 `z-index: 0` 的层叠水平会高于 display:block  元素，因此会出现下面的效果\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png)\n\n\n\n3.使用其他特殊的 css3  属性创建的层叠上下文。\n\n使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:\n\n1.当一个元素的 **父元素** 声明 `display: flex | display: inline-flex` 的时候，并且该元素的 `z-index` 不是 `auto` 而是数数值的时候，该元素变为层叠上下文元素；\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div class=\"con\">\n   <div class=\"block1\">\n\n   </div>\n    <div class=\"block2\">\n\n    </div>\n</div>\n<style>\n    .con {\n        display: flex;\n    }\n    .block1 {\n        width: 200px;\n        height: 200px;\n        background-color: blue;\n    }\n    .block2 {\n        margin-left: -100px;\n        width: 200px;\n        height: 200px;\n        background-color: red;\n    }\n     .block2 {\n       }\n     .block1 {\n         z-index: 1;\n    }\n</style>\n</body>\n</html>\n```\n\n正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面\n\n但是，当我们给 block1 添加了一个 `z-index`  不为 auto的值的时候，情况发生变化了, Magic !\n\n如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png)\n\n这是因为添加了 `z-index` 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 `display: block` 的普通元素，如果 `z-index` 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 `display: block` 元素的。\n\n2. 使用 CSS 中的 `opacity` 创建的层叠上下文元素:\n\n   我们有时候会出现想让 不透明元素内的元素显示正常，\n\n   ```\n   <div class='con'>\n   \t<div class= 'text'>我是一段文字</div>\n   <div>\n   <sytle>\n   .con{\n     width: 100px;\n     height: 100px;\n     background-color: blue;\n     opacity: 0.5;\n   }\n   .text {\n     width: 100px;\n     height: 100px;\n     background-color: red;\n     position: relative;\n     z-index: -1;\n   }\n   </style>\n   ```\n\n   在实际上，元素内的文字也会被透明度影响，这被认为是 使用 `opacity` 创建了层叠上下文元素\n\n   因为，在没有使用 `opacity` 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 `z-index` 小于零，在层叠规则上小于 `block` 元素，所以会被遮盖掉。当我们对于 `class='con'` 的元素没有设置 `opacity`的时候，效果如下：\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png)\n\n   这样效果的原因是因为：使用了 `position: relative` 和 `z-index: -1` 形成的层叠上下文，在层叠规则上要低于 其他的`block` 元素，因此图片中的红色方块就被遮挡住了；\n\n   然而，当我们对元素应用 `opacity` 当 `opacity` 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  \n\n   ![](http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png)\n\n   Magic!\n\n   如上,\n\n   因为我们对于 `class = 'con'` 设置了 `opacity: 0.7` 创建了层叠上下文，其子元素 `class ='text' ` 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；\n\n   >上面对于使用 `opacity` 创建的层叠上下文，来解释子元素会受到父元素 `opacity` 的影响，实际上，我们也可以认为属性 `opacity` 具有继承性，子元素会继承父元素的 `opacity` 属性\n\n   对于使用  `opacity` 会影响到子元素的效果，如果我们想让子元素不受到父元素  `opacity` 的影响， 解决办法有下面的几种方法：\n\n   >借用 `background: rgba()` 了来实现\n\n   使用 这个属性可以避免 后代子元素使用 `opacity` 造成的干扰效果，\n\n   ```\n   background: rgba(R,G,B,A)\n   // R: 代表红色取值\n   // G: 代表绿色取值\n   // B: 代表蓝色取值\n   // A: 代表透明度\n   // R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色\n   ```\n\n   因此，上面的问题，我们使用 `rgba` 来解决：\n\n   `background: rgba(0,0,255,0.5)` \n\n   >还有一种方法，是让被 `opacity` 不作用在父元素上\n\n   html: \n\n   ```\n   <div class='con'>\n   \t<div class='text'>\n   \t\t<p>我是要进行显示的元素</p>\n   \t</div>\n   \t<div class='back'></div>\n   </div>\n   ```\n\n   CSS:\n\n   ```\n   .blo {\n           position: relative;\n           width: 100px;\n           height: 100px;\n       }\n   .back {\n           position: absolute;\n           top: 0;\n           left: 0;\n           width: 100%;\n           height: 100%;\n           background-color: blue;\n           opacity: 0.2;\n       }\n   ```\n\n   ​\n\n    效果如下:\n\n   ![](http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png)\n\n   #### 层叠上下文的特性：\n\n   层叠上下文元素有如下特性：\n\n   - 层叠上下文的层叠水平要比普通元素高；\n   - 层叠上下文可以阻断元素的混合模式；\n   - 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。\n   - 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。\n   - 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 ","slug":"CSS层叠上下文","published":1,"updated":"2017-08-26T01:55:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6w000cs33gqnrabo6v","content":"<p>​    最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。</p>\n<h3 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h3><p>普通元素使用css的特殊属性可以创建层叠上下文，<del>创建层叠上下文的元素的层级会高于普通的元素</del> ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。</p>\n<p>在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。</p>\n<h3 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h3><p>层叠水平类似 ‘level’ , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。</p>\n<p>普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。</p>\n<h3 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><p>层叠顺序定义的是在相同的层叠上下文中  <strong>元素发生层叠的时候</strong> ，特定的显示顺序, 层叠顺序图表引入顺序如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png\" alt=\" \"> </p>\n<blockquote>\n<p>注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 <code>dispplay: inline-block</code> 是个例外，我想是因为在 CSS 中 <code>内容主要，样式次之</code>的原因吧， <code>inline-block</code>  会被认为是内容 ， <code>block</code> 会被认为属于布局的样式</p>\n</blockquote>\n<p>如下代码所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin-bottom: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png\" alt=\"&#39;&#39;\"></p>\n<p>如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？</p>\n<p>因为我们给 block2元素添加了 <code>display: inline-block</code> 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。</p>\n<blockquote>\n<p>下面是两条非常重要的层叠准则如下 :</p>\n<p>1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）</p>\n<p>2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素</p>\n</blockquote>\n<h3 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h3><p>如何创建层叠上下文呢？这里有三种途径：</p>\n<p>1.页面的根元素( html )本身带有层叠上下文</p>\n<p>对于页面的根元素 <code>html</code> 本身具有层叠上下文的</p>\n<p>2.对于包含有 <code>position: absolute</code>  <code>position: relative</code> 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)</p>\n<p>例如代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .block2 &#123;</span><br><span class=\"line\">        margin-top: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第一种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      z-index: 2;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第二种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      z-index: 0;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1000;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过对于css样式的改变出现下面的这几种情况：</p>\n<p>第一种情况:</p>\n<p>这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 <code>z-index</code> 进行比较没有起作用   <strong>使用 <code>z-index</code>只对于层叠上下文的元素起作用</strong></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png\" alt=\"\"></p>\n<p>第二种情况：</p>\n<p>使用 <code>position: relative</code>  和 <code>z-index</code> 创建了层叠上下文， <del>在层次上，层叠上下文的要高于普通元素</del>，因为使用 <code>z-index: 0</code> 的层叠水平会高于 display:block  元素，因此会出现下面的效果</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png\" alt=\"\"></p>\n<p>3.使用其他特殊的 css3  属性创建的层叠上下文。</p>\n<p>使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:</p>\n<p>1.当一个元素的 <strong>父元素</strong> 声明 <code>display: flex | display: inline-flex</code> 的时候，并且该元素的 <code>z-index</code> 不是 <code>auto</code> 而是数数值的时候，该元素变为层叠上下文元素；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">   &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .con &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block1 &#123;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     .block2 &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     .block1 &#123;</span><br><span class=\"line\">         z-index: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面</p>\n<p>但是，当我们给 block1 添加了一个 <code>z-index</code>  不为 auto的值的时候，情况发生变化了, Magic !</p>\n<p>如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png\" alt=\"\"></p>\n<p>这是因为添加了 <code>z-index</code> 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 <code>display: block</code> 的普通元素，如果 <code>z-index</code> 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 <code>display: block</code> 元素的。</p>\n<ol start=\"2\">\n<li><p>使用 CSS 中的 <code>opacity</code> 创建的层叠上下文元素:</p>\n<p>我们有时候会出现想让 不透明元素内的元素显示正常，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class= &apos;text&apos;&gt;我是一段文字&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;sytle&gt;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在实际上，元素内的文字也会被透明度影响，这被认为是 使用 <code>opacity</code> 创建了层叠上下文元素</p>\n<p>因为，在没有使用 <code>opacity</code> 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 <code>z-index</code> 小于零，在层叠规则上小于 <code>block</code> 元素，所以会被遮盖掉。当我们对于 <code>class=&#39;con&#39;</code> 的元素没有设置 <code>opacity</code>的时候，效果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png\" alt=\"\"></p>\n<p>这样效果的原因是因为：使用了 <code>position: relative</code> 和 <code>z-index: -1</code> 形成的层叠上下文，在层叠规则上要低于 其他的<code>block</code> 元素，因此图片中的红色方块就被遮挡住了；</p>\n<p>然而，当我们对元素应用 <code>opacity</code> 当 <code>opacity</code> 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  </p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png\" alt=\"\"></p>\n<p>Magic!</p>\n<p>如上,</p>\n<p>因为我们对于 <code>class = &#39;con&#39;</code> 设置了 <code>opacity: 0.7</code> 创建了层叠上下文，其子元素 <code>class =&#39;text&#39;</code> 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；</p>\n<blockquote>\n<p>上面对于使用 <code>opacity</code> 创建的层叠上下文，来解释子元素会受到父元素 <code>opacity</code> 的影响，实际上，我们也可以认为属性 <code>opacity</code> 具有继承性，子元素会继承父元素的 <code>opacity</code> 属性</p>\n</blockquote>\n<p>对于使用  <code>opacity</code> 会影响到子元素的效果，如果我们想让子元素不受到父元素  <code>opacity</code> 的影响， 解决办法有下面的几种方法：</p>\n<blockquote>\n<p>借用 <code>background: rgba()</code> 了来实现</p>\n</blockquote>\n<p>使用 这个属性可以避免 后代子元素使用 <code>opacity</code> 造成的干扰效果，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(R,G,B,A)</span><br><span class=\"line\">// R: 代表红色取值</span><br><span class=\"line\">// G: 代表绿色取值</span><br><span class=\"line\">// B: 代表蓝色取值</span><br><span class=\"line\">// A: 代表透明度</span><br><span class=\"line\">// R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色</span><br></pre></td></tr></table></figure>\n<p>因此，上面的问题，我们使用 <code>rgba</code> 来解决：</p>\n<p><code>background: rgba(0,0,255,0.5)</code> </p>\n<blockquote>\n<p>还有一种方法，是让被 <code>opacity</code> 不作用在父元素上</p>\n</blockquote>\n<p>html: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;text&apos;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是要进行显示的元素&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;back&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blo &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.back &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">        opacity: 0.2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p> 效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png\" alt=\"\"></p>\n<h4 id=\"层叠上下文的特性：\"><a href=\"#层叠上下文的特性：\" class=\"headerlink\" title=\"层叠上下文的特性：\"></a>层叠上下文的特性：</h4><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高；</li>\n<li>层叠上下文可以阻断元素的混合模式；</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 </li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>​    最近看到张鑫旭大神的关于css元素层叠显示的文章，感到收获了很多，对于css元素堆叠有了深入的理解，下面是我做的写笔记。</p>\n<h3 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h3><p>普通元素使用css的特殊属性可以创建层叠上下文，<del>创建层叠上下文的元素的层级会高于普通的元素</del> ，这就好像，当我们眼睛看电脑的时候，创建了层叠上下文的元素离我们的眼睛更近了。当层叠上下文与普通元素叠加在一起的时候，层叠上下文元素会叠放在普通元素的上面。</p>\n<p>在上面的这段话中，自己的理解是不正确的，创建了层叠上下文的元素只是有了层次，但是，并不能说，层叠上下文元素就一定到天然高于普通的元素。关于比较，还是要看 层叠顺序来的。</p>\n<h3 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h3><p>层叠水平类似 ‘level’ , 层叠水平的大小决定了同一层叠上下文元素下元素在 z 轴上的显示顺序，所有的元素都有层叠水平都有层叠水平，但是对于普通元素，讨论其层叠水平是没有意义的。</p>\n<p>普通元素的层叠水平优先由层叠上下文来决定，层叠水平的比较仅在层叠上下文中比较才有意义。</p>\n<h3 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><p>层叠顺序定义的是在相同的层叠上下文中  <strong>元素发生层叠的时候</strong> ，特定的显示顺序, 层叠顺序图表引入顺序如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%E8%A7%84%E5%88%99.png\" alt=\" \"> </p>\n<blockquote>\n<p>注意: 上面有句话 “当元素发生层叠的时候‘ ，如果元素没有创建层叠上下文，没有发生层叠的现象，下面的层叠顺序是不起作用的，但是，使用 <code>dispplay: inline-block</code> 是个例外，我想是因为在 CSS 中 <code>内容主要，样式次之</code>的原因吧， <code>inline-block</code>  会被认为是内容 ， <code>block</code> 会被认为属于布局的样式</p>\n</blockquote>\n<p>如下代码所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        margin-bottom: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-22_23-40-52.png\" alt=\"&#39;&#39;\"></p>\n<p>如果正常情况下，因为在 DOM 文档中，block1 元素位于 block2 元素下面，因此block 1 应该遮挡住 block2 才是，但是为什么会出现这种情况呢？</p>\n<p>因为我们给 block2元素添加了 <code>display: inline-block</code> 属性，根据上面的层叠规则图我们可以知道，应用到的 inline-block元素层叠水平上要高于 block 元素，因此 block2 元素会覆盖掉 block1 元素，这就是 使用层叠顺序的作用，用于比较同一层叠水平下的元素顺序。</p>\n<blockquote>\n<p>下面是两条非常重要的层叠准则如下 :</p>\n<p>1.谁大谁上，当两个元素位于同一层叠上下文中的时候，按照层叠顺序，层叠水平大的要覆盖掉层叠水平小的元素。（要注意这里面当元素位于同一个层叠上下文的时候，才会按照层叠顺序来创建）</p>\n<p>2.后来居上，当两个元素的层叠水平一致的时候，并且层叠顺序一致的时候，在DOM流中 后面的元素会覆盖掉前面的元素</p>\n</blockquote>\n<h3 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h3><p>如何创建层叠上下文呢？这里有三种途径：</p>\n<p>1.页面的根元素( html )本身带有层叠上下文</p>\n<p>对于页面的根元素 <code>html</code> 本身具有层叠上下文的</p>\n<p>2.对于包含有 <code>position: absolute</code>  <code>position: relative</code> 的定位元素，当 z-index 不是auto 的时候，会创建层叠上下文。(注意这里，z-index 不能是 auto, 否则不能创建层叠上下文)</p>\n<p>例如代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">       width: 200px;</span><br><span class=\"line\">       height: 200px;</span><br><span class=\"line\">       background-color: blue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .block2 &#123;</span><br><span class=\"line\">        margin-top: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第一种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      z-index: 2;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 第二种情况</span><br><span class=\"line\">   .block1 &#123;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">      z-index: 0;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   .blcok2 &#123;</span><br><span class=\"line\">      z-index: 1000;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>我们通过对于css样式的改变出现下面的这几种情况：</p>\n<p>第一种情况:</p>\n<p>这种情况下，实际上 z-index 没有起作用，因为这里面的两个元素都是普通元素，没有创建层叠上下文的元素因此 这里使用 <code>z-index</code> 进行比较没有起作用   <strong>使用 <code>z-index</code>只对于层叠上下文的元素起作用</strong></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%881%EF%BC%89_2017-08-24_00-08-06.png\" alt=\"\"></p>\n<p>第二种情况：</p>\n<p>使用 <code>position: relative</code>  和 <code>z-index</code> 创建了层叠上下文， <del>在层次上，层叠上下文的要高于普通元素</del>，因为使用 <code>z-index: 0</code> 的层叠水平会高于 display:block  元素，因此会出现下面的效果</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%B1%82%E5%8F%A0%EF%BC%882%EF%BC%89_2017-08-24_00-10-54.png\" alt=\"\"></p>\n<p>3.使用其他特殊的 css3  属性创建的层叠上下文。</p>\n<p>使用一些特殊的层叠CSS3属性也会创建层叠上下文：有这么几个:</p>\n<p>1.当一个元素的 <strong>父元素</strong> 声明 <code>display: flex | display: inline-flex</code> 的时候，并且该元素的 <code>z-index</code> 不是 <code>auto</code> 而是数数值的时候，该元素变为层叠上下文元素；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;con&quot;&gt;</span><br><span class=\"line\">   &lt;div class=&quot;block1&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;block2&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .con &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block1 &#123;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .block2 &#123;</span><br><span class=\"line\">        margin-left: -100px;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     .block2 &#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     .block1 &#123;</span><br><span class=\"line\">         z-index: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>正常情况下，block2 元素 应该在block元素上面，因为dom流中 block元素位于 后面</p>\n<p>但是，当我们给 block1 添加了一个 <code>z-index</code>  不为 auto的值的时候，情况发生变化了, Magic !</p>\n<p>如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/flex-z-index%20%20magic%20%202017-08-24_22-33-25.png\" alt=\"\"></p>\n<p>这是因为添加了 <code>z-index</code> 元素就变成了层叠上下文了，在层叠顺序表中， z-index 大于 0 的层叠上下文在 层次上要高于 <code>display: block</code> 的普通元素，如果 <code>z-index</code> 为 -1 的时候，其实情况又不一样了。因为 z-index 为负值的时候是会小于 <code>display: block</code> 元素的。</p>\n<ol start=\"2\">\n<li><p>使用 CSS 中的 <code>opacity</code> 创建的层叠上下文元素:</p>\n<p>我们有时候会出现想让 不透明元素内的元素显示正常，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class= &apos;text&apos;&gt;我是一段文字&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;sytle&gt;</span><br><span class=\"line\">.con&#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">  opacity: 0.5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">  z-index: -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>在实际上，元素内的文字也会被透明度影响，这被认为是 使用 <code>opacity</code> 创建了层叠上下文元素</p>\n<p>因为，在没有使用 <code>opacity</code> 的时候， 没有创建层叠上下文， 这时候 .text 元素是创建了层叠上下文的，因为 <code>z-index</code> 小于零，在层叠规则上小于 <code>block</code> 元素，所以会被遮盖掉。当我们对于 <code>class=&#39;con&#39;</code> 的元素没有设置 <code>opacity</code>的时候，效果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacityCENGDIE%202017-08-25_23-16-27.png\" alt=\"\"></p>\n<p>这样效果的原因是因为：使用了 <code>position: relative</code> 和 <code>z-index: -1</code> 形成的层叠上下文，在层叠规则上要低于 其他的<code>block</code> 元素，因此图片中的红色方块就被遮挡住了；</p>\n<p>然而，当我们对元素应用 <code>opacity</code> 当 <code>opacity</code> 是不为 1 的数字的时候，我们发现层叠顺序发生了改变：  </p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/opacity%20Mag%202017-08-25_23-27-13.png\" alt=\"\"></p>\n<p>Magic!</p>\n<p>如上,</p>\n<p>因为我们对于 <code>class = &#39;con&#39;</code> 设置了 <code>opacity: 0.7</code> 创建了层叠上下文，其子元素 <code>class =&#39;text&#39;</code> 虽然也是创建了层叠上下文，但是根据层叠上下文的规则，如果父元素也是创建了层叠上下文，那么子元素创建的层叠上下文要受到父元素的层叠上下文的制约；</p>\n<blockquote>\n<p>上面对于使用 <code>opacity</code> 创建的层叠上下文，来解释子元素会受到父元素 <code>opacity</code> 的影响，实际上，我们也可以认为属性 <code>opacity</code> 具有继承性，子元素会继承父元素的 <code>opacity</code> 属性</p>\n</blockquote>\n<p>对于使用  <code>opacity</code> 会影响到子元素的效果，如果我们想让子元素不受到父元素  <code>opacity</code> 的影响， 解决办法有下面的几种方法：</p>\n<blockquote>\n<p>借用 <code>background: rgba()</code> 了来实现</p>\n</blockquote>\n<p>使用 这个属性可以避免 后代子元素使用 <code>opacity</code> 造成的干扰效果，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: rgba(R,G,B,A)</span><br><span class=\"line\">// R: 代表红色取值</span><br><span class=\"line\">// G: 代表绿色取值</span><br><span class=\"line\">// B: 代表蓝色取值</span><br><span class=\"line\">// A: 代表透明度</span><br><span class=\"line\">// R G B 代表 三原色, 数值为 0 - 255 使用这三种颜色的组合可以实现任何其他的颜色</span><br></pre></td></tr></table></figure>\n<p>因此，上面的问题，我们使用 <code>rgba</code> 来解决：</p>\n<p><code>background: rgba(0,0,255,0.5)</code> </p>\n<blockquote>\n<p>还有一种方法，是让被 <code>opacity</code> 不作用在父元素上</p>\n</blockquote>\n<p>html: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&apos;con&apos;&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;text&apos;&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;我是要进行显示的元素&lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&apos;back&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.blo &#123;</span><br><span class=\"line\">        position: relative;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">.back &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 0;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">        opacity: 0.2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p> 效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Snipaste_2017-08-26_00-24-17.png\" alt=\"\"></p>\n<h4 id=\"层叠上下文的特性：\"><a href=\"#层叠上下文的特性：\" class=\"headerlink\" title=\"层叠上下文的特性：\"></a>层叠上下文的特性：</h4><p>层叠上下文元素有如下特性：</p>\n<ul>\n<li>层叠上下文的层叠水平要比普通元素高；</li>\n<li>层叠上下文可以阻断元素的混合模式；</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 </li>\n</ul>\n</li>\n</ol>\n"},{"title":"JSONP跨域 ajax请求","date":"2017-09-03T04:01:26.000Z","_content":"\n使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 `jsonp` 实现的跨域请求\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<div id=\"div\"></div>\n<body>\n<div>\n    号码归属地查询<input id='phone' type='text' ><button id = 'btn'>查询手机号归属地</button>\n    <p>您的手机号码归属地是  <span id='city'></span></p>\n</div>\n<script type=\"text/javascript\">\n   function doFunction (data) {\n            if (!data.result) {\n                return;\n            } \n            document.getElementById('city').innerHTML = data.result.city;\n        \n        }\n    window.onload = function () {\n        var sendObj = {\n            url: 'http://apis.juhe.cn/mobile/get',\n            phone: '13429667914',\n            key: '4ebdd2325a4ce36fa7ca55e910c185e9',\n            callback: 'doFunction'\n        };\n        function sendLink (obj) {\n            var link = obj.url;\n            for (var key in obj) {\n                if (key !== 'url') {\n                    link = link + (~link.indexOf('?') ? '&' : '?' );\n                    link = link + key + '=' + obj[key];\n                }\n            }\n            return link;\n        }\n        document.getElementById('btn').addEventListener('click', function () {\n            var body = document.getElementsByTagName('body')[0];\n            var script = document.createElement('script');\n            sendObj.phone = document.getElementById('phone').value;\n            script.setAttribute('src', sendLink(sendObj));\n            if (body.getElementsByTagName('script').length === 2) {\n                body.replaceChild( script ,body.lastChild);\n            } else {\n                document.getElementsByTagName('body')[0].appendChild(script);\n            }\n        });\n    }\n</script>\n<!--\n   <script src=\"http://apis.juhe.cn/mobile/get?phone=13429667914&key=4ebdd2325a4ce36fa7ca55e910c185e9&callback=doFunction\"></script>\n-->\n</body>\n</html>\n```\n\n#### ajax 请求\n\n原生的 ajax 请求如下:\n\n```\nvar request;\nif (window.XMLHttpRequest) {\n\trequest = new XMLHttpRequest();  \n} else {\n// for IE\n    request = new ActiveObject();\n}\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    console.log(request.responseText);\n  }\n};\nrequest.open('get', url, false / true);\nrequest.send();\n```\n\n使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；\n\n`open` 方法\n\n使用 `open` 方法接收三个参数:\n\n要发送的请求类型:  'get '    或者 'post'  \n\n请求的url : 注意 `只能向同一个域中使用相同端口和协议 URL 发出请求`，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；\n\n什么是跨域？\n\n***\n\n只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:\n\n一个 URL 地址如下:\n\n`https://www.baidu.com:8080`\n\n`https`  协议， 用来定义浏览器打开文件的形式\n\n`www.baidu.com` 域名,  其中     `baidu.com`  主域     `www.baidu.com`  子域\n\n`:8080` 端口\n\n当两个 `URL` 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  \n\n但是这种情况:\n\n`https:// www.a.com/javascript/a.js`\n\n`https:// www.a.com/b.js`\n\n这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到\n\nhttps://segmentfault.com/a/1190000000718840\n\n\n\nhttp://blog.csdn.net/seebetpro/article/details/51326260\n\n***\n\n布尔值：表示是否进行异步\n\n在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:\n\n```\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    // 表示请求成功之后，并且有返回数据之后要进行的动作\n  }\n}\n```\n\n`status` : 表示响应的 `http` 状态,对于  http 的状态码， 要记住几个重要的：[http状态码]('http://www.cnblogs.com/sprinng/p/6559431.html')\n\n2XX :  表示请求成功  \n\n`200` 请求成功， `201` 已创建  `202` 接收   `204` 无内容  \n\n3XX: 表示重定向  \n\n`300` 多路选择  `301` 永久转移  `302` 暂时转移  `304` 未修改\n\n4XX: 客户方错误  \n\n`400` 错误请求  `401` 未认证   `408` 请求超时  `410` 失败\n\n5XX: 服务器错误\n\n`500` 服务器内部错误  `501` 未实现   `504` 网关超时  \n\n关于这些请求的具体情况：\n\n2XX: 表示已经接受到了请求\n\n| 状态码  | 含义                   |\n| ---- | -------------------- |\n| 200  | 表示请求已经成功             |\n| 201  | 表示请求已经被创建            |\n| 202  | 服务器已经接收到了请求， 但是尚未处理  |\n| 204  | 服务器已经处理了请求， 但是没有返回任何 |\n\n3XX:资源重定向\n\n| 状态码  | 含义                                       |\n| ---- | ---------------------------------------- |\n| 301  | 表示永久性重定向， 请求的资源分配到新的 url                 |\n| 302  | 表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问 |\n| 304  | 表示请求的资源已经找到， 但是不符合条件要求                   |\n\n4XX:客户端请求错误\n\n| 状态码  | 说明                                |\n| :--- | --------------------------------- |\n| 400  | 表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。 |\n| 401  | 表示发送的请求需要通过使用 HTTP 认证             |\n| 403  | 表示客户端想要请求的资源被服务器拒绝访问              |\n| 404  | 表示在服务器上没有找到请求的资源                  |\n\n5XX: 服务器错误\n\n| 状态码        | 说明                    |\n| ---------- | --------------------- |\n| 500（服务器错误） | 表示服务器在执行请求的时候发生了错误    |\n| 503（服务器正忙） | 表示现在服务器正在处于超负载状态，无法处理 |\n\n`readyState` 表示 `request` 对象的  `readyState` 对象，属性可取的值如下：\n\n`0` : 未初始化，尚未调用 open() 方法\n\n`1` : 启动， 已经调用 open  方法，尚未调用 send() 方法\n\n`2` : 发送，已经调用 send() 方法，但是尚未接收到响应\n\n`3`: 接收，表示已经接受到部分数据\n\n`4`: 完成, 已经接收到全部的响应数据\n\n> 使用 `get` 和 `post` 请求的区别\n\n##### 1. 两种方式传递参数的方式不同\n\n`Get` 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 \n\n`post` 请求是将作为 HTTP  消息的实体内容发送给服务器\n\n##### 2. 两者缓存不同\n\n使用 `get` 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据\n\n##### 3.服务器端 针对这两种方式的获取参数是不同的\n\n在客户端通过使用 `get` 请求的时候，服务器端通过使用 `Request.QueryString`  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 `Request.Form` 来进行获取到参数\n\n为什么要使用两种方式:\n\n当请求没有副作用的时候， 例如进行搜索数据， 可以使用 `get` 方法， 当请求存在副作用的时候，使用 `post `进行请求\n\n使用 `post ` 的情况:\n\n* 请求的结果存在副作用，例如，向数据库内添加新的数据行\n* 使用 GET 方法, 使用表单上添加的数据使得 URL太长\n* 进行传送的数据不是7 位的 ASCII 编码\n\n使用 `get` 的情况\n\n* 请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索\n* 请求结果无持续性的副作用\n* 收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符\n\n\n\n### 如何使用 ajax 实现跨域？\n\n对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？\n\n#### 1.使用跨源资源共享(CORS)\n\n跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:\n\n浏览器向服务器发送请求的时候，添加一个额外的 `origin` 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)\n\n如果服务器认为请求可以接受，可以在 `Access-Control-Allow-Origin` 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png)\n\n如上图所示，实现了公共资源的共享\n\n#### 2.使用 JSONP\n\n使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求\n\n缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 `get` 请求进行\n\n","source":"_posts/JSONP跨域-ajax请求.md","raw":"---\ntitle: JSONP跨域 ajax请求\ndate: 2017-09-03 12:01:26\ntags: ajax\ncategories: 代码集\n---\n\n使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 `jsonp` 实现的跨域请求\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<div id=\"div\"></div>\n<body>\n<div>\n    号码归属地查询<input id='phone' type='text' ><button id = 'btn'>查询手机号归属地</button>\n    <p>您的手机号码归属地是  <span id='city'></span></p>\n</div>\n<script type=\"text/javascript\">\n   function doFunction (data) {\n            if (!data.result) {\n                return;\n            } \n            document.getElementById('city').innerHTML = data.result.city;\n        \n        }\n    window.onload = function () {\n        var sendObj = {\n            url: 'http://apis.juhe.cn/mobile/get',\n            phone: '13429667914',\n            key: '4ebdd2325a4ce36fa7ca55e910c185e9',\n            callback: 'doFunction'\n        };\n        function sendLink (obj) {\n            var link = obj.url;\n            for (var key in obj) {\n                if (key !== 'url') {\n                    link = link + (~link.indexOf('?') ? '&' : '?' );\n                    link = link + key + '=' + obj[key];\n                }\n            }\n            return link;\n        }\n        document.getElementById('btn').addEventListener('click', function () {\n            var body = document.getElementsByTagName('body')[0];\n            var script = document.createElement('script');\n            sendObj.phone = document.getElementById('phone').value;\n            script.setAttribute('src', sendLink(sendObj));\n            if (body.getElementsByTagName('script').length === 2) {\n                body.replaceChild( script ,body.lastChild);\n            } else {\n                document.getElementsByTagName('body')[0].appendChild(script);\n            }\n        });\n    }\n</script>\n<!--\n   <script src=\"http://apis.juhe.cn/mobile/get?phone=13429667914&key=4ebdd2325a4ce36fa7ca55e910c185e9&callback=doFunction\"></script>\n-->\n</body>\n</html>\n```\n\n#### ajax 请求\n\n原生的 ajax 请求如下:\n\n```\nvar request;\nif (window.XMLHttpRequest) {\n\trequest = new XMLHttpRequest();  \n} else {\n// for IE\n    request = new ActiveObject();\n}\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    console.log(request.responseText);\n  }\n};\nrequest.open('get', url, false / true);\nrequest.send();\n```\n\n使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；\n\n`open` 方法\n\n使用 `open` 方法接收三个参数:\n\n要发送的请求类型:  'get '    或者 'post'  \n\n请求的url : 注意 `只能向同一个域中使用相同端口和协议 URL 发出请求`，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；\n\n什么是跨域？\n\n***\n\n只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:\n\n一个 URL 地址如下:\n\n`https://www.baidu.com:8080`\n\n`https`  协议， 用来定义浏览器打开文件的形式\n\n`www.baidu.com` 域名,  其中     `baidu.com`  主域     `www.baidu.com`  子域\n\n`:8080` 端口\n\n当两个 `URL` 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  \n\n但是这种情况:\n\n`https:// www.a.com/javascript/a.js`\n\n`https:// www.a.com/b.js`\n\n这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到\n\nhttps://segmentfault.com/a/1190000000718840\n\n\n\nhttp://blog.csdn.net/seebetpro/article/details/51326260\n\n***\n\n布尔值：表示是否进行异步\n\n在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:\n\n```\nrequest.onreadystatechange = function () {\n  if (request.readyState == 4 && request.status == 200) {\n    // 表示请求成功之后，并且有返回数据之后要进行的动作\n  }\n}\n```\n\n`status` : 表示响应的 `http` 状态,对于  http 的状态码， 要记住几个重要的：[http状态码]('http://www.cnblogs.com/sprinng/p/6559431.html')\n\n2XX :  表示请求成功  \n\n`200` 请求成功， `201` 已创建  `202` 接收   `204` 无内容  \n\n3XX: 表示重定向  \n\n`300` 多路选择  `301` 永久转移  `302` 暂时转移  `304` 未修改\n\n4XX: 客户方错误  \n\n`400` 错误请求  `401` 未认证   `408` 请求超时  `410` 失败\n\n5XX: 服务器错误\n\n`500` 服务器内部错误  `501` 未实现   `504` 网关超时  \n\n关于这些请求的具体情况：\n\n2XX: 表示已经接受到了请求\n\n| 状态码  | 含义                   |\n| ---- | -------------------- |\n| 200  | 表示请求已经成功             |\n| 201  | 表示请求已经被创建            |\n| 202  | 服务器已经接收到了请求， 但是尚未处理  |\n| 204  | 服务器已经处理了请求， 但是没有返回任何 |\n\n3XX:资源重定向\n\n| 状态码  | 含义                                       |\n| ---- | ---------------------------------------- |\n| 301  | 表示永久性重定向， 请求的资源分配到新的 url                 |\n| 302  | 表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问 |\n| 304  | 表示请求的资源已经找到， 但是不符合条件要求                   |\n\n4XX:客户端请求错误\n\n| 状态码  | 说明                                |\n| :--- | --------------------------------- |\n| 400  | 表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。 |\n| 401  | 表示发送的请求需要通过使用 HTTP 认证             |\n| 403  | 表示客户端想要请求的资源被服务器拒绝访问              |\n| 404  | 表示在服务器上没有找到请求的资源                  |\n\n5XX: 服务器错误\n\n| 状态码        | 说明                    |\n| ---------- | --------------------- |\n| 500（服务器错误） | 表示服务器在执行请求的时候发生了错误    |\n| 503（服务器正忙） | 表示现在服务器正在处于超负载状态，无法处理 |\n\n`readyState` 表示 `request` 对象的  `readyState` 对象，属性可取的值如下：\n\n`0` : 未初始化，尚未调用 open() 方法\n\n`1` : 启动， 已经调用 open  方法，尚未调用 send() 方法\n\n`2` : 发送，已经调用 send() 方法，但是尚未接收到响应\n\n`3`: 接收，表示已经接受到部分数据\n\n`4`: 完成, 已经接收到全部的响应数据\n\n> 使用 `get` 和 `post` 请求的区别\n\n##### 1. 两种方式传递参数的方式不同\n\n`Get` 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 \n\n`post` 请求是将作为 HTTP  消息的实体内容发送给服务器\n\n##### 2. 两者缓存不同\n\n使用 `get` 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据\n\n##### 3.服务器端 针对这两种方式的获取参数是不同的\n\n在客户端通过使用 `get` 请求的时候，服务器端通过使用 `Request.QueryString`  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 `Request.Form` 来进行获取到参数\n\n为什么要使用两种方式:\n\n当请求没有副作用的时候， 例如进行搜索数据， 可以使用 `get` 方法， 当请求存在副作用的时候，使用 `post `进行请求\n\n使用 `post ` 的情况:\n\n* 请求的结果存在副作用，例如，向数据库内添加新的数据行\n* 使用 GET 方法, 使用表单上添加的数据使得 URL太长\n* 进行传送的数据不是7 位的 ASCII 编码\n\n使用 `get` 的情况\n\n* 请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索\n* 请求结果无持续性的副作用\n* 收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符\n\n\n\n### 如何使用 ajax 实现跨域？\n\n对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？\n\n#### 1.使用跨源资源共享(CORS)\n\n跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:\n\n浏览器向服务器发送请求的时候，添加一个额外的 `origin` 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)\n\n如果服务器认为请求可以接受，可以在 `Access-Control-Allow-Origin` 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png)\n\n如上图所示，实现了公共资源的共享\n\n#### 2.使用 JSONP\n\n使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求\n\n缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 `get` 请求进行\n\n","slug":"JSONP跨域-ajax请求","published":1,"updated":"2018-06-10T13:31:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh6x000ds33g1evay035","content":"<p>使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 <code>jsonp</code> 实现的跨域请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    号码归属地查询&lt;input id=&apos;phone&apos; type=&apos;text&apos; &gt;&lt;button id = &apos;btn&apos;&gt;查询手机号归属地&lt;/button&gt;</span><br><span class=\"line\">    &lt;p&gt;您的手机号码归属地是  &lt;span id=&apos;city&apos;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   function doFunction (data) &#123;</span><br><span class=\"line\">            if (!data.result) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            document.getElementById(&apos;city&apos;).innerHTML = data.result.city;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    window.onload = function () &#123;</span><br><span class=\"line\">        var sendObj = &#123;</span><br><span class=\"line\">            url: &apos;http://apis.juhe.cn/mobile/get&apos;,</span><br><span class=\"line\">            phone: &apos;13429667914&apos;,</span><br><span class=\"line\">            key: &apos;4ebdd2325a4ce36fa7ca55e910c185e9&apos;,</span><br><span class=\"line\">            callback: &apos;doFunction&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        function sendLink (obj) &#123;</span><br><span class=\"line\">            var link = obj.url;</span><br><span class=\"line\">            for (var key in obj) &#123;</span><br><span class=\"line\">                if (key !== &apos;url&apos;) &#123;</span><br><span class=\"line\">                    link = link + (~link.indexOf(&apos;?&apos;) ? &apos;&amp;&apos; : &apos;?&apos; );</span><br><span class=\"line\">                    link = link + key + &apos;=&apos; + obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return link;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">            var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\">            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">            sendObj.phone = document.getElementById(&apos;phone&apos;).value;</span><br><span class=\"line\">            script.setAttribute(&apos;src&apos;, sendLink(sendObj));</span><br><span class=\"line\">            if (body.getElementsByTagName(&apos;script&apos;).length === 2) &#123;</span><br><span class=\"line\">                body.replaceChild( script ,body.lastChild);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                document.getElementsByTagName(&apos;body&apos;)[0].appendChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">   &lt;script src=&quot;http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=4ebdd2325a4ce36fa7ca55e910c185e9&amp;callback=doFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ajax-请求\"><a href=\"#ajax-请求\" class=\"headerlink\" title=\"ajax 请求\"></a>ajax 请求</h4><p>原生的 ajax 请求如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request;</span><br><span class=\"line\">if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">\trequest = new XMLHttpRequest();  </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// for IE</span><br><span class=\"line\">    request = new ActiveObject();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    console.log(request.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.open(&apos;get&apos;, url, false / true);</span><br><span class=\"line\">request.send();</span><br></pre></td></tr></table></figure>\n<p>使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；</p>\n<p><code>open</code> 方法</p>\n<p>使用 <code>open</code> 方法接收三个参数:</p>\n<p>要发送的请求类型:  ‘get ‘    或者 ‘post’  </p>\n<p>请求的url : 注意 <code>只能向同一个域中使用相同端口和协议 URL 发出请求</code>，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；</p>\n<p>什么是跨域？</p>\n<hr>\n<p>只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:</p>\n<p>一个 URL 地址如下:</p>\n<p><code>https://www.baidu.com:8080</code></p>\n<p><code>https</code>  协议， 用来定义浏览器打开文件的形式</p>\n<p><code>www.baidu.com</code> 域名,  其中     <code>baidu.com</code>  主域     <code>www.baidu.com</code>  子域</p>\n<p><code>:8080</code> 端口</p>\n<p>当两个 <code>URL</code> 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  </p>\n<p>但是这种情况:</p>\n<p><code>https:// www.a.com/javascript/a.js</code></p>\n<p><code>https:// www.a.com/b.js</code></p>\n<p>这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到</p>\n<p><a href=\"https://segmentfault.com/a/1190000000718840\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000718840</a></p>\n<p><a href=\"http://blog.csdn.net/seebetpro/article/details/51326260\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/seebetpro/article/details/51326260</a></p>\n<hr>\n<p>布尔值：表示是否进行异步</p>\n<p>在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    // 表示请求成功之后，并且有返回数据之后要进行的动作</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>status</code> : 表示响应的 <code>http</code> 状态,对于  http 的状态码， 要记住几个重要的：<a href=\"&#39;http://www.cnblogs.com/sprinng/p/6559431.html&#39;\">http状态码</a></p>\n<p>2XX :  表示请求成功  </p>\n<p><code>200</code> 请求成功， <code>201</code> 已创建  <code>202</code> 接收   <code>204</code> 无内容  </p>\n<p>3XX: 表示重定向  </p>\n<p><code>300</code> 多路选择  <code>301</code> 永久转移  <code>302</code> 暂时转移  <code>304</code> 未修改</p>\n<p>4XX: 客户方错误  </p>\n<p><code>400</code> 错误请求  <code>401</code> 未认证   <code>408</code> 请求超时  <code>410</code> 失败</p>\n<p>5XX: 服务器错误</p>\n<p><code>500</code> 服务器内部错误  <code>501</code> 未实现   <code>504</code> 网关超时  </p>\n<p>关于这些请求的具体情况：</p>\n<p>2XX: 表示已经接受到了请求</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>表示请求已经成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>表示请求已经被创建</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已经接收到了请求， 但是尚未处理</td>\n</tr>\n<tr>\n<td>204</td>\n<td>服务器已经处理了请求， 但是没有返回任何</td>\n</tr>\n</tbody>\n</table>\n<p>3XX:资源重定向</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td>表示永久性重定向， 请求的资源分配到新的 url</td>\n</tr>\n<tr>\n<td>302</td>\n<td>表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问</td>\n</tr>\n<tr>\n<td>304</td>\n<td>表示请求的资源已经找到， 但是不符合条件要求</td>\n</tr>\n</tbody>\n</table>\n<p>4XX:客户端请求错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">400</td>\n<td>表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401</td>\n<td>表示发送的请求需要通过使用 HTTP 认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403</td>\n<td>表示客户端想要请求的资源被服务器拒绝访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404</td>\n<td>表示在服务器上没有找到请求的资源</td>\n</tr>\n</tbody>\n</table>\n<p>5XX: 服务器错误</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500（服务器错误）</td>\n<td>表示服务器在执行请求的时候发生了错误</td>\n</tr>\n<tr>\n<td>503（服务器正忙）</td>\n<td>表示现在服务器正在处于超负载状态，无法处理</td>\n</tr>\n</tbody>\n</table>\n<p><code>readyState</code> 表示 <code>request</code> 对象的  <code>readyState</code> 对象，属性可取的值如下：</p>\n<p><code>0</code> : 未初始化，尚未调用 open() 方法</p>\n<p><code>1</code> : 启动， 已经调用 open  方法，尚未调用 send() 方法</p>\n<p><code>2</code> : 发送，已经调用 send() 方法，但是尚未接收到响应</p>\n<p><code>3</code>: 接收，表示已经接受到部分数据</p>\n<p><code>4</code>: 完成, 已经接收到全部的响应数据</p>\n<blockquote>\n<p>使用 <code>get</code> 和 <code>post</code> 请求的区别</p>\n</blockquote>\n<h5 id=\"1-两种方式传递参数的方式不同\"><a href=\"#1-两种方式传递参数的方式不同\" class=\"headerlink\" title=\"1. 两种方式传递参数的方式不同\"></a>1. 两种方式传递参数的方式不同</h5><p><code>Get</code> 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 </p>\n<p><code>post</code> 请求是将作为 HTTP  消息的实体内容发送给服务器</p>\n<h5 id=\"2-两者缓存不同\"><a href=\"#2-两者缓存不同\" class=\"headerlink\" title=\"2. 两者缓存不同\"></a>2. 两者缓存不同</h5><p>使用 <code>get</code> 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据</p>\n<h5 id=\"3-服务器端-针对这两种方式的获取参数是不同的\"><a href=\"#3-服务器端-针对这两种方式的获取参数是不同的\" class=\"headerlink\" title=\"3.服务器端 针对这两种方式的获取参数是不同的\"></a>3.服务器端 针对这两种方式的获取参数是不同的</h5><p>在客户端通过使用 <code>get</code> 请求的时候，服务器端通过使用 <code>Request.QueryString</code>  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 <code>Request.Form</code> 来进行获取到参数</p>\n<p>为什么要使用两种方式:</p>\n<p>当请求没有副作用的时候， 例如进行搜索数据， 可以使用 <code>get</code> 方法， 当请求存在副作用的时候，使用 <code>post</code>进行请求</p>\n<p>使用 <code>post</code> 的情况:</p>\n<ul>\n<li>请求的结果存在副作用，例如，向数据库内添加新的数据行</li>\n<li>使用 GET 方法, 使用表单上添加的数据使得 URL太长</li>\n<li>进行传送的数据不是7 位的 ASCII 编码</li>\n</ul>\n<p>使用 <code>get</code> 的情况</p>\n<ul>\n<li>请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索</li>\n<li>请求结果无持续性的副作用</li>\n<li>收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符</li>\n</ul>\n<h3 id=\"如何使用-ajax-实现跨域？\"><a href=\"#如何使用-ajax-实现跨域？\" class=\"headerlink\" title=\"如何使用 ajax 实现跨域？\"></a>如何使用 ajax 实现跨域？</h3><p>对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？</p>\n<h4 id=\"1-使用跨源资源共享-CORS\"><a href=\"#1-使用跨源资源共享-CORS\" class=\"headerlink\" title=\"1.使用跨源资源共享(CORS)\"></a>1.使用跨源资源共享(CORS)</h4><p>跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:</p>\n<p>浏览器向服务器发送请求的时候，添加一个额外的 <code>origin</code> 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)</p>\n<p>如果服务器认为请求可以接受，可以在 <code>Access-Control-Allow-Origin</code> 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png\" alt=\"\"></p>\n<p>如上图所示，实现了公共资源的共享</p>\n<h4 id=\"2-使用-JSONP\"><a href=\"#2-使用-JSONP\" class=\"headerlink\" title=\"2.使用 JSONP\"></a>2.使用 JSONP</h4><p>使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求</p>\n<p>缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 <code>get</code> 请求进行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 JSONP 进行的跨域，链接的是聚合数据的手机号查询归属地 API，一开始的时候出现了问题，使用原生的 ajax 请求怎么样也是查询不到数据，后来了解到，使用 ajax 不能进行跨域请求。下面是通过使用 <code>jsonp</code> 实现的跨域请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    号码归属地查询&lt;input id=&apos;phone&apos; type=&apos;text&apos; &gt;&lt;button id = &apos;btn&apos;&gt;查询手机号归属地&lt;/button&gt;</span><br><span class=\"line\">    &lt;p&gt;您的手机号码归属地是  &lt;span id=&apos;city&apos;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   function doFunction (data) &#123;</span><br><span class=\"line\">            if (!data.result) &#123;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            document.getElementById(&apos;city&apos;).innerHTML = data.result.city;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    window.onload = function () &#123;</span><br><span class=\"line\">        var sendObj = &#123;</span><br><span class=\"line\">            url: &apos;http://apis.juhe.cn/mobile/get&apos;,</span><br><span class=\"line\">            phone: &apos;13429667914&apos;,</span><br><span class=\"line\">            key: &apos;4ebdd2325a4ce36fa7ca55e910c185e9&apos;,</span><br><span class=\"line\">            callback: &apos;doFunction&apos;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        function sendLink (obj) &#123;</span><br><span class=\"line\">            var link = obj.url;</span><br><span class=\"line\">            for (var key in obj) &#123;</span><br><span class=\"line\">                if (key !== &apos;url&apos;) &#123;</span><br><span class=\"line\">                    link = link + (~link.indexOf(&apos;?&apos;) ? &apos;&amp;&apos; : &apos;?&apos; );</span><br><span class=\"line\">                    link = link + key + &apos;=&apos; + obj[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return link;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">            var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\">            var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">            sendObj.phone = document.getElementById(&apos;phone&apos;).value;</span><br><span class=\"line\">            script.setAttribute(&apos;src&apos;, sendLink(sendObj));</span><br><span class=\"line\">            if (body.getElementsByTagName(&apos;script&apos;).length === 2) &#123;</span><br><span class=\"line\">                body.replaceChild( script ,body.lastChild);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                document.getElementsByTagName(&apos;body&apos;)[0].appendChild(script);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">   &lt;script src=&quot;http://apis.juhe.cn/mobile/get?phone=13429667914&amp;key=4ebdd2325a4ce36fa7ca55e910c185e9&amp;callback=doFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ajax-请求\"><a href=\"#ajax-请求\" class=\"headerlink\" title=\"ajax 请求\"></a>ajax 请求</h4><p>原生的 ajax 请求如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var request;</span><br><span class=\"line\">if (window.XMLHttpRequest) &#123;</span><br><span class=\"line\">\trequest = new XMLHttpRequest();  </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// for IE</span><br><span class=\"line\">    request = new ActiveObject();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    console.log(request.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.open(&apos;get&apos;, url, false / true);</span><br><span class=\"line\">request.send();</span><br></pre></td></tr></table></figure>\n<p>使用 ajax 的目的在于在没有重新加载页面的时候进行页面部分数据的更新；</p>\n<p><code>open</code> 方法</p>\n<p>使用 <code>open</code> 方法接收三个参数:</p>\n<p>要发送的请求类型:  ‘get ‘    或者 ‘post’  </p>\n<p>请求的url : 注意 <code>只能向同一个域中使用相同端口和协议 URL 发出请求</code>，如果请求的端口和本地页面不在同一个域的范围内，那么要使用跨域进行；</p>\n<p>什么是跨域？</p>\n<hr>\n<p>只要是协议，端口，域名当中存在一个不同的值，那么请求就会被认为是跨域:</p>\n<p>一个 URL 地址如下:</p>\n<p><code>https://www.baidu.com:8080</code></p>\n<p><code>https</code>  协议， 用来定义浏览器打开文件的形式</p>\n<p><code>www.baidu.com</code> 域名,  其中     <code>baidu.com</code>  主域     <code>www.baidu.com</code>  子域</p>\n<p><code>:8080</code> 端口</p>\n<p>当两个 <code>URL</code> 的协议, 域名 ,端口中存在一个不同的时候，使用 ajax 是无法进行请求得出数据的  </p>\n<p>但是这种情况:</p>\n<p><code>https:// www.a.com/javascript/a.js</code></p>\n<p><code>https:// www.a.com/b.js</code></p>\n<p>这种情况下, 域名，协议，端口都是相同的, 因此可以进行访问到</p>\n<p><a href=\"https://segmentfault.com/a/1190000000718840\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000000718840</a></p>\n<p><a href=\"http://blog.csdn.net/seebetpro/article/details/51326260\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/seebetpro/article/details/51326260</a></p>\n<hr>\n<p>布尔值：表示是否进行异步</p>\n<p>在上面的代码中，请求成功之后，响应的数据会自动填充 request 对象的属性，表示请求成功之后的状态:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.onreadystatechange = function () &#123;</span><br><span class=\"line\">  if (request.readyState == 4 &amp;&amp; request.status == 200) &#123;</span><br><span class=\"line\">    // 表示请求成功之后，并且有返回数据之后要进行的动作</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>status</code> : 表示响应的 <code>http</code> 状态,对于  http 的状态码， 要记住几个重要的：<a href=\"&#39;http://www.cnblogs.com/sprinng/p/6559431.html&#39;\">http状态码</a></p>\n<p>2XX :  表示请求成功  </p>\n<p><code>200</code> 请求成功， <code>201</code> 已创建  <code>202</code> 接收   <code>204</code> 无内容  </p>\n<p>3XX: 表示重定向  </p>\n<p><code>300</code> 多路选择  <code>301</code> 永久转移  <code>302</code> 暂时转移  <code>304</code> 未修改</p>\n<p>4XX: 客户方错误  </p>\n<p><code>400</code> 错误请求  <code>401</code> 未认证   <code>408</code> 请求超时  <code>410</code> 失败</p>\n<p>5XX: 服务器错误</p>\n<p><code>500</code> 服务器内部错误  <code>501</code> 未实现   <code>504</code> 网关超时  </p>\n<p>关于这些请求的具体情况：</p>\n<p>2XX: 表示已经接受到了请求</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>表示请求已经成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>表示请求已经被创建</td>\n</tr>\n<tr>\n<td>202</td>\n<td>服务器已经接收到了请求， 但是尚未处理</td>\n</tr>\n<tr>\n<td>204</td>\n<td>服务器已经处理了请求， 但是没有返回任何</td>\n</tr>\n</tbody>\n</table>\n<p>3XX:资源重定向</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td>表示永久性重定向， 请求的资源分配到新的 url</td>\n</tr>\n<tr>\n<td>302</td>\n<td>表示临时性重定向，表示请求的资源已经分配到新的url, 希望用户本次能够使用新的url 访问</td>\n</tr>\n<tr>\n<td>304</td>\n<td>表示请求的资源已经找到， 但是不符合条件要求</td>\n</tr>\n</tbody>\n</table>\n<p>4XX:客户端请求错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">400</td>\n<td>表示客户端发给服务器的请求存在语法错误， 服务器无法理解这个请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401</td>\n<td>表示发送的请求需要通过使用 HTTP 认证</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403</td>\n<td>表示客户端想要请求的资源被服务器拒绝访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404</td>\n<td>表示在服务器上没有找到请求的资源</td>\n</tr>\n</tbody>\n</table>\n<p>5XX: 服务器错误</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500（服务器错误）</td>\n<td>表示服务器在执行请求的时候发生了错误</td>\n</tr>\n<tr>\n<td>503（服务器正忙）</td>\n<td>表示现在服务器正在处于超负载状态，无法处理</td>\n</tr>\n</tbody>\n</table>\n<p><code>readyState</code> 表示 <code>request</code> 对象的  <code>readyState</code> 对象，属性可取的值如下：</p>\n<p><code>0</code> : 未初始化，尚未调用 open() 方法</p>\n<p><code>1</code> : 启动， 已经调用 open  方法，尚未调用 send() 方法</p>\n<p><code>2</code> : 发送，已经调用 send() 方法，但是尚未接收到响应</p>\n<p><code>3</code>: 接收，表示已经接受到部分数据</p>\n<p><code>4</code>: 完成, 已经接收到全部的响应数据</p>\n<blockquote>\n<p>使用 <code>get</code> 和 <code>post</code> 请求的区别</p>\n</blockquote>\n<h5 id=\"1-两种方式传递参数的方式不同\"><a href=\"#1-两种方式传递参数的方式不同\" class=\"headerlink\" title=\"1. 两种方式传递参数的方式不同\"></a>1. 两种方式传递参数的方式不同</h5><p><code>Get</code> 请求用于向服务器发送请求查询信息，查询字符串参数添加到 url 的末尾 </p>\n<p><code>post</code> 请求是将作为 HTTP  消息的实体内容发送给服务器</p>\n<h5 id=\"2-两者缓存不同\"><a href=\"#2-两者缓存不同\" class=\"headerlink\" title=\"2. 两者缓存不同\"></a>2. 两者缓存不同</h5><p>使用 <code>get</code> 方法的数据会被浏览器进行缓存起来，因此其他人可以通过使用浏览器的历史记录进行读取到这些数据</p>\n<h5 id=\"3-服务器端-针对这两种方式的获取参数是不同的\"><a href=\"#3-服务器端-针对这两种方式的获取参数是不同的\" class=\"headerlink\" title=\"3.服务器端 针对这两种方式的获取参数是不同的\"></a>3.服务器端 针对这两种方式的获取参数是不同的</h5><p>在客户端通过使用 <code>get</code> 请求的时候，服务器端通过使用 <code>Request.QueryString</code>  来进行获取参数, 在客户端通过使用 post 进行请求的时候，服务器端通过使用 <code>Request.Form</code> 来进行获取到参数</p>\n<p>为什么要使用两种方式:</p>\n<p>当请求没有副作用的时候， 例如进行搜索数据， 可以使用 <code>get</code> 方法， 当请求存在副作用的时候，使用 <code>post</code>进行请求</p>\n<p>使用 <code>post</code> 的情况:</p>\n<ul>\n<li>请求的结果存在副作用，例如，向数据库内添加新的数据行</li>\n<li>使用 GET 方法, 使用表单上添加的数据使得 URL太长</li>\n<li>进行传送的数据不是7 位的 ASCII 编码</li>\n</ul>\n<p>使用 <code>get</code> 的情况</p>\n<ul>\n<li>请求是为了查找资源, HTML 上的表单数据仅仅用来进行搜索</li>\n<li>请求结果无持续性的副作用</li>\n<li>收集到的数据及HTML 表单内的输入字段名称的总长不超过 1024 字符</li>\n</ul>\n<h3 id=\"如何使用-ajax-实现跨域？\"><a href=\"#如何使用-ajax-实现跨域？\" class=\"headerlink\" title=\"如何使用 ajax 实现跨域？\"></a>如何使用 ajax 实现跨域？</h3><p>对于使用原生的 ajax 而言,是无法实现进行跨域请求的,如何使用 ajax 实现跨域呢？</p>\n<h4 id=\"1-使用跨源资源共享-CORS\"><a href=\"#1-使用跨源资源共享-CORS\" class=\"headerlink\" title=\"1.使用跨源资源共享(CORS)\"></a>1.使用跨源资源共享(CORS)</h4><p>跨源资源共享定义了当进行访问跨源资源的时候，浏览器和服务器之间应该如何进行通信, 基本的思想是:</p>\n<p>浏览器向服务器发送请求的时候，添加一个额外的 <code>origin</code> 头部，这个头部包含了请求页面的源信息(协议， 域名， 端口)</p>\n<p>如果服务器认为请求可以接受，可以在 <code>Access-Control-Allow-Origin</code> 中回发相同的源信息,如果在服务器端设置 为 * 表示公共资源</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E8%B7%A8%E6%BA%90%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABSnipaste_2017-09-09_10-35-03.png\" alt=\"\"></p>\n<p>如上图所示，实现了公共资源的共享</p>\n<h4 id=\"2-使用-JSONP\"><a href=\"#2-使用-JSONP\" class=\"headerlink\" title=\"2.使用 JSONP\"></a>2.使用 JSONP</h4><p>使用 jsonp 技术实现的，原理是将请求的参数放入到 js 中，通过使用动态 js 来实现资源的动态请求</p>\n<p>缺点: 无法处理请求失败之后的动作,并且使用 jsonp 请求到的数据只能使用 <code>get</code> 请求进行</p>\n"},{"title":"css modules: 前端模块化","date":"2018-09-09T08:46:24.000Z","_content":"在 `css` 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 `js` 或者 `json` 的形式来重写 `css`, 这样写的好处在于方便利用 `js` 的模块化管理，缺点在于缺少 `css` 预处理器例如 less sass 等的支持，例如 `react-style` 属于这种解决方案。另外一种是依旧采用 `css` 的原生态写法， 但是通过 `js` 来进行管理依赖， 下面我们介绍的 `css-modules` 属于这种的写法。\n\n### css 模块化中的一些问题\n在 `css` 的模块化的过程中， 下面几种问题是需要解决的：\n\n#### 全局污染\n在 css 中， 样式 `style` 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 `!important` ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。\n\n#### 命名混乱\n混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  `BEM` 的命名方式；\n\n#### 依赖管理不彻底\n\n在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。\n\n\n#### 实现变量共享\n\n在复杂的组件中, 可能需要通过 `js` 或者 `css` 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 `css` 与 `js` 之间的变量共享。\n\n### CSS modules\n\n`css modules` 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 `css modules` 中的 `css` 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 `webpack`, 使用 `css modules` 应用的类名会被编译为一串字符， 从而避免 `class` 命名的重复。\n\n下面是一些基本的语法:\n#### 基本语法\n\n##### 引入与导出\n\n在需要使用 `css` 的组件中通过使用 `import` 的方法进行导入：\n\nindex.css:\n```css\n.btn { /* btn 的相关样式 */ }\n```\n\nindex.js:\n\n```js\nimport style from \"./index.css\";\n...\nrender () {\n    return <button className={ style.btn }></button>\n}\n...\n```\n\n最终生成：\n```\n<button class=\"btn\"></button>\n```\n通过使用 js 引入的方式还可以实现常量的共享功能：\n对于常量， 需要使用 `:export`关键字将 css 中的常量输出到 js 中:\n\n```less\n@color: \"red\";\n\n:export {\n    color: @color;\n}\n```\n```js\nimport style from \"./index.css\";\n\nstyle.color // \"red\"\n```\n\n\n\n##### 全局与局部样式\n\n通过使用 `:global` 和 `:local` 样式可以将当前的样式声明为全局和局部样式：\n\nindex.css:\n```css\n.btn {\n    color: blue;\n}\n\n// 等同于下面的 local\n\n:local(.btn) {\n    color: blue;\n}\n\n// 声明为全局样式\n// 文件中所有类名为 `btn` 的元素都将应用这个样式\n:global {\n    .btn {\n        color: blue;\n    }\n}\n```\n\n##### 代码复用与样式组合\n\n在 `css-modules` 中使用  `composes` 来实现多个类名的组合， 例如， 当我们定义组件 `Button` 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写\n\n```less\n.btn {\n    // 定义基础样式\n}\n.btn-small {\n    // small 大小相关样式\n}\n.btn-text {\n    // text btn 相关样式\n}\n<!-- 组合样式  -->\n.btn-small-text {\n    compose: btn btn-small btn-text;\n}\n\n// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合\n\n.btn-small-text {\n    composes: global-btn btn-small btn-text;\n}\n```\n\n注意：**使用 `composes`进行样式组合的时候， 需保证组合的样式名在`composes`之前已经存在了， 并且是单独的样式名， 没有嵌套关系**\n\n#### 使用技巧\n\n* 减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠\n* 使用 `composes` 类名组合来组合样式\n* 不使用选择器， 仅仅使用 class 来定义样式\n\n### CSS modules 使用\n\n项目中使用 `less` 作为 css 预处理器，在 webpack 中 `css-loader` 支持 `css modules`, 相关配置如下:\n\n```js\ntest: /\\.less$/,\nuse: [\n    {\n    loader: 'style-loader'\n    },\n    {\n    loader: 'css-loader',\n    options: {\n        // 启用 css modules\n        modules: true,\n        // 定义最终编译之后的样式名称\n        // local: 应用的 class 名称\n        // hash: 编译时随机生成的 hash 值， 避免 class 名称重复\n        localIdentName: '[local]--[hash:base64:5]'\n    }\n    }, \n    {\n        loader: 'less-loader'\n    }\n]\n```\n","source":"_posts/css-modules-前端模块化.md","raw":"---\ntitle: 'css modules: 前端模块化'\ndate: 2018-09-09 16:46:24\ntags: css modules\ncategories: CSS\n---\n在 `css` 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 `js` 或者 `json` 的形式来重写 `css`, 这样写的好处在于方便利用 `js` 的模块化管理，缺点在于缺少 `css` 预处理器例如 less sass 等的支持，例如 `react-style` 属于这种解决方案。另外一种是依旧采用 `css` 的原生态写法， 但是通过 `js` 来进行管理依赖， 下面我们介绍的 `css-modules` 属于这种的写法。\n\n### css 模块化中的一些问题\n在 `css` 的模块化的过程中， 下面几种问题是需要解决的：\n\n#### 全局污染\n在 css 中， 样式 `style` 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 `!important` ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。\n\n#### 命名混乱\n混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  `BEM` 的命名方式；\n\n#### 依赖管理不彻底\n\n在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。\n\n\n#### 实现变量共享\n\n在复杂的组件中, 可能需要通过 `js` 或者 `css` 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 `css` 与 `js` 之间的变量共享。\n\n### CSS modules\n\n`css modules` 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 `css modules` 中的 `css` 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 `webpack`, 使用 `css modules` 应用的类名会被编译为一串字符， 从而避免 `class` 命名的重复。\n\n下面是一些基本的语法:\n#### 基本语法\n\n##### 引入与导出\n\n在需要使用 `css` 的组件中通过使用 `import` 的方法进行导入：\n\nindex.css:\n```css\n.btn { /* btn 的相关样式 */ }\n```\n\nindex.js:\n\n```js\nimport style from \"./index.css\";\n...\nrender () {\n    return <button className={ style.btn }></button>\n}\n...\n```\n\n最终生成：\n```\n<button class=\"btn\"></button>\n```\n通过使用 js 引入的方式还可以实现常量的共享功能：\n对于常量， 需要使用 `:export`关键字将 css 中的常量输出到 js 中:\n\n```less\n@color: \"red\";\n\n:export {\n    color: @color;\n}\n```\n```js\nimport style from \"./index.css\";\n\nstyle.color // \"red\"\n```\n\n\n\n##### 全局与局部样式\n\n通过使用 `:global` 和 `:local` 样式可以将当前的样式声明为全局和局部样式：\n\nindex.css:\n```css\n.btn {\n    color: blue;\n}\n\n// 等同于下面的 local\n\n:local(.btn) {\n    color: blue;\n}\n\n// 声明为全局样式\n// 文件中所有类名为 `btn` 的元素都将应用这个样式\n:global {\n    .btn {\n        color: blue;\n    }\n}\n```\n\n##### 代码复用与样式组合\n\n在 `css-modules` 中使用  `composes` 来实现多个类名的组合， 例如， 当我们定义组件 `Button` 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写\n\n```less\n.btn {\n    // 定义基础样式\n}\n.btn-small {\n    // small 大小相关样式\n}\n.btn-text {\n    // text btn 相关样式\n}\n<!-- 组合样式  -->\n.btn-small-text {\n    compose: btn btn-small btn-text;\n}\n\n// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合\n\n.btn-small-text {\n    composes: global-btn btn-small btn-text;\n}\n```\n\n注意：**使用 `composes`进行样式组合的时候， 需保证组合的样式名在`composes`之前已经存在了， 并且是单独的样式名， 没有嵌套关系**\n\n#### 使用技巧\n\n* 减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠\n* 使用 `composes` 类名组合来组合样式\n* 不使用选择器， 仅仅使用 class 来定义样式\n\n### CSS modules 使用\n\n项目中使用 `less` 作为 css 预处理器，在 webpack 中 `css-loader` 支持 `css modules`, 相关配置如下:\n\n```js\ntest: /\\.less$/,\nuse: [\n    {\n    loader: 'style-loader'\n    },\n    {\n    loader: 'css-loader',\n    options: {\n        // 启用 css modules\n        modules: true,\n        // 定义最终编译之后的样式名称\n        // local: 应用的 class 名称\n        // hash: 编译时随机生成的 hash 值， 避免 class 名称重复\n        localIdentName: '[local]--[hash:base64:5]'\n    }\n    }, \n    {\n        loader: 'less-loader'\n    }\n]\n```\n","slug":"css-modules-前端模块化","published":1,"updated":"2018-09-09T09:10:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh73000hs33gk66qnrvz","content":"<p>在 <code>css</code> 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 <code>js</code> 或者 <code>json</code> 的形式来重写 <code>css</code>, 这样写的好处在于方便利用 <code>js</code> 的模块化管理，缺点在于缺少 <code>css</code> 预处理器例如 less sass 等的支持，例如 <code>react-style</code> 属于这种解决方案。另外一种是依旧采用 <code>css</code> 的原生态写法， 但是通过 <code>js</code> 来进行管理依赖， 下面我们介绍的 <code>css-modules</code> 属于这种的写法。</p>\n<h3 id=\"css-模块化中的一些问题\"><a href=\"#css-模块化中的一些问题\" class=\"headerlink\" title=\"css 模块化中的一些问题\"></a>css 模块化中的一些问题</h3><p>在 <code>css</code> 的模块化的过程中， 下面几种问题是需要解决的：</p>\n<h4 id=\"全局污染\"><a href=\"#全局污染\" class=\"headerlink\" title=\"全局污染\"></a>全局污染</h4><p>在 css 中， 样式 <code>style</code> 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 <code>!important</code> ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。</p>\n<h4 id=\"命名混乱\"><a href=\"#命名混乱\" class=\"headerlink\" title=\"命名混乱\"></a>命名混乱</h4><p>混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  <code>BEM</code> 的命名方式；</p>\n<h4 id=\"依赖管理不彻底\"><a href=\"#依赖管理不彻底\" class=\"headerlink\" title=\"依赖管理不彻底\"></a>依赖管理不彻底</h4><p>在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。</p>\n<h4 id=\"实现变量共享\"><a href=\"#实现变量共享\" class=\"headerlink\" title=\"实现变量共享\"></a>实现变量共享</h4><p>在复杂的组件中, 可能需要通过 <code>js</code> 或者 <code>css</code> 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 <code>css</code> 与 <code>js</code> 之间的变量共享。</p>\n<h3 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h3><p><code>css modules</code> 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 <code>css modules</code> 中的 <code>css</code> 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 <code>webpack</code>, 使用 <code>css modules</code> 应用的类名会被编译为一串字符， 从而避免 <code>class</code> 命名的重复。</p>\n<p>下面是一些基本的语法:</p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"引入与导出\"><a href=\"#引入与导出\" class=\"headerlink\" title=\"引入与导出\"></a>引入与导出</h5><p>在需要使用 <code>css</code> 的组件中通过使用 <code>import</code> 的方法进行导入：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"comment\">/* btn 的相关样式 */</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">style.btn</span> &#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>最终生成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过使用 js 引入的方式还可以实现常量的共享功能：<br>对于常量， 需要使用 <code>:export</code>关键字将 css 中的常量输出到 js 中:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:export</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">style.color <span class=\"comment\">// \"red\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局与局部样式\"><a href=\"#全局与局部样式\" class=\"headerlink\" title=\"全局与局部样式\"></a>全局与局部样式</h5><p>通过使用 <code>:global</code> 和 <code>:local</code> 样式可以将当前的样式声明为全局和局部样式：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于下面的 local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:local(.btn)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明为全局样式</span><br><span class=\"line\">// 文件中所有类名为 `btn` 的元素都将应用这个样式</span><br><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">    .btn &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">blue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"代码复用与样式组合\"><a href=\"#代码复用与样式组合\" class=\"headerlink\" title=\"代码复用与样式组合\"></a>代码复用与样式组合</h5><p>在 <code>css-modules</code> 中使用  <code>composes</code> 来实现多个类名的组合， 例如， 当我们定义组件 <code>Button</code> 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义基础样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// small 大小相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-text</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// text btn 相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 组合样式  --&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compose</span>: btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">composes</span>: global-btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<strong>使用 <code>composes</code>进行样式组合的时候， 需保证组合的样式名在<code>composes</code>之前已经存在了， 并且是单独的样式名， 没有嵌套关系</strong></p>\n<h4 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h4><ul>\n<li>减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠</li>\n<li>使用 <code>composes</code> 类名组合来组合样式</li>\n<li>不使用选择器， 仅仅使用 class 来定义样式</li>\n</ul>\n<h3 id=\"CSS-modules-使用\"><a href=\"#CSS-modules-使用\" class=\"headerlink\" title=\"CSS modules 使用\"></a>CSS modules 使用</h3><p>项目中使用 <code>less</code> 作为 css 预处理器，在 webpack 中 <code>css-loader</code> 支持 <code>css modules</code>, 相关配置如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用 css modules</span></span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 定义最终编译之后的样式名称</span></span><br><span class=\"line\">        <span class=\"comment\">// local: 应用的 class 名称</span></span><br><span class=\"line\">        <span class=\"comment\">// hash: 编译时随机生成的 hash 值， 避免 class 名称重复</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">'[local]--[hash:base64:5]'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>css</code> 模块化的解决方案中， 存在两种解决方案， 一种是放弃使用 css, 使用 <code>js</code> 或者 <code>json</code> 的形式来重写 <code>css</code>, 这样写的好处在于方便利用 <code>js</code> 的模块化管理，缺点在于缺少 <code>css</code> 预处理器例如 less sass 等的支持，例如 <code>react-style</code> 属于这种解决方案。另外一种是依旧采用 <code>css</code> 的原生态写法， 但是通过 <code>js</code> 来进行管理依赖， 下面我们介绍的 <code>css-modules</code> 属于这种的写法。</p>\n<h3 id=\"css-模块化中的一些问题\"><a href=\"#css-模块化中的一些问题\" class=\"headerlink\" title=\"css 模块化中的一些问题\"></a>css 模块化中的一些问题</h3><p>在 <code>css</code> 的模块化的过程中， 下面几种问题是需要解决的：</p>\n<h4 id=\"全局污染\"><a href=\"#全局污染\" class=\"headerlink\" title=\"全局污染\"></a>全局污染</h4><p>在 css 中， 样式 <code>style</code> 是属于全局范围内的， 因此当我们在全局范围内w为某一元素标签添加样式的时候， 这一样式会被应用到全局的所有的该标签下的元素上面，为了减少掉全局变量的污染，我们会采用提高元素优先级的方法进行样式覆盖， 例如添加 <code>!important</code> ，获取通过复杂选择器增大元素的权重值以及行内样式，这种通过提高元素优先级的方法实现的元素样式覆盖导致了无法重写元素样式， 丧失了l灵活性。</p>\n<h4 id=\"命名混乱\"><a href=\"#命名混乱\" class=\"headerlink\" title=\"命名混乱\"></a>命名混乱</h4><p>混乱的命名方式会导致开发过程中的样式冲突， 样式混乱， 为后续开发带来了困难， 在这个问题上面， 有一种解决方式， 就是采用  <code>BEM</code> 的命名方式；</p>\n<h4 id=\"依赖管理不彻底\"><a href=\"#依赖管理不彻底\" class=\"headerlink\" title=\"依赖管理不彻底\"></a>依赖管理不彻底</h4><p>在引入组件的时候， 组件应该相互独立， css 文件应该随着组件的引入按需加载，而不是引入所有的样式， 这样造成了模块的浪费。</p>\n<h4 id=\"实现变量共享\"><a href=\"#实现变量共享\" class=\"headerlink\" title=\"实现变量共享\"></a>实现变量共享</h4><p>在复杂的组件中, 可能需要通过 <code>js</code> 或者 <code>css</code> 同时进行操作样式，这种情况下可能会造成样式的冗余，现在的预处理器都不能实现变量在 <code>css</code> 与 <code>js</code> 之间的变量共享。</p>\n<h3 id=\"CSS-modules\"><a href=\"#CSS-modules\" class=\"headerlink\" title=\"CSS modules\"></a>CSS modules</h3><p><code>css modules</code> 是一种模块化的解决方案，通过使用 js 文件引入管理， 同时， 在 <code>css modules</code> 中的 <code>css</code> 文件中的样式名被默认为局部样式，从而避免了局部样式的污染， 结合 <code>webpack</code>, 使用 <code>css modules</code> 应用的类名会被编译为一串字符， 从而避免 <code>class</code> 命名的重复。</p>\n<p>下面是一些基本的语法:</p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"引入与导出\"><a href=\"#引入与导出\" class=\"headerlink\" title=\"引入与导出\"></a>引入与导出</h5><p>在需要使用 <code>css</code> 的组件中通过使用 <code>import</code> 的方法进行导入：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123; <span class=\"comment\">/* btn 的相关样式 */</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>index.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span> <span class=\"attr\">style.btn</span> &#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>最终生成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过使用 js 引入的方式还可以实现常量的共享功能：<br>对于常量， 需要使用 <code>:export</code>关键字将 css 中的常量输出到 js 中:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@color:</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:export</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> style <span class=\"keyword\">from</span> <span class=\"string\">\"./index.css\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">style.color <span class=\"comment\">// \"red\"</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"全局与局部样式\"><a href=\"#全局与局部样式\" class=\"headerlink\" title=\"全局与局部样式\"></a>全局与局部样式</h5><p>通过使用 <code>:global</code> 和 <code>:local</code> 样式可以将当前的样式声明为全局和局部样式：</p>\n<p>index.css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等同于下面的 local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:local(.btn)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明为全局样式</span><br><span class=\"line\">// 文件中所有类名为 `btn` 的元素都将应用这个样式</span><br><span class=\"line\"><span class=\"selector-pseudo\">:global</span> &#123;</span><br><span class=\"line\">    .btn &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">blue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"代码复用与样式组合\"><a href=\"#代码复用与样式组合\" class=\"headerlink\" title=\"代码复用与样式组合\"></a>代码复用与样式组合</h5><p>在 <code>css-modules</code> 中使用  <code>composes</code> 来实现多个类名的组合， 例如， 当我们定义组件 <code>Button</code> 的时候， 我们需要定义基础配置， 大小以及类型样式， 可以这么写</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义基础样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// small 大小相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-text</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// text btn 相关样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 组合样式  --&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compose</span>: btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者当 btn 为全局样式 global-btn 的时候， 可以进行组合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-small-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">composes</span>: global-btn btn-small btn-text;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：<strong>使用 <code>composes</code>进行样式组合的时候， 需保证组合的样式名在<code>composes</code>之前已经存在了， 并且是单独的样式名， 没有嵌套关系</strong></p>\n<h4 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h4><ul>\n<li>减少 class 嵌套, 使用单独 class 来定义样式，减少 class 层叠</li>\n<li>使用 <code>composes</code> 类名组合来组合样式</li>\n<li>不使用选择器， 仅仅使用 class 来定义样式</li>\n</ul>\n<h3 id=\"CSS-modules-使用\"><a href=\"#CSS-modules-使用\" class=\"headerlink\" title=\"CSS modules 使用\"></a>CSS modules 使用</h3><p>项目中使用 <code>less</code> 作为 css 预处理器，在 webpack 中 <code>css-loader</code> 支持 <code>css modules</code>, 相关配置如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'style-loader'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启用 css modules</span></span><br><span class=\"line\">        modules: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 定义最终编译之后的样式名称</span></span><br><span class=\"line\">        <span class=\"comment\">// local: 应用的 class 名称</span></span><br><span class=\"line\">        <span class=\"comment\">// hash: 编译时随机生成的 hash 值， 避免 class 名称重复</span></span><br><span class=\"line\">        localIdentName: <span class=\"string\">'[local]--[hash:base64:5]'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loader: <span class=\"string\">'less-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"es6: Map & Set","date":"2017-09-23T03:22:37.000Z","_content":"\n### Set 数据结构\n\n####  基本属性\n\nSet 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。\n\n```\nlet arr = [1,2,2,3,4];\nlet set = new Set(arr);\nconsole.log(arr) // {1,2,3,4} 去除重复数字\n```\n\n在上面的程序中， 使用 new Set构造函数生成的 `set` 的类型是一个对象，并且通过使用 `set` 结构进行处理之后的数据中没有重复数据。\n\n使用 set 进行数组去重的方法\n\n```\narr = [...new Set([arr])]//  [1,2,3,4]\n//如上所示，完成了数组的去重操作\n```\n\n#### Set 实例的属性和方法, \n\n 如下图所示\n\n![](http://ov3b9jngp.bkt.clouddn.com/Set.png)\n\n`let set = new Set([1,2,3,4])`\n\n`set.prototype.constructor`  : 默认 `set` 函数\n\n`set.size` 表示 `set` 数据结构中成员的个数\n\n```\nset.size // 4\n```\n\n对于 `set` 结构的方法，分为操作方法和遍历方法\n\n操作方法:\n\n`add()` 用于向 `set` 数据机构中添加成员\n\n`delete()` 用于删除数据中的某个值，返回布尔值， 表示是否删除成功\n\n`has()` 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有\n\n`clear()` 表示清除所有的成员，没有返回值\n\n```\nset// {1,2,3,4}\nset.add(5)// {1,2,3,4,5}\nset.has(5) // true\nset.delete(5) // true 删除成功\nset.has(5) // false\nset.clear()\nset // {}\n```\n\n一个数组去重操作:\n\n```\nfunction removeDeu (Array) {\n  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的\n}\n使用 Array.from 也可以将Set 结构转换为数组结构\n```\n\n#### Set 实例的遍历方法\n\n`keys()`  返回键名的数组\n\n`values()` 遍历键值\n\n`entires()` 遍历键值对儿\n\n因为 `Set()` 结构只有键值，没有键名，因此使用 `values()` 和 `keys()` 的遍历结果是一样的\n\n```\nlet arr = [1,2,3,4];\nlet set = new Set(arr);\nfor (let key of set.keys()) {\n  console.log(key)\n}\n// 1,2,3,4,5\n```\n\n对于set 结构可以转换为 数组结构,可以应用数组的 `map` 等方法\n\n```\nlet arr = [...set];\n```\n\n### Map 数据结构\n\n#### 基本属性\n\n对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象\n\n```\nlet obj = {};\nlet o = {a: 1};\nobj[o] = 'content';\nfor (let key in obj) {\n\tconsole.log(typeOf key)\n}\n// string\n```\n\n使用 `map` 结构可以实现对象的键不再必须是字符串的形式\n\n创建 `map` 结构:\n\n```\nlet map = new Map();\n```\n\n#### `map ` 属性的方法\n\n通过 console　控制台打印数据如下\n\n![](http://ov3b9jngp.bkt.clouddn.com/map.png)\n\n类似于　`Set` 结构, 存在 `set` `get` `delete` `has` `clear` 等几种操作方法\n\n![](http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png)\n\n`set(键， 值)` 写入数据\n\n`get(键)` 从数据结构中获得对应键的值\n\n>虽然 `typeof map` // Object 以及  `map instanceof Object === true` 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 `Map` 数据结构中的值， 我们是通过使用 `get` 方法，后面我们会说如何将 map 数据结构转换为对象\n\n`delete(键)` 删除对应键的值\n\n`clear()` 将 `map` 数据中的所有数据清除\n\n`has()` 返回布尔值, 表示是否含有某条数据\n\n使用 `map` 的数据结构不同于对象的是，通过使用 `map` 添加的键名可以是变量\n\n```\nlet map = new Map();\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\nfor (let key of map) {\n\tconsole.log(typeof key) // object\n}\n```\n\n可以是数组:\n\n```\nlet arr = [1];\nmap.set(arr, 'good');\nmap.get(arr)// 'good'\n```\n\n>需要注意的一点，通过使用 `get()` 获取键值的时候，最终是查找到了键值的内存地址\n\n代码如下:\n\n```\nmap.set({a:1}, 'good');\nmap.get({a:1})// undefined\n```\n\n在上面的代码中，虽然查找的键值是一样的，但是两个 `{a:1}` 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。\n\n```\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\n```\n\n***\n\n关于对象及内存地址:\n\n每创建一个对象，总会创建一个内存地址，对于下面对象:\n\n`let person = { name: '张宁宁' }` \n\n我们使用 `person.name` 来访问到值的，但是，对象的值并没有存放在`person` 容器内，`person` 中存放了对象的属性，\n\n这个属性相当于指针，指向存放 `张宁宁` 的内存地址\n\n例如:\n\n`{} === {}` // false\n\n因为这两个空对象的内存地址是不一样的，所以是不相等的\n\n***\n\n使用 `map` 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值\n\n```\nlet map = new Map([['name', '张宁宁']]);\nmap.get('name') // '张宁宁'\n```\n\n#### map 对象的遍历方法\n\n对于 `map` 结构的遍历，存在下面几种方法\n\n`keys()` 返回键名的遍历器\n\n`values()` 返回键值的遍历器\n\n`entires()` 返回所有成员的遍历器\n\n`forEach()` 类似于数组中的 `forEach()` 方法， 实现对于 `map` 数据结构的遍历\n\n使用 `keys()` `values()` 以及 `entires()` 返回的是类数组对象\n\n```\nlet map = new Map();\nmap.set('h', 'hello');\nmap.set('g', 'good');\nmap.keys() // {'h', 'g'};\nmap.values() // {'hello', 'good'};\nmap.entires(); // {'h': 'hello', 'g': 'good'};\n```\n\n使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。\n\n```\n[...map.keys()] // ['h', 'g']\n```\n\n#### `Map` 与各种数据结构的相互转化\n\n1. 对象转为 `map`\n\n   ```\n   function toMap (obj) {\n     let map = new Map();\n     for (let key in obj) {\n       map.set(key, obj[key]);\n     }\n     return map;\n   }\n   ```\n\n2. `map` 转化为对象\n\n   ```\n   function toObj (map) {\n     let obj = Object.create(null);\n     for (let [k,v] of map) {\n       obj[k] = v;\n     }\n     return obj;\n   }\n   ```\n\n   ​","source":"_posts/es6-Map-and-Set.md","raw":"---\ntitle: 'es6: Map & Set'\ndate: 2017-09-23 11:22:37\ntags: Map Set\ncategories: es6\n---\n\n### Set 数据结构\n\n####  基本属性\n\nSet 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。\n\n```\nlet arr = [1,2,2,3,4];\nlet set = new Set(arr);\nconsole.log(arr) // {1,2,3,4} 去除重复数字\n```\n\n在上面的程序中， 使用 new Set构造函数生成的 `set` 的类型是一个对象，并且通过使用 `set` 结构进行处理之后的数据中没有重复数据。\n\n使用 set 进行数组去重的方法\n\n```\narr = [...new Set([arr])]//  [1,2,3,4]\n//如上所示，完成了数组的去重操作\n```\n\n#### Set 实例的属性和方法, \n\n 如下图所示\n\n![](http://ov3b9jngp.bkt.clouddn.com/Set.png)\n\n`let set = new Set([1,2,3,4])`\n\n`set.prototype.constructor`  : 默认 `set` 函数\n\n`set.size` 表示 `set` 数据结构中成员的个数\n\n```\nset.size // 4\n```\n\n对于 `set` 结构的方法，分为操作方法和遍历方法\n\n操作方法:\n\n`add()` 用于向 `set` 数据机构中添加成员\n\n`delete()` 用于删除数据中的某个值，返回布尔值， 表示是否删除成功\n\n`has()` 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有\n\n`clear()` 表示清除所有的成员，没有返回值\n\n```\nset// {1,2,3,4}\nset.add(5)// {1,2,3,4,5}\nset.has(5) // true\nset.delete(5) // true 删除成功\nset.has(5) // false\nset.clear()\nset // {}\n```\n\n一个数组去重操作:\n\n```\nfunction removeDeu (Array) {\n  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的\n}\n使用 Array.from 也可以将Set 结构转换为数组结构\n```\n\n#### Set 实例的遍历方法\n\n`keys()`  返回键名的数组\n\n`values()` 遍历键值\n\n`entires()` 遍历键值对儿\n\n因为 `Set()` 结构只有键值，没有键名，因此使用 `values()` 和 `keys()` 的遍历结果是一样的\n\n```\nlet arr = [1,2,3,4];\nlet set = new Set(arr);\nfor (let key of set.keys()) {\n  console.log(key)\n}\n// 1,2,3,4,5\n```\n\n对于set 结构可以转换为 数组结构,可以应用数组的 `map` 等方法\n\n```\nlet arr = [...set];\n```\n\n### Map 数据结构\n\n#### 基本属性\n\n对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象\n\n```\nlet obj = {};\nlet o = {a: 1};\nobj[o] = 'content';\nfor (let key in obj) {\n\tconsole.log(typeOf key)\n}\n// string\n```\n\n使用 `map` 结构可以实现对象的键不再必须是字符串的形式\n\n创建 `map` 结构:\n\n```\nlet map = new Map();\n```\n\n#### `map ` 属性的方法\n\n通过 console　控制台打印数据如下\n\n![](http://ov3b9jngp.bkt.clouddn.com/map.png)\n\n类似于　`Set` 结构, 存在 `set` `get` `delete` `has` `clear` 等几种操作方法\n\n![](http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png)\n\n`set(键， 值)` 写入数据\n\n`get(键)` 从数据结构中获得对应键的值\n\n>虽然 `typeof map` // Object 以及  `map instanceof Object === true` 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 `Map` 数据结构中的值， 我们是通过使用 `get` 方法，后面我们会说如何将 map 数据结构转换为对象\n\n`delete(键)` 删除对应键的值\n\n`clear()` 将 `map` 数据中的所有数据清除\n\n`has()` 返回布尔值, 表示是否含有某条数据\n\n使用 `map` 的数据结构不同于对象的是，通过使用 `map` 添加的键名可以是变量\n\n```\nlet map = new Map();\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\nfor (let key of map) {\n\tconsole.log(typeof key) // object\n}\n```\n\n可以是数组:\n\n```\nlet arr = [1];\nmap.set(arr, 'good');\nmap.get(arr)// 'good'\n```\n\n>需要注意的一点，通过使用 `get()` 获取键值的时候，最终是查找到了键值的内存地址\n\n代码如下:\n\n```\nmap.set({a:1}, 'good');\nmap.get({a:1})// undefined\n```\n\n在上面的代码中，虽然查找的键值是一样的，但是两个 `{a:1}` 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。\n\n```\nlet obj = {a: 1};\nmap.set(obj, 'good');\nmap.get(obj) // 'good'\n```\n\n***\n\n关于对象及内存地址:\n\n每创建一个对象，总会创建一个内存地址，对于下面对象:\n\n`let person = { name: '张宁宁' }` \n\n我们使用 `person.name` 来访问到值的，但是，对象的值并没有存放在`person` 容器内，`person` 中存放了对象的属性，\n\n这个属性相当于指针，指向存放 `张宁宁` 的内存地址\n\n例如:\n\n`{} === {}` // false\n\n因为这两个空对象的内存地址是不一样的，所以是不相等的\n\n***\n\n使用 `map` 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值\n\n```\nlet map = new Map([['name', '张宁宁']]);\nmap.get('name') // '张宁宁'\n```\n\n#### map 对象的遍历方法\n\n对于 `map` 结构的遍历，存在下面几种方法\n\n`keys()` 返回键名的遍历器\n\n`values()` 返回键值的遍历器\n\n`entires()` 返回所有成员的遍历器\n\n`forEach()` 类似于数组中的 `forEach()` 方法， 实现对于 `map` 数据结构的遍历\n\n使用 `keys()` `values()` 以及 `entires()` 返回的是类数组对象\n\n```\nlet map = new Map();\nmap.set('h', 'hello');\nmap.set('g', 'good');\nmap.keys() // {'h', 'g'};\nmap.values() // {'hello', 'good'};\nmap.entires(); // {'h': 'hello', 'g': 'good'};\n```\n\n使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。\n\n```\n[...map.keys()] // ['h', 'g']\n```\n\n#### `Map` 与各种数据结构的相互转化\n\n1. 对象转为 `map`\n\n   ```\n   function toMap (obj) {\n     let map = new Map();\n     for (let key in obj) {\n       map.set(key, obj[key]);\n     }\n     return map;\n   }\n   ```\n\n2. `map` 转化为对象\n\n   ```\n   function toObj (map) {\n     let obj = Object.create(null);\n     for (let [k,v] of map) {\n       obj[k] = v;\n     }\n     return obj;\n   }\n   ```\n\n   ​","slug":"es6-Map-and-Set","published":1,"updated":"2017-09-25T16:31:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh76000js33gzi6stecw","content":"<h3 id=\"Set-数据结构\"><a href=\"#Set-数据结构\" class=\"headerlink\" title=\"Set 数据结构\"></a>Set 数据结构</h3><h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>Set 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">console.log(arr) // &#123;1,2,3,4&#125; 去除重复数字</span><br></pre></td></tr></table></figure>\n<p>在上面的程序中， 使用 new Set构造函数生成的 <code>set</code> 的类型是一个对象，并且通过使用 <code>set</code> 结构进行处理之后的数据中没有重复数据。</p>\n<p>使用 set 进行数组去重的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set([arr])]//  [1,2,3,4]</span><br><span class=\"line\">//如上所示，完成了数组的去重操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的属性和方法\"><a href=\"#Set-实例的属性和方法\" class=\"headerlink\" title=\"Set 实例的属性和方法,\"></a>Set 实例的属性和方法,</h4><p> 如下图所示</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Set.png\" alt=\"\"></p>\n<p><code>let set = new Set([1,2,3,4])</code></p>\n<p><code>set.prototype.constructor</code>  : 默认 <code>set</code> 函数</p>\n<p><code>set.size</code> 表示 <code>set</code> 数据结构中成员的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.size // 4</span><br></pre></td></tr></table></figure>\n<p>对于 <code>set</code> 结构的方法，分为操作方法和遍历方法</p>\n<p>操作方法:</p>\n<p><code>add()</code> 用于向 <code>set</code> 数据机构中添加成员</p>\n<p><code>delete()</code> 用于删除数据中的某个值，返回布尔值， 表示是否删除成功</p>\n<p><code>has()</code> 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有</p>\n<p><code>clear()</code> 表示清除所有的成员，没有返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set// &#123;1,2,3,4&#125;</span><br><span class=\"line\">set.add(5)// &#123;1,2,3,4,5&#125;</span><br><span class=\"line\">set.has(5) // true</span><br><span class=\"line\">set.delete(5) // true 删除成功</span><br><span class=\"line\">set.has(5) // false</span><br><span class=\"line\">set.clear()</span><br><span class=\"line\">set // &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>一个数组去重操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function removeDeu (Array) &#123;</span><br><span class=\"line\">  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用 Array.from 也可以将Set 结构转换为数组结构</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的遍历方法\"><a href=\"#Set-实例的遍历方法\" class=\"headerlink\" title=\"Set 实例的遍历方法\"></a>Set 实例的遍历方法</h4><p><code>keys()</code>  返回键名的数组</p>\n<p><code>values()</code> 遍历键值</p>\n<p><code>entires()</code> 遍历键值对儿</p>\n<p>因为 <code>Set()</code> 结构只有键值，没有键名，因此使用 <code>values()</code> 和 <code>keys()</code> 的遍历结果是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">for (let key of set.keys()) &#123;</span><br><span class=\"line\">  console.log(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1,2,3,4,5</span><br></pre></td></tr></table></figure>\n<p>对于set 结构可以转换为 数组结构,可以应用数组的 <code>map</code> 等方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...set];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-数据结构\"><a href=\"#Map-数据结构\" class=\"headerlink\" title=\"Map 数据结构\"></a>Map 数据结构</h3><h4 id=\"基本属性-1\"><a href=\"#基本属性-1\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let o = &#123;a: 1&#125;;</span><br><span class=\"line\">obj[o] = &apos;content&apos;;</span><br><span class=\"line\">for (let key in obj) &#123;</span><br><span class=\"line\">\tconsole.log(typeOf key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// string</span><br></pre></td></tr></table></figure>\n<p>使用 <code>map</code> 结构可以实现对象的键不再必须是字符串的形式</p>\n<p>创建 <code>map</code> 结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-属性的方法\"><a href=\"#map-属性的方法\" class=\"headerlink\" title=\"map 属性的方法\"></a><code>map</code> 属性的方法</h4><p>通过 console　控制台打印数据如下</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map.png\" alt=\"\"></p>\n<p>类似于　<code>Set</code> 结构, 存在 <code>set</code> <code>get</code> <code>delete</code> <code>has</code> <code>clear</code> 等几种操作方法</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png\" alt=\"\"></p>\n<p><code>set(键， 值)</code> 写入数据</p>\n<p><code>get(键)</code> 从数据结构中获得对应键的值</p>\n<blockquote>\n<p>虽然 <code>typeof map</code> // Object 以及  <code>map instanceof Object === true</code> 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 <code>Map</code> 数据结构中的值， 我们是通过使用 <code>get</code> 方法，后面我们会说如何将 map 数据结构转换为对象</p>\n</blockquote>\n<p><code>delete(键)</code> 删除对应键的值</p>\n<p><code>clear()</code> 将 <code>map</code> 数据中的所有数据清除</p>\n<p><code>has()</code> 返回布尔值, 表示是否含有某条数据</p>\n<p>使用 <code>map</code> 的数据结构不同于对象的是，通过使用 <code>map</code> 添加的键名可以是变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br><span class=\"line\">for (let key of map) &#123;</span><br><span class=\"line\">\tconsole.log(typeof key) // object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以是数组:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1];</span><br><span class=\"line\">map.set(arr, &apos;good&apos;);</span><br><span class=\"line\">map.get(arr)// &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的一点，通过使用 <code>get()</code> 获取键值的时候，最终是查找到了键值的内存地址</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(&#123;a:1&#125;, &apos;good&apos;);</span><br><span class=\"line\">map.get(&#123;a:1&#125;)// undefined</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，虽然查找的键值是一样的，但是两个 <code>{a:1}</code> 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于对象及内存地址:</p>\n<p>每创建一个对象，总会创建一个内存地址，对于下面对象:</p>\n<p><code>let person = { name: &#39;张宁宁&#39; }</code> </p>\n<p>我们使用 <code>person.name</code> 来访问到值的，但是，对象的值并没有存放在<code>person</code> 容器内，<code>person</code> 中存放了对象的属性，</p>\n<p>这个属性相当于指针，指向存放 <code>张宁宁</code> 的内存地址</p>\n<p>例如:</p>\n<p><code>{} === {}</code> // false</p>\n<p>因为这两个空对象的内存地址是不一样的，所以是不相等的</p>\n<hr>\n<p>使用 <code>map</code> 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([[&apos;name&apos;, &apos;张宁宁&apos;]]);</span><br><span class=\"line\">map.get(&apos;name&apos;) // &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-对象的遍历方法\"><a href=\"#map-对象的遍历方法\" class=\"headerlink\" title=\"map 对象的遍历方法\"></a>map 对象的遍历方法</h4><p>对于 <code>map</code> 结构的遍历，存在下面几种方法</p>\n<p><code>keys()</code> 返回键名的遍历器</p>\n<p><code>values()</code> 返回键值的遍历器</p>\n<p><code>entires()</code> 返回所有成员的遍历器</p>\n<p><code>forEach()</code> 类似于数组中的 <code>forEach()</code> 方法， 实现对于 <code>map</code> 数据结构的遍历</p>\n<p>使用 <code>keys()</code> <code>values()</code> 以及 <code>entires()</code> 返回的是类数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">map.set(&apos;h&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;g&apos;, &apos;good&apos;);</span><br><span class=\"line\">map.keys() // &#123;&apos;h&apos;, &apos;g&apos;&#125;;</span><br><span class=\"line\">map.values() // &#123;&apos;hello&apos;, &apos;good&apos;&#125;;</span><br><span class=\"line\">map.entires(); // &#123;&apos;h&apos;: &apos;hello&apos;, &apos;g&apos;: &apos;good&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...map.keys()] // [&apos;h&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-与各种数据结构的相互转化\"><a href=\"#Map-与各种数据结构的相互转化\" class=\"headerlink\" title=\"Map 与各种数据结构的相互转化\"></a><code>Map</code> 与各种数据结构的相互转化</h4><ol>\n<li><p>对象转为 <code>map</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toMap (obj) &#123;</span><br><span class=\"line\">  let map = new Map();</span><br><span class=\"line\">  for (let key in obj) &#123;</span><br><span class=\"line\">    map.set(key, obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>map</code> 转化为对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toObj (map) &#123;</span><br><span class=\"line\">  let obj = Object.create(null);</span><br><span class=\"line\">  for (let [k,v] of map) &#123;</span><br><span class=\"line\">    obj[k] = v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Set-数据结构\"><a href=\"#Set-数据结构\" class=\"headerlink\" title=\"Set 数据结构\"></a>Set 数据结构</h3><h4 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>Set 数据结构类似于数组， 不同于数组的是， Set 数据结构中不允许存在重复的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">console.log(arr) // &#123;1,2,3,4&#125; 去除重复数字</span><br></pre></td></tr></table></figure>\n<p>在上面的程序中， 使用 new Set构造函数生成的 <code>set</code> 的类型是一个对象，并且通过使用 <code>set</code> 结构进行处理之后的数据中没有重复数据。</p>\n<p>使用 set 进行数组去重的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [...new Set([arr])]//  [1,2,3,4]</span><br><span class=\"line\">//如上所示，完成了数组的去重操作</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的属性和方法\"><a href=\"#Set-实例的属性和方法\" class=\"headerlink\" title=\"Set 实例的属性和方法,\"></a>Set 实例的属性和方法,</h4><p> 如下图所示</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/Set.png\" alt=\"\"></p>\n<p><code>let set = new Set([1,2,3,4])</code></p>\n<p><code>set.prototype.constructor</code>  : 默认 <code>set</code> 函数</p>\n<p><code>set.size</code> 表示 <code>set</code> 数据结构中成员的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set.size // 4</span><br></pre></td></tr></table></figure>\n<p>对于 <code>set</code> 结构的方法，分为操作方法和遍历方法</p>\n<p>操作方法:</p>\n<p><code>add()</code> 用于向 <code>set</code> 数据机构中添加成员</p>\n<p><code>delete()</code> 用于删除数据中的某个值，返回布尔值， 表示是否删除成功</p>\n<p><code>has()</code> 表示判断数据结构中是否含有某个值，返回的是布尔值，表示是否含有</p>\n<p><code>clear()</code> 表示清除所有的成员，没有返回值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set// &#123;1,2,3,4&#125;</span><br><span class=\"line\">set.add(5)// &#123;1,2,3,4,5&#125;</span><br><span class=\"line\">set.has(5) // true</span><br><span class=\"line\">set.delete(5) // true 删除成功</span><br><span class=\"line\">set.has(5) // false</span><br><span class=\"line\">set.clear()</span><br><span class=\"line\">set // &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>一个数组去重操作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function removeDeu (Array) &#123;</span><br><span class=\"line\">  return [...new Set(Array)] // 换成 Array.from(new Set(Array)) 也是可以的</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">使用 Array.from 也可以将Set 结构转换为数组结构</span><br></pre></td></tr></table></figure>\n<h4 id=\"Set-实例的遍历方法\"><a href=\"#Set-实例的遍历方法\" class=\"headerlink\" title=\"Set 实例的遍历方法\"></a>Set 实例的遍历方法</h4><p><code>keys()</code>  返回键名的数组</p>\n<p><code>values()</code> 遍历键值</p>\n<p><code>entires()</code> 遍历键值对儿</p>\n<p>因为 <code>Set()</code> 结构只有键值，没有键名，因此使用 <code>values()</code> 和 <code>keys()</code> 的遍历结果是一样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1,2,3,4];</span><br><span class=\"line\">let set = new Set(arr);</span><br><span class=\"line\">for (let key of set.keys()) &#123;</span><br><span class=\"line\">  console.log(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 1,2,3,4,5</span><br></pre></td></tr></table></figure>\n<p>对于set 结构可以转换为 数组结构,可以应用数组的 <code>map</code> 等方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...set];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-数据结构\"><a href=\"#Map-数据结构\" class=\"headerlink\" title=\"Map 数据结构\"></a>Map 数据结构</h3><h4 id=\"基本属性-1\"><a href=\"#基本属性-1\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h4><p>对于对象而言，对象是有键值对的数据结构组成的，但是对于对象的键，他的格式会被转换为字符串， 即便我们传入了一个数组或者对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\">let o = &#123;a: 1&#125;;</span><br><span class=\"line\">obj[o] = &apos;content&apos;;</span><br><span class=\"line\">for (let key in obj) &#123;</span><br><span class=\"line\">\tconsole.log(typeOf key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// string</span><br></pre></td></tr></table></figure>\n<p>使用 <code>map</code> 结构可以实现对象的键不再必须是字符串的形式</p>\n<p>创建 <code>map</code> 结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-属性的方法\"><a href=\"#map-属性的方法\" class=\"headerlink\" title=\"map 属性的方法\"></a><code>map</code> 属性的方法</h4><p>通过 console　控制台打印数据如下</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map.png\" alt=\"\"></p>\n<p>类似于　<code>Set</code> 结构, 存在 <code>set</code> <code>get</code> <code>delete</code> <code>has</code> <code>clear</code> 等几种操作方法</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/map%20%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE.png\" alt=\"\"></p>\n<p><code>set(键， 值)</code> 写入数据</p>\n<p><code>get(键)</code> 从数据结构中获得对应键的值</p>\n<blockquote>\n<p>虽然 <code>typeof map</code> // Object 以及  <code>map instanceof Object === true</code> 但是， Map 是一种不同于对象的数据结构，在对象上使用 [ ] 访问属性的方法在 map 数据结构中是不适用的，要获得 <code>Map</code> 数据结构中的值， 我们是通过使用 <code>get</code> 方法，后面我们会说如何将 map 数据结构转换为对象</p>\n</blockquote>\n<p><code>delete(键)</code> 删除对应键的值</p>\n<p><code>clear()</code> 将 <code>map</code> 数据中的所有数据清除</p>\n<p><code>has()</code> 返回布尔值, 表示是否含有某条数据</p>\n<p>使用 <code>map</code> 的数据结构不同于对象的是，通过使用 <code>map</code> 添加的键名可以是变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br><span class=\"line\">for (let key of map) &#123;</span><br><span class=\"line\">\tconsole.log(typeof key) // object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以是数组:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1];</span><br><span class=\"line\">map.set(arr, &apos;good&apos;);</span><br><span class=\"line\">map.get(arr)// &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的一点，通过使用 <code>get()</code> 获取键值的时候，最终是查找到了键值的内存地址</p>\n</blockquote>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.set(&#123;a:1&#125;, &apos;good&apos;);</span><br><span class=\"line\">map.get(&#123;a:1&#125;)// undefined</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，虽然查找的键值是一样的，但是两个 <code>{a:1}</code> 实际上的内存地址是不一样的。使用下面的代码可以找到对应的键值，因为变量 obj 指向了同一个对象的内存地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;a: 1&#125;;</span><br><span class=\"line\">map.set(obj, &apos;good&apos;);</span><br><span class=\"line\">map.get(obj) // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于对象及内存地址:</p>\n<p>每创建一个对象，总会创建一个内存地址，对于下面对象:</p>\n<p><code>let person = { name: &#39;张宁宁&#39; }</code> </p>\n<p>我们使用 <code>person.name</code> 来访问到值的，但是，对象的值并没有存放在<code>person</code> 容器内，<code>person</code> 中存放了对象的属性，</p>\n<p>这个属性相当于指针，指向存放 <code>张宁宁</code> 的内存地址</p>\n<p>例如:</p>\n<p><code>{} === {}</code> // false</p>\n<p>因为这两个空对象的内存地址是不一样的，所以是不相等的</p>\n<hr>\n<p>使用 <code>map</code> 结构可以传入数组，数组中的成员是存在两个元素的数组结构。其中第一个元素会被当作键名，第二个元素会被当作键值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map([[&apos;name&apos;, &apos;张宁宁&apos;]]);</span><br><span class=\"line\">map.get(&apos;name&apos;) // &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map-对象的遍历方法\"><a href=\"#map-对象的遍历方法\" class=\"headerlink\" title=\"map 对象的遍历方法\"></a>map 对象的遍历方法</h4><p>对于 <code>map</code> 结构的遍历，存在下面几种方法</p>\n<p><code>keys()</code> 返回键名的遍历器</p>\n<p><code>values()</code> 返回键值的遍历器</p>\n<p><code>entires()</code> 返回所有成员的遍历器</p>\n<p><code>forEach()</code> 类似于数组中的 <code>forEach()</code> 方法， 实现对于 <code>map</code> 数据结构的遍历</p>\n<p>使用 <code>keys()</code> <code>values()</code> 以及 <code>entires()</code> 返回的是类数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map = new Map();</span><br><span class=\"line\">map.set(&apos;h&apos;, &apos;hello&apos;);</span><br><span class=\"line\">map.set(&apos;g&apos;, &apos;good&apos;);</span><br><span class=\"line\">map.keys() // &#123;&apos;h&apos;, &apos;g&apos;&#125;;</span><br><span class=\"line\">map.values() // &#123;&apos;hello&apos;, &apos;good&apos;&#125;;</span><br><span class=\"line\">map.entires(); // &#123;&apos;h&apos;: &apos;hello&apos;, &apos;g&apos;: &apos;good&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将类数组对象转化为数组对象，从而对于类数组对象上应用各种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...map.keys()] // [&apos;h&apos;, &apos;g&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Map-与各种数据结构的相互转化\"><a href=\"#Map-与各种数据结构的相互转化\" class=\"headerlink\" title=\"Map 与各种数据结构的相互转化\"></a><code>Map</code> 与各种数据结构的相互转化</h4><ol>\n<li><p>对象转为 <code>map</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toMap (obj) &#123;</span><br><span class=\"line\">  let map = new Map();</span><br><span class=\"line\">  for (let key in obj) &#123;</span><br><span class=\"line\">    map.set(key, obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>map</code> 转化为对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toObj (map) &#123;</span><br><span class=\"line\">  let obj = Object.create(null);</span><br><span class=\"line\">  for (let [k,v] of map) &#123;</span><br><span class=\"line\">    obj[k] = v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"Vue 组件之间的传值","date":"2017-09-10T15:09:48.000Z","_content":"\n在 `vue` 中，进行组件通信有下面几种形式:\n\n### 父子组件通信  \n\n在 `vue` 中, 实现父子组件通信的方法主要是 :  props down,  emit up\n\n使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据\n\n```\n父组件中：\n<child  :propsData = 'localData'></child>\n子组件中：\n<template>\n</template>\n<script>\n  export default {\n    name: 'child',\n    // 子组件中通过使用 props 声明需要进行接受的数据\n    props: ['propsData'],\n    data () {\n      return {\n        localData: ''\n      }\n    }\n  }\n</script>\n```\n\n对于实现子组件向父组件的传值操作，使用 `emit()` 操作实现:\n\n\n\n### 兄弟组件通信  \n\n### Vuex\n\n使用 `vuex` 实现多个组件之间状态的共享\n\n![](http://ov3b9jngp.bkt.clouddn.com/vuex.png)\n\n上图是使用 vuex 的工作流程，下面是我对于 `vuex` 的一些个人理解\n\n`vuex` 主要是有三个部分组成: \n\n`actions` : 用来执行提交 mutations 操作  \n\n`mutations` : 用来对于 `state` 中存储的数据进行改变操作  \n\n`state` : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  \n\n总的来说： 要执行一次进行改变 `state` 中状态的数据，要进行以下操作\n\n`state` 中保存了要进行改变的数据状态  \n\n`mutations` 中定义了要进行改变数据状态的操作，这是函数\n\n我们通过 `actions`  中的函数对于在`mutations` 中定义的函数进行提交, 相当于执行函数，从而实现对于`state` 中保存数据的改变\n\n ","source":"_posts/Vue-组件之间的传值.md","raw":"---\ntitle: Vue 组件之间的传值\ndate: 2017-09-10 23:09:48\ntags: 组件通信\ncategories: Vue\n---\n\n在 `vue` 中，进行组件通信有下面几种形式:\n\n### 父子组件通信  \n\n在 `vue` 中, 实现父子组件通信的方法主要是 :  props down,  emit up\n\n使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据\n\n```\n父组件中：\n<child  :propsData = 'localData'></child>\n子组件中：\n<template>\n</template>\n<script>\n  export default {\n    name: 'child',\n    // 子组件中通过使用 props 声明需要进行接受的数据\n    props: ['propsData'],\n    data () {\n      return {\n        localData: ''\n      }\n    }\n  }\n</script>\n```\n\n对于实现子组件向父组件的传值操作，使用 `emit()` 操作实现:\n\n\n\n### 兄弟组件通信  \n\n### Vuex\n\n使用 `vuex` 实现多个组件之间状态的共享\n\n![](http://ov3b9jngp.bkt.clouddn.com/vuex.png)\n\n上图是使用 vuex 的工作流程，下面是我对于 `vuex` 的一些个人理解\n\n`vuex` 主要是有三个部分组成: \n\n`actions` : 用来执行提交 mutations 操作  \n\n`mutations` : 用来对于 `state` 中存储的数据进行改变操作  \n\n`state` : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  \n\n总的来说： 要执行一次进行改变 `state` 中状态的数据，要进行以下操作\n\n`state` 中保存了要进行改变的数据状态  \n\n`mutations` 中定义了要进行改变数据状态的操作，这是函数\n\n我们通过 `actions`  中的函数对于在`mutations` 中定义的函数进行提交, 相当于执行函数，从而实现对于`state` 中保存数据的改变\n\n ","slug":"Vue-组件之间的传值","published":1,"updated":"2017-09-10T15:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7c000ns33ghwfv9d9y","content":"<p>在 <code>vue</code> 中，进行组件通信有下面几种形式:</p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><p>在 <code>vue</code> 中, 实现父子组件通信的方法主要是 :  props down,  emit up</p>\n<p>使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;child  :propsData = &apos;localData&apos;&gt;&lt;/child&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name: &apos;child&apos;,</span><br><span class=\"line\">    // 子组件中通过使用 props 声明需要进行接受的数据</span><br><span class=\"line\">    props: [&apos;propsData&apos;],</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        localData: &apos;&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>对于实现子组件向父组件的传值操作，使用 <code>emit()</code> 操作实现:</p>\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>使用 <code>vuex</code> 实现多个组件之间状态的共享</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vuex.png\" alt=\"\"></p>\n<p>上图是使用 vuex 的工作流程，下面是我对于 <code>vuex</code> 的一些个人理解</p>\n<p><code>vuex</code> 主要是有三个部分组成: </p>\n<p><code>actions</code> : 用来执行提交 mutations 操作  </p>\n<p><code>mutations</code> : 用来对于 <code>state</code> 中存储的数据进行改变操作  </p>\n<p><code>state</code> : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  </p>\n<p>总的来说： 要执行一次进行改变 <code>state</code> 中状态的数据，要进行以下操作</p>\n<p><code>state</code> 中保存了要进行改变的数据状态  </p>\n<p><code>mutations</code> 中定义了要进行改变数据状态的操作，这是函数</p>\n<p>我们通过 <code>actions</code>  中的函数对于在<code>mutations</code> 中定义的函数进行提交, 相当于执行函数，从而实现对于<code>state</code> 中保存数据的改变</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>vue</code> 中，进行组件通信有下面几种形式:</p>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><p>在 <code>vue</code> 中, 实现父子组件通信的方法主要是 :  props down,  emit up</p>\n<p>使用 props 实现父组件向子组件传递信息, 在父组件上的子组件模板上绑定需要进行传递的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">&lt;child  :propsData = &apos;localData&apos;&gt;&lt;/child&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    name: &apos;child&apos;,</span><br><span class=\"line\">    // 子组件中通过使用 props 声明需要进行接受的数据</span><br><span class=\"line\">    props: [&apos;propsData&apos;],</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        localData: &apos;&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>对于实现子组件向父组件的传值操作，使用 <code>emit()</code> 操作实现:</p>\n<h3 id=\"兄弟组件通信\"><a href=\"#兄弟组件通信\" class=\"headerlink\" title=\"兄弟组件通信\"></a>兄弟组件通信</h3><h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>使用 <code>vuex</code> 实现多个组件之间状态的共享</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vuex.png\" alt=\"\"></p>\n<p>上图是使用 vuex 的工作流程，下面是我对于 <code>vuex</code> 的一些个人理解</p>\n<p><code>vuex</code> 主要是有三个部分组成: </p>\n<p><code>actions</code> : 用来执行提交 mutations 操作  </p>\n<p><code>mutations</code> : 用来对于 <code>state</code> 中存储的数据进行改变操作  </p>\n<p><code>state</code> : 用来存储一些数据， 这些数据对于各个组件之间是可以共享的  </p>\n<p>总的来说： 要执行一次进行改变 <code>state</code> 中状态的数据，要进行以下操作</p>\n<p><code>state</code> 中保存了要进行改变的数据状态  </p>\n<p><code>mutations</code> 中定义了要进行改变数据状态的操作，这是函数</p>\n<p>我们通过 <code>actions</code>  中的函数对于在<code>mutations</code> 中定义的函数进行提交, 相当于执行函数，从而实现对于<code>state</code> 中保存数据的改变</p>\n"},{"title":"es6:变量的解构赋值","date":"2017-09-09T07:53:25.000Z","_content":"\n### es6的数值解构赋值\n\n#### 1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\n\n```\nlet [a,b,c] = [1,2,3]\na // 1\nb // 2\nc // 3\n类似:\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\n使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式\n\n对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:\n\n```\nlet [a] = {};\nlet [a] = null;\nlet [a] = undefined;\nlet [a] = NaN;\nlet [a] = 1;\n\n```\n\n上面的几种形式都会被报错\n\n#### 2.使用结构变量可以初始数组\n\n```\nlet [a,...b] = [1,2,3,4];\nb // [2,3,4]\n```\n\n使用扩展运算符可以将多个数合并为一个数组\n\n#### 3.可以在解构赋值的时候使用默认值操作\n\n```\nlet [x = 1] = [];\nx //  x 在没有被赋值的时候默认使用 1\nlet [x = 1] = [2];\nx // 2\n当 x 存在明显只的时候默认值失效\n// 对于使用默认值, 还可以使用函数的返回值\nfunction fn() {\n  return 23\n}\nlet [a = fn()] = [45];\n// 这里 因为 a 能够取到值, 因此不会执行 fn 函数\nconsole.log(a); // 45\n```\n\n默认值可以引用其他结构值的对象\n\n```\nlet [x = 1, y = x] = [];\nx // 1\ny // 1\n```\n\n注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 `===` 全等操作， 因此\n\n```\nlet [a = 1] = [null]\na // null\nlet [a = 1] = [undefined]\na // 1\n```\n\n\n\n###  es6 中对于对象的解构赋值操作\n\n代码如下:\n\n```\nlet person = {\n\tname: '张宁宁',\n\thome: '山东'\n};\nlet {name, home} = person;\nname // '张宁宁'\nhome // '山东'\n```\n\n这种写法无非是下面这种写法的简写:`\n\n```\nlet {name: name, home: home} = person;\n```\n\n实际上:\n\n```\nlet {name: perName, home: perHome} = person;\nperName //  '张宁宁'\n```\n\n等号左边中 `name` 用于进行模式匹配，在 `person` 中找到 `name` 之后，将 `name` 的值赋给 `perName`\n\n使用对象的形式解构也可以赋予默认值：\n\n当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值\n\n```\nlet {x = 1, y = 5} = {x: 2}\nx // 2\ny // 5\n```\n\n### es6 中对于字符串的解构赋值\n\n当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:\n\n这意味着我们可以通过使用数组或者对象的方式进行解构：\n\n```\nlet [a,b,c,d,e] = 'hello';\na // 'h'\nb // 'e'\n....\n```\n\n```\nlet {length} = 'hello';\nlength // 5\n因为使用解构的时候， 字符串对象含有一个 length 属性\n```\n\n### 函数参数的解构\n\n1.数组形式进行解构\n\n```\nfunction move([x,y]) {\n  return x + y\n}\nmove([1,2]);\n// 这里虽然传入的是一个数组，实际上传入函数之后会被解构\n```\n\n2.对象形式进行解构\n\n```\nfunction person({name, home}) {\n\tconsole.log(home, name)\n}\nlet per = {\n  name: '张宁宁',\n  home: 'china'\n}\nperson(per)//  china 张宁宁\n```\n\n3.使用对象形式赋予默认值\n\n```\nfunction person ({name = '张宁宁', home = 'china'} = {}) {\n\tconsole.log(name, home)\n}\nperson(); // 张宁宁  china\n和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作\n```\n\n***\n\n### 使用参数解构中的小技巧\n\n1. 提取函数的返回值:\n\n   ```\n   function bar () {\n     return [1, 2]\n   }\n   let [a, b] = bar ();\n   a // 1\n   b // 2\n   ```\n\n2. 应用解构分离对象的键值对\n\n   ```\n   let arrObj = [{}, {}, {}];\n   // 取得数组对象中值对应的键\n   function getKey( arrobj, objValue) {\n     for (const obj of arrobj) {\n     // 使用 {} 实现对象的解构赋值\n       let {key, value} = obj;\n       if (value === objValue) {\n         return key;\n       }\n     }\n   }\n\n   getKey(arrObj, 'someObjValue')\n\n   ```\n\n   ​","source":"_posts/es6-变量的解构赋值.md","raw":"---\ntitle: 'es6:变量的解构赋值'\ndate: 2017-09-09 15:53:25\ntags: 变量解构赋值\ncategories: es6\n---\n\n### es6的数值解构赋值\n\n#### 1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\n\n```\nlet [a,b,c] = [1,2,3]\na // 1\nb // 2\nc // 3\n类似:\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\n使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式\n\n对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:\n\n```\nlet [a] = {};\nlet [a] = null;\nlet [a] = undefined;\nlet [a] = NaN;\nlet [a] = 1;\n\n```\n\n上面的几种形式都会被报错\n\n#### 2.使用结构变量可以初始数组\n\n```\nlet [a,...b] = [1,2,3,4];\nb // [2,3,4]\n```\n\n使用扩展运算符可以将多个数合并为一个数组\n\n#### 3.可以在解构赋值的时候使用默认值操作\n\n```\nlet [x = 1] = [];\nx //  x 在没有被赋值的时候默认使用 1\nlet [x = 1] = [2];\nx // 2\n当 x 存在明显只的时候默认值失效\n// 对于使用默认值, 还可以使用函数的返回值\nfunction fn() {\n  return 23\n}\nlet [a = fn()] = [45];\n// 这里 因为 a 能够取到值, 因此不会执行 fn 函数\nconsole.log(a); // 45\n```\n\n默认值可以引用其他结构值的对象\n\n```\nlet [x = 1, y = x] = [];\nx // 1\ny // 1\n```\n\n注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 `===` 全等操作， 因此\n\n```\nlet [a = 1] = [null]\na // null\nlet [a = 1] = [undefined]\na // 1\n```\n\n\n\n###  es6 中对于对象的解构赋值操作\n\n代码如下:\n\n```\nlet person = {\n\tname: '张宁宁',\n\thome: '山东'\n};\nlet {name, home} = person;\nname // '张宁宁'\nhome // '山东'\n```\n\n这种写法无非是下面这种写法的简写:`\n\n```\nlet {name: name, home: home} = person;\n```\n\n实际上:\n\n```\nlet {name: perName, home: perHome} = person;\nperName //  '张宁宁'\n```\n\n等号左边中 `name` 用于进行模式匹配，在 `person` 中找到 `name` 之后，将 `name` 的值赋给 `perName`\n\n使用对象的形式解构也可以赋予默认值：\n\n当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值\n\n```\nlet {x = 1, y = 5} = {x: 2}\nx // 2\ny // 5\n```\n\n### es6 中对于字符串的解构赋值\n\n当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:\n\n这意味着我们可以通过使用数组或者对象的方式进行解构：\n\n```\nlet [a,b,c,d,e] = 'hello';\na // 'h'\nb // 'e'\n....\n```\n\n```\nlet {length} = 'hello';\nlength // 5\n因为使用解构的时候， 字符串对象含有一个 length 属性\n```\n\n### 函数参数的解构\n\n1.数组形式进行解构\n\n```\nfunction move([x,y]) {\n  return x + y\n}\nmove([1,2]);\n// 这里虽然传入的是一个数组，实际上传入函数之后会被解构\n```\n\n2.对象形式进行解构\n\n```\nfunction person({name, home}) {\n\tconsole.log(home, name)\n}\nlet per = {\n  name: '张宁宁',\n  home: 'china'\n}\nperson(per)//  china 张宁宁\n```\n\n3.使用对象形式赋予默认值\n\n```\nfunction person ({name = '张宁宁', home = 'china'} = {}) {\n\tconsole.log(name, home)\n}\nperson(); // 张宁宁  china\n和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作\n```\n\n***\n\n### 使用参数解构中的小技巧\n\n1. 提取函数的返回值:\n\n   ```\n   function bar () {\n     return [1, 2]\n   }\n   let [a, b] = bar ();\n   a // 1\n   b // 2\n   ```\n\n2. 应用解构分离对象的键值对\n\n   ```\n   let arrObj = [{}, {}, {}];\n   // 取得数组对象中值对应的键\n   function getKey( arrobj, objValue) {\n     for (const obj of arrobj) {\n     // 使用 {} 实现对象的解构赋值\n       let {key, value} = obj;\n       if (value === objValue) {\n         return key;\n       }\n     }\n   }\n\n   getKey(arrObj, 'someObjValue')\n\n   ```\n\n   ​","slug":"es6-变量的解构赋值","published":1,"updated":"2017-11-04T03:30:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7e000qs33gybxbs6i7","content":"<h3 id=\"es6的数值解构赋值\"><a href=\"#es6的数值解构赋值\" class=\"headerlink\" title=\"es6的数值解构赋值\"></a>es6的数值解构赋值</h3><h4 id=\"1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\"><a href=\"#1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\" class=\"headerlink\" title=\"1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\"></a>1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c] = [1,2,3]</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br><span class=\"line\">c // 3</span><br><span class=\"line\">类似:</span><br><span class=\"line\">let a = 1</span><br><span class=\"line\">let b = 2</span><br><span class=\"line\">let c = 3</span><br></pre></td></tr></table></figure>\n<p>使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式</p>\n<p>对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a] = &#123;&#125;;</span><br><span class=\"line\">let [a] = null;</span><br><span class=\"line\">let [a] = undefined;</span><br><span class=\"line\">let [a] = NaN;</span><br><span class=\"line\">let [a] = 1;</span><br></pre></td></tr></table></figure>\n<p>上面的几种形式都会被报错</p>\n<h4 id=\"2-使用结构变量可以初始数组\"><a href=\"#2-使用结构变量可以初始数组\" class=\"headerlink\" title=\"2.使用结构变量可以初始数组\"></a>2.使用结构变量可以初始数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,...b] = [1,2,3,4];</span><br><span class=\"line\">b // [2,3,4]</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将多个数合并为一个数组</p>\n<h4 id=\"3-可以在解构赋值的时候使用默认值操作\"><a href=\"#3-可以在解构赋值的时候使用默认值操作\" class=\"headerlink\" title=\"3.可以在解构赋值的时候使用默认值操作\"></a>3.可以在解构赋值的时候使用默认值操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1] = [];</span><br><span class=\"line\">x //  x 在没有被赋值的时候默认使用 1</span><br><span class=\"line\">let [x = 1] = [2];</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">当 x 存在明显只的时候默认值失效</span><br><span class=\"line\">// 对于使用默认值, 还可以使用函数的返回值</span><br><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">  return 23</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a = fn()] = [45];</span><br><span class=\"line\">// 这里 因为 a 能够取到值, 因此不会执行 fn 函数</span><br><span class=\"line\">console.log(a); // 45</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用其他结构值的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1, y = x] = [];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 1</span><br></pre></td></tr></table></figure>\n<p>注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 <code>===</code> 全等操作， 因此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a = 1] = [null]</span><br><span class=\"line\">a // null</span><br><span class=\"line\">let [a = 1] = [undefined]</span><br><span class=\"line\">a // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于对象的解构赋值操作\"><a href=\"#es6-中对于对象的解构赋值操作\" class=\"headerlink\" title=\"es6 中对于对象的解构赋值操作\"></a>es6 中对于对象的解构赋值操作</h3><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = &#123;</span><br><span class=\"line\">\tname: &apos;张宁宁&apos;,</span><br><span class=\"line\">\thome: &apos;山东&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123;name, home&#125; = person;</span><br><span class=\"line\">name // &apos;张宁宁&apos;</span><br><span class=\"line\">home // &apos;山东&apos;</span><br></pre></td></tr></table></figure>\n<p>这种写法无非是下面这种写法的简写:`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: name, home: home&#125; = person;</span><br></pre></td></tr></table></figure>\n<p>实际上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: perName, home: perHome&#125; = person;</span><br><span class=\"line\">perName //  &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<p>等号左边中 <code>name</code> 用于进行模式匹配，在 <code>person</code> 中找到 <code>name</code> 之后，将 <code>name</code> 的值赋给 <code>perName</code></p>\n<p>使用对象的形式解构也可以赋予默认值：</p>\n<p>当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;x = 1, y = 5&#125; = &#123;x: 2&#125;</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">y // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于字符串的解构赋值\"><a href=\"#es6-中对于字符串的解构赋值\" class=\"headerlink\" title=\"es6 中对于字符串的解构赋值\"></a>es6 中对于字符串的解构赋值</h3><p>当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:</p>\n<p>这意味着我们可以通过使用数组或者对象的方式进行解构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c,d,e] = &apos;hello&apos;;</span><br><span class=\"line\">a // &apos;h&apos;</span><br><span class=\"line\">b // &apos;e&apos;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;length&#125; = &apos;hello&apos;;</span><br><span class=\"line\">length // 5</span><br><span class=\"line\">因为使用解构的时候， 字符串对象含有一个 length 属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数的解构\"><a href=\"#函数参数的解构\" class=\"headerlink\" title=\"函数参数的解构\"></a>函数参数的解构</h3><p>1.数组形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function move([x,y]) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">move([1,2]);</span><br><span class=\"line\">// 这里虽然传入的是一个数组，实际上传入函数之后会被解构</span><br></pre></td></tr></table></figure>\n<p>2.对象形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person(&#123;name, home&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(home, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let per = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;,</span><br><span class=\"line\">  home: &apos;china&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(per)//  china 张宁宁</span><br></pre></td></tr></table></figure>\n<p>3.使用对象形式赋予默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person (&#123;name = &apos;张宁宁&apos;, home = &apos;china&apos;&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(name, home)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(); // 张宁宁  china</span><br><span class=\"line\">和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"使用参数解构中的小技巧\"><a href=\"#使用参数解构中的小技巧\" class=\"headerlink\" title=\"使用参数解构中的小技巧\"></a>使用参数解构中的小技巧</h3><ol>\n<li><p>提取函数的返回值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bar () &#123;</span><br><span class=\"line\">  return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b] = bar ();</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用解构分离对象的键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrObj = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">// 取得数组对象中值对应的键</span><br><span class=\"line\">function getKey( arrobj, objValue) &#123;</span><br><span class=\"line\">  for (const obj of arrobj) &#123;</span><br><span class=\"line\">  // 使用 &#123;&#125; 实现对象的解构赋值</span><br><span class=\"line\">    let &#123;key, value&#125; = obj;</span><br><span class=\"line\">    if (value === objValue) &#123;</span><br><span class=\"line\">      return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getKey(arrObj, &apos;someObjValue&apos;)</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"es6的数值解构赋值\"><a href=\"#es6的数值解构赋值\" class=\"headerlink\" title=\"es6的数值解构赋值\"></a>es6的数值解构赋值</h3><h4 id=\"1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\"><a href=\"#1-es6-允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下\" class=\"headerlink\" title=\"1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:\"></a>1.es6 允许使用一定的方式从数组或者对象中提取数值，从而对于同样模式的变量进行赋值操作，代码如下:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c] = [1,2,3]</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br><span class=\"line\">c // 3</span><br><span class=\"line\">类似:</span><br><span class=\"line\">let a = 1</span><br><span class=\"line\">let b = 2</span><br><span class=\"line\">let c = 3</span><br></pre></td></tr></table></figure>\n<p>使用数组形式进行解构赋值的时候要注意到，两边其实并不是数组，而只是数组的形式</p>\n<p>对于等号两边必须是数组的形式，如果是其他的形式，那么就会报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a] = &#123;&#125;;</span><br><span class=\"line\">let [a] = null;</span><br><span class=\"line\">let [a] = undefined;</span><br><span class=\"line\">let [a] = NaN;</span><br><span class=\"line\">let [a] = 1;</span><br></pre></td></tr></table></figure>\n<p>上面的几种形式都会被报错</p>\n<h4 id=\"2-使用结构变量可以初始数组\"><a href=\"#2-使用结构变量可以初始数组\" class=\"headerlink\" title=\"2.使用结构变量可以初始数组\"></a>2.使用结构变量可以初始数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,...b] = [1,2,3,4];</span><br><span class=\"line\">b // [2,3,4]</span><br></pre></td></tr></table></figure>\n<p>使用扩展运算符可以将多个数合并为一个数组</p>\n<h4 id=\"3-可以在解构赋值的时候使用默认值操作\"><a href=\"#3-可以在解构赋值的时候使用默认值操作\" class=\"headerlink\" title=\"3.可以在解构赋值的时候使用默认值操作\"></a>3.可以在解构赋值的时候使用默认值操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1] = [];</span><br><span class=\"line\">x //  x 在没有被赋值的时候默认使用 1</span><br><span class=\"line\">let [x = 1] = [2];</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">当 x 存在明显只的时候默认值失效</span><br><span class=\"line\">// 对于使用默认值, 还可以使用函数的返回值</span><br><span class=\"line\">function fn() &#123;</span><br><span class=\"line\">  return 23</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a = fn()] = [45];</span><br><span class=\"line\">// 这里 因为 a 能够取到值, 因此不会执行 fn 函数</span><br><span class=\"line\">console.log(a); // 45</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用其他结构值的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [x = 1, y = x] = [];</span><br><span class=\"line\">x // 1</span><br><span class=\"line\">y // 1</span><br></pre></td></tr></table></figure>\n<p>注意: 对于赋值操作两端的值, 在赋值操作两端执行的是 <code>===</code> 全等操作， 因此</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a = 1] = [null]</span><br><span class=\"line\">a // null</span><br><span class=\"line\">let [a = 1] = [undefined]</span><br><span class=\"line\">a // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于对象的解构赋值操作\"><a href=\"#es6-中对于对象的解构赋值操作\" class=\"headerlink\" title=\"es6 中对于对象的解构赋值操作\"></a>es6 中对于对象的解构赋值操作</h3><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person = &#123;</span><br><span class=\"line\">\tname: &apos;张宁宁&apos;,</span><br><span class=\"line\">\thome: &apos;山东&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let &#123;name, home&#125; = person;</span><br><span class=\"line\">name // &apos;张宁宁&apos;</span><br><span class=\"line\">home // &apos;山东&apos;</span><br></pre></td></tr></table></figure>\n<p>这种写法无非是下面这种写法的简写:`</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: name, home: home&#125; = person;</span><br></pre></td></tr></table></figure>\n<p>实际上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;name: perName, home: perHome&#125; = person;</span><br><span class=\"line\">perName //  &apos;张宁宁&apos;</span><br></pre></td></tr></table></figure>\n<p>等号左边中 <code>name</code> 用于进行模式匹配，在 <code>person</code> 中找到 <code>name</code> 之后，将 <code>name</code> 的值赋给 <code>perName</code></p>\n<p>使用对象的形式解构也可以赋予默认值：</p>\n<p>当在等号右边的对象中找不到对应的属性的时候, 会使用括号内被默认赋予的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;x = 1, y = 5&#125; = &#123;x: 2&#125;</span><br><span class=\"line\">x // 2</span><br><span class=\"line\">y // 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"es6-中对于字符串的解构赋值\"><a href=\"#es6-中对于字符串的解构赋值\" class=\"headerlink\" title=\"es6 中对于字符串的解构赋值\"></a>es6 中对于字符串的解构赋值</h3><p>当对于字符串进行解构赋值操作的时候，字符串会被转换为类似数组的对象:</p>\n<p>这意味着我们可以通过使用数组或者对象的方式进行解构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let [a,b,c,d,e] = &apos;hello&apos;;</span><br><span class=\"line\">a // &apos;h&apos;</span><br><span class=\"line\">b // &apos;e&apos;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;length&#125; = &apos;hello&apos;;</span><br><span class=\"line\">length // 5</span><br><span class=\"line\">因为使用解构的时候， 字符串对象含有一个 length 属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数参数的解构\"><a href=\"#函数参数的解构\" class=\"headerlink\" title=\"函数参数的解构\"></a>函数参数的解构</h3><p>1.数组形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function move([x,y]) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">move([1,2]);</span><br><span class=\"line\">// 这里虽然传入的是一个数组，实际上传入函数之后会被解构</span><br></pre></td></tr></table></figure>\n<p>2.对象形式进行解构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person(&#123;name, home&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(home, name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let per = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;,</span><br><span class=\"line\">  home: &apos;china&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(per)//  china 张宁宁</span><br></pre></td></tr></table></figure>\n<p>3.使用对象形式赋予默认值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person (&#123;name = &apos;张宁宁&apos;, home = &apos;china&apos;&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">\tconsole.log(name, home)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(); // 张宁宁  china</span><br><span class=\"line\">和上面结果相同， 因为传入的是一个空对象，没有找到相应的属性，因此采用默认赋予的值进行操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"使用参数解构中的小技巧\"><a href=\"#使用参数解构中的小技巧\" class=\"headerlink\" title=\"使用参数解构中的小技巧\"></a>使用参数解构中的小技巧</h3><ol>\n<li><p>提取函数的返回值:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bar () &#123;</span><br><span class=\"line\">  return [1, 2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let [a, b] = bar ();</span><br><span class=\"line\">a // 1</span><br><span class=\"line\">b // 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>应用解构分离对象的键值对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arrObj = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">// 取得数组对象中值对应的键</span><br><span class=\"line\">function getKey( arrobj, objValue) &#123;</span><br><span class=\"line\">  for (const obj of arrobj) &#123;</span><br><span class=\"line\">  // 使用 &#123;&#125; 实现对象的解构赋值</span><br><span class=\"line\">    let &#123;key, value&#125; = obj;</span><br><span class=\"line\">    if (value === objValue) &#123;</span><br><span class=\"line\">      return key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getKey(arrObj, &apos;someObjValue&apos;)</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"es6-promise","date":"2017-10-30T14:53:22.000Z","_content":"#### resove and reject\n\n使用 `es6` 回调函数的例子\n\n```\nlet promise = new Promise(function (resolve, reject) {\n  if (/* 如果异步操作成功 */) {\n      resolve(value);\n  } else {\n      reject(error)\n  }\n})\n```\n在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 `resolve` 和 `reject` , 这两个参数是两个函数, 用来执行回调的作用\n\n>resolve\n>resove 是作为异步回调成功之后需要执行的函数\n>reject\n>reject 是作为异步回调失败之后需要进行执行的函数\n>\n>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  \n\n使用 `promise` 进行 `ajax` 请求的函数如下:\n\n```\n/**\n* @description promise 的 ajax 请求\n* @param url {String} ajax 请求的地址\n* @param method {String} ajax 请求的方法 'get' or 'method'\n* @return promise 新的 promise 请求对象\n**/\nlet ajax = function (url, method) {\n  let promise = new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n    function handler() {\n      if (this.readystate !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statuText));\n      }\n    };\n  });\n  return promise;\n};\n\najax(url, 'get').then((json) => {\n  console.log('请求成功之后返回的数据', json);\n}, (error) => {\n  console.error('出现的错误' + error);\n});\n```\n\n\n\n#### promise.then() \n\n在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数\n\n> promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数\n\n```\npromise.then(function(value) {\n  // when promise success do something\n}, function(error) {\n  // when promise failed do something\n})\n```\n\n#### promise.all()\n\n使用 promise.all() 方法用于将多个 `promise` 实例, 包装为一个 `promise` 实例\n\n`Promise.all([promise1, promise2, promise3])`\n\n使用 `Promise.all` 接收的是一个数组作为参数， 其中 `promise1` `promise2` `promise3` 分别是 `Promise` 的实例\n\n关于使用 `Promise.all` 的状态:\n\n1. 只有 `promise1 promise2 promise3` 的状态都变成了 `fullfilled` 的状态,  `Promise.all` 的状态才会变成 `fullfilled` 并且三个 `promise` 的返回值组成一个数组, 传递给 `Promise.all` 的回调函数。 \n2. 当三个 `promise` 中存在一个为 `reject` 的时候, `Promise.all` 的状态就会变成 `reject` , 这个时候 ,  被  `reject`    实例 的返回值被传递给`Promise.all` 的回调函数.\n\n```\nconst firstNamePromise = namePromise.then(getFirstName);\nconst lastNamePromise = namePromise.then(getLastName);\nPromise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) => nextAction(firstName, lastName));\n```\n\n注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 \n\nfirstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName\n\n++++\n\n对于对象的解构赋值而言,我们可以这样赋值\n\n```\nlet a = 2;\nlet b = 3;\n// 这样\nlet [a, b] = [2, 3];\n```\n\n\n\n++++\n\n#### promise .race()\n\n使用 `promise.race()` 类似于 `promise.all` 方法, 将多个 `promise` 实例包装为一个 `promise` 方法\n\n`let p = promise.race([p1, p2, p3])`  \n\n只要上面的 `p1, p2, p3` 中有一个的实例率先发生变化, 那么 `p` 的状态就会发生变化, 率先发生变化的返回值就会传递给 `p` 函数。\n\n#### 其他方法\n\n#####   `promise.finally`\n\n使用 `promise.finally` 的方法的作用在于: 不管 `promise` 的最后的状态是什么, 使用 `promise.finally` 内的回调函数始终会被执行;\n\n例如: 请求之前的指示器打开或者关闭：\n\n```vue\nthis.indicator.show();\nlet promise = new Promise();\npromise.then(\n// callback success fn\n).catch(e => {\n  this.toast(e.message)\n}).finally(() => {\n  this.indicator.hide()\n})\n```\n\n\n\n\n\n ","source":"_posts/es6-promise.md","raw":"---\ntitle: es6-promise\ndate: 2017-10-30 22:53:22\ntags: promise\ncategories: 'es6'\n---\n#### resove and reject\n\n使用 `es6` 回调函数的例子\n\n```\nlet promise = new Promise(function (resolve, reject) {\n  if (/* 如果异步操作成功 */) {\n      resolve(value);\n  } else {\n      reject(error)\n  }\n})\n```\n在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 `resolve` 和 `reject` , 这两个参数是两个函数, 用来执行回调的作用\n\n>resolve\n>resove 是作为异步回调成功之后需要执行的函数\n>reject\n>reject 是作为异步回调失败之后需要进行执行的函数\n>\n>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  \n\n使用 `promise` 进行 `ajax` 请求的函数如下:\n\n```\n/**\n* @description promise 的 ajax 请求\n* @param url {String} ajax 请求的地址\n* @param method {String} ajax 请求的方法 'get' or 'method'\n* @return promise 新的 promise 请求对象\n**/\nlet ajax = function (url, method) {\n  let promise = new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n    function handler() {\n      if (this.readystate !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statuText));\n      }\n    };\n  });\n  return promise;\n};\n\najax(url, 'get').then((json) => {\n  console.log('请求成功之后返回的数据', json);\n}, (error) => {\n  console.error('出现的错误' + error);\n});\n```\n\n\n\n#### promise.then() \n\n在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数\n\n> promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数\n\n```\npromise.then(function(value) {\n  // when promise success do something\n}, function(error) {\n  // when promise failed do something\n})\n```\n\n#### promise.all()\n\n使用 promise.all() 方法用于将多个 `promise` 实例, 包装为一个 `promise` 实例\n\n`Promise.all([promise1, promise2, promise3])`\n\n使用 `Promise.all` 接收的是一个数组作为参数， 其中 `promise1` `promise2` `promise3` 分别是 `Promise` 的实例\n\n关于使用 `Promise.all` 的状态:\n\n1. 只有 `promise1 promise2 promise3` 的状态都变成了 `fullfilled` 的状态,  `Promise.all` 的状态才会变成 `fullfilled` 并且三个 `promise` 的返回值组成一个数组, 传递给 `Promise.all` 的回调函数。 \n2. 当三个 `promise` 中存在一个为 `reject` 的时候, `Promise.all` 的状态就会变成 `reject` , 这个时候 ,  被  `reject`    实例 的返回值被传递给`Promise.all` 的回调函数.\n\n```\nconst firstNamePromise = namePromise.then(getFirstName);\nconst lastNamePromise = namePromise.then(getLastName);\nPromise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) => nextAction(firstName, lastName));\n```\n\n注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 \n\nfirstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName\n\n++++\n\n对于对象的解构赋值而言,我们可以这样赋值\n\n```\nlet a = 2;\nlet b = 3;\n// 这样\nlet [a, b] = [2, 3];\n```\n\n\n\n++++\n\n#### promise .race()\n\n使用 `promise.race()` 类似于 `promise.all` 方法, 将多个 `promise` 实例包装为一个 `promise` 方法\n\n`let p = promise.race([p1, p2, p3])`  \n\n只要上面的 `p1, p2, p3` 中有一个的实例率先发生变化, 那么 `p` 的状态就会发生变化, 率先发生变化的返回值就会传递给 `p` 函数。\n\n#### 其他方法\n\n#####   `promise.finally`\n\n使用 `promise.finally` 的方法的作用在于: 不管 `promise` 的最后的状态是什么, 使用 `promise.finally` 内的回调函数始终会被执行;\n\n例如: 请求之前的指示器打开或者关闭：\n\n```vue\nthis.indicator.show();\nlet promise = new Promise();\npromise.then(\n// callback success fn\n).catch(e => {\n  this.toast(e.message)\n}).finally(() => {\n  this.indicator.hide()\n})\n```\n\n\n\n\n\n ","slug":"es6-promise","published":1,"updated":"2017-11-04T01:33:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7h000us33gv5vydnze","content":"<h4 id=\"resove-and-reject\"><a href=\"#resove-and-reject\" class=\"headerlink\" title=\"resove and reject\"></a>resove and reject</h4><p>使用 <code>es6</code> 回调函数的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  if (/* 如果异步操作成功 */) &#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">      reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 <code>resolve</code> 和 <code>reject</code> , 这两个参数是两个函数, 用来执行回调的作用</p>\n<blockquote>\n<p>resolve<br>resove 是作为异步回调成功之后需要执行的函数<br>reject<br>reject 是作为异步回调失败之后需要进行执行的函数</p>\n<p>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  </p>\n</blockquote>\n<p>使用 <code>promise</code> 进行 <code>ajax</code> 请求的函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @description promise 的 ajax 请求</span><br><span class=\"line\">* @param url &#123;String&#125; ajax 请求的地址</span><br><span class=\"line\">* @param method &#123;String&#125; ajax 请求的方法 &apos;get&apos; or &apos;method&apos;</span><br><span class=\"line\">* @return promise 新的 promise 请求对象</span><br><span class=\"line\">**/</span><br><span class=\"line\">let ajax = function (url, method) &#123;</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    let xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(method, url);</span><br><span class=\"line\">    xhr.onreadystatechange = handler;</span><br><span class=\"line\">    xhr.responseType = &apos;json&apos;;</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Accept&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    function handler() &#123;</span><br><span class=\"line\">      if (this.readystate !== 4) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === 200) &#123;</span><br><span class=\"line\">        resolve(this.response);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(new Error(this.statuText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(url, &apos;get&apos;).then((json) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;请求成功之后返回的数据&apos;, json);</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  console.error(&apos;出现的错误&apos; + error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-then\"><a href=\"#promise-then\" class=\"headerlink\" title=\"promise.then()\"></a>promise.then()</h4><p>在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数</p>\n<blockquote>\n<p>promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // when promise success do something</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // when promise failed do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-all\"><a href=\"#promise-all\" class=\"headerlink\" title=\"promise.all()\"></a>promise.all()</h4><p>使用 promise.all() 方法用于将多个 <code>promise</code> 实例, 包装为一个 <code>promise</code> 实例</p>\n<p><code>Promise.all([promise1, promise2, promise3])</code></p>\n<p>使用 <code>Promise.all</code> 接收的是一个数组作为参数， 其中 <code>promise1</code> <code>promise2</code> <code>promise3</code> 分别是 <code>Promise</code> 的实例</p>\n<p>关于使用 <code>Promise.all</code> 的状态:</p>\n<ol>\n<li>只有 <code>promise1 promise2 promise3</code> 的状态都变成了 <code>fullfilled</code> 的状态,  <code>Promise.all</code> 的状态才会变成 <code>fullfilled</code> 并且三个 <code>promise</code> 的返回值组成一个数组, 传递给 <code>Promise.all</code> 的回调函数。 </li>\n<li>当三个 <code>promise</code> 中存在一个为 <code>reject</code> 的时候, <code>Promise.all</code> 的状态就会变成 <code>reject</code> , 这个时候 ,  被  <code>reject</code>    实例 的返回值被传递给<code>Promise.all</code> 的回调函数.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const firstNamePromise = namePromise.then(getFirstName);</span><br><span class=\"line\">const lastNamePromise = namePromise.then(getLastName);</span><br><span class=\"line\">Promise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) =&gt; nextAction(firstName, lastName));</span><br></pre></td></tr></table></figure>\n<p>注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 </p>\n<p>firstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName</p>\n<p>++++</p>\n<p>对于对象的解构赋值而言,我们可以这样赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 2;</span><br><span class=\"line\">let b = 3;</span><br><span class=\"line\">// 这样</span><br><span class=\"line\">let [a, b] = [2, 3];</span><br></pre></td></tr></table></figure>\n<p>++++</p>\n<h4 id=\"promise-race\"><a href=\"#promise-race\" class=\"headerlink\" title=\"promise .race()\"></a>promise .race()</h4><p>使用 <code>promise.race()</code> 类似于 <code>promise.all</code> 方法, 将多个 <code>promise</code> 实例包装为一个 <code>promise</code> 方法</p>\n<p><code>let p = promise.race([p1, p2, p3])</code>  </p>\n<p>只要上面的 <code>p1, p2, p3</code> 中有一个的实例率先发生变化, 那么 <code>p</code> 的状态就会发生变化, 率先发生变化的返回值就会传递给 <code>p</code> 函数。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"promise-finally\"><a href=\"#promise-finally\" class=\"headerlink\" title=\"promise.finally\"></a><code>promise.finally</code></h5><p>使用 <code>promise.finally</code> 的方法的作用在于: 不管 <code>promise</code> 的最后的状态是什么, 使用 <code>promise.finally</code> 内的回调函数始终会被执行;</p>\n<p>例如: 请求之前的指示器打开或者关闭：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.indicator.show();</span><br><span class=\"line\">let promise = new Promise();</span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">// callback success fn</span><br><span class=\"line\">).catch(e =&gt; &#123;</span><br><span class=\"line\">  this.toast(e.message)</span><br><span class=\"line\">&#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">  this.indicator.hide()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"resove-and-reject\"><a href=\"#resove-and-reject\" class=\"headerlink\" title=\"resove and reject\"></a>resove and reject</h4><p>使用 <code>es6</code> 回调函数的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  if (/* 如果异步操作成功 */) &#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">      reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，调用promise 构造函数创建了一个 promise 对象, 这个构造函数接收一个函数作为参数, 在函数中存在两个参数 <code>resolve</code> 和 <code>reject</code> , 这两个参数是两个函数, 用来执行回调的作用</p>\n<blockquote>\n<p>resolve<br>resove 是作为异步回调成功之后需要执行的函数<br>reject<br>reject 是作为异步回调失败之后需要进行执行的函数</p>\n<p>在 promise 的对象中, 可以通过进行判断来选择执行 resolve 或者 reject 函数  </p>\n</blockquote>\n<p>使用 <code>promise</code> 进行 <code>ajax</code> 请求的函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* @description promise 的 ajax 请求</span><br><span class=\"line\">* @param url &#123;String&#125; ajax 请求的地址</span><br><span class=\"line\">* @param method &#123;String&#125; ajax 请求的方法 &apos;get&apos; or &apos;method&apos;</span><br><span class=\"line\">* @return promise 新的 promise 请求对象</span><br><span class=\"line\">**/</span><br><span class=\"line\">let ajax = function (url, method) &#123;</span><br><span class=\"line\">  let promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    let xhr = new XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(method, url);</span><br><span class=\"line\">    xhr.onreadystatechange = handler;</span><br><span class=\"line\">    xhr.responseType = &apos;json&apos;;</span><br><span class=\"line\">    xhr.setRequestHeader(&apos;Accept&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    function handler() &#123;</span><br><span class=\"line\">      if (this.readystate !== 4) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (this.status === 200) &#123;</span><br><span class=\"line\">        resolve(this.response);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        reject(new Error(this.statuText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax(url, &apos;get&apos;).then((json) =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;请求成功之后返回的数据&apos;, json);</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  console.error(&apos;出现的错误&apos; + error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-then\"><a href=\"#promise-then\" class=\"headerlink\" title=\"promise.then()\"></a>promise.then()</h4><p>在创建完成 promise 实例之后, 可以调用 promise.then() 中指定具体的回调成功或者失败的具体函数</p>\n<blockquote>\n<p>promise.then() 用于接收两个回调函数作为参数, 第一个回调函数是当 Promise 对象状态变为 resolve 的时候执行的函数,表示上面的 resolve 函数, 第二个回调函数是当 Promise 对象状态变为reject 的时候执行的函数, 也就是表示上面的 reject 函数,这两个函数都可以接收 promise 传入的值作为函数参数</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(function(value) &#123;</span><br><span class=\"line\">  // when promise success do something</span><br><span class=\"line\">&#125;, function(error) &#123;</span><br><span class=\"line\">  // when promise failed do something</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-all\"><a href=\"#promise-all\" class=\"headerlink\" title=\"promise.all()\"></a>promise.all()</h4><p>使用 promise.all() 方法用于将多个 <code>promise</code> 实例, 包装为一个 <code>promise</code> 实例</p>\n<p><code>Promise.all([promise1, promise2, promise3])</code></p>\n<p>使用 <code>Promise.all</code> 接收的是一个数组作为参数， 其中 <code>promise1</code> <code>promise2</code> <code>promise3</code> 分别是 <code>Promise</code> 的实例</p>\n<p>关于使用 <code>Promise.all</code> 的状态:</p>\n<ol>\n<li>只有 <code>promise1 promise2 promise3</code> 的状态都变成了 <code>fullfilled</code> 的状态,  <code>Promise.all</code> 的状态才会变成 <code>fullfilled</code> 并且三个 <code>promise</code> 的返回值组成一个数组, 传递给 <code>Promise.all</code> 的回调函数。 </li>\n<li>当三个 <code>promise</code> 中存在一个为 <code>reject</code> 的时候, <code>Promise.all</code> 的状态就会变成 <code>reject</code> , 这个时候 ,  被  <code>reject</code>    实例 的返回值被传递给<code>Promise.all</code> 的回调函数.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const firstNamePromise = namePromise.then(getFirstName);</span><br><span class=\"line\">const lastNamePromise = namePromise.then(getLastName);</span><br><span class=\"line\">Promise.all([firstNamePromise, lastNamePromise]).then(([firstName, lastName]) =&gt; nextAction(firstName, lastName));</span><br></pre></td></tr></table></figure>\n<p>注意: 上面使用到了对于对象的解构赋值操作, 在上面的函数中 </p>\n<p>firstNamePromise 的返回值被赋给 firstName,  lastNamePromise 的返回值被赋给 lastName</p>\n<p>++++</p>\n<p>对于对象的解构赋值而言,我们可以这样赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 2;</span><br><span class=\"line\">let b = 3;</span><br><span class=\"line\">// 这样</span><br><span class=\"line\">let [a, b] = [2, 3];</span><br></pre></td></tr></table></figure>\n<p>++++</p>\n<h4 id=\"promise-race\"><a href=\"#promise-race\" class=\"headerlink\" title=\"promise .race()\"></a>promise .race()</h4><p>使用 <code>promise.race()</code> 类似于 <code>promise.all</code> 方法, 将多个 <code>promise</code> 实例包装为一个 <code>promise</code> 方法</p>\n<p><code>let p = promise.race([p1, p2, p3])</code>  </p>\n<p>只要上面的 <code>p1, p2, p3</code> 中有一个的实例率先发生变化, 那么 <code>p</code> 的状态就会发生变化, 率先发生变化的返回值就会传递给 <code>p</code> 函数。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><h5 id=\"promise-finally\"><a href=\"#promise-finally\" class=\"headerlink\" title=\"promise.finally\"></a><code>promise.finally</code></h5><p>使用 <code>promise.finally</code> 的方法的作用在于: 不管 <code>promise</code> 的最后的状态是什么, 使用 <code>promise.finally</code> 内的回调函数始终会被执行;</p>\n<p>例如: 请求之前的指示器打开或者关闭：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.indicator.show();</span><br><span class=\"line\">let promise = new Promise();</span><br><span class=\"line\">promise.then(</span><br><span class=\"line\">// callback success fn</span><br><span class=\"line\">).catch(e =&gt; &#123;</span><br><span class=\"line\">  this.toast(e.message)</span><br><span class=\"line\">&#125;).finally(() =&gt; &#123;</span><br><span class=\"line\">  this.indicator.hide()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue.js学习（一）","date":"2017-09-09T03:32:30.000Z","_content":"\n### Vue的响应原理\n\n![](https://cn.vuejs.org/images/data.png)\n\n上面这张图表示的就是 vue 的响应原理:\n\n当我们将数据添加入 vue 实例中的 `data` 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 `Object.defineProperty` 方法将属性记录为依赖。当数据发生改变的时候,就会调用 `object.defineProperty` 中的 `setter` 方法,\n\n在组件实例中存在一个 `watcher` 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 `setter` 被调用的时候，会通知`watcher` 对象进行重新渲染组件\n\n### Object.defineProperty\n\n```\nObject.defineProperty(Object, property, {\n  get () {\n  \t// 读取对象Object 的属性 property 的时候调用的函数\n  },\n  set (newVal) {\n   // 设置对象 Object 的属性 property 的时候调用的函数\n  }\n})\n```\n\n通过使用这种方法，调用 `getter` 和 `setter` 可以实现追踪对象属性的变化  \n\n### `vue.js` 中的 生命周期\n\n在 `vue.js` 中\n\n","source":"_posts/Vue响应原理.md","raw":"---\ntitle: Vue.js学习（一）\ndate: 2017-09-09 11:32:30\ntags: vue 响应原理\ncategories: Vue\n---\n\n### Vue的响应原理\n\n![](https://cn.vuejs.org/images/data.png)\n\n上面这张图表示的就是 vue 的响应原理:\n\n当我们将数据添加入 vue 实例中的 `data` 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 `Object.defineProperty` 方法将属性记录为依赖。当数据发生改变的时候,就会调用 `object.defineProperty` 中的 `setter` 方法,\n\n在组件实例中存在一个 `watcher` 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 `setter` 被调用的时候，会通知`watcher` 对象进行重新渲染组件\n\n### Object.defineProperty\n\n```\nObject.defineProperty(Object, property, {\n  get () {\n  \t// 读取对象Object 的属性 property 的时候调用的函数\n  },\n  set (newVal) {\n   // 设置对象 Object 的属性 property 的时候调用的函数\n  }\n})\n```\n\n通过使用这种方法，调用 `getter` 和 `setter` 可以实现追踪对象属性的变化  \n\n### `vue.js` 中的 生命周期\n\n在 `vue.js` 中\n\n","slug":"Vue响应原理","published":1,"updated":"2018-05-20T08:20:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7i000xs33g8fap6o25","content":"<h3 id=\"Vue的响应原理\"><a href=\"#Vue的响应原理\" class=\"headerlink\" title=\"Vue的响应原理\"></a>Vue的响应原理</h3><p><img src=\"https://cn.vuejs.org/images/data.png\" alt=\"\"></p>\n<p>上面这张图表示的就是 vue 的响应原理:</p>\n<p>当我们将数据添加入 vue 实例中的 <code>data</code> 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 <code>Object.defineProperty</code> 方法将属性记录为依赖。当数据发生改变的时候,就会调用 <code>object.defineProperty</code> 中的 <code>setter</code> 方法,</p>\n<p>在组件实例中存在一个 <code>watcher</code> 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 <code>setter</code> 被调用的时候，会通知<code>watcher</code> 对象进行重新渲染组件</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(Object, property, &#123;</span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">  \t// 读取对象Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (newVal) &#123;</span><br><span class=\"line\">   // 设置对象 Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过使用这种方法，调用 <code>getter</code> 和 <code>setter</code> 可以实现追踪对象属性的变化  </p>\n<h3 id=\"vue-js-中的-生命周期\"><a href=\"#vue-js-中的-生命周期\" class=\"headerlink\" title=\"vue.js 中的 生命周期\"></a><code>vue.js</code> 中的 生命周期</h3><p>在 <code>vue.js</code> 中</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Vue的响应原理\"><a href=\"#Vue的响应原理\" class=\"headerlink\" title=\"Vue的响应原理\"></a>Vue的响应原理</h3><p><img src=\"https://cn.vuejs.org/images/data.png\" alt=\"\"></p>\n<p>上面这张图表示的就是 vue 的响应原理:</p>\n<p>当我们将数据添加入 vue 实例中的 <code>data</code> 选项中的时候, vue 将遍历data 中数据的所有属性，并且调用 <code>Object.defineProperty</code> 方法将属性记录为依赖。当数据发生改变的时候,就会调用 <code>object.defineProperty</code> 中的 <code>setter</code> 方法,</p>\n<p>在组件实例中存在一个 <code>watcher</code> 对象，这个对象的目的是：当被记录的依赖被调用的时候,也就是属性的 <code>setter</code> 被调用的时候，会通知<code>watcher</code> 对象进行重新渲染组件</p>\n<h3 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(Object, property, &#123;</span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">  \t// 读取对象Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set (newVal) &#123;</span><br><span class=\"line\">   // 设置对象 Object 的属性 property 的时候调用的函数</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过使用这种方法，调用 <code>getter</code> 和 <code>setter</code> 可以实现追踪对象属性的变化  </p>\n<h3 id=\"vue-js-中的-生命周期\"><a href=\"#vue-js-中的-生命周期\" class=\"headerlink\" title=\"vue.js 中的 生命周期\"></a><code>vue.js</code> 中的 生命周期</h3><p>在 <code>vue.js</code> 中</p>\n"},{"title":"grid 布局（一）","date":"2018-08-18T15:45:07.000Z","_content":"\n`grid` 布局是一种方便的用于创建网格布局的强大工具， 使用`grid` 布局可以很方便的构建网页结构， 本篇文章主要介绍`grid` 布局的基础知识。\n\n### 基本属性\n\n使用 `grid` 布局实现一个九宫格:\n\n```html\n<div class=\"content\">\n  <div class=\"item1\"></div>\n  <div class=\"item2\"></div>\n  ...\n  <div class=\"item9\"></div>\n</div>\n```\n\n```css\n.content {\n    display: grid;\n    width: 300px;\n    height: 300px;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 100px 100px;\n}\n```\n\n实现的九宫格如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png)\n\n#### display: grid\n\n使用 `display: grid` 的目的是用于声明当前元素使用 `grid` 布局构建;\n\n常用值:\n\n* `grid`: 生成一个块状网格\n* `inline-grid`: 生成一个内联网格\n* `subgrid`: 表示当前的网格容器继承自父级元素的网格容器\n\n#### grid-template-columns,  grid-template-rows\n\n这两个属性用于在声明 `grid` 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。\n\n`grid-template-columns` : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;\n\n`grid-template-row`: 使用效果类似于 `grid-template-columns`, 是对于 `grid` 元素行的划分。比如上面的代码中表示将 `grid` 元素划分为三行， 并且三行的高度均为 `100px`;\n\n常用值:\n\n* `<track-name><track-size><track-name><track-size>...`\n\n`track-size`: 表示网格内容的宽度，可取值:\n\n* `percentage` \n* `数值`\n* `auto`: 网格宽度的剩余空间\n* `fr`: 表示等份网格容器中的可用空间\n\n`track-name`: 表示网格之间网格线的名称\n\n式例:\n\n```css\n.content {\n  grid-template-columns: [line-start] 50px [line1-start] 20% [line2-start] 1fr [line-end];\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png)\n\n**当 auto 和 `fr` 同时存在的时候， 优先级： `auto` > `fr`, 这个时候 , 声明 `auto` 的那一列宽度为 0**\n\n#### grid-template-areas\n\n使用 `grid-template-areas` 用来定义网络模板；\n\n常用值:\n\n* `grid-area-name` : 由网格项的 `grid-area` 指定的网格区域名称\n* `.` 表示一个空的网格单元\n* `none` 表示不定义网格区域\n\n例如下面实现的一个网页布局:\n\n```html\n<div class=\"content\">\n  <div class=\"header\"></div>\n  <div class=\"menu\"></div>\n  <div class=\"body\"></div>\n  <div class=\"footer\"></div>\n</div>\n```\n\n```css\n.content {\n  width: 400px;\n  height: 300px;\n  display: grid;\n  grid-template-columns: repeat(1fr);\n  grid-template-rows: repeat(1fr);\n  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的\n  grid-template-areas: \n    \"h h h h\"\n    \"m . b b\"\n    \"f f f f\";\n}\n.header {\n  grid-area: h;\n  background-color: lightcoral;\n}\n.menu {\n  grid-area: m;\n  background-color: lightblue\n}\n.body {\n  grid-area: b;\n  background-color: lightslategray\n}\n.footer {\n  grid-area: f;\n  background-color: lightseagreen;\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png)","source":"_posts/grid-布局（一）.md","raw":"---\ntitle: grid 布局（一）\ndate: 2018-08-18 23:45:07\ntags: grid 布局\ncategories: CSS\n---\n\n`grid` 布局是一种方便的用于创建网格布局的强大工具， 使用`grid` 布局可以很方便的构建网页结构， 本篇文章主要介绍`grid` 布局的基础知识。\n\n### 基本属性\n\n使用 `grid` 布局实现一个九宫格:\n\n```html\n<div class=\"content\">\n  <div class=\"item1\"></div>\n  <div class=\"item2\"></div>\n  ...\n  <div class=\"item9\"></div>\n</div>\n```\n\n```css\n.content {\n    display: grid;\n    width: 300px;\n    height: 300px;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 100px 100px;\n}\n```\n\n实现的九宫格如下所示:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png)\n\n#### display: grid\n\n使用 `display: grid` 的目的是用于声明当前元素使用 `grid` 布局构建;\n\n常用值:\n\n* `grid`: 生成一个块状网格\n* `inline-grid`: 生成一个内联网格\n* `subgrid`: 表示当前的网格容器继承自父级元素的网格容器\n\n#### grid-template-columns,  grid-template-rows\n\n这两个属性用于在声明 `grid` 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。\n\n`grid-template-columns` : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;\n\n`grid-template-row`: 使用效果类似于 `grid-template-columns`, 是对于 `grid` 元素行的划分。比如上面的代码中表示将 `grid` 元素划分为三行， 并且三行的高度均为 `100px`;\n\n常用值:\n\n* `<track-name><track-size><track-name><track-size>...`\n\n`track-size`: 表示网格内容的宽度，可取值:\n\n* `percentage` \n* `数值`\n* `auto`: 网格宽度的剩余空间\n* `fr`: 表示等份网格容器中的可用空间\n\n`track-name`: 表示网格之间网格线的名称\n\n式例:\n\n```css\n.content {\n  grid-template-columns: [line-start] 50px [line1-start] 20% [line2-start] 1fr [line-end];\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png)\n\n**当 auto 和 `fr` 同时存在的时候， 优先级： `auto` > `fr`, 这个时候 , 声明 `auto` 的那一列宽度为 0**\n\n#### grid-template-areas\n\n使用 `grid-template-areas` 用来定义网络模板；\n\n常用值:\n\n* `grid-area-name` : 由网格项的 `grid-area` 指定的网格区域名称\n* `.` 表示一个空的网格单元\n* `none` 表示不定义网格区域\n\n例如下面实现的一个网页布局:\n\n```html\n<div class=\"content\">\n  <div class=\"header\"></div>\n  <div class=\"menu\"></div>\n  <div class=\"body\"></div>\n  <div class=\"footer\"></div>\n</div>\n```\n\n```css\n.content {\n  width: 400px;\n  height: 300px;\n  display: grid;\n  grid-template-columns: repeat(1fr);\n  grid-template-rows: repeat(1fr);\n  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的\n  grid-template-areas: \n    \"h h h h\"\n    \"m . b b\"\n    \"f f f f\";\n}\n.header {\n  grid-area: h;\n  background-color: lightcoral;\n}\n.menu {\n  grid-area: m;\n  background-color: lightblue\n}\n.body {\n  grid-area: b;\n  background-color: lightslategray\n}\n.footer {\n  grid-area: f;\n  background-color: lightseagreen;\n}\n```\n\n效果如下:\n\n![](http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png)","slug":"grid-布局（一）","published":1,"updated":"2018-08-19T04:08:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7k0010s33g1e430yo0","content":"<p><code>grid</code> 布局是一种方便的用于创建网格布局的强大工具， 使用<code>grid</code> 布局可以很方便的构建网页结构， 本篇文章主要介绍<code>grid</code> 布局的基础知识。</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><p>使用 <code>grid</code> 布局实现一个九宫格:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item9\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的九宫格如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png\" alt=\"\"></p>\n<h4 id=\"display-grid\"><a href=\"#display-grid\" class=\"headerlink\" title=\"display: grid\"></a>display: grid</h4><p>使用 <code>display: grid</code> 的目的是用于声明当前元素使用 <code>grid</code> 布局构建;</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid</code>: 生成一个块状网格</li>\n<li><code>inline-grid</code>: 生成一个内联网格</li>\n<li><code>subgrid</code>: 表示当前的网格容器继承自父级元素的网格容器</li>\n</ul>\n<h4 id=\"grid-template-columns-grid-template-rows\"><a href=\"#grid-template-columns-grid-template-rows\" class=\"headerlink\" title=\"grid-template-columns,  grid-template-rows\"></a>grid-template-columns,  grid-template-rows</h4><p>这两个属性用于在声明 <code>grid</code> 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。</p>\n<p><code>grid-template-columns</code> : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;</p>\n<p><code>grid-template-row</code>: 使用效果类似于 <code>grid-template-columns</code>, 是对于 <code>grid</code> 元素行的划分。比如上面的代码中表示将 <code>grid</code> 元素划分为三行， 并且三行的高度均为 <code>100px</code>;</p>\n<p>常用值:</p>\n<ul>\n<li><code>&lt;track-name&gt;&lt;track-size&gt;&lt;track-name&gt;&lt;track-size&gt;...</code></li>\n</ul>\n<p><code>track-size</code>: 表示网格内容的宽度，可取值:</p>\n<ul>\n<li><code>percentage</code> </li>\n<li><code>数值</code></li>\n<li><code>auto</code>: 网格宽度的剩余空间</li>\n<li><code>fr</code>: 表示等份网格容器中的可用空间</li>\n</ul>\n<p><code>track-name</code>: 表示网格之间网格线的名称</p>\n<p>式例:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [line-start] <span class=\"number\">50px</span> [line1-start] <span class=\"number\">20%</span> [line2-start] <span class=\"number\">1</span>fr [line-end];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png\" alt=\"\"></p>\n<p><strong>当 auto 和 <code>fr</code> 同时存在的时候， 优先级： <code>auto</code> &gt; <code>fr</code>, 这个时候 , 声明 <code>auto</code> 的那一列宽度为 0</strong></p>\n<h4 id=\"grid-template-areas\"><a href=\"#grid-template-areas\" class=\"headerlink\" title=\"grid-template-areas\"></a>grid-template-areas</h4><p>使用 <code>grid-template-areas</code> 用来定义网络模板；</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid-area-name</code> : 由网格项的 <code>grid-area</code> 指定的网格区域名称</li>\n<li><code>.</code> 表示一个空的网格单元</li>\n<li><code>none</code> 表示不定义网格区域</li>\n</ul>\n<p>例如下面实现的一个网页布局:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(1fr);</span><br><span class=\"line\">  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的</span><br><span class=\"line\">  <span class=\"selector-tag\">grid-template-areas</span>: </span><br><span class=\"line\">    \"<span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">m</span> . <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">b</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span>\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: h;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: m;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: b;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightslategray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: f;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>grid</code> 布局是一种方便的用于创建网格布局的强大工具， 使用<code>grid</code> 布局可以很方便的构建网页结构， 本篇文章主要介绍<code>grid</code> 布局的基础知识。</p>\n<h3 id=\"基本属性\"><a href=\"#基本属性\" class=\"headerlink\" title=\"基本属性\"></a>基本属性</h3><p>使用 <code>grid</code> 布局实现一个九宫格:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item9\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">100px</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的九宫格如下所示:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%282%29.png\" alt=\"\"></p>\n<h4 id=\"display-grid\"><a href=\"#display-grid\" class=\"headerlink\" title=\"display: grid\"></a>display: grid</h4><p>使用 <code>display: grid</code> 的目的是用于声明当前元素使用 <code>grid</code> 布局构建;</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid</code>: 生成一个块状网格</li>\n<li><code>inline-grid</code>: 生成一个内联网格</li>\n<li><code>subgrid</code>: 表示当前的网格容器继承自父级元素的网格容器</li>\n</ul>\n<h4 id=\"grid-template-columns-grid-template-rows\"><a href=\"#grid-template-columns-grid-template-rows\" class=\"headerlink\" title=\"grid-template-columns,  grid-template-rows\"></a>grid-template-columns,  grid-template-rows</h4><p>这两个属性用于在声明 <code>grid</code> 的当前元素内部划分网格内容。后面的数值表明网格内容的长度大小， 数值之间的空格表示划分网格的网格线。</p>\n<p><code>grid-template-columns</code> : 用于在网格元素划分列， 后面的值表示划分列的宽度， 比如上面的九宫格代码中， 表示将当前的元素划分为 3 列， 且三列的宽度均是 100px;</p>\n<p><code>grid-template-row</code>: 使用效果类似于 <code>grid-template-columns</code>, 是对于 <code>grid</code> 元素行的划分。比如上面的代码中表示将 <code>grid</code> 元素划分为三行， 并且三行的高度均为 <code>100px</code>;</p>\n<p>常用值:</p>\n<ul>\n<li><code>&lt;track-name&gt;&lt;track-size&gt;&lt;track-name&gt;&lt;track-size&gt;...</code></li>\n</ul>\n<p><code>track-size</code>: 表示网格内容的宽度，可取值:</p>\n<ul>\n<li><code>percentage</code> </li>\n<li><code>数值</code></li>\n<li><code>auto</code>: 网格宽度的剩余空间</li>\n<li><code>fr</code>: 表示等份网格容器中的可用空间</li>\n</ul>\n<p><code>track-name</code>: 表示网格之间网格线的名称</p>\n<p>式例:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: [line-start] <span class=\"number\">50px</span> [line1-start] <span class=\"number\">20%</span> [line2-start] <span class=\"number\">1</span>fr [line-end];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%283%29.png\" alt=\"\"></p>\n<p><strong>当 auto 和 <code>fr</code> 同时存在的时候， 优先级： <code>auto</code> &gt; <code>fr</code>, 这个时候 , 声明 <code>auto</code> 的那一列宽度为 0</strong></p>\n<h4 id=\"grid-template-areas\"><a href=\"#grid-template-areas\" class=\"headerlink\" title=\"grid-template-areas\"></a>grid-template-areas</h4><p>使用 <code>grid-template-areas</code> 用来定义网络模板；</p>\n<p>常用值:</p>\n<ul>\n<li><code>grid-area-name</code> : 由网格项的 <code>grid-area</code> 指定的网格区域名称</li>\n<li><code>.</code> 表示一个空的网格单元</li>\n<li><code>none</code> 表示不定义网格区域</li>\n</ul>\n<p>例如下面实现的一个网页布局:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(1fr);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(1fr);</span><br><span class=\"line\">  // 这里的 h, m , b, f是和下面声明的 `grid-area` 是一一对应的</span><br><span class=\"line\">  <span class=\"selector-tag\">grid-template-areas</span>: </span><br><span class=\"line\">    \"<span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span> <span class=\"selector-tag\">h</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">m</span> . <span class=\"selector-tag\">b</span> <span class=\"selector-tag\">b</span>\"</span><br><span class=\"line\">    \"<span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span> <span class=\"selector-tag\">f</span>\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: h;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: m;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightblue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: b;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightslategray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">grid-area</span>: f;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightseagreen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下:</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/grid%284%29.png\" alt=\"\"></p>\n"},{"title":"es6: 对象的扩展","date":"2017-09-17T09:27:58.000Z","_content":"\n### es6 中对象扩展的用法\n\n#### 1.简洁属性名\n\n函数的属性可以是一个变量：\n\n```\n    let foo = 'good';\n    let bar = {\n        foo: foo\n    };\n    console.log(bar.foo); // 'good'\n```\n\n1. es6 中我们可以直接传入一个变量到对象中\n\n   ```\n       let foo = 'good';\n       let bar = {\n           foo\n       };\n       console.log(bar.foo); // 'good' \n       //传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值\n   ```\n\n\n2. 用在函数中返回一个对象\n\n   ```\n   function Person(name) {\n     let age = 22;\n     return {name, age};\n   }\n   person('张宁宁')// {name: '张宁宁', age: 22}\n   ```\n\n#### 2.  Object.is( ) 判断相等\n\n对于比较两个值是否相等，使用 全等 `===` 运算符进行判断, 因为使用 `==` 会自动转换数据类型\n\n使用 `===` 有缺点： NAN === NAN  flase  以及  +0 === -0 false\n\n使用 `object.is` 可以解决这个缺点\n\n```\nobject.is(1,1) // true\nobject.is(1,'1') // false\nobject.is(NaN, NaN) // true\nObject.is(+0, -0) //  true\n```\n\n***\n\n使用` ==` 或者 `===` 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址\n\n```\nobject.is({} , {}); // false\n```\n\n***\n\n#### 3. Object.assign () 合并对象\n\n```\nlet t = {};\nlet s1 = { a: 1 };\nlet s2 = { b: 2 };\nObject.assign(t, s1, s2);\n// {a: 1, b: 2}\n```\n\n上面中将对象 s1, s2,  合并入 t 中；\n\n传入值的情况:\n\n* 如果只有一个参数，使用这种方法会返回这个参数\n* 如果传入的一个参数是 Null 或者 undefined 机会报错\n* 要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效\n\n```\nObject.assign({}, 'string');\n// {0: \"s\", 1: \"t\", 2: \"r\", 3: \"i\", 4: \"n\", 5: \"g\"}\n```\n\n使用 Object.assign () 返回的是对象的形式\n\n使用 Object.assign() 实现浅拷贝\n\n#### 4. Object.keys()   Object.values()   Object.entires()\n\n1. `Object.keys() `\n\n   使用这种方法得到的是对象中所有可遍历的属性名组成的数组\n\n2. `Object.values() `\n\n   使用这种方法得到的是对象自身所有可以遍历到的属性的值\n\n3. `Object.entires()`\n\n   使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组\n\n### 应用\n\n1. 判断对象内是否是空对象的方法：\n\n   ```javascript\n   const isEmpty = obj => return Object.keys(obj) === 0;\n   ```\n\n2. 使用 `Object.assign` 实现自定义配置覆盖默认配置\n\n   ```javascript\n   function toConfig(defaultConfig, config) {\n     return Object.assign(defaultConfig, config);\n   }\n   ```\n\n   ​","source":"_posts/es6-对象的扩展.md","raw":"---\ntitle: 'es6: 对象的扩展'\ndate: 2017-09-17 17:27:58\ntags: 对象扩展\ncategories: es6\n---\n\n### es6 中对象扩展的用法\n\n#### 1.简洁属性名\n\n函数的属性可以是一个变量：\n\n```\n    let foo = 'good';\n    let bar = {\n        foo: foo\n    };\n    console.log(bar.foo); // 'good'\n```\n\n1. es6 中我们可以直接传入一个变量到对象中\n\n   ```\n       let foo = 'good';\n       let bar = {\n           foo\n       };\n       console.log(bar.foo); // 'good' \n       //传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值\n   ```\n\n\n2. 用在函数中返回一个对象\n\n   ```\n   function Person(name) {\n     let age = 22;\n     return {name, age};\n   }\n   person('张宁宁')// {name: '张宁宁', age: 22}\n   ```\n\n#### 2.  Object.is( ) 判断相等\n\n对于比较两个值是否相等，使用 全等 `===` 运算符进行判断, 因为使用 `==` 会自动转换数据类型\n\n使用 `===` 有缺点： NAN === NAN  flase  以及  +0 === -0 false\n\n使用 `object.is` 可以解决这个缺点\n\n```\nobject.is(1,1) // true\nobject.is(1,'1') // false\nobject.is(NaN, NaN) // true\nObject.is(+0, -0) //  true\n```\n\n***\n\n使用` ==` 或者 `===` 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址\n\n```\nobject.is({} , {}); // false\n```\n\n***\n\n#### 3. Object.assign () 合并对象\n\n```\nlet t = {};\nlet s1 = { a: 1 };\nlet s2 = { b: 2 };\nObject.assign(t, s1, s2);\n// {a: 1, b: 2}\n```\n\n上面中将对象 s1, s2,  合并入 t 中；\n\n传入值的情况:\n\n* 如果只有一个参数，使用这种方法会返回这个参数\n* 如果传入的一个参数是 Null 或者 undefined 机会报错\n* 要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效\n\n```\nObject.assign({}, 'string');\n// {0: \"s\", 1: \"t\", 2: \"r\", 3: \"i\", 4: \"n\", 5: \"g\"}\n```\n\n使用 Object.assign () 返回的是对象的形式\n\n使用 Object.assign() 实现浅拷贝\n\n#### 4. Object.keys()   Object.values()   Object.entires()\n\n1. `Object.keys() `\n\n   使用这种方法得到的是对象中所有可遍历的属性名组成的数组\n\n2. `Object.values() `\n\n   使用这种方法得到的是对象自身所有可以遍历到的属性的值\n\n3. `Object.entires()`\n\n   使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组\n\n### 应用\n\n1. 判断对象内是否是空对象的方法：\n\n   ```javascript\n   const isEmpty = obj => return Object.keys(obj) === 0;\n   ```\n\n2. 使用 `Object.assign` 实现自定义配置覆盖默认配置\n\n   ```javascript\n   function toConfig(defaultConfig, config) {\n     return Object.assign(defaultConfig, config);\n   }\n   ```\n\n   ​","slug":"es6-对象的扩展","published":1,"updated":"2018-06-16T14:33:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7l0013s33g23f7ug13","content":"<h3 id=\"es6-中对象扩展的用法\"><a href=\"#es6-中对象扩展的用法\" class=\"headerlink\" title=\"es6 中对象扩展的用法\"></a>es6 中对象扩展的用法</h3><h4 id=\"1-简洁属性名\"><a href=\"#1-简洁属性名\" class=\"headerlink\" title=\"1.简洁属性名\"></a>1.简洁属性名</h4><p>函数的属性可以是一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>es6 中我们可以直接传入一个变量到对象中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos; </span><br><span class=\"line\">//传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在函数中返回一个对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  let age = 22;</span><br><span class=\"line\">  return &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(&apos;张宁宁&apos;)// &#123;name: &apos;张宁宁&apos;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-Object-is-判断相等\"><a href=\"#2-Object-is-判断相等\" class=\"headerlink\" title=\"2.  Object.is( ) 判断相等\"></a>2.  Object.is( ) 判断相等</h4><p>对于比较两个值是否相等，使用 全等 <code>===</code> 运算符进行判断, 因为使用 <code>==</code> 会自动转换数据类型</p>\n<p>使用 <code>===</code> 有缺点： NAN === NAN  flase  以及  +0 === -0 false</p>\n<p>使用 <code>object.is</code> 可以解决这个缺点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(1,1) // true</span><br><span class=\"line\">object.is(1,&apos;1&apos;) // false</span><br><span class=\"line\">object.is(NaN, NaN) // true</span><br><span class=\"line\">Object.is(+0, -0) //  true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用<code>==</code> 或者 <code>===</code> 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(&#123;&#125; , &#123;&#125;); // false</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-Object-assign-合并对象\"><a href=\"#3-Object-assign-合并对象\" class=\"headerlink\" title=\"3. Object.assign () 合并对象\"></a>3. Object.assign () 合并对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let t = &#123;&#125;;</span><br><span class=\"line\">let s1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">let s2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">Object.assign(t, s1, s2);</span><br><span class=\"line\">// &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中将对象 s1, s2,  合并入 t 中；</p>\n<p>传入值的情况:</p>\n<ul>\n<li>如果只有一个参数，使用这种方法会返回这个参数</li>\n<li>如果传入的一个参数是 Null 或者 undefined 机会报错</li>\n<li>要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;, &apos;string&apos;);</span><br><span class=\"line\">// &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Object.assign () 返回的是对象的形式</p>\n<p>使用 Object.assign() 实现浅拷贝</p>\n<h4 id=\"4-Object-keys-Object-values-Object-entires\"><a href=\"#4-Object-keys-Object-values-Object-entires\" class=\"headerlink\" title=\"4. Object.keys()   Object.values()   Object.entires()\"></a>4. Object.keys()   Object.values()   Object.entires()</h4><ol>\n<li><p><code>Object.keys()</code></p>\n<p>使用这种方法得到的是对象中所有可遍历的属性名组成的数组</p>\n</li>\n<li><p><code>Object.values()</code></p>\n<p>使用这种方法得到的是对象自身所有可以遍历到的属性的值</p>\n</li>\n<li><p><code>Object.entires()</code></p>\n<p>使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ol>\n<li><p>判断对象内是否是空对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEmpty = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj) === <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.assign</code> 实现自定义配置覆盖默认配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConfig</span>(<span class=\"params\">defaultConfig, config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(defaultConfig, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"es6-中对象扩展的用法\"><a href=\"#es6-中对象扩展的用法\" class=\"headerlink\" title=\"es6 中对象扩展的用法\"></a>es6 中对象扩展的用法</h3><h4 id=\"1-简洁属性名\"><a href=\"#1-简洁属性名\" class=\"headerlink\" title=\"1.简洁属性名\"></a>1.简洁属性名</h4><p>函数的属性可以是一个变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>es6 中我们可以直接传入一个变量到对象中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let foo = &apos;good&apos;;</span><br><span class=\"line\">let bar = &#123;</span><br><span class=\"line\">    foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(bar.foo); // &apos;good&apos; </span><br><span class=\"line\">//传入的变量名会被作为对象的属性名，变量的值会被作为对象属性的值</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在函数中返回一个对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  let age = 22;</span><br><span class=\"line\">  return &#123;name, age&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person(&apos;张宁宁&apos;)// &#123;name: &apos;张宁宁&apos;, age: 22&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-Object-is-判断相等\"><a href=\"#2-Object-is-判断相等\" class=\"headerlink\" title=\"2.  Object.is( ) 判断相等\"></a>2.  Object.is( ) 判断相等</h4><p>对于比较两个值是否相等，使用 全等 <code>===</code> 运算符进行判断, 因为使用 <code>==</code> 会自动转换数据类型</p>\n<p>使用 <code>===</code> 有缺点： NAN === NAN  flase  以及  +0 === -0 false</p>\n<p>使用 <code>object.is</code> 可以解决这个缺点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(1,1) // true</span><br><span class=\"line\">object.is(1,&apos;1&apos;) // false</span><br><span class=\"line\">object.is(NaN, NaN) // true</span><br><span class=\"line\">Object.is(+0, -0) //  true</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用<code>==</code> 或者 <code>===</code> 进行相等比较的时候，实际上，是无法进行比较对象的，因为对象是一个指针，指向存储对象数据的内存地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.is(&#123;&#125; , &#123;&#125;); // false</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"3-Object-assign-合并对象\"><a href=\"#3-Object-assign-合并对象\" class=\"headerlink\" title=\"3. Object.assign () 合并对象\"></a>3. Object.assign () 合并对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let t = &#123;&#125;;</span><br><span class=\"line\">let s1 = &#123; a: 1 &#125;;</span><br><span class=\"line\">let s2 = &#123; b: 2 &#125;;</span><br><span class=\"line\">Object.assign(t, s1, s2);</span><br><span class=\"line\">// &#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中将对象 s1, s2,  合并入 t 中；</p>\n<p>传入值的情况:</p>\n<ul>\n<li>如果只有一个参数，使用这种方法会返回这个参数</li>\n<li>如果传入的一个参数是 Null 或者 undefined 机会报错</li>\n<li>要进行合并的参数是字符串的情况下，会返回该字符串的对象,传入非对象，非字符串的其他值，无效</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(&#123;&#125;, &apos;string&apos;);</span><br><span class=\"line\">// &#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;, 3: &quot;i&quot;, 4: &quot;n&quot;, 5: &quot;g&quot;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 Object.assign () 返回的是对象的形式</p>\n<p>使用 Object.assign() 实现浅拷贝</p>\n<h4 id=\"4-Object-keys-Object-values-Object-entires\"><a href=\"#4-Object-keys-Object-values-Object-entires\" class=\"headerlink\" title=\"4. Object.keys()   Object.values()   Object.entires()\"></a>4. Object.keys()   Object.values()   Object.entires()</h4><ol>\n<li><p><code>Object.keys()</code></p>\n<p>使用这种方法得到的是对象中所有可遍历的属性名组成的数组</p>\n</li>\n<li><p><code>Object.values()</code></p>\n<p>使用这种方法得到的是对象自身所有可以遍历到的属性的值</p>\n</li>\n<li><p><code>Object.entires()</code></p>\n<p>使用这种方法得到的数组，数组中包括对象自身所有可遍历得到的属性的键值对儿数组</p>\n</li>\n</ol>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ol>\n<li><p>判断对象内是否是空对象的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEmpty = <span class=\"function\"><span class=\"params\">obj</span> =&gt;</span> <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj) === <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.assign</code> 实现自定义配置覆盖默认配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toConfig</span>(<span class=\"params\">defaultConfig, config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(defaultConfig, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"js 中数据结构的实现","date":"2018-01-13T13:48:58.000Z","_content":"\n对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。\n\n#### 单链表的实现\n\n实现单向链式列表的代码如下:\n\n```javascript\nfunction LinkedList() {\n  // 对于链表中的元素包含有 element 以及 next\n  // element 表示数据\n  // next 表示指向下一个的指针\n  let Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n  let length = 0, head = null;\n  // append 添加元素\n  this.append = function (element) {\n    let node = new Node(element), current;\n    if (!head) {\n      head = node;\n    } else {\n      current = node;\n      // 使用 while 进行循环操作\n      // 一直进行循环, current = current.next;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    length++;\n    return current;\n  };\n  // this.insert 用于插入节点\n  this.insert = function (position, element) {\n    if (position > 0 && position <= length) {\n      let node = new Node(element), currrent = head, previous, index = 0;\n      if (position === 0) {\n        node.next = current;\n        head = node;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        node.next = current;\n        previous.next = node;\n      };\n      length++;\n      return true;\n    } else {\n      return null;\n    }\n  };\n  // 删除某一个位置处的元素\n  this.removeAt = function (position) {\n    if (position > -1 && position < length) {\n      let current = head, previous, index = 0;\n      if (position === 0) {\n        head = currrent.next;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        // 在删除了某一个元素之后\n        // previous.next 指向 current.next\n        previous.next = current.next;\n      };\n      length--;\n      return current.element;\n    } else {\n      return null;\n    }\n  };\n  // 移除某一个节点\n  this.remove = function (element) {\n    let current = head, previous;\n    if (element === current.element) {\n      head = current.next;\n      length--;\n      return true;\n    }\n    previous = current;\n    current = current.next;\n    while(currrent) {\n      if (element === current.element) {\n        previous.next = current.next;\n        length--;\n        return true;\n      } else {\n       // 继续轮询下一个元素\n        previous = current;\n        current = current.next;\n      }\n    }\n    return false;\n  };\n  // this.remove 用于删除最后一个节点\n  this.remove = function () {\n    if (length < 1) {\n      return false;\n    }\n    let current = head, previous;\n    if (length === 1) {\n      head = null;\n      length--;\n      return current.length;\n    }\n    while(current.next !== null) {\n      previous = current;\n      current.current.next;\n    }\n    previous.next = null;\n    length--;\n    return current.element;\n  };\n  // indexOf 获取到索引值\n  this.indexOf = function (element) {\n    let current = head, index = 0;\n    while(current) {\n      if (element === current.element) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return false;\n  };\n  this.isEmpty = function () {\n    return length === 0;\n  };\n  this.size = function () {\n    return length;\n  };\n  this.toString = function () {\n    let current = head, str = '';\n    while(current) {\n      str+= current.element;\n      currrent = current.next;\n    }\n    return str;\n  }\n  this.getHead = function () {\n    return head;\n  }\n}\n```\n\n对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  \n\n对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中.....，如果要查找到这个元素，要使用下面的算法:\n\n1. 声明节点指向链表的第一个节点， 初始化 j 从 1 开始。\n2. 当 j < i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;\n3. 如果链表末尾为空， 那么说明第 i 个元素不存在。\n4. 如果查找成功的话，返回查找到的数据。\n\n对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:\n\n```javascript\nthis.getEle = function (elementIndex) {\n  let current = head, index = 0;\n  if (elementIndex > 0 && elementIndex <= length) {\n    // while 内嵌 current = current.next 方法， 从头开始查询\n    while(current) {\n      if (index === elementIndex) {\n        return current.element;\n      }\n      index++;\n      current = current.next;\n    }\n  } else {\n    return null;\n  }\n}\n```\n\n> 链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的\n\n实现一个对象链表的实现；\n\n```javascript\nfunction linkTable(array) {\n\tlet linkArray = [];\n\tconst getLinks = (now, index, arr) => {\n\t\tconst len = arr.length;\n\t\tlet pre = 0;\n        let next = 0;\n        pre = index - 1;\n        next = index + 1;\n        if (index === 0) {\n        \tpre = len - 1;\n        }\n        if (index === len - 1) {\n        \tnext = 0;\n        }\n        linkArray.push({\n            pre: arr[pre],\n            current: now,\n            next: arr[next]\n        });\n\t};\n\t\tarray.forEach((now, index, arr) => getLinks(now, index, arr));\n}\n```\n\n","source":"_posts/js-中数据结构的实现.md","raw":"---\ntitle: js 中数据结构的实现\ndate: 2018-01-13 21:48:58\ntags: js 链表\ncategories: 数据结构\n---\n\n对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。\n\n#### 单链表的实现\n\n实现单向链式列表的代码如下:\n\n```javascript\nfunction LinkedList() {\n  // 对于链表中的元素包含有 element 以及 next\n  // element 表示数据\n  // next 表示指向下一个的指针\n  let Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n  let length = 0, head = null;\n  // append 添加元素\n  this.append = function (element) {\n    let node = new Node(element), current;\n    if (!head) {\n      head = node;\n    } else {\n      current = node;\n      // 使用 while 进行循环操作\n      // 一直进行循环, current = current.next;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    length++;\n    return current;\n  };\n  // this.insert 用于插入节点\n  this.insert = function (position, element) {\n    if (position > 0 && position <= length) {\n      let node = new Node(element), currrent = head, previous, index = 0;\n      if (position === 0) {\n        node.next = current;\n        head = node;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        node.next = current;\n        previous.next = node;\n      };\n      length++;\n      return true;\n    } else {\n      return null;\n    }\n  };\n  // 删除某一个位置处的元素\n  this.removeAt = function (position) {\n    if (position > -1 && position < length) {\n      let current = head, previous, index = 0;\n      if (position === 0) {\n        head = currrent.next;\n      } else {\n        while (index++ < position) {\n          previous = current;\n          current = current.next;\n        }\n        // 在删除了某一个元素之后\n        // previous.next 指向 current.next\n        previous.next = current.next;\n      };\n      length--;\n      return current.element;\n    } else {\n      return null;\n    }\n  };\n  // 移除某一个节点\n  this.remove = function (element) {\n    let current = head, previous;\n    if (element === current.element) {\n      head = current.next;\n      length--;\n      return true;\n    }\n    previous = current;\n    current = current.next;\n    while(currrent) {\n      if (element === current.element) {\n        previous.next = current.next;\n        length--;\n        return true;\n      } else {\n       // 继续轮询下一个元素\n        previous = current;\n        current = current.next;\n      }\n    }\n    return false;\n  };\n  // this.remove 用于删除最后一个节点\n  this.remove = function () {\n    if (length < 1) {\n      return false;\n    }\n    let current = head, previous;\n    if (length === 1) {\n      head = null;\n      length--;\n      return current.length;\n    }\n    while(current.next !== null) {\n      previous = current;\n      current.current.next;\n    }\n    previous.next = null;\n    length--;\n    return current.element;\n  };\n  // indexOf 获取到索引值\n  this.indexOf = function (element) {\n    let current = head, index = 0;\n    while(current) {\n      if (element === current.element) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return false;\n  };\n  this.isEmpty = function () {\n    return length === 0;\n  };\n  this.size = function () {\n    return length;\n  };\n  this.toString = function () {\n    let current = head, str = '';\n    while(current) {\n      str+= current.element;\n      currrent = current.next;\n    }\n    return str;\n  }\n  this.getHead = function () {\n    return head;\n  }\n}\n```\n\n对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  \n\n对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中.....，如果要查找到这个元素，要使用下面的算法:\n\n1. 声明节点指向链表的第一个节点， 初始化 j 从 1 开始。\n2. 当 j < i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;\n3. 如果链表末尾为空， 那么说明第 i 个元素不存在。\n4. 如果查找成功的话，返回查找到的数据。\n\n对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:\n\n```javascript\nthis.getEle = function (elementIndex) {\n  let current = head, index = 0;\n  if (elementIndex > 0 && elementIndex <= length) {\n    // while 内嵌 current = current.next 方法， 从头开始查询\n    while(current) {\n      if (index === elementIndex) {\n        return current.element;\n      }\n      index++;\n      current = current.next;\n    }\n  } else {\n    return null;\n  }\n}\n```\n\n> 链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的\n\n实现一个对象链表的实现；\n\n```javascript\nfunction linkTable(array) {\n\tlet linkArray = [];\n\tconst getLinks = (now, index, arr) => {\n\t\tconst len = arr.length;\n\t\tlet pre = 0;\n        let next = 0;\n        pre = index - 1;\n        next = index + 1;\n        if (index === 0) {\n        \tpre = len - 1;\n        }\n        if (index === len - 1) {\n        \tnext = 0;\n        }\n        linkArray.push({\n            pre: arr[pre],\n            current: now,\n            next: arr[next]\n        });\n\t};\n\t\tarray.forEach((now, index, arr) => getLinks(now, index, arr));\n}\n```\n\n","slug":"js-中数据结构的实现","published":1,"updated":"2018-03-21T16:28:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7n0016s33gt6afujfk","content":"<p>对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。</p>\n<h4 id=\"单链表的实现\"><a href=\"#单链表的实现\" class=\"headerlink\" title=\"单链表的实现\"></a>单链表的实现</h4><p>实现单向链式列表的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于链表中的元素包含有 element 以及 next</span></span><br><span class=\"line\">  <span class=\"comment\">// element 表示数据</span></span><br><span class=\"line\">  <span class=\"comment\">// next 表示指向下一个的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> Node = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">0</span>, head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// append 添加元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), current;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = node;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 while 进行循环操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 一直进行循环, current = current.next;</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      current.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.insert 用于插入节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), currrent = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        head = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current;</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">      length++;</span></span><br><span class=\"line\"><span class=\"xml\">      return true;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // 删除某一个位置处的元素</span></span><br><span class=\"line\"><span class=\"xml\">  this.removeAt = function (position) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    if (position &gt; -1 &amp;&amp; position <span class=\"tag\">&lt; <span class=\"attr\">length</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      let current = head, previous, index = 0;</span></span><br><span class=\"line\"><span class=\"xml\">      if (position === 0) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        head = currrent.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        while (index++ <span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        // 在删除了某一个元素之后</span></span><br><span class=\"line\"><span class=\"xml\">        // previous.next 指向 current.next</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return current.element;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // 移除某一个节点</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function (element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, previous;</span></span><br><span class=\"line\"><span class=\"xml\">    if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      head = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return true;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">    current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    while(currrent) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        length--;</span></span><br><span class=\"line\"><span class=\"xml\">        return true;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">       // 继续轮询下一个元素</span></span><br><span class=\"line\"><span class=\"xml\">        previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">        current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return false;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // this.remove 用于删除最后一个节点</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    if (length <span class=\"tag\">&lt; <span class=\"attr\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      return false;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, previous;</span></span><br><span class=\"line\"><span class=\"xml\">    if (length === 1) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      head = null;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return current.length;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    while(current.next !== null) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">      current.current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    previous.next = null;</span></span><br><span class=\"line\"><span class=\"xml\">    length--;</span></span><br><span class=\"line\"><span class=\"xml\">    return current.element;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // indexOf 获取到索引值</span></span><br><span class=\"line\"><span class=\"xml\">  this.indexOf = function (element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, index = 0;</span></span><br><span class=\"line\"><span class=\"xml\">    while(current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return index;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      index++;</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return false;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.isEmpty = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length === 0;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.size = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.toString = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, str = '';</span></span><br><span class=\"line\"><span class=\"xml\">    while(current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      str+= current.element;</span></span><br><span class=\"line\"><span class=\"xml\">      currrent = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return str;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.getHead = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return head;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  </p>\n<p>对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中…..，如果要查找到这个元素，要使用下面的算法:</p>\n<ol>\n<li>声明节点指向链表的第一个节点， 初始化 j 从 1 开始。</li>\n<li>当 j &lt; i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;</li>\n<li>如果链表末尾为空， 那么说明第 i 个元素不存在。</li>\n<li>如果查找成功的话，返回查找到的数据。</li>\n</ol>\n<p>对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getEle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elementIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementIndex &gt; <span class=\"number\">0</span> &amp;&amp; elementIndex &lt;= length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// while 内嵌 current = current.next 方法， 从头开始查询</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === elementIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的</p>\n</blockquote>\n<p>实现一个对象链表的实现；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkTable</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> linkArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> getLinks = <span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pre = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        next = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \tpre = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \tnext = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        linkArray.push(&#123;</span><br><span class=\"line\">            pre: arr[pre],</span><br><span class=\"line\">            current: now,</span><br><span class=\"line\">            next: arr[next]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t\tarray.forEach(<span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> getLinks(now, index, arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>对于线性表而言， 使用链式的存储结构可以提高相对于使用线性表添加和删除节点的操作效率。  对于链表中的每一个元素，除了需要存储其本身的信息之外，还需要存储一个显示后面元素位置的信息。</p>\n<h4 id=\"单链表的实现\"><a href=\"#单链表的实现\" class=\"headerlink\" title=\"单链表的实现\"></a>单链表的实现</h4><p>实现单向链式列表的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LinkedList</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于链表中的元素包含有 element 以及 next</span></span><br><span class=\"line\">  <span class=\"comment\">// element 表示数据</span></span><br><span class=\"line\">  <span class=\"comment\">// next 表示指向下一个的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> Node = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">0</span>, head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// append 添加元素</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.append = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), current;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">      head = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      current = node;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 while 进行循环操作</span></span><br><span class=\"line\">      <span class=\"comment\">// 一直进行循环, current = current.next;</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current.next) &#123;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      current.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// this.insert 用于插入节点</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insert = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> Node(element), currrent = head, previous, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        node.next = current;</span><br><span class=\"line\">        head = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        node.next = current;</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = node;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">      length++;</span></span><br><span class=\"line\"><span class=\"xml\">      return true;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // 删除某一个位置处的元素</span></span><br><span class=\"line\"><span class=\"xml\">  this.removeAt = function (position) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    if (position &gt; -1 &amp;&amp; position <span class=\"tag\">&lt; <span class=\"attr\">length</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      let current = head, previous, index = 0;</span></span><br><span class=\"line\"><span class=\"xml\">      if (position === 0) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        head = currrent.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        while (index++ <span class=\"tag\">&lt; <span class=\"attr\">position</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">          previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">          current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        // 在删除了某一个元素之后</span></span><br><span class=\"line\"><span class=\"xml\">        // previous.next 指向 current.next</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return current.element;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      return null;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // 移除某一个节点</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function (element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, previous;</span></span><br><span class=\"line\"><span class=\"xml\">    if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      head = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return true;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">    current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    while(currrent) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        previous.next = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">        length--;</span></span><br><span class=\"line\"><span class=\"xml\">        return true;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"xml\">       // 继续轮询下一个元素</span></span><br><span class=\"line\"><span class=\"xml\">        previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">        current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return false;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // this.remove 用于删除最后一个节点</span></span><br><span class=\"line\"><span class=\"xml\">  this.remove = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    if (length <span class=\"tag\">&lt; <span class=\"attr\">1</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      return false;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, previous;</span></span><br><span class=\"line\"><span class=\"xml\">    if (length === 1) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      head = null;</span></span><br><span class=\"line\"><span class=\"xml\">      length--;</span></span><br><span class=\"line\"><span class=\"xml\">      return current.length;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    while(current.next !== null) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      previous = current;</span></span><br><span class=\"line\"><span class=\"xml\">      current.current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    previous.next = null;</span></span><br><span class=\"line\"><span class=\"xml\">    length--;</span></span><br><span class=\"line\"><span class=\"xml\">    return current.element;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  // indexOf 获取到索引值</span></span><br><span class=\"line\"><span class=\"xml\">  this.indexOf = function (element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, index = 0;</span></span><br><span class=\"line\"><span class=\"xml\">    while(current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      if (element === current.element) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        return index;</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;</span></span><br><span class=\"line\"><span class=\"xml\">      index++;</span></span><br><span class=\"line\"><span class=\"xml\">      current = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return false;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.isEmpty = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length === 0;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.size = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return length;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;;</span></span><br><span class=\"line\"><span class=\"xml\">  this.toString = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    let current = head, str = '';</span></span><br><span class=\"line\"><span class=\"xml\">    while(current) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      str+= current.element;</span></span><br><span class=\"line\"><span class=\"xml\">      currrent = current.next;</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return str;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  this.getHead = function () &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return head;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于线性表的链式存储结构而言，链表中每一个节点包含数据域与指针域，相对于使用线性表的顺序存储结构而言， 在链表中数据的存储是没有特定的顺序的，在链表中， 节点之间的关系是通过其本身存储的指针来进行体现的。 指针表示的是线性表中的数据元素与数据元素之间的关系。  </p>\n<p>对于链表而言，我们想要获取到第 i 个元素的值比较麻烦的， 因为对于第 i 个元素  a ~i~ 的存储地址放在了链表中上一个节点中的指针域中，同理， 这个节点的存储地址有被放在了上上一个节点中的指针域中…..，如果要查找到这个元素，要使用下面的算法:</p>\n<ol>\n<li>声明节点指向链表的第一个节点， 初始化 j 从 1 开始。</li>\n<li>当 j &lt; i 的时候，遍历链表， 使 p 的指针向后移动， 不断指向下一个节点， j 累加 1;</li>\n<li>如果链表末尾为空， 那么说明第 i 个元素不存在。</li>\n<li>如果查找成功的话，返回查找到的数据。</li>\n</ol>\n<p>对于上面的单链表程序而言， 我们可以添加一个获得相关位置的元素的方法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getEle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elementIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = head, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (elementIndex &gt; <span class=\"number\">0</span> &amp;&amp; elementIndex &lt;= length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// while 内嵌 current = current.next 方法， 从头开始查询</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === elementIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current.element;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>链表的使用相对于使用线表而言, 对于链表之间的数据关系是通过使用指针进行体现的</p>\n</blockquote>\n<p>实现一个对象链表的实现；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">linkTable</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> linkArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> getLinks = <span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> pre = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        pre = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        next = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \tpre = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \tnext = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        linkArray.push(&#123;</span><br><span class=\"line\">            pre: arr[pre],</span><br><span class=\"line\">            current: now,</span><br><span class=\"line\">            next: arr[next]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t\tarray.forEach(<span class=\"function\">(<span class=\"params\">now, index, arr</span>) =&gt;</span> getLinks(now, index, arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js 文件上传与下载","date":"2018-10-30T16:04:40.000Z","_content":"\n前端实现的文件上传与下载操作：\n\n## 上传\n\n在上传文件的操作中， 可以使用  `formData` 或者 `fileReader` 进行上传操作， 使用 `fileReader` 可以在本地将上传的文件转为二进制的数据格式； `formData` 是在 `XMLHttpRequest` 中的接口，可以用来实现模拟的表单提交， 当前端通过 `ajax` 向后端传递文件的时候， 使用 `ajax` 提交 `formData` 可以实现异步上传二进制文件\n\n```react\n<input type=\"file\" onClick={ this.uploadFile.bind(this) } />\n```\n\n对于上传文件，可以通过两种方式进行上传，通过 `filereader` 或者通过 `formData` 都可以实现上传文件\n\n### FileReader:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.files[0]; // 获取到文件对象\n    const reader = new FileReader(); // 创建 fileReader 的实例\n    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer \n    reader.onload = function () { // 当文件加载成功的时候调用\n        console.log(\"result\", reader.result);\n    }\n}\n```\n\n在 MDN 上面， 对于  FileReader 的描述如下:\n\n```\nFileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n其中File对象可以是来自用户在一个<input>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。  \n```\n\n使用 `fileReader` 接受的参数可以是一个 `File` 对象或者 `Blob` 对象， 使用上传文件的时候， 接收的是一个 `fileList` 对象。\n\n#### 构造函数\n\n```javascript\nconst reader = new FileReader(); // 创建一个新的 filereader 实例\n```\n\n#### 相关方法\n\n`reader.readAsArrayBuffer(file)` : 将文件读取为 `ArrayBuffer` 的数据对象\n\n`ArrayBuffer` 是一种二进制数组，通过 `ArrayBuffer` 中的一些语法可以实现使用数组的语法处理二进制数据\n\n`reader.readAsText(file, [encode])` : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 `encode` 用于将 `file` 对象进行转换的编码格式;\n\n`reader.readAsDataURL(file)`: 将文件读取为 `DataUrl`\n\n#### 相关属性\n\n`reader.error`: 表示在读取文件的时候发生的错误；\n\n`reader.readyState`: 表示当前上传文件的状态：\n\n`0`: 表示当前文件尚未加载\n\n`1`: 表示当前文件正在加载中\n\n`2`: 表示当前文件已经完成加载\n\n`reader.result` : 上传文件的内容，只有上传成功之后这个属性才有值\n\n#### 事件处理\n\n| 事件名         | 描述           |\n| ----------- | ------------ |\n| Onabort     | 当读取操作中断的时候触发 |\n| Onerror     | 当操作发生错误的时候触发 |\n| Onload      | 当读取操作完成的时候触发 |\n| Onloadstart | 当开始进行读取的时候触发 |\n| Onloadend   | 当读取操作结束的时候触发 |\n| Onprogress  | 当读取的时候触发     |\n\n\n\n### FormData:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.file[0];\n    const formData = new FormData();\n    formData.append(\"file\", formData);\n    axios({\n        method: \"post\",\n        url: '...',\n        data: formData\n    });\n}\n```\n\n\n\n## 下载\n\n常用的下载操作是创建一个 `a` 标签， 通过 `a` 标签的 `href` 指向下载的文件链接，通过使用 `download` 属性来说明下载的文件名称:\n\n```html\n<a href=\"\" download=\"文件.txt\">下载文件</a> // download 表明下载的文件名, href 指向下载的文件的地址\n```\n\n在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 `a` 标签的链接进行下载操作， 通过使用 `window.URL.createObjectURL` 转为链接。\n\n`window.URL.createObjectURL`:\n\n接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  ` URL.revokeObjectURL` 进行释放， 已获得最佳性能和内存使用情况。\n\n在实际的开发中， 通常使用js 来创建下载标签， 代码如下:\n\n```javascript\n// name: 下载的文件名\n// blob 下载的文件的blob 二进制数据格式的文件\nfunction downloadFile (name, blob) {\n    var downloadElement = document.createElement('a');\n    var href = window.URL.createObjectURL(blob); //创建下载的链接\n    downloadElement.href = href;\n    downloadElement.download = `${name}.xlsx`; //下载后文件名\n    document.body.appendChild(downloadElement);\n    downloadElement.click(); //点击下载\n    document.body.removeChild(downloadElement); //下载完成移除元素\n    window.URL.revokeObjectURL(href); //释放掉 URL 对象 \n}\n```\n\n当接受到文件数据不为 blob 对象的时候, 可以通过使用 `new Blob([data])`  转换为 blob 对象。\n\n\n\n## Blob\n\n`blob` 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 `input` 标签 `type` 设为 `file` 的时候提交的 `fileList` 中的每一个 `file` 对象就是基于 `blob` 对象的；\n\n#### 构造函数\n\n` new Blob(array, [,options]) `:\n\n`array` 中的值可能是 `ArrayBuffer`, `ArrayBufferView`, `Blob`, `DOMString` 对象， 或者这些对象的混合。\n\n`options` 字段是可选的字段， 包含下面两种值：\n\n- `type`: 表明将要放入 `blob` 中的数组内容的 `MIME` 类型\n- endings: 决定第一个参数的数据格式，可以取值为 \"transparent\" 或者 \"native\"（transparent的话不变，是默认值，native 的话按操作系统转换\n\n#### 方法\n\n`Blob.slice([start[, end[, contentType]]])`\n\n用于对 `Blob` 进行\"切割\"， 返回一个新的 `Blob` 对象， 包含特定字节范围内的数据\n\n#### 属性\n\n`Blob.size`: 在 `Blob` 数据对象中的字节大小。\n\n`Blob.type`: `Blob` 数据对象中的 `MIME` 类型。\n\n使用 `Blob` 存储的数据对象读取的唯一方式是通过使用 `FileReader` 进行读取， 通过使用 `FileReader` 中的 `readAsDataURL` 或者 `readAsArrayBuffer` 将 `Blob` 中的数据类型读取为 `ArrayBuffer` 或者 `dataurl` 的格式。\n\n","source":"_posts/js-文件上传与下载.md","raw":"---\ntitle: js 文件上传与下载\ndate: 2018-10-31 00:04:40\ntags: fileReader\ncategories: js\n---\n\n前端实现的文件上传与下载操作：\n\n## 上传\n\n在上传文件的操作中， 可以使用  `formData` 或者 `fileReader` 进行上传操作， 使用 `fileReader` 可以在本地将上传的文件转为二进制的数据格式； `formData` 是在 `XMLHttpRequest` 中的接口，可以用来实现模拟的表单提交， 当前端通过 `ajax` 向后端传递文件的时候， 使用 `ajax` 提交 `formData` 可以实现异步上传二进制文件\n\n```react\n<input type=\"file\" onClick={ this.uploadFile.bind(this) } />\n```\n\n对于上传文件，可以通过两种方式进行上传，通过 `filereader` 或者通过 `formData` 都可以实现上传文件\n\n### FileReader:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.files[0]; // 获取到文件对象\n    const reader = new FileReader(); // 创建 fileReader 的实例\n    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer \n    reader.onload = function () { // 当文件加载成功的时候调用\n        console.log(\"result\", reader.result);\n    }\n}\n```\n\n在 MDN 上面， 对于  FileReader 的描述如下:\n\n```\nFileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n其中File对象可以是来自用户在一个<input>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。  \n```\n\n使用 `fileReader` 接受的参数可以是一个 `File` 对象或者 `Blob` 对象， 使用上传文件的时候， 接收的是一个 `fileList` 对象。\n\n#### 构造函数\n\n```javascript\nconst reader = new FileReader(); // 创建一个新的 filereader 实例\n```\n\n#### 相关方法\n\n`reader.readAsArrayBuffer(file)` : 将文件读取为 `ArrayBuffer` 的数据对象\n\n`ArrayBuffer` 是一种二进制数组，通过 `ArrayBuffer` 中的一些语法可以实现使用数组的语法处理二进制数据\n\n`reader.readAsText(file, [encode])` : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 `encode` 用于将 `file` 对象进行转换的编码格式;\n\n`reader.readAsDataURL(file)`: 将文件读取为 `DataUrl`\n\n#### 相关属性\n\n`reader.error`: 表示在读取文件的时候发生的错误；\n\n`reader.readyState`: 表示当前上传文件的状态：\n\n`0`: 表示当前文件尚未加载\n\n`1`: 表示当前文件正在加载中\n\n`2`: 表示当前文件已经完成加载\n\n`reader.result` : 上传文件的内容，只有上传成功之后这个属性才有值\n\n#### 事件处理\n\n| 事件名         | 描述           |\n| ----------- | ------------ |\n| Onabort     | 当读取操作中断的时候触发 |\n| Onerror     | 当操作发生错误的时候触发 |\n| Onload      | 当读取操作完成的时候触发 |\n| Onloadstart | 当开始进行读取的时候触发 |\n| Onloadend   | 当读取操作结束的时候触发 |\n| Onprogress  | 当读取的时候触发     |\n\n\n\n### FormData:\n\n```react\nuploadFile(fileInput) {\n    const file = fileInput.target.file[0];\n    const formData = new FormData();\n    formData.append(\"file\", formData);\n    axios({\n        method: \"post\",\n        url: '...',\n        data: formData\n    });\n}\n```\n\n\n\n## 下载\n\n常用的下载操作是创建一个 `a` 标签， 通过 `a` 标签的 `href` 指向下载的文件链接，通过使用 `download` 属性来说明下载的文件名称:\n\n```html\n<a href=\"\" download=\"文件.txt\">下载文件</a> // download 表明下载的文件名, href 指向下载的文件的地址\n```\n\n在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 `a` 标签的链接进行下载操作， 通过使用 `window.URL.createObjectURL` 转为链接。\n\n`window.URL.createObjectURL`:\n\n接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  ` URL.revokeObjectURL` 进行释放， 已获得最佳性能和内存使用情况。\n\n在实际的开发中， 通常使用js 来创建下载标签， 代码如下:\n\n```javascript\n// name: 下载的文件名\n// blob 下载的文件的blob 二进制数据格式的文件\nfunction downloadFile (name, blob) {\n    var downloadElement = document.createElement('a');\n    var href = window.URL.createObjectURL(blob); //创建下载的链接\n    downloadElement.href = href;\n    downloadElement.download = `${name}.xlsx`; //下载后文件名\n    document.body.appendChild(downloadElement);\n    downloadElement.click(); //点击下载\n    document.body.removeChild(downloadElement); //下载完成移除元素\n    window.URL.revokeObjectURL(href); //释放掉 URL 对象 \n}\n```\n\n当接受到文件数据不为 blob 对象的时候, 可以通过使用 `new Blob([data])`  转换为 blob 对象。\n\n\n\n## Blob\n\n`blob` 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 `input` 标签 `type` 设为 `file` 的时候提交的 `fileList` 中的每一个 `file` 对象就是基于 `blob` 对象的；\n\n#### 构造函数\n\n` new Blob(array, [,options]) `:\n\n`array` 中的值可能是 `ArrayBuffer`, `ArrayBufferView`, `Blob`, `DOMString` 对象， 或者这些对象的混合。\n\n`options` 字段是可选的字段， 包含下面两种值：\n\n- `type`: 表明将要放入 `blob` 中的数组内容的 `MIME` 类型\n- endings: 决定第一个参数的数据格式，可以取值为 \"transparent\" 或者 \"native\"（transparent的话不变，是默认值，native 的话按操作系统转换\n\n#### 方法\n\n`Blob.slice([start[, end[, contentType]]])`\n\n用于对 `Blob` 进行\"切割\"， 返回一个新的 `Blob` 对象， 包含特定字节范围内的数据\n\n#### 属性\n\n`Blob.size`: 在 `Blob` 数据对象中的字节大小。\n\n`Blob.type`: `Blob` 数据对象中的 `MIME` 类型。\n\n使用 `Blob` 存储的数据对象读取的唯一方式是通过使用 `FileReader` 进行读取， 通过使用 `FileReader` 中的 `readAsDataURL` 或者 `readAsArrayBuffer` 将 `Blob` 中的数据类型读取为 `ArrayBuffer` 或者 `dataurl` 的格式。\n\n","slug":"js-文件上传与下载","published":1,"updated":"2018-10-30T16:07:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7o0018s33gulv885d5","content":"<p>前端实现的文件上传与下载操作：</p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>在上传文件的操作中， 可以使用  <code>formData</code> 或者 <code>fileReader</code> 进行上传操作， 使用 <code>fileReader</code> 可以在本地将上传的文件转为二进制的数据格式； <code>formData</code> 是在 <code>XMLHttpRequest</code> 中的接口，可以用来实现模拟的表单提交， 当前端通过 <code>ajax</code> 向后端传递文件的时候， 使用 <code>ajax</code> 提交 <code>formData</code> 可以实现异步上传二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; onClick=&#123; this.uploadFile.bind(this) &#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>对于上传文件，可以通过两种方式进行上传，通过 <code>filereader</code> 或者通过 <code>formData</code> 都可以实现上传文件</p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader:\"></a>FileReader:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.files[0]; // 获取到文件对象</span><br><span class=\"line\">    const reader = new FileReader(); // 创建 fileReader 的实例</span><br><span class=\"line\">    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer </span><br><span class=\"line\">    reader.onload = function () &#123; // 当文件加载成功的时候调用</span><br><span class=\"line\">        console.log(&quot;result&quot;, reader.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MDN 上面， 对于  FileReader 的描述如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</span><br><span class=\"line\"></span><br><span class=\"line\">其中File对象可以是来自用户在一个&lt;input&gt;元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</span><br></pre></td></tr></table></figure>\n<p>使用 <code>fileReader</code> 接受的参数可以是一个 <code>File</code> 对象或者 <code>Blob</code> 对象， 使用上传文件的时候， 接收的是一个 <code>fileList</code> 对象。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(); <span class=\"comment\">// 创建一个新的 filereader 实例</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相关方法\"><a href=\"#相关方法\" class=\"headerlink\" title=\"相关方法\"></a>相关方法</h4><p><code>reader.readAsArrayBuffer(file)</code> : 将文件读取为 <code>ArrayBuffer</code> 的数据对象</p>\n<p><code>ArrayBuffer</code> 是一种二进制数组，通过 <code>ArrayBuffer</code> 中的一些语法可以实现使用数组的语法处理二进制数据</p>\n<p><code>reader.readAsText(file, [encode])</code> : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 <code>encode</code> 用于将 <code>file</code> 对象进行转换的编码格式;</p>\n<p><code>reader.readAsDataURL(file)</code>: 将文件读取为 <code>DataUrl</code></p>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p><code>reader.error</code>: 表示在读取文件的时候发生的错误；</p>\n<p><code>reader.readyState</code>: 表示当前上传文件的状态：</p>\n<p><code>0</code>: 表示当前文件尚未加载</p>\n<p><code>1</code>: 表示当前文件正在加载中</p>\n<p><code>2</code>: 表示当前文件已经完成加载</p>\n<p><code>reader.result</code> : 上传文件的内容，只有上传成功之后这个属性才有值</p>\n<h4 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h4><table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Onabort</td>\n<td>当读取操作中断的时候触发</td>\n</tr>\n<tr>\n<td>Onerror</td>\n<td>当操作发生错误的时候触发</td>\n</tr>\n<tr>\n<td>Onload</td>\n<td>当读取操作完成的时候触发</td>\n</tr>\n<tr>\n<td>Onloadstart</td>\n<td>当开始进行读取的时候触发</td>\n</tr>\n<tr>\n<td>Onloadend</td>\n<td>当读取操作结束的时候触发</td>\n</tr>\n<tr>\n<td>Onprogress</td>\n<td>当读取的时候触发</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"FormData\"><a href=\"#FormData\" class=\"headerlink\" title=\"FormData:\"></a>FormData:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.file[0];</span><br><span class=\"line\">    const formData = new FormData();</span><br><span class=\"line\">    formData.append(&quot;file&quot;, formData);</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">        method: &quot;post&quot;,</span><br><span class=\"line\">        url: &apos;...&apos;,</span><br><span class=\"line\">        data: formData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>常用的下载操作是创建一个 <code>a</code> 标签， 通过 <code>a</code> 标签的 <code>href</code> 指向下载的文件链接，通过使用 <code>download</code> 属性来说明下载的文件名称:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"文件.txt\"</span>&gt;</span>下载文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> // download 表明下载的文件名, href 指向下载的文件的地址</span><br></pre></td></tr></table></figure>\n<p>在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 <code>a</code> 标签的链接进行下载操作， 通过使用 <code>window.URL.createObjectURL</code> 转为链接。</p>\n<p><code>window.URL.createObjectURL</code>:</p>\n<p>接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  <code>URL.revokeObjectURL</code> 进行释放， 已获得最佳性能和内存使用情况。</p>\n<p>在实际的开发中， 通常使用js 来创建下载标签， 代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name: 下载的文件名</span></span><br><span class=\"line\"><span class=\"comment\">// blob 下载的文件的blob 二进制数据格式的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadFile</span> (<span class=\"params\">name, blob</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">//创建下载的链接</span></span><br><span class=\"line\">    downloadElement.href = href;</span><br><span class=\"line\">    downloadElement.download = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>.xlsx`</span>; <span class=\"comment\">//下载后文件名</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">    downloadElement.click(); <span class=\"comment\">//点击下载</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(downloadElement); <span class=\"comment\">//下载完成移除元素</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.URL.revokeObjectURL(href); <span class=\"comment\">//释放掉 URL 对象 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当接受到文件数据不为 blob 对象的时候, 可以通过使用 <code>new Blob([data])</code>  转换为 blob 对象。</p>\n<h2 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h2><p><code>blob</code> 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 <code>input</code> 标签 <code>type</code> 设为 <code>file</code> 的时候提交的 <code>fileList</code> 中的每一个 <code>file</code> 对象就是基于 <code>blob</code> 对象的；</p>\n<h4 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><code>new Blob(array, [,options])</code>:</p>\n<p><code>array</code> 中的值可能是 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 对象， 或者这些对象的混合。</p>\n<p><code>options</code> 字段是可选的字段， 包含下面两种值：</p>\n<ul>\n<li><code>type</code>: 表明将要放入 <code>blob</code> 中的数组内容的 <code>MIME</code> 类型</li>\n<li>endings: 决定第一个参数的数据格式，可以取值为 “transparent” 或者 “native”（transparent的话不变，是默认值，native 的话按操作系统转换</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>Blob.slice([start[, end[, contentType]]])</code></p>\n<p>用于对 <code>Blob</code> 进行”切割”， 返回一个新的 <code>Blob</code> 对象， 包含特定字节范围内的数据</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p><code>Blob.size</code>: 在 <code>Blob</code> 数据对象中的字节大小。</p>\n<p><code>Blob.type</code>: <code>Blob</code> 数据对象中的 <code>MIME</code> 类型。</p>\n<p>使用 <code>Blob</code> 存储的数据对象读取的唯一方式是通过使用 <code>FileReader</code> 进行读取， 通过使用 <code>FileReader</code> 中的 <code>readAsDataURL</code> 或者 <code>readAsArrayBuffer</code> 将 <code>Blob</code> 中的数据类型读取为 <code>ArrayBuffer</code> 或者 <code>dataurl</code> 的格式。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前端实现的文件上传与下载操作：</p>\n<h2 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h2><p>在上传文件的操作中， 可以使用  <code>formData</code> 或者 <code>fileReader</code> 进行上传操作， 使用 <code>fileReader</code> 可以在本地将上传的文件转为二进制的数据格式； <code>formData</code> 是在 <code>XMLHttpRequest</code> 中的接口，可以用来实现模拟的表单提交， 当前端通过 <code>ajax</code> 向后端传递文件的时候， 使用 <code>ajax</code> 提交 <code>formData</code> 可以实现异步上传二进制文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; onClick=&#123; this.uploadFile.bind(this) &#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>对于上传文件，可以通过两种方式进行上传，通过 <code>filereader</code> 或者通过 <code>formData</code> 都可以实现上传文件</p>\n<h3 id=\"FileReader\"><a href=\"#FileReader\" class=\"headerlink\" title=\"FileReader:\"></a>FileReader:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.files[0]; // 获取到文件对象</span><br><span class=\"line\">    const reader = new FileReader(); // 创建 fileReader 的实例</span><br><span class=\"line\">    reader.readAsArrayBuffer(file); // 将file 读取为 ArrayBuffer </span><br><span class=\"line\">    reader.onload = function () &#123; // 当文件加载成功的时候调用</span><br><span class=\"line\">        console.log(&quot;result&quot;, reader.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 MDN 上面， 对于  FileReader 的描述如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</span><br><span class=\"line\"></span><br><span class=\"line\">其中File对象可以是来自用户在一个&lt;input&gt;元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</span><br></pre></td></tr></table></figure>\n<p>使用 <code>fileReader</code> 接受的参数可以是一个 <code>File</code> 对象或者 <code>Blob</code> 对象， 使用上传文件的时候， 接收的是一个 <code>fileList</code> 对象。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader(); <span class=\"comment\">// 创建一个新的 filereader 实例</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"相关方法\"><a href=\"#相关方法\" class=\"headerlink\" title=\"相关方法\"></a>相关方法</h4><p><code>reader.readAsArrayBuffer(file)</code> : 将文件读取为 <code>ArrayBuffer</code> 的数据对象</p>\n<p><code>ArrayBuffer</code> 是一种二进制数组，通过 <code>ArrayBuffer</code> 中的一些语法可以实现使用数组的语法处理二进制数据</p>\n<p><code>reader.readAsText(file, [encode])</code> : 读取文件内的内容作为字符串的形式输出，这个方法读取的是文件内的内容，其中的 <code>encode</code> 用于将 <code>file</code> 对象进行转换的编码格式;</p>\n<p><code>reader.readAsDataURL(file)</code>: 将文件读取为 <code>DataUrl</code></p>\n<h4 id=\"相关属性\"><a href=\"#相关属性\" class=\"headerlink\" title=\"相关属性\"></a>相关属性</h4><p><code>reader.error</code>: 表示在读取文件的时候发生的错误；</p>\n<p><code>reader.readyState</code>: 表示当前上传文件的状态：</p>\n<p><code>0</code>: 表示当前文件尚未加载</p>\n<p><code>1</code>: 表示当前文件正在加载中</p>\n<p><code>2</code>: 表示当前文件已经完成加载</p>\n<p><code>reader.result</code> : 上传文件的内容，只有上传成功之后这个属性才有值</p>\n<h4 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h4><table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Onabort</td>\n<td>当读取操作中断的时候触发</td>\n</tr>\n<tr>\n<td>Onerror</td>\n<td>当操作发生错误的时候触发</td>\n</tr>\n<tr>\n<td>Onload</td>\n<td>当读取操作完成的时候触发</td>\n</tr>\n<tr>\n<td>Onloadstart</td>\n<td>当开始进行读取的时候触发</td>\n</tr>\n<tr>\n<td>Onloadend</td>\n<td>当读取操作结束的时候触发</td>\n</tr>\n<tr>\n<td>Onprogress</td>\n<td>当读取的时候触发</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"FormData\"><a href=\"#FormData\" class=\"headerlink\" title=\"FormData:\"></a>FormData:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFile(fileInput) &#123;</span><br><span class=\"line\">    const file = fileInput.target.file[0];</span><br><span class=\"line\">    const formData = new FormData();</span><br><span class=\"line\">    formData.append(&quot;file&quot;, formData);</span><br><span class=\"line\">    axios(&#123;</span><br><span class=\"line\">        method: &quot;post&quot;,</span><br><span class=\"line\">        url: &apos;...&apos;,</span><br><span class=\"line\">        data: formData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>常用的下载操作是创建一个 <code>a</code> 标签， 通过 <code>a</code> 标签的 <code>href</code> 指向下载的文件链接，通过使用 <code>download</code> 属性来说明下载的文件名称:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"文件.txt\"</span>&gt;</span>下载文件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> // download 表明下载的文件名, href 指向下载的文件的地址</span><br></pre></td></tr></table></figure>\n<p>在后端传递的文件进行下载的时候， 因为后端传递的是一个二进制的数据格式文件， 前端这边需要将二进制数据转为 <code>a</code> 标签的链接进行下载操作， 通过使用 <code>window.URL.createObjectURL</code> 转为链接。</p>\n<p><code>window.URL.createObjectURL</code>:</p>\n<p>接受参数为一个 file 对象或者一个 blob 对象， 最后生成一个 url, 这个url指向参数中给定的对象。这个 URL 的生命周期和创建它的窗口中的 document 绑定，当不需要使用 URL 对象的时候， 可以通过  <code>URL.revokeObjectURL</code> 进行释放， 已获得最佳性能和内存使用情况。</p>\n<p>在实际的开发中， 通常使用js 来创建下载标签， 代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name: 下载的文件名</span></span><br><span class=\"line\"><span class=\"comment\">// blob 下载的文件的blob 二进制数据格式的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadFile</span> (<span class=\"params\">name, blob</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob); <span class=\"comment\">//创建下载的链接</span></span><br><span class=\"line\">    downloadElement.href = href;</span><br><span class=\"line\">    downloadElement.download = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>.xlsx`</span>; <span class=\"comment\">//下载后文件名</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">    downloadElement.click(); <span class=\"comment\">//点击下载</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(downloadElement); <span class=\"comment\">//下载完成移除元素</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.URL.revokeObjectURL(href); <span class=\"comment\">//释放掉 URL 对象 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当接受到文件数据不为 blob 对象的时候, 可以通过使用 <code>new Blob([data])</code>  转换为 blob 对象。</p>\n<h2 id=\"Blob\"><a href=\"#Blob\" class=\"headerlink\" title=\"Blob\"></a>Blob</h2><p><code>blob</code> 是 js 中的对象，可以存储大量的二进制编码格式的数据， 使用 blob, 当 <code>input</code> 标签 <code>type</code> 设为 <code>file</code> 的时候提交的 <code>fileList</code> 中的每一个 <code>file</code> 对象就是基于 <code>blob</code> 对象的；</p>\n<h4 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p><code>new Blob(array, [,options])</code>:</p>\n<p><code>array</code> 中的值可能是 <code>ArrayBuffer</code>, <code>ArrayBufferView</code>, <code>Blob</code>, <code>DOMString</code> 对象， 或者这些对象的混合。</p>\n<p><code>options</code> 字段是可选的字段， 包含下面两种值：</p>\n<ul>\n<li><code>type</code>: 表明将要放入 <code>blob</code> 中的数组内容的 <code>MIME</code> 类型</li>\n<li>endings: 决定第一个参数的数据格式，可以取值为 “transparent” 或者 “native”（transparent的话不变，是默认值，native 的话按操作系统转换</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><p><code>Blob.slice([start[, end[, contentType]]])</code></p>\n<p>用于对 <code>Blob</code> 进行”切割”， 返回一个新的 <code>Blob</code> 对象， 包含特定字节范围内的数据</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><p><code>Blob.size</code>: 在 <code>Blob</code> 数据对象中的字节大小。</p>\n<p><code>Blob.type</code>: <code>Blob</code> 数据对象中的 <code>MIME</code> 类型。</p>\n<p>使用 <code>Blob</code> 存储的数据对象读取的唯一方式是通过使用 <code>FileReader</code> 进行读取， 通过使用 <code>FileReader</code> 中的 <code>readAsDataURL</code> 或者 <code>readAsArrayBuffer</code> 将 <code>Blob</code> 中的数据类型读取为 <code>ArrayBuffer</code> 或者 <code>dataurl</code> 的格式。</p>\n"},{"title":"node.js EventEmitter","date":"2017-12-17T13:46:19.000Z","_content":"\n## `EventEmitter`\n\n####  基本构建\n\n许多的 `node.js` 核心的 `API` 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 `listeners`;\n\n所有的触发事件的对象属于 `EventEmitter` 类， 这些对象暴露有 `emit` 以及 `on` 方法。\n\n```javascript\nlet eventEmitter = require('events');\nlet myEmitter = new eventEmitter();\n// listeners\nmyEmitter.on('event', () => {\n  console.log('event');\n});\n// emitters\nmyEmitter.emit('event'); // event\n```\n\n##### 向 `lisitens` 传递 `arguments` 以及 `this` 值 \n\n```javascript\nmyEmitter.on('event', function (msg) {\n  console.log(`my name is ${msg}`);\n  console.log('被传递的值', this);\n});\nmyEmitter.emit('event', '张宁宁');\n// my name is 张宁宁\n// this 值指向的值是 eventEmitter 对象\n```\n\n####  handle event only once\n\n使用 `once` 函数的时候, 当使用 `emit` 的时候只会被触发一次\n\n```\nmyEmitter.once('event', () => {\n  console.log('事件被触发一次');\n});\nmyEmitter.emit('event');\n// '事件触发一次'\nmyEmitter.emit('event');\n```\n\n#### some API\n\n##### `Event: newListener`  \n\n在监听器被加入到监听器队列之前，`EventEmitter` 实例会触发自己的 `newListener` 事件。\n\n```javascript\nconst myEmitter = new EventEmitter();\nmyEmitter.once('newListener', (event, listener) => {\n  if (event === 'event') {\n    myEmitter.on('event', () => {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () => {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// B\n// A\n// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A\n```\n\n##### `EventEmitter.listenerCount(emitter, eventName)`\n\n用来获得在 `emitter` 上面注册的 `eventName` 的次数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(EventEmitter.listenerCount(myEmitter, 'event')); // 2\n```\n\n##### `emitter.eventNames()`\n\n用来获得 `emitter` 上面注册的 `listeners` 的事件列表。  \n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('a', () => {});\nmyEmitter.on('b', () => {});\nconsole.log(myEmitter.eventNames); // ['a', 'b']\n```\n\n##### `emitter.listenerCount(eventName)`\n\n`eventName` :  the name of the event being listened for\n\n作用和 `EventEmitter.listenerCount(emitter, eventName)` 是相同的。  \n\n#####  `emitter.listeners(eventName)`\n\n用于获得 `emitter` 上 `eventName` 事件的注册函数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\n// 使用 emitter.listeners(eventName)\n// 用于获得 emitter 上面的 eventName 上注册的函数\nconsole.log(myEmitter.listeners('event'));\n// [[Function], [Function]]\n```\n\n##### `emitter.on(eventName, listener)`  \n\n向一个被称作 `eventName` 的事件`listener` 的列表之中添加事件， 添加的事件被添加到 `listener` 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。\n\n#####  `emitter.prependListener(eventName, listener)`\n\n将 `listener` function 添加到事件队列的开头\n\n```javascript\n\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第一次');\n});\nmyEmitter.prependListener('otherEvent', () => {\n\tconsole.log('第三次');\n});\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第二次');\n});\nmyEmitter.emit('otherEvent');\n// 第三次\n// 第一次\n// 第二次\n```\n\n#### `emitter.prependOnceListener(eventName, listener)`  \n\n仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除\n\n##### `emitter.removeAllListeners([eventName])`\n\n移除 `eventName` 事件上的所有函数。  \n\n##### `emitter.removeListener(eventName, listener)`  \n\n>removes the specified listener from the listener array for the event named eventName\n\n使用 `removeListener` 的时候将会移除事件队列中至多一个`instance` (实例), 如果一个 单独的监听器被多次添加，那么使用 `removeListener` 需要多次调用才能被多次删除。  \n\n从被称作 `eventName` 的事件队列中移除掉特定的事件函数。\n\n*注意*:\n\n>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 `listeners` 将会被调用， 这表明， 在 `listeners` 被 `emit` 之后，在 `listeners` 中的最后一个函数被执行之前， 使用 `removeListenr()` 或者 `removeAllListeners` 都不会起作用   \n\n也就是说， 使用使用移除事件的时候是不会在 `listeners` 函数执行的过程中被调用的。  \n\n例子如下:\n\n```javascript\nconst callBackA = () => {\n\tconsole.log('A');\n\tmyEmitter.removeListener('callback', callBackB);\n};\n\nconst callBackB = () => {\n\tconsole.log('B');\n};\n\nmyEmitter.on('callback', callBackA);\nmyEmitter.on('callback', callBackB);\n\nmyEmitter.emit('callback'); // 这一次调用的时候是不会移除掉 B 的\nmyEmitter.emit('callback');// 这一次调用的时候移除掉了 B\n// A B A\nmyEmitter.listeners() // [[Function: callbackA]]\n```\n\n因为对于 `listeners` 而言, 是通过使用内部的数组进行管理的,  当其中的 `listener` 被移除之后，会改变每一个注册的 `listern` 位置， 但是不会影响 `listener` 被调用的顺序，  但是通过使用 `emitter.listeners()` 返回的调用函数数组队列将会发生变化。\n\n ","source":"_posts/node-js-EventEmitter.md","raw":"---\ntitle: node.js EventEmitter\ndate: 2017-12-17 21:46:19\ntags: EventEmitter\ncategories: node.js\n---\n\n## `EventEmitter`\n\n####  基本构建\n\n许多的 `node.js` 核心的 `API` 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 `listeners`;\n\n所有的触发事件的对象属于 `EventEmitter` 类， 这些对象暴露有 `emit` 以及 `on` 方法。\n\n```javascript\nlet eventEmitter = require('events');\nlet myEmitter = new eventEmitter();\n// listeners\nmyEmitter.on('event', () => {\n  console.log('event');\n});\n// emitters\nmyEmitter.emit('event'); // event\n```\n\n##### 向 `lisitens` 传递 `arguments` 以及 `this` 值 \n\n```javascript\nmyEmitter.on('event', function (msg) {\n  console.log(`my name is ${msg}`);\n  console.log('被传递的值', this);\n});\nmyEmitter.emit('event', '张宁宁');\n// my name is 张宁宁\n// this 值指向的值是 eventEmitter 对象\n```\n\n####  handle event only once\n\n使用 `once` 函数的时候, 当使用 `emit` 的时候只会被触发一次\n\n```\nmyEmitter.once('event', () => {\n  console.log('事件被触发一次');\n});\nmyEmitter.emit('event');\n// '事件触发一次'\nmyEmitter.emit('event');\n```\n\n#### some API\n\n##### `Event: newListener`  \n\n在监听器被加入到监听器队列之前，`EventEmitter` 实例会触发自己的 `newListener` 事件。\n\n```javascript\nconst myEmitter = new EventEmitter();\nmyEmitter.once('newListener', (event, listener) => {\n  if (event === 'event') {\n    myEmitter.on('event', () => {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () => {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// B\n// A\n// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A\n```\n\n##### `EventEmitter.listenerCount(emitter, eventName)`\n\n用来获得在 `emitter` 上面注册的 `eventName` 的次数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(EventEmitter.listenerCount(myEmitter, 'event')); // 2\n```\n\n##### `emitter.eventNames()`\n\n用来获得 `emitter` 上面注册的 `listeners` 的事件列表。  \n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('a', () => {});\nmyEmitter.on('b', () => {});\nconsole.log(myEmitter.eventNames); // ['a', 'b']\n```\n\n##### `emitter.listenerCount(eventName)`\n\n`eventName` :  the name of the event being listened for\n\n作用和 `EventEmitter.listenerCount(emitter, eventName)` 是相同的。  \n\n#####  `emitter.listeners(eventName)`\n\n用于获得 `emitter` 上 `eventName` 事件的注册函数。\n\n```javascript\nlet myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\n// 使用 emitter.listeners(eventName)\n// 用于获得 emitter 上面的 eventName 上注册的函数\nconsole.log(myEmitter.listeners('event'));\n// [[Function], [Function]]\n```\n\n##### `emitter.on(eventName, listener)`  \n\n向一个被称作 `eventName` 的事件`listener` 的列表之中添加事件， 添加的事件被添加到 `listener` 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。\n\n#####  `emitter.prependListener(eventName, listener)`\n\n将 `listener` function 添加到事件队列的开头\n\n```javascript\n\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第一次');\n});\nmyEmitter.prependListener('otherEvent', () => {\n\tconsole.log('第三次');\n});\nmyEmitter.on('otherEvent', () => {\n\tconsole.log('第二次');\n});\nmyEmitter.emit('otherEvent');\n// 第三次\n// 第一次\n// 第二次\n```\n\n#### `emitter.prependOnceListener(eventName, listener)`  \n\n仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除\n\n##### `emitter.removeAllListeners([eventName])`\n\n移除 `eventName` 事件上的所有函数。  \n\n##### `emitter.removeListener(eventName, listener)`  \n\n>removes the specified listener from the listener array for the event named eventName\n\n使用 `removeListener` 的时候将会移除事件队列中至多一个`instance` (实例), 如果一个 单独的监听器被多次添加，那么使用 `removeListener` 需要多次调用才能被多次删除。  \n\n从被称作 `eventName` 的事件队列中移除掉特定的事件函数。\n\n*注意*:\n\n>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 `listeners` 将会被调用， 这表明， 在 `listeners` 被 `emit` 之后，在 `listeners` 中的最后一个函数被执行之前， 使用 `removeListenr()` 或者 `removeAllListeners` 都不会起作用   \n\n也就是说， 使用使用移除事件的时候是不会在 `listeners` 函数执行的过程中被调用的。  \n\n例子如下:\n\n```javascript\nconst callBackA = () => {\n\tconsole.log('A');\n\tmyEmitter.removeListener('callback', callBackB);\n};\n\nconst callBackB = () => {\n\tconsole.log('B');\n};\n\nmyEmitter.on('callback', callBackA);\nmyEmitter.on('callback', callBackB);\n\nmyEmitter.emit('callback'); // 这一次调用的时候是不会移除掉 B 的\nmyEmitter.emit('callback');// 这一次调用的时候移除掉了 B\n// A B A\nmyEmitter.listeners() // [[Function: callbackA]]\n```\n\n因为对于 `listeners` 而言, 是通过使用内部的数组进行管理的,  当其中的 `listener` 被移除之后，会改变每一个注册的 `listern` 位置， 但是不会影响 `listener` 被调用的顺序，  但是通过使用 `emitter.listeners()` 返回的调用函数数组队列将会发生变化。\n\n ","slug":"node-js-EventEmitter","published":1,"updated":"2017-12-18T16:05:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7r001bs33glspix6v9","content":"<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a><code>EventEmitter</code></h2><h4 id=\"基本构建\"><a href=\"#基本构建\" class=\"headerlink\" title=\"基本构建\"></a>基本构建</h4><p>许多的 <code>node.js</code> 核心的 <code>API</code> 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 <code>listeners</code>;</p>\n<p>所有的触发事件的对象属于 <code>EventEmitter</code> 类， 这些对象暴露有 <code>emit</code> 以及 <code>on</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> eventEmitter();</span><br><span class=\"line\"><span class=\"comment\">// listeners</span></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// emitters</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>); <span class=\"comment\">// event</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"向-lisitens-传递-arguments-以及-this-值\"><a href=\"#向-lisitens-传递-arguments-以及-this-值\" class=\"headerlink\" title=\"向 lisitens 传递 arguments 以及 this 值\"></a>向 <code>lisitens</code> 传递 <code>arguments</code> 以及 <code>this</code> 值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'被传递的值'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>, <span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\"><span class=\"comment\">// my name is 张宁宁</span></span><br><span class=\"line\"><span class=\"comment\">// this 值指向的值是 eventEmitter 对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"handle-event-only-once\"><a href=\"#handle-event-only-once\" class=\"headerlink\" title=\"handle event only once\"></a>handle event only once</h4><p>使用 <code>once</code> 函数的时候, 当使用 <code>emit</code> 的时候只会被触发一次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.once(&apos;event&apos;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;事件被触发一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br><span class=\"line\">// &apos;事件触发一次&apos;</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"some-API\"><a href=\"#some-API\" class=\"headerlink\" title=\"some API\"></a>some API</h4><h5 id=\"Event-newListener\"><a href=\"#Event-newListener\" class=\"headerlink\" title=\"Event: newListener\"></a><code>Event: newListener</code></h5><p>在监听器被加入到监听器队列之前，<code>EventEmitter</code> 实例会触发自己的 <code>newListener</code> 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.once(<span class=\"string\">'newListener'</span>, (event, listener) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event === <span class=\"string\">'event'</span>) &#123;</span><br><span class=\"line\">    myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\"><span class=\"comment\">// B</span></span><br><span class=\"line\"><span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"comment\">// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"EventEmitter-listenerCount-emitter-eventName\"><a href=\"#EventEmitter-listenerCount-emitter-eventName\" class=\"headerlink\" title=\"EventEmitter.listenerCount(emitter, eventName)\"></a><code>EventEmitter.listenerCount(emitter, eventName)</code></h5><p>用来获得在 <code>emitter</code> 上面注册的 <code>eventName</code> 的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(myEmitter, <span class=\"string\">'event'</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-eventNames\"><a href=\"#emitter-eventNames\" class=\"headerlink\" title=\"emitter.eventNames()\"></a><code>emitter.eventNames()</code></h5><p>用来获得 <code>emitter</code> 上面注册的 <code>listeners</code> 的事件列表。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'a'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'b'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.eventNames); <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-listenerCount-eventName\"><a href=\"#emitter-listenerCount-eventName\" class=\"headerlink\" title=\"emitter.listenerCount(eventName)\"></a><code>emitter.listenerCount(eventName)</code></h5><p><code>eventName</code> :  the name of the event being listened for</p>\n<p>作用和 <code>EventEmitter.listenerCount(emitter, eventName)</code> 是相同的。  </p>\n<h5 id=\"emitter-listeners-eventName\"><a href=\"#emitter-listeners-eventName\" class=\"headerlink\" title=\"emitter.listeners(eventName)\"></a><code>emitter.listeners(eventName)</code></h5><p>用于获得 <code>emitter</code> 上 <code>eventName</code> 事件的注册函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用 emitter.listeners(eventName)</span></span><br><span class=\"line\"><span class=\"comment\">// 用于获得 emitter 上面的 eventName 上注册的函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.listeners(<span class=\"string\">'event'</span>));</span><br><span class=\"line\"><span class=\"comment\">// [[Function], [Function]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-on-eventName-listener\"><a href=\"#emitter-on-eventName-listener\" class=\"headerlink\" title=\"emitter.on(eventName, listener)\"></a><code>emitter.on(eventName, listener)</code></h5><p>向一个被称作 <code>eventName</code> 的事件<code>listener</code> 的列表之中添加事件， 添加的事件被添加到 <code>listener</code> 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。</p>\n<h5 id=\"emitter-prependListener-eventName-listener\"><a href=\"#emitter-prependListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependListener(eventName, listener)\"></a><code>emitter.prependListener(eventName, listener)</code></h5><p>将 <code>listener</code> function 添加到事件队列的开头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第一次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.prependListener(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第三次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第二次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'otherEvent'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第三次</span></span><br><span class=\"line\"><span class=\"comment\">// 第一次</span></span><br><span class=\"line\"><span class=\"comment\">// 第二次</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"emitter-prependOnceListener-eventName-listener\"><a href=\"#emitter-prependOnceListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependOnceListener(eventName, listener)\"></a><code>emitter.prependOnceListener(eventName, listener)</code></h4><p>仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除</p>\n<h5 id=\"emitter-removeAllListeners-eventName\"><a href=\"#emitter-removeAllListeners-eventName\" class=\"headerlink\" title=\"emitter.removeAllListeners([eventName])\"></a><code>emitter.removeAllListeners([eventName])</code></h5><p>移除 <code>eventName</code> 事件上的所有函数。  </p>\n<h5 id=\"emitter-removeListener-eventName-listener\"><a href=\"#emitter-removeListener-eventName-listener\" class=\"headerlink\" title=\"emitter.removeListener(eventName, listener)\"></a><code>emitter.removeListener(eventName, listener)</code></h5><blockquote>\n<p>removes the specified listener from the listener array for the event named eventName</p>\n</blockquote>\n<p>使用 <code>removeListener</code> 的时候将会移除事件队列中至多一个<code>instance</code> (实例), 如果一个 单独的监听器被多次添加，那么使用 <code>removeListener</code> 需要多次调用才能被多次删除。  </p>\n<p>从被称作 <code>eventName</code> 的事件队列中移除掉特定的事件函数。</p>\n<p><em>注意</em>:</p>\n<blockquote>\n<p>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 <code>listeners</code> 将会被调用， 这表明， 在 <code>listeners</code> 被 <code>emit</code> 之后，在 <code>listeners</code> 中的最后一个函数被执行之前， 使用 <code>removeListenr()</code> 或者 <code>removeAllListeners</code> 都不会起作用   </p>\n</blockquote>\n<p>也就是说， 使用使用移除事件的时候是不会在 <code>listeners</code> 函数执行的过程中被调用的。  </p>\n<p>例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callBackA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">\tmyEmitter.removeListener(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callBackB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackA);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>); <span class=\"comment\">// 这一次调用的时候是不会移除掉 B 的</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>);<span class=\"comment\">// 这一次调用的时候移除掉了 B</span></span><br><span class=\"line\"><span class=\"comment\">// A B A</span></span><br><span class=\"line\">myEmitter.listeners() <span class=\"comment\">// [[Function: callbackA]]</span></span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>listeners</code> 而言, 是通过使用内部的数组进行管理的,  当其中的 <code>listener</code> 被移除之后，会改变每一个注册的 <code>listern</code> 位置， 但是不会影响 <code>listener</code> 被调用的顺序，  但是通过使用 <code>emitter.listeners()</code> 返回的调用函数数组队列将会发生变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"EventEmitter\"><a href=\"#EventEmitter\" class=\"headerlink\" title=\"EventEmitter\"></a><code>EventEmitter</code></h2><h4 id=\"基本构建\"><a href=\"#基本构建\" class=\"headerlink\" title=\"基本构建\"></a>基本构建</h4><p>许多的 <code>node.js</code> 核心的 <code>API</code> 是围绕事件异步模型进行构建的，特定种类的事件对象会周期性的触发命名的函数对象，从而导致函数对象被触发。 这些函数对象被称作 <code>listeners</code>;</p>\n<p>所有的触发事件的对象属于 <code>EventEmitter</code> 类， 这些对象暴露有 <code>emit</code> 以及 <code>on</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> eventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> eventEmitter();</span><br><span class=\"line\"><span class=\"comment\">// listeners</span></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'event'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// emitters</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>); <span class=\"comment\">// event</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"向-lisitens-传递-arguments-以及-this-值\"><a href=\"#向-lisitens-传递-arguments-以及-this-值\" class=\"headerlink\" title=\"向 lisitens 传递 arguments 以及 this 值\"></a>向 <code>lisitens</code> 传递 <code>arguments</code> 以及 <code>this</code> 值</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`my name is <span class=\"subst\">$&#123;msg&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'被传递的值'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>, <span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\"><span class=\"comment\">// my name is 张宁宁</span></span><br><span class=\"line\"><span class=\"comment\">// this 值指向的值是 eventEmitter 对象</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"handle-event-only-once\"><a href=\"#handle-event-only-once\" class=\"headerlink\" title=\"handle event only once\"></a>handle event only once</h4><p>使用 <code>once</code> 函数的时候, 当使用 <code>emit</code> 的时候只会被触发一次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myEmitter.once(&apos;event&apos;, () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;事件被触发一次&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br><span class=\"line\">// &apos;事件触发一次&apos;</span><br><span class=\"line\">myEmitter.emit(&apos;event&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"some-API\"><a href=\"#some-API\" class=\"headerlink\" title=\"some API\"></a>some API</h4><h5 id=\"Event-newListener\"><a href=\"#Event-newListener\" class=\"headerlink\" title=\"Event: newListener\"></a><code>Event: newListener</code></h5><p>在监听器被加入到监听器队列之前，<code>EventEmitter</code> 实例会触发自己的 <code>newListener</code> 事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.once(<span class=\"string\">'newListener'</span>, (event, listener) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event === <span class=\"string\">'event'</span>) &#123;</span><br><span class=\"line\">    myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'event'</span>);</span><br><span class=\"line\"><span class=\"comment\">// B</span></span><br><span class=\"line\"><span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"comment\">// 在触发 'event' 事件的时候先要触发事件 B 在触发事件 A</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"EventEmitter-listenerCount-emitter-eventName\"><a href=\"#EventEmitter-listenerCount-emitter-eventName\" class=\"headerlink\" title=\"EventEmitter.listenerCount(emitter, eventName)\"></a><code>EventEmitter.listenerCount(emitter, eventName)</code></h5><p>用来获得在 <code>emitter</code> 上面注册的 <code>eventName</code> 的次数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(EventEmitter.listenerCount(myEmitter, <span class=\"string\">'event'</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-eventNames\"><a href=\"#emitter-eventNames\" class=\"headerlink\" title=\"emitter.eventNames()\"></a><code>emitter.eventNames()</code></h5><p>用来获得 <code>emitter</code> 上面注册的 <code>listeners</code> 的事件列表。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'a'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'b'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.eventNames); <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-listenerCount-eventName\"><a href=\"#emitter-listenerCount-eventName\" class=\"headerlink\" title=\"emitter.listenerCount(eventName)\"></a><code>emitter.listenerCount(eventName)</code></h5><p><code>eventName</code> :  the name of the event being listened for</p>\n<p>作用和 <code>EventEmitter.listenerCount(emitter, eventName)</code> 是相同的。  </p>\n<h5 id=\"emitter-listeners-eventName\"><a href=\"#emitter-listeners-eventName\" class=\"headerlink\" title=\"emitter.listeners(eventName)\"></a><code>emitter.listeners(eventName)</code></h5><p>用于获得 <code>emitter</code> 上 <code>eventName</code> 事件的注册函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myEmitter = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'event'</span>, () =&gt; &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 使用 emitter.listeners(eventName)</span></span><br><span class=\"line\"><span class=\"comment\">// 用于获得 emitter 上面的 eventName 上注册的函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myEmitter.listeners(<span class=\"string\">'event'</span>));</span><br><span class=\"line\"><span class=\"comment\">// [[Function], [Function]]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"emitter-on-eventName-listener\"><a href=\"#emitter-on-eventName-listener\" class=\"headerlink\" title=\"emitter.on(eventName, listener)\"></a><code>emitter.on(eventName, listener)</code></h5><p>向一个被称作 <code>eventName</code> 的事件<code>listener</code> 的列表之中添加事件， 添加的事件被添加到 <code>listener</code> 列表的末尾。  注意，在添加事件的时候， 添加的事件只会按照顺序添加到时间列表数组的末尾，在这个过程中，不会进行判断事件是否已经添加了。</p>\n<h5 id=\"emitter-prependListener-eventName-listener\"><a href=\"#emitter-prependListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependListener(eventName, listener)\"></a><code>emitter.prependListener(eventName, listener)</code></h5><p>将 <code>listener</code> function 添加到事件队列的开头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第一次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.prependListener(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第三次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'otherEvent'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'第二次'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'otherEvent'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第三次</span></span><br><span class=\"line\"><span class=\"comment\">// 第一次</span></span><br><span class=\"line\"><span class=\"comment\">// 第二次</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"emitter-prependOnceListener-eventName-listener\"><a href=\"#emitter-prependOnceListener-eventName-listener\" class=\"headerlink\" title=\"emitter.prependOnceListener(eventName, listener)\"></a><code>emitter.prependOnceListener(eventName, listener)</code></h4><p>仅仅添加一次运行的函数到事件队列开始，第二次调用的时候会被移除</p>\n<h5 id=\"emitter-removeAllListeners-eventName\"><a href=\"#emitter-removeAllListeners-eventName\" class=\"headerlink\" title=\"emitter.removeAllListeners([eventName])\"></a><code>emitter.removeAllListeners([eventName])</code></h5><p>移除 <code>eventName</code> 事件上的所有函数。  </p>\n<h5 id=\"emitter-removeListener-eventName-listener\"><a href=\"#emitter-removeListener-eventName-listener\" class=\"headerlink\" title=\"emitter.removeListener(eventName, listener)\"></a><code>emitter.removeListener(eventName, listener)</code></h5><blockquote>\n<p>removes the specified listener from the listener array for the event named eventName</p>\n</blockquote>\n<p>使用 <code>removeListener</code> 的时候将会移除事件队列中至多一个<code>instance</code> (实例), 如果一个 单独的监听器被多次添加，那么使用 <code>removeListener</code> 需要多次调用才能被多次删除。  </p>\n<p>从被称作 <code>eventName</code> 的事件队列中移除掉特定的事件函数。</p>\n<p><em>注意</em>:</p>\n<blockquote>\n<p>一旦时间被触发的时候, 在触发的时刻所有与之相关联的 <code>listeners</code> 将会被调用， 这表明， 在 <code>listeners</code> 被 <code>emit</code> 之后，在 <code>listeners</code> 中的最后一个函数被执行之前， 使用 <code>removeListenr()</code> 或者 <code>removeAllListeners</code> 都不会起作用   </p>\n</blockquote>\n<p>也就是说， 使用使用移除事件的时候是不会在 <code>listeners</code> 函数执行的过程中被调用的。  </p>\n<p>例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callBackA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">\tmyEmitter.removeListener(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> callBackB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackA);</span><br><span class=\"line\">myEmitter.on(<span class=\"string\">'callback'</span>, callBackB);</span><br><span class=\"line\"></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>); <span class=\"comment\">// 这一次调用的时候是不会移除掉 B 的</span></span><br><span class=\"line\">myEmitter.emit(<span class=\"string\">'callback'</span>);<span class=\"comment\">// 这一次调用的时候移除掉了 B</span></span><br><span class=\"line\"><span class=\"comment\">// A B A</span></span><br><span class=\"line\">myEmitter.listeners() <span class=\"comment\">// [[Function: callbackA]]</span></span><br></pre></td></tr></table></figure>\n<p>因为对于 <code>listeners</code> 而言, 是通过使用内部的数组进行管理的,  当其中的 <code>listener</code> 被移除之后，会改变每一个注册的 <code>listern</code> 位置， 但是不会影响 <code>listener</code> 被调用的顺序，  但是通过使用 <code>emitter.listeners()</code> 返回的调用函数数组队列将会发生变化。</p>\n"},{"title":"node.js基础.基本服务器构建","date":"2017-12-10T03:04:45.000Z","_content":"\n`node.js` 是 `javascript` 对于后端的应用, 下面是使用`node.js` 构建的一个基础的图片上传应用:\n\n应用地址[hello world](https://github.com/newPromise/node.js/tree/master/hello%20world): \n\n### 基本组成\n\n这个基本的引用由下面几个部分组成:\n\n`index.js` : 作为各个模块的入口。  \n\n`server.js` 服务器模块。  \n\n`router.js` 用于路由的存放。\n\n`requireHandler.js` 用于路由相关的动作\n\n### 模块分析\n\n#### `server.js`\n\n`server.js` 用于创建 `http` 服务器。\n\n一个基础的 `http` 服务器的构成。\n\n```javascript\nlet http = require('http');\n// request 是浏览器向服务器进行请求的相关信息\nfunction onRequest(request, response) {\n  // response 用于向对于发送信息的浏览器响应请求\n  // 规定返回响应的 头部信息\n  // 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息\n  response.writeHead(200, {\"Content-type\": \"text/plain\"});\n  // 使用 response.write 向响应的主体中发送内容\n  response.write();\n  // 结束响应请求\n  response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n\n上面的创建的基础的 `node.js` 服务器用于监听 8888 端口。\n\n`node.js` 是基于事件驱动的, 也就是我们说的 `回调`， 上面的服务器中， 只要在  `8888` 端口处监听到事件发生, 则进行回调 `onRequest` 函数。\n\n在这个应用中，这样构建服务器模块:\n\n```javascript\n// 引入 http 模块\nlet http = require('http');\n// 引入 url 模块\nlet url = require('url');\n// 创建一个 start 函数用于开启服务器\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    let pathname = url.parse(request.url).pathname;\n    route(handle, pathname, response, request);\n  }\n  http.createServer(onRequest).listen(8888);\n}\n// 导出 start 模块\nexport.start = start;\n```\n\n#### `router.js`\n\n在 `router.js` 存放在对于根据不同的路由切换函数。\n\n```javascript\nfunction route(handle, pathname, response, request) {\n  if (typeof handle[pathname] === 'function') {\n    // 执行 handle[pathname] 函数\n    // handle[pathname] 函数接收两个参数 response, request\n    // 这个启动的函数位于 requireHandler.js 中\n    handle[pathname](response, request);\n  } else {\n    // http 状态 404 not found Content-type 设置 text/plain\n    response.writeHead(404, { 'Content-type': 'text/plain' });\n    response.write('404 not found');\n    response.end();\n  }\n}\nexport.route = route;\n```\n\n#### `index.js`\n\n使用 `index.js` 用于对于各个模块进行集中处理:\n\n```javascript\n// 导入 server, router, requestHandlers 模块\n// server: 服务器模块\n// router: 路由模块\n// requestHandlers： 相应路由的处理函数模块\nlet server = require(\"./server.js\");\nlet router = require(\"./router\");\nlet requestHandlers = require(\"./requireHandlers\");\nlet handle = {};\n\n// 对于不同的路由进行不同的函数配置\nhandle['/'] = requestHandlers.start;\nhandle['/start'] = requestHandlers.start;\nhandle['/upload'] = requestHandlers.upload;\nhandle['/show'] = requestHandlers.show;\n\n// 启动服务器\nserver.start(router.route, handle);\n```\n\n#### `requireHandler.js`\n\n这个模块用来个根据不同的路由进行不同的函数处理:\n\n对于上传数据的不同处理都是放在了这里面:\n\n```javascript\nlet fs = require('fs');\n\n// 使用 formidable 用于处理文件上传的问题\nlet formidable = require('formidable');\n\nfunction start(response, request) {\n\tvar body = '<html>'+\n\t'<head>'+\n\t'<meta http-equiv=\"Content-Type\" '+\n\t'content=\"text/html; charset=UTF-8\" />'+\n\t'</head>'+\n\t'<body>'+\n\t'<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n\t'method=\"post\">'+\n\t'<input type=\"file\" name=\"upload\">'+\n\t'<input type=\"submit\" value=\"Upload file\" />'+\n\t'</form>'+\n\t'</body>'+\n\t'</html>';\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(body);\n\tresponse.end();\n}\nfunction upload(response, request) {\n\tlet form = new formidable.IncomingForm();\n\tform.parse(request, function (error, fields, files) {\n\t\tvar readStream=fs.createReadStream(files.upload.path);\n\t\tvar writeStream=fs.createWriteStream(`./assets/${files.upload.name}`);\n\t\timgname = files.upload.name;\n        readStream.pipe(writeStream);\n        readStream.on('end',function(){\n\t    fs.unlinkSync(files.upload.path);\n\t  });\n\t\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\t\tresponse.write('received image: <br/>');\n\t\tconsole.log(files.upload.name);\n        // src='/show' 调用 show 函数\n\t\tresponse.write(\"<img src='/show'/>\");\n\t\tresponse.end();\n\t});\n}\n\n// show 函数用于文件显示\nfunction show(response, postData) {\n\t// 读取文件\n\tfs.readFile(`./assets/${imgname}`, \"binary\", function (error, file) {\n\t\t// 如果发生错误\n\t\tif (error) {\n\t\t\tresponse.writeHead(500, {\"Content-Type\": \"text/plain\"});\n\t\t\tresponse.write(error + \"\\n\");\n\t\t\tresponse.end();\n\t\t} else {\n\t\t\tresponse.writeHead(200, {\"Content-Type\": \"image/png\"});\n\t\t\tresponse.write(file, \"binary\");\n\t\t\tresponse.end();\n\t\t}\n\t})\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n```\n\n### 其他\n\n关于使用 `response.write` 的问题:\n\n```javascript\nresponse.write(chunk, [encoding]);\n// encoding 表示编码形式\n```\n\n","source":"_posts/node-js基础-基本服务器构建.md","raw":"---\ntitle: node.js基础.基本服务器构建\ndate: 2017-12-10 11:04:45\ntags: node.js 基础\ncategories: node.js\n---\n\n`node.js` 是 `javascript` 对于后端的应用, 下面是使用`node.js` 构建的一个基础的图片上传应用:\n\n应用地址[hello world](https://github.com/newPromise/node.js/tree/master/hello%20world): \n\n### 基本组成\n\n这个基本的引用由下面几个部分组成:\n\n`index.js` : 作为各个模块的入口。  \n\n`server.js` 服务器模块。  \n\n`router.js` 用于路由的存放。\n\n`requireHandler.js` 用于路由相关的动作\n\n### 模块分析\n\n#### `server.js`\n\n`server.js` 用于创建 `http` 服务器。\n\n一个基础的 `http` 服务器的构成。\n\n```javascript\nlet http = require('http');\n// request 是浏览器向服务器进行请求的相关信息\nfunction onRequest(request, response) {\n  // response 用于向对于发送信息的浏览器响应请求\n  // 规定返回响应的 头部信息\n  // 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息\n  response.writeHead(200, {\"Content-type\": \"text/plain\"});\n  // 使用 response.write 向响应的主体中发送内容\n  response.write();\n  // 结束响应请求\n  response.end();\n}\nhttp.createServer(onRequest).listen(8888);\n```\n\n上面的创建的基础的 `node.js` 服务器用于监听 8888 端口。\n\n`node.js` 是基于事件驱动的, 也就是我们说的 `回调`， 上面的服务器中， 只要在  `8888` 端口处监听到事件发生, 则进行回调 `onRequest` 函数。\n\n在这个应用中，这样构建服务器模块:\n\n```javascript\n// 引入 http 模块\nlet http = require('http');\n// 引入 url 模块\nlet url = require('url');\n// 创建一个 start 函数用于开启服务器\nfunction start(route, handle) {\n  function onRequest(request, response) {\n    let pathname = url.parse(request.url).pathname;\n    route(handle, pathname, response, request);\n  }\n  http.createServer(onRequest).listen(8888);\n}\n// 导出 start 模块\nexport.start = start;\n```\n\n#### `router.js`\n\n在 `router.js` 存放在对于根据不同的路由切换函数。\n\n```javascript\nfunction route(handle, pathname, response, request) {\n  if (typeof handle[pathname] === 'function') {\n    // 执行 handle[pathname] 函数\n    // handle[pathname] 函数接收两个参数 response, request\n    // 这个启动的函数位于 requireHandler.js 中\n    handle[pathname](response, request);\n  } else {\n    // http 状态 404 not found Content-type 设置 text/plain\n    response.writeHead(404, { 'Content-type': 'text/plain' });\n    response.write('404 not found');\n    response.end();\n  }\n}\nexport.route = route;\n```\n\n#### `index.js`\n\n使用 `index.js` 用于对于各个模块进行集中处理:\n\n```javascript\n// 导入 server, router, requestHandlers 模块\n// server: 服务器模块\n// router: 路由模块\n// requestHandlers： 相应路由的处理函数模块\nlet server = require(\"./server.js\");\nlet router = require(\"./router\");\nlet requestHandlers = require(\"./requireHandlers\");\nlet handle = {};\n\n// 对于不同的路由进行不同的函数配置\nhandle['/'] = requestHandlers.start;\nhandle['/start'] = requestHandlers.start;\nhandle['/upload'] = requestHandlers.upload;\nhandle['/show'] = requestHandlers.show;\n\n// 启动服务器\nserver.start(router.route, handle);\n```\n\n#### `requireHandler.js`\n\n这个模块用来个根据不同的路由进行不同的函数处理:\n\n对于上传数据的不同处理都是放在了这里面:\n\n```javascript\nlet fs = require('fs');\n\n// 使用 formidable 用于处理文件上传的问题\nlet formidable = require('formidable');\n\nfunction start(response, request) {\n\tvar body = '<html>'+\n\t'<head>'+\n\t'<meta http-equiv=\"Content-Type\" '+\n\t'content=\"text/html; charset=UTF-8\" />'+\n\t'</head>'+\n\t'<body>'+\n\t'<form action=\"/upload\" enctype=\"multipart/form-data\" '+\n\t'method=\"post\">'+\n\t'<input type=\"file\" name=\"upload\">'+\n\t'<input type=\"submit\" value=\"Upload file\" />'+\n\t'</form>'+\n\t'</body>'+\n\t'</html>';\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(body);\n\tresponse.end();\n}\nfunction upload(response, request) {\n\tlet form = new formidable.IncomingForm();\n\tform.parse(request, function (error, fields, files) {\n\t\tvar readStream=fs.createReadStream(files.upload.path);\n\t\tvar writeStream=fs.createWriteStream(`./assets/${files.upload.name}`);\n\t\timgname = files.upload.name;\n        readStream.pipe(writeStream);\n        readStream.on('end',function(){\n\t    fs.unlinkSync(files.upload.path);\n\t  });\n\t\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\t\tresponse.write('received image: <br/>');\n\t\tconsole.log(files.upload.name);\n        // src='/show' 调用 show 函数\n\t\tresponse.write(\"<img src='/show'/>\");\n\t\tresponse.end();\n\t});\n}\n\n// show 函数用于文件显示\nfunction show(response, postData) {\n\t// 读取文件\n\tfs.readFile(`./assets/${imgname}`, \"binary\", function (error, file) {\n\t\t// 如果发生错误\n\t\tif (error) {\n\t\t\tresponse.writeHead(500, {\"Content-Type\": \"text/plain\"});\n\t\t\tresponse.write(error + \"\\n\");\n\t\t\tresponse.end();\n\t\t} else {\n\t\t\tresponse.writeHead(200, {\"Content-Type\": \"image/png\"});\n\t\t\tresponse.write(file, \"binary\");\n\t\t\tresponse.end();\n\t\t}\n\t})\n}\n\nexports.start = start;\nexports.upload = upload;\nexports.show = show;\n```\n\n### 其他\n\n关于使用 `response.write` 的问题:\n\n```javascript\nresponse.write(chunk, [encoding]);\n// encoding 表示编码形式\n```\n\n","slug":"node-js基础-基本服务器构建","published":1,"updated":"2017-12-10T06:37:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7v001fs33gyol1kdoo","content":"<p><code>node.js</code> 是 <code>javascript</code> 对于后端的应用, 下面是使用<code>node.js</code> 构建的一个基础的图片上传应用:</p>\n<p>应用地址<a href=\"https://github.com/newPromise/node.js/tree/master/hello%20world\" target=\"_blank\" rel=\"noopener\">hello world</a>: </p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><p>这个基本的引用由下面几个部分组成:</p>\n<p><code>index.js</code> : 作为各个模块的入口。  </p>\n<p><code>server.js</code> 服务器模块。  </p>\n<p><code>router.js</code> 用于路由的存放。</p>\n<p><code>requireHandler.js</code> 用于路由相关的动作</p>\n<h3 id=\"模块分析\"><a href=\"#模块分析\" class=\"headerlink\" title=\"模块分析\"></a>模块分析</h3><h4 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"server.js\"></a><code>server.js</code></h4><p><code>server.js</code> 用于创建 <code>http</code> 服务器。</p>\n<p>一个基础的 <code>http</code> 服务器的构成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// request 是浏览器向服务器进行请求的相关信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// response 用于向对于发送信息的浏览器响应请求</span></span><br><span class=\"line\">  <span class=\"comment\">// 规定返回响应的 头部信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 response.write 向响应的主体中发送内容</span></span><br><span class=\"line\">  response.write();</span><br><span class=\"line\">  <span class=\"comment\">// 结束响应请求</span></span><br><span class=\"line\">  response.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的创建的基础的 <code>node.js</code> 服务器用于监听 8888 端口。</p>\n<p><code>node.js</code> 是基于事件驱动的, 也就是我们说的 <code>回调</code>， 上面的服务器中， 只要在  <code>8888</code> 端口处监听到事件发生, 则进行回调 <code>onRequest</code> 函数。</p>\n<p>在这个应用中，这样构建服务器模块:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 http 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 url 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个 start 函数用于开启服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">    route(handle, pathname, response, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 导出 start 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.start = start;</span><br></pre></td></tr></table></figure>\n<h4 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a><code>router.js</code></h4><p>在 <code>router.js</code> 存放在对于根据不同的路由切换函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 handle[pathname] 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// handle[pathname] 函数接收两个参数 response, request</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个启动的函数位于 requireHandler.js 中</span></span><br><span class=\"line\">    handle[pathname](response, request);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// http 状态 404 not found Content-type 设置 text/plain</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123; <span class=\"string\">'Content-type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    response.write(<span class=\"string\">'404 not found'</span>);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>.route = route;</span><br></pre></td></tr></table></figure>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a><code>index.js</code></h4><p>使用 <code>index.js</code> 用于对于各个模块进行集中处理:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 server, router, requestHandlers 模块</span></span><br><span class=\"line\"><span class=\"comment\">// server: 服务器模块</span></span><br><span class=\"line\"><span class=\"comment\">// router: 路由模块</span></span><br><span class=\"line\"><span class=\"comment\">// requestHandlers： 相应路由的处理函数模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requireHandlers\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于不同的路由进行不同的函数配置</span></span><br><span class=\"line\">handle[<span class=\"string\">'/'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/start'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/upload'</span>] = requestHandlers.upload;</span><br><span class=\"line\">handle[<span class=\"string\">'/show'</span>] = requestHandlers.show;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务器</span></span><br><span class=\"line\">server.start(router.route, handle);</span><br></pre></td></tr></table></figure>\n<h4 id=\"requireHandler-js\"><a href=\"#requireHandler-js\" class=\"headerlink\" title=\"requireHandler.js\"></a><code>requireHandler.js</code></h4><p>这个模块用来个根据不同的路由进行不同的函数处理:</p>\n<p>对于上传数据的不同处理都是放在了这里面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 formidable 用于处理文件上传的问题</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'method=\"post\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/form&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\tresponse.write(body);</span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(request, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, fields, files</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> readStream=fs.createReadStream(files.upload.path);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;files.upload.name&#125;</span>`</span>);</span><br><span class=\"line\">\t\timgname = files.upload.name;</span><br><span class=\"line\">        readStream.pipe(writeStream);</span><br><span class=\"line\">        readStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    fs.unlinkSync(files.upload.path);</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">'received image: &lt;br/&gt;'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(files.upload.name);</span><br><span class=\"line\">        <span class=\"comment\">// src='/show' 调用 show 函数</span></span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">\"&lt;img src='/show'/&gt;\"</span>);</span><br><span class=\"line\">\t\tresponse.end();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show 函数用于文件显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;imgname&#125;</span>`</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, file</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果发生错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(error + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(file, <span class=\"string\">\"binary\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.start = start;</span><br><span class=\"line\">exports.upload = upload;</span><br><span class=\"line\">exports.show = show;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>关于使用 <code>response.write</code> 的问题:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(chunk, [encoding]);</span><br><span class=\"line\"><span class=\"comment\">// encoding 表示编码形式</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>node.js</code> 是 <code>javascript</code> 对于后端的应用, 下面是使用<code>node.js</code> 构建的一个基础的图片上传应用:</p>\n<p>应用地址<a href=\"https://github.com/newPromise/node.js/tree/master/hello%20world\" target=\"_blank\" rel=\"noopener\">hello world</a>: </p>\n<h3 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h3><p>这个基本的引用由下面几个部分组成:</p>\n<p><code>index.js</code> : 作为各个模块的入口。  </p>\n<p><code>server.js</code> 服务器模块。  </p>\n<p><code>router.js</code> 用于路由的存放。</p>\n<p><code>requireHandler.js</code> 用于路由相关的动作</p>\n<h3 id=\"模块分析\"><a href=\"#模块分析\" class=\"headerlink\" title=\"模块分析\"></a>模块分析</h3><h4 id=\"server-js\"><a href=\"#server-js\" class=\"headerlink\" title=\"server.js\"></a><code>server.js</code></h4><p><code>server.js</code> 用于创建 <code>http</code> 服务器。</p>\n<p>一个基础的 <code>http</code> 服务器的构成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// request 是浏览器向服务器进行请求的相关信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// response 用于向对于发送信息的浏览器响应请求</span></span><br><span class=\"line\">  <span class=\"comment\">// 规定返回响应的 头部信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 http 状态码为 200 Content-type 为 text/plain 的 http 信息</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 response.write 向响应的主体中发送内容</span></span><br><span class=\"line\">  response.write();</span><br><span class=\"line\">  <span class=\"comment\">// 结束响应请求</span></span><br><span class=\"line\">  response.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的创建的基础的 <code>node.js</code> 服务器用于监听 8888 端口。</p>\n<p><code>node.js</code> 是基于事件驱动的, 也就是我们说的 <code>回调</code>， 上面的服务器中， 只要在  <code>8888</code> 端口处监听到事件发生, 则进行回调 <code>onRequest</code> 函数。</p>\n<p>在这个应用中，这样构建服务器模块:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 http 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 url 模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建一个 start 函数用于开启服务器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route, handle</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">    route(handle, pathname, response, request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 导出 start 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span>.start = start;</span><br></pre></td></tr></table></figure>\n<h4 id=\"router-js\"><a href=\"#router-js\" class=\"headerlink\" title=\"router.js\"></a><code>router.js</code></h4><p>在 <code>router.js</code> 存放在对于根据不同的路由切换函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">handle, pathname, response, request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[pathname] === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行 handle[pathname] 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// handle[pathname] 函数接收两个参数 response, request</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个启动的函数位于 requireHandler.js 中</span></span><br><span class=\"line\">    handle[pathname](response, request);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// http 状态 404 not found Content-type 设置 text/plain</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">404</span>, &#123; <span class=\"string\">'Content-type'</span>: <span class=\"string\">'text/plain'</span> &#125;);</span><br><span class=\"line\">    response.write(<span class=\"string\">'404 not found'</span>);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>.route = route;</span><br></pre></td></tr></table></figure>\n<h4 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a><code>index.js</code></h4><p>使用 <code>index.js</code> 用于对于各个模块进行集中处理:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 server, router, requestHandlers 模块</span></span><br><span class=\"line\"><span class=\"comment\">// server: 服务器模块</span></span><br><span class=\"line\"><span class=\"comment\">// router: 路由模块</span></span><br><span class=\"line\"><span class=\"comment\">// requestHandlers： 相应路由的处理函数模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestHandlers = <span class=\"built_in\">require</span>(<span class=\"string\">\"./requireHandlers\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于不同的路由进行不同的函数配置</span></span><br><span class=\"line\">handle[<span class=\"string\">'/'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/start'</span>] = requestHandlers.start;</span><br><span class=\"line\">handle[<span class=\"string\">'/upload'</span>] = requestHandlers.upload;</span><br><span class=\"line\">handle[<span class=\"string\">'/show'</span>] = requestHandlers.show;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务器</span></span><br><span class=\"line\">server.start(router.route, handle);</span><br></pre></td></tr></table></figure>\n<h4 id=\"requireHandler-js\"><a href=\"#requireHandler-js\" class=\"headerlink\" title=\"requireHandler.js\"></a><code>requireHandler.js</code></h4><p>这个模块用来个根据不同的路由进行不同的函数处理:</p>\n<p>对于上传数据的不同处理都是放在了这里面:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 formidable 用于处理文件上传的问题</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> body = <span class=\"string\">'&lt;html&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'content=\"text/html; charset=UTF-8\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/head&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;form action=\"/upload\" enctype=\"multipart/form-data\" '</span>+</span><br><span class=\"line\">\t<span class=\"string\">'method=\"post\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"file\" name=\"upload\"&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;input type=\"submit\" value=\"Upload file\" /&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/form&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/body&gt;'</span>+</span><br><span class=\"line\">\t<span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\tresponse.write(body);</span><br><span class=\"line\">\tresponse.end();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\">response, request</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(request, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, fields, files</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> readStream=fs.createReadStream(files.upload.path);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> writeStream=fs.createWriteStream(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;files.upload.name&#125;</span>`</span>);</span><br><span class=\"line\">\t\timgname = files.upload.name;</span><br><span class=\"line\">        readStream.pipe(writeStream);</span><br><span class=\"line\">        readStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t    fs.unlinkSync(files.upload.path);</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">'received image: &lt;br/&gt;'</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(files.upload.name);</span><br><span class=\"line\">        <span class=\"comment\">// src='/show' 调用 show 函数</span></span><br><span class=\"line\">\t\tresponse.write(<span class=\"string\">\"&lt;img src='/show'/&gt;\"</span>);</span><br><span class=\"line\">\t\tresponse.end();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show 函数用于文件显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">response, postData</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">`./assets/<span class=\"subst\">$&#123;imgname&#125;</span>`</span>, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, file</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果发生错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">500</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(error + <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"image/png\"</span>&#125;);</span><br><span class=\"line\">\t\t\tresponse.write(file, <span class=\"string\">\"binary\"</span>);</span><br><span class=\"line\">\t\t\tresponse.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.start = start;</span><br><span class=\"line\">exports.upload = upload;</span><br><span class=\"line\">exports.show = show;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>关于使用 <code>response.write</code> 的问题:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.write(chunk, [encoding]);</span><br><span class=\"line\"><span class=\"comment\">// encoding 表示编码形式</span></span><br></pre></td></tr></table></figure>\n"},{"title":"my first blog","date":"2017-08-18T13:50:01.000Z","_content":"这是我的第一篇博客:\n折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  \n\n为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。\n\n千里之行，始于足下\n\n ```\n\n ```","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2017-08-18 21:50:01\ntags: '0'\n---\n这是我的第一篇博客:\n折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  \n\n为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。\n\n千里之行，始于足下\n\n ```\n\n ```","slug":"my-first-blog","published":1,"updated":"2017-11-04T01:05:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh7z001hs33gmueuy9kw","content":"<p>这是我的第一篇博客:<br>折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  </p>\n<p>为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。</p>\n<p>千里之行，始于足下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>这是我的第一篇博客:<br>折腾来折腾去终于搭建起来github博客，还好中间没有遇到太大的问题，搭建过程也还算顺利。  </p>\n<p>为什么要写博客？为了记录下自己前端学习中的一些知识点，在写代码的过程中，总结经验，提高自己的编程水平，写下自己在编程中遇到的问题，思考，以及是如何解决的，不断提高自己。</p>\n<p>千里之行，始于足下</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"node.js Timers","date":"2017-12-19T14:41:55.000Z","_content":"\n###  `Timers`\n\n####  `APIS`\n\n#####  `setImmediate(callback, args)`  \n\n`callback` : 在 `node.js` 事件循环之后被调用的函数。  \n\n`args`: 当 `callback` 函数被调用的时候传递的参数。 \n\n在 `I / O` 事件回调时间之后立即执行 `callback` 回调函数的执行。\n\n如果 `callback` 不是一个 `function` , 会抛出一个 `TypeError` 错误。\n\n```javascript\nsetImmediate(function () {\n  console.log('事件稍后被执行');\n});\nconsole.log('事件立即被执行');\n// 事件立即被执行\n// 事件稍后被执行\n```\n\n#####  `setInterval(callback, delay, args)`  \n\n使用 `setInterval` 类似于使用 `setInterval` 方法, 在一定的时间间隔 `delay` 之后执行 `callback` 函数。  \n\n在官方给的例子中存在使用 `util.promisly()` 的一个变体。\n\n```javascript\nconst util = require('util');\nconst setTimeoutPromise = util.promisify(setTimeout);\nsetTimeoutPromise(4000, 'foobar').then((value) => {\n  console.log(value);\n});\n// after delay print 'foobar'\n```\n\n####  `canceling Timers`  \n\n使用 `setImmediate` `setInterval`  以及 `setTimeout` 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 `timer` 防止被触发的操作。  \n\n`clearImmediate`,  `clearInterval`,  `clearTimeout`  用来清除通过使用 `setImmedidate`  `setInterval` 以及 `setTimeout` 创建的定时器。\n\n```javascript\nlet immidate = setImmediate(function () {\n    console.log('事件之后被调用');\n});\nclearImmediate(immidate);\n// 清除事件， 事件之后不会调用\n\nclearInterval();\n// 清除间隔时间后的调用\nclearTimeout();\n// 清除一段时间之后的调用\n```\n\n","source":"_posts/node-js-Timers.md","raw":"---\ntitle: node.js Timers\ndate: 2017-12-19 22:41:55\ntags: Timers\ncategories: node.js\n---\n\n###  `Timers`\n\n####  `APIS`\n\n#####  `setImmediate(callback, args)`  \n\n`callback` : 在 `node.js` 事件循环之后被调用的函数。  \n\n`args`: 当 `callback` 函数被调用的时候传递的参数。 \n\n在 `I / O` 事件回调时间之后立即执行 `callback` 回调函数的执行。\n\n如果 `callback` 不是一个 `function` , 会抛出一个 `TypeError` 错误。\n\n```javascript\nsetImmediate(function () {\n  console.log('事件稍后被执行');\n});\nconsole.log('事件立即被执行');\n// 事件立即被执行\n// 事件稍后被执行\n```\n\n#####  `setInterval(callback, delay, args)`  \n\n使用 `setInterval` 类似于使用 `setInterval` 方法, 在一定的时间间隔 `delay` 之后执行 `callback` 函数。  \n\n在官方给的例子中存在使用 `util.promisly()` 的一个变体。\n\n```javascript\nconst util = require('util');\nconst setTimeoutPromise = util.promisify(setTimeout);\nsetTimeoutPromise(4000, 'foobar').then((value) => {\n  console.log(value);\n});\n// after delay print 'foobar'\n```\n\n####  `canceling Timers`  \n\n使用 `setImmediate` `setInterval`  以及 `setTimeout` 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 `timer` 防止被触发的操作。  \n\n`clearImmediate`,  `clearInterval`,  `clearTimeout`  用来清除通过使用 `setImmedidate`  `setInterval` 以及 `setTimeout` 创建的定时器。\n\n```javascript\nlet immidate = setImmediate(function () {\n    console.log('事件之后被调用');\n});\nclearImmediate(immidate);\n// 清除事件， 事件之后不会调用\n\nclearInterval();\n// 清除间隔时间后的调用\nclearTimeout();\n// 清除一段时间之后的调用\n```\n\n","slug":"node-js-Timers","published":1,"updated":"2017-12-23T02:42:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh82001ls33ggqjpbslr","content":"<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a><code>Timers</code></h3><h4 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a><code>APIS</code></h4><h5 id=\"setImmediate-callback-args\"><a href=\"#setImmediate-callback-args\" class=\"headerlink\" title=\"setImmediate(callback, args)\"></a><code>setImmediate(callback, args)</code></h5><p><code>callback</code> : 在 <code>node.js</code> 事件循环之后被调用的函数。  </p>\n<p><code>args</code>: 当 <code>callback</code> 函数被调用的时候传递的参数。 </p>\n<p>在 <code>I / O</code> 事件回调时间之后立即执行 <code>callback</code> 回调函数的执行。</p>\n<p>如果 <code>callback</code> 不是一个 <code>function</code> , 会抛出一个 <code>TypeError</code> 错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件稍后被执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'事件立即被执行'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 事件立即被执行</span></span><br><span class=\"line\"><span class=\"comment\">// 事件稍后被执行</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"setInterval-callback-delay-args\"><a href=\"#setInterval-callback-delay-args\" class=\"headerlink\" title=\"setInterval(callback, delay, args)\"></a><code>setInterval(callback, delay, args)</code></h5><p>使用 <code>setInterval</code> 类似于使用 <code>setInterval</code> 方法, 在一定的时间间隔 <code>delay</code> 之后执行 <code>callback</code> 函数。  </p>\n<p>在官方给的例子中存在使用 <code>util.promisly()</code> 的一个变体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTimeoutPromise = util.promisify(setTimeout);</span><br><span class=\"line\">setTimeoutPromise(<span class=\"number\">4000</span>, <span class=\"string\">'foobar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// after delay print 'foobar'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"canceling-Timers\"><a href=\"#canceling-Timers\" class=\"headerlink\" title=\"canceling Timers\"></a><code>canceling Timers</code></h4><p>使用 <code>setImmediate</code> <code>setInterval</code>  以及 <code>setTimeout</code> 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 <code>timer</code> 防止被触发的操作。  </p>\n<p><code>clearImmediate</code>,  <code>clearInterval</code>,  <code>clearTimeout</code>  用来清除通过使用 <code>setImmedidate</code>  <code>setInterval</code> 以及 <code>setTimeout</code> 创建的定时器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> immidate = setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件之后被调用'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">clearImmediate(immidate);</span><br><span class=\"line\"><span class=\"comment\">// 清除事件， 事件之后不会调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">clearInterval();</span><br><span class=\"line\"><span class=\"comment\">// 清除间隔时间后的调用</span></span><br><span class=\"line\">clearTimeout();</span><br><span class=\"line\"><span class=\"comment\">// 清除一段时间之后的调用</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a><code>Timers</code></h3><h4 id=\"APIS\"><a href=\"#APIS\" class=\"headerlink\" title=\"APIS\"></a><code>APIS</code></h4><h5 id=\"setImmediate-callback-args\"><a href=\"#setImmediate-callback-args\" class=\"headerlink\" title=\"setImmediate(callback, args)\"></a><code>setImmediate(callback, args)</code></h5><p><code>callback</code> : 在 <code>node.js</code> 事件循环之后被调用的函数。  </p>\n<p><code>args</code>: 当 <code>callback</code> 函数被调用的时候传递的参数。 </p>\n<p>在 <code>I / O</code> 事件回调时间之后立即执行 <code>callback</code> 回调函数的执行。</p>\n<p>如果 <code>callback</code> 不是一个 <code>function</code> , 会抛出一个 <code>TypeError</code> 错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件稍后被执行'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'事件立即被执行'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 事件立即被执行</span></span><br><span class=\"line\"><span class=\"comment\">// 事件稍后被执行</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"setInterval-callback-delay-args\"><a href=\"#setInterval-callback-delay-args\" class=\"headerlink\" title=\"setInterval(callback, delay, args)\"></a><code>setInterval(callback, delay, args)</code></h5><p>使用 <code>setInterval</code> 类似于使用 <code>setInterval</code> 方法, 在一定的时间间隔 <code>delay</code> 之后执行 <code>callback</code> 函数。  </p>\n<p>在官方给的例子中存在使用 <code>util.promisly()</code> 的一个变体。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> setTimeoutPromise = util.promisify(setTimeout);</span><br><span class=\"line\">setTimeoutPromise(<span class=\"number\">4000</span>, <span class=\"string\">'foobar'</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// after delay print 'foobar'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"canceling-Timers\"><a href=\"#canceling-Timers\" class=\"headerlink\" title=\"canceling Timers\"></a><code>canceling Timers</code></h4><p>使用 <code>setImmediate</code> <code>setInterval</code>  以及 <code>setTimeout</code> 每一个方法都会返回一个代表排列事件的对象, 这些能够用来取消 <code>timer</code> 防止被触发的操作。  </p>\n<p><code>clearImmediate</code>,  <code>clearInterval</code>,  <code>clearTimeout</code>  用来清除通过使用 <code>setImmedidate</code>  <code>setInterval</code> 以及 <code>setTimeout</code> 创建的定时器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> immidate = setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件之后被调用'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">clearImmediate(immidate);</span><br><span class=\"line\"><span class=\"comment\">// 清除事件， 事件之后不会调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">clearInterval();</span><br><span class=\"line\"><span class=\"comment\">// 清除间隔时间后的调用</span></span><br><span class=\"line\">clearTimeout();</span><br><span class=\"line\"><span class=\"comment\">// 清除一段时间之后的调用</span></span><br></pre></td></tr></table></figure>\n"},{"title":"promise 原理","date":"2017-12-05T15:04:14.000Z","_content":"\n使用 `promise` 构建异步请求在 `es6-promise` 中已经说过了，下面这章想要探究一下使用 `promise ` 的原理。\n\n使用 `promise `  的实例如下:\n\n`new Promise(function (resolve, reject) {....})`\n\n对于 `promise` 的执行过程是这样的:\n\n>executor 执行器:\n>\n>executor 是一个带有  `resolve` 和 `reject` 两个参数的函数, `executor` 函数 `promise` 构造函数执行的时候同步执行， 被传递 `resolve` 以及 `reject` 函数，`executor` 函数在 `Promise` 构造函数返回新建对象前被调用, `resolve` 和 `reject` 函数被调用的时候，分别将 `promise` 的状态改为 `fullfilled(完成)` 和 \n>\n>`rejected(完成)` `executor` 函数内部会执行异步操作，操作完成成功之后将 `promise` 状态改为 `fullfiled` 或者将发生错误的时候, 将  状态变为 `rejected`\n\n对于一个 `promise ` 对象具有下面三种状态:\n\n```javascript\npending: 初始状态，不是成功就是失败 // pending 英文: 等待，表示处于等待异步处理结果的状态\nfufilled 等待结果操作成功完成\nrejected 表示等待操作结果失败\n```\n\n下面是通过使用 `promise` 进行调用的状态图:\n\n!['promise 状态'](https://mdn.mozillademos.org/files/8633/promises.png)\n\n###  `promise` 代码\n\n#### 构建 `Promise` 构造函数\n\n`es6`:\n\n```javascript\nlet p = new Promise((resovle, reject) => {\n  // 异步操作\n  if () {\n  // resolve(value)    \n    resolve(value);\n  } else {\n // reject(value)      \n    reject(value);\n  }\n})\n```\n\n实际源码:\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n#####  改变状态函数\n\n`es6`:\n\n```javascript\nresolve(value);\n\nreject(value);\n```\n\n实际源码:\n\n```javascript\nPromise.prototpe.transition = function (status, value) {\n  if (this.status === PENDING) {\n    // 当处于 PENDDING 状态的时候执行函数\n    this.status = status;\n    this.value = value;\n    // 当成功或者失败的时候都会执行 this.process() 函数\n    this.process();\n  }\n}\n```\n\n#### `then` \n\n`es6`: \n\n```javascript\np.then(onFulFilled, onRejected);\n// onFulFilled 成功之后执行的函数\n// onRejected 失败之后执行的函数\n```\n\n源码分析:\n\n```javascript\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  // thenPromise 是一个新的 Promise 对象\n  let thenPromsie = new Promise(function() {});\n  // 将执行的函数存入到 handlerQueue 数组之中\n  this.handlerQueue.push({\n    // 成功函数\n    onFulfilled,\n    // 失败函数\n    onRejected,\n    thenPromise\n  });\n  // this.process() 执行函数\n  this.process();\n  // 返回 thenPromise 一个新的 promise 对象\n  return thenPromise;\n}\n```\n\n####  `process`处理函数\n\n用来执行成功时的回调函数以及失败的回调函数。  \n\n`es6`:  \n\n```javascript\np.then(function () {\n  // 成功函数执行\n}, function () {\n  // 失败函数执行\n})\n```\n\n源码如下:\n\n```javascript\n// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数\nPromise.prototype.process = function () {\n  let that = this;\n  // 如果状态处于 PENDING 状态 返回\n  if (that.status === PENDING) {\n    return;\n  }\n  while (that.handlerQueeu.length > 0) {\n    let handler = that.handlerQueue.shift();\n    (function (handler) {\n      let handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;\n      // 如果 handlerFn 是一个函数\n      if (isFunction(handlerFn)) {\n        // 使用 callLater 回调函数执行\n        callLater(function () {\n          try {\n            // 执行 handlerFn 函数\n            let x = handlerFn(that.value);\n            // 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数\n            resolve(handler.thenPromise, x);\n          } catch (e) {\n            // 如果 catch error\n            handler.thenPromise.transition(REJECTED, e);\n          }\n        });\n      } else {\n        handler.thenPromise.transition(that.status, that.value);\n      }\n    })(handler);\n  }\n}\n```\n\n#### `resolve`\n\n`resovle` 函数用于函数执行完毕之后改变状态:\n\n```javascript\nfunction resovle(promise, x) {\n  if (promise === x) {\n    promise.transition(REJECTED, new TypeError());\n    // 如果 x 是一个 promise\n  } else if (isPromise(x)) {\n    // 调用 x 的 then 方法\n    x.then(function(value) {\n      promise.transition(FULFILLED, value);\n    }, function(reason) {\n      promise.transition(REJECTED, reason);\n    } );\n    // 如果函数执行之后的返回值是一个对象或者一个函数\n  } else if (isObject(x) || isFunction(x)) {\n    try {\n      let then = x.then;\n      // 如果 then 是一个函数\n      // 参数具有 then 方法的对象\n      if (isFunction(then)) {\n        let called = false;\n        try {\n          then.call(x, function(y) {\n            if (!called) {\n              resolve(promise, y);\n              called = true;\n            }\n          }, function (r) {\n            if (!called) {\n              promise.transition(REJECTED, r);\n              called = true;\n            }\n          });\n        } catch (e) {\n          if (!called) {\n            promise.transition(REJECTED, e);\n          }\n        }\n      } else {\n        promise.transition(FULFILLED, x);\n      }\n    } catch (e) {\n      promise.transition(REJECTED, x);\n    }\n  // 如果 x 只是一个数值  \n  } else {\n    promise.transition(FULFILLED, x);\n  }\n}\n```\n\n####  `promsie.resolve`\n\n>对于 `promise.resolve` 的状态，存在下面几种情况:\n>\n>1. 如果参数是 Promise 实例，那么`Promise.resolve`将不做任何修改、原封不动地返回这个实例。\n>2. 如果参数是一个具有 `then` 方法的对象, 使用 `promise.resolve` 会将这个对象转化为 `promise` 对象，并且立即执行 `thenable` 对象的 `then` 方法。\n>3. 如果参数是一个原始值，或者是一个不具有`then`方法的对象，则`Promise.resolve`方法返回一个新的 Promise 对象，状态为`resolved`。\n>4. 如果不带参数, 直接返回一个 `resolve` 状态的 Promise 对象。\n\n实现代码如下:\n\n```javascript\nPromise.resolve = function(value) {\n  // 返回一个 new Promise\n  return new Promise(function(resolve, reject) {\n    if (isThenable(value)) {\n      // 如果 value 是一个 then 对象\n      // 如果 value 具有 then 方法，执行下面的函数\n      value.then(resolve, reject);\n    } else {\n      // else 执行 resolve 函数\n      resolve(value);\n    }\n  });\n}\n```\n\n####  `promise.reject`\n\n```javascript\nPromise.reject = function(reason) {\n  return new Promise(function(resolve, reject) {\n    reject(reason);\n  }}\n}\n```\n\n使用 `Promise.reject` 接收的参数 `reason `会被作为 `error` 传递 \n\n####  other\n\n```javascript\n// 定义 promise 的三种状态\n// PENDING, FULFILLED  REJECTED\nlet PENDING = 0;\n    FULFILLED = 1;\n    REJECTED = 2;\nfunction isFunction(fn) {\n  return fn instanceof Function;\n}\n\nfunction isObject(obj) {\n  return obj instanceof Object;\n}\n\nfunction isPromise() {\n  return p instanceof Promise;\n}\n\nfunction isThenable(obj) {\n  return obj && isFunction(obj.then);\n}\n// 借用 callLater 实现异步\nfunction callLater(fn) {\n  setTimeout(fn, 0);\n}\n```\n\n","source":"_posts/promise.md","raw":"---\ntitle: promise 原理\ndate: 2017-12-05 23:04:14\ntags: promise\ncategories: 代码集\n---\n\n使用 `promise` 构建异步请求在 `es6-promise` 中已经说过了，下面这章想要探究一下使用 `promise ` 的原理。\n\n使用 `promise `  的实例如下:\n\n`new Promise(function (resolve, reject) {....})`\n\n对于 `promise` 的执行过程是这样的:\n\n>executor 执行器:\n>\n>executor 是一个带有  `resolve` 和 `reject` 两个参数的函数, `executor` 函数 `promise` 构造函数执行的时候同步执行， 被传递 `resolve` 以及 `reject` 函数，`executor` 函数在 `Promise` 构造函数返回新建对象前被调用, `resolve` 和 `reject` 函数被调用的时候，分别将 `promise` 的状态改为 `fullfilled(完成)` 和 \n>\n>`rejected(完成)` `executor` 函数内部会执行异步操作，操作完成成功之后将 `promise` 状态改为 `fullfiled` 或者将发生错误的时候, 将  状态变为 `rejected`\n\n对于一个 `promise ` 对象具有下面三种状态:\n\n```javascript\npending: 初始状态，不是成功就是失败 // pending 英文: 等待，表示处于等待异步处理结果的状态\nfufilled 等待结果操作成功完成\nrejected 表示等待操作结果失败\n```\n\n下面是通过使用 `promise` 进行调用的状态图:\n\n!['promise 状态'](https://mdn.mozillademos.org/files/8633/promises.png)\n\n###  `promise` 代码\n\n#### 构建 `Promise` 构造函数\n\n`es6`:\n\n```javascript\nlet p = new Promise((resovle, reject) => {\n  // 异步操作\n  if () {\n  // resolve(value)    \n    resolve(value);\n  } else {\n // reject(value)      \n    reject(value);\n  }\n})\n```\n\n实际源码:\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n#####  改变状态函数\n\n`es6`:\n\n```javascript\nresolve(value);\n\nreject(value);\n```\n\n实际源码:\n\n```javascript\nPromise.prototpe.transition = function (status, value) {\n  if (this.status === PENDING) {\n    // 当处于 PENDDING 状态的时候执行函数\n    this.status = status;\n    this.value = value;\n    // 当成功或者失败的时候都会执行 this.process() 函数\n    this.process();\n  }\n}\n```\n\n#### `then` \n\n`es6`: \n\n```javascript\np.then(onFulFilled, onRejected);\n// onFulFilled 成功之后执行的函数\n// onRejected 失败之后执行的函数\n```\n\n源码分析:\n\n```javascript\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  // thenPromise 是一个新的 Promise 对象\n  let thenPromsie = new Promise(function() {});\n  // 将执行的函数存入到 handlerQueue 数组之中\n  this.handlerQueue.push({\n    // 成功函数\n    onFulfilled,\n    // 失败函数\n    onRejected,\n    thenPromise\n  });\n  // this.process() 执行函数\n  this.process();\n  // 返回 thenPromise 一个新的 promise 对象\n  return thenPromise;\n}\n```\n\n####  `process`处理函数\n\n用来执行成功时的回调函数以及失败的回调函数。  \n\n`es6`:  \n\n```javascript\np.then(function () {\n  // 成功函数执行\n}, function () {\n  // 失败函数执行\n})\n```\n\n源码如下:\n\n```javascript\n// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数\nPromise.prototype.process = function () {\n  let that = this;\n  // 如果状态处于 PENDING 状态 返回\n  if (that.status === PENDING) {\n    return;\n  }\n  while (that.handlerQueeu.length > 0) {\n    let handler = that.handlerQueue.shift();\n    (function (handler) {\n      let handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;\n      // 如果 handlerFn 是一个函数\n      if (isFunction(handlerFn)) {\n        // 使用 callLater 回调函数执行\n        callLater(function () {\n          try {\n            // 执行 handlerFn 函数\n            let x = handlerFn(that.value);\n            // 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数\n            resolve(handler.thenPromise, x);\n          } catch (e) {\n            // 如果 catch error\n            handler.thenPromise.transition(REJECTED, e);\n          }\n        });\n      } else {\n        handler.thenPromise.transition(that.status, that.value);\n      }\n    })(handler);\n  }\n}\n```\n\n#### `resolve`\n\n`resovle` 函数用于函数执行完毕之后改变状态:\n\n```javascript\nfunction resovle(promise, x) {\n  if (promise === x) {\n    promise.transition(REJECTED, new TypeError());\n    // 如果 x 是一个 promise\n  } else if (isPromise(x)) {\n    // 调用 x 的 then 方法\n    x.then(function(value) {\n      promise.transition(FULFILLED, value);\n    }, function(reason) {\n      promise.transition(REJECTED, reason);\n    } );\n    // 如果函数执行之后的返回值是一个对象或者一个函数\n  } else if (isObject(x) || isFunction(x)) {\n    try {\n      let then = x.then;\n      // 如果 then 是一个函数\n      // 参数具有 then 方法的对象\n      if (isFunction(then)) {\n        let called = false;\n        try {\n          then.call(x, function(y) {\n            if (!called) {\n              resolve(promise, y);\n              called = true;\n            }\n          }, function (r) {\n            if (!called) {\n              promise.transition(REJECTED, r);\n              called = true;\n            }\n          });\n        } catch (e) {\n          if (!called) {\n            promise.transition(REJECTED, e);\n          }\n        }\n      } else {\n        promise.transition(FULFILLED, x);\n      }\n    } catch (e) {\n      promise.transition(REJECTED, x);\n    }\n  // 如果 x 只是一个数值  \n  } else {\n    promise.transition(FULFILLED, x);\n  }\n}\n```\n\n####  `promsie.resolve`\n\n>对于 `promise.resolve` 的状态，存在下面几种情况:\n>\n>1. 如果参数是 Promise 实例，那么`Promise.resolve`将不做任何修改、原封不动地返回这个实例。\n>2. 如果参数是一个具有 `then` 方法的对象, 使用 `promise.resolve` 会将这个对象转化为 `promise` 对象，并且立即执行 `thenable` 对象的 `then` 方法。\n>3. 如果参数是一个原始值，或者是一个不具有`then`方法的对象，则`Promise.resolve`方法返回一个新的 Promise 对象，状态为`resolved`。\n>4. 如果不带参数, 直接返回一个 `resolve` 状态的 Promise 对象。\n\n实现代码如下:\n\n```javascript\nPromise.resolve = function(value) {\n  // 返回一个 new Promise\n  return new Promise(function(resolve, reject) {\n    if (isThenable(value)) {\n      // 如果 value 是一个 then 对象\n      // 如果 value 具有 then 方法，执行下面的函数\n      value.then(resolve, reject);\n    } else {\n      // else 执行 resolve 函数\n      resolve(value);\n    }\n  });\n}\n```\n\n####  `promise.reject`\n\n```javascript\nPromise.reject = function(reason) {\n  return new Promise(function(resolve, reject) {\n    reject(reason);\n  }}\n}\n```\n\n使用 `Promise.reject` 接收的参数 `reason `会被作为 `error` 传递 \n\n####  other\n\n```javascript\n// 定义 promise 的三种状态\n// PENDING, FULFILLED  REJECTED\nlet PENDING = 0;\n    FULFILLED = 1;\n    REJECTED = 2;\nfunction isFunction(fn) {\n  return fn instanceof Function;\n}\n\nfunction isObject(obj) {\n  return obj instanceof Object;\n}\n\nfunction isPromise() {\n  return p instanceof Promise;\n}\n\nfunction isThenable(obj) {\n  return obj && isFunction(obj.then);\n}\n// 借用 callLater 实现异步\nfunction callLater(fn) {\n  setTimeout(fn, 0);\n}\n```\n\n","slug":"promise","published":1,"updated":"2017-12-16T13:09:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh83001os33g2xcpc8v4","content":"<p>使用 <code>promise</code> 构建异步请求在 <code>es6-promise</code> 中已经说过了，下面这章想要探究一下使用 <code>promise</code> 的原理。</p>\n<p>使用 <code>promise</code>  的实例如下:</p>\n<p><code>new Promise(function (resolve, reject) {....})</code></p>\n<p>对于 <code>promise</code> 的执行过程是这样的:</p>\n<blockquote>\n<p>executor 执行器:</p>\n<p>executor 是一个带有  <code>resolve</code> 和 <code>reject</code> 两个参数的函数, <code>executor</code> 函数 <code>promise</code> 构造函数执行的时候同步执行， 被传递 <code>resolve</code> 以及 <code>reject</code> 函数，<code>executor</code> 函数在 <code>Promise</code> 构造函数返回新建对象前被调用, <code>resolve</code> 和 <code>reject</code> 函数被调用的时候，分别将 <code>promise</code> 的状态改为 <code>fullfilled(完成)</code> 和 </p>\n<p><code>rejected(完成)</code> <code>executor</code> 函数内部会执行异步操作，操作完成成功之后将 <code>promise</code> 状态改为 <code>fullfiled</code> 或者将发生错误的时候, 将  状态变为 <code>rejected</code></p>\n</blockquote>\n<p>对于一个 <code>promise</code> 对象具有下面三种状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending: 初始状态，不是成功就是失败 <span class=\"comment\">// pending 英文: 等待，表示处于等待异步处理结果的状态</span></span><br><span class=\"line\">fufilled 等待结果操作成功完成</span><br><span class=\"line\">rejected 表示等待操作结果失败</span><br></pre></td></tr></table></figure>\n<p>下面是通过使用 <code>promise</code> 进行调用的状态图:</p>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"&#39;promise 状态&#39;\"></p>\n<h3 id=\"promise-代码\"><a href=\"#promise-代码\" class=\"headerlink\" title=\"promise 代码\"></a><code>promise</code> 代码</h3><h4 id=\"构建-Promise-构造函数\"><a href=\"#构建-Promise-构造函数\" class=\"headerlink\" title=\"构建 Promise 构造函数\"></a>构建 <code>Promise</code> 构造函数</h4><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve(value)    </span></span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// reject(value)      </span></span><br><span class=\"line\">    reject(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"改变状态函数\"><a href=\"#改变状态函数\" class=\"headerlink\" title=\"改变状态函数\"></a>改变状态函数</h5><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve(value);</span><br><span class=\"line\"></span><br><span class=\"line\">reject(value);</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototpe.transition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当处于 PENDDING 状态的时候执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"comment\">// 当成功或者失败的时候都会执行 this.process() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a><code>then</code></h4><p><code>es6</code>: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(onFulFilled, onRejected);</span><br><span class=\"line\"><span class=\"comment\">// onFulFilled 成功之后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// onRejected 失败之后执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// thenPromise 是一个新的 Promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> thenPromsie = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将执行的函数存入到 handlerQueue 数组之中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerQueue.push(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数</span></span><br><span class=\"line\">    onFulfilled,</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数</span></span><br><span class=\"line\">    onRejected,</span><br><span class=\"line\">    thenPromise</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// this.process() 执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  <span class=\"comment\">// 返回 thenPromise 一个新的 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"process处理函数\"><a href=\"#process处理函数\" class=\"headerlink\" title=\"process处理函数\"></a><code>process</code>处理函数</h4><p>用来执行成功时的回调函数以及失败的回调函数。  </p>\n<p><code>es6</code>:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 成功函数执行</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败函数执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果状态处于 PENDING 状态 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (that.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (that.handlerQueeu.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = that.handlerQueue.shift();</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 handlerFn 是一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(handlerFn)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 callLater 回调函数执行</span></span><br><span class=\"line\">        callLater(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行 handlerFn 函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = handlerFn(that.value);</span><br><span class=\"line\">            <span class=\"comment\">// 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数</span></span><br><span class=\"line\">            resolve(handler.thenPromise, x);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 catch error</span></span><br><span class=\"line\">            handler.thenPromise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler.thenPromise.transition(that.status, that.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a><code>resolve</code></h4><p><code>resovle</code> 函数用于函数执行完毕之后改变状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resovle</span>(<span class=\"params\">promise, x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    promise.transition(REJECTED, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是一个 promise</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPromise(x)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 x 的 then 方法</span></span><br><span class=\"line\">    x.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(FULFILLED, value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(REJECTED, reason);</span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数执行之后的返回值是一个对象或者一个函数</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 then 是一个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数具有 then 方法的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          then.call(x, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              resolve(promise, y);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              promise.transition(REJECTED, r);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">            promise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promise.transition(FULFILLED, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      promise.transition(REJECTED, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 x 只是一个数值  </span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    promise.transition(FULFILLED, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promsie-resolve\"><a href=\"#promsie-resolve\" class=\"headerlink\" title=\"promsie.resolve\"></a><code>promsie.resolve</code></h4><blockquote>\n<p>对于 <code>promise.resolve</code> 的状态，存在下面几种情况:</p>\n<ol>\n<li>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</li>\n<li>如果参数是一个具有 <code>then</code> 方法的对象, 使用 <code>promise.resolve</code> 会将这个对象转化为 <code>promise</code> 对象，并且立即执行 <code>thenable</code> 对象的 <code>then</code> 方法。</li>\n<li>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</li>\n<li>如果不带参数, 直接返回一个 <code>resolve</code> 状态的 Promise 对象。</li>\n</ol>\n</blockquote>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 new Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThenable(value)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是一个 then 对象</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 具有 then 方法，执行下面的函数</span></span><br><span class=\"line\">      value.then(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// else 执行 resolve 函数</span></span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-reject\"><a href=\"#promise-reject\" class=\"headerlink\" title=\"promise.reject\"></a><code>promise.reject</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Promise.reject</code> 接收的参数 <code>reason</code>会被作为 <code>error</code> 传递 </p>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 promise 的三种状态</span></span><br><span class=\"line\"><span class=\"comment\">// PENDING, FULFILLED  REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\">    FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\">    REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isThenable</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj &amp;&amp; isFunction(obj.then);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 借用 callLater 实现异步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callLater</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 <code>promise</code> 构建异步请求在 <code>es6-promise</code> 中已经说过了，下面这章想要探究一下使用 <code>promise</code> 的原理。</p>\n<p>使用 <code>promise</code>  的实例如下:</p>\n<p><code>new Promise(function (resolve, reject) {....})</code></p>\n<p>对于 <code>promise</code> 的执行过程是这样的:</p>\n<blockquote>\n<p>executor 执行器:</p>\n<p>executor 是一个带有  <code>resolve</code> 和 <code>reject</code> 两个参数的函数, <code>executor</code> 函数 <code>promise</code> 构造函数执行的时候同步执行， 被传递 <code>resolve</code> 以及 <code>reject</code> 函数，<code>executor</code> 函数在 <code>Promise</code> 构造函数返回新建对象前被调用, <code>resolve</code> 和 <code>reject</code> 函数被调用的时候，分别将 <code>promise</code> 的状态改为 <code>fullfilled(完成)</code> 和 </p>\n<p><code>rejected(完成)</code> <code>executor</code> 函数内部会执行异步操作，操作完成成功之后将 <code>promise</code> 状态改为 <code>fullfiled</code> 或者将发生错误的时候, 将  状态变为 <code>rejected</code></p>\n</blockquote>\n<p>对于一个 <code>promise</code> 对象具有下面三种状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pending: 初始状态，不是成功就是失败 <span class=\"comment\">// pending 英文: 等待，表示处于等待异步处理结果的状态</span></span><br><span class=\"line\">fufilled 等待结果操作成功完成</span><br><span class=\"line\">rejected 表示等待操作结果失败</span><br></pre></td></tr></table></figure>\n<p>下面是通过使用 <code>promise</code> 进行调用的状态图:</p>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"&#39;promise 状态&#39;\"></p>\n<h3 id=\"promise-代码\"><a href=\"#promise-代码\" class=\"headerlink\" title=\"promise 代码\"></a><code>promise</code> 代码</h3><h4 id=\"构建-Promise-构造函数\"><a href=\"#构建-Promise-构造函数\" class=\"headerlink\" title=\"构建 Promise 构造函数\"></a>构建 <code>Promise</code> 构造函数</h4><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovle, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve(value)    </span></span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// reject(value)      </span></span><br><span class=\"line\">    reject(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"改变状态函数\"><a href=\"#改变状态函数\" class=\"headerlink\" title=\"改变状态函数\"></a>改变状态函数</h5><p><code>es6</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve(value);</span><br><span class=\"line\"></span><br><span class=\"line\">reject(value);</span><br></pre></td></tr></table></figure>\n<p>实际源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototpe.transition = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当处于 PENDDING 状态的时候执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = status;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"comment\">// 当成功或者失败的时候都会执行 this.process() 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a><code>then</code></h4><p><code>es6</code>: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(onFulFilled, onRejected);</span><br><span class=\"line\"><span class=\"comment\">// onFulFilled 成功之后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">// onRejected 失败之后执行的函数</span></span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// thenPromise 是一个新的 Promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> thenPromsie = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将执行的函数存入到 handlerQueue 数组之中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerQueue.push(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数</span></span><br><span class=\"line\">    onFulfilled,</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数</span></span><br><span class=\"line\">    onRejected,</span><br><span class=\"line\">    thenPromise</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// this.process() 执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.process();</span><br><span class=\"line\">  <span class=\"comment\">// 返回 thenPromise 一个新的 promise 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> thenPromise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"process处理函数\"><a href=\"#process处理函数\" class=\"headerlink\" title=\"process处理函数\"></a><code>process</code>处理函数</h4><p>用来执行成功时的回调函数以及失败的回调函数。  </p>\n<p><code>es6</code>:  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 成功函数执行</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败函数执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 process 的主要目的是执行保存在 this.handlerQueue 中的函数</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.process = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 如果状态处于 PENDING 状态 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (that.status === PENDING) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (that.handlerQueeu.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> handler = that.handlerQueue.shift();</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> handlerFn = that.status === FULFILLED ? handler.onFulfilled : handler.onRejected;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 handlerFn 是一个函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(handlerFn)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 callLater 回调函数执行</span></span><br><span class=\"line\">        callLater(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行 handlerFn 函数</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = handlerFn(that.value);</span><br><span class=\"line\">            <span class=\"comment\">// 将 handler.thenPromise 以及 handlerFn 计算之后的 x 传入 resolve 函数</span></span><br><span class=\"line\">            resolve(handler.thenPromise, x);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 catch error</span></span><br><span class=\"line\">            handler.thenPromise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        handler.thenPromise.transition(that.status, that.value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(handler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"resolve\"><a href=\"#resolve\" class=\"headerlink\" title=\"resolve\"></a><code>resolve</code></h4><p><code>resovle</code> 函数用于函数执行完毕之后改变状态:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resovle</span>(<span class=\"params\">promise, x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === x) &#123;</span><br><span class=\"line\">    promise.transition(REJECTED, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 如果 x 是一个 promise</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPromise(x)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 x 的 then 方法</span></span><br><span class=\"line\">    x.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(FULFILLED, value);</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">      promise.transition(REJECTED, reason);</span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">    <span class=\"comment\">// 如果函数执行之后的返回值是一个对象或者一个函数</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 then 是一个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数具有 then 方法的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(then)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          then.call(x, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              resolve(promise, y);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">              promise.transition(REJECTED, r);</span><br><span class=\"line\">              called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!called) &#123;</span><br><span class=\"line\">            promise.transition(REJECTED, e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        promise.transition(FULFILLED, x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      promise.transition(REJECTED, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 x 只是一个数值  </span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    promise.transition(FULFILLED, x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promsie-resolve\"><a href=\"#promsie-resolve\" class=\"headerlink\" title=\"promsie.resolve\"></a><code>promsie.resolve</code></h4><blockquote>\n<p>对于 <code>promise.resolve</code> 的状态，存在下面几种情况:</p>\n<ol>\n<li>如果参数是 Promise 实例，那么<code>Promise.resolve</code>将不做任何修改、原封不动地返回这个实例。</li>\n<li>如果参数是一个具有 <code>then</code> 方法的对象, 使用 <code>promise.resolve</code> 会将这个对象转化为 <code>promise</code> 对象，并且立即执行 <code>thenable</code> 对象的 <code>then</code> 方法。</li>\n<li>如果参数是一个原始值，或者是一个不具有<code>then</code>方法的对象，则<code>Promise.resolve</code>方法返回一个新的 Promise 对象，状态为<code>resolved</code>。</li>\n<li>如果不带参数, 直接返回一个 <code>resolve</code> 状态的 Promise 对象。</li>\n</ol>\n</blockquote>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 new Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isThenable(value)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 是一个 then 对象</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果 value 具有 then 方法，执行下面的函数</span></span><br><span class=\"line\">      value.then(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// else 执行 resolve 函数</span></span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"promise-reject\"><a href=\"#promise-reject\" class=\"headerlink\" title=\"promise.reject\"></a><code>promise.reject</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    reject(reason);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Promise.reject</code> 接收的参数 <code>reason</code>会被作为 <code>error</code> 传递 </p>\n<h4 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义 promise 的三种状态</span></span><br><span class=\"line\"><span class=\"comment\">// PENDING, FULFILLED  REJECTED</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> PENDING = <span class=\"number\">0</span>;</span><br><span class=\"line\">    FULFILLED = <span class=\"number\">1</span>;</span><br><span class=\"line\">    REJECTED = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isThenable</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj &amp;&amp; isFunction(obj.then);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 借用 callLater 实现异步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callLater</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(fn, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"tooltip 的实现","date":"2018-05-08T16:45:46.000Z","_content":"\n在业务上实现了一个类似于 `el-tooltip` 的方法，类似于下面这种情况：\n\n业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 `el-tooltip` 的实现方法，但是对于每一个标签上都添加上 `el-tooltip` 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 `toolTip.js` 的具体代码如下：\n\n```javascript\n// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的\nimport Util from \"./util\";\nconst getScrollRoot = () => {\n    return document.documentElement.querySelector(\".el-dialog__wrapper\");\n};\nlet instancePool = [];\n\n// 定义 tip instance 方法\nconst instanceAction = () => {\n    const push = (instance) => {\n        instancePool.push(instance);\n    };\n    return {\n        pushInstance: push\n    };\n};\n// 获取到绑定元素在当前页面上距离左边的距离\nconst getElementViewLeft = (element) => {\n    let actualLeft = element.offsetLeft;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualLeft += current.offsetLeft;\n        current = current.offsetParent;\n    }\n    return actualLeft;\n};\n\n// 获取到绑定元素在当前页面上位置高度\nconst getElementViewTop = (element) => {\n    let actualTop = element.offsetTop;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualTop += current.offsetTop;\n        current = current.offsetParent;\n    }\n    return actualTop;\n};\n\nfunction tooltip(el, opt) {\n    const items = el.querySelectorAll(\".el-form-item\");\n    for (const item of items) {\n        const target = item.firstChild;\n        // 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null\n        if (target.className) {\n            // 将每一个需要显示标签的实例信息压入\n            instanceAction().pushInstance({ tip: null, target, message: target.innerText, offset: 0, class: \"vk-tooltip\" });\n        }\n    }\n    this.scrollListener = null;\n    this.mouseenterListener = null;\n    this.mouseleaveListener = null;\n    this.init();\n    // target：传入的DOM\n    // this.target = el;\n    // tip：用来放初始化创建的tip元素\n    // this.tip = null;\n    // this.message = (opt && opt.msg) || this.target.innerText;\n    // this.offset = (opt && +opt.offset) || 0;\n    // this.class = \"vk-tooltip\";\n    // instanceAction.push();\n    // this.init();\n}\n\ntooltip.prototype = {\n    // 初始化tip，添加事件监听\n    init: function () {\n        const me = this;\n        const root = getScrollRoot();\n        // 鼠标进入才创建标签\n        for (let instance of instancePool) {\n            const { target, tip, message, offset } = instance;\n            // 滚动监听事件\n            // 鼠标移入监听事件\n            // 鼠标移除监听事件\n            if (message.length < 6) continue;\n            this.mouseenterListener = Util.listener(target, \"mouseenter\", () => {\n                instance = me.createTip(instance);\n                instance.tip.style.opacity = 1;\n                this.scrollListener = Util.listener(root, \"scroll\", () => {\n                    me.setTipPlace(instance.tip, instance.target, instance.offset);\n                    instance.tip.style.opacity = 0;\n                });\n                this.scrollListener.listen();\n            });\n            this.mouseenterListener.listen();\n            this.mouseleaveListener = Util.listener(target, \"mouseleave\", () => {\n                instance.tip.style.opacity = 0;\n                this.scrollListener.remove();\n            });\n            this.mouseleaveListener.listen();\n        }\n    },\n\n    createTip(instance) {\n        const me = this;\n        const poppup = \"<div class='triangle-down'></div>\";\n        const cache = document.getElementsByClassName(instance.class);\n        // 如果存在一个tip标签则使用该标签\n        instance.tip = cache.length ? cache[0] : document.createElement(\"div\");\n        instance.tip.className = instance.class;\n        instance.tip.innerHTML = `${instance.message}${poppup}`;\n        document.body.appendChild(instance.tip);\n        if (!me.tip) {\n            me.tip = instance.tip;\n        }\n        me.setTipPlace(instance.tip, instance.target, instance.offset);\n        return instance;\n    },\n\n    // 设置tip显示的位置\n    setTipPlace: function (tip, target, offset) {\n        const root = getScrollRoot();\n        const distance = (tip.clientWidth - target.clientWidth) / 2;\n        const pageX = `${getElementViewLeft(target) - root.scrollLeft - distance + offset}px`;\n        const pageY = `${getElementViewTop(target) - target.clientHeight - root.scrollTop}px`;\n        tip.style.left = pageX;\n        tip.style.top = pageY;\n    },\n    clear: function () {\n        instancePool = [];\n        if (this.tip) {\n            this.tip.parentNode.removeChild(this.tip);\n        }\n        this.mouseenterListener.remove();\n        this.mouseleaveListener.remove();\n        this.mouseenterListener = null;\n        this.mouseleaveListener = null;\n        this.scrollListener = null;\n    }\n};\n\nexport default tooltip;\n\n\n// /**\n//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示\n//  * @example <div v-tips>此处为被缩略的文本内容</div>\n//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量\n//  * 在元素插入DOM时，创建tooltip实例。\n//  */\n// Vue.directive(\"tips\", {\n//     bind: (el) => {\n//         console.log(el);\n//     },\n//     // 当绑定元素插入到 DOM 中。\n//     inserted: (el, { value }) => {\n//         // 暂时针对el-form的label标签，所以指定firsChild\n//         this.instance = new VkTooltip(el.firstChild, value);\n//     },\n//     // 解除绑定的时候清除实例以及标签,清除事件监听\n//     unbind: (el) => {\n//         this.instance.clear();\n//     }\n// });\n// Util listen 函数\nUtil.listen = (target, eventType, callback) => {\n    if (target.addEventListener) {\n      return {\n          listen: {\n            target.addEventListener(eventType, callback, false);\n          },\n          remove: {\n            target.removeEventListener(eventType, callback, false);\n      \t  }\n      }\n    } else if (target.attachEvent) {\n      listen: {\n          target.attachEvent('on' + eventType, callback);\n      },\n      remove: {\n          target.detachEvent('on' + eventType, callback);\n      }\n    }\n}\n```\n\n使用的时候， 这个函数被作为指令在 `main.js` 中引入：\n\n```javascript\nimport VKTooltip from \"@/assets/js/tooltip\";\nVue.directive(\"tips\", {\n  bind: (el) => {\n  },\n  inserted: (el, { value }) => {\n    this.instance = new VKTooltip(el, value);\n  },\n  unbind: (el) => {\n    this. instance.clear();\n  }\n});\n```\n\n关于在 `vue.js` 中自定义指令的使用， 可以查看`vue.js` 官网， [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html#ad)\n\n需要注意的知识点：\n\n1. 对于页面元素各个位置的理解\n2. js 基础一定要熟悉","source":"_posts/tooltip-的实现.md","raw":"---\ntitle: tooltip 的实现\ndate: 2018-05-09 00:45:46\ntags: toolTip\ncategories: 代码集\n---\n\n在业务上实现了一个类似于 `el-tooltip` 的方法，类似于下面这种情况：\n\n业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 `el-tooltip` 的实现方法，但是对于每一个标签上都添加上 `el-tooltip` 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 `toolTip.js` 的具体代码如下：\n\n```javascript\n// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的\nimport Util from \"./util\";\nconst getScrollRoot = () => {\n    return document.documentElement.querySelector(\".el-dialog__wrapper\");\n};\nlet instancePool = [];\n\n// 定义 tip instance 方法\nconst instanceAction = () => {\n    const push = (instance) => {\n        instancePool.push(instance);\n    };\n    return {\n        pushInstance: push\n    };\n};\n// 获取到绑定元素在当前页面上距离左边的距离\nconst getElementViewLeft = (element) => {\n    let actualLeft = element.offsetLeft;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualLeft += current.offsetLeft;\n        current = current.offsetParent;\n    }\n    return actualLeft;\n};\n\n// 获取到绑定元素在当前页面上位置高度\nconst getElementViewTop = (element) => {\n    let actualTop = element.offsetTop;\n    let current = element.offsetParent;\n\n    while (current !== null) {\n        actualTop += current.offsetTop;\n        current = current.offsetParent;\n    }\n    return actualTop;\n};\n\nfunction tooltip(el, opt) {\n    const items = el.querySelectorAll(\".el-form-item\");\n    for (const item of items) {\n        const target = item.firstChild;\n        // 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null\n        if (target.className) {\n            // 将每一个需要显示标签的实例信息压入\n            instanceAction().pushInstance({ tip: null, target, message: target.innerText, offset: 0, class: \"vk-tooltip\" });\n        }\n    }\n    this.scrollListener = null;\n    this.mouseenterListener = null;\n    this.mouseleaveListener = null;\n    this.init();\n    // target：传入的DOM\n    // this.target = el;\n    // tip：用来放初始化创建的tip元素\n    // this.tip = null;\n    // this.message = (opt && opt.msg) || this.target.innerText;\n    // this.offset = (opt && +opt.offset) || 0;\n    // this.class = \"vk-tooltip\";\n    // instanceAction.push();\n    // this.init();\n}\n\ntooltip.prototype = {\n    // 初始化tip，添加事件监听\n    init: function () {\n        const me = this;\n        const root = getScrollRoot();\n        // 鼠标进入才创建标签\n        for (let instance of instancePool) {\n            const { target, tip, message, offset } = instance;\n            // 滚动监听事件\n            // 鼠标移入监听事件\n            // 鼠标移除监听事件\n            if (message.length < 6) continue;\n            this.mouseenterListener = Util.listener(target, \"mouseenter\", () => {\n                instance = me.createTip(instance);\n                instance.tip.style.opacity = 1;\n                this.scrollListener = Util.listener(root, \"scroll\", () => {\n                    me.setTipPlace(instance.tip, instance.target, instance.offset);\n                    instance.tip.style.opacity = 0;\n                });\n                this.scrollListener.listen();\n            });\n            this.mouseenterListener.listen();\n            this.mouseleaveListener = Util.listener(target, \"mouseleave\", () => {\n                instance.tip.style.opacity = 0;\n                this.scrollListener.remove();\n            });\n            this.mouseleaveListener.listen();\n        }\n    },\n\n    createTip(instance) {\n        const me = this;\n        const poppup = \"<div class='triangle-down'></div>\";\n        const cache = document.getElementsByClassName(instance.class);\n        // 如果存在一个tip标签则使用该标签\n        instance.tip = cache.length ? cache[0] : document.createElement(\"div\");\n        instance.tip.className = instance.class;\n        instance.tip.innerHTML = `${instance.message}${poppup}`;\n        document.body.appendChild(instance.tip);\n        if (!me.tip) {\n            me.tip = instance.tip;\n        }\n        me.setTipPlace(instance.tip, instance.target, instance.offset);\n        return instance;\n    },\n\n    // 设置tip显示的位置\n    setTipPlace: function (tip, target, offset) {\n        const root = getScrollRoot();\n        const distance = (tip.clientWidth - target.clientWidth) / 2;\n        const pageX = `${getElementViewLeft(target) - root.scrollLeft - distance + offset}px`;\n        const pageY = `${getElementViewTop(target) - target.clientHeight - root.scrollTop}px`;\n        tip.style.left = pageX;\n        tip.style.top = pageY;\n    },\n    clear: function () {\n        instancePool = [];\n        if (this.tip) {\n            this.tip.parentNode.removeChild(this.tip);\n        }\n        this.mouseenterListener.remove();\n        this.mouseleaveListener.remove();\n        this.mouseenterListener = null;\n        this.mouseleaveListener = null;\n        this.scrollListener = null;\n    }\n};\n\nexport default tooltip;\n\n\n// /**\n//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示\n//  * @example <div v-tips>此处为被缩略的文本内容</div>\n//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量\n//  * 在元素插入DOM时，创建tooltip实例。\n//  */\n// Vue.directive(\"tips\", {\n//     bind: (el) => {\n//         console.log(el);\n//     },\n//     // 当绑定元素插入到 DOM 中。\n//     inserted: (el, { value }) => {\n//         // 暂时针对el-form的label标签，所以指定firsChild\n//         this.instance = new VkTooltip(el.firstChild, value);\n//     },\n//     // 解除绑定的时候清除实例以及标签,清除事件监听\n//     unbind: (el) => {\n//         this.instance.clear();\n//     }\n// });\n// Util listen 函数\nUtil.listen = (target, eventType, callback) => {\n    if (target.addEventListener) {\n      return {\n          listen: {\n            target.addEventListener(eventType, callback, false);\n          },\n          remove: {\n            target.removeEventListener(eventType, callback, false);\n      \t  }\n      }\n    } else if (target.attachEvent) {\n      listen: {\n          target.attachEvent('on' + eventType, callback);\n      },\n      remove: {\n          target.detachEvent('on' + eventType, callback);\n      }\n    }\n}\n```\n\n使用的时候， 这个函数被作为指令在 `main.js` 中引入：\n\n```javascript\nimport VKTooltip from \"@/assets/js/tooltip\";\nVue.directive(\"tips\", {\n  bind: (el) => {\n  },\n  inserted: (el, { value }) => {\n    this.instance = new VKTooltip(el, value);\n  },\n  unbind: (el) => {\n    this. instance.clear();\n  }\n});\n```\n\n关于在 `vue.js` 中自定义指令的使用， 可以查看`vue.js` 官网， [自定义指令](https://cn.vuejs.org/v2/guide/custom-directive.html#ad)\n\n需要注意的知识点：\n\n1. 对于页面元素各个位置的理解\n2. js 基础一定要熟悉","slug":"tooltip-的实现","published":1,"updated":"2018-05-12T03:49:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh85001rs33glh603p3q","content":"<p>在业务上实现了一个类似于 <code>el-tooltip</code> 的方法，类似于下面这种情况：</p>\n<p>业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 <code>el-tooltip</code> 的实现方法，但是对于每一个标签上都添加上 <code>el-tooltip</code> 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 <code>toolTip.js</code> 的具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getScrollRoot = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement.querySelector(<span class=\"string\">\".el-dialog__wrapper\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> instancePool = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 tip instance 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instanceAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">instance</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        instancePool.push(instance);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        pushInstance: push</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上距离左边的距离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewLeft = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualLeft = element.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualLeft += current.offsetLeft;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualLeft;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上位置高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewTop = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualTop += current.offsetTop;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tooltip</span>(<span class=\"params\">el, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = el.querySelectorAll(<span class=\"string\">\".el-form-item\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> items) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = item.firstChild;</span><br><span class=\"line\">        <span class=\"comment\">// 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.className) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将每一个需要显示标签的实例信息压入</span></span><br><span class=\"line\">            instanceAction().pushInstance(&#123; <span class=\"attr\">tip</span>: <span class=\"literal\">null</span>, target, <span class=\"attr\">message</span>: target.innerText, <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">class</span>: <span class=\"string\">\"vk-tooltip\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// target：传入的DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// this.target = el;</span></span><br><span class=\"line\">    <span class=\"comment\">// tip：用来放初始化创建的tip元素</span></span><br><span class=\"line\">    <span class=\"comment\">// this.tip = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.message = (opt &amp;&amp; opt.msg) || this.target.innerText;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.offset = (opt &amp;&amp; +opt.offset) || 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.class = \"vk-tooltip\";</span></span><br><span class=\"line\">    <span class=\"comment\">// instanceAction.push();</span></span><br><span class=\"line\">    <span class=\"comment\">// this.init();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tooltip.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化tip，添加事件监听</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"comment\">// 鼠标进入才创建标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> instance <span class=\"keyword\">of</span> instancePool) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; target, tip, message, offset &#125; = instance;</span><br><span class=\"line\">            <span class=\"comment\">// 滚动监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移入监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移除监听事件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message.length &lt; <span class=\"number\">6</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener = Util.listener(target, <span class=\"string\">\"mouseenter\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance = me.createTip(instance);</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener = Util.listener(root, <span class=\"string\">\"scroll\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                    me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">                    instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.listen();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener.listen();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener = Util.listener(target, <span class=\"string\">\"mouseleave\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.remove();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener.listen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    createTip(instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> poppup = <span class=\"string\">\"&lt;div class='triangle-down'&gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> cache = <span class=\"built_in\">document</span>.getElementsByClassName(instance.class);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在一个tip标签则使用该标签</span></span><br><span class=\"line\">        instance.tip = cache.length ? cache[<span class=\"number\">0</span>] : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        instance.tip.className = instance.class;</span><br><span class=\"line\">        instance.tip.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;instance.message&#125;</span><span class=\"subst\">$&#123;poppup&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(instance.tip);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!me.tip) &#123;</span><br><span class=\"line\">            me.tip = instance.tip;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置tip显示的位置</span></span><br><span class=\"line\">    setTipPlace: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tip, target, offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distance = (tip.clientWidth - target.clientWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageX = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewLeft(target) - root.scrollLeft - distance + offset&#125;</span>px`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageY = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewTop(target) - target.clientHeight - root.scrollTop&#125;</span>px`</span>;</span><br><span class=\"line\">        tip.style.left = pageX;</span><br><span class=\"line\">        tip.style.top = pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clear: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        instancePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tip) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tip.parentNode.removeChild(<span class=\"keyword\">this</span>.tip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tooltip;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /**</span></span><br><span class=\"line\"><span class=\"comment\">//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示</span></span><br><span class=\"line\"><span class=\"comment\">//  * @example &lt;div v-tips&gt;此处为被缩略的文本内容&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//  * 在元素插入DOM时，创建tooltip实例。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.directive(\"tips\", &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     bind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log(el);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 当绑定元素插入到 DOM 中。</span></span><br><span class=\"line\"><span class=\"comment\">//     inserted: (el, &#123; value &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // 暂时针对el-form的label标签，所以指定firsChild</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance = new VkTooltip(el.firstChild, value);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 解除绑定的时候清除实例以及标签,清除事件监听</span></span><br><span class=\"line\"><span class=\"comment\">//     unbind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance.clear();</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// Util listen 函数</span></span><br><span class=\"line\">Util.listen = <span class=\"function\">(<span class=\"params\">target, eventType, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          listen: &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          remove: &#123;</span><br><span class=\"line\">            target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">      listen: &#123;</span><br><span class=\"line\">          target.attachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      remove: &#123;</span><br><span class=\"line\">          target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候， 这个函数被作为指令在 <code>main.js</code> 中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VKTooltip <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/js/tooltip\"</span>;</span><br><span class=\"line\">Vue.directive(<span class=\"string\">\"tips\"</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\">(<span class=\"params\">el, &#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> VKTooltip(el, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>. instance.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>关于在 <code>vue.js</code> 中自定义指令的使用， 可以查看<code>vue.js</code> 官网， <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#ad\" target=\"_blank\" rel=\"noopener\">自定义指令</a></p>\n<p>需要注意的知识点：</p>\n<ol>\n<li>对于页面元素各个位置的理解</li>\n<li>js 基础一定要熟悉</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在业务上实现了一个类似于 <code>el-tooltip</code> 的方法，类似于下面这种情况：</p>\n<p>业务需求是对于弹窗的文字标签字段， 如果文字标签说明太长的时候， 而这个时候文字标签说明又有宽度限制， 这个时候需要实现一个类似于 <code>el-tooltip</code> 的实现方法，但是对于每一个标签上都添加上 <code>el-tooltip</code> 是不现实的，因此想要通过使用指令的方法，对于表单中的标签字段进行动态添加，实现这个指令的 <code>toolTip.js</code> 的具体代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于出现dialog 的情况， 都是在 el-dialog__wrapper 上进行滚动的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Util <span class=\"keyword\">from</span> <span class=\"string\">\"./util\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getScrollRoot = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.documentElement.querySelector(<span class=\"string\">\".el-dialog__wrapper\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> instancePool = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 tip instance 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instanceAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> push = <span class=\"function\">(<span class=\"params\">instance</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        instancePool.push(instance);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        pushInstance: push</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上距离左边的距离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewLeft = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualLeft = element.offsetLeft;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualLeft += current.offsetLeft;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualLeft;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取到绑定元素在当前页面上位置高度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getElementViewTop = <span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = element.offsetTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = element.offsetParent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        actualTop += current.offsetTop;</span><br><span class=\"line\">        current = current.offsetParent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> actualTop;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tooltip</span>(<span class=\"params\">el, opt</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> items = el.querySelectorAll(<span class=\"string\">\".el-form-item\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> items) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = item.firstChild;</span><br><span class=\"line\">        <span class=\"comment\">// 如果定义了一个 label 为空的时候的 form-item， label 部分为 before 元素， 但是还是可以这个时候 \t\t\tclassName 为 null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.className) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将每一个需要显示标签的实例信息压入</span></span><br><span class=\"line\">            instanceAction().pushInstance(&#123; <span class=\"attr\">tip</span>: <span class=\"literal\">null</span>, target, <span class=\"attr\">message</span>: target.innerText, <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">class</span>: <span class=\"string\">\"vk-tooltip\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.init();</span><br><span class=\"line\">    <span class=\"comment\">// target：传入的DOM</span></span><br><span class=\"line\">    <span class=\"comment\">// this.target = el;</span></span><br><span class=\"line\">    <span class=\"comment\">// tip：用来放初始化创建的tip元素</span></span><br><span class=\"line\">    <span class=\"comment\">// this.tip = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.message = (opt &amp;&amp; opt.msg) || this.target.innerText;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.offset = (opt &amp;&amp; +opt.offset) || 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// this.class = \"vk-tooltip\";</span></span><br><span class=\"line\">    <span class=\"comment\">// instanceAction.push();</span></span><br><span class=\"line\">    <span class=\"comment\">// this.init();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tooltip.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化tip，添加事件监听</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"comment\">// 鼠标进入才创建标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> instance <span class=\"keyword\">of</span> instancePool) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> &#123; target, tip, message, offset &#125; = instance;</span><br><span class=\"line\">            <span class=\"comment\">// 滚动监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移入监听事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 鼠标移除监听事件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (message.length &lt; <span class=\"number\">6</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener = Util.listener(target, <span class=\"string\">\"mouseenter\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance = me.createTip(instance);</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener = Util.listener(root, <span class=\"string\">\"scroll\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                    me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">                    instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.listen();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseenterListener.listen();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener = Util.listener(target, <span class=\"string\">\"mouseleave\"</span>, () =&gt; &#123;</span><br><span class=\"line\">                instance.tip.style.opacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.scrollListener.remove();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mouseleaveListener.listen();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    createTip(instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> poppup = <span class=\"string\">\"&lt;div class='triangle-down'&gt;&lt;/div&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> cache = <span class=\"built_in\">document</span>.getElementsByClassName(instance.class);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在一个tip标签则使用该标签</span></span><br><span class=\"line\">        instance.tip = cache.length ? cache[<span class=\"number\">0</span>] : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        instance.tip.className = instance.class;</span><br><span class=\"line\">        instance.tip.innerHTML = <span class=\"string\">`<span class=\"subst\">$&#123;instance.message&#125;</span><span class=\"subst\">$&#123;poppup&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(instance.tip);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!me.tip) &#123;</span><br><span class=\"line\">            me.tip = instance.tip;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        me.setTipPlace(instance.tip, instance.target, instance.offset);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置tip显示的位置</span></span><br><span class=\"line\">    setTipPlace: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tip, target, offset</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = getScrollRoot();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> distance = (tip.clientWidth - target.clientWidth) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageX = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewLeft(target) - root.scrollLeft - distance + offset&#125;</span>px`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> pageY = <span class=\"string\">`<span class=\"subst\">$&#123;getElementViewTop(target) - target.clientHeight - root.scrollTop&#125;</span>px`</span>;</span><br><span class=\"line\">        tip.style.left = pageX;</span><br><span class=\"line\">        tip.style.top = pageY;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clear: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        instancePool = [];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tip) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tip.parentNode.removeChild(<span class=\"keyword\">this</span>.tip);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener.remove();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseenterListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mouseleaveListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.scrollListener = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> tooltip;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /**</span></span><br><span class=\"line\"><span class=\"comment\">//  * @description 因为el的tooltip展示需要用到组件，这里用指令进行tooltip展示</span></span><br><span class=\"line\"><span class=\"comment\">//  * @example &lt;div v-tips&gt;此处为被缩略的文本内容&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//  * @param opt v-tips=\"opt\" 可以传入配置对象, msg 展示信息, offset X轴偏移量</span></span><br><span class=\"line\"><span class=\"comment\">//  * 在元素插入DOM时，创建tooltip实例。</span></span><br><span class=\"line\"><span class=\"comment\">//  */</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.directive(\"tips\", &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     bind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         console.log(el);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 当绑定元素插入到 DOM 中。</span></span><br><span class=\"line\"><span class=\"comment\">//     inserted: (el, &#123; value &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         // 暂时针对el-form的label标签，所以指定firsChild</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance = new VkTooltip(el.firstChild, value);</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     // 解除绑定的时候清除实例以及标签,清除事件监听</span></span><br><span class=\"line\"><span class=\"comment\">//     unbind: (el) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         this.instance.clear();</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// Util listen 函数</span></span><br><span class=\"line\">Util.listen = <span class=\"function\">(<span class=\"params\">target, eventType, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          listen: &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          remove: &#123;</span><br><span class=\"line\">            target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">      listen: &#123;</span><br><span class=\"line\">          target.attachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      remove: &#123;</span><br><span class=\"line\">          target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的时候， 这个函数被作为指令在 <code>main.js</code> 中引入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VKTooltip <span class=\"keyword\">from</span> <span class=\"string\">\"@/assets/js/tooltip\"</span>;</span><br><span class=\"line\">Vue.directive(<span class=\"string\">\"tips\"</span>, &#123;</span><br><span class=\"line\">  bind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  inserted: <span class=\"function\">(<span class=\"params\">el, &#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> VKTooltip(el, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  unbind: <span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>. instance.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>关于在 <code>vue.js</code> 中自定义指令的使用， 可以查看<code>vue.js</code> 官网， <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html#ad\" target=\"_blank\" rel=\"noopener\">自定义指令</a></p>\n<p>需要注意的知识点：</p>\n<ol>\n<li>对于页面元素各个位置的理解</li>\n<li>js 基础一定要熟悉</li>\n</ol>\n"},{"title":"translate3d'","date":"2017-11-05T12:39:20.000Z","_content":"\n### transform 特性\n\n一个使用 `transform` 实现的垂直居中的代码如下:\n\n\n\n```html\n<div class=\"fDiv\">\n  <div class=\"cDiv\"></div>\n</div>\n<style >\n  .fDiv {\n    width: 300px;\n    height: 300px;\n    position: relative\n    background-color: blue;\n  }\n  .cDiv {\n    position: absolute;\n    background-color: red;\n    top: 50%;\n    left: 50%;\n    width: 50%;\n    height: 50%;\n    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n  }\n</style>\n```\n\n`transform` 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移\n\n常见的 `transform 特性如下`\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png)\n\n其中 translate 规定的是元素在 x, y ,z 轴上的位移\n\n#### translate\n\n>(x, y, z)\n>\n>length / percentage  \n\n其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度\n\n在上面的完全居中代码中\n\n```css\nposition: absolute;\nbackground-color: red;\ntop: 50%;\nleft: 50%;\nwidth: 50%;\nheight: 50%;\ntransform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n```\n\n在添加 `transform`之前, 方块是这样被放置的:\n\n因为这里是定位, `top` 以及 `left` 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的\n\n![](http://ov3b9jngp.bkt.clouddn.com/notransform.png)\n\n添加了`transform` 之后\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png)\n\n因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 `left: 50%` 的时候元素被紧靠在父元素的中间垂线上, 使用 `translate` 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。","source":"_posts/translate3d.md","raw":"---\ntitle: translate3d'\ndate: 2017-11-05 20:39:20\ntags: transform\ncategories: CSS\n---\n\n### transform 特性\n\n一个使用 `transform` 实现的垂直居中的代码如下:\n\n\n\n```html\n<div class=\"fDiv\">\n  <div class=\"cDiv\"></div>\n</div>\n<style >\n  .fDiv {\n    width: 300px;\n    height: 300px;\n    position: relative\n    background-color: blue;\n  }\n  .cDiv {\n    position: absolute;\n    background-color: red;\n    top: 50%;\n    left: 50%;\n    width: 50%;\n    height: 50%;\n    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n  }\n</style>\n```\n\n`transform` 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移\n\n常见的 `transform 特性如下`\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png)\n\n其中 translate 规定的是元素在 x, y ,z 轴上的位移\n\n#### translate\n\n>(x, y, z)\n>\n>length / percentage  \n\n其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度\n\n在上面的完全居中代码中\n\n```css\nposition: absolute;\nbackground-color: red;\ntop: 50%;\nleft: 50%;\nwidth: 50%;\nheight: 50%;\ntransform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)\n```\n\n在添加 `transform`之前, 方块是这样被放置的:\n\n因为这里是定位, `top` 以及 `left` 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的\n\n![](http://ov3b9jngp.bkt.clouddn.com/notransform.png)\n\n添加了`transform` 之后\n\n![](http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png)\n\n因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 `left: 50%` 的时候元素被紧靠在父元素的中间垂线上, 使用 `translate` 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。","slug":"translate3d","published":1,"updated":"2018-05-12T02:25:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh87001us33gx5nlve0o","content":"<h3 id=\"transform-特性\"><a href=\"#transform-特性\" class=\"headerlink\" title=\"transform 特性\"></a>transform 特性</h3><p>一个使用 <code>transform</code> 实现的垂直居中的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fDiv\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> &gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.fDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: relative</span></span><br><span class=\"line\"><span class=\"undefined\">    background-color: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.cDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">    background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>transform</code> 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移</p>\n<p>常见的 <code>transform 特性如下</code></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png\" alt=\"\"></p>\n<p>其中 translate 规定的是元素在 x, y ,z 轴上的位移</p>\n<h4 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h4><blockquote>\n<p>(x, y, z)</p>\n<p>length / percentage  </p>\n</blockquote>\n<p>其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度</p>\n<p>在上面的完全居中代码中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 50%;</span><br><span class=\"line\">transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br></pre></td></tr></table></figure>\n<p>在添加 <code>transform</code>之前, 方块是这样被放置的:</p>\n<p>因为这里是定位, <code>top</code> 以及 <code>left</code> 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/notransform.png\" alt=\"\"></p>\n<p>添加了<code>transform</code> 之后</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png\" alt=\"\"></p>\n<p>因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 <code>left: 50%</code> 的时候元素被紧靠在父元素的中间垂线上, 使用 <code>translate</code> 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"transform-特性\"><a href=\"#transform-特性\" class=\"headerlink\" title=\"transform 特性\"></a>transform 特性</h3><p>一个使用 <code>transform</code> 实现的垂直居中的代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fDiv\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> &gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.fDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: relative</span></span><br><span class=\"line\"><span class=\"undefined\">    background-color: blue;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.cDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">    background-color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">    top: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    left: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 50%;</span></span><br><span class=\"line\"><span class=\"undefined\">    transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>transform</code> 这个的 css 元素实际上是可以允许我们对于元素进行旋转, 移动, 缩放, 或者平移</p>\n<p>常见的 <code>transform 特性如下</code></p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E7%89%B9%E6%80%A7.png\" alt=\"\"></p>\n<p>其中 translate 规定的是元素在 x, y ,z 轴上的位移</p>\n<h4 id=\"translate\"><a href=\"#translate\" class=\"headerlink\" title=\"translate\"></a>translate</h4><blockquote>\n<p>(x, y, z)</p>\n<p>length / percentage  </p>\n</blockquote>\n<p>其中 x, y z 的单位可以是长度或者是百分比, 当以百分比进行比较的时候, 百分比相对的是元素本身的高度或者宽度</p>\n<p>在上面的完全居中代码中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">absolute</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 50%;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 50%;</span><br><span class=\"line\">transform: translate3d(-50%, -50%, 0); // translate(-50%, -50%)</span><br></pre></td></tr></table></figure>\n<p>在添加 <code>transform</code>之前, 方块是这样被放置的:</p>\n<p>因为这里是定位, <code>top</code> 以及 <code>left</code> 被放置的时候的宽度以及高度的百分比是按照父元素的宽度和高度进行计算的</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/notransform.png\" alt=\"\"></p>\n<p>添加了<code>transform</code> 之后</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/tranform%20%E5%B1%85%E4%B8%AD.png\" alt=\"\"></p>\n<p>因为这里使用 translate 定义的距离 x , y , z 的距离是根据元素本身的宽度和高度被定义的, 而同时使用 <code>left: 50%</code> 的时候元素被紧靠在父元素的中间垂线上, 使用 <code>translate</code> 的时候向左移动了元素的一半距离, 使得这个元素在水平距离上是居中设置的。</p>\n"},{"title":"this.nextTick in vue.js","date":"2018-01-21T09:50:07.000Z","_content":"\n### `this.nextTick` 的作用\n\n在 `Vue.js` 的官方文档中是这样描述 `this.nextTick` 的:\n\n>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 `Vue.nextTick(callback)` 。这样回调函数在 DOM 更新完成后就会调用.\n\n在 `vue.js` 中, 使用 `this.nextTick` 的作用是更新 `dom` , 在 涉及关于在 `vue.js` 中 `Dom` 的操作中, 当我们想要操作被更新后的 `DOM`的时候，可以使用 `this.nextTick` 进行操作。\n\n### 为什么采用   `this.nextTick`  \n\n>Vue **异步**执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 `Promise.then` 和 `MessageChannel`，如果执行环境不支持，会采用 `setTimeout(fn, 0)` 代替。\n\n使用 `this.nextTick` 的两种情况:\n\n1.  在 `created` 阶段的时候， 这个时候 `DOM` 元素尚未挂载, 在这个钩子函数内操作 `DOM` 是无法找到 `DOM` 元素的， 这个时候使用 `this.nextTick` 类似于使用 `mounted` 的钩子函数， 这个时候所有的 `DOM` 元素挂载和渲染均已经完成，这个时候可以执行对于 `DOM` 元素的操作。\n\n2.  当我们想要对于数据发生变化之后的 `DOM` 元素之后执行一些操作的时候， 我们可以使用 `this.nextTick(callback)` 那么 `callback` 回调函数就会当 `DOM` 元素被更新之后被触发。\n\n   ​\n\n   ![https://cn.vuejs.org/images/lifecycle.png](https://cn.vuejs.org/images/lifecycle.png) \n\n上图是 `vue` 实例的生命周期图。\n\n","source":"_posts/this-nextTick-in-vue-js.md","raw":"---\ntitle: this.nextTick in vue.js\ndate: 2018-01-21 17:50:07\ntags: this.nextTick\ncategories: Vue\n---\n\n### `this.nextTick` 的作用\n\n在 `Vue.js` 的官方文档中是这样描述 `this.nextTick` 的:\n\n>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 `Vue.nextTick(callback)` 。这样回调函数在 DOM 更新完成后就会调用.\n\n在 `vue.js` 中, 使用 `this.nextTick` 的作用是更新 `dom` , 在 涉及关于在 `vue.js` 中 `Dom` 的操作中, 当我们想要操作被更新后的 `DOM`的时候，可以使用 `this.nextTick` 进行操作。\n\n### 为什么采用   `this.nextTick`  \n\n>Vue **异步**执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 `Promise.then` 和 `MessageChannel`，如果执行环境不支持，会采用 `setTimeout(fn, 0)` 代替。\n\n使用 `this.nextTick` 的两种情况:\n\n1.  在 `created` 阶段的时候， 这个时候 `DOM` 元素尚未挂载, 在这个钩子函数内操作 `DOM` 是无法找到 `DOM` 元素的， 这个时候使用 `this.nextTick` 类似于使用 `mounted` 的钩子函数， 这个时候所有的 `DOM` 元素挂载和渲染均已经完成，这个时候可以执行对于 `DOM` 元素的操作。\n\n2.  当我们想要对于数据发生变化之后的 `DOM` 元素之后执行一些操作的时候， 我们可以使用 `this.nextTick(callback)` 那么 `callback` 回调函数就会当 `DOM` 元素被更新之后被触发。\n\n   ​\n\n   ![https://cn.vuejs.org/images/lifecycle.png](https://cn.vuejs.org/images/lifecycle.png) \n\n上图是 `vue` 实例的生命周期图。\n\n","slug":"this-nextTick-in-vue-js","published":1,"updated":"2018-01-21T12:54:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh89001xs33gv36p0l3f","content":"<h3 id=\"this-nextTick-的作用\"><a href=\"#this-nextTick-的作用\" class=\"headerlink\" title=\"this.nextTick 的作用\"></a><code>this.nextTick</code> 的作用</h3><p>在 <code>Vue.js</code> 的官方文档中是这样描述 <code>this.nextTick</code> 的:</p>\n<blockquote>\n<p>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用.</p>\n</blockquote>\n<p>在 <code>vue.js</code> 中, 使用 <code>this.nextTick</code> 的作用是更新 <code>dom</code> , 在 涉及关于在 <code>vue.js</code> 中 <code>Dom</code> 的操作中, 当我们想要操作被更新后的 <code>DOM</code>的时候，可以使用 <code>this.nextTick</code> 进行操作。</p>\n<h3 id=\"为什么采用-this-nextTick\"><a href=\"#为什么采用-this-nextTick\" class=\"headerlink\" title=\"为什么采用   this.nextTick\"></a>为什么采用   <code>this.nextTick</code></h3><blockquote>\n<p>Vue <strong>异步</strong>执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p>\n</blockquote>\n<p>使用 <code>this.nextTick</code> 的两种情况:</p>\n<ol>\n<li><p>在 <code>created</code> 阶段的时候， 这个时候 <code>DOM</code> 元素尚未挂载, 在这个钩子函数内操作 <code>DOM</code> 是无法找到 <code>DOM</code> 元素的， 这个时候使用 <code>this.nextTick</code> 类似于使用 <code>mounted</code> 的钩子函数， 这个时候所有的 <code>DOM</code> 元素挂载和渲染均已经完成，这个时候可以执行对于 <code>DOM</code> 元素的操作。</p>\n</li>\n<li><p>当我们想要对于数据发生变化之后的 <code>DOM</code> 元素之后执行一些操作的时候， 我们可以使用 <code>this.nextTick(callback)</code> 那么 <code>callback</code> 回调函数就会当 <code>DOM</code> 元素被更新之后被触发。</p>\n<p>​</p>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"https://cn.vuejs.org/images/lifecycle.png\"> </p>\n</li>\n</ol>\n<p>上图是 <code>vue</code> 实例的生命周期图。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"this-nextTick-的作用\"><a href=\"#this-nextTick-的作用\" class=\"headerlink\" title=\"this.nextTick 的作用\"></a><code>this.nextTick</code> 的作用</h3><p>在 <code>Vue.js</code> 的官方文档中是这样描述 <code>this.nextTick</code> 的:</p>\n<blockquote>\n<p>为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用.</p>\n</blockquote>\n<p>在 <code>vue.js</code> 中, 使用 <code>this.nextTick</code> 的作用是更新 <code>dom</code> , 在 涉及关于在 <code>vue.js</code> 中 <code>Dom</code> 的操作中, 当我们想要操作被更新后的 <code>DOM</code>的时候，可以使用 <code>this.nextTick</code> 进行操作。</p>\n<h3 id=\"为什么采用-this-nextTick\"><a href=\"#为什么采用-this-nextTick\" class=\"headerlink\" title=\"为什么采用   this.nextTick\"></a>为什么采用   <code>this.nextTick</code></h3><blockquote>\n<p>Vue <strong>异步</strong>执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p>\n</blockquote>\n<p>使用 <code>this.nextTick</code> 的两种情况:</p>\n<ol>\n<li><p>在 <code>created</code> 阶段的时候， 这个时候 <code>DOM</code> 元素尚未挂载, 在这个钩子函数内操作 <code>DOM</code> 是无法找到 <code>DOM</code> 元素的， 这个时候使用 <code>this.nextTick</code> 类似于使用 <code>mounted</code> 的钩子函数， 这个时候所有的 <code>DOM</code> 元素挂载和渲染均已经完成，这个时候可以执行对于 <code>DOM</code> 元素的操作。</p>\n</li>\n<li><p>当我们想要对于数据发生变化之后的 <code>DOM</code> 元素之后执行一些操作的时候， 我们可以使用 <code>this.nextTick(callback)</code> 那么 <code>callback</code> 回调函数就会当 <code>DOM</code> 元素被更新之后被触发。</p>\n<p>​</p>\n<p><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"https://cn.vuejs.org/images/lifecycle.png\"> </p>\n</li>\n</ol>\n<p>上图是 <code>vue</code> 实例的生命周期图。</p>\n"},{"title":"underscore.js 源码分析(九)","date":"2017-12-04T14:39:00.000Z","_content":"\n###  underscore.js 源码分析\n\n`sortedIndex`  `findIndex`  `findLastIndex` `range`\n\n##### `sortedIndex`\n\n`sortedIndex(list, value, [iteratee], context)`\n\n其中 `list` 是已经被排好序的数组，通过使用 `soetedIndex` 可以查找到 `value` 在已经排好序的 `list` 数组中的顺序。使用 二分法进行查找的。\n\n使用二分法进行查找的 `value` 位置如下:\n\n```javascript\nfunction sortIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  // 获取到传入的 obj 的值\n  let value = iteratee(obj);\n  let low = 0;\n  // 定义 high 是数组的长度 array.length\n  let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 如果 array[mid] > value value 在 low 和 mid 之间\n    if (itetatee(array[mid]) > value) > 0) mid = high; else low = mid + 1;\n  }\n}\n```\n\n##### `findIndex`\n\n`findIndex(array, predicate, [context])`\n\n返回在`array` 中满足 `predicate` 函数为真的第一个元素的索引, 如果没有找到，返回 `-1`;\n\n##### `findLastIndex`\n\n类似于使用 `findIndex` 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值\n\n使用 `findIndex` 以及 `findLastIndex` 的代码如下:\n\n```javascript\nfunction getIndexFunc(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    let length = array.length;\n    let index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index; \n    }\n    return - 1;\n  }\n}\nlet findIndex = getIndexFunc(1);\nlet findLastIndex = getIndexFunc(-1);\n```\n\n##### `range`\n\n`range([start], stop, [step])`\n\n使用 `range` 创建一个整数灵活编号的列表函数，返回一个从 `start` 到 `stop` 的整数的一个列表, 通过使用 `step` 来减少独占。\n\n如果省略 `start`, `start` 默认从 0 开始，步进为 1;\n\n自己写的代码:\n\n```javascript\nfunction range(start, stop, step) {\n\tlet args = arguments;\n\tlet resultArray = [];\n\tlet theStep = 1;\n\tlet theStart = 0;\n\tif (args.length === 1) {\n\t\tstop = args[0];\n\t}\n\tif (args.length === 2) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t}\n\tif (args.length === 3) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t\ttheStep = args[2];\n\t}\n    // 太繁琐\n\tif (theStart < stop) {\n\t\tfor (let index = theStart; index < stop; index = index + theStep) {\n\t\t  resultArray.push(index);\n\t  }\n\t } else {\n\t\tfor (let index = theStart; index > stop; index = index + theStep) {\n\t\tresultArray.push(index);\n\t }\n\t}\n\treturn resultArray;\n}\n```\n\n源码:\n\n```javascript\n/*\n* @description range 返回特定范围的数组\n* @param start {Number} 数组中开始的数字\n* @param stop {Number} 数组中结束的数字\n* @param step {Nunber} 步进\n*/\n\nfunction range(start, stop, step) {\n  if (arguments.length <= 1) {\n    start = stop || 0;\n    stop = 0;\n  }\n  step = step || 1;\n  let length = Math.max(Math.ceil((start - stop) / step), 0);\n  let result = new Array(length);\n  for (let index = 0; index < length; index++, start += step) {\n    result[index] = start;\n  }\n  return result;\n}\n```\n\n\n\n\n\n\n\n","source":"_posts/underscore-js-源码分析-九.md","raw":"---\ntitle: underscore.js 源码分析(九)\ndate: 2017-12-04 22:39:00\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###  underscore.js 源码分析\n\n`sortedIndex`  `findIndex`  `findLastIndex` `range`\n\n##### `sortedIndex`\n\n`sortedIndex(list, value, [iteratee], context)`\n\n其中 `list` 是已经被排好序的数组，通过使用 `soetedIndex` 可以查找到 `value` 在已经排好序的 `list` 数组中的顺序。使用 二分法进行查找的。\n\n使用二分法进行查找的 `value` 位置如下:\n\n```javascript\nfunction sortIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  // 获取到传入的 obj 的值\n  let value = iteratee(obj);\n  let low = 0;\n  // 定义 high 是数组的长度 array.length\n  let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 如果 array[mid] > value value 在 low 和 mid 之间\n    if (itetatee(array[mid]) > value) > 0) mid = high; else low = mid + 1;\n  }\n}\n```\n\n##### `findIndex`\n\n`findIndex(array, predicate, [context])`\n\n返回在`array` 中满足 `predicate` 函数为真的第一个元素的索引, 如果没有找到，返回 `-1`;\n\n##### `findLastIndex`\n\n类似于使用 `findIndex` 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值\n\n使用 `findIndex` 以及 `findLastIndex` 的代码如下:\n\n```javascript\nfunction getIndexFunc(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    let length = array.length;\n    let index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index; \n    }\n    return - 1;\n  }\n}\nlet findIndex = getIndexFunc(1);\nlet findLastIndex = getIndexFunc(-1);\n```\n\n##### `range`\n\n`range([start], stop, [step])`\n\n使用 `range` 创建一个整数灵活编号的列表函数，返回一个从 `start` 到 `stop` 的整数的一个列表, 通过使用 `step` 来减少独占。\n\n如果省略 `start`, `start` 默认从 0 开始，步进为 1;\n\n自己写的代码:\n\n```javascript\nfunction range(start, stop, step) {\n\tlet args = arguments;\n\tlet resultArray = [];\n\tlet theStep = 1;\n\tlet theStart = 0;\n\tif (args.length === 1) {\n\t\tstop = args[0];\n\t}\n\tif (args.length === 2) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t}\n\tif (args.length === 3) {\n\t\ttheStart = args[0];\n\t\tstop = args[1];\n\t\ttheStep = args[2];\n\t}\n    // 太繁琐\n\tif (theStart < stop) {\n\t\tfor (let index = theStart; index < stop; index = index + theStep) {\n\t\t  resultArray.push(index);\n\t  }\n\t } else {\n\t\tfor (let index = theStart; index > stop; index = index + theStep) {\n\t\tresultArray.push(index);\n\t }\n\t}\n\treturn resultArray;\n}\n```\n\n源码:\n\n```javascript\n/*\n* @description range 返回特定范围的数组\n* @param start {Number} 数组中开始的数字\n* @param stop {Number} 数组中结束的数字\n* @param step {Nunber} 步进\n*/\n\nfunction range(start, stop, step) {\n  if (arguments.length <= 1) {\n    start = stop || 0;\n    stop = 0;\n  }\n  step = step || 1;\n  let length = Math.max(Math.ceil((start - stop) / step), 0);\n  let result = new Array(length);\n  for (let index = 0; index < length; index++, start += step) {\n    result[index] = start;\n  }\n  return result;\n}\n```\n\n\n\n\n\n\n\n","slug":"underscore-js-源码分析-九","published":1,"updated":"2017-12-05T02:38:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8c0020s33gk2fe8r3w","content":"<h3 id=\"underscore-js-源码分析\"><a href=\"#underscore-js-源码分析\" class=\"headerlink\" title=\"underscore.js 源码分析\"></a>underscore.js 源码分析</h3><p><code>sortedIndex</code>  <code>findIndex</code>  <code>findLastIndex</code> <code>range</code></p>\n<h5 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a><code>sortedIndex</code></h5><p><code>sortedIndex(list, value, [iteratee], context)</code></p>\n<p>其中 <code>list</code> 是已经被排好序的数组，通过使用 <code>soetedIndex</code> 可以查找到 <code>value</code> 在已经排好序的 <code>list</code> 数组中的顺序。使用 二分法进行查找的。</p>\n<p>使用二分法进行查找的 <code>value</code> 位置如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortIndex</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入的 obj 的值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义 high 是数组的长度 array.length</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 array[mid] &gt; value value 在 low 和 mid 之间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itetatee(array[mid]) &gt; value) &gt; <span class=\"number\">0</span>) mid = high; <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a><code>findIndex</code></h5><p><code>findIndex(array, predicate, [context])</code></p>\n<p>返回在<code>array</code> 中满足 <code>predicate</code> 函数为真的第一个元素的索引, 如果没有找到，返回 <code>-1</code>;</p>\n<h5 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"findLastIndex\"></a><code>findLastIndex</code></h5><p>类似于使用 <code>findIndex</code> 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值</p>\n<p>使用 <code>findIndex</code> 以及 <code>findLastIndex</code> 的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndexFunc</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = getIndexFunc(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> findLastIndex = getIndexFunc(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a><code>range</code></h5><p><code>range([start], stop, [step])</code></p>\n<p>使用 <code>range</code> 创建一个整数灵活编号的列表函数，返回一个从 <code>start</code> 到 <code>stop</code> 的整数的一个列表, 通过使用 <code>step</code> 来减少独占。</p>\n<p>如果省略 <code>start</code>, <code>start</code> 默认从 0 开始，步进为 1;</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> resultArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStep = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\ttheStep = args[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 太繁琐</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (theStart &lt; stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &lt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\t  resultArray.push(index);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &gt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\tresultArray.push(index);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resultArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description range 返回特定范围的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @param start &#123;Number&#125; 数组中开始的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param stop &#123;Number&#125; 数组中结束的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param step &#123;Nunber&#125; 步进</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    start = stop || <span class=\"number\">0</span>;</span><br><span class=\"line\">    stop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((start - stop) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++, start += step) &#123;</span><br><span class=\"line\">    result[index] = start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析\"><a href=\"#underscore-js-源码分析\" class=\"headerlink\" title=\"underscore.js 源码分析\"></a>underscore.js 源码分析</h3><p><code>sortedIndex</code>  <code>findIndex</code>  <code>findLastIndex</code> <code>range</code></p>\n<h5 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a><code>sortedIndex</code></h5><p><code>sortedIndex(list, value, [iteratee], context)</code></p>\n<p>其中 <code>list</code> 是已经被排好序的数组，通过使用 <code>soetedIndex</code> 可以查找到 <code>value</code> 在已经排好序的 <code>list</code> 数组中的顺序。使用 二分法进行查找的。</p>\n<p>使用二分法进行查找的 <code>value</code> 位置如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortIndex</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入的 obj 的值</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义 high 是数组的长度 array.length</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 array[mid] &gt; value value 在 low 和 mid 之间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itetatee(array[mid]) &gt; value) &gt; <span class=\"number\">0</span>) mid = high; <span class=\"keyword\">else</span> low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a><code>findIndex</code></h5><p><code>findIndex(array, predicate, [context])</code></p>\n<p>返回在<code>array</code> 中满足 <code>predicate</code> 函数为真的第一个元素的索引, 如果没有找到，返回 <code>-1</code>;</p>\n<h5 id=\"findLastIndex\"><a href=\"#findLastIndex\" class=\"headerlink\" title=\"findLastIndex\"></a><code>findLastIndex</code></h5><p>类似于使用 <code>findIndex</code> 不同的是从数组的从后向前开始检索，返回的是第一个判断为真的值</p>\n<p>使用 <code>findIndex</code> 以及 <code>findLastIndex</code> 的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getIndexFunc</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(array[index], index, array)) <span class=\"keyword\">return</span> index; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> findIndex = getIndexFunc(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> findLastIndex = getIndexFunc(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a><code>range</code></h5><p><code>range([start], stop, [step])</code></p>\n<p>使用 <code>range</code> 创建一个整数灵活编号的列表函数，返回一个从 <code>start</code> 到 <code>stop</code> 的整数的一个列表, 通过使用 <code>step</code> 来减少独占。</p>\n<p>如果省略 <code>start</code>, <code>start</code> 默认从 0 开始，步进为 1;</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> resultArray = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStep = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> theStart = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\ttheStart = args[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tstop = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\ttheStep = args[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 太繁琐</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (theStart &lt; stop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &lt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\t  resultArray.push(index);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = theStart; index &gt; stop; index = index + theStep) &#123;</span><br><span class=\"line\">\t\tresultArray.push(index);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resultArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description range 返回特定范围的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @param start &#123;Number&#125; 数组中开始的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param stop &#123;Number&#125; 数组中结束的数字</span></span><br><span class=\"line\"><span class=\"comment\">* @param step &#123;Nunber&#125; 步进</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop, step</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    start = stop || <span class=\"number\">0</span>;</span><br><span class=\"line\">    stop = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  step = step || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"built_in\">Math</span>.max(<span class=\"built_in\">Math</span>.ceil((start - stop) / step), <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++, start += step) &#123;</span><br><span class=\"line\">    result[index] = start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(五)","date":"2017-11-25T16:33:53.000Z","_content":"\n###　underscore.js 源码解析（五）\n\n`sample` `toArray`  `size`  `partition`\n\n####  `_.sample`\n\n`_.sample(list, [n])`\n\n用于产生一个随机样本, 传递的参数 n 表示从 `list` 中返回 `n` 个随机元素。\n\n#### 源码分析\n\n```javascript\n_.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      // 返回使用 _.random 获得的随机数\n      return obj[_.random(obj.length - 1)];\n    }\n    // 使用 slice 用来分割数组\n    // 使用 Math.max() 用来返回最大值\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n```\n\n1. 通过使用 `Math.max()` 用来获得一组数中的最大值。\n\n   ```javascript\n   Math.max(value1, value2, value3, value4...)\n   // 获取到 value1, value2, value3, value4... 等一组数中的最大值\n   Math.min(value1, value2, value3, value4...)\n   // 获取到 value1, value1.. 中的最小值\n   ```\n\n2. 使用 `Array.slice` 用来进行分割数组\n\n   `Array.slice(start, end)` 分割的数组中包括 `start` 不包括 `end` \n\n####  `toArray`\n\n#####　实例\n\n`_.toArray(list)`\n\n如果 `list` 是一个可以迭代的对象, 可以将 `list` 转化为一个数组。\n\n##### 源码分析\n\n```javascript\n_.toArray = function(obj) {\n    // 如果 obj 不存在, 返回一个空的数组\n    if (!obj) return [];\n    // 如果 obj 是一个真正的数组, 返回 slice.call(obj),\n    // Object.prototype.slice\n    if (_.isArray(obj)) return slice.call(obj);\n    // 如果 obj 是一个类数组对象\n    // 类数组对象属于对象，但是有 length\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    // 返回 obj 是一个对象\n    return _.values(obj);\n  };\n```\n\n当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:\n\n使用 `obj.length` 进行判断的时候:\n\n1. 对象是数组:\n\n   使用 `Array.isArray` 进行判断，当 这个判断不支持的时候，使用 `Object.prototype.toString` 进行判断。\n\n   ```javascript\n   function isArray(obj) {\n       return Array.isArray(obj) || Object.prototype.toString.call(obj) ==== '[object Array]';\n   }\n   ```\n\n2. 对象是类数组对象\n\n   对于类数组对象也有 `length` 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:\n\n   ```javascript\n   if (obj.length === +obj.length) {\n     // 判断得到是类数组对象\n   }\n   ```\n\n3.  当得到的类型是对象的时候\n\n   ```javascript\n   // 对于对象而言: obj.length: undefined\n   // +obj.length: NaN\n   if (obj.length !== +obj.length) {\n   }\n   ```\n\n#### `size`\n\n`_.size(list)`\n\n用于返回 `list` 的长度\n\n当 `list` 是数组的时候，返回的是数组的长度，当 `list` 是对象的时候，返回的是对象的长度。\n\n##### 实例\n\n```javascript\nlet person = {\n  name: '张宁宁',\n  age: 23,\n  sex: 'female'\n};\n_.size(person) // 3\n```\n\n#### 源码分析\n\n使用`_.size` 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。\n\n```javascript\nfunction size(list) {\n  if (list == null) return 0;\n  // 判断 list 是否是对象或者数组\n  // list 是数组，返回 list 的length\n  // list 是对象, 返回的是 Object.keys(list) 的长度\n  return list.length === +list.length ? list.length : Object.keys(list).length;\n}\n```\n\n#### `partition`\n\n`_.partition(array, predicate)`\n\n##### 实例\n\n使用 `partition` 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 `predicate` 函数的数组，\n\n拆分之后的第二个数组是不满足 `predicate` 函数的数组。\n\n>`predicate` : 断言，断定，宣布，宣讲，使基于\n\n##### 源码分析\n\n```javascript\n_.partition = function(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  // 定义两个数组，分别用来存放成功的数组和失败的数组\n  var pass = [], fail = [];\n  _.each(obj, function(value, key, object) {\n    // predicate 返回 true : pass.push(obj)\n    // predicate 返回 false : fail.push(obj)\n    (predicate(value, key, object) ? pass : fail).push(obj);\n  });\n  // 返回一个二维数组\n  return [[pass], [fail]];\n};\n```\n\n","source":"_posts/underscore-js-源码分析-五.md","raw":"---\ntitle: underscore.js 源码分析(五)\ndate: 2017-11-26 00:33:53\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###　underscore.js 源码解析（五）\n\n`sample` `toArray`  `size`  `partition`\n\n####  `_.sample`\n\n`_.sample(list, [n])`\n\n用于产生一个随机样本, 传递的参数 n 表示从 `list` 中返回 `n` 个随机元素。\n\n#### 源码分析\n\n```javascript\n_.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (obj.length !== +obj.length) obj = _.values(obj);\n      // 返回使用 _.random 获得的随机数\n      return obj[_.random(obj.length - 1)];\n    }\n    // 使用 slice 用来分割数组\n    // 使用 Math.max() 用来返回最大值\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n```\n\n1. 通过使用 `Math.max()` 用来获得一组数中的最大值。\n\n   ```javascript\n   Math.max(value1, value2, value3, value4...)\n   // 获取到 value1, value2, value3, value4... 等一组数中的最大值\n   Math.min(value1, value2, value3, value4...)\n   // 获取到 value1, value1.. 中的最小值\n   ```\n\n2. 使用 `Array.slice` 用来进行分割数组\n\n   `Array.slice(start, end)` 分割的数组中包括 `start` 不包括 `end` \n\n####  `toArray`\n\n#####　实例\n\n`_.toArray(list)`\n\n如果 `list` 是一个可以迭代的对象, 可以将 `list` 转化为一个数组。\n\n##### 源码分析\n\n```javascript\n_.toArray = function(obj) {\n    // 如果 obj 不存在, 返回一个空的数组\n    if (!obj) return [];\n    // 如果 obj 是一个真正的数组, 返回 slice.call(obj),\n    // Object.prototype.slice\n    if (_.isArray(obj)) return slice.call(obj);\n    // 如果 obj 是一个类数组对象\n    // 类数组对象属于对象，但是有 length\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    // 返回 obj 是一个对象\n    return _.values(obj);\n  };\n```\n\n当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:\n\n使用 `obj.length` 进行判断的时候:\n\n1. 对象是数组:\n\n   使用 `Array.isArray` 进行判断，当 这个判断不支持的时候，使用 `Object.prototype.toString` 进行判断。\n\n   ```javascript\n   function isArray(obj) {\n       return Array.isArray(obj) || Object.prototype.toString.call(obj) ==== '[object Array]';\n   }\n   ```\n\n2. 对象是类数组对象\n\n   对于类数组对象也有 `length` 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:\n\n   ```javascript\n   if (obj.length === +obj.length) {\n     // 判断得到是类数组对象\n   }\n   ```\n\n3.  当得到的类型是对象的时候\n\n   ```javascript\n   // 对于对象而言: obj.length: undefined\n   // +obj.length: NaN\n   if (obj.length !== +obj.length) {\n   }\n   ```\n\n#### `size`\n\n`_.size(list)`\n\n用于返回 `list` 的长度\n\n当 `list` 是数组的时候，返回的是数组的长度，当 `list` 是对象的时候，返回的是对象的长度。\n\n##### 实例\n\n```javascript\nlet person = {\n  name: '张宁宁',\n  age: 23,\n  sex: 'female'\n};\n_.size(person) // 3\n```\n\n#### 源码分析\n\n使用`_.size` 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。\n\n```javascript\nfunction size(list) {\n  if (list == null) return 0;\n  // 判断 list 是否是对象或者数组\n  // list 是数组，返回 list 的length\n  // list 是对象, 返回的是 Object.keys(list) 的长度\n  return list.length === +list.length ? list.length : Object.keys(list).length;\n}\n```\n\n#### `partition`\n\n`_.partition(array, predicate)`\n\n##### 实例\n\n使用 `partition` 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 `predicate` 函数的数组，\n\n拆分之后的第二个数组是不满足 `predicate` 函数的数组。\n\n>`predicate` : 断言，断定，宣布，宣讲，使基于\n\n##### 源码分析\n\n```javascript\n_.partition = function(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  // 定义两个数组，分别用来存放成功的数组和失败的数组\n  var pass = [], fail = [];\n  _.each(obj, function(value, key, object) {\n    // predicate 返回 true : pass.push(obj)\n    // predicate 返回 false : fail.push(obj)\n    (predicate(value, key, object) ? pass : fail).push(obj);\n  });\n  // 返回一个二维数组\n  return [[pass], [fail]];\n};\n```\n\n","slug":"underscore-js-源码分析-五","published":1,"updated":"2017-11-26T07:31:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8l0024s33gpjee5bwd","content":"<p>###　underscore.js 源码解析（五）</p>\n<p><code>sample</code> <code>toArray</code>  <code>size</code>  <code>partition</code></p>\n<h4 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"_.sample\"></a><code>_.sample</code></h4><p><code>_.sample(list, [n])</code></p>\n<p>用于产生一个随机样本, 传递的参数 n 表示从 <code>list</code> 中返回 <code>n</code> 个随机元素。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">      <span class=\"comment\">// 返回使用 _.random 获得的随机数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 slice 用来分割数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.max() 用来返回最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>通过使用 <code>Math.max()</code> 用来获得一组数中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value2, value3, value4... 等一组数中的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value1.. 中的最小值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Array.slice</code> 用来进行分割数组</p>\n<p><code>Array.slice(start, end)</code> 分割的数组中包括 <code>start</code> 不包括 <code>end</code> </p>\n</li>\n</ol>\n<h4 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a><code>toArray</code></h4><p>#####　实例</p>\n<p><code>_.toArray(list)</code></p>\n<p>如果 <code>list</code> 是一个可以迭代的对象, 可以将 <code>list</code> 转化为一个数组。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 不存在, 返回一个空的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个真正的数组, 返回 slice.call(obj),</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.slice</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个类数组对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 类数组对象属于对象，但是有 length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length === +obj.length) <span class=\"keyword\">return</span> _.map(obj, _.identity);</span><br><span class=\"line\">    <span class=\"comment\">// 返回 obj 是一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:</p>\n<p>使用 <code>obj.length</code> 进行判断的时候:</p>\n<ol>\n<li><p>对象是数组:</p>\n<p>使用 <code>Array.isArray</code> 进行判断，当 这个判断不支持的时候，使用 <code>Object.prototype.toString</code> 进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj) || <span class=\"built_in\">Object</span>.prototype.toString.call(obj) ==== <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象是类数组对象</p>\n<p>对于类数组对象也有 <code>length</code> 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断得到是类数组对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当得到的类型是对象的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于对象而言: obj.length: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// +obj.length: NaN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h4><p><code>_.size(list)</code></p>\n<p>用于返回 <code>list</code> 的长度</p>\n<p>当 <code>list</code> 是数组的时候，返回的是数组的长度，当 <code>list</code> 是对象的时候，返回的是对象的长度。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张宁宁'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">23</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.size(person) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>使用<code>_.size</code> 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 list 是否是对象或者数组</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是数组，返回 list 的length</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是对象, 返回的是 Object.keys(list) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.length === +list.length ? list.length : <span class=\"built_in\">Object</span>.keys(list).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a><code>partition</code></h4><p><code>_.partition(array, predicate)</code></p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>partition</code> 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 <code>predicate</code> 函数的数组，</p>\n<p>拆分之后的第二个数组是不满足 <code>predicate</code> 函数的数组。</p>\n<blockquote>\n<p><code>predicate</code> : 断言，断定，宣布，宣讲，使基于</p>\n</blockquote>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 定义两个数组，分别用来存放成功的数组和失败的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pass = [], fail = [];</span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 true : pass.push(obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 false : fail.push(obj)</span></span><br><span class=\"line\">    (predicate(value, key, object) ? pass : fail).push(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个二维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[pass], [fail]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>###　underscore.js 源码解析（五）</p>\n<p><code>sample</code> <code>toArray</code>  <code>size</code>  <code>partition</code></p>\n<h4 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"_.sample\"></a><code>_.sample</code></h4><p><code>_.sample(list, [n])</code></p>\n<p>用于产生一个随机样本, 传递的参数 n 表示从 <code>list</code> 中返回 <code>n</code> 个随机元素。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sample = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">      <span class=\"comment\">// 返回使用 _.random 获得的随机数</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj[_.random(obj.length - <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 slice 用来分割数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.max() 用来返回最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.shuffle(obj).slice(<span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>通过使用 <code>Math.max()</code> 用来获得一组数中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value2, value3, value4... 等一组数中的最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(value1, value2, value3, value4...)</span><br><span class=\"line\"><span class=\"comment\">// 获取到 value1, value1.. 中的最小值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Array.slice</code> 用来进行分割数组</p>\n<p><code>Array.slice(start, end)</code> 分割的数组中包括 <code>start</code> 不包括 <code>end</code> </p>\n</li>\n</ol>\n<h4 id=\"toArray\"><a href=\"#toArray\" class=\"headerlink\" title=\"toArray\"></a><code>toArray</code></h4><p>#####　实例</p>\n<p><code>_.toArray(list)</code></p>\n<p>如果 <code>list</code> 是一个可以迭代的对象, 可以将 <code>list</code> 转化为一个数组。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 不存在, 返回一个空的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个真正的数组, 返回 slice.call(obj),</span></span><br><span class=\"line\">    <span class=\"comment\">// Object.prototype.slice</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isArray(obj)) <span class=\"keyword\">return</span> slice.call(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 obj 是一个类数组对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 类数组对象属于对象，但是有 length</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length === +obj.length) <span class=\"keyword\">return</span> _.map(obj, _.identity);</span><br><span class=\"line\">    <span class=\"comment\">// 返回 obj 是一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.values(obj);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们判断一个对象是否是数组或者对象的时候我们要分为几种情况:</p>\n<p>使用 <code>obj.length</code> 进行判断的时候:</p>\n<ol>\n<li><p>对象是数组:</p>\n<p>使用 <code>Array.isArray</code> 进行判断，当 这个判断不支持的时候，使用 <code>Object.prototype.toString</code> 进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(obj) || <span class=\"built_in\">Object</span>.prototype.toString.call(obj) ==== <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象是类数组对象</p>\n<p>对于类数组对象也有 <code>length</code> 属性，因此当我们判断类数组对象不是数组的时候，接下来进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断得到是类数组对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当得到的类型是对象的时候</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于对象而言: obj.length: undefined</span></span><br><span class=\"line\"><span class=\"comment\">// +obj.length: NaN</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h4><p><code>_.size(list)</code></p>\n<p>用于返回 <code>list</code> 的长度</p>\n<p>当 <code>list</code> 是数组的时候，返回的是数组的长度，当 <code>list</code> 是对象的时候，返回的是对象的长度。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张宁宁'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">23</span>,</span><br><span class=\"line\">  sex: <span class=\"string\">'female'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.size(person) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>使用<code>_.size</code> 进行判断的数组数量的方法十分简单，判断传入的是对象或者是数组，对象的话返回的是键的值，对于数组返回的是数组的长度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 list 是否是对象或者数组</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是数组，返回 list 的length</span></span><br><span class=\"line\">  <span class=\"comment\">// list 是对象, 返回的是 Object.keys(list) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.length === +list.length ? list.length : <span class=\"built_in\">Object</span>.keys(list).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a><code>partition</code></h4><p><code>_.partition(array, predicate)</code></p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>partition</code> 的目的在于拆分一个数组为两个数组，拆分之后的数组中第一个数组是满足 <code>predicate</code> 函数的数组，</p>\n<p>拆分之后的第二个数组是不满足 <code>predicate</code> 函数的数组。</p>\n<blockquote>\n<p><code>predicate</code> : 断言，断定，宣布，宣讲，使基于</p>\n</blockquote>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 定义两个数组，分别用来存放成功的数组和失败的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pass = [], fail = [];</span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, object</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 true : pass.push(obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// predicate 返回 false : fail.push(obj)</span></span><br><span class=\"line\">    (predicate(value, key, object) ? pass : fail).push(obj);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个二维数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [[pass], [fail]];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(十三)","date":"2017-12-11T13:08:53.000Z","_content":"\n### underscore.js 源码分析(十三)\n\n`keys`  `values`  `pairs`  `invert` `functions`  `mapObject` `findKey`\n\n####  `keys(Object)`\n\n使用 `keys(Object)` 用于获得 `Object` 的所有属性名称。 与 `es6` 中  `Object.keys()` 功能相同，不同的是做了兼容性处理。\n\n```javascript\nfunction keys (obj) {\n  // 如果 obj 不存在?\n  if (!obj || typeof obj !== 'object') return [];\n  // 如果支持 Object.keys 方法, 返回 Object.keys(obj)\n  if (Object.keys) return Object.keys(obj);\n  // else 使用 for in 进行属性获取\n  let keys = [];\n  for (let key in obj) {\n    keys.push(key);\n  }\n  // 返回属性数组\n  return keys;\n}\n```\n\n####  `values(Object)`\n\n使用 `values(Object)` 用于获得对象的所有的属性名称。 类似于使用 `Object.values` 获取到对象的属性值。\n\n```javascript\nfunction values (obj) {\n  let keys = _.keys(obj);\n  let length = keys.length;\n  let values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    values[i] = obj[keys[i]];\n  }\n  return values;\n}\n```\n\n####  `pairs()`\n\n使用 `pairs()` 用于将一个对象转化为键值对的形式。\n\n自己写的函数:\n\n```javascript\nfunction pairs (obj) {\n  let keys = _.keys(obj);\n  let values = _.values(obj);\n  let len = keys.length;\n  let pairs = [];\n  for (let i = 0; i < len; i++) {\n    pairs.push([keys[i], values[i]]);\n  }\n  return pairs;\n}\n```\n\n源码分析:\n\n```javascript\n_.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n```\n\n#### `invert()`\n\n`invert(object)`\n\n使用 `invert` 实现的是返回一个 `object` 的副本，在这个副本中, `object` 中的键和值互换。\n\n源码:\n\n```javascript\nfunction invert(object) {\n  let result = {};\n  let keys = _.keys(object);\n  for (let i = 0; i < keys.length; i++) {\n    result[object[keys[i]]] = keys[i];\n  }\n  return result;\n}\n```\n\n####  `functions`\n\n`functions(object)`\n\n返回一个对象中所有的方法名，并且是已经经过排序的方法。\n\n源码分析:\n\n```javascript\n_.functions = function (obj) {\n  let names = [];\n  for (let key in obj) {\n    if (_.isFunction(obj[key])) names.push(obj[key]);\n  }\n  return name.sort();\n}\n```\n\n#### `mapObject`\n\n类似于使用数组的 `map` 方法，不同的是这个方法针对的是对象的 `map` 方法, 使用 `mapObject` 用来对于对象的属性值进行操作， 实现的源码如下:\n\n```javascript\n_.mapObject = function(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  let keys = _.keys(obj);\n      length = keys.length;\n      result = {};\n      currentKey;\n  for (let index = 0; index < length; index++) {\n    currentKey = keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  } \n}\n```\n\n#### `findKey`\n\n`_.findKey(obj, predicate, context)`\n\n使用 `findKey` 返回的是 `obj` 中第一个满足 `predicate` 函数的 `key`。\n\n```javascript\nlet numbers = {\n  first: 5,\n  second: 8\n};\n_.findKey(numbers, function (value) {\n  return value > 2;\n});\n// 返回 first\n```\n\n##### 源码分析\n\n`findKey` 源码:\n\n```javascript\n_.findKey = function (obj, predicate, context) {\n  predicate = cb(predicate, context);\n  let keys = _.keys(obj), key;\n  for (let i = 0; length = keys.length; i < length; i++) {\n    key = keys[i];\n    // 如果条件满足, 返回 key\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n```\n\n","source":"_posts/underscore-js-源码分析-十三.md","raw":"---\ntitle: underscore.js 源码分析(十三)\ndate: 2017-12-11 21:08:53\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十三)\n\n`keys`  `values`  `pairs`  `invert` `functions`  `mapObject` `findKey`\n\n####  `keys(Object)`\n\n使用 `keys(Object)` 用于获得 `Object` 的所有属性名称。 与 `es6` 中  `Object.keys()` 功能相同，不同的是做了兼容性处理。\n\n```javascript\nfunction keys (obj) {\n  // 如果 obj 不存在?\n  if (!obj || typeof obj !== 'object') return [];\n  // 如果支持 Object.keys 方法, 返回 Object.keys(obj)\n  if (Object.keys) return Object.keys(obj);\n  // else 使用 for in 进行属性获取\n  let keys = [];\n  for (let key in obj) {\n    keys.push(key);\n  }\n  // 返回属性数组\n  return keys;\n}\n```\n\n####  `values(Object)`\n\n使用 `values(Object)` 用于获得对象的所有的属性名称。 类似于使用 `Object.values` 获取到对象的属性值。\n\n```javascript\nfunction values (obj) {\n  let keys = _.keys(obj);\n  let length = keys.length;\n  let values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    values[i] = obj[keys[i]];\n  }\n  return values;\n}\n```\n\n####  `pairs()`\n\n使用 `pairs()` 用于将一个对象转化为键值对的形式。\n\n自己写的函数:\n\n```javascript\nfunction pairs (obj) {\n  let keys = _.keys(obj);\n  let values = _.values(obj);\n  let len = keys.length;\n  let pairs = [];\n  for (let i = 0; i < len; i++) {\n    pairs.push([keys[i], values[i]]);\n  }\n  return pairs;\n}\n```\n\n源码分析:\n\n```javascript\n_.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n```\n\n#### `invert()`\n\n`invert(object)`\n\n使用 `invert` 实现的是返回一个 `object` 的副本，在这个副本中, `object` 中的键和值互换。\n\n源码:\n\n```javascript\nfunction invert(object) {\n  let result = {};\n  let keys = _.keys(object);\n  for (let i = 0; i < keys.length; i++) {\n    result[object[keys[i]]] = keys[i];\n  }\n  return result;\n}\n```\n\n####  `functions`\n\n`functions(object)`\n\n返回一个对象中所有的方法名，并且是已经经过排序的方法。\n\n源码分析:\n\n```javascript\n_.functions = function (obj) {\n  let names = [];\n  for (let key in obj) {\n    if (_.isFunction(obj[key])) names.push(obj[key]);\n  }\n  return name.sort();\n}\n```\n\n#### `mapObject`\n\n类似于使用数组的 `map` 方法，不同的是这个方法针对的是对象的 `map` 方法, 使用 `mapObject` 用来对于对象的属性值进行操作， 实现的源码如下:\n\n```javascript\n_.mapObject = function(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  let keys = _.keys(obj);\n      length = keys.length;\n      result = {};\n      currentKey;\n  for (let index = 0; index < length; index++) {\n    currentKey = keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  } \n}\n```\n\n#### `findKey`\n\n`_.findKey(obj, predicate, context)`\n\n使用 `findKey` 返回的是 `obj` 中第一个满足 `predicate` 函数的 `key`。\n\n```javascript\nlet numbers = {\n  first: 5,\n  second: 8\n};\n_.findKey(numbers, function (value) {\n  return value > 2;\n});\n// 返回 first\n```\n\n##### 源码分析\n\n`findKey` 源码:\n\n```javascript\n_.findKey = function (obj, predicate, context) {\n  predicate = cb(predicate, context);\n  let keys = _.keys(obj), key;\n  for (let i = 0; length = keys.length; i < length; i++) {\n    key = keys[i];\n    // 如果条件满足, 返回 key\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n```\n\n","slug":"underscore-js-源码分析-十三","published":1,"updated":"2017-12-12T13:41:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8q0027s33go7y4kwid","content":"<h3 id=\"underscore-js-源码分析-十三\"><a href=\"#underscore-js-源码分析-十三\" class=\"headerlink\" title=\"underscore.js 源码分析(十三)\"></a>underscore.js 源码分析(十三)</h3><p><code>keys</code>  <code>values</code>  <code>pairs</code>  <code>invert</code> <code>functions</code>  <code>mapObject</code> <code>findKey</code></p>\n<h4 id=\"keys-Object\"><a href=\"#keys-Object\" class=\"headerlink\" title=\"keys(Object)\"></a><code>keys(Object)</code></h4><p>使用 <code>keys(Object)</code> 用于获得 <code>Object</code> 的所有属性名称。 与 <code>es6</code> 中  <code>Object.keys()</code> 功能相同，不同的是做了兼容性处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keys</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 不存在?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 Object.keys 方法, 返回 Object.keys(obj)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// else 使用 for in 进行属性获取</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    keys.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回属性数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"values-Object\"><a href=\"#values-Object\" class=\"headerlink\" title=\"values(Object)\"></a><code>values(Object)</code></h4><p>使用 <code>values(Object)</code> 用于获得对象的所有的属性名称。 类似于使用 <code>Object.values</code> 获取到对象的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">values</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    values[i] = obj[keys[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pairs\"><a href=\"#pairs\" class=\"headerlink\" title=\"pairs()\"></a><code>pairs()</code></h4><p>使用 <code>pairs()</code> 用于将一个对象转化为键值对的形式。</p>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = _.values(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pairs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    pairs.push([keys[i], values[i]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h4><p><code>invert(object)</code></p>\n<p>使用 <code>invert</code> 实现的是返回一个 <code>object</code> 的副本，在这个副本中, <code>object</code> 中的键和值互换。</p>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invert</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    result[object[keys[i]]] = keys[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a><code>functions</code></h4><p><code>functions(object)</code></p>\n<p>返回一个对象中所有的方法名，并且是已经经过排序的方法。</p>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.functions = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapObject\"><a href=\"#mapObject\" class=\"headerlink\" title=\"mapObject\"></a><code>mapObject</code></h4><p>类似于使用数组的 <code>map</code> 方法，不同的是这个方法针对的是对象的 <code>map</code> 方法, 使用 <code>mapObject</code> 用来对于对象的属性值进行操作， 实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      result = &#123;&#125;;</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys[index];</span><br><span class=\"line\">    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"findKey\"><a href=\"#findKey\" class=\"headerlink\" title=\"findKey\"></a><code>findKey</code></h4><p><code>_.findKey(obj, predicate, context)</code></p>\n<p>使用 <code>findKey</code> 返回的是 <code>obj</code> 中第一个满足 <code>predicate</code> 函数的 <code>key</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = &#123;</span><br><span class=\"line\">  first: <span class=\"number\">5</span>,</span><br><span class=\"line\">  second: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.findKey(numbers, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 返回 first</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p><code>findKey</code> 源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findKey = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj), key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果条件满足, 返回 key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十三\"><a href=\"#underscore-js-源码分析-十三\" class=\"headerlink\" title=\"underscore.js 源码分析(十三)\"></a>underscore.js 源码分析(十三)</h3><p><code>keys</code>  <code>values</code>  <code>pairs</code>  <code>invert</code> <code>functions</code>  <code>mapObject</code> <code>findKey</code></p>\n<h4 id=\"keys-Object\"><a href=\"#keys-Object\" class=\"headerlink\" title=\"keys(Object)\"></a><code>keys(Object)</code></h4><p>使用 <code>keys(Object)</code> 用于获得 <code>Object</code> 的所有属性名称。 与 <code>es6</code> 中  <code>Object.keys()</code> 功能相同，不同的是做了兼容性处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">keys</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 不存在?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 Object.keys 方法, 返回 Object.keys(obj)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys) <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// else 使用 for in 进行属性获取</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    keys.push(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回属性数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> keys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"values-Object\"><a href=\"#values-Object\" class=\"headerlink\" title=\"values(Object)\"></a><code>values(Object)</code></h4><p>使用 <code>values(Object)</code> 用于获得对象的所有的属性名称。 类似于使用 <code>Object.values</code> 获取到对象的属性值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">values</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    values[i] = obj[keys[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pairs\"><a href=\"#pairs\" class=\"headerlink\" title=\"pairs()\"></a><code>pairs()</code></h4><p>使用 <code>pairs()</code> 用于将一个对象转化为键值对的形式。</p>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pairs</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> values = _.values(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pairs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    pairs.push([keys[i], values[i]]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = keys.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      pairs[i] = [keys[i], obj[keys[i]]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invert\"><a href=\"#invert\" class=\"headerlink\" title=\"invert()\"></a><code>invert()</code></h4><p><code>invert(object)</code></p>\n<p>使用 <code>invert</code> 实现的是返回一个 <code>object</code> 的副本，在这个副本中, <code>object</code> 中的键和值互换。</p>\n<p>源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invert</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">    result[object[keys[i]]] = keys[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"functions\"><a href=\"#functions\" class=\"headerlink\" title=\"functions\"></a><code>functions</code></h4><p><code>functions(object)</code></p>\n<p>返回一个对象中所有的方法名，并且是已经经过排序的方法。</p>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.functions = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> names = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(obj[key])) names.push(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.sort();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mapObject\"><a href=\"#mapObject\" class=\"headerlink\" title=\"mapObject\"></a><code>mapObject</code></h4><p>类似于使用数组的 <code>map</code> 方法，不同的是这个方法针对的是对象的 <code>map</code> 方法, 使用 <code>mapObject</code> 用来对于对象的属性值进行操作， 实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mapObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj);</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      result = &#123;&#125;;</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys[index];</span><br><span class=\"line\">    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"findKey\"><a href=\"#findKey\" class=\"headerlink\" title=\"findKey\"></a><code>findKey</code></h4><p><code>_.findKey(obj, predicate, context)</code></p>\n<p>使用 <code>findKey</code> 返回的是 <code>obj</code> 中第一个满足 <code>predicate</code> 函数的 <code>key</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = &#123;</span><br><span class=\"line\">  first: <span class=\"number\">5</span>,</span><br><span class=\"line\">  second: <span class=\"number\">8</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">_.findKey(numbers, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 返回 first</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p><code>findKey</code> 源码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findKey = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(obj), key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果条件满足, 返回 key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (predicate(obj[key], key, obj)) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码分析(十五)","date":"2017-12-14T14:40:13.000Z","_content":"\n### underscore.js 源码解析( 十五 )\n\n`clone`  `tap`  `has`  `matcher`  `property`  `propertyOf`  `isEqual`\n\n#### `clone`\n\n`_.clone(object)`  \n\n创建一个浅拷贝的 `object`  \n\n使用  `_.clone` 的源码如下:\n\n```javascript\n_.clone = function (obj) {\n  if (!.isObject(obj)) return obj;\n  // 对于 obj 是对象的, 分为数组和对象两种形式\n  return isArray(obj) ? obj.slice() : _.extend({}, obj);\n}\n```\n\n####  `tap`\n\n`_.tap(object, interceptor)`\n\n>`interceptor` 拦截器\n\n使用 `interceptor` 的作用是用于对于传入的对象 `object` 进行 `interceptor` 操作, 并且操作完成之后返回 `object` 本身。\n\n用于链式调用: \n\n```javascript\n_.tap = function (obj, interceptor) {\n  // 对于对象应用 interceptor 函数作用\n  interceptor(obj);\n  // 返回这个对象\n  return obj;\n}\n```\n\n#### 　`has`\n\n`_.has(object, key)`\n\n用于判断对象是否包含有特定的属性 `key`  , 在源码中有这样一句话, \n\n>等同于`object.hasOwnProperty(key)`，但是使用`hasOwnProperty` 函数的一个安全引用，以防[意外覆盖](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/)。\n>\n>什么是意外覆盖?\n\n源码分析如下:\n\n```javascript\n_.has = function(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n};\n```\n\n#### `matcher`\n\n`matcher(attrs)`\n\n使用 `matcher` 函数是一个断言函数, 返回一个 `true` or `false` 来判断给定的对象中是否含有 `attrs` 中指定的键值对儿\n\n示例:\n\n```javascript\nlet list = {\n  selected: true\n}\nlet hasSelected = _.matcher({selected: true});\nhasSelected(list); // true\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\n_.matcher = _.matches = function(attrs) {\n  attrs = _.extendOwn({}, attrs);\n  return function (obj) {\n    return _.isMatch(obj, attrs);\n  }\n}\n```\n\n其中 `_.isMatch` 源码如下:\n\n```javascript\n_.isMatch = function (object, attrs) {\n  let keys = _.keys(attrs), length = keys.length;\n  if (object === null) return !length;\n  let obj = Object(object);\n  for (let i = 0; i < length; i++) {\n    let key = keys[i];\n    //如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中\n    // 返回 false\n    if (attrs[key] !== obj[key] || !(key in obj)) return false; \n  }\n  // 返回 true\n  return true;\n}\n```\n\n#### `property`\n\n`property(key)`  \n\n该方法返回一个函数，返回传入该函数的任何对象的 `key` 属性。  \n\n#### 源码\n\n```javascript\nlet property = function (key) {\n  return function (obj) {\n    return obj === null ? void 0 : obj[key];\n  }\n}\n```\n\n####  `propertyOf`\n\n使用 `propertyOf` 与使用  `property` 相反。  \n\n`propertyOf(object)`  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。\n\n使用 `propertyOf`   \n\n```javascript\n_.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n        return obj[key];\n    }\n}\n```\n\n#### `isEqual`\n\n`isEqual(object, other)` \n\n使用  `isEqual` 用来判断两个对象是否相等。 \n\n因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 `isEqual` 返回的是 `true`\n\n```javascript\n{} == {} // false\n_.isEqual({}, {}); // true\n```\n\n在源码中使用 `equal` 进行判断:\n\n```javascript\n_.equal = function (a, b) {\n  return eq(a, b);\n}\n```\n\n使用 `eq` 进行判断的源码如下:\n\n```javascript\nvar eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    // 如果 a 或者 b === undefined 返回 a === b\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n   // 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        // 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        // 判断 +a === 0 ? \n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    // 如果不是一个数组\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n```\n\n#####  `eq` 函数\n\n使用 `eq` 函数进行比较的时候，进行比较的值有下面几种情况:\n\n1.  处理传递进比较的数值出现 `0 === -0` 的情况。这种情况用于单个数值的比较\n\n   因为 `a === -0` 但是他们是不相同的。\n\n   ```javascript\n   // 当 a !== 0  || 1/a === 1 / b\n   // 因为 1 / a === 1 / b (Infinity === -Infinity) // false\n   if (a === b) return a !== 0 || 1 / a === 1 / b;\n   ```\n\n2.  处理 `null == undefined` 的情况  \n\n   ```\n   // 当 a == null 或者 b == null 的时候， 返回 a === b\n   if (a == null || b == null) return a === b;\n   ```\n\n3. 使用 `Object.toString` 进行判断属于 `Object` 的哪一种类型。\n\n   ```javascript\n   let className = toString.call(a);\n   // 类型不同, 返回 false\n   if (className !== toString.call(b)) return false;\n   switch (className) {\n     case '[object RegExp]':\n     case '[object String]':\n       return '' + a === '' +b;\n     case '[object Number]':\n       // 使用  NaN 进行比较\n       if (+a !== +a) return +b !== +b;\n       return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n     case '[object Date]':\n     case '[object Boolean]':\n       return +a === +b;\n   }\n   ```\n\n     \n\n4. 对于数组和对象的之间进行比较，需要深度比较\n\n   当不是数组， 对象的情况:\n\n   ```javascript\n   var areArrays = className === '[object Array]';\n   if (!areArray) {\n     if (typeof a !== 'object' || typeof b !== 'object') return false;\n     var aCtor = a.constructor, bCtor = b.constructor;\n     // 如果 aCtor !== bCtor\n     if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor isntanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n       return false;\n     }\n   }\n\n   let length = aStack.length;\n   while(length--) {\n     if (aStack[length] === a) return bStack[length] === b;\n   }\n   // 将 a 压入到 aStack 数组中\n   // 将 b 压入到 bStack 数组中\n   // aStack bStack 主要用于多重数组的情况\n   aStack.push(a);\n   bStack.push(b);\n   ```\n\n   进行比较对象或者数组:\n\n   ```javascript\n   // 比较数组\n   if (areArrays) {\n     length = a.length;\n     if (length !== b.length) return false;\n     while (length--) {\n       if (!eq(a[length], b[length], aStack, bStack)) return false;\n     }\n   } else {\n   // 比较对象  \n     let keys = _.keys(a), key;\n     length = keys.length;\n     // 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历\n     if (_.keys(b).length !== length) return false;\n     while (length--) {\n       key = keys[length];\n       if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n     }\n   }\n   // 将存入的元素进行弹出\n   aStack.pop();\n   bStack.pop();\n   return true;\n   ```\n\n   ​\n\n   ​","source":"_posts/underscore-js-源码分析-十五.md","raw":"---\ntitle: underscore.js 源码分析(十五)\ndate: 2017-12-14 22:40:13\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码解析( 十五 )\n\n`clone`  `tap`  `has`  `matcher`  `property`  `propertyOf`  `isEqual`\n\n#### `clone`\n\n`_.clone(object)`  \n\n创建一个浅拷贝的 `object`  \n\n使用  `_.clone` 的源码如下:\n\n```javascript\n_.clone = function (obj) {\n  if (!.isObject(obj)) return obj;\n  // 对于 obj 是对象的, 分为数组和对象两种形式\n  return isArray(obj) ? obj.slice() : _.extend({}, obj);\n}\n```\n\n####  `tap`\n\n`_.tap(object, interceptor)`\n\n>`interceptor` 拦截器\n\n使用 `interceptor` 的作用是用于对于传入的对象 `object` 进行 `interceptor` 操作, 并且操作完成之后返回 `object` 本身。\n\n用于链式调用: \n\n```javascript\n_.tap = function (obj, interceptor) {\n  // 对于对象应用 interceptor 函数作用\n  interceptor(obj);\n  // 返回这个对象\n  return obj;\n}\n```\n\n#### 　`has`\n\n`_.has(object, key)`\n\n用于判断对象是否包含有特定的属性 `key`  , 在源码中有这样一句话, \n\n>等同于`object.hasOwnProperty(key)`，但是使用`hasOwnProperty` 函数的一个安全引用，以防[意外覆盖](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/)。\n>\n>什么是意外覆盖?\n\n源码分析如下:\n\n```javascript\n_.has = function(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n};\n```\n\n#### `matcher`\n\n`matcher(attrs)`\n\n使用 `matcher` 函数是一个断言函数, 返回一个 `true` or `false` 来判断给定的对象中是否含有 `attrs` 中指定的键值对儿\n\n示例:\n\n```javascript\nlet list = {\n  selected: true\n}\nlet hasSelected = _.matcher({selected: true});\nhasSelected(list); // true\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\n_.matcher = _.matches = function(attrs) {\n  attrs = _.extendOwn({}, attrs);\n  return function (obj) {\n    return _.isMatch(obj, attrs);\n  }\n}\n```\n\n其中 `_.isMatch` 源码如下:\n\n```javascript\n_.isMatch = function (object, attrs) {\n  let keys = _.keys(attrs), length = keys.length;\n  if (object === null) return !length;\n  let obj = Object(object);\n  for (let i = 0; i < length; i++) {\n    let key = keys[i];\n    //如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中\n    // 返回 false\n    if (attrs[key] !== obj[key] || !(key in obj)) return false; \n  }\n  // 返回 true\n  return true;\n}\n```\n\n#### `property`\n\n`property(key)`  \n\n该方法返回一个函数，返回传入该函数的任何对象的 `key` 属性。  \n\n#### 源码\n\n```javascript\nlet property = function (key) {\n  return function (obj) {\n    return obj === null ? void 0 : obj[key];\n  }\n}\n```\n\n####  `propertyOf`\n\n使用 `propertyOf` 与使用  `property` 相反。  \n\n`propertyOf(object)`  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。\n\n使用 `propertyOf`   \n\n```javascript\n_.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n        return obj[key];\n    }\n}\n```\n\n#### `isEqual`\n\n`isEqual(object, other)` \n\n使用  `isEqual` 用来判断两个对象是否相等。 \n\n因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 `isEqual` 返回的是 `true`\n\n```javascript\n{} == {} // false\n_.isEqual({}, {}); // true\n```\n\n在源码中使用 `equal` 进行判断:\n\n```javascript\n_.equal = function (a, b) {\n  return eq(a, b);\n}\n```\n\n使用 `eq` 进行判断的源码如下:\n\n```javascript\nvar eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    // 如果 a 或者 b === undefined 返回 a === b\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n   // 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        // 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        // 判断 +a === 0 ? \n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    // 如果不是一个数组\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n        _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n```\n\n#####  `eq` 函数\n\n使用 `eq` 函数进行比较的时候，进行比较的值有下面几种情况:\n\n1.  处理传递进比较的数值出现 `0 === -0` 的情况。这种情况用于单个数值的比较\n\n   因为 `a === -0` 但是他们是不相同的。\n\n   ```javascript\n   // 当 a !== 0  || 1/a === 1 / b\n   // 因为 1 / a === 1 / b (Infinity === -Infinity) // false\n   if (a === b) return a !== 0 || 1 / a === 1 / b;\n   ```\n\n2.  处理 `null == undefined` 的情况  \n\n   ```\n   // 当 a == null 或者 b == null 的时候， 返回 a === b\n   if (a == null || b == null) return a === b;\n   ```\n\n3. 使用 `Object.toString` 进行判断属于 `Object` 的哪一种类型。\n\n   ```javascript\n   let className = toString.call(a);\n   // 类型不同, 返回 false\n   if (className !== toString.call(b)) return false;\n   switch (className) {\n     case '[object RegExp]':\n     case '[object String]':\n       return '' + a === '' +b;\n     case '[object Number]':\n       // 使用  NaN 进行比较\n       if (+a !== +a) return +b !== +b;\n       return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n     case '[object Date]':\n     case '[object Boolean]':\n       return +a === +b;\n   }\n   ```\n\n     \n\n4. 对于数组和对象的之间进行比较，需要深度比较\n\n   当不是数组， 对象的情况:\n\n   ```javascript\n   var areArrays = className === '[object Array]';\n   if (!areArray) {\n     if (typeof a !== 'object' || typeof b !== 'object') return false;\n     var aCtor = a.constructor, bCtor = b.constructor;\n     // 如果 aCtor !== bCtor\n     if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor isntanceof bCtor) && ('constructor' in a && 'constructor' in b)) {\n       return false;\n     }\n   }\n\n   let length = aStack.length;\n   while(length--) {\n     if (aStack[length] === a) return bStack[length] === b;\n   }\n   // 将 a 压入到 aStack 数组中\n   // 将 b 压入到 bStack 数组中\n   // aStack bStack 主要用于多重数组的情况\n   aStack.push(a);\n   bStack.push(b);\n   ```\n\n   进行比较对象或者数组:\n\n   ```javascript\n   // 比较数组\n   if (areArrays) {\n     length = a.length;\n     if (length !== b.length) return false;\n     while (length--) {\n       if (!eq(a[length], b[length], aStack, bStack)) return false;\n     }\n   } else {\n   // 比较对象  \n     let keys = _.keys(a), key;\n     length = keys.length;\n     // 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历\n     if (_.keys(b).length !== length) return false;\n     while (length--) {\n       key = keys[length];\n       if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n     }\n   }\n   // 将存入的元素进行弹出\n   aStack.pop();\n   bStack.pop();\n   return true;\n   ```\n\n   ​\n\n   ​","slug":"underscore-js-源码分析-十五","published":1,"updated":"2017-12-16T04:13:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8s002bs33gq53fygby","content":"<h3 id=\"underscore-js-源码解析-十五\"><a href=\"#underscore-js-源码解析-十五\" class=\"headerlink\" title=\"underscore.js 源码解析( 十五 )\"></a>underscore.js 源码解析( 十五 )</h3><p><code>clone</code>  <code>tap</code>  <code>has</code>  <code>matcher</code>  <code>property</code>  <code>propertyOf</code>  <code>isEqual</code></p>\n<h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a><code>clone</code></h4><p><code>_.clone(object)</code>  </p>\n<p>创建一个浅拷贝的 <code>object</code>  </p>\n<p>使用  <code>_.clone</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 是对象的, 分为数组和对象两种形式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tap\"><a href=\"#tap\" class=\"headerlink\" title=\"tap\"></a><code>tap</code></h4><p><code>_.tap(object, interceptor)</code></p>\n<blockquote>\n<p><code>interceptor</code> 拦截器</p>\n</blockquote>\n<p>使用 <code>interceptor</code> 的作用是用于对于传入的对象 <code>object</code> 进行 <code>interceptor</code> 操作, 并且操作完成之后返回 <code>object</code> 本身。</p>\n<p>用于链式调用: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.tap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, interceptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于对象应用 interceptor 函数作用</span></span><br><span class=\"line\">  interceptor(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"　has\"></a>　<code>has</code></h4><p><code>_.has(object, key)</code></p>\n<p>用于判断对象是否包含有特定的属性 <code>key</code>  , 在源码中有这样一句话, </p>\n<blockquote>\n<p>等同于<code>object.hasOwnProperty(key)</code>，但是使用<code>hasOwnProperty</code> 函数的一个安全引用，以防<a href=\"http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\" target=\"_blank\" rel=\"noopener\">意外覆盖</a>。</p>\n<p>什么是意外覆盖?</p>\n</blockquote>\n<p>源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"matcher\"><a href=\"#matcher\" class=\"headerlink\" title=\"matcher\"></a><code>matcher</code></h4><p><code>matcher(attrs)</code></p>\n<p>使用 <code>matcher</code> 函数是一个断言函数, 返回一个 <code>true</code> or <code>false</code> 来判断给定的对象中是否含有 <code>attrs</code> 中指定的键值对儿</p>\n<p>示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">  selected: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasSelected = _.matcher(&#123;<span class=\"attr\">selected</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">hasSelected(list); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  attrs = _.extendOwn(&#123;&#125;, attrs);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>_.isMatch</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isMatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(attrs), length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">//如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a><code>property</code></h4><p><code>property(key)</code>  </p>\n<p>该方法返回一个函数，返回传入该函数的任何对象的 <code>key</code> 属性。  </p>\n<h4 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> property = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"propertyOf\"><a href=\"#propertyOf\" class=\"headerlink\" title=\"propertyOf\"></a><code>propertyOf</code></h4><p>使用 <code>propertyOf</code> 与使用  <code>property</code> 相反。  </p>\n<p><code>propertyOf(object)</code>  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。</p>\n<p>使用 <code>propertyOf</code>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isEqual\"><a href=\"#isEqual\" class=\"headerlink\" title=\"isEqual\"></a><code>isEqual</code></h4><p><code>isEqual(object, other)</code> </p>\n<p>使用  <code>isEqual</code> 用来判断两个对象是否相等。 </p>\n<p>因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 <code>isEqual</code> 返回的是 <code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false</span></span><br><span class=\"line\">_.isEqual(&#123;&#125;, &#123;&#125;); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在源码中使用 <code>equal</code> 进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.equal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eq(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>eq</code> 进行判断的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></span><br><span class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果 a 或者 b === undefined 返回 a === b</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</span><br><span class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</span><br><span class=\"line\">   <span class=\"comment\">// 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></span><br><span class=\"line\">        <span class=\"comment\">// 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断 +a === 0 ? </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></span><br><span class=\"line\">      <span class=\"comment\">// from different frames are.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">        _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></span><br><span class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></span><br><span class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></span><br><span class=\"line\">    aStack = aStack || [];</span><br><span class=\"line\">    bStack = bStack || [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">      <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.push(a);</span><br><span class=\"line\">    bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></span><br><span class=\"line\">      length = a.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Deep compare each member</span></span><br><span class=\"line\">        key = keys[length];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.pop();</span><br><span class=\"line\">    bStack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"eq-函数\"><a href=\"#eq-函数\" class=\"headerlink\" title=\"eq 函数\"></a><code>eq</code> 函数</h5><p>使用 <code>eq</code> 函数进行比较的时候，进行比较的值有下面几种情况:</p>\n<ol>\n<li><p>处理传递进比较的数值出现 <code>0 === -0</code> 的情况。这种情况用于单个数值的比较</p>\n<p>因为 <code>a === -0</code> 但是他们是不相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 a !== 0  || 1/a === 1 / b</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 1 / a === 1 / b (Infinity === -Infinity) // false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理 <code>null == undefined</code> 的情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 a == null 或者 b == null 的时候， 返回 a === b</span><br><span class=\"line\">if (a == null || b == null) return a === b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.toString</code> 进行判断属于 <code>Object</code> 的哪一种类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> className = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 类型不同, 返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 使用  NaN 进行比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>对于数组和对象的之间进行比较，需要深度比较</p>\n<p>当不是数组， 对象的情况:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!areArray) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 aCtor !== bCtor</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp; _.isFunction(bCtor) &amp;&amp; bCtor isntanceof bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(length--) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将 a 压入到 aStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// 将 b 压入到 bStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// aStack bStack 主要用于多重数组的情况</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>进行比较对象或者数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">  length = a.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 比较对象  </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(a), key;</span><br><span class=\"line\">  length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    key = keys[length];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将存入的元素进行弹出</span></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\">bStack.pop();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码解析-十五\"><a href=\"#underscore-js-源码解析-十五\" class=\"headerlink\" title=\"underscore.js 源码解析( 十五 )\"></a>underscore.js 源码解析( 十五 )</h3><p><code>clone</code>  <code>tap</code>  <code>has</code>  <code>matcher</code>  <code>property</code>  <code>propertyOf</code>  <code>isEqual</code></p>\n<h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a><code>clone</code></h4><p><code>_.clone(object)</code>  </p>\n<p>创建一个浅拷贝的 <code>object</code>  </p>\n<p>使用  <code>_.clone</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 是对象的, 分为数组和对象两种形式</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tap\"><a href=\"#tap\" class=\"headerlink\" title=\"tap\"></a><code>tap</code></h4><p><code>_.tap(object, interceptor)</code></p>\n<blockquote>\n<p><code>interceptor</code> 拦截器</p>\n</blockquote>\n<p>使用 <code>interceptor</code> 的作用是用于对于传入的对象 <code>object</code> 进行 <code>interceptor</code> 操作, 并且操作完成之后返回 <code>object</code> 本身。</p>\n<p>用于链式调用: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.tap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, interceptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对于对象应用 interceptor 函数作用</span></span><br><span class=\"line\">  interceptor(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 返回这个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"　has\"></a>　<code>has</code></h4><p><code>_.has(object, key)</code></p>\n<p>用于判断对象是否包含有特定的属性 <code>key</code>  , 在源码中有这样一句话, </p>\n<blockquote>\n<p>等同于<code>object.hasOwnProperty(key)</code>，但是使用<code>hasOwnProperty</code> 函数的一个安全引用，以防<a href=\"http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\" target=\"_blank\" rel=\"noopener\">意外覆盖</a>。</p>\n<p>什么是意外覆盖?</p>\n</blockquote>\n<p>源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"matcher\"><a href=\"#matcher\" class=\"headerlink\" title=\"matcher\"></a><code>matcher</code></h4><p><code>matcher(attrs)</code></p>\n<p>使用 <code>matcher</code> 函数是一个断言函数, 返回一个 <code>true</code> or <code>false</code> 来判断给定的对象中是否含有 <code>attrs</code> 中指定的键值对儿</p>\n<p>示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = &#123;</span><br><span class=\"line\">  selected: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> hasSelected = _.matcher(&#123;<span class=\"attr\">selected</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">hasSelected(list); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.matcher = _.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  attrs = _.extendOwn(&#123;&#125;, attrs);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isMatch(obj, attrs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>_.isMatch</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isMatch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">object, attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(attrs), length = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>(object);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"comment\">//如果 attrs 中的值和 obj 中的值不相等， 或者 key 不属于 obj 中</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (attrs[key] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a><code>property</code></h4><p><code>property(key)</code>  </p>\n<p>该方法返回一个函数，返回传入该函数的任何对象的 <code>key</code> 属性。  </p>\n<h4 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> property = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"propertyOf\"><a href=\"#propertyOf\" class=\"headerlink\" title=\"propertyOf\"></a><code>propertyOf</code></h4><p>使用 <code>propertyOf</code> 与使用  <code>property</code> 相反。  </p>\n<p><code>propertyOf(object)</code>  传入一个对象， 返回一个函数，这个函数接收一个属性，返回对象对应属性的值。</p>\n<p>使用 <code>propertyOf</code>   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.propertyOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125; : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isEqual\"><a href=\"#isEqual\" class=\"headerlink\" title=\"isEqual\"></a><code>isEqual</code></h4><p><code>isEqual(object, other)</code> </p>\n<p>使用  <code>isEqual</code> 用来判断两个对象是否相等。 </p>\n<p>因为不同的对象被放在了不同的内存空间中, 因此， 即使是属性和值均相等的对象也是不相同的, 如果对象的属性和值都是相同的，使用 <code>isEqual</code> 返回的是 <code>true</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125; == &#123;&#125; <span class=\"comment\">// false</span></span><br><span class=\"line\">_.isEqual(&#123;&#125;, &#123;&#125;); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在源码中使用 <code>equal</code> 进行判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.equal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eq(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>eq</code> 进行判断的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eq = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, aStack, bStack</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Identical objects are equal. `0 === -0`, but they aren't identical.</span></span><br><span class=\"line\">    <span class=\"comment\">// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\">    <span class=\"comment\">// A strict comparison is necessary because `null == undefined`.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果 a 或者 b === undefined 返回 a === b</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span> || b == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\">    <span class=\"comment\">// Unwrap any wrapped objects.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> _) a = a._wrapped;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b <span class=\"keyword\">instanceof</span> _) b = b._wrapped;</span><br><span class=\"line\">    <span class=\"comment\">// Compare `[[Class]]` names.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> className = toString.call(a);</span><br><span class=\"line\">   <span class=\"comment\">// 如果 a 的对象的类型不同于 b 的对象的类型， 返回的是 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Strings, numbers, regular expressions, dates, and booleans are compared by value.</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">      <span class=\"comment\">// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is</span></span><br><span class=\"line\">        <span class=\"comment\">// equivalent to `new String(\"5\")`.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// `NaN`s are equivalent, but non-reflexive.</span></span><br><span class=\"line\">        <span class=\"comment\">// Object(NaN) is equivalent to NaN</span></span><br><span class=\"line\">        <span class=\"comment\">// 当 a 是 NaN 的时候, 如果 b 也是 NaN 那么 !b !== b // false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">        <span class=\"comment\">// An `egal` comparison is performed for other numeric values.</span></span><br><span class=\"line\">        <span class=\"comment\">// 判断 +a === 0 ? </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">        <span class=\"comment\">// Coerce dates and booleans to numeric primitive values. Dates are compared by their</span></span><br><span class=\"line\">        <span class=\"comment\">// millisecond representations. Note that invalid dates with millisecond representations</span></span><br><span class=\"line\">        <span class=\"comment\">// of `NaN` are not equivalent.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!areArrays) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a != <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b != <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Objects with different constructors are not equivalent, but `Object`s or `Array`s</span></span><br><span class=\"line\">      <span class=\"comment\">// from different frames are.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">        _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Assume equality for cyclic structures. The algorithm for detecting cyclic</span></span><br><span class=\"line\">    <span class=\"comment\">// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initializing stack of traversed objects.</span></span><br><span class=\"line\">    <span class=\"comment\">// It's done here since we only need them for objects and arrays comparison.</span></span><br><span class=\"line\">    aStack = aStack || [];</span><br><span class=\"line\">    bStack = bStack || [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">      <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.push(a);</span><br><span class=\"line\">    bStack.push(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursively compare objects and arrays.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Compare array lengths to determine if a deep comparison is necessary.</span></span><br><span class=\"line\">      length = a.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare the contents, ignoring non-numeric properties.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Deep compare objects.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">      length = keys.length;</span><br><span class=\"line\">      <span class=\"comment\">// Ensure that both objects contain the same number of properties before comparing deep equality.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Deep compare each member</span></span><br><span class=\"line\">        key = keys[length];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Remove the first object from the stack of traversed objects.</span></span><br><span class=\"line\">    aStack.pop();</span><br><span class=\"line\">    bStack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"eq-函数\"><a href=\"#eq-函数\" class=\"headerlink\" title=\"eq 函数\"></a><code>eq</code> 函数</h5><p>使用 <code>eq</code> 函数进行比较的时候，进行比较的值有下面几种情况:</p>\n<ol>\n<li><p>处理传递进比较的数值出现 <code>0 === -0</code> 的情况。这种情况用于单个数值的比较</p>\n<p>因为 <code>a === -0</code> 但是他们是不相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当 a !== 0  || 1/a === 1 / b</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 1 / a === 1 / b (Infinity === -Infinity) // false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>处理 <code>null == undefined</code> 的情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 a == null 或者 b == null 的时候， 返回 a === b</span><br><span class=\"line\">if (a == null || b == null) return a === b;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>Object.toString</code> 进行判断属于 <code>Object</code> 的哪一种类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> className = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 类型不同, 返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (className !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (className) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Number]'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 使用  NaN 进行比较</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / b : +a === +b;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>对于数组和对象的之间进行比较，需要深度比较</p>\n<p>当不是数组， 对象的情况:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> areArrays = className === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!areArray) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 aCtor !== bCtor</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp; _.isFunction(bCtor) &amp;&amp; bCtor isntanceof bCtor) &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(length--) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将 a 压入到 aStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// 将 b 压入到 bStack 数组中</span></span><br><span class=\"line\"><span class=\"comment\">// aStack bStack 主要用于多重数组的情况</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>进行比较对象或者数组:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比较数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (areArrays) &#123;</span><br><span class=\"line\">  length = a.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eq(a[length], b[length], aStack, bStack)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 比较对象  </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = _.keys(a), key;</span><br><span class=\"line\">  length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 如果两个对象的属性数目不相同 返回 false 不用进行深度遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.keys(b).length !== length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">    key = keys[length];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; eq(a[key], b[key], aStack, bStack))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将存入的元素进行弹出</span></span><br><span class=\"line\">aStack.pop();</span><br><span class=\"line\">bStack.pop();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"underscore.js 源码分析(十六)","date":"2017-12-16T04:14:24.000Z","_content":"\n### underscore.js 源码分析(十六)\n\n####  `isEmpty`\n\n`isEmpty(object)`   `isElement`  ``\n\n如果 `object` 是一个空对象， 或者 `object` 是一个字符串或者数组, 并且字符串或者数组的 `length`  为 `0`; 返回 `true`,\n\n否则, 返回 `false`.\n\n##### 示例\n\n```javascript\n_.isEmpty({}); // true\n_.isEmpty({ name: '张宁宁' }); // false\n```\n\n\n\n##### 源码分析\n\n```javascript\n/*\n* @description isEmpty 用来判断 Obj 是否为空\n*/\nfunction isEmpty (obj) {\n  if (obj == null) return true;\n  if (isArray(obj) || isString(obj) || isArguments(obj)) return obj.length === 0;\n  for (let key in obj) if (has(obj, key)) return false;\n  return true;\n}\n```\n\n####  `isElement`\n\n`isElement(obj)`\n\n如果 `obj` 是一个 `dom` 元素, 返回为 `true;`\n\n对于 dom 元素  `nodeType ===  1`\n\n```javascript\nfunction isElement(obj) {\n  // 如果 obj 以及 obj.nodeType === 1\n  // 表示 obj 是一个节点对象\n  return !!(obj && obj.nodeType === 1);\n};\n```\n\n#### 判断函数\n\n使用判断函数用于判断函数的类型, 例如:   \n\n`isArray`  `isObject`  `isArguments`  `isFunction`  `isString`  `isNumber` ....\n\n实现上面这几种方法的判断是使用 `Array.prototype.toString.call` 的方法进行判断的:\n\n##### 源码分析  \n\n```javascript\n_.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n  _.['is' + name] = function (obj) {\n    // 通过使用 toString.call 来决定判断是属于哪一种类型\n    return toString.call(obj) === `[object ${name}]`;\n  }\n})\n```\n\n对于其他几个的判断:\n\n#####  `isObject` \n\n```javascript\n_.isObject = function (obj) {\n  let type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n##### `isFinite`  \n\n用来判断给定的对象是否属于一个无限的数。 \n\n```javascript\n_.isFinite = function () {\n  return isFinite(obj) && !isNaN(parseFloat(obj));\n}\n```\n\n##### `isNaN`\n\n用来判断给定的值是否是 `NaN` 值,\n\n>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  \n\n```javascript\n_.isNaN = function(obj) {\n  // NaN !== NaN\n  // NaN 是一个数字\n  return _.isNumber(obj) && obj !== +obj;\n}\n```\n\n##### `isBoolean`\n\n用于判断是否是一个布尔值;\n\n```javascript\n_.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object, Boolean]';\n}\n```\n\n##### `isNull`\n\n```javascript\n_.isNull = function (obj) {\n  return obj === null;\n}\n```\n\n####  `isUndefined`\n\n```javascript\n_.isUndefine = function (obj) {\n  // 这里通过使用 void 0 来代替 undefined 值\n  return obj === void 0;\n}\n```\n\n","source":"_posts/underscore-js-源码分析-十六.md","raw":"---\ntitle: underscore.js 源码分析(十六)\ndate: 2017-12-16 12:14:24\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十六)\n\n####  `isEmpty`\n\n`isEmpty(object)`   `isElement`  ``\n\n如果 `object` 是一个空对象， 或者 `object` 是一个字符串或者数组, 并且字符串或者数组的 `length`  为 `0`; 返回 `true`,\n\n否则, 返回 `false`.\n\n##### 示例\n\n```javascript\n_.isEmpty({}); // true\n_.isEmpty({ name: '张宁宁' }); // false\n```\n\n\n\n##### 源码分析\n\n```javascript\n/*\n* @description isEmpty 用来判断 Obj 是否为空\n*/\nfunction isEmpty (obj) {\n  if (obj == null) return true;\n  if (isArray(obj) || isString(obj) || isArguments(obj)) return obj.length === 0;\n  for (let key in obj) if (has(obj, key)) return false;\n  return true;\n}\n```\n\n####  `isElement`\n\n`isElement(obj)`\n\n如果 `obj` 是一个 `dom` 元素, 返回为 `true;`\n\n对于 dom 元素  `nodeType ===  1`\n\n```javascript\nfunction isElement(obj) {\n  // 如果 obj 以及 obj.nodeType === 1\n  // 表示 obj 是一个节点对象\n  return !!(obj && obj.nodeType === 1);\n};\n```\n\n#### 判断函数\n\n使用判断函数用于判断函数的类型, 例如:   \n\n`isArray`  `isObject`  `isArguments`  `isFunction`  `isString`  `isNumber` ....\n\n实现上面这几种方法的判断是使用 `Array.prototype.toString.call` 的方法进行判断的:\n\n##### 源码分析  \n\n```javascript\n_.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n  _.['is' + name] = function (obj) {\n    // 通过使用 toString.call 来决定判断是属于哪一种类型\n    return toString.call(obj) === `[object ${name}]`;\n  }\n})\n```\n\n对于其他几个的判断:\n\n#####  `isObject` \n\n```javascript\n_.isObject = function (obj) {\n  let type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n```\n\n##### `isFinite`  \n\n用来判断给定的对象是否属于一个无限的数。 \n\n```javascript\n_.isFinite = function () {\n  return isFinite(obj) && !isNaN(parseFloat(obj));\n}\n```\n\n##### `isNaN`\n\n用来判断给定的值是否是 `NaN` 值,\n\n>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  \n\n```javascript\n_.isNaN = function(obj) {\n  // NaN !== NaN\n  // NaN 是一个数字\n  return _.isNumber(obj) && obj !== +obj;\n}\n```\n\n##### `isBoolean`\n\n用于判断是否是一个布尔值;\n\n```javascript\n_.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object, Boolean]';\n}\n```\n\n##### `isNull`\n\n```javascript\n_.isNull = function (obj) {\n  return obj === null;\n}\n```\n\n####  `isUndefined`\n\n```javascript\n_.isUndefine = function (obj) {\n  // 这里通过使用 void 0 来代替 undefined 值\n  return obj === void 0;\n}\n```\n\n","slug":"underscore-js-源码分析-十六","published":1,"updated":"2017-12-16T07:02:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8u002es33gpcta3wbt","content":"<h3 id=\"underscore-js-源码分析-十六\"><a href=\"#underscore-js-源码分析-十六\" class=\"headerlink\" title=\"underscore.js 源码分析(十六)\"></a>underscore.js 源码分析(十六)</h3><h4 id=\"isEmpty\"><a href=\"#isEmpty\" class=\"headerlink\" title=\"isEmpty\"></a><code>isEmpty</code></h4><p><code>isEmpty(object)</code>   <code>isElement</code>  <code></code></p>\n<p>如果 <code>object</code> 是一个空对象， 或者 <code>object</code> 是一个字符串或者数组, 并且字符串或者数组的 <code>length</code>  为 <code>0</code>; 返回 <code>true</code>,</p>\n<p>否则, 返回 <code>false</code>.</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span> &#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description isEmpty 用来判断 Obj 是否为空</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(obj) || isString(obj) || isArguments(obj)) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (has(obj, key)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isElement\"><a href=\"#isElement\" class=\"headerlink\" title=\"isElement\"></a><code>isElement</code></h4><p><code>isElement(obj)</code></p>\n<p>如果 <code>obj</code> 是一个 <code>dom</code> 元素, 返回为 <code>true;</code></p>\n<p>对于 dom 元素  <code>nodeType ===  1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 以及 obj.nodeType === 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示 obj 是一个节点对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断函数\"><a href=\"#判断函数\" class=\"headerlink\" title=\"判断函数\"></a>判断函数</h4><p>使用判断函数用于判断函数的类型, 例如:   </p>\n<p><code>isArray</code>  <code>isObject</code>  <code>isArguments</code>  <code>isFunction</code>  <code>isString</code>  <code>isNumber</code> ….</p>\n<p>实现上面这几种方法的判断是使用 <code>Array.prototype.toString.call</code> 的方法进行判断的:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  _.[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 toString.call 来决定判断是属于哪一种类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;name&#125;</span>]`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于其他几个的判断:</p>\n<h5 id=\"isObject\"><a href=\"#isObject\" class=\"headerlink\" title=\"isObject\"></a><code>isObject</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite\"></a><code>isFinite</code></h5><p>用来判断给定的对象是否属于一个无限的数。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN\"></a><code>isNaN</code></h5><p>用来判断给定的值是否是 <code>NaN</code> 值,</p>\n<blockquote>\n<p>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// NaN !== NaN</span></span><br><span class=\"line\">  <span class=\"comment\">// NaN 是一个数字</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isBoolean\"><a href=\"#isBoolean\" class=\"headerlink\" title=\"isBoolean\"></a><code>isBoolean</code></h5><p>用于判断是否是一个布尔值;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object, Boolean]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNull\"><a href=\"#isNull\" class=\"headerlink\" title=\"isNull\"></a><code>isNull</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNull = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isUndefined\"><a href=\"#isUndefined\" class=\"headerlink\" title=\"isUndefined\"></a><code>isUndefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isUndefine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里通过使用 void 0 来代替 undefined 值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十六\"><a href=\"#underscore-js-源码分析-十六\" class=\"headerlink\" title=\"underscore.js 源码分析(十六)\"></a>underscore.js 源码分析(十六)</h3><h4 id=\"isEmpty\"><a href=\"#isEmpty\" class=\"headerlink\" title=\"isEmpty\"></a><code>isEmpty</code></h4><p><code>isEmpty(object)</code>   <code>isElement</code>  <code></code></p>\n<p>如果 <code>object</code> 是一个空对象， 或者 <code>object</code> 是一个字符串或者数组, 并且字符串或者数组的 <code>length</code>  为 <code>0</code>; 返回 <code>true</code>,</p>\n<p>否则, 返回 <code>false</code>.</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isEmpty(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\">_.isEmpty(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span> &#125;); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description isEmpty 用来判断 Obj 是否为空</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(obj) || isString(obj) || isArguments(obj)) <span class=\"keyword\">return</span> obj.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) <span class=\"keyword\">if</span> (has(obj, key)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isElement\"><a href=\"#isElement\" class=\"headerlink\" title=\"isElement\"></a><code>isElement</code></h4><p><code>isElement(obj)</code></p>\n<p>如果 <code>obj</code> 是一个 <code>dom</code> 元素, 返回为 <code>true;</code></p>\n<p>对于 dom 元素  <code>nodeType ===  1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isElement</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 以及 obj.nodeType === 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 表示 obj 是一个节点对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"判断函数\"><a href=\"#判断函数\" class=\"headerlink\" title=\"判断函数\"></a>判断函数</h4><p>使用判断函数用于判断函数的类型, 例如:   </p>\n<p><code>isArray</code>  <code>isObject</code>  <code>isArguments</code>  <code>isFunction</code>  <code>isString</code>  <code>isNumber</code> ….</p>\n<p>实现上面这几种方法的判断是使用 <code>Array.prototype.toString.call</code> 的方法进行判断的:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each([<span class=\"string\">'Arguments'</span>, <span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  _.[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 toString.call 来决定判断是属于哪一种类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">`[object <span class=\"subst\">$&#123;name&#125;</span>]`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于其他几个的判断:</p>\n<h5 id=\"isObject\"><a href=\"#isObject\" class=\"headerlink\" title=\"isObject\"></a><code>isObject</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"keyword\">typeof</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> type === <span class=\"string\">'function'</span> || type === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite\"></a><code>isFinite</code></h5><p>用来判断给定的对象是否属于一个无限的数。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">isFinite</span>(obj) &amp;&amp; !<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseFloat</span>(obj));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN\"></a><code>isNaN</code></h5><p>用来判断给定的值是否是 <code>NaN</code> 值,</p>\n<blockquote>\n<p>NaN is the only number which does not equal itself (NaN 是唯一一个和他自身不等的值)  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// NaN !== NaN</span></span><br><span class=\"line\">  <span class=\"comment\">// NaN 是一个数字</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; obj !== +obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isBoolean\"><a href=\"#isBoolean\" class=\"headerlink\" title=\"isBoolean\"></a><code>isBoolean</code></h5><p>用于判断是否是一个布尔值;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isBoolean = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">true</span> || obj === <span class=\"literal\">false</span> || toString.call(obj) === <span class=\"string\">'[object, Boolean]'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"isNull\"><a href=\"#isNull\" class=\"headerlink\" title=\"isNull\"></a><code>isNull</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isNull = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isUndefined\"><a href=\"#isUndefined\" class=\"headerlink\" title=\"isUndefined\"></a><code>isUndefined</code></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isUndefine = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里通过使用 void 0 来代替 undefined 值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj === <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js 源码解析(六)","date":"2017-11-27T14:59:20.000Z","_content":"\n###  underscore.js 源码解析(六)\n\n`first` `initial`  `last` `rest` `compact`\n\n#### `first`\n\n#####  实例\n\n`_.first(array, [n])`\n\n`n` 是可选的, 表示选择数组中的前 `n` 个元素， 当我们没有传递 `n` 的时候，我们获得的是数组的第一个元素 `array[0]`。\n\n使用 `first` 用来获取到数组中的第一个元素。\n\n```javascript\nlet list = [1, 2, 3, 4];\n_.first(list) // 1\n```\n\n##### 源码分析\n\n使用 `_.first` 实现的源码如下:\n\n```\n_.first = _.head = _.take = function(array, n, guard) {\n    // 如果 array 为null 返回 undefined\n    if (array == null) return void 0;\n    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]\n    if (n == null || guard) return array[0];\n    // 使用 _.initial 用于返回数组的前 n 个元素\n    return _.initial(array, array.length - n);\n };\n```\n\n注意:\n\n1.  如何判断 `null`? \n\n   如果使用 `typeof` 判断 `null` 会返回 `object` , 实现判断是否为 `null` 的简单方法是进行判断:\n\n   ```\n   if (obj == null) {\n     // isnull\n   }\n   ```\n\n这里使用了一个 `_.initial` 用于获取到数组的相关值:\n\n#### `_.initial`\n\n使用 `_.initial` 的目的在于返回数组中前 `n` 个元素，不包括第 `n` 个元素\n\n##### 源码如下:\n\n```javascript\n_.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n};\n```\n\n#### `_.last`\n\n使用 `_.last` 用于返回数组中的最后一个元素。\n\n##### 源码分析\n\n```javascript\n_.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    // 调用 rest函数， 当 n !== null 的时候\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n```\n\n#### `_.rest`\n\n使用 `_.rest` 函数用于返回数组中剩下的元素。\n\n##### 源码分析\n\n```javascript\n_.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n); \n};\n```\n\n>使用 `slice.call` 其实是 `Array.prototype.slice.call()` 的方法\n>\n>`Array.slice(start, end)` // 用于裁剪数组，裁剪的数组包括 `start` 不包括 `end`  \n\n#### `compact` \n\n使用 `compact` 用于去除所有为 `假值` 的数组成员\n\n> 关于假值:  `false`, `undefined` `null`  `0` 以及 `\"\"` 被称为假值, 因为强制类型转换会被转换为 `false`。\n\n源码如下:\n\n```javascript\n _.compact = function(array) {\n   // 在 filter 的函数中\n    return _.filter(array, _.identity);\n };\n```\n\n因为在上面的代码中，函数 `_.filter` 中存在一个判断:\n\n```javascript\nif (someFn) {\n  // doSomething\n}\n```\n\n这里会对位于 `if` 框内的元素`someFn`进行强制类型转换。","source":"_posts/underscore-js-源码解析-六.md","raw":"---\ntitle: underscore.js 源码解析(六)\ndate: 2017-11-27 22:59:20\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###  underscore.js 源码解析(六)\n\n`first` `initial`  `last` `rest` `compact`\n\n#### `first`\n\n#####  实例\n\n`_.first(array, [n])`\n\n`n` 是可选的, 表示选择数组中的前 `n` 个元素， 当我们没有传递 `n` 的时候，我们获得的是数组的第一个元素 `array[0]`。\n\n使用 `first` 用来获取到数组中的第一个元素。\n\n```javascript\nlet list = [1, 2, 3, 4];\n_.first(list) // 1\n```\n\n##### 源码分析\n\n使用 `_.first` 实现的源码如下:\n\n```\n_.first = _.head = _.take = function(array, n, guard) {\n    // 如果 array 为null 返回 undefined\n    if (array == null) return void 0;\n    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]\n    if (n == null || guard) return array[0];\n    // 使用 _.initial 用于返回数组的前 n 个元素\n    return _.initial(array, array.length - n);\n };\n```\n\n注意:\n\n1.  如何判断 `null`? \n\n   如果使用 `typeof` 判断 `null` 会返回 `object` , 实现判断是否为 `null` 的简单方法是进行判断:\n\n   ```\n   if (obj == null) {\n     // isnull\n   }\n   ```\n\n这里使用了一个 `_.initial` 用于获取到数组的相关值:\n\n#### `_.initial`\n\n使用 `_.initial` 的目的在于返回数组中前 `n` 个元素，不包括第 `n` 个元素\n\n##### 源码如下:\n\n```javascript\n_.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n};\n```\n\n#### `_.last`\n\n使用 `_.last` 用于返回数组中的最后一个元素。\n\n##### 源码分析\n\n```javascript\n_.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    // 调用 rest函数， 当 n !== null 的时候\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n```\n\n#### `_.rest`\n\n使用 `_.rest` 函数用于返回数组中剩下的元素。\n\n##### 源码分析\n\n```javascript\n_.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n); \n};\n```\n\n>使用 `slice.call` 其实是 `Array.prototype.slice.call()` 的方法\n>\n>`Array.slice(start, end)` // 用于裁剪数组，裁剪的数组包括 `start` 不包括 `end`  \n\n#### `compact` \n\n使用 `compact` 用于去除所有为 `假值` 的数组成员\n\n> 关于假值:  `false`, `undefined` `null`  `0` 以及 `\"\"` 被称为假值, 因为强制类型转换会被转换为 `false`。\n\n源码如下:\n\n```javascript\n _.compact = function(array) {\n   // 在 filter 的函数中\n    return _.filter(array, _.identity);\n };\n```\n\n因为在上面的代码中，函数 `_.filter` 中存在一个判断:\n\n```javascript\nif (someFn) {\n  // doSomething\n}\n```\n\n这里会对位于 `if` 框内的元素`someFn`进行强制类型转换。","slug":"underscore-js-源码解析-六","published":1,"updated":"2017-11-27T15:58:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh8y002is33gph4qc1xa","content":"<h3 id=\"underscore-js-源码解析-六\"><a href=\"#underscore-js-源码解析-六\" class=\"headerlink\" title=\"underscore.js 源码解析(六)\"></a>underscore.js 源码解析(六)</h3><p><code>first</code> <code>initial</code>  <code>last</code> <code>rest</code> <code>compact</code></p>\n<h4 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a><code>first</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.first(array, [n])</code></p>\n<p><code>n</code> 是可选的, 表示选择数组中的前 <code>n</code> 个元素， 当我们没有传递 <code>n</code> 的时候，我们获得的是数组的第一个元素 <code>array[0]</code>。</p>\n<p>使用 <code>first</code> 用来获取到数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">_.first(list) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.first</code> 实现的源码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.first = _.head = _.take = function(array, n, guard) &#123;</span><br><span class=\"line\">    // 如果 array 为null 返回 undefined</span><br><span class=\"line\">    if (array == null) return void 0;</span><br><span class=\"line\">    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]</span><br><span class=\"line\">    if (n == null || guard) return array[0];</span><br><span class=\"line\">    // 使用 _.initial 用于返回数组的前 n 个元素</span><br><span class=\"line\">    return _.initial(array, array.length - n);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ol>\n<li><p>如何判断 <code>null</code>? </p>\n<p>如果使用 <code>typeof</code> 判断 <code>null</code> 会返回 <code>object</code> , 实现判断是否为 <code>null</code> 的简单方法是进行判断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">  // isnull</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里使用了一个 <code>_.initial</code> 用于获取到数组的相关值:</p>\n<h4 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h4><p>使用 <code>_.initial</code> 的目的在于返回数组中前 <code>n</code> 个元素，不包括第 <code>n</code> 个元素</p>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下:\"></a>源码如下:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h4><p>使用 <code>_.last</code> 用于返回数组中的最后一个元素。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 调用 rest函数， 当 n !== null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest\"><a href=\"#rest\" class=\"headerlink\" title=\"_.rest\"></a><code>_.rest</code></h4><p>使用 <code>_.rest</code> 函数用于返回数组中剩下的元素。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>slice.call</code> 其实是 <code>Array.prototype.slice.call()</code> 的方法</p>\n<p><code>Array.slice(start, end)</code> // 用于裁剪数组，裁剪的数组包括 <code>start</code> 不包括 <code>end</code>  </p>\n</blockquote>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"compact\"></a><code>compact</code></h4><p>使用 <code>compact</code> 用于去除所有为 <code>假值</code> 的数组成员</p>\n<blockquote>\n<p>关于假值:  <code>false</code>, <code>undefined</code> <code>null</code>  <code>0</code> 以及 <code>&quot;&quot;</code> 被称为假值, 因为强制类型转换会被转换为 <code>false</code>。</p>\n</blockquote>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在 filter 的函数中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(array, _.identity);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为在上面的代码中，函数 <code>_.filter</code> 中存在一个判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someFn) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// doSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会对位于 <code>if</code> 框内的元素<code>someFn</code>进行强制类型转换。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码解析-六\"><a href=\"#underscore-js-源码解析-六\" class=\"headerlink\" title=\"underscore.js 源码解析(六)\"></a>underscore.js 源码解析(六)</h3><p><code>first</code> <code>initial</code>  <code>last</code> <code>rest</code> <code>compact</code></p>\n<h4 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a><code>first</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.first(array, [n])</code></p>\n<p><code>n</code> 是可选的, 表示选择数组中的前 <code>n</code> 个元素， 当我们没有传递 <code>n</code> 的时候，我们获得的是数组的第一个元素 <code>array[0]</code>。</p>\n<p>使用 <code>first</code> 用来获取到数组中的第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">_.first(list) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.first</code> 实现的源码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.first = _.head = _.take = function(array, n, guard) &#123;</span><br><span class=\"line\">    // 如果 array 为null 返回 undefined</span><br><span class=\"line\">    if (array == null) return void 0;</span><br><span class=\"line\">    // 如果没有明确传入的 参数 n 返回数组的第一项 array[0]</span><br><span class=\"line\">    if (n == null || guard) return array[0];</span><br><span class=\"line\">    // 使用 _.initial 用于返回数组的前 n 个元素</span><br><span class=\"line\">    return _.initial(array, array.length - n);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ol>\n<li><p>如何判断 <code>null</code>? </p>\n<p>如果使用 <code>typeof</code> 判断 <code>null</code> 会返回 <code>object</code> , 实现判断是否为 <code>null</code> 的简单方法是进行判断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">  // isnull</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里使用了一个 <code>_.initial</code> 用于获取到数组的相关值:</p>\n<h4 id=\"initial\"><a href=\"#initial\" class=\"headerlink\" title=\"_.initial\"></a><code>_.initial</code></h4><p>使用 <code>_.initial</code> 的目的在于返回数组中前 <code>n</code> 个元素，不包括第 <code>n</code> 个元素</p>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下:\"></a>源码如下:</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.initial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, <span class=\"number\">0</span>, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - (n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n)));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"_.last\"></a><code>_.last</code></h4><p>使用 <code>_.last</code> 用于返回数组中的最后一个元素。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.last = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"literal\">null</span> || guard) <span class=\"keyword\">return</span> array[array.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 调用 rest函数， 当 n !== null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.rest(array, <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, array.length - n));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rest\"><a href=\"#rest\" class=\"headerlink\" title=\"_.rest\"></a><code>_.rest</code></h4><p>使用 <code>_.rest</code> 函数用于返回数组中剩下的元素。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.rest = _.tail = _.drop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, n, guard</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slice.call(array, n == <span class=\"literal\">null</span> || guard ? <span class=\"number\">1</span> : n); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>slice.call</code> 其实是 <code>Array.prototype.slice.call()</code> 的方法</p>\n<p><code>Array.slice(start, end)</code> // 用于裁剪数组，裁剪的数组包括 <code>start</code> 不包括 <code>end</code>  </p>\n</blockquote>\n<h4 id=\"compact\"><a href=\"#compact\" class=\"headerlink\" title=\"compact\"></a><code>compact</code></h4><p>使用 <code>compact</code> 用于去除所有为 <code>假值</code> 的数组成员</p>\n<blockquote>\n<p>关于假值:  <code>false</code>, <code>undefined</code> <code>null</code>  <code>0</code> 以及 <code>&quot;&quot;</code> 被称为假值, 因为强制类型转换会被转换为 <code>false</code>。</p>\n</blockquote>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compact = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在 filter 的函数中</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(array, _.identity);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为在上面的代码中，函数 <code>_.filter</code> 中存在一个判断:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someFn) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// doSomething</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会对位于 <code>if</code> 框内的元素<code>someFn</code>进行强制类型转换。</p>\n"},{"title":"underscore.js源码分析(一)","date":"2017-11-18T08:34:36.000Z","_content":"\n#### underscore.js 源码分析（一）\n\n`_.each`  `_.map`  `_.refuce` `_.reduceRight`  `_.find`\n\n#### `_.each`\n\n##### 实例\n\n`_.each(list, iteratee, [context])`\n\n这个方法用于循环遍历, 用于循环 `list` 对象或者数组， `iteratee` 是一个遍历函数，接收的参数为遍历之后的结果。  \n\n当 `list` 为数组的时候，传递给 `iteratee` 函数的参数是  `(element, index, list)`, 当 `list` 为对象的时候, 传递给 `iteratee` 函数的参数是 `[value, key, list]`。\n\n对于 `context` 上下文, 这个决定的是 `iteratee` 中的 `this` 的指向值。可选参数， 当 `context` 忽略的时候 `this` 指向的是全局变量。\n\n`_.each` 返回值是进行遍历的 `list` 数组对象。\n\n```\nfunction print(value, index, list) {\n  console.log(this.name);// 这里 this 指向了后面传递的 context\n  console.log(value, index, list);\n}\nlet person = {\n  name: '张宁宁'\n}\nconsole.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]\n// 最终打印\n张宁宁\n1 0 (3) [1, 2, 3]\n张宁宁\n2 1 (3) [1, 2, 3]\n张宁宁\n3 2 (3) [1, 2, 3]\n```\n\n##### 源码分析\n\n在 `underscore.js` 源码中， `_.each()` 源码为下:\n\n```\n _.each = _.forEach = function(obj, iteratee, context) {\n    // 如果 obj == null 返回 null\n    if (obj == null) return obj;\n    // 调用 optimiseCb 函数 稍后分析\n    iteratee = optimizeCb(iteratee, context);\n    var i, length = obj.length;\n    // 这里提供了分别 数组和对象的一种方法\n    // 如果数组\n    if (length === +length) {\n    // 数组情况下， 将 [value, index, list] 传入遍历函数\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n    // 获取到对象所有的 key 值\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    // 返回数组或者对象\n    return obj;\n  };\n```\n\n分析:\n\n1.  分别数组和对象的方法\n\n    我平常的时候使用 `Object.prootype.toString.call().slice(8, -1)` 这种方法来分别数组和纯对象，这里使用了一种方法。\n\n   ```\n   if (length === +length) {\n   // 这是数组\n   } else {\n   // 这是对象\n   }\n   ```\n\n   `+length` 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 `+` 进行类型转换的可能性如下:\n\n   ```javascript\n   +null // 0\n   +flase // 0\n   +\"\" // 0\n   +true // 1\n   +对象 // NaN\n   +非空字符串 // NaN\n   +NaN // NaN\n   +1 // 1\n   +undefined // NaN\n   ```\n\n   因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 `+length` 会被转化为 `NaN`。\n\n2.  ` iteratee = optimizeCb(iteratee, context);`\n\n    `optimizaCb` 函数\n\n   使用 `optimizaCb` 函数用于绑定上下文: 使用 `call` 以及 `apply` 的方法实现的改变函数运行的 `this` 值的改变\n\n   接收三个参数: `func` 运行的函数  `context` 运行函数需要进行绑定的上下文  `argCount` 参数的个数\n\n   ```\n   var optimizeCb = function(func, context, argCount) {\n       // 使用 void 0 类似于使用 undefined\n       // 等同于使用 if(context === undefined)\n       if (context === void 0) return func;\n       switch (argCount == null ? 3 : argCount) {\n         case 1: return function(value) {\n           return func.call(context, value);\n         };\n         case 2: return function(value, other) {\n           return func.call(context, value, other);\n         };\n         case 3: return function(value, index, collection) {\n           return func.call(context, value, index, collection);\n         };\n         case 4: return function(accumulator, value, index, collection) {\n           return func.call(context, accumulator, value, index, collection);\n         };\n       }\n       return function() {\n         return func.apply(context, arguments);\n       };\n    };\n   ```\n\n   上面的 `_.each` 源码中的使用这个函数的目的是将 `iteratee` 的上下文 `this` 绑定到 `context` 对象。\n\n   >这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 `undefined` 的原因在于： 在 `javascript` 中 `undefined` 不是一个保留字。\n   >\n   >代码如下:\n   >\n   >```\n   >var undefined = 1;\n   >console.log(undefined); // 1  也是可以的\n   >使用 void 0 作用是这样的\n   >```\n\n#### _.map\n\n##### 实例\n\n`_.map(list, iteratee, [context])`\n\n通过 使用变换函数 `iteratee` 将`list` 中的值映射到一个新的数组。\n\n```\nfunction filter(value) {\n  return value * 2;\n}\n_.map([1, 2, 3], filter); // [2, 4, 6]\n```\n\n源码如下:\n\n```javascript\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = cb(iteratee, context);\n    // 使用 && 操作符， 只有当第一个为true的时候才执行下一步操作\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        // || 操作符 第一个为true的时候不再进行下一步动作\n        length = (keys || obj).length,\n        // 使用 Array 创建一个 length 长度的数组\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n```\n\n##### 源码分析\n\n1.  使用 `&&` 以及 `||` 进行计算\n\n   这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。\n\n   > 这里对于类型转换，使用的时候要注意出现假值的情况\n\n   使用 `&&` 以及 `||` 会首先对于 * 第一个*  操作数进行计算，根据判断结果来决定返回哪一个操作数。\n\n   ```\n   a || b\n   // 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b\n   a && b\n   // 如果 a 类型转换结果为 true 返回的是 b 否则返回 a\n   ```\n\n   上面我们可以看到，我们可以利用这两个操作符做一些事情:\n\n   ` a || b` 好像备用条件。 如果条件 `a` 不成立, 执行条件 b, 如果成立，执行条件 `a`  `a ? a : b`\n\n    `a && b` 好像通过条件， 如果 `a` 成立，向下执行，如果不成立，打住，返回 `a` 执行的结果 `a ? b : a`  \n\n2. 使用 `Array(length)` 创建的是一个 `length` 长度的数组。\n\n#### _.reduce\n\n##### 实例\n\n`_.reduce(list, iteratee, [memo], context)`\n\n通过迭代将 `list` 中的元素归结为一个值。 `memo` 表示初始参数。\n\n```\nfunction reduceFn(memo, num) {\n  return memo * num;\n}\nlet list = [1, 2, 3];\n_.reduce(list, reduceFn, 1) // 6\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\nfunction reduce(obj, iteratee, memo, context) {\n\tif (obj === null) obj = [];\n\titeratee = optimizeCb(iteratee, context, 4);\n\tvar keys = obj.length !== +obj.length && Object.keys(),\n\t\tlength = (keys || obj).length,\n\t\tindex = 0, currentIndex;\n\tif (arguments.length < 3) {\n\t\tmemo = obj[keys ? keys[index++] : index++];\n\t}\n\tfor (; index < length; index++) {\n\t\tcurrentIndex = keys ? keys[index] : index;\n\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);\n\t}\n\treturn memo;\n\t}\n```\n\n分析:\n\n1.  在 `obj` 可能是对象或者数组的情况下，当 `obj` 是对象的时候，需要产生了一个 使用 `keys` 来进行数组操作\n\n2. 在迭代的时候， 当没有 `memo` 初始值的时候， 将数组或者对象的第一个值作为 `memo` 这里，使用 `index++` 来处理的\n\n   >使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index\n   >\n   >```\n   >let currentIndex = 0;\n   >let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作\n   >addIndex // 0\n   >currentIndex // 1\n   >```\n   >\n   >​\n\n3. 迭代的过程发生在使用循环赋值的过程中\n\n   ```javascript\n   for (; index < length; index++) {\n     memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);\n   }\n   ```\n\n\n#### _.reduceRight\n\n##### 实例\n\n`_.reduceRight(list, iteratee, [memo], context)`\n\n类似于使用`_.reduce` 不过不同于使用 `_.reduce` 的是，这个是从右边向左进行遍历操作;\n\n```javascript\nfunction contact(a, b) {\n  return a.contact(b);\n}\nlet list = [[1, 2], [3, 4], [5, 6]];\n_.reduceRight(list, contact) // [5, 6, 3, 4, 1, 2]\n```\n\n##### 源码分析\n\n```javascript\n_.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = optimizeCb(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      // 先对于 index 进行 减一操作\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    // 在判断完成 index 之后进行减一操作\n    while (index-- > 0) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n```\n\n1.  使用 `while` 循环进行判断\n\n   ```\n   while (index-- > 0) {\n     // do something\n   }\n   ```\n\n####  _.find\n\n##### 实例\n\n`_.find(list, predicate, [context])`\n\n遍历  `list` 值   返回第一个通过 `predicate` 函数返回真值的数值。\n\n```\nlet list = [1, 2, 3];\nfunction getodd(value) {\n  return value % 2 === 0;\n}\n_find(list, getodd) // 2\n```\n\n##### 源码分析\n\n```javascript\n _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    // 如果是数组\n    if (obj.length === +obj.length) {\n      // 使用 findIndex 找到数组的值\n      key = _.findIndex(obj, predicate, context);\n    } else {\n    // 如果是是对象\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/underscore-js源码分析-一.md","raw":"---\ntitle: underscore.js源码分析(一)\ndate: 2017-11-18 16:34:36\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n#### underscore.js 源码分析（一）\n\n`_.each`  `_.map`  `_.refuce` `_.reduceRight`  `_.find`\n\n#### `_.each`\n\n##### 实例\n\n`_.each(list, iteratee, [context])`\n\n这个方法用于循环遍历, 用于循环 `list` 对象或者数组， `iteratee` 是一个遍历函数，接收的参数为遍历之后的结果。  \n\n当 `list` 为数组的时候，传递给 `iteratee` 函数的参数是  `(element, index, list)`, 当 `list` 为对象的时候, 传递给 `iteratee` 函数的参数是 `[value, key, list]`。\n\n对于 `context` 上下文, 这个决定的是 `iteratee` 中的 `this` 的指向值。可选参数， 当 `context` 忽略的时候 `this` 指向的是全局变量。\n\n`_.each` 返回值是进行遍历的 `list` 数组对象。\n\n```\nfunction print(value, index, list) {\n  console.log(this.name);// 这里 this 指向了后面传递的 context\n  console.log(value, index, list);\n}\nlet person = {\n  name: '张宁宁'\n}\nconsole.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]\n// 最终打印\n张宁宁\n1 0 (3) [1, 2, 3]\n张宁宁\n2 1 (3) [1, 2, 3]\n张宁宁\n3 2 (3) [1, 2, 3]\n```\n\n##### 源码分析\n\n在 `underscore.js` 源码中， `_.each()` 源码为下:\n\n```\n _.each = _.forEach = function(obj, iteratee, context) {\n    // 如果 obj == null 返回 null\n    if (obj == null) return obj;\n    // 调用 optimiseCb 函数 稍后分析\n    iteratee = optimizeCb(iteratee, context);\n    var i, length = obj.length;\n    // 这里提供了分别 数组和对象的一种方法\n    // 如果数组\n    if (length === +length) {\n    // 数组情况下， 将 [value, index, list] 传入遍历函数\n      for (i = 0; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n    // 获取到对象所有的 key 值\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    // 返回数组或者对象\n    return obj;\n  };\n```\n\n分析:\n\n1.  分别数组和对象的方法\n\n    我平常的时候使用 `Object.prootype.toString.call().slice(8, -1)` 这种方法来分别数组和纯对象，这里使用了一种方法。\n\n   ```\n   if (length === +length) {\n   // 这是数组\n   } else {\n   // 这是对象\n   }\n   ```\n\n   `+length` 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 `+` 进行类型转换的可能性如下:\n\n   ```javascript\n   +null // 0\n   +flase // 0\n   +\"\" // 0\n   +true // 1\n   +对象 // NaN\n   +非空字符串 // NaN\n   +NaN // NaN\n   +1 // 1\n   +undefined // NaN\n   ```\n\n   因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 `+length` 会被转化为 `NaN`。\n\n2.  ` iteratee = optimizeCb(iteratee, context);`\n\n    `optimizaCb` 函数\n\n   使用 `optimizaCb` 函数用于绑定上下文: 使用 `call` 以及 `apply` 的方法实现的改变函数运行的 `this` 值的改变\n\n   接收三个参数: `func` 运行的函数  `context` 运行函数需要进行绑定的上下文  `argCount` 参数的个数\n\n   ```\n   var optimizeCb = function(func, context, argCount) {\n       // 使用 void 0 类似于使用 undefined\n       // 等同于使用 if(context === undefined)\n       if (context === void 0) return func;\n       switch (argCount == null ? 3 : argCount) {\n         case 1: return function(value) {\n           return func.call(context, value);\n         };\n         case 2: return function(value, other) {\n           return func.call(context, value, other);\n         };\n         case 3: return function(value, index, collection) {\n           return func.call(context, value, index, collection);\n         };\n         case 4: return function(accumulator, value, index, collection) {\n           return func.call(context, accumulator, value, index, collection);\n         };\n       }\n       return function() {\n         return func.apply(context, arguments);\n       };\n    };\n   ```\n\n   上面的 `_.each` 源码中的使用这个函数的目的是将 `iteratee` 的上下文 `this` 绑定到 `context` 对象。\n\n   >这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 `undefined` 的原因在于： 在 `javascript` 中 `undefined` 不是一个保留字。\n   >\n   >代码如下:\n   >\n   >```\n   >var undefined = 1;\n   >console.log(undefined); // 1  也是可以的\n   >使用 void 0 作用是这样的\n   >```\n\n#### _.map\n\n##### 实例\n\n`_.map(list, iteratee, [context])`\n\n通过 使用变换函数 `iteratee` 将`list` 中的值映射到一个新的数组。\n\n```\nfunction filter(value) {\n  return value * 2;\n}\n_.map([1, 2, 3], filter); // [2, 4, 6]\n```\n\n源码如下:\n\n```javascript\n  _.map = _.collect = function(obj, iteratee, context) {\n    if (obj == null) return [];\n    iteratee = cb(iteratee, context);\n    // 使用 && 操作符， 只有当第一个为true的时候才执行下一步操作\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        // || 操作符 第一个为true的时候不再进行下一步动作\n        length = (keys || obj).length,\n        // 使用 Array 创建一个 length 长度的数组\n        results = Array(length),\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n```\n\n##### 源码分析\n\n1.  使用 `&&` 以及 `||` 进行计算\n\n   这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。\n\n   > 这里对于类型转换，使用的时候要注意出现假值的情况\n\n   使用 `&&` 以及 `||` 会首先对于 * 第一个*  操作数进行计算，根据判断结果来决定返回哪一个操作数。\n\n   ```\n   a || b\n   // 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b\n   a && b\n   // 如果 a 类型转换结果为 true 返回的是 b 否则返回 a\n   ```\n\n   上面我们可以看到，我们可以利用这两个操作符做一些事情:\n\n   ` a || b` 好像备用条件。 如果条件 `a` 不成立, 执行条件 b, 如果成立，执行条件 `a`  `a ? a : b`\n\n    `a && b` 好像通过条件， 如果 `a` 成立，向下执行，如果不成立，打住，返回 `a` 执行的结果 `a ? b : a`  \n\n2. 使用 `Array(length)` 创建的是一个 `length` 长度的数组。\n\n#### _.reduce\n\n##### 实例\n\n`_.reduce(list, iteratee, [memo], context)`\n\n通过迭代将 `list` 中的元素归结为一个值。 `memo` 表示初始参数。\n\n```\nfunction reduceFn(memo, num) {\n  return memo * num;\n}\nlet list = [1, 2, 3];\n_.reduce(list, reduceFn, 1) // 6\n```\n\n##### 源码分析\n\n源码如下:\n\n```javascript\nfunction reduce(obj, iteratee, memo, context) {\n\tif (obj === null) obj = [];\n\titeratee = optimizeCb(iteratee, context, 4);\n\tvar keys = obj.length !== +obj.length && Object.keys(),\n\t\tlength = (keys || obj).length,\n\t\tindex = 0, currentIndex;\n\tif (arguments.length < 3) {\n\t\tmemo = obj[keys ? keys[index++] : index++];\n\t}\n\tfor (; index < length; index++) {\n\t\tcurrentIndex = keys ? keys[index] : index;\n\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);\n\t}\n\treturn memo;\n\t}\n```\n\n分析:\n\n1.  在 `obj` 可能是对象或者数组的情况下，当 `obj` 是对象的时候，需要产生了一个 使用 `keys` 来进行数组操作\n\n2. 在迭代的时候， 当没有 `memo` 初始值的时候， 将数组或者对象的第一个值作为 `memo` 这里，使用 `index++` 来处理的\n\n   >使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index\n   >\n   >```\n   >let currentIndex = 0;\n   >let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作\n   >addIndex // 0\n   >currentIndex // 1\n   >```\n   >\n   >​\n\n3. 迭代的过程发生在使用循环赋值的过程中\n\n   ```javascript\n   for (; index < length; index++) {\n     memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);\n   }\n   ```\n\n\n#### _.reduceRight\n\n##### 实例\n\n`_.reduceRight(list, iteratee, [memo], context)`\n\n类似于使用`_.reduce` 不过不同于使用 `_.reduce` 的是，这个是从右边向左进行遍历操作;\n\n```javascript\nfunction contact(a, b) {\n  return a.contact(b);\n}\nlet list = [[1, 2], [3, 4], [5, 6]];\n_.reduceRight(list, contact) // [5, 6, 3, 4, 1, 2]\n```\n\n##### 源码分析\n\n```javascript\n_.reduceRight = _.foldr = function(obj, iteratee, memo, context) {\n    if (obj == null) obj = [];\n    iteratee = optimizeCb(iteratee, context, 4);\n    var keys = obj.length !== + obj.length && _.keys(obj),\n        index = (keys || obj).length,\n        currentKey;\n    if (arguments.length < 3) {\n      // 先对于 index 进行 减一操作\n      memo = obj[keys ? keys[--index] : --index];\n    }\n    // 在判断完成 index 之后进行减一操作\n    while (index-- > 0) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n```\n\n1.  使用 `while` 循环进行判断\n\n   ```\n   while (index-- > 0) {\n     // do something\n   }\n   ```\n\n####  _.find\n\n##### 实例\n\n`_.find(list, predicate, [context])`\n\n遍历  `list` 值   返回第一个通过 `predicate` 函数返回真值的数值。\n\n```\nlet list = [1, 2, 3];\nfunction getodd(value) {\n  return value % 2 === 0;\n}\n_find(list, getodd) // 2\n```\n\n##### 源码分析\n\n```javascript\n _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    // 如果是数组\n    if (obj.length === +obj.length) {\n      // 使用 findIndex 找到数组的值\n      key = _.findIndex(obj, predicate, context);\n    } else {\n    // 如果是是对象\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"underscore-js源码分析-一","published":1,"updated":"2017-11-25T07:50:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh96002ks33g1fqmnqd9","content":"<h4 id=\"underscore-js-源码分析（一）\"><a href=\"#underscore-js-源码分析（一）\" class=\"headerlink\" title=\"underscore.js 源码分析（一）\"></a>underscore.js 源码分析（一）</h4><p><code>_.each</code>  <code>_.map</code>  <code>_.refuce</code> <code>_.reduceRight</code>  <code>_.find</code></p>\n<h4 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a><code>_.each</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.each(list, iteratee, [context])</code></p>\n<p>这个方法用于循环遍历, 用于循环 <code>list</code> 对象或者数组， <code>iteratee</code> 是一个遍历函数，接收的参数为遍历之后的结果。  </p>\n<p>当 <code>list</code> 为数组的时候，传递给 <code>iteratee</code> 函数的参数是  <code>(element, index, list)</code>, 当 <code>list</code> 为对象的时候, 传递给 <code>iteratee</code> 函数的参数是 <code>[value, key, list]</code>。</p>\n<p>对于 <code>context</code> 上下文, 这个决定的是 <code>iteratee</code> 中的 <code>this</code> 的指向值。可选参数， 当 <code>context</code> 忽略的时候 <code>this</code> 指向的是全局变量。</p>\n<p><code>_.each</code> 返回值是进行遍历的 <code>list</code> 数组对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function print(value, index, list) &#123;</span><br><span class=\"line\">  console.log(this.name);// 这里 this 指向了后面传递的 context</span><br><span class=\"line\">  console.log(value, index, list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let person = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]</span><br><span class=\"line\">// 最终打印</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">1 0 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">2 1 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">3 2 (3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>在 <code>underscore.js</code> 源码中， <code>_.each()</code> 源码为下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each = _.forEach = function(obj, iteratee, context) &#123;</span><br><span class=\"line\">   // 如果 obj == null 返回 null</span><br><span class=\"line\">   if (obj == null) return obj;</span><br><span class=\"line\">   // 调用 optimiseCb 函数 稍后分析</span><br><span class=\"line\">   iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\">   var i, length = obj.length;</span><br><span class=\"line\">   // 这里提供了分别 数组和对象的一种方法</span><br><span class=\"line\">   // 如果数组</span><br><span class=\"line\">   if (length === +length) &#123;</span><br><span class=\"line\">   // 数组情况下， 将 [value, index, list] 传入遍历函数</span><br><span class=\"line\">     for (i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[i], i, obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">   // 获取到对象所有的 key 值</span><br><span class=\"line\">     var keys = _.keys(obj);</span><br><span class=\"line\">     for (i = 0, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 返回数组或者对象</span><br><span class=\"line\">   return obj;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>分别数组和对象的方法</p>\n<p>我平常的时候使用 <code>Object.prootype.toString.call().slice(8, -1)</code> 这种方法来分别数组和纯对象，这里使用了一种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (length === +length) &#123;</span><br><span class=\"line\">// 这是数组</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// 这是对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>+length</code> 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 <code>+</code> 进行类型转换的可能性如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"literal\">null</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+flase <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"string\">\"\"</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+对象 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+非空字符串 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"literal\">NaN</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+<span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 <code>+length</code> 会被转化为 <code>NaN</code>。</p>\n</li>\n<li><p><code>iteratee = optimizeCb(iteratee, context);</code></p>\n<p><code>optimizaCb</code> 函数</p>\n<p>使用 <code>optimizaCb</code> 函数用于绑定上下文: 使用 <code>call</code> 以及 <code>apply</code> 的方法实现的改变函数运行的 <code>this</code> 值的改变</p>\n<p>接收三个参数: <code>func</code> 运行的函数  <code>context</code> 运行函数需要进行绑定的上下文  <code>argCount</code> 参数的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optimizeCb = function(func, context, argCount) &#123;</span><br><span class=\"line\">    // 使用 void 0 类似于使用 undefined</span><br><span class=\"line\">    // 等同于使用 if(context === undefined)</span><br><span class=\"line\">    if (context === void 0) return func;</span><br><span class=\"line\">    switch (argCount == null ? 3 : argCount) &#123;</span><br><span class=\"line\">      case 1: return function(value) &#123;</span><br><span class=\"line\">        return func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 2: return function(value, other) &#123;</span><br><span class=\"line\">        return func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 3: return function(value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 4: return function(accumulator, value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return func.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>_.each</code> 源码中的使用这个函数的目的是将 <code>iteratee</code> 的上下文 <code>this</code> 绑定到 <code>context</code> 对象。</p>\n<blockquote>\n<p>这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 <code>undefined</code> 的原因在于： 在 <code>javascript</code> 中 <code>undefined</code> 不是一个保留字。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;var undefined = 1;</span><br><span class=\"line\">&gt;console.log(undefined); // 1  也是可以的</span><br><span class=\"line\">&gt;使用 void 0 作用是这样的</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.map(list, iteratee, [context])</code></p>\n<p>通过 使用变换函数 <code>iteratee</code> 将<code>list</code> 中的值映射到一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function filter(value) &#123;</span><br><span class=\"line\">  return value * 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.map([1, 2, 3], filter); // [2, 4, 6]</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 &amp;&amp; 操作符， 只有当第一个为true的时候才执行下一步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">      <span class=\"comment\">// || 操作符 第一个为true的时候不再进行下一步动作</span></span><br><span class=\"line\">      length = (keys || obj).length,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 Array 创建一个 length 长度的数组</span></span><br><span class=\"line\">      results = <span class=\"built_in\">Array</span>(length),</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">    results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><ol>\n<li><p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 进行计算</p>\n<p>这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。</p>\n<blockquote>\n<p>这里对于类型转换，使用的时候要注意出现假值的情况</p>\n</blockquote>\n<p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 会首先对于 <em> 第一个</em>  操作数进行计算，根据判断结果来决定返回哪一个操作数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a || b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b</span><br><span class=\"line\">a &amp;&amp; b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 b 否则返回 a</span><br></pre></td></tr></table></figure>\n<p>上面我们可以看到，我们可以利用这两个操作符做一些事情:</p>\n<p><code>a || b</code> 好像备用条件。 如果条件 <code>a</code> 不成立, 执行条件 b, 如果成立，执行条件 <code>a</code>  <code>a ? a : b</code></p>\n<p><code>a &amp;&amp; b</code> 好像通过条件， 如果 <code>a</code> 成立，向下执行，如果不成立，打住，返回 <code>a</code> 执行的结果 <code>a ? b : a</code>  </p>\n</li>\n<li><p>使用 <code>Array(length)</code> 创建的是一个 <code>length</code> 长度的数组。</p>\n</li>\n</ol>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduce(list, iteratee, [memo], context)</code></p>\n<p>通过迭代将 <code>list</code> 中的元素归结为一个值。 <code>memo</code> 表示初始参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reduceFn(memo, num) &#123;</span><br><span class=\"line\">  return memo * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">_.reduce(list, reduceFn, 1) // 6</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduce</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">\titeratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(),</span><br><span class=\"line\">\t\tlength = (keys || obj).length,</span><br><span class=\"line\">\t\tindex = <span class=\"number\">0</span>, currentIndex;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\tmemo = obj[keys ? keys[index++] : index++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentIndex = keys ? keys[index] : index;</span><br><span class=\"line\">\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>在 <code>obj</code> 可能是对象或者数组的情况下，当 <code>obj</code> 是对象的时候，需要产生了一个 使用 <code>keys</code> 来进行数组操作</p>\n</li>\n<li><p>在迭代的时候， 当没有 <code>memo</code> 初始值的时候， 将数组或者对象的第一个值作为 <code>memo</code> 这里，使用 <code>index++</code> 来处理的</p>\n<blockquote>\n<p>使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;let currentIndex = 0;</span><br><span class=\"line\">&gt;let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作</span><br><span class=\"line\">&gt;addIndex // 0</span><br><span class=\"line\">&gt;currentIndex // 1</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>迭代的过程发生在使用循环赋值的过程中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">  memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduceRight(list, iteratee, [memo], context)</code></p>\n<p>类似于使用<code>_.reduce</code> 不过不同于使用 <code>_.reduce</code> 的是，这个是从右边向左进行遍历操作;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contact</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.contact(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]];</span><br><span class=\"line\">_.reduceRight(list, contact) <span class=\"comment\">// [5, 6, 3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reduceRight = _.foldr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== + obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        index = (keys || obj).length,</span><br><span class=\"line\">        currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先对于 index 进行 减一操作</span></span><br><span class=\"line\">      memo = obj[keys ? keys[--index] : --index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在判断完成 index 之后进行减一操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 <code>while</code> 循环进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (index-- &gt; 0) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.find(list, predicate, [context])</code></p>\n<p>遍历  <code>list</code> 值   返回第一个通过 <code>predicate</code> 函数返回真值的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">function getodd(value) &#123;</span><br><span class=\"line\">  return value % 2 === 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_find(list, getodd) // 2</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 findIndex 找到数组的值</span></span><br><span class=\"line\">     key = _.findIndex(obj, predicate, context);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是是对象</span></span><br><span class=\"line\">     key = _.findKey(obj, predicate, context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"underscore-js-源码分析（一）\"><a href=\"#underscore-js-源码分析（一）\" class=\"headerlink\" title=\"underscore.js 源码分析（一）\"></a>underscore.js 源码分析（一）</h4><p><code>_.each</code>  <code>_.map</code>  <code>_.refuce</code> <code>_.reduceRight</code>  <code>_.find</code></p>\n<h4 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"_.each\"></a><code>_.each</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.each(list, iteratee, [context])</code></p>\n<p>这个方法用于循环遍历, 用于循环 <code>list</code> 对象或者数组， <code>iteratee</code> 是一个遍历函数，接收的参数为遍历之后的结果。  </p>\n<p>当 <code>list</code> 为数组的时候，传递给 <code>iteratee</code> 函数的参数是  <code>(element, index, list)</code>, 当 <code>list</code> 为对象的时候, 传递给 <code>iteratee</code> 函数的参数是 <code>[value, key, list]</code>。</p>\n<p>对于 <code>context</code> 上下文, 这个决定的是 <code>iteratee</code> 中的 <code>this</code> 的指向值。可选参数， 当 <code>context</code> 忽略的时候 <code>this</code> 指向的是全局变量。</p>\n<p><code>_.each</code> 返回值是进行遍历的 <code>list</code> 数组对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function print(value, index, list) &#123;</span><br><span class=\"line\">  console.log(this.name);// 这里 this 指向了后面传递的 context</span><br><span class=\"line\">  console.log(value, index, list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let person = &#123;</span><br><span class=\"line\">  name: &apos;张宁宁&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(_.each([1, 2, 3], print, person)); // [1, 2, 3]</span><br><span class=\"line\">// 最终打印</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">1 0 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">2 1 (3) [1, 2, 3]</span><br><span class=\"line\">张宁宁</span><br><span class=\"line\">3 2 (3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>在 <code>underscore.js</code> 源码中， <code>_.each()</code> 源码为下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.each = _.forEach = function(obj, iteratee, context) &#123;</span><br><span class=\"line\">   // 如果 obj == null 返回 null</span><br><span class=\"line\">   if (obj == null) return obj;</span><br><span class=\"line\">   // 调用 optimiseCb 函数 稍后分析</span><br><span class=\"line\">   iteratee = optimizeCb(iteratee, context);</span><br><span class=\"line\">   var i, length = obj.length;</span><br><span class=\"line\">   // 这里提供了分别 数组和对象的一种方法</span><br><span class=\"line\">   // 如果数组</span><br><span class=\"line\">   if (length === +length) &#123;</span><br><span class=\"line\">   // 数组情况下， 将 [value, index, list] 传入遍历函数</span><br><span class=\"line\">     for (i = 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[i], i, obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">   // 获取到对象所有的 key 值</span><br><span class=\"line\">     var keys = _.keys(obj);</span><br><span class=\"line\">     for (i = 0, length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">       iteratee(obj[keys[i]], keys[i], obj);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   // 返回数组或者对象</span><br><span class=\"line\">   return obj;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>分别数组和对象的方法</p>\n<p>我平常的时候使用 <code>Object.prootype.toString.call().slice(8, -1)</code> 这种方法来分别数组和纯对象，这里使用了一种方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (length === +length) &#123;</span><br><span class=\"line\">// 这是数组</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">// 这是对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>+length</code> 执行的是隐式类型转换，用于将其他的值转换为数字。经过实验，使用 <code>+</code> 进行类型转换的可能性如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"literal\">null</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+flase <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"string\">\"\"</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">+<span class=\"literal\">true</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+对象 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+非空字符串 <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"literal\">NaN</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\">+<span class=\"number\">1</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">+<span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>因为上面中 对象的 length 为 undefined 因此  length ===+length  // false 这里 <code>+length</code> 会被转化为 <code>NaN</code>。</p>\n</li>\n<li><p><code>iteratee = optimizeCb(iteratee, context);</code></p>\n<p><code>optimizaCb</code> 函数</p>\n<p>使用 <code>optimizaCb</code> 函数用于绑定上下文: 使用 <code>call</code> 以及 <code>apply</code> 的方法实现的改变函数运行的 <code>this</code> 值的改变</p>\n<p>接收三个参数: <code>func</code> 运行的函数  <code>context</code> 运行函数需要进行绑定的上下文  <code>argCount</code> 参数的个数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optimizeCb = function(func, context, argCount) &#123;</span><br><span class=\"line\">    // 使用 void 0 类似于使用 undefined</span><br><span class=\"line\">    // 等同于使用 if(context === undefined)</span><br><span class=\"line\">    if (context === void 0) return func;</span><br><span class=\"line\">    switch (argCount == null ? 3 : argCount) &#123;</span><br><span class=\"line\">      case 1: return function(value) &#123;</span><br><span class=\"line\">        return func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 2: return function(value, other) &#123;</span><br><span class=\"line\">        return func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 3: return function(value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      case 4: return function(accumulator, value, index, collection) &#123;</span><br><span class=\"line\">        return func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">      return func.apply(context, arguments);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>_.each</code> 源码中的使用这个函数的目的是将 <code>iteratee</code> 的上下文 <code>this</code> 绑定到 <code>context</code> 对象。</p>\n<blockquote>\n<p>这里有一个 void 0 这里的 void 0 等同于使用 undefined  不同于使用 <code>undefined</code> 的原因在于： 在 <code>javascript</code> 中 <code>undefined</code> 不是一个保留字。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;var undefined = 1;</span><br><span class=\"line\">&gt;console.log(undefined); // 1  也是可以的</span><br><span class=\"line\">&gt;使用 void 0 作用是这样的</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"_.map\"></a>_.map</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.map(list, iteratee, [context])</code></p>\n<p>通过 使用变换函数 <code>iteratee</code> 将<code>list</code> 中的值映射到一个新的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function filter(value) &#123;</span><br><span class=\"line\">  return value * 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.map([1, 2, 3], filter); // [2, 4, 6]</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.map = _.collect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  iteratee = cb(iteratee, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 &amp;&amp; 操作符， 只有当第一个为true的时候才执行下一步操作</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">      <span class=\"comment\">// || 操作符 第一个为true的时候不再进行下一步动作</span></span><br><span class=\"line\">      length = (keys || obj).length,</span><br><span class=\"line\">      <span class=\"comment\">// 使用 Array 创建一个 length 长度的数组</span></span><br><span class=\"line\">      results = <span class=\"built_in\">Array</span>(length),</span><br><span class=\"line\">      currentKey;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">    results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><ol>\n<li><p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 进行计算</p>\n<p>这两个符号被称之为 选择器操作符，返回的是两边选择器结果的其中一个。在选择的过程中会被执行强制类型转换。</p>\n<blockquote>\n<p>这里对于类型转换，使用的时候要注意出现假值的情况</p>\n</blockquote>\n<p>使用 <code>&amp;&amp;</code> 以及 <code>||</code> 会首先对于 <em> 第一个</em>  操作数进行计算，根据判断结果来决定返回哪一个操作数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a || b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 a 否则 返回 b</span><br><span class=\"line\">a &amp;&amp; b</span><br><span class=\"line\">// 如果 a 类型转换结果为 true 返回的是 b 否则返回 a</span><br></pre></td></tr></table></figure>\n<p>上面我们可以看到，我们可以利用这两个操作符做一些事情:</p>\n<p><code>a || b</code> 好像备用条件。 如果条件 <code>a</code> 不成立, 执行条件 b, 如果成立，执行条件 <code>a</code>  <code>a ? a : b</code></p>\n<p><code>a &amp;&amp; b</code> 好像通过条件， 如果 <code>a</code> 成立，向下执行，如果不成立，打住，返回 <code>a</code> 执行的结果 <code>a ? b : a</code>  </p>\n</li>\n<li><p>使用 <code>Array(length)</code> 创建的是一个 <code>length</code> 长度的数组。</p>\n</li>\n</ol>\n<h4 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"_.reduce\"></a>_.reduce</h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduce(list, iteratee, [memo], context)</code></p>\n<p>通过迭代将 <code>list</code> 中的元素归结为一个值。 <code>memo</code> 表示初始参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reduceFn(memo, num) &#123;</span><br><span class=\"line\">  return memo * num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">_.reduce(list, reduceFn, 1) // 6</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduce</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">\titeratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(),</span><br><span class=\"line\">\t\tlength = (keys || obj).length,</span><br><span class=\"line\">\t\tindex = <span class=\"number\">0</span>, currentIndex;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\tmemo = obj[keys ? keys[index++] : index++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentIndex = keys ? keys[index] : index;</span><br><span class=\"line\">\t\tmemo = iteratee(memo, obj[currentIndex], currentIndex, obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>分析:</p>\n<ol>\n<li><p>在 <code>obj</code> 可能是对象或者数组的情况下，当 <code>obj</code> 是对象的时候，需要产生了一个 使用 <code>keys</code> 来进行数组操作</p>\n</li>\n<li><p>在迭代的时候， 当没有 <code>memo</code> 初始值的时候， 将数组或者对象的第一个值作为 <code>memo</code> 这里，使用 <code>index++</code> 来处理的</p>\n<blockquote>\n<p>使用 index++ 的时候，相当于 index = index + 1; 但是直接使用的时候还是原来的 index</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;let currentIndex = 0;</span><br><span class=\"line\">&gt;let addIndex = currentIndex++; // 相当于先返回 currentIndex 在进行加一操作</span><br><span class=\"line\">&gt;addIndex // 0</span><br><span class=\"line\">&gt;currentIndex // 1</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>​</p>\n</blockquote>\n</li>\n<li><p>迭代的过程发生在使用循环赋值的过程中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (; index &lt; length; index++) &#123;</span><br><span class=\"line\">  memo = iteratee(memo, obj[currrentIndex], currentIndex, obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"_.reduceRight\"></a>_.reduceRight</h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reduceRight(list, iteratee, [memo], context)</code></p>\n<p>类似于使用<code>_.reduce</code> 不过不同于使用 <code>_.reduce</code> 的是，这个是从右边向左进行遍历操作;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contact</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.contact(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]];</span><br><span class=\"line\">_.reduceRight(list, contact) <span class=\"comment\">// [5, 6, 3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reduceRight = _.foldr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, memo, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) obj = [];</span><br><span class=\"line\">    iteratee = optimizeCb(iteratee, context, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== + obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        index = (keys || obj).length,</span><br><span class=\"line\">        currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 先对于 index 进行 减一操作</span></span><br><span class=\"line\">      memo = obj[keys ? keys[--index] : --index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在判断完成 index 之后进行减一操作</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      memo = iteratee(memo, obj[currentKey], currentKey, obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用 <code>while</code> 循环进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (index-- &gt; 0) &#123;</span><br><span class=\"line\">  // do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"_.find\"></a>_.find</h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.find(list, predicate, [context])</code></p>\n<p>遍历  <code>list</code> 值   返回第一个通过 <code>predicate</code> 函数返回真值的数值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let list = [1, 2, 3];</span><br><span class=\"line\">function getodd(value) &#123;</span><br><span class=\"line\">  return value % 2 === 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_find(list, getodd) // 2</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.find = _.detect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是数组</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (obj.length === +obj.length) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 findIndex 找到数组的值</span></span><br><span class=\"line\">     key = _.findIndex(obj, predicate, context);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果是是对象</span></span><br><span class=\"line\">     key = _.findKey(obj, predicate, context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span> &amp;&amp; key !== <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(七)","date":"2017-11-28T15:11:29.000Z","_content":"\n### underscore.js 源码分析（七）\n\n`flatten` `without` `union`  `intersection`  `uniq`\n\n#### `flatten`\n\n##### 实例\n\n使用 `flatten` 用来将多层嵌套的数组转化为一层，例如:\n\n```javascript\nlist = [1, [3, 4]];\n_.flatten(list) // [1, 3, 4]\n```\n\n##### 源码分析\n\n```javascript\n_.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n```\n\n其中 `flatten` 函数如下:\n\n```javascript\n/*\n*@description 用于将数组脱离嵌套\n*@params input 传入的数组\n*@params shallow {Boolean} 是否需要减少嵌套\n**/\nvar flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0, value;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      value = input[i];\n      // 这里使用了运算符嵌套表达式\n      // value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象\n      if (value && value.length >= 0 && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        // use recursion to get the value\n        // use if to decide isRecursion\n        // 这里使用 if 来决定是否需要进行递归\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        // 看这种优雅的写法\n        while (j < len) {\n          // 将取到的值依次填入\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n```\n\n#### `without ` \n\n##### 实例\n\n`_.without(array, values)`\n\n使用 `_.without` 用来所有 `values` 值后的 `array` 副本。\n\n使用:\n\n```javascript\n_.without([1, 2, 3], 1)\n=> [2, 3]\n```\n\n##### 源码分析\n\n自己写的函数:\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n    let value = Array.prototype.slice.call(arguments, 1);\n    array.filter((item) => {\n      return ~values.indexOf(item);\n    });\n  } else {\n    return [];\n  }\n}\n```\n\n上面的函数中存在错误: 结果或返回 `undefined`\n\n原因: 使用 `filter`方法中的 `return ` 只会跳出 `filter` 循环，不会跳出最终的函数循环。 `低级错误`\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n\tlet value = Array.prototype.slice.call(arguments, 1);\n\t// 使用 filter 进行的筛选效果选出的是符合效果的值\n    let newArray = array.filter((item) => {\n      return value.indexOf(item) === -1;\n\t});\n\treturn newArray;\n  } else {\n    return [];\n  }\n}\n```\n\n使用源码分析如下:\n\n```javascript\n_.without = function(array) {\n  // 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);\n  // array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数\n    return _.difference(array, slice.call(arguments, 1));\n  };\n```\n\n这里调用了 `_.difference` 的方法实现。\n\n使用 `_.difference` 实现的函数代码如下:\n\n```javascript\n_.difference = function(array) {\n    // 获得到的 rest 函数\n    // 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1\n    // 表示获取到传入的 arguments 的第二个参数\n    var rest = flatten(arguments, true, true, 1);\n    // 对于数组使用 filter 的方法\n   // !_.contains 对于每一个数组进行遍历处理\n  // 返回 rest 中没有包含 value 的值\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n#### `union`\n\n##### 实例\n\n`_.union(*arrays)`\n\n使用 `union` 用于返回传入的 `arrays` 的并集。按照顺序返回，可以传入一个或者多个的 `arrays` 数组。\n\n##### 源码分析\n\n```javascript\n_.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n}\n```\n\n 其中 `_.uniq` 函数如下:\n\n```javascript\n_.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    // 如果 isSorted isBoolean\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    // 如果 iteratee 不是null\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n      // 获取到返回的结果\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        // 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中\n        if (!i || seen !== computed) result.push(value);\n        // 将computed 结果赋给 seen\n        seen = computed;\n        // 如果 iteratee 函数存在的话并且没有被排序\n      } else if (iteratee) {\n        // 如果seen 中没有包含有 computed 结果\n        if (!_.contains(seen, computed)) {\n          // 将computed 结果推入到 seen 中\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n```\n\n#### `intersection`\n\n`_.intersection(arrays)`\n\n##### 实例\n\n使用 `_.intersection` 用来返回传入多个数组的并集。\n\n```javascript\n_.intersection([1, 2, 3], [1, 2, 4], [10, 1, 2, 6]) // [1, 2]\n```\n\n返回传入的多个数组的并集。\n\n##### 源码分析\n\n```javascript\n_.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      // 使用 continue 是结束本次循环\n      // 用于判断传入的数组中是否有包含的相同的元素\n      if (_.contains(result, item)) continue;\n      // 使用 break 是结束整个循环\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      // 当上次循环结束之后 j === argsLength 成立\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n```\n\n基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个`result`数组，最后将这个 `result` 数组返回。\n\n要点:\n\n1.  两次循环, 使用结束循环的方式是不一样的。\n\n   >使用 `break` 的时候， 结束的是整个循环\n   >\n   >使用 `continue` 的时候, 结束的是当前的循环\n\n2. 关于 `contain` 函数\n\n   使用 `contain` 用来判断在一个数组中是否包含有某一个元素:\n\n   在 `es6` 中使用 `Array.includes(item)` 来判断 `item` 是否包含在 `Array` 之中。\n\n#### `difference`\n\n##### 实例\n\n`_.difference(array, *others)` \n\n使用 `difference` 获取到来自于 `array` 但是不存在于 `others` 中的数组元素。\n\n##### 源码分析\n\n自己写的代码:\n\n```javascript\nfunction difference(array, other) {\n\tlet rest = Array.prototype.slice.call(arguments, 1);\n\tlet newArr = array.filter((item) => {\n\t\treturn other.indexOf(item) === -1;\n\t});\n\treturn newArr;\n}\n```\n\n源码如下:\n\n```javascript\n_.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n","source":"_posts/underscore-js源码分析-七.md","raw":"---\ntitle: underscore.js源码分析(七)\ndate: 2017-11-28 23:11:29\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析（七）\n\n`flatten` `without` `union`  `intersection`  `uniq`\n\n#### `flatten`\n\n##### 实例\n\n使用 `flatten` 用来将多层嵌套的数组转化为一层，例如:\n\n```javascript\nlist = [1, [3, 4]];\n_.flatten(list) // [1, 3, 4]\n```\n\n##### 源码分析\n\n```javascript\n_.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n```\n\n其中 `flatten` 函数如下:\n\n```javascript\n/*\n*@description 用于将数组脱离嵌套\n*@params input 传入的数组\n*@params shallow {Boolean} 是否需要减少嵌套\n**/\nvar flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0, value;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      value = input[i];\n      // 这里使用了运算符嵌套表达式\n      // value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象\n      if (value && value.length >= 0 && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        // use recursion to get the value\n        // use if to decide isRecursion\n        // 这里使用 if 来决定是否需要进行递归\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        // 看这种优雅的写法\n        while (j < len) {\n          // 将取到的值依次填入\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n```\n\n#### `without ` \n\n##### 实例\n\n`_.without(array, values)`\n\n使用 `_.without` 用来所有 `values` 值后的 `array` 副本。\n\n使用:\n\n```javascript\n_.without([1, 2, 3], 1)\n=> [2, 3]\n```\n\n##### 源码分析\n\n自己写的函数:\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n    let value = Array.prototype.slice.call(arguments, 1);\n    array.filter((item) => {\n      return ~values.indexOf(item);\n    });\n  } else {\n    return [];\n  }\n}\n```\n\n上面的函数中存在错误: 结果或返回 `undefined`\n\n原因: 使用 `filter`方法中的 `return ` 只会跳出 `filter` 循环，不会跳出最终的函数循环。 `低级错误`\n\n```javascript\nfunction without(array, values) {\n  if (typeof values === 'undefined') return array;\n  if (array && array.length) {\n\tlet value = Array.prototype.slice.call(arguments, 1);\n\t// 使用 filter 进行的筛选效果选出的是符合效果的值\n    let newArray = array.filter((item) => {\n      return value.indexOf(item) === -1;\n\t});\n\treturn newArray;\n  } else {\n    return [];\n  }\n}\n```\n\n使用源码分析如下:\n\n```javascript\n_.without = function(array) {\n  // 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);\n  // array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数\n    return _.difference(array, slice.call(arguments, 1));\n  };\n```\n\n这里调用了 `_.difference` 的方法实现。\n\n使用 `_.difference` 实现的函数代码如下:\n\n```javascript\n_.difference = function(array) {\n    // 获得到的 rest 函数\n    // 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1\n    // 表示获取到传入的 arguments 的第二个参数\n    var rest = flatten(arguments, true, true, 1);\n    // 对于数组使用 filter 的方法\n   // !_.contains 对于每一个数组进行遍历处理\n  // 返回 rest 中没有包含 value 的值\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n#### `union`\n\n##### 实例\n\n`_.union(*arrays)`\n\n使用 `union` 用于返回传入的 `arrays` 的并集。按照顺序返回，可以传入一个或者多个的 `arrays` 数组。\n\n##### 源码分析\n\n```javascript\n_.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n}\n```\n\n 其中 `_.uniq` 函数如下:\n\n```javascript\n_.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    // 如果 isSorted isBoolean\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    // 如果 iteratee 不是null\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n      // 获取到返回的结果\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        // 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中\n        if (!i || seen !== computed) result.push(value);\n        // 将computed 结果赋给 seen\n        seen = computed;\n        // 如果 iteratee 函数存在的话并且没有被排序\n      } else if (iteratee) {\n        // 如果seen 中没有包含有 computed 结果\n        if (!_.contains(seen, computed)) {\n          // 将computed 结果推入到 seen 中\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n```\n\n#### `intersection`\n\n`_.intersection(arrays)`\n\n##### 实例\n\n使用 `_.intersection` 用来返回传入多个数组的并集。\n\n```javascript\n_.intersection([1, 2, 3], [1, 2, 4], [10, 1, 2, 6]) // [1, 2]\n```\n\n返回传入的多个数组的并集。\n\n##### 源码分析\n\n```javascript\n_.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      // 使用 continue 是结束本次循环\n      // 用于判断传入的数组中是否有包含的相同的元素\n      if (_.contains(result, item)) continue;\n      // 使用 break 是结束整个循环\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      // 当上次循环结束之后 j === argsLength 成立\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n```\n\n基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个`result`数组，最后将这个 `result` 数组返回。\n\n要点:\n\n1.  两次循环, 使用结束循环的方式是不一样的。\n\n   >使用 `break` 的时候， 结束的是整个循环\n   >\n   >使用 `continue` 的时候, 结束的是当前的循环\n\n2. 关于 `contain` 函数\n\n   使用 `contain` 用来判断在一个数组中是否包含有某一个元素:\n\n   在 `es6` 中使用 `Array.includes(item)` 来判断 `item` 是否包含在 `Array` 之中。\n\n#### `difference`\n\n##### 实例\n\n`_.difference(array, *others)` \n\n使用 `difference` 获取到来自于 `array` 但是不存在于 `others` 中的数组元素。\n\n##### 源码分析\n\n自己写的代码:\n\n```javascript\nfunction difference(array, other) {\n\tlet rest = Array.prototype.slice.call(arguments, 1);\n\tlet newArr = array.filter((item) => {\n\t\treturn other.indexOf(item) === -1;\n\t});\n\treturn newArr;\n}\n```\n\n源码如下:\n\n```javascript\n_.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n```\n\n","slug":"underscore-js源码分析-七","published":1,"updated":"2017-11-30T15:32:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh98002ps33g5ax3idgw","content":"<h3 id=\"underscore-js-源码分析（七）\"><a href=\"#underscore-js-源码分析（七）\" class=\"headerlink\" title=\"underscore.js 源码分析（七）\"></a>underscore.js 源码分析（七）</h3><p><code>flatten</code> <code>without</code> <code>union</code>  <code>intersection</code>  <code>uniq</code></p>\n<h4 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"flatten\"></a><code>flatten</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>flatten</code> 用来将多层嵌套的数组转化为一层，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\">_.flatten(list) <span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>flatten</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@description 用于将数组脱离嵌套</span></span><br><span class=\"line\"><span class=\"comment\">*@params input 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">*@params shallow &#123;Boolean&#125; 是否需要减少嵌套</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = input &amp;&amp; input.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 这里使用了运算符嵌套表达式</span></span><br><span class=\"line\">      <span class=\"comment\">// value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; value.length &gt;= <span class=\"number\">0</span> &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></span><br><span class=\"line\">        <span class=\"comment\">// use recursion to get the value</span></span><br><span class=\"line\">        <span class=\"comment\">// use if to decide isRecursion</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 if 来决定是否需要进行递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\">        output.length += len;</span><br><span class=\"line\">        <span class=\"comment\">// 看这种优雅的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将取到的值依次填入</span></span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"without\"></a><code>without</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.without(array, values)</code></p>\n<p>使用 <code>_.without</code> 用来所有 <code>values</code> 值后的 <code>array</code> 副本。</p>\n<p>使用:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>)</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ~values.indexOf(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数中存在错误: 结果或返回 <code>undefined</code></p>\n<p>原因: 使用 <code>filter</code>方法中的 <code>return</code> 只会跳出 <code>filter</code> 循环，不会跳出最终的函数循环。 <code>低级错误</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 filter 进行的筛选效果选出的是符合效果的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArray = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);</span></span><br><span class=\"line\">  <span class=\"comment\">// array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 <code>_.difference</code> 的方法实现。</p>\n<p>使用 <code>_.difference</code> 实现的函数代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得到的 rest 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示获取到传入的 arguments 的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对于数组使用 filter 的方法</span></span><br><span class=\"line\">   <span class=\"comment\">// !_.contains 对于每一个数组进行遍历处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回 rest 中没有包含 value 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"union\"></a><code>union</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.union(*arrays)</code></p>\n<p>使用 <code>union</code> 用于返回传入的 <code>arrays</code> 的并集。按照顺序返回，可以传入一个或者多个的 <code>arrays</code> 数组。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>_.uniq</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted isBoolean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 iteratee 不是null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seen = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">      <span class=\"comment\">// 获取到返回的结果</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</span><br><span class=\"line\">        <span class=\"comment\">// 将computed 结果赋给 seen</span></span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 iteratee 函数存在的话并且没有被排序</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果seen 中没有包含有 computed 结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将computed 结果推入到 seen 中</span></span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">          result.push(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"intersection\"></a><code>intersection</code></h4><p><code>_.intersection(arrays)</code></p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.intersection</code> 用来返回传入多个数组的并集。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>返回传入的多个数组的并集。</p>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</span><br><span class=\"line\">      <span class=\"comment\">// 使用 continue 是结束本次循环</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于判断传入的数组中是否有包含的相同的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 break 是结束整个循环</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当上次循环结束之后 j === argsLength 成立</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个<code>result</code>数组，最后将这个 <code>result</code> 数组返回。</p>\n<p>要点:</p>\n<ol>\n<li><p>两次循环, 使用结束循环的方式是不一样的。</p>\n<blockquote>\n<p>使用 <code>break</code> 的时候， 结束的是整个循环</p>\n<p>使用 <code>continue</code> 的时候, 结束的是当前的循环</p>\n</blockquote>\n</li>\n<li><p>关于 <code>contain</code> 函数</p>\n<p>使用 <code>contain</code> 用来判断在一个数组中是否包含有某一个元素:</p>\n<p>在 <code>es6</code> 中使用 <code>Array.includes(item)</code> 来判断 <code>item</code> 是否包含在 <code>Array</code> 之中。</p>\n</li>\n</ol>\n<h4 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"difference\"></a><code>difference</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.difference(array, *others)</code> </p>\n<p>使用 <code>difference</code> 获取到来自于 <code>array</code> 但是不存在于 <code>others</code> 中的数组元素。</p>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">difference</span>(<span class=\"params\">array, other</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rest = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newArr = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析（七）\"><a href=\"#underscore-js-源码分析（七）\" class=\"headerlink\" title=\"underscore.js 源码分析（七）\"></a>underscore.js 源码分析（七）</h3><p><code>flatten</code> <code>without</code> <code>union</code>  <code>intersection</code>  <code>uniq</code></p>\n<h4 id=\"flatten\"><a href=\"#flatten\" class=\"headerlink\" title=\"flatten\"></a><code>flatten</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>flatten</code> 用来将多层嵌套的数组转化为一层，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]];</span><br><span class=\"line\">_.flatten(list) <span class=\"comment\">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, shallow</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flatten(array, shallow, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>flatten</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*@description 用于将数组脱离嵌套</span></span><br><span class=\"line\"><span class=\"comment\">*@params input 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">*@params shallow &#123;Boolean&#125; 是否需要减少嵌套</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>, length = input &amp;&amp; input.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 这里使用了运算符嵌套表达式</span></span><br><span class=\"line\">      <span class=\"comment\">// value存在并且value的length 大于等于0 并且 value 输入数组或者类数组对象</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; value.length &gt;= <span class=\"number\">0</span> &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//flatten current level of array or arguments object</span></span><br><span class=\"line\">        <span class=\"comment\">// use recursion to get the value</span></span><br><span class=\"line\">        <span class=\"comment\">// use if to decide isRecursion</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 if 来决定是否需要进行递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\">        output.length += len;</span><br><span class=\"line\">        <span class=\"comment\">// 看这种优雅的写法</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; len) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将取到的值依次填入</span></span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!strict) &#123;</span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"without\"><a href=\"#without\" class=\"headerlink\" title=\"without\"></a><code>without</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.without(array, values)</code></p>\n<p>使用 <code>_.without</code> 用来所有 <code>values</code> 值后的 <code>array</code> 副本。</p>\n<p>使用:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">1</span>)</span><br><span class=\"line\">=&gt; [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ~values.indexOf(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数中存在错误: 结果或返回 <code>undefined</code></p>\n<p>原因: 使用 <code>filter</code>方法中的 <code>return</code> 只会跳出 <code>filter</code> 循环，不会跳出最终的函数循环。 <code>低级错误</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">without</span>(<span class=\"params\">array, values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array &amp;&amp; array.length) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> value = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 filter 进行的筛选效果选出的是符合效果的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newArray = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArray;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用源码分析如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.without = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 向 difference 的函数中传入两个参数， array 以及 slice.call(arguments, 1);</span></span><br><span class=\"line\">  <span class=\"comment\">// array 是传入的需要进行删除的数组, slice.call() 获取到传入的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.difference(array, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 <code>_.difference</code> 的方法实现。</p>\n<p>使用 <code>_.difference</code> 实现的函数代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得到的 rest 函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 将 arguments 传入到 flatten 函数, 传入的参数是 startIndex: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示获取到传入的 arguments 的第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对于数组使用 filter 的方法</span></span><br><span class=\"line\">   <span class=\"comment\">// !_.contains 对于每一个数组进行遍历处理</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回 rest 中没有包含 value 的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"union\"><a href=\"#union\" class=\"headerlink\" title=\"union\"></a><code>union</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.union(*arrays)</code></p>\n<p>使用 <code>union</code> 用于返回传入的 <code>arrays</code> 的并集。按照顺序返回，可以传入一个或者多个的 <code>arrays</code> 数组。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.union = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.uniq(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中 <code>_.uniq</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.uniq = _.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted isBoolean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 iteratee 不是null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seen = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">      <span class=\"comment\">// 获取到返回的结果</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 i !== 0 或者 seen 不等于 computed 将 value push 进入到 result 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen !== computed) result.push(value);</span><br><span class=\"line\">        <span class=\"comment\">// 将computed 结果赋给 seen</span></span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 iteratee 函数存在的话并且没有被排序</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果seen 中没有包含有 computed 结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将computed 结果推入到 seen 中</span></span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">          result.push(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(result, value)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intersection\"><a href=\"#intersection\" class=\"headerlink\" title=\"intersection\"></a><code>intersection</code></h4><p><code>_.intersection(arrays)</code></p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.intersection</code> 用来返回传入多个数组的并集。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>返回传入的多个数组的并集。</p>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> argsLength = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = getLength(array); i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> item = array[i];</span><br><span class=\"line\">      <span class=\"comment\">// 使用 continue 是结束本次循环</span></span><br><span class=\"line\">      <span class=\"comment\">// 用于判断传入的数组中是否有包含的相同的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.contains(result, item)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 break 是结束整个循环</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; argsLength; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(<span class=\"built_in\">arguments</span>[j], item)) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 当上次循环结束之后 j === argsLength 成立</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j === argsLength) result.push(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>基本的思路是对于第一个传入的数组中的值进行遍历，根据第一个数组中的值, 遍历其他的数组，判断其他的数组中是否含有这个值。如果含有这个值的时候，将这个值存入一个<code>result</code>数组，最后将这个 <code>result</code> 数组返回。</p>\n<p>要点:</p>\n<ol>\n<li><p>两次循环, 使用结束循环的方式是不一样的。</p>\n<blockquote>\n<p>使用 <code>break</code> 的时候， 结束的是整个循环</p>\n<p>使用 <code>continue</code> 的时候, 结束的是当前的循环</p>\n</blockquote>\n</li>\n<li><p>关于 <code>contain</code> 函数</p>\n<p>使用 <code>contain</code> 用来判断在一个数组中是否包含有某一个元素:</p>\n<p>在 <code>es6</code> 中使用 <code>Array.includes(item)</code> 来判断 <code>item</code> 是否包含在 <code>Array</code> 之中。</p>\n</li>\n</ol>\n<h4 id=\"difference\"><a href=\"#difference\" class=\"headerlink\" title=\"difference\"></a><code>difference</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.difference(array, *others)</code> </p>\n<p>使用 <code>difference</code> 获取到来自于 <code>array</code> 但是不存在于 <code>others</code> 中的数组元素。</p>\n<h5 id=\"源码分析-4\"><a href=\"#源码分析-4\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">difference</span>(<span class=\"params\">array, other</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> rest = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> newArr = array.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> other.indexOf(item) === <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.difference = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rest = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.filter(array, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(rest, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(八)","date":"2017-12-01T15:22:58.000Z","_content":"\n### underscore.js 源码分析(八)\n\n`zip` `unzip` `object` `indexOf` `lastIndexOf`\n\n#### `zip`\n\n`_.zip(*arrays)`\n\n使用 `zip` 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。\n\n##### 实例\n\n```javascript\n_.zip(['张宁宁', '张艺苇'], ['男', '女'], ['山东', '河北']);\n=> [['张宁宁', '男', '山东'] , ['张艺苇', '女', '河北']]\n```\n\n##### 源码分析\n\n自己写的:\n\n```javascript\n/** \n * @description 用于合成数组\n * @param {Object} array 传入的多个数组\n * @return {Object} 返回的经过合成之后的数组\n*/\nfunction zip(array) {\n    // 需要添加是否为 null\n    if (array === null) return [];\n\tlet args = Array.prototype.slice.call(arguments, 0);\n\tlet result = [];\n\tarray.map((item, index) => {\n\t\tlet arr = [];\n\t\targs.map((argItem) => {\n\t\t\tarr.push(argItem[index]);\n\t\t})\n\t\tresult.push(arr);\n\t});\n\treturn result;\n}\n```\n\n需要注意的几点:\n\n1. 对于传入的 `array` 需要进行判断，是否为 `null`\n\n   >对于传入的参数一定要进行类型判断\n\n```javascript\n _.zip = function(array) {\n    if (array == null) return [];\n    // 使用 _.max 获取到 arguments 中所有的数组个数\n    var length = _.max(arguments, 'length').length;\n    // 使用 Array 生成 length 长度的数组\n    var results = Array(length);\n    while (length-- > 0) {\n      // 使用 pluck 用于萃取获得 arguments 的某种属性值\n      results[length] = _.pluck(arguments, length);\n    }\n    return results;\n  };\n```\n\n#### `unzip`\n\n使用 `unzip` 的目的是将归并后的数组分解为串联的一系列的新数组。\n\n#####　实例\n\n```javascript\n_.unzip([['张宁宁', '张艺苇'], ['山东', '行唐']]);\n=> ['张宁宁', '山东'] ['张艺苇', '行唐']\n// 返回的第一个元素中包含所有输入数组的第一个元素\n```\n\n实现代码如下:\n\n```javascript\n_.unzip = function(array) {\n  // 返回使用 apply 压入的一个数组\n  return _.zip.apply(null, array);\n};\n```\n\n#### `object`\n\n使用 `object` 用于将数组转化为对象的形式。\n\n`_.object(list, [values])`\n\n传递一个单独的`[key, value]` 的列表，或者一个键的列表和一个值的列表。当传入 `list` 和 `values` 的时候， `list` 中的值会被作为返回对象的键, `values` 中的值会被作为返回对象的值。\n\n##### 实例\n\n```javascript\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n=> {moe: 30, larry: 40, curly: 50}\n```\n\n\n\n##### 源码解析\n\n代码如下:\n\n```javascript\n/**\n * @description toObj 将键值数组组合为对象\n * @param {Array} list 键数组\n * @param {Array} values 值数组\n * @return {Object} 组成的对象\n*/\nfunction toObj(list, values) {\n\tif (list === null) return {};\n\tlet obj = {};\n\tif (typeof values === 'undefined') {\n\t  list.map((item) => {\n\t\tobj[item[0]] = item[1];\n\t  });\n\t} else {\n\t  list.map((item, index) => {\n\t\tobj[item] = values[index];\n\t  });\n\t}\n\treturn obj;\n}\n```\n\n#### indexOf\n\n`_.indexOf(array, value, [isSorted])`\n\n使用 `indexOf` 用于返回 `value` 在 `array` 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。\n\n##### 实例\n\n```\n_.indexOf([1, 2, 3 ,4 ,1],1, 1);\n=> 5\n```\n\n##### 源码分析\n\n```javascript\n_.indexOf = function (array, item, isSorted) {\n  var i = 0; length = array && array.length;\n  // 使用判断数组的方法\n  // length = array && array.length;\n  if (typeof isSorted === 'number') {\n    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n  } else if (isSorted && length) {\n    // 如果传入的是一个 true, 使用更快的算法\n    i = _.sortedIndex(array, item);\n    return array[i] === item ? i : -1;\n  }\n  for (; i < length; i++) if (array[i] === item) return i;\n  return -1;\n}\n```\n\n1. 判断一个数组是否存在:\n\n   `length = array && array.length` \n\n2.  使用 `Math.max` 的妙用\n\n   例如:\n\n   ```javascript\n   Math.max(0, num);\n   // 返回 num > 0\n   //相当于\n   num <= 0 ? 0 : num;\n   //因此\n   // 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些\n   ```\n\n例如下面的一个程序，用来获得一组数组中的最大的差值:\n\n```javascript\nfunction getMaxProfit(arr) {\n  let minProfit = arr[0];\n  let maxProfit = 0;\n  for (let i = 0; i < arr.length; i ++) {\n    minProfit = Math.min(minProfit, arr[i]);\n    let currentProfit = arr[i] - minProfit;\n    maxProfit = Math.max(maxProfit, currentProfit);\n  }\n  return maxProfit;\n}\n```\n\n\n\n#### `lastIndexOf`\n\n`_.lastIndexOf(array, value, [fromIndex])`\n\n返回 `value` 在 `array` 中从最后开始的索引值，传入的 `fromIndex` 将从给定的索引值进行搜索。\n\n##### 源码分析\n\n```javascript\n_.lastIndexOf = function(array, item, fromIndex) {\n  let index = array ? array.length : 0;\n  if (typeof fromIndex === 'number') {\n    // 使用 Math.min 当 fromIndex + 1 > index 的时候，要取 index\n    index = fromIndex < 0 ? index + fromIndex + 1 : Math.min(index, fromIndex + 1);\n  }\n  // 使用 --index 因为最后一个元素的索引是 array.length - 1\n  while (--index >= 0) if (array[index] === item) return index;\n  return -1;\n}\n```\n\n#### `sortIndex`\n\n`_.sortIndex(list, value, [iteratee], [context])`\n\n使用 `sortIndex` 的目的在于使用二分法查找到 `value` 在 `list` 中的位置序号。\n\n##### 实例\n\n```javascript\n_.sortedIndex([10, 20, 30, 40, 50], 35)\n// 3\n```\n\n##### 源码分析\n\n使用二分法进行比较获得到元素在数组中的位置的。\n\n```javascript\n_.sortedIndex = function (array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  let value = iteratee(obj);\n  let low = 0; let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 判断 value 在相对于 array 在左边还是在右边\n    if (_.comparator(iteratee(array[mid], value)) < 0) low = mid + 1; else high = mid; \n  }\n  return low;\n}\n```\n\n使用二分法的原理是将数组中分为两个部分，判断 `value` 值在哪一个部分之内。","source":"_posts/underscore-js源码分析-八.md","raw":"---\ntitle: underscore.js源码分析(八)\ndate: 2017-12-01 23:22:58\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(八)\n\n`zip` `unzip` `object` `indexOf` `lastIndexOf`\n\n#### `zip`\n\n`_.zip(*arrays)`\n\n使用 `zip` 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。\n\n##### 实例\n\n```javascript\n_.zip(['张宁宁', '张艺苇'], ['男', '女'], ['山东', '河北']);\n=> [['张宁宁', '男', '山东'] , ['张艺苇', '女', '河北']]\n```\n\n##### 源码分析\n\n自己写的:\n\n```javascript\n/** \n * @description 用于合成数组\n * @param {Object} array 传入的多个数组\n * @return {Object} 返回的经过合成之后的数组\n*/\nfunction zip(array) {\n    // 需要添加是否为 null\n    if (array === null) return [];\n\tlet args = Array.prototype.slice.call(arguments, 0);\n\tlet result = [];\n\tarray.map((item, index) => {\n\t\tlet arr = [];\n\t\targs.map((argItem) => {\n\t\t\tarr.push(argItem[index]);\n\t\t})\n\t\tresult.push(arr);\n\t});\n\treturn result;\n}\n```\n\n需要注意的几点:\n\n1. 对于传入的 `array` 需要进行判断，是否为 `null`\n\n   >对于传入的参数一定要进行类型判断\n\n```javascript\n _.zip = function(array) {\n    if (array == null) return [];\n    // 使用 _.max 获取到 arguments 中所有的数组个数\n    var length = _.max(arguments, 'length').length;\n    // 使用 Array 生成 length 长度的数组\n    var results = Array(length);\n    while (length-- > 0) {\n      // 使用 pluck 用于萃取获得 arguments 的某种属性值\n      results[length] = _.pluck(arguments, length);\n    }\n    return results;\n  };\n```\n\n#### `unzip`\n\n使用 `unzip` 的目的是将归并后的数组分解为串联的一系列的新数组。\n\n#####　实例\n\n```javascript\n_.unzip([['张宁宁', '张艺苇'], ['山东', '行唐']]);\n=> ['张宁宁', '山东'] ['张艺苇', '行唐']\n// 返回的第一个元素中包含所有输入数组的第一个元素\n```\n\n实现代码如下:\n\n```javascript\n_.unzip = function(array) {\n  // 返回使用 apply 压入的一个数组\n  return _.zip.apply(null, array);\n};\n```\n\n#### `object`\n\n使用 `object` 用于将数组转化为对象的形式。\n\n`_.object(list, [values])`\n\n传递一个单独的`[key, value]` 的列表，或者一个键的列表和一个值的列表。当传入 `list` 和 `values` 的时候， `list` 中的值会被作为返回对象的键, `values` 中的值会被作为返回对象的值。\n\n##### 实例\n\n```javascript\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n=> {moe: 30, larry: 40, curly: 50}\n```\n\n\n\n##### 源码解析\n\n代码如下:\n\n```javascript\n/**\n * @description toObj 将键值数组组合为对象\n * @param {Array} list 键数组\n * @param {Array} values 值数组\n * @return {Object} 组成的对象\n*/\nfunction toObj(list, values) {\n\tif (list === null) return {};\n\tlet obj = {};\n\tif (typeof values === 'undefined') {\n\t  list.map((item) => {\n\t\tobj[item[0]] = item[1];\n\t  });\n\t} else {\n\t  list.map((item, index) => {\n\t\tobj[item] = values[index];\n\t  });\n\t}\n\treturn obj;\n}\n```\n\n#### indexOf\n\n`_.indexOf(array, value, [isSorted])`\n\n使用 `indexOf` 用于返回 `value` 在 `array` 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。\n\n##### 实例\n\n```\n_.indexOf([1, 2, 3 ,4 ,1],1, 1);\n=> 5\n```\n\n##### 源码分析\n\n```javascript\n_.indexOf = function (array, item, isSorted) {\n  var i = 0; length = array && array.length;\n  // 使用判断数组的方法\n  // length = array && array.length;\n  if (typeof isSorted === 'number') {\n    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n  } else if (isSorted && length) {\n    // 如果传入的是一个 true, 使用更快的算法\n    i = _.sortedIndex(array, item);\n    return array[i] === item ? i : -1;\n  }\n  for (; i < length; i++) if (array[i] === item) return i;\n  return -1;\n}\n```\n\n1. 判断一个数组是否存在:\n\n   `length = array && array.length` \n\n2.  使用 `Math.max` 的妙用\n\n   例如:\n\n   ```javascript\n   Math.max(0, num);\n   // 返回 num > 0\n   //相当于\n   num <= 0 ? 0 : num;\n   //因此\n   // 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些\n   ```\n\n例如下面的一个程序，用来获得一组数组中的最大的差值:\n\n```javascript\nfunction getMaxProfit(arr) {\n  let minProfit = arr[0];\n  let maxProfit = 0;\n  for (let i = 0; i < arr.length; i ++) {\n    minProfit = Math.min(minProfit, arr[i]);\n    let currentProfit = arr[i] - minProfit;\n    maxProfit = Math.max(maxProfit, currentProfit);\n  }\n  return maxProfit;\n}\n```\n\n\n\n#### `lastIndexOf`\n\n`_.lastIndexOf(array, value, [fromIndex])`\n\n返回 `value` 在 `array` 中从最后开始的索引值，传入的 `fromIndex` 将从给定的索引值进行搜索。\n\n##### 源码分析\n\n```javascript\n_.lastIndexOf = function(array, item, fromIndex) {\n  let index = array ? array.length : 0;\n  if (typeof fromIndex === 'number') {\n    // 使用 Math.min 当 fromIndex + 1 > index 的时候，要取 index\n    index = fromIndex < 0 ? index + fromIndex + 1 : Math.min(index, fromIndex + 1);\n  }\n  // 使用 --index 因为最后一个元素的索引是 array.length - 1\n  while (--index >= 0) if (array[index] === item) return index;\n  return -1;\n}\n```\n\n#### `sortIndex`\n\n`_.sortIndex(list, value, [iteratee], [context])`\n\n使用 `sortIndex` 的目的在于使用二分法查找到 `value` 在 `list` 中的位置序号。\n\n##### 实例\n\n```javascript\n_.sortedIndex([10, 20, 30, 40, 50], 35)\n// 3\n```\n\n##### 源码分析\n\n使用二分法进行比较获得到元素在数组中的位置的。\n\n```javascript\n_.sortedIndex = function (array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  let value = iteratee(obj);\n  let low = 0; let high = array.length;\n  while(low < high) {\n    let mid = Math.floor((low + high) / 2);\n    // 判断 value 在相对于 array 在左边还是在右边\n    if (_.comparator(iteratee(array[mid], value)) < 0) low = mid + 1; else high = mid; \n  }\n  return low;\n}\n```\n\n使用二分法的原理是将数组中分为两个部分，判断 `value` 值在哪一个部分之内。","slug":"underscore-js源码分析-八","published":1,"updated":"2017-12-02T05:55:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9a002qs33gxukuhyyn","content":"<h3 id=\"underscore-js-源码分析-八\"><a href=\"#underscore-js-源码分析-八\" class=\"headerlink\" title=\"underscore.js 源码分析(八)\"></a>underscore.js 源码分析(八)</h3><p><code>zip</code> <code>unzip</code> <code>object</code> <code>indexOf</code> <code>lastIndexOf</code></p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a><code>zip</code></h4><p><code>_.zip(*arrays)</code></p>\n<p>使用 <code>zip</code> 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip([<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'河北'</span>]);</span><br><span class=\"line\">=&gt; [[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'男'</span>, <span class=\"string\">'山东'</span>] , [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'女'</span>, <span class=\"string\">'河北'</span>]]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * @description 用于合成数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; array 传入的多个数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125; 返回的经过合成之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zip</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要添加是否为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tarray.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">\t\targs.map(<span class=\"function\">(<span class=\"params\">argItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tarr.push(argItem[index]);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tresult.push(arr);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的几点:</p>\n<ol>\n<li><p>对于传入的 <code>array</code> 需要进行判断，是否为 <code>null</code></p>\n<blockquote>\n<p>对于传入的参数一定要进行类型判断</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">   <span class=\"comment\">// 使用 _.max 获取到 arguments 中所有的数组个数</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> length = _.max(<span class=\"built_in\">arguments</span>, <span class=\"string\">'length'</span>).length;</span><br><span class=\"line\">   <span class=\"comment\">// 使用 Array 生成 length 长度的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (length-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 pluck 用于萃取获得 arguments 的某种属性值</span></span><br><span class=\"line\">     results[length] = _.pluck(<span class=\"built_in\">arguments</span>, length);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a><code>unzip</code></h4><p>使用 <code>unzip</code> 的目的是将归并后的数组分解为串联的一系列的新数组。</p>\n<p>#####　实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip([[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'行唐'</span>]]);</span><br><span class=\"line\">=&gt; [<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'山东'</span>] [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'行唐'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 返回的第一个元素中包含所有输入数组的第一个元素</span></span><br></pre></td></tr></table></figure>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回使用 apply 压入的一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.zip.apply(<span class=\"literal\">null</span>, array);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a><code>object</code></h4><p>使用 <code>object</code> 用于将数组转化为对象的形式。</p>\n<p><code>_.object(list, [values])</code></p>\n<p>传递一个单独的<code>[key, value]</code> 的列表，或者一个键的列表和一个值的列表。当传入 <code>list</code> 和 <code>values</code> 的时候， <code>list</code> 中的值会被作为返回对象的键, <code>values</code> 中的值会被作为返回对象的值。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\">=&gt; &#123;<span class=\"attr\">moe</span>: <span class=\"number\">30</span>, <span class=\"attr\">larry</span>: <span class=\"number\">40</span>, <span class=\"attr\">curly</span>: <span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description toObj 将键值数组组合为对象</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; list 键数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; values 值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125; 组成的对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toObj</span>(<span class=\"params\">list, values</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item[<span class=\"number\">0</span>]] = item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item] = values[index];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p><code>_.indexOf(array, value, [isSorted])</code></p>\n<p>使用 <code>indexOf</code> 用于返回 <code>value</code> 在 <code>array</code> 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 3 ,4 ,1],1, 1);</span><br><span class=\"line\">=&gt; 5</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, item, isSorted</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; length = array &amp;&amp; array.length;</span><br><span class=\"line\">  <span class=\"comment\">// 使用判断数组的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// length = array &amp;&amp; array.length;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> isSorted === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    i = isSorted &lt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, length + isSorted) : isSorted;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSorted &amp;&amp; length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是一个 true, 使用更快的算法</span></span><br><span class=\"line\">    i = _.sortedIndex(array, item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[i] === item ? i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>判断一个数组是否存在:</p>\n<p><code>length = array &amp;&amp; array.length</code> </p>\n</li>\n<li><p>使用 <code>Math.max</code> 的妙用</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, num);</span><br><span class=\"line\"><span class=\"comment\">// 返回 num &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\">num &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num;</span><br><span class=\"line\"><span class=\"comment\">//因此</span></span><br><span class=\"line\"><span class=\"comment\">// 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如下面的一个程序，用来获得一组数组中的最大的差值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxProfit</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minProfit = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxProfit = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class=\"line\">    minProfit = <span class=\"built_in\">Math</span>.min(minProfit, arr[i]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentProfit = arr[i] - minProfit;</span><br><span class=\"line\">    maxProfit = <span class=\"built_in\">Math</span>.max(maxProfit, currentProfit);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a><code>lastIndexOf</code></h4><p><code>_.lastIndexOf(array, value, [fromIndex])</code></p>\n<p>返回 <code>value</code> 在 <code>array</code> 中从最后开始的索引值，传入的 <code>fromIndex</code> 将从给定的索引值进行搜索。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = array ? array.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.min 当 fromIndex + 1 &gt; index 的时候，要取 index</span></span><br><span class=\"line\">    index = fromIndex &lt; <span class=\"number\">0</span> ? index + fromIndex + <span class=\"number\">1</span> : <span class=\"built_in\">Math</span>.min(index, fromIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 --index 因为最后一个元素的索引是 array.length - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--index &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">if</span> (array[index] === item) <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortIndex\"><a href=\"#sortIndex\" class=\"headerlink\" title=\"sortIndex\"></a><code>sortIndex</code></h4><p><code>_.sortIndex(list, value, [iteratee], [context])</code></p>\n<p>使用 <code>sortIndex</code> 的目的在于使用二分法查找到 <code>value</code> 在 <code>list</code> 中的位置序号。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用二分法进行比较获得到元素在数组中的位置的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>; <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断 value 在相对于 array 在左边还是在右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.comparator(iteratee(array[mid], value)) &lt; <span class=\"number\">0</span>) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用二分法的原理是将数组中分为两个部分，判断 <code>value</code> 值在哪一个部分之内。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-八\"><a href=\"#underscore-js-源码分析-八\" class=\"headerlink\" title=\"underscore.js 源码分析(八)\"></a>underscore.js 源码分析(八)</h3><p><code>zip</code> <code>unzip</code> <code>object</code> <code>indexOf</code> <code>lastIndexOf</code></p>\n<h4 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a><code>zip</code></h4><p><code>_.zip(*arrays)</code></p>\n<p>使用 <code>zip</code> 的目的是将数组中相应位置的值结合在一起。将分离的数组归并为一个数组。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip([<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'男'</span>, <span class=\"string\">'女'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'河北'</span>]);</span><br><span class=\"line\">=&gt; [[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'男'</span>, <span class=\"string\">'山东'</span>] , [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'女'</span>, <span class=\"string\">'河北'</span>]]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * @description 用于合成数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; array 传入的多个数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125; 返回的经过合成之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">zip</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要添加是否为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">\tarray.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">\t\targs.map(<span class=\"function\">(<span class=\"params\">argItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\tarr.push(argItem[index]);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tresult.push(arr);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的几点:</p>\n<ol>\n<li><p>对于传入的 <code>array</code> 需要进行判断，是否为 <code>null</code></p>\n<blockquote>\n<p>对于传入的参数一定要进行类型判断</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.zip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">   <span class=\"comment\">// 使用 _.max 获取到 arguments 中所有的数组个数</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> length = _.max(<span class=\"built_in\">arguments</span>, <span class=\"string\">'length'</span>).length;</span><br><span class=\"line\">   <span class=\"comment\">// 使用 Array 生成 length 长度的数组</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (length-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 使用 pluck 用于萃取获得 arguments 的某种属性值</span></span><br><span class=\"line\">     results[length] = _.pluck(<span class=\"built_in\">arguments</span>, length);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> results;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a><code>unzip</code></h4><p>使用 <code>unzip</code> 的目的是将归并后的数组分解为串联的一系列的新数组。</p>\n<p>#####　实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip([[<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'张艺苇'</span>], [<span class=\"string\">'山东'</span>, <span class=\"string\">'行唐'</span>]]);</span><br><span class=\"line\">=&gt; [<span class=\"string\">'张宁宁'</span>, <span class=\"string\">'山东'</span>] [<span class=\"string\">'张艺苇'</span>, <span class=\"string\">'行唐'</span>]</span><br><span class=\"line\"><span class=\"comment\">// 返回的第一个元素中包含所有输入数组的第一个元素</span></span><br></pre></td></tr></table></figure>\n<p>实现代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unzip = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回使用 apply 压入的一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.zip.apply(<span class=\"literal\">null</span>, array);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a><code>object</code></h4><p>使用 <code>object</code> 用于将数组转化为对象的形式。</p>\n<p><code>_.object(list, [values])</code></p>\n<p>传递一个单独的<code>[key, value]</code> 的列表，或者一个键的列表和一个值的列表。当传入 <code>list</code> 和 <code>values</code> 的时候， <code>list</code> 中的值会被作为返回对象的键, <code>values</code> 中的值会被作为返回对象的值。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.object([<span class=\"string\">'moe'</span>, <span class=\"string\">'larry'</span>, <span class=\"string\">'curly'</span>], [<span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</span><br><span class=\"line\">=&gt; &#123;<span class=\"attr\">moe</span>: <span class=\"number\">30</span>, <span class=\"attr\">larry</span>: <span class=\"number\">40</span>, <span class=\"attr\">curly</span>: <span class=\"number\">50</span>&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @description toObj 将键值数组组合为对象</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; list 键数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array&#125; values 值数组</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Object&#125; 组成的对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toObj</span>(<span class=\"params\">list, values</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> values === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item[<span class=\"number\">0</span>]] = item[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  list.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj[item] = values[index];</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf\"></a>indexOf</h4><p><code>_.indexOf(array, value, [isSorted])</code></p>\n<p>使用 <code>indexOf</code> 用于返回 <code>value</code> 在 <code>array</code> 中的索引值， 当传入第三个值为数字的时候，表示从第几个数字进行索引。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf([1, 2, 3 ,4 ,1],1, 1);</span><br><span class=\"line\">=&gt; 5</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexOf = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, item, isSorted</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; length = array &amp;&amp; array.length;</span><br><span class=\"line\">  <span class=\"comment\">// 使用判断数组的方法</span></span><br><span class=\"line\">  <span class=\"comment\">// length = array &amp;&amp; array.length;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> isSorted === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    i = isSorted &lt; <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, length + isSorted) : isSorted;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSorted &amp;&amp; length) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传入的是一个 true, 使用更快的算法</span></span><br><span class=\"line\">    i = _.sortedIndex(array, item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[i] === item ? i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (; i &lt; length; i++) <span class=\"keyword\">if</span> (array[i] === item) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>判断一个数组是否存在:</p>\n<p><code>length = array &amp;&amp; array.length</code> </p>\n</li>\n<li><p>使用 <code>Math.max</code> 的妙用</p>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, num);</span><br><span class=\"line\"><span class=\"comment\">// 返回 num &gt; 0</span></span><br><span class=\"line\"><span class=\"comment\">//相当于</span></span><br><span class=\"line\">num &lt;= <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num;</span><br><span class=\"line\"><span class=\"comment\">//因此</span></span><br><span class=\"line\"><span class=\"comment\">// 对于数字的判断比较，就不要使用三元运算符了，使用 `Math.max` 或者 `Math.min` 会更好些</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>例如下面的一个程序，用来获得一组数组中的最大的差值:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxProfit</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minProfit = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxProfit = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i ++) &#123;</span><br><span class=\"line\">    minProfit = <span class=\"built_in\">Math</span>.min(minProfit, arr[i]);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentProfit = arr[i] - minProfit;</span><br><span class=\"line\">    maxProfit = <span class=\"built_in\">Math</span>.max(maxProfit, currentProfit);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxProfit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf\"></a><code>lastIndexOf</code></h4><p><code>_.lastIndexOf(array, value, [fromIndex])</code></p>\n<p>返回 <code>value</code> 在 <code>array</code> 中从最后开始的索引值，传入的 <code>fromIndex</code> 将从给定的索引值进行搜索。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = array ? array.length : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Math.min 当 fromIndex + 1 &gt; index 的时候，要取 index</span></span><br><span class=\"line\">    index = fromIndex &lt; <span class=\"number\">0</span> ? index + fromIndex + <span class=\"number\">1</span> : <span class=\"built_in\">Math</span>.min(index, fromIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 --index 因为最后一个元素的索引是 array.length - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--index &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">if</span> (array[index] === item) <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortIndex\"><a href=\"#sortIndex\" class=\"headerlink\" title=\"sortIndex\"></a><code>sortIndex</code></h4><p><code>_.sortIndex(list, value, [iteratee], [context])</code></p>\n<p>使用 <code>sortIndex</code> 的目的在于使用二分法查找到 <code>value</code> 在 <code>list</code> 中的位置序号。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>)</span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用二分法进行比较获得到元素在数组中的位置的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = iteratee(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>; <span class=\"keyword\">let</span> high = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 判断 value 在相对于 array 在左边还是在右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.comparator(iteratee(array[mid], value)) &lt; <span class=\"number\">0</span>) low = mid + <span class=\"number\">1</span>; <span class=\"keyword\">else</span> high = mid; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用二分法的原理是将数组中分为两个部分，判断 <code>value</code> 值在哪一个部分之内。</p>\n"},{"title":"underscore.js源码分析(二)","date":"2017-11-20T14:20:50.000Z","_content":"\n### underscore.js 源码分析(二)\n\n`_.filter`  `_.where` `_.findWhere`  `_.reject`  `_.every`\n\n#### `_.filter`\n\n##### 实例\n\n`_.filter(list, predicate, [context])`\n\n遍历 `list` 值, 返回通过 `predicate` 函数返回为真的值数组。\n\n代码如下:\n\n```javascript\nlist = [1, 2, 5, 6];\nfunction toFilter(num) {\n\treturn num % 2 === 0;\n}\nconsole.log('通过过滤的数组', _.filter(list, toFilter)); // [2, 6]\n```\n\n##### 源码分析\n\n使用 `_.filter()` 的源码如下所示:\n\n```javascript\n_.filter = _.select = function(obj, predicate, context) {\n  var results = [];\n  // 判断 `obj` 是否为 null 是返回空数组\n  if (obj == null) return results;\n  predicate = cb(predicate, context);\n  // 使用 `each` 函数对于数组中的每一个列表进行遍历\n  _.each(obj, function(value, index, list) {\n   if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n};\n```\n\n#### _.where\n\n##### 实例\n\n`_.where(list, propertries)`\n\n`list`: 数组\n\n`propertries` : 需要进行检索的键值对(一个对象)\n\n遍历 `list` 中的每一个值， 返回一个数组，这个数组中包含含有 `propertries` 中属性的所有的键值对。\n\n用法:\n\n```javascript\nlist = [{name: '张宁宁', age: 18}, {name: '张宁宁', age: 70}];\nconsole.log(_.where(list, {name: '张宁宁', age: 18})); //  [{name: '张宁宁', age: 18}]\n```\n\n#####源码分析 \n\n自己写的代码:\n\n```javascript\n\tfunction where(list, sObj) {\n\t\tlet results = [];\n\t\tlet flag = false;\n\t\tif (list == null) {\n\t\t\treturn results;\n\t\t}\n\t\tfor (let obj of list) {\n\t\t\tfor (let key in obj) {\n\t\t\t\tif (Object.keys(sObj).includes(key)) {\n\t\t\t\t\tif (sObj[key] === obj[key]) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tresults.push(obj);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n```\n\n`_where()` 源代码如下所示:\n\n```\n_.where = function(obj, attrs) {\n  return _.filter(obj, _.matches(attrs));\n};\n```\n\n使用 `_filter` 筛选出 `obj` 对象中适合函数 `_.matches` 的键值对儿。\n\n`_.match()` 方法的源码如下所示:\n\n```javascript\n\n_.matches = function(attrs) {\n  // 获取到对象的键值对儿, 是 [key, value] 的形式\n    var pairs = _.pairs(attrs), length = pairs.length;\n    // 返回一个函数，接收 obj 参数\n    return function(obj) {\n     // 如果 obj == null 返回 !length\n     // 为什么不直接返回false ?\n      if (obj == null) return !length;\n      // 创建一个新对象\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        // 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况\n        // 返回 false\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      // 返回 true\n      return true;\n    };\n};\n```\n\n***\n\n对于返回一个函数的这种形式:\n\n```javascript\nfunction name() {\n  return function (obj){\n    // dosomething\n  }\n}\n// 调用的时候这样调用\nname()(); // to dosomething\n```\n\n***\n\n#### `_.findWhere`\n\n##### 实例\n\n`_findWhere(list, properties)`\n\n遍历整个 `list` 返回匹配整个 `properties` 参数所列出的所有键值对儿的第一个值。\n\n##### 源码分析\n\n```javascript\n_.findWhere = function(obj, attrs) {\n    // 通过使用 _.matches(attrs) 返回了一个函数\n    // 通过使用 _.find 方法调用了这个函数\n    return _.find(obj, _.matches(attrs));\n};\n```\n\n通过调用 `_.find` 函数返回通过第一次获得匹配的对象。\n\n#### `_.reject`\n\n##### 实例\n\n`_.reject(list, predicate, [context])`\n\n返回 `list` 列表中没能通过 `predicate` 检验的数值。\n\n```javascript\nfunction reject() {\n  return num%2 === 0;\n}\nlet list = [1, 3, 5, 6];\nconsole.log(_.reject(list, reject)); // [1, 3, 5];\n```\n\n作用与 `filter` 相反。\n\n##### 源码分析\n\n```javascript\n _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n };\n```\n\n`_.negate` 函数\n\n```javascript\n _.negate = function(predicate) {\n  return function() {\n  // 通过使用 apply 方法将 arguments 方法传入\n    return !predicate.apply(this, arguments);\n  };\n};\n```\n\n####　`_every`\n\n##### 实例\n\n`_every(list, [predicate], [context])`\n\n如果 `list` 中的元素都通过 `predicate` 的真值检验就返回为 `true`\n\n##### 代码分析\n\n源码如下:\n\n```javascript\nfunction every(obj, predicate) {\n\tif (obj == null) return true;\n    // 通过使用 keys 获得到一个包含对象键的数组\n\tlet keys = obj.length == +obj.length && Object.keys(obj);\n\tlet currentKey;\n    // length 为数组或者对象的长度\n\tlet length = (keys || obj).length;\n\tfor (let index = 0; index < length; index++) {\n\t\tcurrentKey = keys ? keys[index] : index;\n        // 如果对于predicate 函数返回为 false, every 函数返回为false\n\t\tif (!predicate(obj[currentKey])) return false;\n\t}\n\treturn true;\n}\n```\n\n","source":"_posts/underscore-js源码分析-二.md","raw":"---\ntitle: underscore.js源码分析(二)\ndate: 2017-11-20 22:20:50\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(二)\n\n`_.filter`  `_.where` `_.findWhere`  `_.reject`  `_.every`\n\n#### `_.filter`\n\n##### 实例\n\n`_.filter(list, predicate, [context])`\n\n遍历 `list` 值, 返回通过 `predicate` 函数返回为真的值数组。\n\n代码如下:\n\n```javascript\nlist = [1, 2, 5, 6];\nfunction toFilter(num) {\n\treturn num % 2 === 0;\n}\nconsole.log('通过过滤的数组', _.filter(list, toFilter)); // [2, 6]\n```\n\n##### 源码分析\n\n使用 `_.filter()` 的源码如下所示:\n\n```javascript\n_.filter = _.select = function(obj, predicate, context) {\n  var results = [];\n  // 判断 `obj` 是否为 null 是返回空数组\n  if (obj == null) return results;\n  predicate = cb(predicate, context);\n  // 使用 `each` 函数对于数组中的每一个列表进行遍历\n  _.each(obj, function(value, index, list) {\n   if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n};\n```\n\n#### _.where\n\n##### 实例\n\n`_.where(list, propertries)`\n\n`list`: 数组\n\n`propertries` : 需要进行检索的键值对(一个对象)\n\n遍历 `list` 中的每一个值， 返回一个数组，这个数组中包含含有 `propertries` 中属性的所有的键值对。\n\n用法:\n\n```javascript\nlist = [{name: '张宁宁', age: 18}, {name: '张宁宁', age: 70}];\nconsole.log(_.where(list, {name: '张宁宁', age: 18})); //  [{name: '张宁宁', age: 18}]\n```\n\n#####源码分析 \n\n自己写的代码:\n\n```javascript\n\tfunction where(list, sObj) {\n\t\tlet results = [];\n\t\tlet flag = false;\n\t\tif (list == null) {\n\t\t\treturn results;\n\t\t}\n\t\tfor (let obj of list) {\n\t\t\tfor (let key in obj) {\n\t\t\t\tif (Object.keys(sObj).includes(key)) {\n\t\t\t\t\tif (sObj[key] === obj[key]) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tresults.push(obj);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n```\n\n`_where()` 源代码如下所示:\n\n```\n_.where = function(obj, attrs) {\n  return _.filter(obj, _.matches(attrs));\n};\n```\n\n使用 `_filter` 筛选出 `obj` 对象中适合函数 `_.matches` 的键值对儿。\n\n`_.match()` 方法的源码如下所示:\n\n```javascript\n\n_.matches = function(attrs) {\n  // 获取到对象的键值对儿, 是 [key, value] 的形式\n    var pairs = _.pairs(attrs), length = pairs.length;\n    // 返回一个函数，接收 obj 参数\n    return function(obj) {\n     // 如果 obj == null 返回 !length\n     // 为什么不直接返回false ?\n      if (obj == null) return !length;\n      // 创建一个新对象\n      obj = new Object(obj);\n      for (var i = 0; i < length; i++) {\n        var pair = pairs[i], key = pair[0];\n        // 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况\n        // 返回 false\n        if (pair[1] !== obj[key] || !(key in obj)) return false;\n      }\n      // 返回 true\n      return true;\n    };\n};\n```\n\n***\n\n对于返回一个函数的这种形式:\n\n```javascript\nfunction name() {\n  return function (obj){\n    // dosomething\n  }\n}\n// 调用的时候这样调用\nname()(); // to dosomething\n```\n\n***\n\n#### `_.findWhere`\n\n##### 实例\n\n`_findWhere(list, properties)`\n\n遍历整个 `list` 返回匹配整个 `properties` 参数所列出的所有键值对儿的第一个值。\n\n##### 源码分析\n\n```javascript\n_.findWhere = function(obj, attrs) {\n    // 通过使用 _.matches(attrs) 返回了一个函数\n    // 通过使用 _.find 方法调用了这个函数\n    return _.find(obj, _.matches(attrs));\n};\n```\n\n通过调用 `_.find` 函数返回通过第一次获得匹配的对象。\n\n#### `_.reject`\n\n##### 实例\n\n`_.reject(list, predicate, [context])`\n\n返回 `list` 列表中没能通过 `predicate` 检验的数值。\n\n```javascript\nfunction reject() {\n  return num%2 === 0;\n}\nlet list = [1, 3, 5, 6];\nconsole.log(_.reject(list, reject)); // [1, 3, 5];\n```\n\n作用与 `filter` 相反。\n\n##### 源码分析\n\n```javascript\n _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n };\n```\n\n`_.negate` 函数\n\n```javascript\n _.negate = function(predicate) {\n  return function() {\n  // 通过使用 apply 方法将 arguments 方法传入\n    return !predicate.apply(this, arguments);\n  };\n};\n```\n\n####　`_every`\n\n##### 实例\n\n`_every(list, [predicate], [context])`\n\n如果 `list` 中的元素都通过 `predicate` 的真值检验就返回为 `true`\n\n##### 代码分析\n\n源码如下:\n\n```javascript\nfunction every(obj, predicate) {\n\tif (obj == null) return true;\n    // 通过使用 keys 获得到一个包含对象键的数组\n\tlet keys = obj.length == +obj.length && Object.keys(obj);\n\tlet currentKey;\n    // length 为数组或者对象的长度\n\tlet length = (keys || obj).length;\n\tfor (let index = 0; index < length; index++) {\n\t\tcurrentKey = keys ? keys[index] : index;\n        // 如果对于predicate 函数返回为 false, every 函数返回为false\n\t\tif (!predicate(obj[currentKey])) return false;\n\t}\n\treturn true;\n}\n```\n\n","slug":"underscore-js源码分析-二","published":1,"updated":"2017-11-21T15:37:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9c002us33gzml89m0e","content":"<h3 id=\"underscore-js-源码分析-二\"><a href=\"#underscore-js-源码分析-二\" class=\"headerlink\" title=\"underscore.js 源码分析(二)\"></a>underscore.js 源码分析(二)</h3><p><code>_.filter</code>  <code>_.where</code> <code>_.findWhere</code>  <code>_.reject</code>  <code>_.every</code></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"_.filter\"></a><code>_.filter</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.filter(list, predicate, [context])</code></p>\n<p>遍历 <code>list</code> 值, 返回通过 <code>predicate</code> 函数返回为真的值数组。</p>\n<p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFilter</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'通过过滤的数组'</span>, _.filter(list, toFilter)); <span class=\"comment\">// [2, 6]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.filter()</code> 的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">  <span class=\"comment\">// 判断 `obj` 是否为 null 是返回空数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 `each` 函数对于数组中的每一个列表进行遍历</span></span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"_.where\"></a>_.where</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.where(list, propertries)</code></p>\n<p><code>list</code>: 数组</p>\n<p><code>propertries</code> : 需要进行检索的键值对(一个对象)</p>\n<p>遍历 <code>list</code> 中的每一个值， 返回一个数组，这个数组中包含含有 <code>propertries</code> 中属性的所有的键值对。</p>\n<p>用法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">70</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.where(list, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;)); <span class=\"comment\">//  [&#123;name: '张宁宁', age: 18&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>#####源码分析 </p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">list, sObj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> obj <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(sObj).includes(key)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (sObj[key] === obj[key]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tresults.push(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>_where()</code> 源代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.where = function(obj, attrs) &#123;</span><br><span class=\"line\">  return _.filter(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_filter</code> 筛选出 <code>obj</code> 对象中适合函数 <code>_.matches</code> 的键值对儿。</p>\n<p><code>_.match()</code> 方法的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">_.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的键值对儿, 是 [key, value] 的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = _.pairs(attrs), length = pairs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数，接收 obj 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 obj == null 返回 !length</span></span><br><span class=\"line\">     <span class=\"comment\">// 为什么不直接返回false ?</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">      obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pair = pairs[i], key = pair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pair[<span class=\"number\">1</span>] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>对于返回一个函数的这种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dosomething</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用的时候这样调用</span></span><br><span class=\"line\">name()(); <span class=\"comment\">// to dosomething</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"findWhere\"><a href=\"#findWhere\" class=\"headerlink\" title=\"_.findWhere\"></a><code>_.findWhere</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_findWhere(list, properties)</code></p>\n<p>遍历整个 <code>list</code> 返回匹配整个 <code>properties</code> 参数所列出的所有键值对儿的第一个值。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.matches(attrs) 返回了一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.find 方法调用了这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过调用 <code>_.find</code> 函数返回通过第一次获得匹配的对象。</p>\n<h4 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"_.reject\"></a><code>_.reject</code></h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reject(list, predicate, [context])</code></p>\n<p>返回 <code>list</code> 列表中没能通过 <code>predicate</code> 检验的数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.reject(list, reject)); <span class=\"comment\">// [1, 3, 5];</span></span><br></pre></td></tr></table></figure>\n<p>作用与 <code>filter</code> 相反。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>_.negate</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 apply 方法将 arguments 方法传入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_every</code></p>\n<h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_every(list, [predicate], [context])</code></p>\n<p>如果 <code>list</code> 中的元素都通过 <code>predicate</code> 的真值检验就返回为 <code>true</code></p>\n<h5 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">every</span>(<span class=\"params\">obj, predicate</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 keys 获得到一个包含对象键的数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> keys = obj.length == +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> currentKey;</span><br><span class=\"line\">    <span class=\"comment\">// length 为数组或者对象的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> length = (keys || obj).length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentKey = keys ? keys[index] : index;</span><br><span class=\"line\">        <span class=\"comment\">// 如果对于predicate 函数返回为 false, every 函数返回为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!predicate(obj[currentKey])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-二\"><a href=\"#underscore-js-源码分析-二\" class=\"headerlink\" title=\"underscore.js 源码分析(二)\"></a>underscore.js 源码分析(二)</h3><p><code>_.filter</code>  <code>_.where</code> <code>_.findWhere</code>  <code>_.reject</code>  <code>_.every</code></p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"_.filter\"></a><code>_.filter</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.filter(list, predicate, [context])</code></p>\n<p>遍历 <code>list</code> 值, 返回通过 <code>predicate</code> 函数返回为真的值数组。</p>\n<p>代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toFilter</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'通过过滤的数组'</span>, _.filter(list, toFilter)); <span class=\"comment\">// [2, 6]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.filter()</code> 的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.filter = _.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\">  <span class=\"comment\">// 判断 `obj` 是否为 null 是返回空数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">  predicate = cb(predicate, context);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 `each` 函数对于数组中的每一个列表进行遍历</span></span><br><span class=\"line\">  _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (predicate(value, index, list)) results.push(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"_.where\"></a>_.where</h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.where(list, propertries)</code></p>\n<p><code>list</code>: 数组</p>\n<p><code>propertries</code> : 需要进行检索的键值对(一个对象)</p>\n<p>遍历 <code>list</code> 中的每一个值， 返回一个数组，这个数组中包含含有 <code>propertries</code> 中属性的所有的键值对。</p>\n<p>用法:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">70</span>&#125;];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.where(list, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;)); <span class=\"comment\">//  [&#123;name: '张宁宁', age: 18&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>#####源码分析 </p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">list, sObj</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> results = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (list == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> obj <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(sObj).includes(key)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (sObj[key] === obj[key]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">\t\t\tresults.push(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>_where()</code> 源代码如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.where = function(obj, attrs) &#123;</span><br><span class=\"line\">  return _.filter(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_filter</code> 筛选出 <code>obj</code> 对象中适合函数 <code>_.matches</code> 的键值对儿。</p>\n<p><code>_.match()</code> 方法的源码如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">_.matches = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attrs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的键值对儿, 是 [key, value] 的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> pairs = _.pairs(attrs), length = pairs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数，接收 obj 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 如果 obj == null 返回 !length</span></span><br><span class=\"line\">     <span class=\"comment\">// 为什么不直接返回false ?</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> !length;</span><br><span class=\"line\">      <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">      obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pair = pairs[i], key = pair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 两种情况， 不存在键或者键存在，值不相等， 两种情况发生一种情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pair[<span class=\"number\">1</span>] !== obj[key] || !(key <span class=\"keyword\">in</span> obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 返回 true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>对于返回一个函数的这种形式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// dosomething</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用的时候这样调用</span></span><br><span class=\"line\">name()(); <span class=\"comment\">// to dosomething</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"findWhere\"><a href=\"#findWhere\" class=\"headerlink\" title=\"_.findWhere\"></a><code>_.findWhere</code></h4><h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_findWhere(list, properties)</code></p>\n<p>遍历整个 <code>list</code> 返回匹配整个 <code>properties</code> 参数所列出的所有键值对儿的第一个值。</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.findWhere = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, attrs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.matches(attrs) 返回了一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 _.find 方法调用了这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.find(obj, _.matches(attrs));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过调用 <code>_.find</code> 函数返回通过第一次获得匹配的对象。</p>\n<h4 id=\"reject\"><a href=\"#reject\" class=\"headerlink\" title=\"_.reject\"></a><code>_.reject</code></h4><h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.reject(list, predicate, [context])</code></p>\n<p>返回 <code>list</code> 列表中没能通过 <code>predicate</code> 检验的数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num%<span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_.reject(list, reject)); <span class=\"comment\">// [1, 3, 5];</span></span><br></pre></td></tr></table></figure>\n<p>作用与 <code>filter</code> 相反。</p>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _.filter(obj, _.negate(cb(predicate)), context);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>_.negate</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _.negate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 apply 方法将 arguments 方法传入</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !predicate.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_every</code></p>\n<h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_every(list, [predicate], [context])</code></p>\n<p>如果 <code>list</code> 中的元素都通过 <code>predicate</code> 的真值检验就返回为 <code>true</code></p>\n<h5 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h5><p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">every</span>(<span class=\"params\">obj, predicate</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 keys 获得到一个包含对象键的数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> keys = obj.length == +obj.length &amp;&amp; <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> currentKey;</span><br><span class=\"line\">    <span class=\"comment\">// length 为数组或者对象的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> length = (keys || obj).length;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">\t\tcurrentKey = keys ? keys[index] : index;</span><br><span class=\"line\">        <span class=\"comment\">// 如果对于predicate 函数返回为 false, every 函数返回为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!predicate(obj[currentKey])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(三)","date":"2017-11-22T12:55:17.000Z","_content":"\n###　 underscore.js 源码分析(三)\n\n`_.some` `_.contains`  `_.invoke`  `_.pluck`  `_.max`\n\n#### `_.some`\n\n##### 实例\n\n`_.some(list, [predicate], [context])`\n\n遍历 `list` 中的元素, 只要其中有一个元素通过 `predicate` , 那么就返回为 `true`\n\n##### 源码分析\n\n```javascript\n_.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = cb(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      // 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n};\n```\n\n#### `_.contains`\n\n##### 实例\n\n`_.contains(list, value, [fromIndex])`\n\n如果在 `list` 中包含有 `value` 值，那么返回为 `true` `fromIndex` 表示开始进行检索的位置。\n\n如果 `list` 是数组, 检查数组中是否包含有对应的 `value` 值\n\n如果 `list` 是对象, 检查对象中的值是否有存在的 `value` 值\n\n自己写的代码:\n\n```javascript\nfunction contain(obj, value, fromIndex) {\n  if (obj == null) return false;\n  let list = obj;\n  if (obj.length !== +obj.length) {\n    list = obj.values();\n  }\n  // 为了保证代码的健壮性，添加 typeof fromIndex === 'number' && fromIndex 的判断\n  return list.indexOf(value, typeof fromIndex === 'number' && fromIndex) >= 0;\n}\n```\n\n##### 源码分析\n\n```javascript\n_.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (obj == null) return false;\n    // 使用 _.values 获得到对象的值\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    // 使用 `_.indexOf` 获取到索引\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n};\n```\n\n#### `_.invoke` \n\n>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】\n\n##### 实例\n\n`_.invoke(list, methodName, *arguments)` \n\n在 `list` 的每一个元素上执行 `methodName` 方法。 `argument` 用于将使用 `_.invoke` 调用 `methodName` 方法的时候传递的函数。\n\n```javascript\nlet list = [[1, 4, 3]];\n_.invoke(list, 'sort') // [1, 3 ,4]\n// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort\n// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，\n// 而 函数 print 中的 this 值指向的是 list 中的元素\nfunction print() {\n    console.log(this); // [1, 4, 3]\n}\n\n```\n\n##### 源码分析\n\n实现这个功能的源码如下:\n\n```javascript\n_.invoke = function(obj, method) {\n    // 使用 Array.slice.call 返回一个子数组\n    // 第二个参数 2 表示截取从传入参数的第二个处进行截取\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n  // 对于 obj 进行遍历\n    return _.map(obj, function(value) {\n    // 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数\n    // 进行判断是否是函数 method 或者 内置的 method 方法\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n };\n```\n\n这是一个用于进行调用绑定的函数。\n\n#### `_.pluck`\n\n>pluck 拔掉，摘，拉\n\n`_.pluck(list, propertyName)` \n\n##### 实例\n\n使用 `_.pluck` 用于获取到数组对象中的对应属性的所有的值。\n\n对于对象中不存在的属性返回 `undefined`\n\n```javascript\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.pluck(stooges, 'name');\n=> [\"moe\", \"larry\", \"curly\"]\n```\n\n自己写的一个 `pluck` 函数如下：\n\n```javascript\nfunction pluck(list, name) {\n  let props = [];\n  list.map((obj) => {\n    if (Object.keys(obj).indexOf(name) >= 0) {\n        props.push(obj[name]);\n      } else {\n        // 这里使用 void 0 代替 undefined \n        props.push(void 0);\n      }\n    });\n\treturn props;\n }\n```\n\n##### 源码分析\n\n```javascript\n_.pluck = function(obj, key) {\n  // 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法\n  return _.map(obj, _.property(key));\n};\n```\n\n```javascript\n_.property = function(key) {\n    // 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值\n    return function(obj) {\n     // 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n```\n\n#### `_.max`\n\n`_.max(list, [iteratee], [context])` \n\n返回 `list` 中的最大值。\n\n```javascript\n_.max = function(obj, iteratee, context) {\n  // 将 result 初始化为 -infinity lastComputed 初始化为 infinity\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    // 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做\n    // 并且 obj 不等于 null 的时候\n    if (iteratee == null && obj != null) {\n      // obj 为数组 ? 数组 : 对象的值\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        // 进行遍历值\n        value = obj[i];\n        // 比较大小，将最大的那个值赋给 result 参数\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      // 使用 foreach 对于 obj 进行计算\n      _.each(obj, function(value, index, list) {\n        // 进行计算之后返回计算结果\n        computed = iteratee(value, index, list);\n        // 如果计算结果大于上一次计算结果， 将最大的值赋给 result\n        // 将最大的结果赋予 lastComputed\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n1. 在js 中关于运算符优先级的问题:\n\n   >逻辑 `&&` (与) 大于 逻辑 或`||`\n\n2. 上面有一段程序如下:\n\n   `if (computed > lastComputed || computed === -Infinity && result === -Infinity)`\n\n   这段话翻译为中文就是\n\n   如果满足 `computed === -Infinity && result === -Infinity` 或者 `computed > lastComputd` 的时候，进行动作。 ","source":"_posts/underscore-js源码分析-三.md","raw":"---\ntitle: underscore.js源码分析(三)\ndate: 2017-11-22 20:55:17\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n###　 underscore.js 源码分析(三)\n\n`_.some` `_.contains`  `_.invoke`  `_.pluck`  `_.max`\n\n#### `_.some`\n\n##### 实例\n\n`_.some(list, [predicate], [context])`\n\n遍历 `list` 中的元素, 只要其中有一个元素通过 `predicate` , 那么就返回为 `true`\n\n##### 源码分析\n\n```javascript\n_.some = _.any = function(obj, predicate, context) {\n    if (obj == null) return false;\n    predicate = cb(predicate, context);\n    var keys = obj.length !== +obj.length && _.keys(obj),\n        length = (keys || obj).length,\n        index, currentKey;\n    for (index = 0; index < length; index++) {\n      currentKey = keys ? keys[index] : index;\n      // 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n};\n```\n\n#### `_.contains`\n\n##### 实例\n\n`_.contains(list, value, [fromIndex])`\n\n如果在 `list` 中包含有 `value` 值，那么返回为 `true` `fromIndex` 表示开始进行检索的位置。\n\n如果 `list` 是数组, 检查数组中是否包含有对应的 `value` 值\n\n如果 `list` 是对象, 检查对象中的值是否有存在的 `value` 值\n\n自己写的代码:\n\n```javascript\nfunction contain(obj, value, fromIndex) {\n  if (obj == null) return false;\n  let list = obj;\n  if (obj.length !== +obj.length) {\n    list = obj.values();\n  }\n  // 为了保证代码的健壮性，添加 typeof fromIndex === 'number' && fromIndex 的判断\n  return list.indexOf(value, typeof fromIndex === 'number' && fromIndex) >= 0;\n}\n```\n\n##### 源码分析\n\n```javascript\n_.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (obj == null) return false;\n    // 使用 _.values 获得到对象的值\n    if (obj.length !== +obj.length) obj = _.values(obj);\n    // 使用 `_.indexOf` 获取到索引\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n};\n```\n\n#### `_.invoke` \n\n>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】\n\n##### 实例\n\n`_.invoke(list, methodName, *arguments)` \n\n在 `list` 的每一个元素上执行 `methodName` 方法。 `argument` 用于将使用 `_.invoke` 调用 `methodName` 方法的时候传递的函数。\n\n```javascript\nlet list = [[1, 4, 3]];\n_.invoke(list, 'sort') // [1, 3 ,4]\n// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort\n// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，\n// 而 函数 print 中的 this 值指向的是 list 中的元素\nfunction print() {\n    console.log(this); // [1, 4, 3]\n}\n\n```\n\n##### 源码分析\n\n实现这个功能的源码如下:\n\n```javascript\n_.invoke = function(obj, method) {\n    // 使用 Array.slice.call 返回一个子数组\n    // 第二个参数 2 表示截取从传入参数的第二个处进行截取\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n  // 对于 obj 进行遍历\n    return _.map(obj, function(value) {\n    // 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数\n    // 进行判断是否是函数 method 或者 内置的 method 方法\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n };\n```\n\n这是一个用于进行调用绑定的函数。\n\n#### `_.pluck`\n\n>pluck 拔掉，摘，拉\n\n`_.pluck(list, propertyName)` \n\n##### 实例\n\n使用 `_.pluck` 用于获取到数组对象中的对应属性的所有的值。\n\n对于对象中不存在的属性返回 `undefined`\n\n```javascript\nvar stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];\n_.pluck(stooges, 'name');\n=> [\"moe\", \"larry\", \"curly\"]\n```\n\n自己写的一个 `pluck` 函数如下：\n\n```javascript\nfunction pluck(list, name) {\n  let props = [];\n  list.map((obj) => {\n    if (Object.keys(obj).indexOf(name) >= 0) {\n        props.push(obj[name]);\n      } else {\n        // 这里使用 void 0 代替 undefined \n        props.push(void 0);\n      }\n    });\n\treturn props;\n }\n```\n\n##### 源码分析\n\n```javascript\n_.pluck = function(obj, key) {\n  // 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法\n  return _.map(obj, _.property(key));\n};\n```\n\n```javascript\n_.property = function(key) {\n    // 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值\n    return function(obj) {\n     // 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n```\n\n#### `_.max`\n\n`_.max(list, [iteratee], [context])` \n\n返回 `list` 中的最大值。\n\n```javascript\n_.max = function(obj, iteratee, context) {\n  // 将 result 初始化为 -infinity lastComputed 初始化为 infinity\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    // 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做\n    // 并且 obj 不等于 null 的时候\n    if (iteratee == null && obj != null) {\n      // obj 为数组 ? 数组 : 对象的值\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        // 进行遍历值\n        value = obj[i];\n        // 比较大小，将最大的那个值赋给 result 参数\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      // 使用 foreach 对于 obj 进行计算\n      _.each(obj, function(value, index, list) {\n        // 进行计算之后返回计算结果\n        computed = iteratee(value, index, list);\n        // 如果计算结果大于上一次计算结果， 将最大的值赋给 result\n        // 将最大的结果赋予 lastComputed\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n1. 在js 中关于运算符优先级的问题:\n\n   >逻辑 `&&` (与) 大于 逻辑 或`||`\n\n2. 上面有一段程序如下:\n\n   `if (computed > lastComputed || computed === -Infinity && result === -Infinity)`\n\n   这段话翻译为中文就是\n\n   如果满足 `computed === -Infinity && result === -Infinity` 或者 `computed > lastComputd` 的时候，进行动作。 ","slug":"underscore-js源码分析-三","published":1,"updated":"2017-12-01T15:20:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9e002ws33gijjr8hyv","content":"<p>###　 underscore.js 源码分析(三)</p>\n<p><code>_.some</code> <code>_.contains</code>  <code>_.invoke</code>  <code>_.pluck</code>  <code>_.max</code></p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a><code>_.some</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.some(list, [predicate], [context])</code></p>\n<p>遍历 <code>list</code> 中的元素, 只要其中有一个元素通过 <code>predicate</code> , 那么就返回为 <code>true</code></p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\">        index, currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"_.contains\"></a><code>_.contains</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.contains(list, value, [fromIndex])</code></p>\n<p>如果在 <code>list</code> 中包含有 <code>value</code> 值，那么返回为 <code>true</code> <code>fromIndex</code> 表示开始进行检索的位置。</p>\n<p>如果 <code>list</code> 是数组, 检查数组中是否包含有对应的 <code>value</code> 值</p>\n<p>如果 <code>list</code> 是对象, 检查对象中的值是否有存在的 <code>value</code> 值</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contain</span>(<span class=\"params\">obj, value, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">    list = obj.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为了保证代码的健壮性，添加 typeof fromIndex === 'number' &amp;&amp; fromIndex 的判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.indexOf(value, <span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, target, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.values 获得到对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 `_.indexOf` 获取到索引</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, target, <span class=\"keyword\">typeof</span> fromIndex == <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"_.invoke\"></a><code>_.invoke</code></h4><blockquote>\n<p>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】</p>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.invoke(list, methodName, *arguments)</code> </p>\n<p>在 <code>list</code> 的每一个元素上执行 <code>methodName</code> 方法。 <code>argument</code> 用于将使用 <code>_.invoke</code> 调用 <code>methodName</code> 方法的时候传递的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\">_.invoke(list, <span class=\"string\">'sort'</span>) <span class=\"comment\">// [1, 3 ,4]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort</span></span><br><span class=\"line\"><span class=\"comment\">// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 而 函数 print 中的 this 值指向的是 list 中的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>实现这个功能的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Array.slice.call 返回一个子数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 2 表示截取从传入参数的第二个处进行截取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 进行遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行判断是否是函数 method 或者 内置的 method 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (isFunc ? method : value[method]).apply(value, args);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个用于进行调用绑定的函数。</p>\n<h4 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a><code>_.pluck</code></h4><blockquote>\n<p>pluck 拔掉，摘，拉</p>\n</blockquote>\n<p><code>_.pluck(list, propertyName)</code> </p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.pluck</code> 用于获取到数组对象中的对应属性的所有的值。</p>\n<p>对于对象中不存在的属性返回 <code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.pluck(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [<span class=\"string\">\"moe\"</span>, <span class=\"string\">\"larry\"</span>, <span class=\"string\">\"curly\"</span>]</span><br></pre></td></tr></table></figure>\n<p>自己写的一个 <code>pluck</code> 函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">list, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> props = [];</span><br><span class=\"line\">  list.map(<span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj).indexOf(name) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        props.push(obj[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 void 0 代替 undefined </span></span><br><span class=\"line\">        props.push(<span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> props;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.map(obj, _.property(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"_.max\"></a><code>_.max</code></h4><p><code>_.max(list, [iteratee], [context])</code> </p>\n<p>返回 <code>list</code> 中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 result 初始化为 -infinity lastComputed 初始化为 infinity</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"comment\">// 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且 obj 不等于 null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// obj 为数组 ? 数组 : 对象的值</span></span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行遍历值</span></span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"comment\">// 比较大小，将最大的那个值赋给 result 参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      <span class=\"comment\">// 使用 foreach 对于 obj 进行计算</span></span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行计算之后返回计算结果</span></span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"comment\">// 如果计算结果大于上一次计算结果， 将最大的值赋给 result</span></span><br><span class=\"line\">        <span class=\"comment\">// 将最大的结果赋予 lastComputed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>在js 中关于运算符优先级的问题:</p>\n<blockquote>\n<p>逻辑 <code>&amp;&amp;</code> (与) 大于 逻辑 或<code>||</code></p>\n</blockquote>\n</li>\n<li><p>上面有一段程序如下:</p>\n<p><code>if (computed &gt; lastComputed || computed === -Infinity &amp;&amp; result === -Infinity)</code></p>\n<p>这段话翻译为中文就是</p>\n<p>如果满足 <code>computed === -Infinity &amp;&amp; result === -Infinity</code> 或者 <code>computed &gt; lastComputd</code> 的时候，进行动作。 </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>###　 underscore.js 源码分析(三)</p>\n<p><code>_.some</code> <code>_.contains</code>  <code>_.invoke</code>  <code>_.pluck</code>  <code>_.max</code></p>\n<h4 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"_.some\"></a><code>_.some</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.some(list, [predicate], [context])</code></p>\n<p>遍历 <code>list</code> 中的元素, 只要其中有一个元素通过 <code>predicate</code> , 那么就返回为 <code>true</code></p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.some = _.any = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    predicate = cb(predicate, context);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = obj.length !== +obj.length &amp;&amp; _.keys(obj),</span><br><span class=\"line\">        length = (keys || obj).length,</span><br><span class=\"line\">        index, currentKey;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      currentKey = keys ? keys[index] : index;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 obj 中其中的一个元素进行 predicate 检验的结果为 true 返回为true</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predicate(obj[currentKey], currentKey, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"_.contains\"></a><code>_.contains</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.contains(list, value, [fromIndex])</code></p>\n<p>如果在 <code>list</code> 中包含有 <code>value</code> 值，那么返回为 <code>true</code> <code>fromIndex</code> 表示开始进行检索的位置。</p>\n<p>如果 <code>list</code> 是数组, 检查数组中是否包含有对应的 <code>value</code> 值</p>\n<p>如果 <code>list</code> 是对象, 检查对象中的值是否有存在的 <code>value</code> 值</p>\n<p>自己写的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">contain</span>(<span class=\"params\">obj, value, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = obj;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.length !== +obj.length) &#123;</span><br><span class=\"line\">    list = obj.values();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为了保证代码的健壮性，添加 typeof fromIndex === 'number' &amp;&amp; fromIndex 的判断</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> list.indexOf(value, <span class=\"keyword\">typeof</span> fromIndex === <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.contains = _.includes = _.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, target, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.values 获得到对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.length !== +obj.length) obj = _.values(obj);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 `_.indexOf` 获取到索引</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.indexOf(obj, target, <span class=\"keyword\">typeof</span> fromIndex == <span class=\"string\">'number'</span> &amp;&amp; fromIndex) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"_.invoke\"></a><code>_.invoke</code></h4><blockquote>\n<p>计算机术语中: invoke : [ɪnˈvoʊk] 乞求，借助于   调用【计算机】</p>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.invoke(list, methodName, *arguments)</code> </p>\n<p>在 <code>list</code> 的每一个元素上执行 <code>methodName</code> 方法。 <code>argument</code> 用于将使用 <code>_.invoke</code> 调用 <code>methodName</code> 方法的时候传递的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\">_.invoke(list, <span class=\"string\">'sort'</span>) <span class=\"comment\">// [1, 3 ,4]</span></span><br><span class=\"line\"><span class=\"comment\">// 这个函数的作用是将 执行 list 元素中的数组 [1, 4, 3] 方法 sort</span></span><br><span class=\"line\"><span class=\"comment\">// 同样 我们可以使用别的函数,这个时候 argument 会被作为 methodName 函数的参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 而 函数 print 中的 this 值指向的是 list 中的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>实现这个功能的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.invoke = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Array.slice.call 返回一个子数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 2 表示截取从传入参数的第二个处进行截取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isFunc = _.isFunction(method);</span><br><span class=\"line\">  <span class=\"comment\">// 对于 obj 进行遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过使用 apply 方法， 将 value 作为 func 的 this 值， 同时传入截取的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 进行判断是否是函数 method 或者 内置的 method 方法</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (isFunc ? method : value[method]).apply(value, args);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个用于进行调用绑定的函数。</p>\n<h4 id=\"pluck\"><a href=\"#pluck\" class=\"headerlink\" title=\"_.pluck\"></a><code>_.pluck</code></h4><blockquote>\n<p>pluck 拔掉，摘，拉</p>\n</blockquote>\n<p><code>_.pluck(list, propertyName)</code> </p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>使用 <code>_.pluck</code> 用于获取到数组对象中的对应属性的所有的值。</p>\n<p>对于对象中不存在的属性返回 <code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.pluck(stooges, <span class=\"string\">'name'</span>);</span><br><span class=\"line\">=&gt; [<span class=\"string\">\"moe\"</span>, <span class=\"string\">\"larry\"</span>, <span class=\"string\">\"curly\"</span>]</span><br></pre></td></tr></table></figure>\n<p>自己写的一个 <code>pluck</code> 函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">list, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> props = [];</span><br><span class=\"line\">  list.map(<span class=\"function\">(<span class=\"params\">obj</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.keys(obj).indexOf(name) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        props.push(obj[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里使用 void 0 代替 undefined </span></span><br><span class=\"line\">        props.push(<span class=\"keyword\">void</span> <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> props;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-3\"><a href=\"#源码分析-3\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pluck = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 _.map， 对于 obj 中的数组对象成员执行 _.property 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.map(obj, _.property(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数， 参数 obj 接收到的是 _.property()(obj) 这个的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 传入的 obj 是否为 null 是 返回 undefined  否则 返回 obj[key]</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"_.max\"></a><code>_.max</code></h4><p><code>_.max(list, [iteratee], [context])</code> </p>\n<p>返回 <code>list</code> 中的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.max = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 result 初始化为 -infinity lastComputed 初始化为 infinity</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = -<span class=\"literal\">Infinity</span>, lastComputed = -<span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"comment\">// 当 interaee 为null 不传参数,采用 obj 中内置的方法名称来做</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且 obj 不等于 null 的时候</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// obj 为数组 ? 数组 : 对象的值</span></span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行遍历值</span></span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"comment\">// 比较大小，将最大的那个值赋给 result 参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; result) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      <span class=\"comment\">// 使用 foreach 对于 obj 进行计算</span></span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进行计算之后返回计算结果</span></span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"comment\">// 如果计算结果大于上一次计算结果， 将最大的值赋给 result</span></span><br><span class=\"line\">        <span class=\"comment\">// 将最大的结果赋予 lastComputed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &gt; lastComputed || computed === -<span class=\"literal\">Infinity</span> &amp;&amp; result === -<span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>在js 中关于运算符优先级的问题:</p>\n<blockquote>\n<p>逻辑 <code>&amp;&amp;</code> (与) 大于 逻辑 或<code>||</code></p>\n</blockquote>\n</li>\n<li><p>上面有一段程序如下:</p>\n<p><code>if (computed &gt; lastComputed || computed === -Infinity &amp;&amp; result === -Infinity)</code></p>\n<p>这段话翻译为中文就是</p>\n<p>如果满足 <code>computed === -Infinity &amp;&amp; result === -Infinity</code> 或者 <code>computed &gt; lastComputd</code> 的时候，进行动作。 </p>\n</li>\n</ol>\n"},{"title":"underscore.js源码分析(十)","date":"2017-12-05T02:39:50.000Z","_content":"\n### underscore.js 源码分析（十）\n\n使用underscore.js 的 function 部分\n\n`bind`  `bindall`  `partial`  `memorize`  `delay`\n\n#####  `bind`\n\n`_.bind(func, obj, *arguments)`\n\n使用 `bind`\n\n使用 `bind` 的目的是将函数 `func` 绑定到 `obj` 上面去，也就是说，这时候 `func` 中的 `this` 就指向了 `obj`, 其中 `arguments` 被作为传递给 `func` 的参数被传入到 `func` 之中。\n\n#####　实例如下\n\n```javascript\nfunction greet(home) {\n  console.log(`hi my name is ${this.name}, my home is ${home}`);\n}\n// 使用 _.bind 进行函数绑定\n_.bind(greet, {name: '张宁宁'}, '山东');\n// hi my name is 张宁宁, my home is 山东\n```\n\n***\n\n关于使用 `bind` 的函数:\n\n使用 `bind` 的函数\n\n使用 `bind` 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。\n\n***\n\n\n\n源码如下:\n\n```javascript\n_.bind = function(func, context) {\n  // 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操\n  // nativeBind.appy\n  // 对于 es5 支持的 bind 方法接收两个参数\n  // func 以及 参数\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n  // 如果 func 不是一个函数的时候\n  // throw new TypeError('bind must be called on a function');\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n  // 使用 slice.call 用于截取 arguments\n  // 通过使用 slice.call 方法截取传入函数的参数\n    var args = slice.call(arguments, 2);\n    var bound =  function () {\n      // 返回一个 executeBpund 函数\n      // 使用 args 数组的 concat 方法用于连接数组\n      // 分别传入的值是 func, bound, context, this, args\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n```\n\n其中 `executeBound` 函数如下:\n\n```javascript\n// 这里面 boundFunc 是需要进行绑定的函数 \nvar executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n   // 如果 boundFunc 不在 callingContext 的原型链上\n  // 使用 apply 方法进行绑定\n  // 如果 callingContext 不在 boundFunc 的原型链上\n  // 这里的 callingContext 是指的 this 值\n  // 返回将 context 绑定到 sourceFunc 上面\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n   // 关于 baseCreate 函数\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n```\n\n关于 `baseCreate` 函数如下:\n\n```javascript\nlet Ctor = function () {};\nlet baseCreate = function(prototype) {\n  // 判断 prototype 是否是一个对象\n  if (!_.isObjject(prototype)) return {};\n  // 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数\n  if (nativeCreate) return nativeCreate(protoytpe);\n  Ctor.prototype = prototype;\n  // 创建一个函数的实例，这个函数的原型指向 prototype\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n} \n```\n\n上面的 `nativeCreate` 返回的是这个 `Object.create()` \n\n使用 `Object.create` 用来实现继承的关系\n\n```javascript\n// 使用 new 操作符的过程\nlet obj = new Constructor();\n// 创建一个新的对象\nlet obj = {};\n// 执行原型链接\nobj._proto_ = Constructor.prototype;\n// 将这个构造函数的 this 值指向新创建的这个新对象\nConstructor.call(obj);\n// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了\n```\n\n##### `partial`\n\n`partial(function, *arguments)`\n\n局部应用一个函数填充在任意个数的 `arguments`。\n\n##### 实例\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\nlet particalAdd = _.partial(add, 3);\nparticalAdd(5); // 8\n// 这里的 5 填充了函数的第二个参数 b\n```\n\n自己写的函数:\n\n```javascript\nfunction partial(fn) {\n  // 获取到传入到 partial 函数中的参数\n  let partialArgs = Array.prototype.slice.call(arguments, 1);\n  // return 返回一个函数\n  return function(args) {\n    let fnArgs = Array.prototype.slice.call(arguments, 0);\n    // 将参数传入，执行 fn\n    fn(...partialArgs, ...fnArgs);\n  }\n}\n```\n\n\n\n##### 源码分析\n\n```javascript\n_.partial = function(func) {\n  let boundArgs = slice.call(arguments, 1);\n  return function bound () {\n    let position = 0;\n    let args = boundArgs.slice();\n    let length = args.length;\n    for (let i = 0; i < length; i++) {\n      // 在数组中使用 position ++\n      if (args[i] === _) args[i] = arguments[position++]; \n    }\n    whitle(position < arguments.length) args.push(arguments[position++]);\n    // 这时候的 args 中是包含了所有的参数\n    return executeBound(func, bound, this, this, args);\n  }\n}\n```\n\n关于 `executeBound` 函数上面有解释，这个函数的作用是:\n\n> Determines whether to execute a function as a constructor,   or a normal function with the provided arguments\n>\n> 决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。\n\n`memoize`\n\n使用 `memorize` 用来缓存函数计算的结果。\n\n`delay`\n\n使用 `delay` 用来实现对于函数延迟执行，代码如下:\n\n```javascript\nfunction delay(func, wait) {\n  // 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数\n  let args = Array.prototype.slice.call(arguments, 2);\n  // 返回等待 wait 时间之后的函数\n  return setTimeout(() => {\n    // 自己写的\n    func(args);\n    // 源码写的\n    // 使用 apply 的方法向函数 func 中传递 args 参数\n    return func.apply(null, args);\n  }, wait)\n}\n```\n\n`defer`\n\n`defer(function, *arguments)`\n\n使用 `defer` 的目的在于延迟调用 `function` 直到当前的调用栈被清空为止，其中 `arguments` 会被作为 `function` 的参数进行传入。\n\n类似于使用 `setTimeout(function () {}, 0)` 的延迟调用效果。\n\n实现的源码如下:\n\n```javascript\n_.defer = _.partial(_.delay, _, 1);\n```\n\n","source":"_posts/underscore-js源码分析-十.md","raw":"---\ntitle: underscore.js源码分析(十)\ndate: 2017-12-05 10:39:50\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析（十）\n\n使用underscore.js 的 function 部分\n\n`bind`  `bindall`  `partial`  `memorize`  `delay`\n\n#####  `bind`\n\n`_.bind(func, obj, *arguments)`\n\n使用 `bind`\n\n使用 `bind` 的目的是将函数 `func` 绑定到 `obj` 上面去，也就是说，这时候 `func` 中的 `this` 就指向了 `obj`, 其中 `arguments` 被作为传递给 `func` 的参数被传入到 `func` 之中。\n\n#####　实例如下\n\n```javascript\nfunction greet(home) {\n  console.log(`hi my name is ${this.name}, my home is ${home}`);\n}\n// 使用 _.bind 进行函数绑定\n_.bind(greet, {name: '张宁宁'}, '山东');\n// hi my name is 张宁宁, my home is 山东\n```\n\n***\n\n关于使用 `bind` 的函数:\n\n使用 `bind` 的函数\n\n使用 `bind` 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。\n\n***\n\n\n\n源码如下:\n\n```javascript\n_.bind = function(func, context) {\n  // 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操\n  // nativeBind.appy\n  // 对于 es5 支持的 bind 方法接收两个参数\n  // func 以及 参数\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n  // 如果 func 不是一个函数的时候\n  // throw new TypeError('bind must be called on a function');\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n  // 使用 slice.call 用于截取 arguments\n  // 通过使用 slice.call 方法截取传入函数的参数\n    var args = slice.call(arguments, 2);\n    var bound =  function () {\n      // 返回一个 executeBpund 函数\n      // 使用 args 数组的 concat 方法用于连接数组\n      // 分别传入的值是 func, bound, context, this, args\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n```\n\n其中 `executeBound` 函数如下:\n\n```javascript\n// 这里面 boundFunc 是需要进行绑定的函数 \nvar executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n   // 如果 boundFunc 不在 callingContext 的原型链上\n  // 使用 apply 方法进行绑定\n  // 如果 callingContext 不在 boundFunc 的原型链上\n  // 这里的 callingContext 是指的 this 值\n  // 返回将 context 绑定到 sourceFunc 上面\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n   // 关于 baseCreate 函数\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n```\n\n关于 `baseCreate` 函数如下:\n\n```javascript\nlet Ctor = function () {};\nlet baseCreate = function(prototype) {\n  // 判断 prototype 是否是一个对象\n  if (!_.isObjject(prototype)) return {};\n  // 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数\n  if (nativeCreate) return nativeCreate(protoytpe);\n  Ctor.prototype = prototype;\n  // 创建一个函数的实例，这个函数的原型指向 prototype\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n} \n```\n\n上面的 `nativeCreate` 返回的是这个 `Object.create()` \n\n使用 `Object.create` 用来实现继承的关系\n\n```javascript\n// 使用 new 操作符的过程\nlet obj = new Constructor();\n// 创建一个新的对象\nlet obj = {};\n// 执行原型链接\nobj._proto_ = Constructor.prototype;\n// 将这个构造函数的 this 值指向新创建的这个新对象\nConstructor.call(obj);\n// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了\n```\n\n##### `partial`\n\n`partial(function, *arguments)`\n\n局部应用一个函数填充在任意个数的 `arguments`。\n\n##### 实例\n\n```javascript\nfunction add(a, b) {\n  return a + b;\n}\nlet particalAdd = _.partial(add, 3);\nparticalAdd(5); // 8\n// 这里的 5 填充了函数的第二个参数 b\n```\n\n自己写的函数:\n\n```javascript\nfunction partial(fn) {\n  // 获取到传入到 partial 函数中的参数\n  let partialArgs = Array.prototype.slice.call(arguments, 1);\n  // return 返回一个函数\n  return function(args) {\n    let fnArgs = Array.prototype.slice.call(arguments, 0);\n    // 将参数传入，执行 fn\n    fn(...partialArgs, ...fnArgs);\n  }\n}\n```\n\n\n\n##### 源码分析\n\n```javascript\n_.partial = function(func) {\n  let boundArgs = slice.call(arguments, 1);\n  return function bound () {\n    let position = 0;\n    let args = boundArgs.slice();\n    let length = args.length;\n    for (let i = 0; i < length; i++) {\n      // 在数组中使用 position ++\n      if (args[i] === _) args[i] = arguments[position++]; \n    }\n    whitle(position < arguments.length) args.push(arguments[position++]);\n    // 这时候的 args 中是包含了所有的参数\n    return executeBound(func, bound, this, this, args);\n  }\n}\n```\n\n关于 `executeBound` 函数上面有解释，这个函数的作用是:\n\n> Determines whether to execute a function as a constructor,   or a normal function with the provided arguments\n>\n> 决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。\n\n`memoize`\n\n使用 `memorize` 用来缓存函数计算的结果。\n\n`delay`\n\n使用 `delay` 用来实现对于函数延迟执行，代码如下:\n\n```javascript\nfunction delay(func, wait) {\n  // 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数\n  let args = Array.prototype.slice.call(arguments, 2);\n  // 返回等待 wait 时间之后的函数\n  return setTimeout(() => {\n    // 自己写的\n    func(args);\n    // 源码写的\n    // 使用 apply 的方法向函数 func 中传递 args 参数\n    return func.apply(null, args);\n  }, wait)\n}\n```\n\n`defer`\n\n`defer(function, *arguments)`\n\n使用 `defer` 的目的在于延迟调用 `function` 直到当前的调用栈被清空为止，其中 `arguments` 会被作为 `function` 的参数进行传入。\n\n类似于使用 `setTimeout(function () {}, 0)` 的延迟调用效果。\n\n实现的源码如下:\n\n```javascript\n_.defer = _.partial(_.delay, _, 1);\n```\n\n","slug":"underscore-js源码分析-十","published":1,"updated":"2017-12-07T14:08:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9f0030s33g76ev4pyi","content":"<h3 id=\"underscore-js-源码分析（十）\"><a href=\"#underscore-js-源码分析（十）\" class=\"headerlink\" title=\"underscore.js 源码分析（十）\"></a>underscore.js 源码分析（十）</h3><p>使用underscore.js 的 function 部分</p>\n<p><code>bind</code>  <code>bindall</code>  <code>partial</code>  <code>memorize</code>  <code>delay</code></p>\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a><code>bind</code></h5><p><code>_.bind(func, obj, *arguments)</code></p>\n<p>使用 <code>bind</code></p>\n<p>使用 <code>bind</code> 的目的是将函数 <code>func</code> 绑定到 <code>obj</code> 上面去，也就是说，这时候 <code>func</code> 中的 <code>this</code> 就指向了 <code>obj</code>, 其中 <code>arguments</code> 被作为传递给 <code>func</code> 的参数被传入到 <code>func</code> 之中。</p>\n<p>#####　实例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">home</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hi my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, my home is <span class=\"subst\">$&#123;home&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 _.bind 进行函数绑定</span></span><br><span class=\"line\">_.bind(greet, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>&#125;, <span class=\"string\">'山东'</span>);</span><br><span class=\"line\"><span class=\"comment\">// hi my name is 张宁宁, my home is 山东</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于使用 <code>bind</code> 的函数:</p>\n<p>使用 <code>bind</code> 的函数</p>\n<p>使用 <code>bind</code> 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。</p>\n<hr>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操</span></span><br><span class=\"line\">  <span class=\"comment\">// nativeBind.appy</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于 es5 支持的 bind 方法接收两个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// func 以及 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 如果 func 不是一个函数的时候</span></span><br><span class=\"line\">  <span class=\"comment\">// throw new TypeError('bind must be called on a function');</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 slice.call 用于截取 arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 slice.call 方法截取传入函数的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bound =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回一个 executeBpund 函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用 args 数组的 concat 方法用于连接数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 分别传入的值是 func, bound, context, this, args</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>executeBound</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里面 boundFunc 是需要进行绑定的函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果 boundFunc 不在 callingContext 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 apply 方法进行绑定</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 callingContext 不在 boundFunc 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里的 callingContext 是指的 this 值</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回将 context 绑定到 sourceFunc 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</span><br><span class=\"line\">   <span class=\"comment\">// 关于 baseCreate 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>baseCreate</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 prototype 是否是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObjject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(protoytpe);</span><br><span class=\"line\">  Ctor.prototype = prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个函数的实例，这个函数的原型指向 prototype</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">  Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>nativeCreate</code> 返回的是这个 <code>Object.create()</code> </p>\n<p>使用 <code>Object.create</code> 用来实现继承的关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 new 操作符的过程</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">// 创建一个新的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 执行原型链接</span></span><br><span class=\"line\">obj._proto_ = Constructor.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 将这个构造函数的 this 值指向新创建的这个新对象</span></span><br><span class=\"line\">Constructor.call(obj);</span><br><span class=\"line\"><span class=\"comment\">// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"partial\"><a href=\"#partial\" class=\"headerlink\" title=\"partial\"></a><code>partial</code></h5><p><code>partial(function, *arguments)</code></p>\n<p>局部应用一个函数填充在任意个数的 <code>arguments</code>。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> particalAdd = _.partial(add, <span class=\"number\">3</span>);</span><br><span class=\"line\">particalAdd(<span class=\"number\">5</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 5 填充了函数的第二个参数 b</span></span><br></pre></td></tr></table></figure>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入到 partial 函数中的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> partialArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// return 返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fnArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将参数传入，执行 fn</span></span><br><span class=\"line\">    fn(...partialArgs, ...fnArgs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = boundArgs.slice();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在数组中使用 position ++</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args[i] === _) args[i] = <span class=\"built_in\">arguments</span>[position++]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    whitle(position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</span><br><span class=\"line\">    <span class=\"comment\">// 这时候的 args 中是包含了所有的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>executeBound</code> 函数上面有解释，这个函数的作用是:</p>\n<blockquote>\n<p>Determines whether to execute a function as a constructor,   or a normal function with the provided arguments</p>\n<p>决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。</p>\n</blockquote>\n<p><code>memoize</code></p>\n<p>使用 <code>memorize</code> 用来缓存函数计算的结果。</p>\n<p><code>delay</code></p>\n<p>使用 <code>delay</code> 用来实现对于函数延迟执行，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回等待 wait 时间之后的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己写的</span></span><br><span class=\"line\">    func(args);</span><br><span class=\"line\">    <span class=\"comment\">// 源码写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 apply 的方法向函数 func 中传递 args 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>defer</code></p>\n<p><code>defer(function, *arguments)</code></p>\n<p>使用 <code>defer</code> 的目的在于延迟调用 <code>function</code> 直到当前的调用栈被清空为止，其中 <code>arguments</code> 会被作为 <code>function</code> 的参数进行传入。</p>\n<p>类似于使用 <code>setTimeout(function () {}, 0)</code> 的延迟调用效果。</p>\n<p>实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析（十）\"><a href=\"#underscore-js-源码分析（十）\" class=\"headerlink\" title=\"underscore.js 源码分析（十）\"></a>underscore.js 源码分析（十）</h3><p>使用underscore.js 的 function 部分</p>\n<p><code>bind</code>  <code>bindall</code>  <code>partial</code>  <code>memorize</code>  <code>delay</code></p>\n<h5 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a><code>bind</code></h5><p><code>_.bind(func, obj, *arguments)</code></p>\n<p>使用 <code>bind</code></p>\n<p>使用 <code>bind</code> 的目的是将函数 <code>func</code> 绑定到 <code>obj</code> 上面去，也就是说，这时候 <code>func</code> 中的 <code>this</code> 就指向了 <code>obj</code>, 其中 <code>arguments</code> 被作为传递给 <code>func</code> 的参数被传入到 <code>func</code> 之中。</p>\n<p>#####　实例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">home</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hi my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>, my home is <span class=\"subst\">$&#123;home&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用 _.bind 进行函数绑定</span></span><br><span class=\"line\">_.bind(greet, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>&#125;, <span class=\"string\">'山东'</span>);</span><br><span class=\"line\"><span class=\"comment\">// hi my name is 张宁宁, my home is 山东</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>关于使用 <code>bind</code> 的函数:</p>\n<p>使用 <code>bind</code> 的函数</p>\n<p>使用 <code>bind</code> 函数接收两个参数，第一个参数表示需要进行绑定的变量，第二个参数表示传递给函数的参数。</p>\n<hr>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首先检查是否支持 es5 的bind 方法, 如果支持， 使用 nativeBind 进行绑定操</span></span><br><span class=\"line\">  <span class=\"comment\">// nativeBind.appy</span></span><br><span class=\"line\">  <span class=\"comment\">// 对于 es5 支持的 bind 方法接收两个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// func 以及 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind &amp;&amp; func.bind === nativeBind) <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 如果 func 不是一个函数的时候</span></span><br><span class=\"line\">  <span class=\"comment\">// throw new TypeError('bind must be called on a function');</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isFunction(func)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Bind must be called on a function'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 slice.call 用于截取 arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过使用 slice.call 方法截取传入函数的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bound =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回一个 executeBpund 函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用 args 数组的 concat 方法用于连接数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 分别传入的值是 func, bound, context, this, args</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> executeBound(func, bound, context, <span class=\"keyword\">this</span>, args.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>executeBound</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里面 boundFunc 是需要进行绑定的函数 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> executeBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sourceFunc, boundFunc, context, callingContext, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 如果 boundFunc 不在 callingContext 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 apply 方法进行绑定</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 callingContext 不在 boundFunc 的原型链上</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里的 callingContext 是指的 this 值</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回将 context 绑定到 sourceFunc 上面</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(callingContext <span class=\"keyword\">instanceof</span> boundFunc)) <span class=\"keyword\">return</span> sourceFunc.apply(context, args);</span><br><span class=\"line\">   <span class=\"comment\">// 关于 baseCreate 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = baseCreate(sourceFunc.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = sourceFunc.apply(self, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(result)) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>baseCreate</code> 函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 prototype 是否是一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObjject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 如果nativeCreate 存在的话, 返回 nativeCreate(prototype) 这个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nativeCreate) <span class=\"keyword\">return</span> nativeCreate(protoytpe);</span><br><span class=\"line\">  Ctor.prototype = prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个函数的实例，这个函数的原型指向 prototype</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">  Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的 <code>nativeCreate</code> 返回的是这个 <code>Object.create()</code> </p>\n<p>使用 <code>Object.create</code> 用来实现继承的关系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 new 操作符的过程</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">// 创建一个新的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 执行原型链接</span></span><br><span class=\"line\">obj._proto_ = Constructor.prototype;</span><br><span class=\"line\"><span class=\"comment\">// 将这个构造函数的 this 值指向新创建的这个新对象</span></span><br><span class=\"line\">Constructor.call(obj);</span><br><span class=\"line\"><span class=\"comment\">// 这样在 obj 中我们就能愉快的使用在 Constructor 中通过 this 值创建的新对象了</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"partial\"><a href=\"#partial\" class=\"headerlink\" title=\"partial\"></a><code>partial</code></h5><p><code>partial(function, *arguments)</code></p>\n<p>局部应用一个函数填充在任意个数的 <code>arguments</code>。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> particalAdd = _.partial(add, <span class=\"number\">3</span>);</span><br><span class=\"line\">particalAdd(<span class=\"number\">5</span>); <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 5 填充了函数的第二个参数 b</span></span><br></pre></td></tr></table></figure>\n<p>自己写的函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partial</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到传入到 partial 函数中的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> partialArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// return 返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fnArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将参数传入，执行 fn</span></span><br><span class=\"line\">    fn(...partialArgs, ...fnArgs);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.partial = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> boundArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bound</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = boundArgs.slice();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = args.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在数组中使用 position ++</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args[i] === _) args[i] = <span class=\"built_in\">arguments</span>[position++]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    whitle(position &lt; <span class=\"built_in\">arguments</span>.length) args.push(<span class=\"built_in\">arguments</span>[position++]);</span><br><span class=\"line\">    <span class=\"comment\">// 这时候的 args 中是包含了所有的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> executeBound(func, bound, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 <code>executeBound</code> 函数上面有解释，这个函数的作用是:</p>\n<blockquote>\n<p>Determines whether to execute a function as a constructor,   or a normal function with the provided arguments</p>\n<p>决定是否构建一个函数作为构造函数，或者运行一个给定参数的普通函数。</p>\n</blockquote>\n<p><code>memoize</code></p>\n<p>使用 <code>memorize</code> 用来缓存函数计算的结果。</p>\n<p><code>delay</code></p>\n<p>使用 <code>delay</code> 用来实现对于函数延迟执行，代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过调用 Array.prototype.slice.call 的方法进行获得传递的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 返回等待 wait 时间之后的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己写的</span></span><br><span class=\"line\">    func(args);</span><br><span class=\"line\">    <span class=\"comment\">// 源码写的</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 apply 的方法向函数 func 中传递 args 参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> func.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">  &#125;, wait)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>defer</code></p>\n<p><code>defer(function, *arguments)</code></p>\n<p>使用 <code>defer</code> 的目的在于延迟调用 <code>function</code> 直到当前的调用栈被清空为止，其中 <code>arguments</code> 会被作为 <code>function</code> 的参数进行传入。</p>\n<p>类似于使用 <code>setTimeout(function () {}, 0)</code> 的延迟调用效果。</p>\n<p>实现的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.defer = _.partial(_.delay, _, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十二)","date":"2017-12-10T12:14:18.000Z","_content":"\n### underscore.js 源码分析(十二)\n\n`wrap` `negate` `compose`\n\n#### `wrap`\n\n##### 实例\n\n`_.wrap(function, wrapper)`\n\n使用 `wrap` 的目的在于将函数 `function` 作为第一个参数传递进入 `wrapper` 之中, 从而在 `wrapper` 中在不同的事件，不同的代码，根据不同的条件执行 `function` 函数。\n\n实例:\n\n```javascript\nfunction hello(name) {\n  console.log(`hello my name is ${name}`);\n}\nlet sayHello = _.wrap(hello, function (func) {\n  func('张宁宁');\n});\nsayHello(); // hello my name is 张宁宁\n```\n\n##### 源码分析\n\n使用 `_.partial` 函数实现的参数替换:\n\n```javascript\n_.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n}\n```\n\n#### `negate`\n\n返回 `negate` 的否定版本:\n\n##### 源码分析\n\n```\n// predicate 迭代函数\n_.negate = function (predicate) {\n  return funciton () {\n    return !predicate.apply(this, arguments);\n  }\n}\n```\n\n#### `compose`\n\n`compose(*functions)`\n\n`compose` 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。\n\n##### 实例\n\n```\nfunction sayHello(word) {\n  console.log(`hello, my name UpperWorlds is ${word}`)\n}\nfunction toUpper(word) {\n  return word.toUpperCase();\n}\nlet composeFn = _.compose(sayHello, toUpper);\ncomposeFn('zhangningning'); // hello my name UpperWorlds is ZHANGNINGNING;\n```\n\n\n\n##### 源码分析\n\n自己写的部分代码:\n\n哪个好？？\n\n```javascript\nfunction compose() {\n  let fns = Array.prototype.slice.call(arguments);\n  reurn function (args) {\n    fns.reduceRight((preFn, nextFn) => {\n      return nextFn(preFn);\n    }, args);\n  }\n}\n```\n\n源码如下:\n\n```javascript\n_.compose = function () {\n  let args = argumemts;\n  let start = args.length - 1;\n  return function () {\n    let i = start;\n    // 使用 call 以及 apply 进行参数传递\n    let result = args[start].apply(this, arguments);\n    // 使用 while 进行递减\n    while(i--) result = args[i].call(this, result);\n    return result;\n  }\n}\n```\n\n\n\n\n\n","source":"_posts/underscore-js源码分析-十二.md","raw":"---\ntitle: underscore.js源码分析(十二)\ndate: 2017-12-10 20:14:18\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十二)\n\n`wrap` `negate` `compose`\n\n#### `wrap`\n\n##### 实例\n\n`_.wrap(function, wrapper)`\n\n使用 `wrap` 的目的在于将函数 `function` 作为第一个参数传递进入 `wrapper` 之中, 从而在 `wrapper` 中在不同的事件，不同的代码，根据不同的条件执行 `function` 函数。\n\n实例:\n\n```javascript\nfunction hello(name) {\n  console.log(`hello my name is ${name}`);\n}\nlet sayHello = _.wrap(hello, function (func) {\n  func('张宁宁');\n});\nsayHello(); // hello my name is 张宁宁\n```\n\n##### 源码分析\n\n使用 `_.partial` 函数实现的参数替换:\n\n```javascript\n_.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n}\n```\n\n#### `negate`\n\n返回 `negate` 的否定版本:\n\n##### 源码分析\n\n```\n// predicate 迭代函数\n_.negate = function (predicate) {\n  return funciton () {\n    return !predicate.apply(this, arguments);\n  }\n}\n```\n\n#### `compose`\n\n`compose(*functions)`\n\n`compose` 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。\n\n##### 实例\n\n```\nfunction sayHello(word) {\n  console.log(`hello, my name UpperWorlds is ${word}`)\n}\nfunction toUpper(word) {\n  return word.toUpperCase();\n}\nlet composeFn = _.compose(sayHello, toUpper);\ncomposeFn('zhangningning'); // hello my name UpperWorlds is ZHANGNINGNING;\n```\n\n\n\n##### 源码分析\n\n自己写的部分代码:\n\n哪个好？？\n\n```javascript\nfunction compose() {\n  let fns = Array.prototype.slice.call(arguments);\n  reurn function (args) {\n    fns.reduceRight((preFn, nextFn) => {\n      return nextFn(preFn);\n    }, args);\n  }\n}\n```\n\n源码如下:\n\n```javascript\n_.compose = function () {\n  let args = argumemts;\n  let start = args.length - 1;\n  return function () {\n    let i = start;\n    // 使用 call 以及 apply 进行参数传递\n    let result = args[start].apply(this, arguments);\n    // 使用 while 进行递减\n    while(i--) result = args[i].call(this, result);\n    return result;\n  }\n}\n```\n\n\n\n\n\n","slug":"underscore-js源码分析-十二","published":1,"updated":"2017-12-11T13:12:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9h0032s33g9ss4qo50","content":"<h3 id=\"underscore-js-源码分析-十二\"><a href=\"#underscore-js-源码分析-十二\" class=\"headerlink\" title=\"underscore.js 源码分析(十二)\"></a>underscore.js 源码分析(十二)</h3><p><code>wrap</code> <code>negate</code> <code>compose</code></p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a><code>wrap</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.wrap(function, wrapper)</code></p>\n<p>使用 <code>wrap</code> 的目的在于将函数 <code>function</code> 作为第一个参数传递进入 <code>wrapper</code> 之中, 从而在 <code>wrapper</code> 中在不同的事件，不同的代码，根据不同的条件执行 <code>function</code> 函数。</p>\n<p>实例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = _.wrap(hello, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  func(<span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// hello my name is 张宁宁</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.partial</code> 函数实现的参数替换:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.wrap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, wrapper</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a><code>negate</code></h4><p>返回 <code>negate</code> 的否定版本:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// predicate 迭代函数</span><br><span class=\"line\">_.negate = function (predicate) &#123;</span><br><span class=\"line\">  return funciton () &#123;</span><br><span class=\"line\">    return !predicate.apply(this, arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a><code>compose</code></h4><p><code>compose(*functions)</code></p>\n<p><code>compose</code> 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(word) &#123;</span><br><span class=\"line\">  console.log(`hello, my name UpperWorlds is $&#123;word&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function toUpper(word) &#123;</span><br><span class=\"line\">  return word.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let composeFn = _.compose(sayHello, toUpper);</span><br><span class=\"line\">composeFn(&apos;zhangningning&apos;); // hello my name UpperWorlds is ZHANGNINGNING;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的部分代码:</p>\n<p>哪个好？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  reurn <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    fns.reduceRight(<span class=\"function\">(<span class=\"params\">preFn, nextFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextFn(preFn);</span><br><span class=\"line\">    &#125;, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = argumemts;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = args.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = start;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 call 以及 apply 进行参数传递</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 进行递减</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十二\"><a href=\"#underscore-js-源码分析-十二\" class=\"headerlink\" title=\"underscore.js 源码分析(十二)\"></a>underscore.js 源码分析(十二)</h3><p><code>wrap</code> <code>negate</code> <code>compose</code></p>\n<h4 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a><code>wrap</code></h4><h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.wrap(function, wrapper)</code></p>\n<p>使用 <code>wrap</code> 的目的在于将函数 <code>function</code> 作为第一个参数传递进入 <code>wrapper</code> 之中, 从而在 <code>wrapper</code> 中在不同的事件，不同的代码，根据不同的条件执行 <code>function</code> 函数。</p>\n<p>实例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sayHello = _.wrap(hello, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  func(<span class=\"string\">'张宁宁'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">sayHello(); <span class=\"comment\">// hello my name is 张宁宁</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.partial</code> 函数实现的参数替换:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.wrap = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">func, wrapper</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.partial(wrapper, func);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"negate\"><a href=\"#negate\" class=\"headerlink\" title=\"negate\"></a><code>negate</code></h4><p>返回 <code>negate</code> 的否定版本:</p>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// predicate 迭代函数</span><br><span class=\"line\">_.negate = function (predicate) &#123;</span><br><span class=\"line\">  return funciton () &#123;</span><br><span class=\"line\">    return !predicate.apply(this, arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"compose\"><a href=\"#compose\" class=\"headerlink\" title=\"compose\"></a><code>compose</code></h4><p><code>compose(*functions)</code></p>\n<p><code>compose</code> 用于函数的组合, 将一个函数的返回值作为另外一个函数的参数。</p>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(word) &#123;</span><br><span class=\"line\">  console.log(`hello, my name UpperWorlds is $&#123;word&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function toUpper(word) &#123;</span><br><span class=\"line\">  return word.toUpperCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let composeFn = _.compose(sayHello, toUpper);</span><br><span class=\"line\">composeFn(&apos;zhangningning&apos;); // hello my name UpperWorlds is ZHANGNINGNING;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-2\"><a href=\"#源码分析-2\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>自己写的部分代码:</p>\n<p>哪个好？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  reurn <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    fns.reduceRight(<span class=\"function\">(<span class=\"params\">preFn, nextFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextFn(preFn);</span><br><span class=\"line\">    &#125;, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.compose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = argumemts;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = args.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = start;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 call 以及 apply 进行参数传递</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = args[start].apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 while 进行递减</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--) result = args[i].call(<span class=\"keyword\">this</span>, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十一)","date":"2017-12-07T14:09:15.000Z","_content":"\n### underscore.js 源码分析(十一)\n\n`throttle`  `debounce`  `once` `after` `before`\n\n#### `throttle`\n\n函数节流\n\n`_.throttle(function, wait, [options])`\n\n使用 `throttle` 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 `wait` 毫秒调用一次这个函数。\n\n##### 源码分析\n\n```javascript\n/*\n* @description throttle 用于函数节流\n* @param func 运行的函数\n* @param wait 等待的毫秒数\n* @param options\n*/\n// previous 这里的意思的记录下上次记录下上次的时间\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      // 这里 previous 的作用\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      // 记录下被调用的时刻\n      if (!previous && options.leading === false) previous = now;\n      // 当 previous 等于 now 的时候 remaining = wait\n      // 记录下等待的时间和 now - previous 的差值\n      // 不会执行下面的 if else 函数\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果 remaining <= 0\n      // 第一次函数执行的时候被调用，因为这个时候 now >> wait remaining <= 0\n      if (remaining <= 0 || remaining > wait) {\n        // 当超出等待时间之后调用的时候\n        // 返回调用的结果，清除 timeout\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        // 获取到 func 执行之后的结果\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n        // 如果 timeout 为 null\n        // 开启一个新的队列等待\n        // 如果 options.trailing === false, 表示禁用最后一次执行\n      } else if (!timeout && options.trailing !== false) {\n        // 如果没有超过等待时间\n        // remaining 时间之后调用 later函数\n        // 对于在一段时间内应用同一个函数的时候，只是改变的later 函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n首先，需要明白一点，函数式编程同样可以首先数据的共享。\n\n```\nfunction getIndex() {\n  let index = 0;\n  // return 返回的是一个函数\n  return function () {\n    index++;\n    console.log(index);\n  }\n}\n\nlet getIndexFn = getIndex();\n// 因为在个过程中，通过getIndex 返回的是一个函数\n// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次\ngetIndexFn(); // 1\ngetIndexFn(); // 2\n```\n\n练习:\n\n```javascript\nfunction throttle (func, wait, options) {\n  let context, args, result;\n  let timeout = null;\n  let previous = 0;\n  if (!options) options = {};\n  let later = funciton () {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n  };\n  return funcion () {\n    let now = now();\n    if (!previous && options.leading === false) previous = now;\n    let remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 如果第一次执行\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        cleatTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  }\n}\n```\n\n#### `debounce`\n\n`_.debounce(function, wait, [immediate])`\n\n`debounce` 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 `wait` 毫秒之后进行执行。\n\n当函数重复调用的时候，函数执行只是发生在最后一次调用的 `wait` 毫秒之后进行执行。\n\n自己写的:\n\n```javascript\nfunction debounce(func, wait, immediate) {\n  // 定义执行上下文, 参数， 结果\n  let context, args, result;\n  let timeout = null;\n  let previous 0;\n  let remainding = 0;\n  immediate = immediate || false;\n  let later = function () {\n    result = func.apply(context, args);\n    timeout = null;\n    context = args = null;\n  };\n  return function () {\n    let now = _.now();\n    remainding = now - previous;\n    context = this;\n    args = arguments;\n    // 保证使用 immediate 的时候立即执行函数\n    if (immediate && remainding > wait) {\n      previous = _.now();\n      result = func.apply(context, args);\n      timeout = null;\n      context = args = null;\n    } else if (!immediate) {\n      // if timeout\n      // clearTimeout 进行清除 timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      timeout = setTimeout(later, wait);\n    }\n  }\n}\n```\n\n######  源码解析\n\n```javascript\n_.debounce = function(func, wait, immediate) {\n  let timeout, args, context, timestamp, result;\n  let later = function () {\n    let last = _.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    // 这里面继续调用的时候改变的只是这个\n    timestamp = _.now();\n    let callNow = imemediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n```\n\n如下流程图如下:\n\n```flow\nst=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e\n```\n\n关于 `later` 函数如下:\n\n```\nlet later = function () {\n  let last = now() - timestamp;\n  if (last < wait && last >= 0) {\n    timeout = setTimeout(later, last - wait);\n  } else {\n    timeout = null;\n    if (!immediate) {\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  }\n}\n```\n\n这一部分实现的原理是:\n\n假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 `wait` 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 `wait` 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 `later` 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了`wait` 时间之后被调用。\n\n#### `once`\n\n创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。\n\n使用 `once` 是当 `before` 方法中 `count` 等于2的情况下进行执行的函数;\n\n```javascript\n// 向 befor 函数中传递参数为 2\n_.once = _.partial(_.before, 2);\n```\n\n\n\n#### `before`\n\n`_.before(count, function)`\n\n创建一个函数，调用不超过 `count` 次, 当`count`已经被达到的时候，最后一次调用的结果被记住并被返回。\n\n自己写的:\n\n```javascript\n/*\n* @description before 用于返回 调用不超过 count 次数的函数调用\n* @param {Numbet} count 调用函数的次数\n* @param {function} func 被调用的函数\n*/\nfunction before(count, func) {\n  let index = 1;\n  let memo;\n  return function () {\n    if (index < count) {\n      memo = func.apply(this, arguments);\n      index++;\n    }\n    return memo;\n  }\n}\n```\n\n源码分析:\n\n```javascript\n_.before = function (times, func) {\n  let memo;\n  return function () {\n    // --times\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    // 如果 times <= 1 将 func 重置为 null\n    if (times <= 1) func = null;\n    return memo;\n  }\n}\n```\n\n#### `after`\n\n`_.after(count, function)`\n\n使用 `_.after` 的作用是创建一个函数，只有调用 `count` 次之后才能得到效果。\n\n```javascript\n/*\n* @description after 用于表示 after 函数\n* @param {Number} 需要的调用次数\n* @param {function} func 规定调用次数之后的调用函数\n*/\nfunction after (times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  }\n}\n```\n\n","source":"_posts/underscore-js源码分析-十一.md","raw":"---\ntitle: underscore.js源码分析(十一)\ndate: 2017-12-07 22:09:15\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十一)\n\n`throttle`  `debounce`  `once` `after` `before`\n\n#### `throttle`\n\n函数节流\n\n`_.throttle(function, wait, [options])`\n\n使用 `throttle` 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 `wait` 毫秒调用一次这个函数。\n\n##### 源码分析\n\n```javascript\n/*\n* @description throttle 用于函数节流\n* @param func 运行的函数\n* @param wait 等待的毫秒数\n* @param options\n*/\n// previous 这里的意思的记录下上次记录下上次的时间\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      // 这里 previous 的作用\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      // 记录下被调用的时刻\n      if (!previous && options.leading === false) previous = now;\n      // 当 previous 等于 now 的时候 remaining = wait\n      // 记录下等待的时间和 now - previous 的差值\n      // 不会执行下面的 if else 函数\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果 remaining <= 0\n      // 第一次函数执行的时候被调用，因为这个时候 now >> wait remaining <= 0\n      if (remaining <= 0 || remaining > wait) {\n        // 当超出等待时间之后调用的时候\n        // 返回调用的结果，清除 timeout\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        // 获取到 func 执行之后的结果\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n        // 如果 timeout 为 null\n        // 开启一个新的队列等待\n        // 如果 options.trailing === false, 表示禁用最后一次执行\n      } else if (!timeout && options.trailing !== false) {\n        // 如果没有超过等待时间\n        // remaining 时间之后调用 later函数\n        // 对于在一段时间内应用同一个函数的时候，只是改变的later 函数\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n```\n\n首先，需要明白一点，函数式编程同样可以首先数据的共享。\n\n```\nfunction getIndex() {\n  let index = 0;\n  // return 返回的是一个函数\n  return function () {\n    index++;\n    console.log(index);\n  }\n}\n\nlet getIndexFn = getIndex();\n// 因为在个过程中，通过getIndex 返回的是一个函数\n// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次\ngetIndexFn(); // 1\ngetIndexFn(); // 2\n```\n\n练习:\n\n```javascript\nfunction throttle (func, wait, options) {\n  let context, args, result;\n  let timeout = null;\n  let previous = 0;\n  if (!options) options = {};\n  let later = funciton () {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n  };\n  return funcion () {\n    let now = now();\n    if (!previous && options.leading === false) previous = now;\n    let remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 如果第一次执行\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        cleatTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  }\n}\n```\n\n#### `debounce`\n\n`_.debounce(function, wait, [immediate])`\n\n`debounce` 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 `wait` 毫秒之后进行执行。\n\n当函数重复调用的时候，函数执行只是发生在最后一次调用的 `wait` 毫秒之后进行执行。\n\n自己写的:\n\n```javascript\nfunction debounce(func, wait, immediate) {\n  // 定义执行上下文, 参数， 结果\n  let context, args, result;\n  let timeout = null;\n  let previous 0;\n  let remainding = 0;\n  immediate = immediate || false;\n  let later = function () {\n    result = func.apply(context, args);\n    timeout = null;\n    context = args = null;\n  };\n  return function () {\n    let now = _.now();\n    remainding = now - previous;\n    context = this;\n    args = arguments;\n    // 保证使用 immediate 的时候立即执行函数\n    if (immediate && remainding > wait) {\n      previous = _.now();\n      result = func.apply(context, args);\n      timeout = null;\n      context = args = null;\n    } else if (!immediate) {\n      // if timeout\n      // clearTimeout 进行清除 timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      timeout = setTimeout(later, wait);\n    }\n  }\n}\n```\n\n######  源码解析\n\n```javascript\n_.debounce = function(func, wait, immediate) {\n  let timeout, args, context, timestamp, result;\n  let later = function () {\n    let last = _.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    // 这里面继续调用的时候改变的只是这个\n    timestamp = _.now();\n    let callNow = imemediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n```\n\n如下流程图如下:\n\n```flow\nst=>start: bounce;\ninit=>operation: 初始化context, args, timeout, timeStamp, result, 定义later函数\nrt=>operation: 记录当前调用时间 timeStamp = _.now(), \ncallNow = imemediate && !timeout\nisTimeout=>condition: !timeout\niscallNow=>condition: callNow 为 true\nsetTimeout=>operation: setTimeout(later, wait);\ncond=>condition: Yes or No?\nreplyFn=>operation: 执行函数,\nresult = func.apply(context, args);\ncontext = args = null;\ne=>end: return result\nst->init->rt->isTimeout->e\nisTimeout(yes, right)->setTimeout->iscallNow\nisTimeout(no)->iscallNow\niscallNow(yes, right)->replyFn->e\niscallNow(no)->e\ncond(no)->io\ncond(yes)->e\n```\n\n关于 `later` 函数如下:\n\n```\nlet later = function () {\n  let last = now() - timestamp;\n  if (last < wait && last >= 0) {\n    timeout = setTimeout(later, last - wait);\n  } else {\n    timeout = null;\n    if (!immediate) {\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  }\n}\n```\n\n这一部分实现的原理是:\n\n假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 `wait` 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 `wait` 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 `later` 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了`wait` 时间之后被调用。\n\n#### `once`\n\n创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。\n\n使用 `once` 是当 `before` 方法中 `count` 等于2的情况下进行执行的函数;\n\n```javascript\n// 向 befor 函数中传递参数为 2\n_.once = _.partial(_.before, 2);\n```\n\n\n\n#### `before`\n\n`_.before(count, function)`\n\n创建一个函数，调用不超过 `count` 次, 当`count`已经被达到的时候，最后一次调用的结果被记住并被返回。\n\n自己写的:\n\n```javascript\n/*\n* @description before 用于返回 调用不超过 count 次数的函数调用\n* @param {Numbet} count 调用函数的次数\n* @param {function} func 被调用的函数\n*/\nfunction before(count, func) {\n  let index = 1;\n  let memo;\n  return function () {\n    if (index < count) {\n      memo = func.apply(this, arguments);\n      index++;\n    }\n    return memo;\n  }\n}\n```\n\n源码分析:\n\n```javascript\n_.before = function (times, func) {\n  let memo;\n  return function () {\n    // --times\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    // 如果 times <= 1 将 func 重置为 null\n    if (times <= 1) func = null;\n    return memo;\n  }\n}\n```\n\n#### `after`\n\n`_.after(count, function)`\n\n使用 `_.after` 的作用是创建一个函数，只有调用 `count` 次之后才能得到效果。\n\n```javascript\n/*\n* @description after 用于表示 after 函数\n* @param {Number} 需要的调用次数\n* @param {function} func 规定调用次数之后的调用函数\n*/\nfunction after (times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  }\n}\n```\n\n","slug":"underscore-js源码分析-十一","published":1,"updated":"2017-12-09T09:31:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9j0035s33ghk7qm0zn","content":"<h3 id=\"underscore-js-源码分析-十一\"><a href=\"#underscore-js-源码分析-十一\" class=\"headerlink\" title=\"underscore.js 源码分析(十一)\"></a>underscore.js 源码分析(十一)</h3><p><code>throttle</code>  <code>debounce</code>  <code>once</code> <code>after</code> <code>before</code></p>\n<h4 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a><code>throttle</code></h4><p>函数节流</p>\n<p><code>_.throttle(function, wait, [options])</code></p>\n<p>使用 <code>throttle</code> 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 <code>wait</code> 毫秒调用一次这个函数。</p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description throttle 用于函数节流</span></span><br><span class=\"line\"><span class=\"comment\">* @param func 运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param wait 等待的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">* @param options</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// previous 这里的意思的记录下上次记录下上次的时间</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里 previous 的作用</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 记录下被调用的时刻</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 当 previous 等于 now 的时候 remaining = wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 记录下等待的时间和 now - previous 的差值</span></span><br><span class=\"line\">      <span class=\"comment\">// 不会执行下面的 if else 函数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 第一次函数执行的时候被调用，因为这个时候 now &gt;&gt; wait remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当超出等待时间之后调用的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回调用的结果，清除 timeout</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 func 执行之后的结果</span></span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 timeout 为 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启一个新的队列等待</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 options.trailing === false, 表示禁用最后一次执行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有超过等待时间</span></span><br><span class=\"line\">        <span class=\"comment\">// remaining 时间之后调用 later函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于在一段时间内应用同一个函数的时候，只是改变的later 函数</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，需要明白一点，函数式编程同样可以首先数据的共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getIndex() &#123;</span><br><span class=\"line\">  let index = 0;</span><br><span class=\"line\">  // return 返回的是一个函数</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let getIndexFn = getIndex();</span><br><span class=\"line\">// 因为在个过程中，通过getIndex 返回的是一个函数</span><br><span class=\"line\">// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次</span><br><span class=\"line\">getIndexFn(); // 1</span><br><span class=\"line\">getIndexFn(); // 2</span><br></pre></td></tr></table></figure>\n<p>练习:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = funciton () &#123;</span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcion () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果第一次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        cleatTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a><code>debounce</code></h4><p><code>_.debounce(function, wait, [immediate])</code></p>\n<p><code>debounce</code> 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>当函数重复调用的时候，函数执行只是发生在最后一次调用的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义执行上下文, 参数， 结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> remainding = <span class=\"number\">0</span>;</span><br><span class=\"line\">  immediate = immediate || <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = _.now();</span><br><span class=\"line\">    remainding = now - previous;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保证使用 immediate 的时候立即执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate &amp;&amp; remainding &gt; wait) &#123;</span><br><span class=\"line\">      previous = _.now();</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if timeout</span></span><br><span class=\"line\">      <span class=\"comment\">// clearTimeout 进行清除 timeout</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      timeout = setTimeout(later, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = _.now() - timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里面继续调用的时候改变的只是这个</span></span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callNow = imemediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下流程图如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: bounce;</span><br><span class=\"line\">init=&gt;operation: 初始化context, args, timeout, timeStamp, result, 定义later函数</span><br><span class=\"line\">rt=&gt;operation: 记录当前调用时间 timeStamp = _.now(), </span><br><span class=\"line\">callNow = imemediate &amp;&amp; !timeout</span><br><span class=\"line\">isTimeout=&gt;condition: !timeout</span><br><span class=\"line\">iscallNow=&gt;condition: callNow 为 true</span><br><span class=\"line\">setTimeout=&gt;operation: setTimeout(later, wait);</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">replyFn=&gt;operation: 执行函数,</span><br><span class=\"line\">result = func.apply(context, args);</span><br><span class=\"line\">context = args = null;</span><br><span class=\"line\">e=&gt;end: return result</span><br><span class=\"line\">st-&gt;init-&gt;rt-&gt;isTimeout-&gt;e</span><br><span class=\"line\">isTimeout(yes, right)-&gt;setTimeout-&gt;iscallNow</span><br><span class=\"line\">isTimeout(no)-&gt;iscallNow</span><br><span class=\"line\">iscallNow(yes, right)-&gt;replyFn-&gt;e</span><br><span class=\"line\">iscallNow(no)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;io</span><br><span class=\"line\">cond(yes)-&gt;e</span><br></pre></td></tr></table></figure>\n<p>关于 <code>later</code> 函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let later = function () &#123;</span><br><span class=\"line\">  let last = now() - timestamp;</span><br><span class=\"line\">  if (last &lt; wait &amp;&amp; last &gt;= 0) &#123;</span><br><span class=\"line\">    timeout = setTimeout(later, last - wait);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    timeout = null;</span><br><span class=\"line\">    if (!immediate) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      if (!timeout) context = args = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一部分实现的原理是:</p>\n<p>假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 <code>wait</code> 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 <code>wait</code> 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 <code>later</code> 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了<code>wait</code> 时间之后被调用。</p>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a><code>once</code></h4><p>创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。</p>\n<p>使用 <code>once</code> 是当 <code>before</code> 方法中 <code>count</code> 等于2的情况下进行执行的函数;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向 befor 函数中传递参数为 2</span></span><br><span class=\"line\">_.once = _.partial(_.before, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>before</code></h4><p><code>_.before(count, function)</code></p>\n<p>创建一个函数，调用不超过 <code>count</code> 次, 当<code>count</code>已经被达到的时候，最后一次调用的结果被记住并被返回。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description before 用于返回 调用不超过 count 次数的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Numbet&#125; count 调用函数的次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 被调用的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">before</span>(<span class=\"params\">count, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; count) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// --times</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 times &lt;= 1 将 func 重置为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a><code>after</code></h4><p><code>_.after(count, function)</code></p>\n<p>使用 <code>_.after</code> 的作用是创建一个函数，只有调用 <code>count</code> 次之后才能得到效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description after 用于表示 after 函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Number&#125; 需要的调用次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 规定调用次数之后的调用函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">after</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十一\"><a href=\"#underscore-js-源码分析-十一\" class=\"headerlink\" title=\"underscore.js 源码分析(十一)\"></a>underscore.js 源码分析(十一)</h3><p><code>throttle</code>  <code>debounce</code>  <code>once</code> <code>after</code> <code>before</code></p>\n<h4 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a><code>throttle</code></h4><p>函数节流</p>\n<p><code>_.throttle(function, wait, [options])</code></p>\n<p>使用 <code>throttle</code> 函数用于节流操作, 目的是对于重复执行的函数，最多每隔 <code>wait</code> 毫秒调用一次这个函数。</p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description throttle 用于函数节流</span></span><br><span class=\"line\"><span class=\"comment\">* @param func 运行的函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param wait 等待的毫秒数</span></span><br><span class=\"line\"><span class=\"comment\">* @param options</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// previous 这里的意思的记录下上次记录下上次的时间</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里 previous 的作用</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 记录下被调用的时刻</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">      <span class=\"comment\">// 当 previous 等于 now 的时候 remaining = wait</span></span><br><span class=\"line\">      <span class=\"comment\">// 记录下等待的时间和 now - previous 的差值</span></span><br><span class=\"line\">      <span class=\"comment\">// 不会执行下面的 if else 函数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"comment\">// 第一次函数执行的时候被调用，因为这个时候 now &gt;&gt; wait remaining &lt;= 0</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当超出等待时间之后调用的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回调用的结果，清除 timeout</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到 func 执行之后的结果</span></span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 timeout 为 null</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启一个新的队列等待</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果 options.trailing === false, 表示禁用最后一次执行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有超过等待时间</span></span><br><span class=\"line\">        <span class=\"comment\">// remaining 时间之后调用 later函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于在一段时间内应用同一个函数的时候，只是改变的later 函数</span></span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>首先，需要明白一点，函数式编程同样可以首先数据的共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getIndex() &#123;</span><br><span class=\"line\">  let index = 0;</span><br><span class=\"line\">  // return 返回的是一个函数</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    index++;</span><br><span class=\"line\">    console.log(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let getIndexFn = getIndex();</span><br><span class=\"line\">// 因为在个过程中，通过getIndex 返回的是一个函数</span><br><span class=\"line\">// 在 getIndex 中的 index 并没有发生变化， 因为 getIdnex 只是调用了一次</span><br><span class=\"line\">getIndexFn(); // 1</span><br><span class=\"line\">getIndexFn(); // 2</span><br></pre></td></tr></table></figure>\n<p>练习:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span> (<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = funciton () &#123;</span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> funcion () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = now();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果第一次执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        cleatTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a><code>debounce</code></h4><p><code>_.debounce(function, wait, [immediate])</code></p>\n<p><code>debounce</code> 函数用于函数防抖: 函数防抖的意思是将延迟函数的执行(真正的执行)在函数最后一次调用的时刻的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>当函数重复调用的时候，函数执行只是发生在最后一次调用的 <code>wait</code> 毫秒之后进行执行。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义执行上下文, 参数， 结果</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> previous <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> remainding = <span class=\"number\">0</span>;</span><br><span class=\"line\">  immediate = immediate || <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = _.now();</span><br><span class=\"line\">    remainding = now - previous;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保证使用 immediate 的时候立即执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate &amp;&amp; remainding &gt; wait) &#123;</span><br><span class=\"line\">      previous = _.now();</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if timeout</span></span><br><span class=\"line\">      <span class=\"comment\">// clearTimeout 进行清除 timeout</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">        clearTimeout(timeout);</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      timeout = setTimeout(later, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> later = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> last = _.now() - timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里面继续调用的时候改变的只是这个</span></span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callNow = imemediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下流程图如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: bounce;</span><br><span class=\"line\">init=&gt;operation: 初始化context, args, timeout, timeStamp, result, 定义later函数</span><br><span class=\"line\">rt=&gt;operation: 记录当前调用时间 timeStamp = _.now(), </span><br><span class=\"line\">callNow = imemediate &amp;&amp; !timeout</span><br><span class=\"line\">isTimeout=&gt;condition: !timeout</span><br><span class=\"line\">iscallNow=&gt;condition: callNow 为 true</span><br><span class=\"line\">setTimeout=&gt;operation: setTimeout(later, wait);</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">replyFn=&gt;operation: 执行函数,</span><br><span class=\"line\">result = func.apply(context, args);</span><br><span class=\"line\">context = args = null;</span><br><span class=\"line\">e=&gt;end: return result</span><br><span class=\"line\">st-&gt;init-&gt;rt-&gt;isTimeout-&gt;e</span><br><span class=\"line\">isTimeout(yes, right)-&gt;setTimeout-&gt;iscallNow</span><br><span class=\"line\">isTimeout(no)-&gt;iscallNow</span><br><span class=\"line\">iscallNow(yes, right)-&gt;replyFn-&gt;e</span><br><span class=\"line\">iscallNow(no)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;io</span><br><span class=\"line\">cond(yes)-&gt;e</span><br></pre></td></tr></table></figure>\n<p>关于 <code>later</code> 函数如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let later = function () &#123;</span><br><span class=\"line\">  let last = now() - timestamp;</span><br><span class=\"line\">  if (last &lt; wait &amp;&amp; last &gt;= 0) &#123;</span><br><span class=\"line\">    timeout = setTimeout(later, last - wait);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    timeout = null;</span><br><span class=\"line\">    if (!immediate) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      if (!timeout) context = args = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一部分实现的原理是:</p>\n<p>假如使用 bounce 函数的程序被多次调用的时候，如果在函数被第一次调用之后的 <code>wait</code> 时间之内，函数被调用了第二次，程序会在函数调用第二次的时候记录下时间，这时候 <code>wait</code> 时间之后调用函数的时候，第一次调用的函数不会被触发，程序在 <code>later</code> 函数中继续延迟第二次调用函数距离上一次调用需要的时间，这样，最终，第二次函数也是和第一次函数调用的结果是相同点的，都是在延迟了<code>wait</code> 时间之后被调用。</p>\n<h4 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a><code>once</code></h4><p>创建一个只能调用一次的函数。即使函数被调用一次，也只是返回第一次被调用的结果。</p>\n<p>使用 <code>once</code> 是当 <code>before</code> 方法中 <code>count</code> 等于2的情况下进行执行的函数;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向 befor 函数中传递参数为 2</span></span><br><span class=\"line\">_.once = _.partial(_.before, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a><code>before</code></h4><p><code>_.before(count, function)</code></p>\n<p>创建一个函数，调用不超过 <code>count</code> 次, 当<code>count</code>已经被达到的时候，最后一次调用的结果被记住并被返回。</p>\n<p>自己写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description before 用于返回 调用不超过 count 次数的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Numbet&#125; count 调用函数的次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 被调用的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">before</span>(<span class=\"params\">count, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; count) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.before = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> memo;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// --times</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      memo = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 times &lt;= 1 将 func 重置为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times &lt;= <span class=\"number\">1</span>) func = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a><code>after</code></h4><p><code>_.after(count, function)</code></p>\n<p>使用 <code>_.after</code> 的作用是创建一个函数，只有调用 <code>count</code> 次之后才能得到效果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description after 用于表示 after 函数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Number&#125; 需要的调用次数</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;function&#125; func 规定调用次数之后的调用函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">after</span> (<span class=\"params\">times, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--times &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(四)","date":"2017-11-23T12:54:45.000Z","_content":"\n### underscore.js 源码分析(四)\n\n`_.min` `_.sortBy` `_.groupBy` `_.indexBy` `_.countBy`\n\n#### `_.min`\n\n`_.min(list, [iteratee], [context])`\n\n类似于使用 `_.max` 这个函数用于获取到 `list` 中的最小值, 其中 `iteratee` 是作为的筛选的依据。\n\n源码如下:\n\n```javascript\n_.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          // 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n#### `_.sortBy`\n\n`_.sortBy(list, iteratee, [context])`\n\n使用 `_.sortBy` 返回的是一个经过排序之后的数组。排序的依据是根据 `iteratee` 函数进行判断的。\n\n返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。\n\n##### 实例\n\n##### 源码分析\n\n```javascript\n_.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n    }), 'value');\n  };\n```\n\n在 `_.sortBy` 函数中存在着多个的函数，下面一一进行分析。\n\n`_.pluck` 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。\n\n看来是用 `_.map...` 这个方法返回的是一个对象数组。\n\n```javascript\n// _.pluck 函数用于\nreturn _.pluck(_.map(obj, function(value, index, list) {\n    // balabala\n}), 'value')\n```\n\n在 `_.map...` 中执行了两步操作: 调用了使用的 `_.map` 方法以及接下来调用 `sort` 方法。\n\n```javascript\n// _.map 方法 obj 是一个对象数组\n// 返回的是一个数组，数组中包含有对象\n// value: 对象的值\n// index: 对象的键\n// criteria: 对象运行iteratee 之后返回的值\n_.map(obj, function(value, index, list) {\n  return {\n    // 对象中返回了三个值\n    // {value: '', index: '', criteria: ''}\n    value: value,\n    index: index,\n    criteria: iteratee(value, index, list)\n  }\n})\n```\n\n对于使用 `_.map` 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  `sort` 方法。\n\n关于数组的 `sort` 方法:\n\n***\n\n关于使用数组的 `sort` 方法\n\n```javascript\nArray.sort(sortBy);\n// sortBy 是一个用来进行排序依据的函数\n```\n\n>使用 sort() 方法的时候，如果不传递 `sortBy` 的时候，使用数组的 `sort` 方法默认的是按照字符编码的顺序进行排序\n\n例如:\n\n```javascript\nlet a = [1, 2, 4, 23];\n// 在原来的数组上进行的改变，并没有生成一个新的数组\na.sort() // [1, 2, 23, 4]\n```\n\n`sortBy` 是用来进行排序的函数:\n\n`sortBy` 接收两个参数，用来对于这两个参数进行比较。\n\n***\n\n 接下来执行的是 `sort` 函数\n\n```javascript\n.sort(function(left, right) {\n  // 在使用 comparator 之后进行比较 left.index - right.index\n  // 为什么呢？\n  return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n})\n```\n\n这个函数的作用是对于上面返回的数组对象进行 `sort` 排序。 返回的是 `_.comparator(left.criteria, right.criteria)` 或者 `left.index - right.index`。\n\n看来是用进行比较。\n\n其中 `_.comparator` 的方法。\n\n```javascript\n// 传入要进行比较的函数参数 a, b\n_.comparator = function(a, b) {\n  // 如果 a === b 返回 0\n    if (a === b) return 0;\n  // 判断 a >= a  b >= b\n  // 为什么呢？\n    var isAComparable = a >= a, isBComparable = b >= b;\n  // 如果其中一个为 true\n    if (isAComparable || isBComparable) {\n      if (isAComparable && !isBComparable) return -1;\n      if (isBComparable && !isAComparable) return 1;\n    }\n    return a > b ? 1 : (b > a) ? -1 : 0;\n  };\n\n```\n\n#### `_.groupBy`\n\n##### 实例\n\n`_.groupBy(list, iteratee, [context])`\n\n将一个集合分为多个的集合，通过使用 `iteratee` 函数进行分组，如果 `iteratee` 是一个字符串而不是一个函数的时候，将这个 `iteratee` 作为元素的属性名来进行分组。\n\n如下:\n\n```javascript\n_.groupBy([1, 2, 4], function(num) {return num % 2;}) // { 0: [2, 4], 1: [1] }\n// 返回一个对象\n// 对象的属性是函数中返回的值\n// 相应属性的值是 list 数组中运行函数得到的相应属性的集合\n```\n\n##### 源码解析\n\n```javascript\n_.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n```\n\n在上面的函数中，存在两个函数: `group` 以及 `_.has`\n\n关于使用 <span id=\"group\"> `group` <span>函数:\n\n```javascript\n// 接收一个 behavior 作为参数\nvar group = function(behavior) {\n  // 返回一个函数，这个函数就是返回的 _.groupBy\n    return function(obj, iteratee, context) {\n      // 定义 result 是一个对象\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        // 对于使用 obj 进行遍历, 获取到 key\n        // 将 list 中的 value, index 传入\n        var key = iteratee(value, index, obj);\n        // 执行 behavior 函数\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n```\n\n在上面的函数中 `behavior` 函数是在 `_.groupBy` 中的函数是下面的这个:\n\n```javascript\nif (_.has(result, key)) result[key].push(value); else result[key] = [value];\n```\n\n使用 `_.has` 方法用来判断对象 `result` 中是否含有属性 `key`:\n\n`_.has` 方法如下:\n\n```javascript\nlet _.has = function (obj, key) {\n  // 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true\n  return obj !== null && Object.prototype.hasOwnProperty.call(obj, key);\n}\n```\n\n####　`_.indexBy`\n\n`_.indexBy(list, iteratee, [context])`\n\n使用 `_.indexBy` 用来返回在列表中每一个元素键的 `iteratee` 函数。 返回一个每一项索引的对象。\n\n>使用 `_.indexBy` 和使用 `_.groupBy` 的区别在于:\n>\n>使用 `_.indexBy` 你需要知道键值对是唯一的，比如:\n>\n>```javascript\n>let list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n>_.indexBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:{name: \"张宁宁\", age: 50}}\n>_.groupBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:[{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}]};\n>```\n>\n>\n\n#####  实例\n\n```javascript\nlet list = [{name: '张三', age: 12}， {name: '李四', age: 13}];\n_.indexBy(list, 'age');\n=> \n{\n    '12': {name: '张三', age: 12},\n    '13': {name: '李四', age: 13}\n}\n```\n\n\n\n##### 源码解析\n\n类似于使用 `_.groupBy` 的源码, 使用 `_.indexBy` 的源码如下:\n\n```javascript\n_.indexBy = group(function(result, value, key) {\n    result[key] = value;\n});\n```\n\n#### `_.countBy`\n\n`_.countBy(list, iteratee, [context])` \n\n返回各组中对象的数量的计数。返回在该组中值的数目。\n\n##### 实例\n\n```javascript\nlet list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n_.countBy(list, function(value) { return value.age });\n=>\n{ 20: 1, 50: 1 }\n```\n\n##### 源码如下\n\n```javascript\nlet _.countBy = group(function(result, value, key) {\n  // 如果在 result 中存在 key result[key] ++ \n  // 否则 将 result[key] = 1;\n  if (_.has(result, key)) result[key] ++; else result[key] = 1; \n})\n```\n\n其中 [`group`](# group) 函数；\n\n####  `shuffle`\n\n##### 实例\n\n用来返回一个随机乱序的副本。并没有改变 `list` 的值。\n\n```javascript\nlet list = [1, 2, 3, 4, 5, 6];\n_.shuffle(list)\n[2,6,3,1,5,4]\n```\n\n##### 源码分析\n\n使用 `_.shuffle` 的源码如下:\n\n```javascript\n_.shuffle = function(obj) {\n  // 获取到数组的值或者对象的值\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n  // var length = set.length\n    var length = set.length;\n  // shuffled 是一个数组\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n    }\n  // 返回生成的随机数组\n    return shuffled;\n};\n```\n\n对于使用 `_.random` 的函数如下:\n\n```javascript\n// 这个函数的目的是用来生成\n_.random = function (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  // 加了一个 1 表示生成的数中可以包括 max\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n```\n\n`Math.floor` : 向下取整\n\n`Math.random`  用于生成 `0 - 1` 之间的随机数;\n\n>注意:  使用的是生成 `min` 和 `max` 之间的值得时候: `min` : inclusive 包括 `max` : exclusive 不包括\n\n```javascript\nMath.random() * (max - min) + min\n// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max\n```\n\n在 `shuffle` 函数中，使用了一个分牌算法：\n\n```javascript\nfor (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n }\n```\n\n\n\n***\n\n使用 分牌算法的原理如下:\n\n存在两个数组 a 和 b\n\n现在想要将 a 中的元素随机生成到 b 中\n\n```sequence\na-->b: index\nnote left of a: a 中遍历\nb-->b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值\nb-->a: rand(随机生成的\\n位于(0, index) 之间的数值)\na--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand\n```\n\n\n\n\n\n***\n\n如上图所示的算法:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks\n```\n\n","source":"_posts/underscore-js源码分析-四.md","raw":"---\ntitle: underscore.js源码分析(四)\ndate: 2017-11-23 20:54:45\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(四)\n\n`_.min` `_.sortBy` `_.groupBy` `_.indexBy` `_.countBy`\n\n#### `_.min`\n\n`_.min(list, [iteratee], [context])`\n\n类似于使用 `_.max` 这个函数用于获取到 `list` 中的最小值, 其中 `iteratee` 是作为的筛选的依据。\n\n源码如下:\n\n```javascript\n_.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = obj.length === +obj.length ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          // 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n```\n\n#### `_.sortBy`\n\n`_.sortBy(list, iteratee, [context])`\n\n使用 `_.sortBy` 返回的是一个经过排序之后的数组。排序的依据是根据 `iteratee` 函数进行判断的。\n\n返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。\n\n##### 实例\n\n##### 源码分析\n\n```javascript\n_.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n    }), 'value');\n  };\n```\n\n在 `_.sortBy` 函数中存在着多个的函数，下面一一进行分析。\n\n`_.pluck` 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。\n\n看来是用 `_.map...` 这个方法返回的是一个对象数组。\n\n```javascript\n// _.pluck 函数用于\nreturn _.pluck(_.map(obj, function(value, index, list) {\n    // balabala\n}), 'value')\n```\n\n在 `_.map...` 中执行了两步操作: 调用了使用的 `_.map` 方法以及接下来调用 `sort` 方法。\n\n```javascript\n// _.map 方法 obj 是一个对象数组\n// 返回的是一个数组，数组中包含有对象\n// value: 对象的值\n// index: 对象的键\n// criteria: 对象运行iteratee 之后返回的值\n_.map(obj, function(value, index, list) {\n  return {\n    // 对象中返回了三个值\n    // {value: '', index: '', criteria: ''}\n    value: value,\n    index: index,\n    criteria: iteratee(value, index, list)\n  }\n})\n```\n\n对于使用 `_.map` 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  `sort` 方法。\n\n关于数组的 `sort` 方法:\n\n***\n\n关于使用数组的 `sort` 方法\n\n```javascript\nArray.sort(sortBy);\n// sortBy 是一个用来进行排序依据的函数\n```\n\n>使用 sort() 方法的时候，如果不传递 `sortBy` 的时候，使用数组的 `sort` 方法默认的是按照字符编码的顺序进行排序\n\n例如:\n\n```javascript\nlet a = [1, 2, 4, 23];\n// 在原来的数组上进行的改变，并没有生成一个新的数组\na.sort() // [1, 2, 23, 4]\n```\n\n`sortBy` 是用来进行排序的函数:\n\n`sortBy` 接收两个参数，用来对于这两个参数进行比较。\n\n***\n\n 接下来执行的是 `sort` 函数\n\n```javascript\n.sort(function(left, right) {\n  // 在使用 comparator 之后进行比较 left.index - right.index\n  // 为什么呢？\n  return _.comparator(left.criteria, right.criteria) || left.index - right.index;\n})\n```\n\n这个函数的作用是对于上面返回的数组对象进行 `sort` 排序。 返回的是 `_.comparator(left.criteria, right.criteria)` 或者 `left.index - right.index`。\n\n看来是用进行比较。\n\n其中 `_.comparator` 的方法。\n\n```javascript\n// 传入要进行比较的函数参数 a, b\n_.comparator = function(a, b) {\n  // 如果 a === b 返回 0\n    if (a === b) return 0;\n  // 判断 a >= a  b >= b\n  // 为什么呢？\n    var isAComparable = a >= a, isBComparable = b >= b;\n  // 如果其中一个为 true\n    if (isAComparable || isBComparable) {\n      if (isAComparable && !isBComparable) return -1;\n      if (isBComparable && !isAComparable) return 1;\n    }\n    return a > b ? 1 : (b > a) ? -1 : 0;\n  };\n\n```\n\n#### `_.groupBy`\n\n##### 实例\n\n`_.groupBy(list, iteratee, [context])`\n\n将一个集合分为多个的集合，通过使用 `iteratee` 函数进行分组，如果 `iteratee` 是一个字符串而不是一个函数的时候，将这个 `iteratee` 作为元素的属性名来进行分组。\n\n如下:\n\n```javascript\n_.groupBy([1, 2, 4], function(num) {return num % 2;}) // { 0: [2, 4], 1: [1] }\n// 返回一个对象\n// 对象的属性是函数中返回的值\n// 相应属性的值是 list 数组中运行函数得到的相应属性的集合\n```\n\n##### 源码解析\n\n```javascript\n_.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n```\n\n在上面的函数中，存在两个函数: `group` 以及 `_.has`\n\n关于使用 <span id=\"group\"> `group` <span>函数:\n\n```javascript\n// 接收一个 behavior 作为参数\nvar group = function(behavior) {\n  // 返回一个函数，这个函数就是返回的 _.groupBy\n    return function(obj, iteratee, context) {\n      // 定义 result 是一个对象\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        // 对于使用 obj 进行遍历, 获取到 key\n        // 将 list 中的 value, index 传入\n        var key = iteratee(value, index, obj);\n        // 执行 behavior 函数\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n```\n\n在上面的函数中 `behavior` 函数是在 `_.groupBy` 中的函数是下面的这个:\n\n```javascript\nif (_.has(result, key)) result[key].push(value); else result[key] = [value];\n```\n\n使用 `_.has` 方法用来判断对象 `result` 中是否含有属性 `key`:\n\n`_.has` 方法如下:\n\n```javascript\nlet _.has = function (obj, key) {\n  // 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true\n  return obj !== null && Object.prototype.hasOwnProperty.call(obj, key);\n}\n```\n\n####　`_.indexBy`\n\n`_.indexBy(list, iteratee, [context])`\n\n使用 `_.indexBy` 用来返回在列表中每一个元素键的 `iteratee` 函数。 返回一个每一项索引的对象。\n\n>使用 `_.indexBy` 和使用 `_.groupBy` 的区别在于:\n>\n>使用 `_.indexBy` 你需要知道键值对是唯一的，比如:\n>\n>```javascript\n>let list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n>_.indexBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:{name: \"张宁宁\", age: 50}}\n>_.groupBy(list, function(value) { return value.name });\n>=>\n>{张宁宁:[{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}]};\n>```\n>\n>\n\n#####  实例\n\n```javascript\nlet list = [{name: '张三', age: 12}， {name: '李四', age: 13}];\n_.indexBy(list, 'age');\n=> \n{\n    '12': {name: '张三', age: 12},\n    '13': {name: '李四', age: 13}\n}\n```\n\n\n\n##### 源码解析\n\n类似于使用 `_.groupBy` 的源码, 使用 `_.indexBy` 的源码如下:\n\n```javascript\n_.indexBy = group(function(result, value, key) {\n    result[key] = value;\n});\n```\n\n#### `_.countBy`\n\n`_.countBy(list, iteratee, [context])` \n\n返回各组中对象的数量的计数。返回在该组中值的数目。\n\n##### 实例\n\n```javascript\nlet list = [{name: '张宁宁', age: 20}, {name: '张宁宁', age: 50}];\n_.countBy(list, function(value) { return value.age });\n=>\n{ 20: 1, 50: 1 }\n```\n\n##### 源码如下\n\n```javascript\nlet _.countBy = group(function(result, value, key) {\n  // 如果在 result 中存在 key result[key] ++ \n  // 否则 将 result[key] = 1;\n  if (_.has(result, key)) result[key] ++; else result[key] = 1; \n})\n```\n\n其中 [`group`](# group) 函数；\n\n####  `shuffle`\n\n##### 实例\n\n用来返回一个随机乱序的副本。并没有改变 `list` 的值。\n\n```javascript\nlet list = [1, 2, 3, 4, 5, 6];\n_.shuffle(list)\n[2,6,3,1,5,4]\n```\n\n##### 源码分析\n\n使用 `_.shuffle` 的源码如下:\n\n```javascript\n_.shuffle = function(obj) {\n  // 获取到数组的值或者对象的值\n    var set = obj && obj.length === +obj.length ? obj : _.values(obj);\n  // var length = set.length\n    var length = set.length;\n  // shuffled 是一个数组\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n    }\n  // 返回生成的随机数组\n    return shuffled;\n};\n```\n\n对于使用 `_.random` 的函数如下:\n\n```javascript\n// 这个函数的目的是用来生成\n_.random = function (min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  // 加了一个 1 表示生成的数中可以包括 max\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n```\n\n`Math.floor` : 向下取整\n\n`Math.random`  用于生成 `0 - 1` 之间的随机数;\n\n>注意:  使用的是生成 `min` 和 `max` 之间的值得时候: `min` : inclusive 包括 `max` : exclusive 不包括\n\n```javascript\nMath.random() * (max - min) + min\n// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max\n```\n\n在 `shuffle` 函数中，使用了一个分牌算法：\n\n```javascript\nfor (var index = 0, rand; index < length; index++) {\n      // 通过使用 _.randow获得到rand 随机数\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      // 将 index 的值赋给这个随机数组\n      // 将set[index] 传入到 shuffled 中\n      shuffled[rand] = set[index];\n }\n```\n\n\n\n***\n\n使用 分牌算法的原理如下:\n\n存在两个数组 a 和 b\n\n现在想要将 a 中的元素随机生成到 b 中\n\n```sequence\na-->b: index\nnote left of a: a 中遍历\nb-->b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值\nb-->a: rand(随机生成的\\n位于(0, index) 之间的数值)\na--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand\n```\n\n\n\n\n\n***\n\n如上图所示的算法:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks\n```\n\n","slug":"underscore-js源码分析-四","published":1,"updated":"2017-11-25T15:24:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9o0038s33g4zw6n525","content":"<h3 id=\"underscore-js-源码分析-四\"><a href=\"#underscore-js-源码分析-四\" class=\"headerlink\" title=\"underscore.js 源码分析(四)\"></a>underscore.js 源码分析(四)</h3><p><code>_.min</code> <code>_.sortBy</code> <code>_.groupBy</code> <code>_.indexBy</code> <code>_.countBy</code></p>\n<h4 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"_.min\"></a><code>_.min</code></h4><p><code>_.min(list, [iteratee], [context])</code></p>\n<p>类似于使用 <code>_.max</code> 这个函数用于获取到 <code>list</code> 中的最小值, 其中 <code>iteratee</code> 是作为的筛选的依据。</p>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值</span></span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a><code>_.sortBy</code></h4><p><code>_.sortBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.sortBy</code> 返回的是一个经过排序之后的数组。排序的依据是根据 <code>iteratee</code> 函数进行判断的。</p>\n<p>返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">        index: index,</span><br><span class=\"line\">        criteria: iteratee(value, index, list)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.sortBy</code> 函数中存在着多个的函数，下面一一进行分析。</p>\n<p><code>_.pluck</code> 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。</p>\n<p>看来是用 <code>_.map...</code> 这个方法返回的是一个对象数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.pluck 函数用于</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// balabala</span></span><br><span class=\"line\">&#125;), <span class=\"string\">'value'</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.map...</code> 中执行了两步操作: 调用了使用的 <code>_.map</code> 方法以及接下来调用 <code>sort</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.map 方法 obj 是一个对象数组</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个数组，数组中包含有对象</span></span><br><span class=\"line\"><span class=\"comment\">// value: 对象的值</span></span><br><span class=\"line\"><span class=\"comment\">// index: 对象的键</span></span><br><span class=\"line\"><span class=\"comment\">// criteria: 对象运行iteratee 之后返回的值</span></span><br><span class=\"line\">_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象中返回了三个值</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: '', index: '', criteria: ''&#125;</span></span><br><span class=\"line\">    value: value,</span><br><span class=\"line\">    index: index,</span><br><span class=\"line\">    criteria: iteratee(value, index, list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.map</code> 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  <code>sort</code> 方法。</p>\n<p>关于数组的 <code>sort</code> 方法:</p>\n<hr>\n<p>关于使用数组的 <code>sort</code> 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.sort(sortBy);</span><br><span class=\"line\"><span class=\"comment\">// sortBy 是一个用来进行排序依据的函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 sort() 方法的时候，如果不传递 <code>sortBy</code> 的时候，使用数组的 <code>sort</code> 方法默认的是按照字符编码的顺序进行排序</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"comment\">// 在原来的数组上进行的改变，并没有生成一个新的数组</span></span><br><span class=\"line\">a.sort() <span class=\"comment\">// [1, 2, 23, 4]</span></span><br></pre></td></tr></table></figure>\n<p><code>sortBy</code> 是用来进行排序的函数:</p>\n<p><code>sortBy</code> 接收两个参数，用来对于这两个参数进行比较。</p>\n<hr>\n<p> 接下来执行的是 <code>sort</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在使用 comparator 之后进行比较 left.index - right.index</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个函数的作用是对于上面返回的数组对象进行 <code>sort</code> 排序。 返回的是 <code>_.comparator(left.criteria, right.criteria)</code> 或者 <code>left.index - right.index</code>。</p>\n<p>看来是用进行比较。</p>\n<p>其中 <code>_.comparator</code> 的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入要进行比较的函数参数 a, b</span></span><br><span class=\"line\">_.comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a === b 返回 0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 a &gt;= a  b &gt;= b</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAComparable = a &gt;= a, isBComparable = b &gt;= b;</span><br><span class=\"line\">  <span class=\"comment\">// 如果其中一个为 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAComparable || isBComparable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isAComparable &amp;&amp; !isBComparable) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isBComparable &amp;&amp; !isAComparable) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? <span class=\"number\">1</span> : (b &gt; a) ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"_.groupBy\"></a><code>_.groupBy</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.groupBy(list, iteratee, [context])</code></p>\n<p>将一个集合分为多个的集合，通过使用 <code>iteratee</code> 函数进行分组，如果 <code>iteratee</code> 是一个字符串而不是一个函数的时候，将这个 <code>iteratee</code> 作为元素的属性名来进行分组。</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num % <span class=\"number\">2</span>;&#125;) <span class=\"comment\">// &#123; 0: [2, 4], 1: [1] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 对象的属性是函数中返回的值</span></span><br><span class=\"line\"><span class=\"comment\">// 相应属性的值是 list 数组中运行函数得到的相应属性的集合</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，存在两个函数: <code>group</code> 以及 <code>_.has</code></p>\n<p>关于使用 <span id=\"group\"> <code>group</code> <span>函数:</span></span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收一个 behavior 作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数，这个函数就是返回的 _.groupBy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 result 是一个对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对于使用 obj 进行遍历, 获取到 key</span></span><br><span class=\"line\">        <span class=\"comment\">// 将 list 中的 value, index 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 执行 behavior 函数</span></span><br><span class=\"line\">        behavior(result, value, key);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中 <code>behavior</code> 函数是在 <code>_.groupBy</code> 中的函数是下面的这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_.has</code> 方法用来判断对象 <code>result</code> 中是否含有属性 <code>key</code>:</p>\n<p><code>_.has</code> 方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.has = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_.indexBy</code></p>\n<p><code>_.indexBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.indexBy</code> 用来返回在列表中每一个元素键的 <code>iteratee</code> 函数。 返回一个每一项索引的对象。</p>\n<blockquote>\n<p>使用 <code>_.indexBy</code> 和使用 <code>_.groupBy</code> 的区别在于:</p>\n<p>使用 <code>_.indexBy</code> 你需要知道键值对是唯一的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">&gt;_.indexBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;&#125;</span><br><span class=\"line\">&gt;_.groupBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:[&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;]&#125;;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;， &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;];</span><br><span class=\"line\">_.indexBy(list, <span class=\"string\">'age'</span>);</span><br><span class=\"line\">=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'12'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'13'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>类似于使用 <code>_.groupBy</code> 的源码, 使用 <code>_.indexBy</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    result[key] = value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"countBy\"><a href=\"#countBy\" class=\"headerlink\" title=\"_.countBy\"></a><code>_.countBy</code></h4><p><code>_.countBy(list, iteratee, [context])</code> </p>\n<p>返回各组中对象的数量的计数。返回在该组中值的数目。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">_.countBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.age &#125;);</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\">&#123; <span class=\"number\">20</span>: <span class=\"number\">1</span>, <span class=\"number\">50</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下\"></a>源码如下</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在 result 中存在 key result[key] ++ </span></span><br><span class=\"line\">  <span class=\"comment\">// 否则 将 result[key] = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.has(result, key)) result[key] ++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中 <a href=\"# group\"><code>group</code></a> 函数；</p>\n<h4 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a><code>shuffle</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>用来返回一个随机乱序的副本。并没有改变 <code>list</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">_.shuffle(list)</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.shuffle</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到数组的值或者对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> set = obj &amp;&amp; obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">  <span class=\"comment\">// var length = set.length</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</span><br><span class=\"line\">  <span class=\"comment\">// shuffled 是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> shuffled = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = set[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回生成的随机数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> shuffled;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.random</code> 的函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数的目的是用来生成</span></span><br><span class=\"line\">_.random = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    max = min;</span><br><span class=\"line\">    min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加了一个 1 表示生成的数中可以包括 max</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Math.floor</code> : 向下取整</p>\n<p><code>Math.random</code>  用于生成 <code>0 - 1</code> 之间的随机数;</p>\n<blockquote>\n<p>注意:  使用的是生成 <code>min</code> 和 <code>max</code> 之间的值得时候: <code>min</code> : inclusive 包括 <code>max</code> : exclusive 不包括</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random() * (max - min) + min</span><br><span class=\"line\"><span class=\"comment\">// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>shuffle</code> 函数中，使用了一个分牌算法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = set[index];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用 分牌算法的原理如下:</p>\n<p>存在两个数组 a 和 b</p>\n<p>现在想要将 a 中的元素随机生成到 b 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a--&gt;b: index</span><br><span class=\"line\">note left of a: a 中遍历</span><br><span class=\"line\">b--&gt;b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值</span><br><span class=\"line\">b--&gt;a: rand(随机生成的\\n位于(0, index) 之间的数值)</span><br><span class=\"line\">a--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如上图所示的算法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-四\"><a href=\"#underscore-js-源码分析-四\" class=\"headerlink\" title=\"underscore.js 源码分析(四)\"></a>underscore.js 源码分析(四)</h3><p><code>_.min</code> <code>_.sortBy</code> <code>_.groupBy</code> <code>_.indexBy</code> <code>_.countBy</code></p>\n<h4 id=\"min\"><a href=\"#min\" class=\"headerlink\" title=\"_.min\"></a><code>_.min</code></h4><p><code>_.min(list, [iteratee], [context])</code></p>\n<p>类似于使用 <code>_.max</code> 这个函数用于获取到 <code>list</code> 中的最小值, 其中 <code>iteratee</code> 是作为的筛选的依据。</p>\n<p>源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.min = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"literal\">Infinity</span>, lastComputed = <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">        value, computed;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee == <span class=\"literal\">null</span> &amp;&amp; obj != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      obj = obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">        value = obj[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; result) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 和使用 _.max 的没有什么不同，不同的是这里筛选的是最小值</span></span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">        computed = iteratee(value, index, list);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (computed &lt; lastComputed || computed === <span class=\"literal\">Infinity</span> &amp;&amp; result === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">          result = value;</span><br><span class=\"line\">          lastComputed = computed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"_.sortBy\"></a><code>_.sortBy</code></h4><p><code>_.sortBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.sortBy</code> 返回的是一个经过排序之后的数组。排序的依据是根据 <code>iteratee</code> 函数进行判断的。</p>\n<p>返回的是进行排序之后的数组的副本，原来的数组并没有进行了改变。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortBy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">        index: index,</span><br><span class=\"line\">        criteria: iteratee(value, index, list)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;).sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">    &#125;), <span class=\"string\">'value'</span>);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.sortBy</code> 函数中存在着多个的函数，下面一一进行分析。</p>\n<p><code>_.pluck</code> 函数，这个函数用于获取到对象数组中包含有过相关属性的所有的对象。</p>\n<p>看来是用 <code>_.map...</code> 这个方法返回的是一个对象数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.pluck 函数用于</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> _.pluck(_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// balabala</span></span><br><span class=\"line\">&#125;), <span class=\"string\">'value'</span>)</span><br></pre></td></tr></table></figure>\n<p>在 <code>_.map...</code> 中执行了两步操作: 调用了使用的 <code>_.map</code> 方法以及接下来调用 <code>sort</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _.map 方法 obj 是一个对象数组</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个数组，数组中包含有对象</span></span><br><span class=\"line\"><span class=\"comment\">// value: 对象的值</span></span><br><span class=\"line\"><span class=\"comment\">// index: 对象的键</span></span><br><span class=\"line\"><span class=\"comment\">// criteria: 对象运行iteratee 之后返回的值</span></span><br><span class=\"line\">_.map(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象中返回了三个值</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;value: '', index: '', criteria: ''&#125;</span></span><br><span class=\"line\">    value: value,</span><br><span class=\"line\">    index: index,</span><br><span class=\"line\">    criteria: iteratee(value, index, list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.map</code> 方法返回的一个新的数组对象之后， 对于这个新的对象数组执行  <code>sort</code> 方法。</p>\n<p>关于数组的 <code>sort</code> 方法:</p>\n<hr>\n<p>关于使用数组的 <code>sort</code> 方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.sort(sortBy);</span><br><span class=\"line\"><span class=\"comment\">// sortBy 是一个用来进行排序依据的函数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 sort() 方法的时候，如果不传递 <code>sortBy</code> 的时候，使用数组的 <code>sort</code> 方法默认的是按照字符编码的顺序进行排序</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"comment\">// 在原来的数组上进行的改变，并没有生成一个新的数组</span></span><br><span class=\"line\">a.sort() <span class=\"comment\">// [1, 2, 23, 4]</span></span><br></pre></td></tr></table></figure>\n<p><code>sortBy</code> 是用来进行排序的函数:</p>\n<p><code>sortBy</code> 接收两个参数，用来对于这两个参数进行比较。</p>\n<hr>\n<p> 接下来执行的是 <code>sort</code> 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在使用 comparator 之后进行比较 left.index - right.index</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.comparator(left.criteria, right.criteria) || left.index - right.index;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个函数的作用是对于上面返回的数组对象进行 <code>sort</code> 排序。 返回的是 <code>_.comparator(left.criteria, right.criteria)</code> 或者 <code>left.index - right.index</code>。</p>\n<p>看来是用进行比较。</p>\n<p>其中 <code>_.comparator</code> 的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传入要进行比较的函数参数 a, b</span></span><br><span class=\"line\">_.comparator = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 a === b 返回 0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 判断 a &gt;= a  b &gt;= b</span></span><br><span class=\"line\">  <span class=\"comment\">// 为什么呢？</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAComparable = a &gt;= a, isBComparable = b &gt;= b;</span><br><span class=\"line\">  <span class=\"comment\">// 如果其中一个为 true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAComparable || isBComparable) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isAComparable &amp;&amp; !isBComparable) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isBComparable &amp;&amp; !isAComparable) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? <span class=\"number\">1</span> : (b &gt; a) ? <span class=\"number\">-1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"_.groupBy\"></a><code>_.groupBy</code></h4><h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p><code>_.groupBy(list, iteratee, [context])</code></p>\n<p>将一个集合分为多个的集合，通过使用 <code>iteratee</code> 函数进行分组，如果 <code>iteratee</code> 是一个字符串而不是一个函数的时候，将这个 <code>iteratee</code> 作为元素的属性名来进行分组。</p>\n<p>如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num % <span class=\"number\">2</span>;&#125;) <span class=\"comment\">// &#123; 0: [2, 4], 1: [1] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 对象的属性是函数中返回的值</span></span><br><span class=\"line\"><span class=\"comment\">// 相应属性的值是 list 数组中运行函数得到的相应属性的集合</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.groupBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中，存在两个函数: <code>group</code> 以及 <code>_.has</code></p>\n<p>关于使用 <span id=\"group\"> <code>group</code> <span>函数:</span></span></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收一个 behavior 作为参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> group = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">behavior</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数，这个函数就是返回的 _.groupBy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 定义 result 是一个对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">      iteratee = cb(iteratee, context);</span><br><span class=\"line\">      _.each(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 对于使用 obj 进行遍历, 获取到 key</span></span><br><span class=\"line\">        <span class=\"comment\">// 将 list 中的 value, index 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = iteratee(value, index, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 执行 behavior 函数</span></span><br><span class=\"line\">        behavior(result, value, key);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在上面的函数中 <code>behavior</code> 函数是在 <code>_.groupBy</code> 中的函数是下面的这个:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (_.has(result, key)) result[key].push(value); <span class=\"keyword\">else</span> result[key] = [value];</span><br></pre></td></tr></table></figure>\n<p>使用 <code>_.has</code> 方法用来判断对象 <code>result</code> 中是否含有属性 <code>key</code>:</p>\n<p><code>_.has</code> 方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.has = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当obj 不是null 并且 对象 Obj 中包含有属性 key 的时候 返回 true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####　<code>_.indexBy</code></p>\n<p><code>_.indexBy(list, iteratee, [context])</code></p>\n<p>使用 <code>_.indexBy</code> 用来返回在列表中每一个元素键的 <code>iteratee</code> 函数。 返回一个每一项索引的对象。</p>\n<blockquote>\n<p>使用 <code>_.indexBy</code> 和使用 <code>_.groupBy</code> 的区别在于:</p>\n<p>使用 <code>_.indexBy</code> 你需要知道键值对是唯一的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">&gt;_.indexBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;&#125;</span><br><span class=\"line\">&gt;_.groupBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.name &#125;);</span><br><span class=\"line\">&gt;=&gt;</span><br><span class=\"line\">&gt;&#123;张宁宁:[&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;]&#125;;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;， &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;];</span><br><span class=\"line\">_.indexBy(list, <span class=\"string\">'age'</span>);</span><br><span class=\"line\">=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'12'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'13'</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p>类似于使用 <code>_.groupBy</code> 的源码, 使用 <code>_.indexBy</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.indexBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">    result[key] = value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"countBy\"><a href=\"#countBy\" class=\"headerlink\" title=\"_.countBy\"></a><code>_.countBy</code></h4><p><code>_.countBy(list, iteratee, [context])</code> </p>\n<p>返回各组中对象的数量的计数。返回在该组中值的数目。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张宁宁'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;];</span><br><span class=\"line\">_.countBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value.age &#125;);</span><br><span class=\"line\">=&gt;</span><br><span class=\"line\">&#123; <span class=\"number\">20</span>: <span class=\"number\">1</span>, <span class=\"number\">50</span>: <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码如下\"><a href=\"#源码如下\" class=\"headerlink\" title=\"源码如下\"></a>源码如下</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _.countBy = group(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果在 result 中存在 key result[key] ++ </span></span><br><span class=\"line\">  <span class=\"comment\">// 否则 将 result[key] = 1;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.has(result, key)) result[key] ++; <span class=\"keyword\">else</span> result[key] = <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中 <a href=\"# group\"><code>group</code></a> 函数；</p>\n<h4 id=\"shuffle\"><a href=\"#shuffle\" class=\"headerlink\" title=\"shuffle\"></a><code>shuffle</code></h4><h5 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h5><p>用来返回一个随机乱序的副本。并没有改变 <code>list</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">_.shuffle(list)</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h5 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>使用 <code>_.shuffle</code> 的源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到数组的值或者对象的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> set = obj &amp;&amp; obj.length === +obj.length ? obj : _.values(obj);</span><br><span class=\"line\">  <span class=\"comment\">// var length = set.length</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</span><br><span class=\"line\">  <span class=\"comment\">// shuffled 是一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> shuffled = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = set[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回生成的随机数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> shuffled;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对于使用 <code>_.random</code> 的函数如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个函数的目的是用来生成</span></span><br><span class=\"line\">_.random = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    max = min;</span><br><span class=\"line\">    min = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 加了一个 1 表示生成的数中可以包括 max</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Math.floor</code> : 向下取整</p>\n<p><code>Math.random</code>  用于生成 <code>0 - 1</code> 之间的随机数;</p>\n<blockquote>\n<p>注意:  使用的是生成 <code>min</code> 和 <code>max</code> 之间的值得时候: <code>min</code> : inclusive 包括 <code>max</code> : exclusive 不包括</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random() * (max - min) + min</span><br><span class=\"line\"><span class=\"comment\">// 生成 位于 max 与 min 之间的数， 包括 min 但不包括 max</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>shuffle</code> 函数中，使用了一个分牌算法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>, rand; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 通过使用 _.randow获得到rand 随机数</span></span><br><span class=\"line\">      rand = _.random(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand !== index) shuffled[index] = shuffled[rand];</span><br><span class=\"line\">      <span class=\"comment\">// 将 index 的值赋给这个随机数组</span></span><br><span class=\"line\">      <span class=\"comment\">// 将set[index] 传入到 shuffled 中</span></span><br><span class=\"line\">      shuffled[rand] = set[index];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>使用 分牌算法的原理如下:</p>\n<p>存在两个数组 a 和 b</p>\n<p>现在想要将 a 中的元素随机生成到 b 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a--&gt;b: index</span><br><span class=\"line\">note left of a: a 中遍历</span><br><span class=\"line\">b--&gt;b:根据 a 中的index b[index] = b[rand],\\n取到自身的 b[rand] 值</span><br><span class=\"line\">b--&gt;a: rand(随机生成的\\n位于(0, index) 之间的数值)</span><br><span class=\"line\">a--b: 将得到的 rand 随机数\\n b[rand] = a[index],填补刚才 b取到的自身的 rand</span><br></pre></td></tr></table></figure>\n<hr>\n<p>如上图所示的算法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks</span><br></pre></td></tr></table></figure>\n"},{"title":"underscore.js源码分析(十四)","date":"2017-12-12T13:44:03.000Z","_content":"\n### underscore.js 源码分析(十四)\n\n`extend` `extendOwn` `pick` `omit`  `default`\n\n#### `extend`\n\n`_.extend(destination, *sources)`\n\n将多个对象  `souces` 覆盖到 `destination` 上面，返回被覆盖掉的 `destination` 上面。\n\n使用 `extend` 类似于使用 `Object.assign` 用来将多个对象进行合并。\n\n自己写的代码如下:\n\n```javascript\nfunction extend(destination) {\n  let sources = Array.prototyep.slice.call(arguments, 1);\n  let len = sources.length;\n  for (let i = 0; i < len; i++) {\n    let currrentSource = sources[i];\n    let key = _.keys(currentSource);\n    for (let index = 0; index < keys.length; index++) {\n      destination[keys[index]] = currentScource[keys[index]];\n    }\n  }\n}\n```\n\n源码分析:\n\n```javascript\nlet createAssigner = function (keysFunc, undefinedOnly) {\n  return function (obj) {\n    let length = arguments.length;\n    // 进行边界处理\n    // 当传入一个参数的时候或者 obj === null 的时候, 返回 obj\n    if (length < 2 || obj === null) return obj;\n    for (let index = 1; index < length; index++) {\n      // 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得\n      let source = arguments[index];\n           keys = keysFunc(source);\n           l = keys.length;\n      for (let i = 0; i < l; i++) {\n        let key = keys[i];\n        // 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候\n        // 接下来判断 obj[key] 是否为 undefined(void 0)\n        if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n      }     \n    }\n  }\n}\n```\n\n#### `extendOwn`\n\n使用  `extendOwn` 实现的效果类似于使用  `extends`, 实现的效果是只是复制自己的属性到目标对象。\n\n`_.extendOwn(destination, *source)`\n\n复制 `source` 属性的值到 `destination` 只是复制自身的属性。(不包括继承的属性)\n\n这个函数与 `_.extend` 的不同之处在于不会将 `source` 对象中继承到的属性复制到 `destination` 之中。\n\n使用 `extendOwn` 与 `extend` 的不同在于: 源码不同\n\n```javascript\n// 使用 _.allKeys 获得到包括自身和继承得到的属性\n_.extend = createAssigner(_.allKeys);\n// 使用 extendOwn 获得到仅仅包括自身的属性\n_.extendOwn = _.assign = createAssigner(_.keys);\n```\n\n#### `pick`\n\n`_.pick(object, *keys)`  \n\n使用这个属性用于返回 `object` 副本, 过滤出  `keys(有效的键组成的数组)` 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key\n\n使用 `pick` 的源码如下。\n\n```javascript\n_.pick = function(object, oiteratee, context) {\n  let result = {}, obj = object, iteratee, keys;\n  if (obj == null) return result;\n  // 如果 oiteratee 是一个函数的话\n  if (_.isFunction(oiteratee)) {\n    // 使用 _.allKeys 获得到 obj 中的所有键\n    keys = _.allKeys(obj);\n    iteratee = optiomizeCb(oiteratee, context);\n  } else {\n    // 如果 oiteratee 不是一个函数的时候\n    // 表示这时候用于筛选出对象 object 中包含 keys 的内容\n    // 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识\n    keys = flatten(arguments, false, false, 1);\n    // 返回在 obj 中的 key\n    iteratee = function(value, key, obj) { return key in obj; };\n    obj = Object(obj);\n  }\n  for (let i = 0; length = keys.length; i < length; i++) {\n    let key = keys[i];\n    let value = obj[key];\n    // 这里通过使用不同的函数来实现对于不同情况下的处理条件\n    // 通过改变 iteratee 函数的不同来实现不同的处理流程\n    // if (iteratee(value, key, obj))\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n}\n```\n\n上面中有一个 `flatten` 函数, 使用 `flatten` 函数的目的是将多层嵌套的数组转化为一维数组。\n\n`flatten`源码:\n\n```\nlet flatten = function(input, shallow, strict, startIndex) {\n  let output = [], idx = 0;\n  for (let i = startIndex || 0, length = getLength(input); i < length; i++) {\n    let value = input[i];\n    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n      if (!shallow) value = flatten(value, shallow, strict);\n      let j = 0; len = value.length;\n      output.length += len;\n      while (j < len) {\n        output[idex++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n```\n\n自己写的函数: `pick`\n\n```javascript\nfunction pick(obj, oiteratee) {\n  // 边界处理 如果 obj === null 或者 typeof obj !== 'object'\n  // 返回一个空对象\n  if (obj === null || typeof obj !== 'object') {\n    return {};\n  }\n  let output = {};\n  let keys = Object.keys(obj);\n  let len = keys.length;\n  let iteratee;\n  let choiceKeys = Array.prototype.slice.call(arguments, 1);\n  if (typeof oiteratee === 'function') {\n    iteratee = oiteratee;\n  } else {\n    iteratee = function (value, key) { retutn choiceKeys.includes(key); };\n  }\n  for (let i = 0; i < len; i++) {\n    let key = keys[i];\n    if (iteratee(obj[key], key)) output[key] = obj[key];\n  }\n  return output;\n}\n```\n\n#### `omit` \n\n`omit(object, *keys)`\n\n使用 `omit` 函数的目的是与使用 `pick` 函数相反，返回一个 `object` 副本，过滤出除去  `keys` 中的属性值，或者接收一个判断函数，指定忽略哪一个 `key` 值。\n\n`omit` 源码如下:\n\n```javascript\n_.omit = function (obj, iteratee, context) {\n  if (_.isFunction(iteratee))　{\n    iteratee = _.negate(iteratee);\n  } else {\n    let keys = _.map(flatten(arguments, false, false, 1), String);\n    iteratee = function() {\n      return !_.contains(keys, key)\n    };\n  }\n  return _.pick(obj, iteratee, context);\n}\n```\n\n####   `default`\n\n`_.defaults(object, *defaults)`\n\n使用 `default` 的目的是使用 `default` 对象填充 `object` 中的 `undefined` 属性，并且返回这个 `object`。\n\n当 `object` 中存在 `default` 中的属性被填充的时候，使用 `defaults` 方法不会起作用。\n\n使用 `_.defaults` 方法的时候源码如下:\n\n```javascript\n// 使用 createAssigner(keysFunc, undefinedOnly);\n// 传递两个参数： keysFunc 表示对于键的处理函数\n// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性\n_.default = createAssigner(_.allKeys, true);\n```\n\n在 `createAssigner` 的函数中使用 `_.default` 方法主要是使用下面的这句函数:\n\n```\n// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined\nif (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n```\n\n","source":"_posts/underscore-js源码分析-十四.md","raw":"---\ntitle: underscore.js源码分析(十四)\ndate: 2017-12-12 21:44:03\ntags: underscore.js源码\ncategories: underscore.js 源码分析\n---\n\n### underscore.js 源码分析(十四)\n\n`extend` `extendOwn` `pick` `omit`  `default`\n\n#### `extend`\n\n`_.extend(destination, *sources)`\n\n将多个对象  `souces` 覆盖到 `destination` 上面，返回被覆盖掉的 `destination` 上面。\n\n使用 `extend` 类似于使用 `Object.assign` 用来将多个对象进行合并。\n\n自己写的代码如下:\n\n```javascript\nfunction extend(destination) {\n  let sources = Array.prototyep.slice.call(arguments, 1);\n  let len = sources.length;\n  for (let i = 0; i < len; i++) {\n    let currrentSource = sources[i];\n    let key = _.keys(currentSource);\n    for (let index = 0; index < keys.length; index++) {\n      destination[keys[index]] = currentScource[keys[index]];\n    }\n  }\n}\n```\n\n源码分析:\n\n```javascript\nlet createAssigner = function (keysFunc, undefinedOnly) {\n  return function (obj) {\n    let length = arguments.length;\n    // 进行边界处理\n    // 当传入一个参数的时候或者 obj === null 的时候, 返回 obj\n    if (length < 2 || obj === null) return obj;\n    for (let index = 1; index < length; index++) {\n      // 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得\n      let source = arguments[index];\n           keys = keysFunc(source);\n           l = keys.length;\n      for (let i = 0; i < l; i++) {\n        let key = keys[i];\n        // 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候\n        // 接下来判断 obj[key] 是否为 undefined(void 0)\n        if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n      }     \n    }\n  }\n}\n```\n\n#### `extendOwn`\n\n使用  `extendOwn` 实现的效果类似于使用  `extends`, 实现的效果是只是复制自己的属性到目标对象。\n\n`_.extendOwn(destination, *source)`\n\n复制 `source` 属性的值到 `destination` 只是复制自身的属性。(不包括继承的属性)\n\n这个函数与 `_.extend` 的不同之处在于不会将 `source` 对象中继承到的属性复制到 `destination` 之中。\n\n使用 `extendOwn` 与 `extend` 的不同在于: 源码不同\n\n```javascript\n// 使用 _.allKeys 获得到包括自身和继承得到的属性\n_.extend = createAssigner(_.allKeys);\n// 使用 extendOwn 获得到仅仅包括自身的属性\n_.extendOwn = _.assign = createAssigner(_.keys);\n```\n\n#### `pick`\n\n`_.pick(object, *keys)`  \n\n使用这个属性用于返回 `object` 副本, 过滤出  `keys(有效的键组成的数组)` 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key\n\n使用 `pick` 的源码如下。\n\n```javascript\n_.pick = function(object, oiteratee, context) {\n  let result = {}, obj = object, iteratee, keys;\n  if (obj == null) return result;\n  // 如果 oiteratee 是一个函数的话\n  if (_.isFunction(oiteratee)) {\n    // 使用 _.allKeys 获得到 obj 中的所有键\n    keys = _.allKeys(obj);\n    iteratee = optiomizeCb(oiteratee, context);\n  } else {\n    // 如果 oiteratee 不是一个函数的时候\n    // 表示这时候用于筛选出对象 object 中包含 keys 的内容\n    // 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识\n    keys = flatten(arguments, false, false, 1);\n    // 返回在 obj 中的 key\n    iteratee = function(value, key, obj) { return key in obj; };\n    obj = Object(obj);\n  }\n  for (let i = 0; length = keys.length; i < length; i++) {\n    let key = keys[i];\n    let value = obj[key];\n    // 这里通过使用不同的函数来实现对于不同情况下的处理条件\n    // 通过改变 iteratee 函数的不同来实现不同的处理流程\n    // if (iteratee(value, key, obj))\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n}\n```\n\n上面中有一个 `flatten` 函数, 使用 `flatten` 函数的目的是将多层嵌套的数组转化为一维数组。\n\n`flatten`源码:\n\n```\nlet flatten = function(input, shallow, strict, startIndex) {\n  let output = [], idx = 0;\n  for (let i = startIndex || 0, length = getLength(input); i < length; i++) {\n    let value = input[i];\n    if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n      if (!shallow) value = flatten(value, shallow, strict);\n      let j = 0; len = value.length;\n      output.length += len;\n      while (j < len) {\n        output[idex++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n```\n\n自己写的函数: `pick`\n\n```javascript\nfunction pick(obj, oiteratee) {\n  // 边界处理 如果 obj === null 或者 typeof obj !== 'object'\n  // 返回一个空对象\n  if (obj === null || typeof obj !== 'object') {\n    return {};\n  }\n  let output = {};\n  let keys = Object.keys(obj);\n  let len = keys.length;\n  let iteratee;\n  let choiceKeys = Array.prototype.slice.call(arguments, 1);\n  if (typeof oiteratee === 'function') {\n    iteratee = oiteratee;\n  } else {\n    iteratee = function (value, key) { retutn choiceKeys.includes(key); };\n  }\n  for (let i = 0; i < len; i++) {\n    let key = keys[i];\n    if (iteratee(obj[key], key)) output[key] = obj[key];\n  }\n  return output;\n}\n```\n\n#### `omit` \n\n`omit(object, *keys)`\n\n使用 `omit` 函数的目的是与使用 `pick` 函数相反，返回一个 `object` 副本，过滤出除去  `keys` 中的属性值，或者接收一个判断函数，指定忽略哪一个 `key` 值。\n\n`omit` 源码如下:\n\n```javascript\n_.omit = function (obj, iteratee, context) {\n  if (_.isFunction(iteratee))　{\n    iteratee = _.negate(iteratee);\n  } else {\n    let keys = _.map(flatten(arguments, false, false, 1), String);\n    iteratee = function() {\n      return !_.contains(keys, key)\n    };\n  }\n  return _.pick(obj, iteratee, context);\n}\n```\n\n####   `default`\n\n`_.defaults(object, *defaults)`\n\n使用 `default` 的目的是使用 `default` 对象填充 `object` 中的 `undefined` 属性，并且返回这个 `object`。\n\n当 `object` 中存在 `default` 中的属性被填充的时候，使用 `defaults` 方法不会起作用。\n\n使用 `_.defaults` 方法的时候源码如下:\n\n```javascript\n// 使用 createAssigner(keysFunc, undefinedOnly);\n// 传递两个参数： keysFunc 表示对于键的处理函数\n// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性\n_.default = createAssigner(_.allKeys, true);\n```\n\n在 `createAssigner` 的函数中使用 `_.default` 方法主要是使用下面的这句函数:\n\n```\n// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined\nif (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n```\n\n","slug":"underscore-js源码分析-十四","published":1,"updated":"2017-12-14T15:07:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9q0039s33geix5a239","content":"<h3 id=\"underscore-js-源码分析-十四\"><a href=\"#underscore-js-源码分析-十四\" class=\"headerlink\" title=\"underscore.js 源码分析(十四)\"></a>underscore.js 源码分析(十四)</h3><p><code>extend</code> <code>extendOwn</code> <code>pick</code> <code>omit</code>  <code>default</code></p>\n<h4 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a><code>extend</code></h4><p><code>_.extend(destination, *sources)</code></p>\n<p>将多个对象  <code>souces</code> 覆盖到 <code>destination</code> 上面，返回被覆盖掉的 <code>destination</code> 上面。</p>\n<p>使用 <code>extend</code> 类似于使用 <code>Object.assign</code> 用来将多个对象进行合并。</p>\n<p>自己写的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">destination</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sources = <span class=\"built_in\">Array</span>.prototyep.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = sources.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currrentSource = sources[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = _.keys(currentSource);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; keys.length; index++) &#123;</span><br><span class=\"line\">      destination[keys[index]] = currentScource[keys[index]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"comment\">// 进行边界处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 当传入一个参数的时候或者 obj === null 的时候, 返回 obj</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\">           keys = keysFunc(source);</span><br><span class=\"line\">           l = keys.length;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"comment\">// 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 接下来判断 obj[key] 是否为 undefined(void 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"extendOwn\"><a href=\"#extendOwn\" class=\"headerlink\" title=\"extendOwn\"></a><code>extendOwn</code></h4><p>使用  <code>extendOwn</code> 实现的效果类似于使用  <code>extends</code>, 实现的效果是只是复制自己的属性到目标对象。</p>\n<p><code>_.extendOwn(destination, *source)</code></p>\n<p>复制 <code>source</code> 属性的值到 <code>destination</code> 只是复制自身的属性。(不包括继承的属性)</p>\n<p>这个函数与 <code>_.extend</code> 的不同之处在于不会将 <code>source</code> 对象中继承到的属性复制到 <code>destination</code> 之中。</p>\n<p>使用 <code>extendOwn</code> 与 <code>extend</code> 的不同在于: 源码不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 _.allKeys 获得到包括自身和继承得到的属性</span></span><br><span class=\"line\">_.extend = createAssigner(_.allKeys);</span><br><span class=\"line\"><span class=\"comment\">// 使用 extendOwn 获得到仅仅包括自身的属性</span></span><br><span class=\"line\">_.extendOwn = _.assign = createAssigner(_.keys);</span><br></pre></td></tr></table></figure>\n<h4 id=\"pick\"><a href=\"#pick\" class=\"headerlink\" title=\"pick\"></a><code>pick</code></h4><p><code>_.pick(object, *keys)</code>  </p>\n<p>使用这个属性用于返回 <code>object</code> 副本, 过滤出  <code>keys(有效的键组成的数组)</code> 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key</p>\n<p>使用 <code>pick</code> 的源码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;, obj = object, iteratee, keys;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 oiteratee 是一个函数的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.allKeys 获得到 obj 中的所有键</span></span><br><span class=\"line\">    keys = _.allKeys(obj);</span><br><span class=\"line\">    iteratee = optiomizeCb(oiteratee, context);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 oiteratee 不是一个函数的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示这时候用于筛选出对象 object 中包含 keys 的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识</span></span><br><span class=\"line\">    keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回在 obj 中的 key</span></span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[key];</span><br><span class=\"line\">    <span class=\"comment\">// 这里通过使用不同的函数来实现对于不同情况下的处理条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过改变 iteratee 函数的不同来实现不同的处理流程</span></span><br><span class=\"line\">    <span class=\"comment\">// if (iteratee(value, key, obj))</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中有一个 <code>flatten</code> 函数, 使用 <code>flatten</code> 函数的目的是将多层嵌套的数组转化为一维数组。</p>\n<p><code>flatten</code>源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flatten = function(input, shallow, strict, startIndex) &#123;</span><br><span class=\"line\">  let output = [], idx = 0;</span><br><span class=\"line\">  for (let i = startIndex || 0, length = getLength(input); i &lt; length; i++) &#123;</span><br><span class=\"line\">    let value = input[i];</span><br><span class=\"line\">    if (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">      if (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">      let j = 0; len = value.length;</span><br><span class=\"line\">      output.length += len;</span><br><span class=\"line\">      while (j &lt; len) &#123;</span><br><span class=\"line\">        output[idex++] = value[j++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (!strict) &#123;</span><br><span class=\"line\">      output[idx++] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自己写的函数: <code>pick</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, oiteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界处理 如果 obj === null 或者 typeof obj !== 'object'</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> iteratee;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> choiceKeys = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> oiteratee === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    iteratee = oiteratee;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123; retutn choiceKeys.includes(key); &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(obj[key], key)) output[key] = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"omit\"><a href=\"#omit\" class=\"headerlink\" title=\"omit\"></a><code>omit</code></h4><p><code>omit(object, *keys)</code></p>\n<p>使用 <code>omit</code> 函数的目的是与使用 <code>pick</code> 函数相反，返回一个 <code>object</code> 副本，过滤出除去  <code>keys</code> 中的属性值，或者接收一个判断函数，指定忽略哪一个 <code>key</code> 值。</p>\n<p><code>omit</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.omit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(iteratee))　&#123;</span><br><span class=\"line\">    iteratee = _.negate(iteratee);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(keys, key)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p><code>_.defaults(object, *defaults)</code></p>\n<p>使用 <code>default</code> 的目的是使用 <code>default</code> 对象填充 <code>object</code> 中的 <code>undefined</code> 属性，并且返回这个 <code>object</code>。</p>\n<p>当 <code>object</code> 中存在 <code>default</code> 中的属性被填充的时候，使用 <code>defaults</code> 方法不会起作用。</p>\n<p>使用 <code>_.defaults</code> 方法的时候源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 createAssigner(keysFunc, undefinedOnly);</span></span><br><span class=\"line\"><span class=\"comment\">// 传递两个参数： keysFunc 表示对于键的处理函数</span></span><br><span class=\"line\"><span class=\"comment\">// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性</span></span><br><span class=\"line\">_.default = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>在 <code>createAssigner</code> 的函数中使用 <code>_.default</code> 方法主要是使用下面的这句函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined</span><br><span class=\"line\">if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"underscore-js-源码分析-十四\"><a href=\"#underscore-js-源码分析-十四\" class=\"headerlink\" title=\"underscore.js 源码分析(十四)\"></a>underscore.js 源码分析(十四)</h3><p><code>extend</code> <code>extendOwn</code> <code>pick</code> <code>omit</code>  <code>default</code></p>\n<h4 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a><code>extend</code></h4><p><code>_.extend(destination, *sources)</code></p>\n<p>将多个对象  <code>souces</code> 覆盖到 <code>destination</code> 上面，返回被覆盖掉的 <code>destination</code> 上面。</p>\n<p>使用 <code>extend</code> 类似于使用 <code>Object.assign</code> 用来将多个对象进行合并。</p>\n<p>自己写的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">destination</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sources = <span class=\"built_in\">Array</span>.prototyep.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = sources.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currrentSource = sources[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = _.keys(currentSource);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; keys.length; index++) &#123;</span><br><span class=\"line\">      destination[keys[index]] = currentScource[keys[index]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码分析:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">keysFunc, undefinedOnly</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">    <span class=\"comment\">// 进行边界处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 当传入一个参数的时候或者 obj === null 的时候, 返回 obj</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length &lt; <span class=\"number\">2</span> || obj === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要对于额外传入的参数进行循环的时候使用 arguments[index] 进行获得</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> source = <span class=\"built_in\">arguments</span>[index];</span><br><span class=\"line\">           keys = keysFunc(source);</span><br><span class=\"line\">           l = keys.length;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"comment\">// 这里面使用了 undefinedOnly 如果 undefinedOnly 是 true 的时候</span></span><br><span class=\"line\">        <span class=\"comment\">// 接下来判断 obj[key] 是否为 undefined(void 0)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!undefinedOnly || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) obj[key] = source[key];</span><br><span class=\"line\">      &#125;     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"extendOwn\"><a href=\"#extendOwn\" class=\"headerlink\" title=\"extendOwn\"></a><code>extendOwn</code></h4><p>使用  <code>extendOwn</code> 实现的效果类似于使用  <code>extends</code>, 实现的效果是只是复制自己的属性到目标对象。</p>\n<p><code>_.extendOwn(destination, *source)</code></p>\n<p>复制 <code>source</code> 属性的值到 <code>destination</code> 只是复制自身的属性。(不包括继承的属性)</p>\n<p>这个函数与 <code>_.extend</code> 的不同之处在于不会将 <code>source</code> 对象中继承到的属性复制到 <code>destination</code> 之中。</p>\n<p>使用 <code>extendOwn</code> 与 <code>extend</code> 的不同在于: 源码不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 _.allKeys 获得到包括自身和继承得到的属性</span></span><br><span class=\"line\">_.extend = createAssigner(_.allKeys);</span><br><span class=\"line\"><span class=\"comment\">// 使用 extendOwn 获得到仅仅包括自身的属性</span></span><br><span class=\"line\">_.extendOwn = _.assign = createAssigner(_.keys);</span><br></pre></td></tr></table></figure>\n<h4 id=\"pick\"><a href=\"#pick\" class=\"headerlink\" title=\"pick\"></a><code>pick</code></h4><p><code>_.pick(object, *keys)</code>  </p>\n<p>使用这个属性用于返回 <code>object</code> 副本, 过滤出  <code>keys(有效的键组成的数组)</code> 参数指定的属性值，或者接受一个判断函数，指定挑选哪一个 key</p>\n<p>使用 <code>pick</code> 的源码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.pick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, oiteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;, obj = object, iteratee, keys;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 oiteratee 是一个函数的话</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(oiteratee)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 _.allKeys 获得到 obj 中的所有键</span></span><br><span class=\"line\">    keys = _.allKeys(obj);</span><br><span class=\"line\">    iteratee = optiomizeCb(oiteratee, context);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 oiteratee 不是一个函数的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示这时候用于筛选出对象 object 中包含 keys 的内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 效果是相同于 Array.prototype.slice.call(arguments, 1); 相识</span></span><br><span class=\"line\">    keys = flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回在 obj 中的 key</span></span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key, obj</span>) </span>&#123; <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> obj; &#125;;</span><br><span class=\"line\">    obj = <span class=\"built_in\">Object</span>(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; length = keys.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = obj[key];</span><br><span class=\"line\">    <span class=\"comment\">// 这里通过使用不同的函数来实现对于不同情况下的处理条件</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过改变 iteratee 函数的不同来实现不同的处理流程</span></span><br><span class=\"line\">    <span class=\"comment\">// if (iteratee(value, key, obj))</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(value, key, obj)) result[key] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面中有一个 <code>flatten</code> 函数, 使用 <code>flatten</code> 函数的目的是将多层嵌套的数组转化为一维数组。</p>\n<p><code>flatten</code>源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let flatten = function(input, shallow, strict, startIndex) &#123;</span><br><span class=\"line\">  let output = [], idx = 0;</span><br><span class=\"line\">  for (let i = startIndex || 0, length = getLength(input); i &lt; length; i++) &#123;</span><br><span class=\"line\">    let value = input[i];</span><br><span class=\"line\">    if (isArrayLike(value) &amp;&amp; (_.isArray(value) || _.isArguments(value))) &#123;</span><br><span class=\"line\">      if (!shallow) value = flatten(value, shallow, strict);</span><br><span class=\"line\">      let j = 0; len = value.length;</span><br><span class=\"line\">      output.length += len;</span><br><span class=\"line\">      while (j &lt; len) &#123;</span><br><span class=\"line\">        output[idex++] = value[j++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (!strict) &#123;</span><br><span class=\"line\">      output[idx++] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自己写的函数: <code>pick</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pick</span>(<span class=\"params\">obj, oiteratee</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界处理 如果 obj === null 或者 typeof obj !== 'object'</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = keys.length;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> iteratee;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> choiceKeys = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> oiteratee === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    iteratee = oiteratee;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123; retutn choiceKeys.includes(key); &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee(obj[key], key)) output[key] = obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"omit\"><a href=\"#omit\" class=\"headerlink\" title=\"omit\"></a><code>omit</code></h4><p><code>omit(object, *keys)</code></p>\n<p>使用 <code>omit</code> 函数的目的是与使用 <code>pick</code> 函数相反，返回一个 <code>object</code> 副本，过滤出除去  <code>keys</code> 中的属性值，或者接收一个判断函数，指定忽略哪一个 <code>key</code> 值。</p>\n<p><code>omit</code> 源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.omit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_.isFunction(iteratee))　&#123;</span><br><span class=\"line\">    iteratee = _.negate(iteratee);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> keys = _.map(flatten(<span class=\"built_in\">arguments</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"number\">1</span>), <span class=\"built_in\">String</span>);</span><br><span class=\"line\">    iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_.contains(keys, key)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.pick(obj, iteratee, context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"default\"><a href=\"#default\" class=\"headerlink\" title=\"default\"></a><code>default</code></h4><p><code>_.defaults(object, *defaults)</code></p>\n<p>使用 <code>default</code> 的目的是使用 <code>default</code> 对象填充 <code>object</code> 中的 <code>undefined</code> 属性，并且返回这个 <code>object</code>。</p>\n<p>当 <code>object</code> 中存在 <code>default</code> 中的属性被填充的时候，使用 <code>defaults</code> 方法不会起作用。</p>\n<p>使用 <code>_.defaults</code> 方法的时候源码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 createAssigner(keysFunc, undefinedOnly);</span></span><br><span class=\"line\"><span class=\"comment\">// 传递两个参数： keysFunc 表示对于键的处理函数</span></span><br><span class=\"line\"><span class=\"comment\">// undefinedOnly 表示是否只是复制目标对象中值为 undefined 的属性</span></span><br><span class=\"line\">_.default = createAssigner(_.allKeys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>在 <code>createAssigner</code> 的函数中使用 <code>_.default</code> 方法主要是使用下面的这句函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 当 undefinedOnly 为 true 的时候, 接下来进行判断 obj[key] === void 0 对象的属性是否为 undefined</span><br><span class=\"line\">if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];</span><br></pre></td></tr></table></figure>\n"},{"title":"vertical-align && line-height","date":"2018-03-26T12:35:00.000Z","_content":"\n### vertical-align\n\n关于 `vertical-align` 的字面意思是垂直居中的意思， 其中 `vertical-align` 有下面几种支持的属性：\n\n| 值               | 含义                                       |\n| --------------- | ---------------------------------------- |\n| `baseline`(初始值) | 一个元素的基线和父元素的基线对齐                         |\n| `sub`           | 将元素作为一个下标，该元素的基线会相当于父元素的基线降低             |\n| `super`         | 将元素作为一个上标， 该元素的基线会相当于父元素的基线升高            |\n| `top`           | 把对齐的子元素的顶端与父元素顶端对齐。                      |\n| `text-top`      | 类似于使用 `text-bottom` ， 将元素行内文本的顶端与父元素的顶端对齐 |\n| `middle`        | 居中对齐，常用于图像的垂直居中                          |\n| `bottom`        | 将元素行内框的低端与父元素的低端对齐                       |\n| `text-bottom`   | 行内文本的底端与行框的低端对齐                          |\n| `百分数`           | 将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 `line-height` 的百分数。 |\n| `length`        | 使用 `length` 用于将元素升高或者降低指定的距离             |\n| `inherit`       | 从父元素下继承属性                                |\n\n*注意：这里的 `vertical-align` 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 `vertical-align` 的影响。*\n\n`vertical-align` 作用效果在图像垂直居中的时候的作用：\n\n```html\n<div class=\"wrap\">\n  <img class=\"img\" alt=\"这是一张图片\">\n</div>\n```\n\n我们知道对于行内元素的垂直居中我们可以使用 `line-height = height` 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：\n\n```css\n.wrap {\n    width: 200px;\n    height: 300px;\n    line-height: 300px;\n    background-color: blue;\n}\n.img {\n    width: 50px;\n    height: 50px;\n}\n```\n\n结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/vertical-align.png)\n\n如上图所示， 使用 `line-height = height` 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 `img` 元素上添加 `vertical-align:middle` 效果， 最终效果如下：\n\n```css\n.img {\n    vertical-align: middle;\n}\n```\n\n​                                                ![](http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png)  \n\n注意： 这里的 `vertical-align` 主要参照的是父元素的行高， 因此在设置 `vertical-align: middle` 的时候，需要将父元素的 `line-height` 设置为 父元素的 `height` 高度。\n\n####  `vertical-align:middle`  \n\n`vertical-align: middle` 经常用于图像的居中， 我们要注意的一点就是，当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐， 这里的 *1ex* 是相对于父元素的 `font-size` 进行定义的，例如下面这个例子：\n\n```html\n<span class=\"allDemo\">\n\t<span class=\"demo1\">我是一段文字</span><span class=\"demo2\">我是第二段文字</span>\n</span>\n```\n\n*对于 demo1 进行 `vertical-align: middle`*: \n\n```css\n.allDemo {\n\tdisplay: inline-block;\n\tbackground-color: lightslategray;\n}\n.demo2 {\n\tline-height: 100px;\n\tbackground-color: lightgreen;\n}\n.demo1{\n\tbackground-color: lightcoral;\n\tvertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png)\n\n如上图所示， `class = \"demo2\"` 这段文字， `vertical-align` 默认是 `baseline`,其元素框底端是与行框的基线对齐的，`demo1` 相比于 `demo2` 元素而言， 元素下移， 这是 `vertical-align: middle` 之后的结果， 图示如下:\n\n![](https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png)\n\n如果我们将父元素的 `font-size` 置为0， 我们将会看到下面的情况：\n\n代码如下：\n\n```css\n.allDemo { font-size: 0px };\n.demo1 { font-size: 16px };\n.demo2 { font-size: 16px };\n```\n\n\n\n![](https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png)\n\n`vertical-align` 各属性作用位置如下：\n\n![](https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png)\n\n\n\n### line-height\n\n###  `line-height` 与 `line box` 之间的关系\n`line-height` 从字面意义上来讲， 是 `行高` 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 `line-height` 之前，我们先来认识一下 `line boxes` 和 `inline boxes` 这两个东西。\n#### `line boxes`  与 `inline boxes`  \n`inline boxes` : 可以认为是包裹在 `inline` 元素外面的的一层外层， 例如 `span` 元素， `img` 图片元素等 `inline` 形式的元素，对于 `inline` 水平的元素，都会形成一层的 `inline boxes` 进行包裹。  \n`line boxex` : 对于 `line boxes` 你可以认为 `line boxes` 用于包裹一行元素， 也就是说，对于一行 `inline` 水平的元素而言， 在外面有一个 `line boxes` 进行包裹， 如果一行有多个 `inline` 水平的元素，那么，这一行的 `line boxes` 就会包含有多个的 `inline boxex`。\n**对于 `line boxes` 的元素的高度， 他的高度是获取该 `box` 下面的所有的 `inline boxes` 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 `line boxes` 的最大高度**。\n\n**这里 `inline boxes` 的高度是什么呢？ 就是今天我们要说的 `line-height`**.\n行高具体来讲就是两行文字之间基线之间的距离：  \n如下图所示：\n![image](https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png)\n上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 `vertical-align` 改变的就是基线的高低大小。 \n\n#### 使用 `line-height` 实现的垂直居中实现\n我们经常使用 `line-height = height` 实现行内元素的垂直居中效果， 这里的 `height` ， 更为确切的说是  我们将要居中 `line boxes` 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。\n\n#### 使用 `line-height = height` 在图片中垂直居中效果的失效。\nhtml:\n```html\n<div class=\"demo\">\n        <img src=\"./picture.png\" alt=\"垂直居中的图片\" class=\"img\">\n</div>\n```\n\nCSS:\n```css\n.demo {\n    display: inline-block;\n    line-height: 150px;\n    height: 150px;\n    background-color: lightblue;\n}\n.img {\t\n    height: 50px;\n}\n```\n最终结果如下：\n\n![image](https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png)\n\n并没有居中！\n\n对于图片元素而言， 使用 `line-height = height` 并不能实现元素的垂直居中，要想实现这种效果， 就需要 `vertcial-align: middle` 出马了。\n\n但是使用 `vertical-align:middle` 就能保证万无一失了吗？\n\n### `font-size: 0px` 在图片居中时的应用\n\n在讲解 `vertical-align:middle` 的时候， 我们使用 `vertical-align: middle` 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。\n\n```html\n<div class=\"imgWrap\">\n\t<img src=\"img.png\" class=\"img\">\n</div>\n```\n\n```css\n.imgWrap {\n    line-height: 40px;\n    background-color: lightblue;\n}\n.img {\n    width: 50px;\n    height: 30px;\n    vertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png)\n\n我们看到，这个时候使用 `vertical-align:middle` 并没有实现真正的垂直居中， 原因是什么呢？\n\n因为就如同我们刚才说的那样：\n\n>当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐\n\n我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 `vertical-align` 的时候并不是这样， 为了解决这个问题， 我们使用了`font-size: 0`这个属性。\n\n代码如下：\n\n```CSS\n.imgWrap {\n  font-size: 0;\n}\n```\n\n居中成功！\n\n![mark](http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png)\n\n`font-size: 0px` 起的作用是：\n\n1. 基线和中线之间的距离是根据字母  `x` 的高度进行计算的， 通过设置 `font-size` 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。\n2. 使用 `vertical-align:middle` 对齐的不是父元素的基线， 而是基线上面  `0.5ex` 这样一个高度的点， 但是这个高度是由父元素的 `font-size` 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   \n\n### 参考链接\n\n[张鑫旭：css行高line-height的一些深入理解及应用](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/) ","source":"_posts/vertical-align.md","raw":"---\ntitle: vertical-align && line-height\ndate: 2018-03-26 20:35:00\ntags: vertical-align && line-height\ncategories: CSS\n---\n\n### vertical-align\n\n关于 `vertical-align` 的字面意思是垂直居中的意思， 其中 `vertical-align` 有下面几种支持的属性：\n\n| 值               | 含义                                       |\n| --------------- | ---------------------------------------- |\n| `baseline`(初始值) | 一个元素的基线和父元素的基线对齐                         |\n| `sub`           | 将元素作为一个下标，该元素的基线会相当于父元素的基线降低             |\n| `super`         | 将元素作为一个上标， 该元素的基线会相当于父元素的基线升高            |\n| `top`           | 把对齐的子元素的顶端与父元素顶端对齐。                      |\n| `text-top`      | 类似于使用 `text-bottom` ， 将元素行内文本的顶端与父元素的顶端对齐 |\n| `middle`        | 居中对齐，常用于图像的垂直居中                          |\n| `bottom`        | 将元素行内框的低端与父元素的低端对齐                       |\n| `text-bottom`   | 行内文本的底端与行框的低端对齐                          |\n| `百分数`           | 将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 `line-height` 的百分数。 |\n| `length`        | 使用 `length` 用于将元素升高或者降低指定的距离             |\n| `inherit`       | 从父元素下继承属性                                |\n\n*注意：这里的 `vertical-align` 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 `vertical-align` 的影响。*\n\n`vertical-align` 作用效果在图像垂直居中的时候的作用：\n\n```html\n<div class=\"wrap\">\n  <img class=\"img\" alt=\"这是一张图片\">\n</div>\n```\n\n我们知道对于行内元素的垂直居中我们可以使用 `line-height = height` 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：\n\n```css\n.wrap {\n    width: 200px;\n    height: 300px;\n    line-height: 300px;\n    background-color: blue;\n}\n.img {\n    width: 50px;\n    height: 50px;\n}\n```\n\n结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/vertical-align.png)\n\n如上图所示， 使用 `line-height = height` 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 `img` 元素上添加 `vertical-align:middle` 效果， 最终效果如下：\n\n```css\n.img {\n    vertical-align: middle;\n}\n```\n\n​                                                ![](http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png)  \n\n注意： 这里的 `vertical-align` 主要参照的是父元素的行高， 因此在设置 `vertical-align: middle` 的时候，需要将父元素的 `line-height` 设置为 父元素的 `height` 高度。\n\n####  `vertical-align:middle`  \n\n`vertical-align: middle` 经常用于图像的居中， 我们要注意的一点就是，当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐， 这里的 *1ex* 是相对于父元素的 `font-size` 进行定义的，例如下面这个例子：\n\n```html\n<span class=\"allDemo\">\n\t<span class=\"demo1\">我是一段文字</span><span class=\"demo2\">我是第二段文字</span>\n</span>\n```\n\n*对于 demo1 进行 `vertical-align: middle`*: \n\n```css\n.allDemo {\n\tdisplay: inline-block;\n\tbackground-color: lightslategray;\n}\n.demo2 {\n\tline-height: 100px;\n\tbackground-color: lightgreen;\n}\n.demo1{\n\tbackground-color: lightcoral;\n\tvertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png)\n\n如上图所示， `class = \"demo2\"` 这段文字， `vertical-align` 默认是 `baseline`,其元素框底端是与行框的基线对齐的，`demo1` 相比于 `demo2` 元素而言， 元素下移， 这是 `vertical-align: middle` 之后的结果， 图示如下:\n\n![](https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png)\n\n如果我们将父元素的 `font-size` 置为0， 我们将会看到下面的情况：\n\n代码如下：\n\n```css\n.allDemo { font-size: 0px };\n.demo1 { font-size: 16px };\n.demo2 { font-size: 16px };\n```\n\n\n\n![](https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png)\n\n`vertical-align` 各属性作用位置如下：\n\n![](https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png)\n\n\n\n### line-height\n\n###  `line-height` 与 `line box` 之间的关系\n`line-height` 从字面意义上来讲， 是 `行高` 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 `line-height` 之前，我们先来认识一下 `line boxes` 和 `inline boxes` 这两个东西。\n#### `line boxes`  与 `inline boxes`  \n`inline boxes` : 可以认为是包裹在 `inline` 元素外面的的一层外层， 例如 `span` 元素， `img` 图片元素等 `inline` 形式的元素，对于 `inline` 水平的元素，都会形成一层的 `inline boxes` 进行包裹。  \n`line boxex` : 对于 `line boxes` 你可以认为 `line boxes` 用于包裹一行元素， 也就是说，对于一行 `inline` 水平的元素而言， 在外面有一个 `line boxes` 进行包裹， 如果一行有多个 `inline` 水平的元素，那么，这一行的 `line boxes` 就会包含有多个的 `inline boxex`。\n**对于 `line boxes` 的元素的高度， 他的高度是获取该 `box` 下面的所有的 `inline boxes` 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 `line boxes` 的最大高度**。\n\n**这里 `inline boxes` 的高度是什么呢？ 就是今天我们要说的 `line-height`**.\n行高具体来讲就是两行文字之间基线之间的距离：  \n如下图所示：\n![image](https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png)\n上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 `vertical-align` 改变的就是基线的高低大小。 \n\n#### 使用 `line-height` 实现的垂直居中实现\n我们经常使用 `line-height = height` 实现行内元素的垂直居中效果， 这里的 `height` ， 更为确切的说是  我们将要居中 `line boxes` 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。\n\n#### 使用 `line-height = height` 在图片中垂直居中效果的失效。\nhtml:\n```html\n<div class=\"demo\">\n        <img src=\"./picture.png\" alt=\"垂直居中的图片\" class=\"img\">\n</div>\n```\n\nCSS:\n```css\n.demo {\n    display: inline-block;\n    line-height: 150px;\n    height: 150px;\n    background-color: lightblue;\n}\n.img {\t\n    height: 50px;\n}\n```\n最终结果如下：\n\n![image](https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png)\n\n并没有居中！\n\n对于图片元素而言， 使用 `line-height = height` 并不能实现元素的垂直居中，要想实现这种效果， 就需要 `vertcial-align: middle` 出马了。\n\n但是使用 `vertical-align:middle` 就能保证万无一失了吗？\n\n### `font-size: 0px` 在图片居中时的应用\n\n在讲解 `vertical-align:middle` 的时候， 我们使用 `vertical-align: middle` 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。\n\n```html\n<div class=\"imgWrap\">\n\t<img src=\"img.png\" class=\"img\">\n</div>\n```\n\n```css\n.imgWrap {\n    line-height: 40px;\n    background-color: lightblue;\n}\n.img {\n    width: 50px;\n    height: 30px;\n    vertical-align: middle;\n}\n```\n\n![](https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png)\n\n我们看到，这个时候使用 `vertical-align:middle` 并没有实现真正的垂直居中， 原因是什么呢？\n\n因为就如同我们刚才说的那样：\n\n>当元素设置 `vertical-align: middle` 的时候，这个属性会将行内元素框的中点与父元素的基线上方 *0.5ex* 处的一个点进行对齐\n\n我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 `vertical-align` 的时候并不是这样， 为了解决这个问题， 我们使用了`font-size: 0`这个属性。\n\n代码如下：\n\n```CSS\n.imgWrap {\n  font-size: 0;\n}\n```\n\n居中成功！\n\n![mark](http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png)\n\n`font-size: 0px` 起的作用是：\n\n1. 基线和中线之间的距离是根据字母  `x` 的高度进行计算的， 通过设置 `font-size` 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。\n2. 使用 `vertical-align:middle` 对齐的不是父元素的基线， 而是基线上面  `0.5ex` 这样一个高度的点， 但是这个高度是由父元素的 `font-size` 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   \n\n### 参考链接\n\n[张鑫旭：css行高line-height的一些深入理解及应用](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/) ","slug":"vertical-align","published":1,"updated":"2018-03-31T17:33:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9t003es33gh74symjg","content":"<h3 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h3><p>关于 <code>vertical-align</code> 的字面意思是垂直居中的意思， 其中 <code>vertical-align</code> 有下面几种支持的属性：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseline</code>(初始值)</td>\n<td>一个元素的基线和父元素的基线对齐</td>\n</tr>\n<tr>\n<td><code>sub</code></td>\n<td>将元素作为一个下标，该元素的基线会相当于父元素的基线降低</td>\n</tr>\n<tr>\n<td><code>super</code></td>\n<td>将元素作为一个上标， 该元素的基线会相当于父元素的基线升高</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>把对齐的子元素的顶端与父元素顶端对齐。</td>\n</tr>\n<tr>\n<td><code>text-top</code></td>\n<td>类似于使用 <code>text-bottom</code> ， 将元素行内文本的顶端与父元素的顶端对齐</td>\n</tr>\n<tr>\n<td><code>middle</code></td>\n<td>居中对齐，常用于图像的垂直居中</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td>将元素行内框的低端与父元素的低端对齐</td>\n</tr>\n<tr>\n<td><code>text-bottom</code></td>\n<td>行内文本的底端与行框的低端对齐</td>\n</tr>\n<tr>\n<td><code>百分数</code></td>\n<td>将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 <code>line-height</code> 的百分数。</td>\n</tr>\n<tr>\n<td><code>length</code></td>\n<td>使用 <code>length</code> 用于将元素升高或者降低指定的距离</td>\n</tr>\n<tr>\n<td><code>inherit</code></td>\n<td>从父元素下继承属性</td>\n</tr>\n</tbody>\n</table>\n<p><em>注意：这里的 <code>vertical-align</code> 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 <code>vertical-align</code> 的影响。</em></p>\n<p><code>vertical-align</code> 作用效果在图像垂直居中的时候的作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"这是一张图片\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们知道对于行内元素的垂直居中我们可以使用 <code>line-height = height</code> 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align.png\" alt=\"\"></p>\n<p>如上图所示， 使用 <code>line-height = height</code> 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 <code>img</code> 元素上添加 <code>vertical-align:middle</code> 效果， 最终效果如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​                                                <img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png\" alt=\"\">  </p>\n<p>注意： 这里的 <code>vertical-align</code> 主要参照的是父元素的行高， 因此在设置 <code>vertical-align: middle</code> 的时候，需要将父元素的 <code>line-height</code> 设置为 父元素的 <code>height</code> 高度。</p>\n<h4 id=\"vertical-align-middle\"><a href=\"#vertical-align-middle\" class=\"headerlink\" title=\"vertical-align:middle\"></a><code>vertical-align:middle</code></h4><p><code>vertical-align: middle</code> 经常用于图像的居中， 我们要注意的一点就是，当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐， 这里的 <em>1ex</em> 是相对于父元素的 <code>font-size</code> 进行定义的，例如下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"allDemo\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo1\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo2\"</span>&gt;</span>我是第二段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>对于 demo1 进行 <code>vertical-align: middle</code></em>: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightslategray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png\" alt=\"\"></p>\n<p>如上图所示， <code>class = &quot;demo2&quot;</code> 这段文字， <code>vertical-align</code> 默认是 <code>baseline</code>,其元素框底端是与行框的基线对齐的，<code>demo1</code> 相比于 <code>demo2</code> 元素而言， 元素下移， 这是 <code>vertical-align: middle</code> 之后的结果， 图示如下:</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png\" alt=\"\"></p>\n<p>如果我们将父元素的 <code>font-size</code> 置为0， 我们将会看到下面的情况：</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">0px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png\" alt=\"\"></p>\n<p><code>vertical-align</code> 各属性作用位置如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png\" alt=\"\"></p>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><h3 id=\"line-height-与-line-box-之间的关系\"><a href=\"#line-height-与-line-box-之间的关系\" class=\"headerlink\" title=\"line-height 与 line box 之间的关系\"></a><code>line-height</code> 与 <code>line box</code> 之间的关系</h3><p><code>line-height</code> 从字面意义上来讲， 是 <code>行高</code> 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 <code>line-height</code> 之前，我们先来认识一下 <code>line boxes</code> 和 <code>inline boxes</code> 这两个东西。</p>\n<h4 id=\"line-boxes-与-inline-boxes\"><a href=\"#line-boxes-与-inline-boxes\" class=\"headerlink\" title=\"line boxes  与 inline boxes\"></a><code>line boxes</code>  与 <code>inline boxes</code></h4><p><code>inline boxes</code> : 可以认为是包裹在 <code>inline</code> 元素外面的的一层外层， 例如 <code>span</code> 元素， <code>img</code> 图片元素等 <code>inline</code> 形式的元素，对于 <code>inline</code> 水平的元素，都会形成一层的 <code>inline boxes</code> 进行包裹。<br><code>line boxex</code> : 对于 <code>line boxes</code> 你可以认为 <code>line boxes</code> 用于包裹一行元素， 也就是说，对于一行 <code>inline</code> 水平的元素而言， 在外面有一个 <code>line boxes</code> 进行包裹， 如果一行有多个 <code>inline</code> 水平的元素，那么，这一行的 <code>line boxes</code> 就会包含有多个的 <code>inline boxex</code>。<br><strong>对于 <code>line boxes</code> 的元素的高度， 他的高度是获取该 <code>box</code> 下面的所有的 <code>inline boxes</code> 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 <code>line boxes</code> 的最大高度</strong>。</p>\n<p><strong>这里 <code>inline boxes</code> 的高度是什么呢？ 就是今天我们要说的 <code>line-height</code></strong>.<br>行高具体来讲就是两行文字之间基线之间的距离：<br>如下图所示：<br><img src=\"https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png\" alt=\"image\"><br>上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 <code>vertical-align</code> 改变的就是基线的高低大小。 </p>\n<h4 id=\"使用-line-height-实现的垂直居中实现\"><a href=\"#使用-line-height-实现的垂直居中实现\" class=\"headerlink\" title=\"使用 line-height 实现的垂直居中实现\"></a>使用 <code>line-height</code> 实现的垂直居中实现</h4><p>我们经常使用 <code>line-height = height</code> 实现行内元素的垂直居中效果， 这里的 <code>height</code> ， 更为确切的说是  我们将要居中 <code>line boxes</code> 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。</p>\n<h4 id=\"使用-line-height-height-在图片中垂直居中效果的失效。\"><a href=\"#使用-line-height-height-在图片中垂直居中效果的失效。\" class=\"headerlink\" title=\"使用 line-height = height 在图片中垂直居中效果的失效。\"></a>使用 <code>line-height = height</code> 在图片中垂直居中效果的失效。</h4><p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./picture.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"垂直居中的图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;\t</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png\" alt=\"image\"></p>\n<p>并没有居中！</p>\n<p>对于图片元素而言， 使用 <code>line-height = height</code> 并不能实现元素的垂直居中，要想实现这种效果， 就需要 <code>vertcial-align: middle</code> 出马了。</p>\n<p>但是使用 <code>vertical-align:middle</code> 就能保证万无一失了吗？</p>\n<h3 id=\"font-size-0px-在图片居中时的应用\"><a href=\"#font-size-0px-在图片居中时的应用\" class=\"headerlink\" title=\"font-size: 0px 在图片居中时的应用\"></a><code>font-size: 0px</code> 在图片居中时的应用</h3><p>在讲解 <code>vertical-align:middle</code> 的时候， 我们使用 <code>vertical-align: middle</code> 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgWrap\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png\" alt=\"\"></p>\n<p>我们看到，这个时候使用 <code>vertical-align:middle</code> 并没有实现真正的垂直居中， 原因是什么呢？</p>\n<p>因为就如同我们刚才说的那样：</p>\n<blockquote>\n<p>当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐</p>\n</blockquote>\n<p>我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 <code>vertical-align</code> 的时候并不是这样， 为了解决这个问题， 我们使用了<code>font-size: 0</code>这个属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>居中成功！</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png\" alt=\"mark\"></p>\n<p><code>font-size: 0px</code> 起的作用是：</p>\n<ol>\n<li>基线和中线之间的距离是根据字母  <code>x</code> 的高度进行计算的， 通过设置 <code>font-size</code> 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。</li>\n<li>使用 <code>vertical-align:middle</code> 对齐的不是父元素的基线， 而是基线上面  <code>0.5ex</code> 这样一个高度的点， 但是这个高度是由父元素的 <code>font-size</code> 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   </li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">张鑫旭：css行高line-height的一些深入理解及应用</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h3><p>关于 <code>vertical-align</code> 的字面意思是垂直居中的意思， 其中 <code>vertical-align</code> 有下面几种支持的属性：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>baseline</code>(初始值)</td>\n<td>一个元素的基线和父元素的基线对齐</td>\n</tr>\n<tr>\n<td><code>sub</code></td>\n<td>将元素作为一个下标，该元素的基线会相当于父元素的基线降低</td>\n</tr>\n<tr>\n<td><code>super</code></td>\n<td>将元素作为一个上标， 该元素的基线会相当于父元素的基线升高</td>\n</tr>\n<tr>\n<td><code>top</code></td>\n<td>把对齐的子元素的顶端与父元素顶端对齐。</td>\n</tr>\n<tr>\n<td><code>text-top</code></td>\n<td>类似于使用 <code>text-bottom</code> ， 将元素行内文本的顶端与父元素的顶端对齐</td>\n</tr>\n<tr>\n<td><code>middle</code></td>\n<td>居中对齐，常用于图像的垂直居中</td>\n</tr>\n<tr>\n<td><code>bottom</code></td>\n<td>将元素行内框的低端与父元素的低端对齐</td>\n</tr>\n<tr>\n<td><code>text-bottom</code></td>\n<td>行内文本的底端与行框的低端对齐</td>\n</tr>\n<tr>\n<td><code>百分数</code></td>\n<td>将元素的基线相对于父元素的基线升高或者降低指定的量， 这里的百分数是指相对于该元素的 <code>line-height</code> 的百分数。</td>\n</tr>\n<tr>\n<td><code>length</code></td>\n<td>使用 <code>length</code> 用于将元素升高或者降低指定的距离</td>\n</tr>\n<tr>\n<td><code>inherit</code></td>\n<td>从父元素下继承属性</td>\n</tr>\n</tbody>\n</table>\n<p><em>注意：这里的 <code>vertical-align</code> 影响的是行内元素， 行内块元素，以及表单元格的对齐，对于 块状元素不受 <code>vertical-align</code> 的影响。</em></p>\n<p><code>vertical-align</code> 作用效果在图像垂直居中的时候的作用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"这是一张图片\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们知道对于行内元素的垂直居中我们可以使用 <code>line-height = height</code> 的方法实现垂直居中的效果， 但是对于图像而言使用这种方法是失效的，例如下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align.png\" alt=\"\"></p>\n<p>如上图所示， 使用 <code>line-height = height</code> 并不能实现对于图片的垂直居中效果，为了实现图片的垂直居中， 在 <code>img</code> 元素上添加 <code>vertical-align:middle</code> 效果， 最终效果如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​                                                <img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-align2.png\" alt=\"\">  </p>\n<p>注意： 这里的 <code>vertical-align</code> 主要参照的是父元素的行高， 因此在设置 <code>vertical-align: middle</code> 的时候，需要将父元素的 <code>line-height</code> 设置为 父元素的 <code>height</code> 高度。</p>\n<h4 id=\"vertical-align-middle\"><a href=\"#vertical-align-middle\" class=\"headerlink\" title=\"vertical-align:middle\"></a><code>vertical-align:middle</code></h4><p><code>vertical-align: middle</code> 经常用于图像的居中， 我们要注意的一点就是，当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐， 这里的 <em>1ex</em> 是相对于父元素的 <code>font-size</code> 进行定义的，例如下面这个例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"allDemo\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo1\"</span>&gt;</span>我是一段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo2\"</span>&gt;</span>我是第二段文字<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>对于 demo1 进行 <code>vertical-align: middle</code></em>: </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightslategray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: lightcoral;</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38161994-9af821b2-350b-11e8-898a-6074bbff3262.png\" alt=\"\"></p>\n<p>如上图所示， <code>class = &quot;demo2&quot;</code> 这段文字， <code>vertical-align</code> 默认是 <code>baseline</code>,其元素框底端是与行框的基线对齐的，<code>demo1</code> 相比于 <code>demo2</code> 元素而言， 元素下移， 这是 <code>vertical-align: middle</code> 之后的结果， 图示如下:</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162080-78c48b88-350d-11e8-8d9c-378a8fc11606.png\" alt=\"\"></p>\n<p>如果我们将父元素的 <code>font-size</code> 置为0， 我们将会看到下面的情况：</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.allDemo</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">0px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br><span class=\"line\"><span class=\"selector-class\">.demo2</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162298-3cec1974-3511-11e8-8b4f-54709a46b049.png\" alt=\"\"></p>\n<p><code>vertical-align</code> 各属性作用位置如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38162270-cd4fcf8e-3510-11e8-9926-5cc120923396.png\" alt=\"\"></p>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><h3 id=\"line-height-与-line-box-之间的关系\"><a href=\"#line-height-与-line-box-之间的关系\" class=\"headerlink\" title=\"line-height 与 line box 之间的关系\"></a><code>line-height</code> 与 <code>line box</code> 之间的关系</h3><p><code>line-height</code> 从字面意义上来讲， 是 <code>行高</code> 的意思，在页面上表现出来的就是一行文字的高度， 在介绍 <code>line-height</code> 之前，我们先来认识一下 <code>line boxes</code> 和 <code>inline boxes</code> 这两个东西。</p>\n<h4 id=\"line-boxes-与-inline-boxes\"><a href=\"#line-boxes-与-inline-boxes\" class=\"headerlink\" title=\"line boxes  与 inline boxes\"></a><code>line boxes</code>  与 <code>inline boxes</code></h4><p><code>inline boxes</code> : 可以认为是包裹在 <code>inline</code> 元素外面的的一层外层， 例如 <code>span</code> 元素， <code>img</code> 图片元素等 <code>inline</code> 形式的元素，对于 <code>inline</code> 水平的元素，都会形成一层的 <code>inline boxes</code> 进行包裹。<br><code>line boxex</code> : 对于 <code>line boxes</code> 你可以认为 <code>line boxes</code> 用于包裹一行元素， 也就是说，对于一行 <code>inline</code> 水平的元素而言， 在外面有一个 <code>line boxes</code> 进行包裹， 如果一行有多个 <code>inline</code> 水平的元素，那么，这一行的 <code>line boxes</code> 就会包含有多个的 <code>inline boxex</code>。<br><strong>对于 <code>line boxes</code> 的元素的高度， 他的高度是获取该 <code>box</code> 下面的所有的 <code>inline boxes</code> 元素的高度 ， 比较获取他们中最大的高度， 最后这个最大的高度被认为是 <code>line boxes</code> 的最大高度</strong>。</p>\n<p><strong>这里 <code>inline boxes</code> 的高度是什么呢？ 就是今天我们要说的 <code>line-height</code></strong>.<br>行高具体来讲就是两行文字之间基线之间的距离：<br>如下图所示：<br><img src=\"https://user-images.githubusercontent.com/25844786/38088466-835a2b96-338e-11e8-82be-ac0a4a367222.png\" alt=\"image\"><br>上面的图中红线就是表示所谓的基线， 关于我们另外一个css 的属性 <code>vertical-align</code> 改变的就是基线的高低大小。 </p>\n<h4 id=\"使用-line-height-实现的垂直居中实现\"><a href=\"#使用-line-height-实现的垂直居中实现\" class=\"headerlink\" title=\"使用 line-height 实现的垂直居中实现\"></a>使用 <code>line-height</code> 实现的垂直居中实现</h4><p>我们经常使用 <code>line-height = height</code> 实现行内元素的垂直居中效果， 这里的 <code>height</code> ， 更为确切的说是  我们将要居中 <code>line boxes</code> 的高度进行居中， 因为对于行高而言具有一个垂直居中的性质。</p>\n<h4 id=\"使用-line-height-height-在图片中垂直居中效果的失效。\"><a href=\"#使用-line-height-height-在图片中垂直居中效果的失效。\" class=\"headerlink\" title=\"使用 line-height = height 在图片中垂直居中效果的失效。\"></a>使用 <code>line-height = height</code> 在图片中垂直居中效果的失效。</h4><p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./picture.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"垂直居中的图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;\t</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38089336-b99abea2-3391-11e8-81ee-5ffa5c6b736e.png\" alt=\"image\"></p>\n<p>并没有居中！</p>\n<p>对于图片元素而言， 使用 <code>line-height = height</code> 并不能实现元素的垂直居中，要想实现这种效果， 就需要 <code>vertcial-align: middle</code> 出马了。</p>\n<p>但是使用 <code>vertical-align:middle</code> 就能保证万无一失了吗？</p>\n<h3 id=\"font-size-0px-在图片居中时的应用\"><a href=\"#font-size-0px-在图片居中时的应用\" class=\"headerlink\" title=\"font-size: 0px 在图片居中时的应用\"></a><code>font-size: 0px</code> 在图片居中时的应用</h3><p>在讲解 <code>vertical-align:middle</code> 的时候， 我们使用 <code>vertical-align: middle</code> 实现了图片的垂直居中， 但是这个垂直居中只是近似的， 并不是真正的垂直居中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"imgWrap\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img.png\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/25844786/38165453-22d6400c-3546-11e8-9eb6-460cac7be56b.png\" alt=\"\"></p>\n<p>我们看到，这个时候使用 <code>vertical-align:middle</code> 并没有实现真正的垂直居中， 原因是什么呢？</p>\n<p>因为就如同我们刚才说的那样：</p>\n<blockquote>\n<p>当元素设置 <code>vertical-align: middle</code> 的时候，这个属性会将行内元素框的中点与父元素的基线上方 <em>0.5ex</em> 处的一个点进行对齐</p>\n</blockquote>\n<p>我们想要的结果是将行内元素框的中点和父元素的中点进行对齐，而使用 <code>vertical-align</code> 的时候并不是这样， 为了解决这个问题， 我们使用了<code>font-size: 0</code>这个属性。</p>\n<p>代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.imgWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>居中成功！</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/vertical-alignFontSize.png\" alt=\"mark\"></p>\n<p><code>font-size: 0px</code> 起的作用是：</p>\n<ol>\n<li>基线和中线之间的距离是根据字母  <code>x</code> 的高度进行计算的， 通过设置 <code>font-size</code> 为0， 使得 基线和中线在同一水平线上，从而使得图片元素框的中线和父元素的中线重合， 实现垂直对齐效果。</li>\n<li>使用 <code>vertical-align:middle</code> 对齐的不是父元素的基线， 而是基线上面  <code>0.5ex</code> 这样一个高度的点， 但是这个高度是由父元素的 <code>font-size</code> 来决定的， 这样就将这个高度置为 0 ， 从而使得图片中线和父元素基线对齐。   </li>\n</ol>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"noopener\">张鑫旭：css行高line-height的一些深入理解及应用</a> </p>\n"},{"title":"vue 知识总结","date":"2018-04-29T04:13:38.000Z","_content":"\n在项目开发中，发现对于 `vue` 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：\n\n###  计算属性和侦听器 \n\n在  `vue.js` 中，通过使用 `watch` 以及 `computed` 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 `watch`, 但是在一些情况下，使用 `comnputed` 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 `vue.js` 官方文档：[计算属性和侦听器](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8) \n\n`watch`:\n\n`watch`侦听器相对于 `computed` 而言更为通用，使用 `watch` 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：\n\n```javascript\n// 监听某一个数据\nwatch: {\n    value: function (newVal, oldVal) {\n        // some action\n    }\n}\n// 监听对象中的某一个属性\nwatch: {\n    \"object.value\"： function (newVal, oldVal) {\n        // some action\n    }\n}\n```\n\n注意： 使用 `watch` 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 `deep: true`:\n\n```javascript\nwatch: {\n  object: {\n      handler: function (newVal, oldVal) {\n          // somn action\n      },\n      deep: true\n  }\n}\n```\n\n如果想要回调在监听之后立即被调用， 可以设置 `immediate:true` ：\n\n```vue\nwatch: {\n  object: {\n    // 回调函数立即被调用不管监听对象有没有被调用\n    handler: function (newVal, oldVal) {\n      // some action\n    },\n    deep: true,\n    immediate: true\n  }\n}\n```\n\n\n\n`computed`:\n\n在有些地方， 我们使用 `computed` 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：\n\n```javascript\ndata() {\n    person: {\n        name: \"\",\n        age: \"\",\n        sex: \"\"\n    }\n},\ncomputed: {\n    personMsg: function () {\n      // 这里可以监听到对象的变化\n        const { name, age, sex } = this.person;\n        return `${name} is a ${age} ${sex}`;\n    }\n}\n```\n\n当上面代码中的 `this.person` 中的数据发生变化的时候， `personMsg` 就会实时的发生变化：\n\n对于 `computed` 的使用， 注意下面两点：\n\n1. 对于上面代码中的计算属性： `personMsg` 的取值决定于 `this.person` 的值， 这里计算函数实际上拦截了计算属性的 `getter` 函数， 计算属性可以在模版中像其他 `data` 中的数据一样被使用\n\n   ```html\n   <div>{{ personMsg }}<div>\n   ```\n\n2. 使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。\n\n   ```javascript\n   methods: {\n     personMsg () {\n       return this.msg;\n     }\n   }\n   ```","source":"_posts/vue 知识总结.md","raw":"---\ntitle: vue 知识总结\ndate: 2018-04-29 12:13:38\ntags: vue 知识总结（一）\ncategories: vue\n---\n\n在项目开发中，发现对于 `vue` 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：\n\n###  计算属性和侦听器 \n\n在  `vue.js` 中，通过使用 `watch` 以及 `computed` 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 `watch`, 但是在一些情况下，使用 `comnputed` 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 `vue.js` 官方文档：[计算属性和侦听器](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8) \n\n`watch`:\n\n`watch`侦听器相对于 `computed` 而言更为通用，使用 `watch` 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：\n\n```javascript\n// 监听某一个数据\nwatch: {\n    value: function (newVal, oldVal) {\n        // some action\n    }\n}\n// 监听对象中的某一个属性\nwatch: {\n    \"object.value\"： function (newVal, oldVal) {\n        // some action\n    }\n}\n```\n\n注意： 使用 `watch` 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 `deep: true`:\n\n```javascript\nwatch: {\n  object: {\n      handler: function (newVal, oldVal) {\n          // somn action\n      },\n      deep: true\n  }\n}\n```\n\n如果想要回调在监听之后立即被调用， 可以设置 `immediate:true` ：\n\n```vue\nwatch: {\n  object: {\n    // 回调函数立即被调用不管监听对象有没有被调用\n    handler: function (newVal, oldVal) {\n      // some action\n    },\n    deep: true,\n    immediate: true\n  }\n}\n```\n\n\n\n`computed`:\n\n在有些地方， 我们使用 `computed` 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：\n\n```javascript\ndata() {\n    person: {\n        name: \"\",\n        age: \"\",\n        sex: \"\"\n    }\n},\ncomputed: {\n    personMsg: function () {\n      // 这里可以监听到对象的变化\n        const { name, age, sex } = this.person;\n        return `${name} is a ${age} ${sex}`;\n    }\n}\n```\n\n当上面代码中的 `this.person` 中的数据发生变化的时候， `personMsg` 就会实时的发生变化：\n\n对于 `computed` 的使用， 注意下面两点：\n\n1. 对于上面代码中的计算属性： `personMsg` 的取值决定于 `this.person` 的值， 这里计算函数实际上拦截了计算属性的 `getter` 函数， 计算属性可以在模版中像其他 `data` 中的数据一样被使用\n\n   ```html\n   <div>{{ personMsg }}<div>\n   ```\n\n2. 使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。\n\n   ```javascript\n   methods: {\n     personMsg () {\n       return this.msg;\n     }\n   }\n   ```","slug":"vue 知识总结","published":1,"updated":"2018-05-06T02:30:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oh9y003gs33gtk7ppnv1","content":"<p>在项目开发中，发现对于 <code>vue</code> 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：</p>\n<h3 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h3><p>在  <code>vue.js</code> 中，通过使用 <code>watch</code> 以及 <code>computed</code> 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 <code>watch</code>, 但是在一些情况下，使用 <code>comnputed</code> 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 <code>vue.js</code> 官方文档：<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">计算属性和侦听器</a> </p>\n<p><code>watch</code>:</p>\n<p><code>watch</code>侦听器相对于 <code>computed</code> 而言更为通用，使用 <code>watch</code> 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听某一个数据</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听对象中的某一个属性</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"object.value\"</span>： <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 <code>watch</code> 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 <code>deep: true</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// somn action</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要回调在监听之后立即被调用， 可以设置 <code>immediate:true</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">    // 回调函数立即被调用不管监听对象有没有被调用</span><br><span class=\"line\">    handler: function (newVal, oldVal) &#123;</span><br><span class=\"line\">      // some action</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,</span><br><span class=\"line\">    immediate: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>computed</code>:</p>\n<p>在有些地方， 我们使用 <code>computed</code> 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    person: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        age: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        sex: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    personMsg: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以监听到对象的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; name, age, sex &#125; = <span class=\"keyword\">this</span>.person;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> is a <span class=\"subst\">$&#123;age&#125;</span> <span class=\"subst\">$&#123;sex&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当上面代码中的 <code>this.person</code> 中的数据发生变化的时候， <code>personMsg</code> 就会实时的发生变化：</p>\n<p>对于 <code>computed</code> 的使用， 注意下面两点：</p>\n<ol>\n<li><p>对于上面代码中的计算属性： <code>personMsg</code> 的取值决定于 <code>this.person</code> 的值， 这里计算函数实际上拦截了计算属性的 <code>getter</code> 函数， 计算属性可以在模版中像其他 <code>data</code> 中的数据一样被使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; personMsg &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  personMsg () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.msg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在项目开发中，发现对于 <code>vue</code> 的使用还有一些新的认识，在这段时间中使用到的知识点做一个总结：</p>\n<h3 id=\"计算属性和侦听器\"><a href=\"#计算属性和侦听器\" class=\"headerlink\" title=\"计算属性和侦听器\"></a>计算属性和侦听器</h3><p>在  <code>vue.js</code> 中，通过使用 <code>watch</code> 以及 <code>computed</code> 这两个方法来进行侦听数据的变化，但是这两种方式对于数据侦听的处理是不同的，应用的场景也是不同的， 之前应用的时候总是习惯性的时候用 <code>watch</code>, 但是在一些情况下，使用 <code>comnputed</code> 要更好一些，这里先简单的介绍这两种方法的使用， 具体可见 <code>vue.js</code> 官方文档：<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\" target=\"_blank\" rel=\"noopener\">计算属性和侦听器</a> </p>\n<p><code>watch</code>:</p>\n<p><code>watch</code>侦听器相对于 <code>computed</code> 而言更为通用，使用 <code>watch</code> 用来监听数据的变化， 定义在数据变化之后的行为，基本使用用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监听某一个数据</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听对象中的某一个属性</span></span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"object.value\"</span>： <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// some action</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： 使用 <code>watch</code> 不能监听到对象的变化， 如果想要对于对象进行监听， 可以使用 <code>deep: true</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">      handler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newVal, oldVal</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// somn action</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要回调在监听之后立即被调用， 可以设置 <code>immediate:true</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  object: &#123;</span><br><span class=\"line\">    // 回调函数立即被调用不管监听对象有没有被调用</span><br><span class=\"line\">    handler: function (newVal, oldVal) &#123;</span><br><span class=\"line\">      // some action</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep: true,</span><br><span class=\"line\">    immediate: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>computed</code>:</p>\n<p>在有些地方， 我们使用 <code>computed</code> 要比单纯的监听数据的变化要方便很多， 比如下面这种情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    person: &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        age: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        sex: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    personMsg: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里可以监听到对象的变化</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; name, age, sex &#125; = <span class=\"keyword\">this</span>.person;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span> is a <span class=\"subst\">$&#123;age&#125;</span> <span class=\"subst\">$&#123;sex&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当上面代码中的 <code>this.person</code> 中的数据发生变化的时候， <code>personMsg</code> 就会实时的发生变化：</p>\n<p>对于 <code>computed</code> 的使用， 注意下面两点：</p>\n<ol>\n<li><p>对于上面代码中的计算属性： <code>personMsg</code> 的取值决定于 <code>this.person</code> 的值， 这里计算函数实际上拦截了计算属性的 <code>getter</code> 函数， 计算属性可以在模版中像其他 <code>data</code> 中的数据一样被使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; personMsg &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用函数调用可以实现类似于计算属性相同的作用：不同的是计算属性可以进行缓存数据，之后只有当计算属性的依赖选项发生变化的时候， 计算属性才会求值， 如果依赖项没有发生变化，那么计算属性就不会发生再次求职。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  personMsg () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.msg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"事件监听代码","date":"2018-05-06T02:38:39.000Z","_content":"\n简单的事件监听函数，从 `N3-components` 组件代码中发现的：\n\n```javascript\nconst EventListener = {\n    listen (listen, eventType, callback) {\n        // 如果存在 addEventListener\n        if (target.addEventListener) {\n            target.addEventListener(eventType, callback, false);\n            return {\n                remove () {\n                    target.removeEventListener(eventType, callback, false);\n                }\n            }\n          // 如果存在 attachEvent 事件\n        } else if (target.attachEvent) {\n\t\t    target.attachEvent('on' + eventType);\n            return {\n                remove () {\n                    target.detachEvent('on' + eventType, callback);\n                }\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/事件监听代码.md","raw":"---\ntitle: 事件监听代码\ndate: 2018-05-06 10:38:39\ntags: 事件监听\ncategories: 代码集\n---\n\n简单的事件监听函数，从 `N3-components` 组件代码中发现的：\n\n```javascript\nconst EventListener = {\n    listen (listen, eventType, callback) {\n        // 如果存在 addEventListener\n        if (target.addEventListener) {\n            target.addEventListener(eventType, callback, false);\n            return {\n                remove () {\n                    target.removeEventListener(eventType, callback, false);\n                }\n            }\n          // 如果存在 attachEvent 事件\n        } else if (target.attachEvent) {\n\t\t    target.attachEvent('on' + eventType);\n            return {\n                remove () {\n                    target.detachEvent('on' + eventType, callback);\n                }\n            }\n        }\n    }\n}\n```\n\n","slug":"事件监听代码","published":1,"updated":"2018-05-29T15:06:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oha2003ks33gfz6emg2e","content":"<p>简单的事件监听函数，从 <code>N3-components</code> 组件代码中发现的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventListener = &#123;</span><br><span class=\"line\">    listen (listen, eventType, callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在 addEventListener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 attachEvent 事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">\t\t    target.attachEvent(<span class=\"string\">'on'</span> + eventType);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>简单的事件监听函数，从 <code>N3-components</code> 组件代码中发现的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> EventListener = &#123;</span><br><span class=\"line\">    listen (listen, eventType, callback) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在 addEventListener</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.addEventListener) &#123;</span><br><span class=\"line\">            target.addEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.removeEventListener(eventType, callback, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在 attachEvent 事件</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target.attachEvent) &#123;</span><br><span class=\"line\">\t\t    target.attachEvent(<span class=\"string\">'on'</span> + eventType);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                remove () &#123;</span><br><span class=\"line\">                    target.detachEvent(<span class=\"string\">'on'</span> + eventType, callback);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"while and do","date":"2017-12-09T01:46:32.000Z","_content":"\n#### 运算符优先级\n\n关于运算符的优先级，存在下面的优先级级别:\n\n(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)\n\n|                . [ ] ( )                 | 提取属性与调用函数 （优先级  () > .） |\n| :--------------------------------------: | :---------------------: |\n| `delete`   `new`   `typeof `  `+` ` -`  `!` |          一元运算符          |\n|              `*`  `/`  `%`               |       乘法， 除法, 求余        |\n|                 `+`  `-`                 |       加法/ 连接  减法        |\n|          `>=`  `<=`   `>`  `<`           |         不等式运算符          |\n|              `===`   `!==`               |          等式运算符          |\n|                   `&&`                   |           逻辑与           |\n|                   `||`                   |           逻辑或           |\n|                   `?:`                   |           三元            |\n\n使用运算符优先级中注意:  `&&` > `||`\n\n下面是一些使用运算符的一些例子:\n\n1.  对于点号运算符以及加号运算符\n\n   ```javascript\n   +\"2.34567\".toFixed(2);\n   // 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数\n   // 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function\n   ```\n\n   上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 `toFixed()` 函数， 当然会出现错误，\n\n   解决办法， 添加 `()` 因为这时候括号的优先级要高于点号:\n\n   ```javascript\n   (+\"2.34567\").toFixed(2)\n   ```\n\n   2. 逻辑与的操作符  `&&` 的操作符优先级要高于 `||` 的操作符优先级。\n\n      例如对于下面的这个程序而言:\n\n      ```javascript\n      true || false && false\n      // 因为这里 && 操作符的优先级要高于 || 因此这里会返回 true\n      ```\n\n      注意: 这里对于 `||` 以及 `&&` 操作符的理解要正确:\n\n      这两个操作符返回的都是值，而不是 `true` 或者 `false\n\n   3.  `[] == ![]`\n\n      上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。\n\n      在上面这个过程中， 因为 `!` 的优先级要高于 `==`, 因此先执行 `!` 进行类型转换， 因为这里 `[]` 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)\n\n      >通过使用布尔强制类型转换结果为 `false` 的被称作假值， 假值有下面几种：\n      >\n      >`undefined`, `null`, `false`, `+0, -0 和 NaN`, \" \"\n      >\n      >ps: 其他的类型不要进来 （`[], {}` : 你们看我干嘛？）\n\n      首先执行下面的操作：\n\n      ```javascript\n      ![] ===> false\n      ```\n\n      这个时候等号右边的值变成了 `false`,这个时候使用 `==` 会进行强制类型转换，将布尔值转换为数字\n\n      ```javascript\n      Number(false) ===> 0\n      ```\n\n      这个时候 `==` 两边分别是 `object` 以及 `number` 类型的值， 这个时候需要将 `obejct` 转为数字：\n\n      ```javascript\n      Number([].valueOf()) ===> 0\n      ```\n\n      因此， 上面的等式经过转换之后，变成了下面的这种：\n\n      ```javascript\n      0 === 0 // true\n      ```\n\n\n\n","source":"_posts/while-and-do.md","raw":"---\ntitle: while and do\ndate: 2017-12-09 09:46:32\ntags: whileordo\ncategories: 笔记\n---\n\n#### 运算符优先级\n\n关于运算符的优先级，存在下面的优先级级别:\n\n(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)\n\n|                . [ ] ( )                 | 提取属性与调用函数 （优先级  () > .） |\n| :--------------------------------------: | :---------------------: |\n| `delete`   `new`   `typeof `  `+` ` -`  `!` |          一元运算符          |\n|              `*`  `/`  `%`               |       乘法， 除法, 求余        |\n|                 `+`  `-`                 |       加法/ 连接  减法        |\n|          `>=`  `<=`   `>`  `<`           |         不等式运算符          |\n|              `===`   `!==`               |          等式运算符          |\n|                   `&&`                   |           逻辑与           |\n|                   `||`                   |           逻辑或           |\n|                   `?:`                   |           三元            |\n\n使用运算符优先级中注意:  `&&` > `||`\n\n下面是一些使用运算符的一些例子:\n\n1.  对于点号运算符以及加号运算符\n\n   ```javascript\n   +\"2.34567\".toFixed(2);\n   // 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数\n   // 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function\n   ```\n\n   上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 `toFixed()` 函数， 当然会出现错误，\n\n   解决办法， 添加 `()` 因为这时候括号的优先级要高于点号:\n\n   ```javascript\n   (+\"2.34567\").toFixed(2)\n   ```\n\n   2. 逻辑与的操作符  `&&` 的操作符优先级要高于 `||` 的操作符优先级。\n\n      例如对于下面的这个程序而言:\n\n      ```javascript\n      true || false && false\n      // 因为这里 && 操作符的优先级要高于 || 因此这里会返回 true\n      ```\n\n      注意: 这里对于 `||` 以及 `&&` 操作符的理解要正确:\n\n      这两个操作符返回的都是值，而不是 `true` 或者 `false\n\n   3.  `[] == ![]`\n\n      上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。\n\n      在上面这个过程中， 因为 `!` 的优先级要高于 `==`, 因此先执行 `!` 进行类型转换， 因为这里 `[]` 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)\n\n      >通过使用布尔强制类型转换结果为 `false` 的被称作假值， 假值有下面几种：\n      >\n      >`undefined`, `null`, `false`, `+0, -0 和 NaN`, \" \"\n      >\n      >ps: 其他的类型不要进来 （`[], {}` : 你们看我干嘛？）\n\n      首先执行下面的操作：\n\n      ```javascript\n      ![] ===> false\n      ```\n\n      这个时候等号右边的值变成了 `false`,这个时候使用 `==` 会进行强制类型转换，将布尔值转换为数字\n\n      ```javascript\n      Number(false) ===> 0\n      ```\n\n      这个时候 `==` 两边分别是 `object` 以及 `number` 类型的值， 这个时候需要将 `obejct` 转为数字：\n\n      ```javascript\n      Number([].valueOf()) ===> 0\n      ```\n\n      因此， 上面的等式经过转换之后，变成了下面的这种：\n\n      ```javascript\n      0 === 0 // true\n      ```\n\n\n\n","slug":"while-and-do","published":1,"updated":"2018-05-20T09:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oha5003ns33gbmupbh30","content":"<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><p>关于运算符的优先级，存在下面的优先级级别:</p>\n<p>(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">. [ ] ( )</th>\n<th style=\"text-align:center\">提取属性与调用函数 （优先级  () &gt; .）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>delete</code>   <code>new</code>   <code>typeof</code>  <code>+</code> <code>-</code>  <code>!</code></td>\n<td style=\"text-align:center\">一元运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code>  <code>/</code>  <code>%</code></td>\n<td style=\"text-align:center\">乘法， 除法, 求余</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code>  <code>-</code></td>\n<td style=\"text-align:center\">加法/ 连接  减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code>  <code>&lt;=</code>   <code>&gt;</code>  <code>&lt;</code></td>\n<td style=\"text-align:center\">不等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>===</code>   <code>!==</code></td>\n<td style=\"text-align:center\">等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:center\">逻辑与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:center\"></td>\n<td>`</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?:</code></td>\n<td style=\"text-align:center\">三元</td>\n</tr>\n</tbody>\n</table>\n<p>使用运算符优先级中注意:  <code>&amp;&amp;</code> &gt; <code>||</code></p>\n<p>下面是一些使用运算符的一些例子:</p>\n<ol>\n<li><p>对于点号运算符以及加号运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">\"2.34567\"</span>.toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\">// 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function</span></span><br></pre></td></tr></table></figure>\n<p>上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 <code>toFixed()</code> 函数， 当然会出现错误，</p>\n<p>解决办法， 添加 <code>()</code> 因为这时候括号的优先级要高于点号:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(+<span class=\"string\">\"2.34567\"</span>).toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>逻辑与的操作符  <code>&amp;&amp;</code> 的操作符优先级要高于 <code>||</code> 的操作符优先级。</p>\n<p>例如对于下面的这个程序而言:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这里 &amp;&amp; 操作符的优先级要高于 || 因此这里会返回 true</span></span><br></pre></td></tr></table></figure>\n<p>注意: 这里对于 <code>||</code> 以及 <code>&amp;&amp;</code> 操作符的理解要正确:</p>\n<p>这两个操作符返回的都是值，而不是 <code>true</code> 或者 `false</p>\n</li>\n<li><p><code>[] == ![]</code></p>\n<p>上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。</p>\n<p>在上面这个过程中， 因为 <code>!</code> 的优先级要高于 <code>==</code>, 因此先执行 <code>!</code> 进行类型转换， 因为这里 <code>[]</code> 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)</p>\n<blockquote>\n<p>通过使用布尔强制类型转换结果为 <code>false</code> 的被称作假值， 假值有下面几种：</p>\n<p><code>undefined</code>, <code>null</code>, <code>false</code>, <code>+0, -0 和 NaN</code>, “ “</p>\n<p>ps: 其他的类型不要进来 （<code>[], {}</code> : 你们看我干嘛？）</p>\n</blockquote>\n<p>首先执行下面的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![] ===&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>这个时候等号右边的值变成了 <code>false</code>,这个时候使用 <code>==</code> 会进行强制类型转换，将布尔值转换为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个时候 <code>==</code> 两边分别是 <code>object</code> 以及 <code>number</code> 类型的值， 这个时候需要将 <code>obejct</code> 转为数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>([].valueOf()) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>因此， 上面的等式经过转换之后，变成了下面的这种：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> === <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><p>关于运算符的优先级，存在下面的优先级级别:</p>\n<p>(因此当我们在表达式中出现下面这些情况的时候, 我们注意符号的优先级)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">. [ ] ( )</th>\n<th style=\"text-align:center\">提取属性与调用函数 （优先级  () &gt; .）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>delete</code>   <code>new</code>   <code>typeof</code>  <code>+</code> <code>-</code>  <code>!</code></td>\n<td style=\"text-align:center\">一元运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code>  <code>/</code>  <code>%</code></td>\n<td style=\"text-align:center\">乘法， 除法, 求余</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code>  <code>-</code></td>\n<td style=\"text-align:center\">加法/ 连接  减法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=</code>  <code>&lt;=</code>   <code>&gt;</code>  <code>&lt;</code></td>\n<td style=\"text-align:center\">不等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>===</code>   <code>!==</code></td>\n<td style=\"text-align:center\">等式运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:center\">逻辑与</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`</td>\n<td style=\"text-align:center\"></td>\n<td>`</td>\n<td>逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?:</code></td>\n<td style=\"text-align:center\">三元</td>\n</tr>\n</tbody>\n</table>\n<p>使用运算符优先级中注意:  <code>&amp;&amp;</code> &gt; <code>||</code></p>\n<p>下面是一些使用运算符的一些例子:</p>\n<ol>\n<li><p>对于点号运算符以及加号运算符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"string\">\"2.34567\"</span>.toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 我们的本意是先想要将字符串 \"2.34567\" 转化为数字在利用 toFixed(2) 进行保留两位小数</span></span><br><span class=\"line\"><span class=\"comment\">// 但是返回错误 uncaught TypeError \"2.34567\".toFixed(2) is not a function</span></span><br></pre></td></tr></table></figure>\n<p>上面是因为使用上面的表达式的时候 . 号的操作符优先级要高于 +  所以先计算的是字符串的 <code>toFixed()</code> 函数， 当然会出现错误，</p>\n<p>解决办法， 添加 <code>()</code> 因为这时候括号的优先级要高于点号:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(+<span class=\"string\">\"2.34567\"</span>).toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>逻辑与的操作符  <code>&amp;&amp;</code> 的操作符优先级要高于 <code>||</code> 的操作符优先级。</p>\n<p>例如对于下面的这个程序而言:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> || <span class=\"literal\">false</span> &amp;&amp; <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这里 &amp;&amp; 操作符的优先级要高于 || 因此这里会返回 true</span></span><br></pre></td></tr></table></figure>\n<p>注意: 这里对于 <code>||</code> 以及 <code>&amp;&amp;</code> 操作符的理解要正确:</p>\n<p>这两个操作符返回的都是值，而不是 <code>true</code> 或者 `false</p>\n</li>\n<li><p><code>[] == ![]</code></p>\n<p>上面这个等式是一个很有意思的等式， 理解这个等式有助于我们加深对于于运算符优先级的理解， 并且在上面的这个公式中还有涉及到了隐式转换的一些知识点。</p>\n<p>在上面这个过程中， 因为 <code>!</code> 的优先级要高于 <code>==</code>, 因此先执行 <code>!</code> 进行类型转换， 因为这里 <code>[]</code> 是真值，(只要不属于假值的都是真值，你别看我这里是一个空数组)</p>\n<blockquote>\n<p>通过使用布尔强制类型转换结果为 <code>false</code> 的被称作假值， 假值有下面几种：</p>\n<p><code>undefined</code>, <code>null</code>, <code>false</code>, <code>+0, -0 和 NaN</code>, “ “</p>\n<p>ps: 其他的类型不要进来 （<code>[], {}</code> : 你们看我干嘛？）</p>\n</blockquote>\n<p>首先执行下面的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![] ===&gt; <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>这个时候等号右边的值变成了 <code>false</code>,这个时候使用 <code>==</code> 会进行强制类型转换，将布尔值转换为数字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>这个时候 <code>==</code> 两边分别是 <code>object</code> 以及 <code>number</code> 类型的值， 这个时候需要将 <code>obejct</code> 转为数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>([].valueOf()) ===&gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>因此， 上面的等式经过转换之后，变成了下面的这种：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> === <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"作用域 与 this 值","date":"2017-11-12T05:41:19.000Z","_content":"\n对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。\n\n### 词法作用域\n\n对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。\n\n代码如下:\n\n```\nfunction foo() {\n  console.log(a) // 2\n}\nfunction bar() {\n  var a = 3;\n  foo();\n}\nvar a = 2;\nbar();\n```\n\n因为这里面的 `foo` 函数书写在全局的作用域中，因此会被输出 `2`\n\n###  动态作用域\n\n动态作用域关心的是函数是在哪里被调用的。\n\n上面的函数中使用动态作用域的时候 最终输出应该是 `3`,因为从 `foo` 函数被调用的地方寻在变量 `a` 最后找到了 `var a = 3`.\n\n词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。\n\n使用js 中的 `this` 的时候， `this` 的效果是类似于使用动态作用域的。","source":"_posts/作用域.md","raw":"---\ntitle: 作用域 与 this 值\ndate: 2017-11-12 13:41:19\ntags: \"作用域\"\ncategories: 笔记\n---\n\n对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。\n\n### 词法作用域\n\n对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。\n\n代码如下:\n\n```\nfunction foo() {\n  console.log(a) // 2\n}\nfunction bar() {\n  var a = 3;\n  foo();\n}\nvar a = 2;\nbar();\n```\n\n因为这里面的 `foo` 函数书写在全局的作用域中，因此会被输出 `2`\n\n###  动态作用域\n\n动态作用域关心的是函数是在哪里被调用的。\n\n上面的函数中使用动态作用域的时候 最终输出应该是 `3`,因为从 `foo` 函数被调用的地方寻在变量 `a` 最后找到了 `var a = 3`.\n\n词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。\n\n使用js 中的 `this` 的时候， `this` 的效果是类似于使用动态作用域的。","slug":"作用域","published":1,"updated":"2017-12-09T01:44:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oha8003rs33g52dmaj20","content":"<p>对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(a) // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">  var a = 3;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n<p>因为这里面的 <code>foo</code> 函数书写在全局的作用域中，因此会被输出 <code>2</code></p>\n<h3 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h3><p>动态作用域关心的是函数是在哪里被调用的。</p>\n<p>上面的函数中使用动态作用域的时候 最终输出应该是 <code>3</code>,因为从 <code>foo</code> 函数被调用的地方寻在变量 <code>a</code> 最后找到了 <code>var a = 3</code>.</p>\n<p>词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。</p>\n<p>使用js 中的 <code>this</code> 的时候， <code>this</code> 的效果是类似于使用动态作用域的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于作用域而言，可以将作用域分为动态作用域和词法作用域。js 中的作用域属于词法作用域。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>对于使用词法作用域而言，词法作用域最重要的规则在于词法作用域的定义过程发生在代码的书写阶段。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(a) // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">  var a = 3;</span><br><span class=\"line\">  foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n<p>因为这里面的 <code>foo</code> 函数书写在全局的作用域中，因此会被输出 <code>2</code></p>\n<h3 id=\"动态作用域\"><a href=\"#动态作用域\" class=\"headerlink\" title=\"动态作用域\"></a>动态作用域</h3><p>动态作用域关心的是函数是在哪里被调用的。</p>\n<p>上面的函数中使用动态作用域的时候 最终输出应该是 <code>3</code>,因为从 <code>foo</code> 函数被调用的地方寻在变量 <code>a</code> 最后找到了 <code>var a = 3</code>.</p>\n<p>词法作用域关心的是函数在那里被声明, 动态作用域关心的是函数在哪里被调用。</p>\n<p>使用js 中的 <code>this</code> 的时候， <code>this</code> 的效果是类似于使用动态作用域的。</p>\n"},{"title":"函数节流","date":"2017-08-26T02:02:34.000Z","_content":"\n#### 函数节流\n\n代码如下:\n\n```\nvar processor = {\n  timeoutId: null,\n  preformProcessing: function () {\n    //实际上要进行执行的代码\n  }，\n  process: function () {\n    clearTimeout(this.timeoutId);\n    var that = this;\n    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 \n    this.timeoutId = setTimeout(function () {\n      that.preformProcessing();\n    }, 100)\n  }\n}\nprocessor.process() // 开始执行函数\n```\n\n使用函数节流的思想是：\n\n假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，`process` 函数会首先清除延时器，重新开始进行延时操作，\n\n为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：\n\n```\nfunction throttle (method, context) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function () {\n  \t\tmethod.call(context)\n  },100)\n}\n```\n\n定时器使用 `call` 方法实现在适当的环境下执行函数，如果传入的 `context` 为空，那么就会在全局作用域中执行函数。\n\n\n\n#### 总结\n\n使用函数节流用来防止函数在一定时间内多次被触发操作。\n\nsetTimeout内的 `this` 指向值：\n\n```\nvar timer = setTimeout(function () {\n\tconsole.log(this) // window\n}, 2000);\ntimer;\n```\n\n因为使用 setTimeout  `this` 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。","source":"_posts/函数节流.md","raw":"---\ntitle: 函数节流\ndate: 2017-08-26 10:02:34\ntags: '节流'\ncategories: '代码集'\n---\n\n#### 函数节流\n\n代码如下:\n\n```\nvar processor = {\n  timeoutId: null,\n  preformProcessing: function () {\n    //实际上要进行执行的代码\n  }，\n  process: function () {\n    clearTimeout(this.timeoutId);\n    var that = this;\n    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 \n    this.timeoutId = setTimeout(function () {\n      that.preformProcessing();\n    }, 100)\n  }\n}\nprocessor.process() // 开始执行函数\n```\n\n使用函数节流的思想是：\n\n假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，`process` 函数会首先清除延时器，重新开始进行延时操作，\n\n为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：\n\n```\nfunction throttle (method, context) {\n  clearTimeout(method.tId);\n  method.tId = setTimeout(function () {\n  \t\tmethod.call(context)\n  },100)\n}\n```\n\n定时器使用 `call` 方法实现在适当的环境下执行函数，如果传入的 `context` 为空，那么就会在全局作用域中执行函数。\n\n\n\n#### 总结\n\n使用函数节流用来防止函数在一定时间内多次被触发操作。\n\nsetTimeout内的 `this` 指向值：\n\n```\nvar timer = setTimeout(function () {\n\tconsole.log(this) // window\n}, 2000);\ntimer;\n```\n\n因为使用 setTimeout  `this` 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。","slug":"函数节流","published":1,"updated":"2017-08-26T03:40:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohaa003us33ged935a2j","content":"<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var processor = &#123;</span><br><span class=\"line\">  timeoutId: null,</span><br><span class=\"line\">  preformProcessing: function () &#123;</span><br><span class=\"line\">    //实际上要进行执行的代码</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  process: function () &#123;</span><br><span class=\"line\">    clearTimeout(this.timeoutId);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 </span><br><span class=\"line\">    this.timeoutId = setTimeout(function () &#123;</span><br><span class=\"line\">      that.preformProcessing();</span><br><span class=\"line\">    &#125;, 100)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processor.process() // 开始执行函数</span><br></pre></td></tr></table></figure>\n<p>使用函数节流的思想是：</p>\n<p>假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，<code>process</code> 函数会首先清除延时器，重新开始进行延时操作，</p>\n<p>为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (method, context) &#123;</span><br><span class=\"line\">  clearTimeout(method.tId);</span><br><span class=\"line\">  method.tId = setTimeout(function () &#123;</span><br><span class=\"line\">  \t\tmethod.call(context)</span><br><span class=\"line\">  &#125;,100)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时器使用 <code>call</code> 方法实现在适当的环境下执行函数，如果传入的 <code>context</code> 为空，那么就会在全局作用域中执行函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用函数节流用来防止函数在一定时间内多次被触发操作。</p>\n<p>setTimeout内的 <code>this</code> 指向值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = setTimeout(function () &#123;</span><br><span class=\"line\">\tconsole.log(this) // window</span><br><span class=\"line\">&#125;, 2000);</span><br><span class=\"line\">timer;</span><br></pre></td></tr></table></figure>\n<p>因为使用 setTimeout  <code>this</code> 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"函数节流\"><a href=\"#函数节流\" class=\"headerlink\" title=\"函数节流\"></a>函数节流</h4><p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var processor = &#123;</span><br><span class=\"line\">  timeoutId: null,</span><br><span class=\"line\">  preformProcessing: function () &#123;</span><br><span class=\"line\">    //实际上要进行执行的代码</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  process: function () &#123;</span><br><span class=\"line\">    clearTimeout(this.timeoutId);</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    // 在 setTimeout 函数内部是一个匿名函数，匿名函数的 this 指向值指向了全局作用域 </span><br><span class=\"line\">    this.timeoutId = setTimeout(function () &#123;</span><br><span class=\"line\">      that.preformProcessing();</span><br><span class=\"line\">    &#125;, 100)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">processor.process() // 开始执行函数</span><br></pre></td></tr></table></figure>\n<p>使用函数节流的思想是：</p>\n<p>假如有一个提交按钮，点击按钮执行提交操作，设置了一个延时器，在点击按钮一段时间之后执行函数，如果在这段时间内，按钮又被点击操作，<code>process</code> 函数会首先清除延时器，重新开始进行延时操作，</p>\n<p>为了防止用户在点击按钮进行操作的时候，触发多次提交操作，下面是一个节流函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function throttle (method, context) &#123;</span><br><span class=\"line\">  clearTimeout(method.tId);</span><br><span class=\"line\">  method.tId = setTimeout(function () &#123;</span><br><span class=\"line\">  \t\tmethod.call(context)</span><br><span class=\"line\">  &#125;,100)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定时器使用 <code>call</code> 方法实现在适当的环境下执行函数，如果传入的 <code>context</code> 为空，那么就会在全局作用域中执行函数。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用函数节流用来防止函数在一定时间内多次被触发操作。</p>\n<p>setTimeout内的 <code>this</code> 指向值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer = setTimeout(function () &#123;</span><br><span class=\"line\">\tconsole.log(this) // window</span><br><span class=\"line\">&#125;, 2000);</span><br><span class=\"line\">timer;</span><br></pre></td></tr></table></figure>\n<p>因为使用 setTimeout  <code>this</code> 值指向的是 window 全局对象，使用 es6 中的箭头函树，this 值是一样的效果。</p>\n"},{"title":"作用域：函数作用域和块作用域","date":"2017-08-20T04:28:14.000Z","_content":"\n### 作用域单元\n\n作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。\n\n#### 为什么要创建块作用域\n\n例如代码如下：\n\n```\nif (true) {\n  var bar = 2\n}\nconsole.log(bar) // 2\n\n\nfor (var i =0 ;i < 10; i++) {\n  console.log(i)\n}\nconsole.log(i);\n```\n\n在上面的代码中，使用了 `var` 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。\n\n使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。\n\n#### 创建块作用域的几种方式\n\n1.try catch 语句会在 catch 语句中创建一个块作用域\n\n```\ntry {\n    consolel.log(a);\n}\ncatch (err) {\n    console.log(err.name); // 抛出错误的名字\n}\nconsole.log(err.name) // err is not defined\n```\n\n声明的catch 内变量只在 catch 语句内部被使用到\n\n2.let 会为声明的变量隐式的创建块作用域\n\n```\nif (true) {\n  let bar = 2\n}\nconsole.log(bar)// bar is not defined\n```\n\n通过使用 `let`  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。\n\n也可以通过使用 ` { }` 来显式的为 ` let` 声明一个用于绑定的块:\n\n```\nif () {\n  let bar = 2;\n  {\n    let foo = 3;\n  }\n  console.log(foo); // foo is not defined\n}\n```\n\n使用  `let` 可以创建作用域，相对于使用 `var` 而言,`var` 会将变量定义到全局作用域中，使用 `let` 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。\n\n3.使用 `const`也可以创建块状作用域，使用 `const` 创建的是常量，试图修改会导致错误:\n\n```\nif (true) {\n  const a = 2;\n}\nconsole.log(a) // a is not defined\n```\n\n#### 总结\n\n使用 `var ` 定义的变量会被定义到全局变量中，使用`let` 可以创建块状作用域，使用`let`定义的变量依赖的函数要和声明的变量放在同一个作用域；\n\n使用 `{}` 可以声明显式的作用域；","source":"_posts/作用域：函数作用域和块作用域.md","raw":"---\ntitle: 作用域：函数作用域和块作用域\ndate: 2017-08-20 12:28:14\ntags: \"作用域\"\ncategories: js读书总结\n---\n\n### 作用域单元\n\n作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。\n\n#### 为什么要创建块作用域\n\n例如代码如下：\n\n```\nif (true) {\n  var bar = 2\n}\nconsole.log(bar) // 2\n\n\nfor (var i =0 ;i < 10; i++) {\n  console.log(i)\n}\nconsole.log(i);\n```\n\n在上面的代码中，使用了 `var` 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。\n\n使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。\n\n#### 创建块作用域的几种方式\n\n1.try catch 语句会在 catch 语句中创建一个块作用域\n\n```\ntry {\n    consolel.log(a);\n}\ncatch (err) {\n    console.log(err.name); // 抛出错误的名字\n}\nconsole.log(err.name) // err is not defined\n```\n\n声明的catch 内变量只在 catch 语句内部被使用到\n\n2.let 会为声明的变量隐式的创建块作用域\n\n```\nif (true) {\n  let bar = 2\n}\nconsole.log(bar)// bar is not defined\n```\n\n通过使用 `let`  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。\n\n也可以通过使用 ` { }` 来显式的为 ` let` 声明一个用于绑定的块:\n\n```\nif () {\n  let bar = 2;\n  {\n    let foo = 3;\n  }\n  console.log(foo); // foo is not defined\n}\n```\n\n使用  `let` 可以创建作用域，相对于使用 `var` 而言,`var` 会将变量定义到全局作用域中，使用 `let` 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。\n\n3.使用 `const`也可以创建块状作用域，使用 `const` 创建的是常量，试图修改会导致错误:\n\n```\nif (true) {\n  const a = 2;\n}\nconsole.log(a) // a is not defined\n```\n\n#### 总结\n\n使用 `var ` 定义的变量会被定义到全局变量中，使用`let` 可以创建块状作用域，使用`let`定义的变量依赖的函数要和声明的变量放在同一个作用域；\n\n使用 `{}` 可以声明显式的作用域；","slug":"作用域：函数作用域和块作用域","published":1,"updated":"2017-08-20T08:07:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohac003ys33gbhd0jftm","content":"<h3 id=\"作用域单元\"><a href=\"#作用域单元\" class=\"headerlink\" title=\"作用域单元\"></a>作用域单元</h3><p>作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。</p>\n<h4 id=\"为什么要创建块作用域\"><a href=\"#为什么要创建块作用域\" class=\"headerlink\" title=\"为什么要创建块作用域\"></a>为什么要创建块作用域</h4><p>例如代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar) // 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var i =0 ;i &lt; 10; i++) &#123;</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，使用了 <code>var</code> 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。</p>\n<p>使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。</p>\n<h4 id=\"创建块作用域的几种方式\"><a href=\"#创建块作用域的几种方式\" class=\"headerlink\" title=\"创建块作用域的几种方式\"></a>创建块作用域的几种方式</h4><p>1.try catch 语句会在 catch 语句中创建一个块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    consolel.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (err) &#123;</span><br><span class=\"line\">    console.log(err.name); // 抛出错误的名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(err.name) // err is not defined</span><br></pre></td></tr></table></figure>\n<p>声明的catch 内变量只在 catch 语句内部被使用到</p>\n<p>2.let 会为声明的变量隐式的创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  let bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar)// bar is not defined</span><br></pre></td></tr></table></figure>\n<p>通过使用 <code>let</code>  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。</p>\n<p>也可以通过使用 <code>{ }</code> 来显式的为 <code>let</code> 声明一个用于绑定的块:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if () &#123;</span><br><span class=\"line\">  let bar = 2;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let foo = 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(foo); // foo is not defined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用  <code>let</code> 可以创建作用域，相对于使用 <code>var</code> 而言,<code>var</code> 会将变量定义到全局作用域中，使用 <code>let</code> 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。</p>\n<p>3.使用 <code>const</code>也可以创建块状作用域，使用 <code>const</code> 创建的是常量，试图修改会导致错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  const a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a) // a is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用 <code>var</code> 定义的变量会被定义到全局变量中，使用<code>let</code> 可以创建块状作用域，使用<code>let</code>定义的变量依赖的函数要和声明的变量放在同一个作用域；</p>\n<p>使用 <code>{}</code> 可以声明显式的作用域；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"作用域单元\"><a href=\"#作用域单元\" class=\"headerlink\" title=\"作用域单元\"></a>作用域单元</h3><p>作用域单元分为函数作用域和块作用域，使用作用域的目的是将变量单独定义在作用域内，防止变量污染，变量的声明应该距离是用地越近越好，并且最大限度的实现本地化。</p>\n<h4 id=\"为什么要创建块作用域\"><a href=\"#为什么要创建块作用域\" class=\"headerlink\" title=\"为什么要创建块作用域\"></a>为什么要创建块作用域</h4><p>例如代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  var bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar) // 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var i =0 ;i &lt; 10; i++) &#123;</span><br><span class=\"line\">  console.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(i);</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中，使用了 <code>var</code> 声明变量，当我们这个变量只在 if 或者 for 代码块中使用的时候，使用 var 声明变量容易造成变量污染，后续开发人员声明变量的时候还要避免声明同样的变量。</p>\n<p>使用快作用域的作用是：在代码块中被声明的变量只在代码块中使用，不会污染到全局变量。这就需要我们创建块作用域。</p>\n<h4 id=\"创建块作用域的几种方式\"><a href=\"#创建块作用域的几种方式\" class=\"headerlink\" title=\"创建块作用域的几种方式\"></a>创建块作用域的几种方式</h4><p>1.try catch 语句会在 catch 语句中创建一个块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    consolel.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (err) &#123;</span><br><span class=\"line\">    console.log(err.name); // 抛出错误的名字</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(err.name) // err is not defined</span><br></pre></td></tr></table></figure>\n<p>声明的catch 内变量只在 catch 语句内部被使用到</p>\n<p>2.let 会为声明的变量隐式的创建块作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  let bar = 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(bar)// bar is not defined</span><br></pre></td></tr></table></figure>\n<p>通过使用 <code>let</code>  将声明的变量隐式的绑定到 if 语句上，在外部是不可访问到的。</p>\n<p>也可以通过使用 <code>{ }</code> 来显式的为 <code>let</code> 声明一个用于绑定的块:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if () &#123;</span><br><span class=\"line\">  let bar = 2;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    let foo = 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(foo); // foo is not defined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用  <code>let</code> 可以创建作用域，相对于使用 <code>var</code> 而言,<code>var</code> 会将变量定义到全局作用域中，使用 <code>let</code> 定义变量会被定义到隐式的块状作用域，因此，依赖变量的函数也要放到定义的块状作用域内。</p>\n<p>3.使用 <code>const</code>也可以创建块状作用域，使用 <code>const</code> 创建的是常量，试图修改会导致错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">  const a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a) // a is not defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>使用 <code>var</code> 定义的变量会被定义到全局变量中，使用<code>let</code> 可以创建块状作用域，使用<code>let</code>定义的变量依赖的函数要和声明的变量放在同一个作用域；</p>\n<p>使用 <code>{}</code> 可以声明显式的作用域；</p>\n"},{"title":"前端路由的实现","date":"2019-01-12T08:44:49.000Z","_content":"\n## 前端路由的两种实现方式\n\n### 路由是什么？\n\n路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。\n\n对于前端应用， 路由可以分为前端路由以及后端路由两种类型。\n\n#### 后端路由：\n\n在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：\n\n优点：\n\n- 有利于 SEO 优化。\n- 首屏加载速度快。\n\n缺点：\n\n- 每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。\n\n#### 前端路由：\n\n前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。\n\n优点： \n\n- 除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。\n- 组件的复用度高， 提高页面加载性能。\n- 前后端分离开发。\n- 当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。\n\n缺点： \n\n- 首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。\n- SEO 性能差。\n- 首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。\n\n### 前端路由的实现方式：\n\n更新视图但不重新请求页面时前端路由的核心之一。\n\n实现前端路由主要有两种模式， hash 以及 history 模式。\n\n\n\n#### hash： \n\nhash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  `#` 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。\n\nhash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。\n\n可以通过使用监听 `hashchange` 监听 hash 值的改变：\n\n```javascript\nwindow.addEventListener('hashchange', func, false);\n```\n\n这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。\n\n##### history：\n\nhistory 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。\n\n>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口\n\nwindow.history 提供了一些方法用于操作浏览器的页面行为：\n\n`window.history.back();` : url 回退， 类似于点击浏览器上方的回退按钮。\n\n`window.history.forward()`; url 前进， 类似于点击浏览器上方的前进按钮。\n\n`window.history.go(1)`: 前进到下一个页面。与 forward 相同。\n\n`window.history.go(-1):` 回退到上一个页面， 和 back 相同。\n\n 在 HTML5 中， 新增了两个新的 API： `pushState` 和 `replaceState`.\n\n```javascript\nwindow.history.pushState(state, title, url);\nwindow.history.replaceState(state, title, url);\n```\n\n使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。\n\n\n\n这两个 api 都有三个参数：\n\n- 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。\n- 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。\n- 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。\n\n使用 `pushState` 用于增加一条新的历史记录， 使用 `replaceState` 将会替换掉当前的历史记录。\n\n当活动历史记录中的条目更改的时候， 将会触发 `popstate`  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 `pushState` 或者 `replaceState` 中传入的参数 `state`\n\n```javascript\nconst state = { bar: 'foo' };\nwindow.history.pushState(state, '', 'route');\nwindow.addEventListener('popstate', function (e) {\n  console.log('state', e.state); // { bar: 'foo' }\n});\n```\n\n##### 两种路由实现方式的区别：\n\n- 使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 `#` 号之后的数值。\n- 使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。\n- 在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。","source":"_posts/前端路由的实现方式.md","raw":"---\ntitle: 前端路由的实现\ndate: 2019-01-12 16:44:49\ntags: route\ncategories: js\n\n---\n\n## 前端路由的两种实现方式\n\n### 路由是什么？\n\n路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。\n\n对于前端应用， 路由可以分为前端路由以及后端路由两种类型。\n\n#### 后端路由：\n\n在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：\n\n优点：\n\n- 有利于 SEO 优化。\n- 首屏加载速度快。\n\n缺点：\n\n- 每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。\n\n#### 前端路由：\n\n前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。\n\n优点： \n\n- 除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。\n- 组件的复用度高， 提高页面加载性能。\n- 前后端分离开发。\n- 当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。\n\n缺点： \n\n- 首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。\n- SEO 性能差。\n- 首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。\n\n### 前端路由的实现方式：\n\n更新视图但不重新请求页面时前端路由的核心之一。\n\n实现前端路由主要有两种模式， hash 以及 history 模式。\n\n\n\n#### hash： \n\nhash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  `#` 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。\n\nhash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。\n\n可以通过使用监听 `hashchange` 监听 hash 值的改变：\n\n```javascript\nwindow.addEventListener('hashchange', func, false);\n```\n\n这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。\n\n##### history：\n\nhistory 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。\n\n>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口\n\nwindow.history 提供了一些方法用于操作浏览器的页面行为：\n\n`window.history.back();` : url 回退， 类似于点击浏览器上方的回退按钮。\n\n`window.history.forward()`; url 前进， 类似于点击浏览器上方的前进按钮。\n\n`window.history.go(1)`: 前进到下一个页面。与 forward 相同。\n\n`window.history.go(-1):` 回退到上一个页面， 和 back 相同。\n\n 在 HTML5 中， 新增了两个新的 API： `pushState` 和 `replaceState`.\n\n```javascript\nwindow.history.pushState(state, title, url);\nwindow.history.replaceState(state, title, url);\n```\n\n使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。\n\n\n\n这两个 api 都有三个参数：\n\n- 状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。\n- 标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。\n- 地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。\n\n使用 `pushState` 用于增加一条新的历史记录， 使用 `replaceState` 将会替换掉当前的历史记录。\n\n当活动历史记录中的条目更改的时候， 将会触发 `popstate`  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 `pushState` 或者 `replaceState` 中传入的参数 `state`\n\n```javascript\nconst state = { bar: 'foo' };\nwindow.history.pushState(state, '', 'route');\nwindow.addEventListener('popstate', function (e) {\n  console.log('state', e.state); // { bar: 'foo' }\n});\n```\n\n##### 两种路由实现方式的区别：\n\n- 使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 `#` 号之后的数值。\n- 使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。\n- 在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。","slug":"前端路由的实现方式","published":1,"updated":"2019-01-14T02:03:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohaf0041s33gsmeloart","content":"<h2 id=\"前端路由的两种实现方式\"><a href=\"#前端路由的两种实现方式\" class=\"headerlink\" title=\"前端路由的两种实现方式\"></a>前端路由的两种实现方式</h2><h3 id=\"路由是什么？\"><a href=\"#路由是什么？\" class=\"headerlink\" title=\"路由是什么？\"></a>路由是什么？</h3><p>路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。</p>\n<p>对于前端应用， 路由可以分为前端路由以及后端路由两种类型。</p>\n<h4 id=\"后端路由：\"><a href=\"#后端路由：\" class=\"headerlink\" title=\"后端路由：\"></a>后端路由：</h4><p>在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>有利于 SEO 优化。</li>\n<li>首屏加载速度快。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。</li>\n</ul>\n<h4 id=\"前端路由：\"><a href=\"#前端路由：\" class=\"headerlink\" title=\"前端路由：\"></a>前端路由：</h4><p>前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。</p>\n<p>优点： </p>\n<ul>\n<li>除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。</li>\n<li>组件的复用度高， 提高页面加载性能。</li>\n<li>前后端分离开发。</li>\n<li>当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。</li>\n</ul>\n<p>缺点： </p>\n<ul>\n<li>首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。</li>\n<li>SEO 性能差。</li>\n<li>首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。</li>\n</ul>\n<h3 id=\"前端路由的实现方式：\"><a href=\"#前端路由的实现方式：\" class=\"headerlink\" title=\"前端路由的实现方式：\"></a>前端路由的实现方式：</h3><p>更新视图但不重新请求页面时前端路由的核心之一。</p>\n<p>实现前端路由主要有两种模式， hash 以及 history 模式。</p>\n<h4 id=\"hash：\"><a href=\"#hash：\" class=\"headerlink\" title=\"hash：\"></a>hash：</h4><p>hash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  <code>#</code> 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。</p>\n<p>hash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。</p>\n<p>可以通过使用监听 <code>hashchange</code> 监听 hash 值的改变：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, func, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。</p>\n<h5 id=\"history：\"><a href=\"#history：\" class=\"headerlink\" title=\"history：\"></a>history：</h5><p>history 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。</p>\n<blockquote>\n<p>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口</p>\n</blockquote>\n<p>window.history 提供了一些方法用于操作浏览器的页面行为：</p>\n<p><code>window.history.back();</code> : url 回退， 类似于点击浏览器上方的回退按钮。</p>\n<p><code>window.history.forward()</code>; url 前进， 类似于点击浏览器上方的前进按钮。</p>\n<p><code>window.history.go(1)</code>: 前进到下一个页面。与 forward 相同。</p>\n<p><code>window.history.go(-1):</code> 回退到上一个页面， 和 back 相同。</p>\n<p> 在 HTML5 中， 新增了两个新的 API： <code>pushState</code> 和 <code>replaceState</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, title, url);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(state, title, url);</span><br></pre></td></tr></table></figure>\n<p>使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。</p>\n<p>这两个 api 都有三个参数：</p>\n<ul>\n<li>状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>\n<li>标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>\n<li>地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</li>\n</ul>\n<p>使用 <code>pushState</code> 用于增加一条新的历史记录， 使用 <code>replaceState</code> 将会替换掉当前的历史记录。</p>\n<p>当活动历史记录中的条目更改的时候， 将会触发 <code>popstate</code>  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 <code>pushState</code> 或者 <code>replaceState</code> 中传入的参数 <code>state</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'route'</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'state'</span>, e.state); <span class=\"comment\">// &#123; bar: 'foo' &#125;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"两种路由实现方式的区别：\"><a href=\"#两种路由实现方式的区别：\" class=\"headerlink\" title=\"两种路由实现方式的区别：\"></a>两种路由实现方式的区别：</h5><ul>\n<li>使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 <code>#</code> 号之后的数值。</li>\n<li>使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。</li>\n<li>在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端路由的两种实现方式\"><a href=\"#前端路由的两种实现方式\" class=\"headerlink\" title=\"前端路由的两种实现方式\"></a>前端路由的两种实现方式</h2><h3 id=\"路由是什么？\"><a href=\"#路由是什么？\" class=\"headerlink\" title=\"路由是什么？\"></a>路由是什么？</h3><p>路由一种根据请求的内容来匹配相应执行代码的一种机制， 在前端应用上面来说， 就是通过不同的路径来请求不同的资源。</p>\n<p>对于前端应用， 路由可以分为前端路由以及后端路由两种类型。</p>\n<h4 id=\"后端路由：\"><a href=\"#后端路由：\" class=\"headerlink\" title=\"后端路由：\"></a>后端路由：</h4><p>在spa单页面应用出来之前， 最常用的一种渲染方式是服务端渲染（SSR）， 主要的方式是通过服务器返回页面上需要呈现的内容， 因此， 需要页面呈现什么的内容， 如何根据请求的不同路径返回不同的资源是由服务器端进行配置的，使用服务器端进行渲染有如下几个优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>有利于 SEO 优化。</li>\n<li>首屏加载速度快。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次请求都是渲染一个新的页面，页面重新进行刷新， 旧的页面会被丢失， 从而造成性能上的影响。</li>\n</ul>\n<h4 id=\"前端路由：\"><a href=\"#前端路由：\" class=\"headerlink\" title=\"前端路由：\"></a>前端路由：</h4><p>前端路由是单页面应用中页面切换时的资源请求方式， 前端路由会通过url的改变匹配获取到请求参数，根据请求参数的不同 在一个页面中加载不同的资源， 通过这种方式，可以跳转到不同的页面并且不会刷新页面。</p>\n<p>优点： </p>\n<ul>\n<li>除了首屏之外的页面能够快速响应， 因为每次切换页面都只需要加载少量数据。</li>\n<li>组件的复用度高， 提高页面加载性能。</li>\n<li>前后端分离开发。</li>\n<li>当页面进行切换的时候的 transiton 或者 animation 动画更容易被应用。</li>\n</ul>\n<p>缺点： </p>\n<ul>\n<li>首屏资源加载速度慢， 因为对于单页面应用， 页面渲染相关的逻辑位于js文件中，js 文件会在浏览器解析 html 之后加载， 因此会造成首屏加载时的白屏问题。</li>\n<li>SEO 性能差。</li>\n<li>首次加载比较慢， 因为整个网站的资源需要在首次加载页面的时候全部加载。</li>\n</ul>\n<h3 id=\"前端路由的实现方式：\"><a href=\"#前端路由的实现方式：\" class=\"headerlink\" title=\"前端路由的实现方式：\"></a>前端路由的实现方式：</h3><p>更新视图但不重新请求页面时前端路由的核心之一。</p>\n<p>实现前端路由主要有两种模式， hash 以及 history 模式。</p>\n<h4 id=\"hash：\"><a href=\"#hash：\" class=\"headerlink\" title=\"hash：\"></a>hash：</h4><p>hash 又被称作锚点， 本来用于放在 url 中指定网页中的位置， hash 指的是url 中  <code>#</code> 符号之后的字符， 这个值可以通过  window.localtion.hash 获取到值。</p>\n<p>hash 值时用于浏览器端的， 对于服务器端没有作用， 不会包含在 http 请求中， 改变 hash 值不会重新加载页面。</p>\n<p>可以通过使用监听 <code>hashchange</code> 监听 hash 值的改变：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'hashchange'</span>, func, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 hash 值发生变化的时候触发 func 函数， 从而更新视图。</p>\n<h5 id=\"history：\"><a href=\"#history：\" class=\"headerlink\" title=\"history：\"></a>history：</h5><p>history 模式主要是通过使用 window.history 只读属性从而对于浏览器历史记录栈进行读取信息和操作。</p>\n<blockquote>\n<p>window.history 是指向浏览器历史记录栈的只读对象， 提供了操作浏览器历史记录栈的接口</p>\n</blockquote>\n<p>window.history 提供了一些方法用于操作浏览器的页面行为：</p>\n<p><code>window.history.back();</code> : url 回退， 类似于点击浏览器上方的回退按钮。</p>\n<p><code>window.history.forward()</code>; url 前进， 类似于点击浏览器上方的前进按钮。</p>\n<p><code>window.history.go(1)</code>: 前进到下一个页面。与 forward 相同。</p>\n<p><code>window.history.go(-1):</code> 回退到上一个页面， 和 back 相同。</p>\n<p> 在 HTML5 中， 新增了两个新的 API： <code>pushState</code> 和 <code>replaceState</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, title, url);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.replaceState(state, title, url);</span><br></pre></td></tr></table></figure>\n<p>使用这两种方法修改浏览器历史记录栈之后， 虽然改变了当前的 url， 但是浏览器不会立即发送这个 url， 这就实现了更新视图但是不会请求页面的作用。</p>\n<p>这两个 api 都有三个参数：</p>\n<ul>\n<li>状态对象（state object）：一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>\n<li>标题（title）：FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>\n<li>地址（URL）： 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</li>\n</ul>\n<p>使用 <code>pushState</code> 用于增加一条新的历史记录， 使用 <code>replaceState</code> 将会替换掉当前的历史记录。</p>\n<p>当活动历史记录中的条目更改的时候， 将会触发 <code>popstate</code>  事件， 例如点击浏览器的回退按钮， 当事件被触发的时候, 事件的 state 属性为使用 <code>pushState</code> 或者 <code>replaceState</code> 中传入的参数 <code>state</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(state, <span class=\"string\">''</span>, <span class=\"string\">'route'</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'popstate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'state'</span>, e.state); <span class=\"comment\">// &#123; bar: 'foo' &#125;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"两种路由实现方式的区别：\"><a href=\"#两种路由实现方式的区别：\" class=\"headerlink\" title=\"两种路由实现方式的区别：\"></a>两种路由实现方式的区别：</h5><ul>\n<li>使用 history 模式可以设置任意和当前 url 同源的 url ，但是使用 hash 只能设置 <code>#</code> 号之后的数值。</li>\n<li>使用 history 的 pushState 可以设置相同的 url ，这个新的 url 也会被存放在记录中， 而 hash 值只有和之前的 url 不同才会被记录到 url 中。</li>\n<li>在 pushState 中通过传入的 state 值可以添加任何类型的数据， 而 hash 值只可以添加短字符。</li>\n</ul>\n"},{"title":"对象复制","date":"2017-11-04T04:39:37.000Z","_content":"\n#### 复制对象\n\n对于变量进行复制的代码如下:\n\n```javascript\nfunction clone(obj) {\n  if (obj && typeof obj === 'object') {\n    let cloneObj = Object.prototype.toString.call(obj).slice(8, -1) === 'Array' ? [] : {};\n    for (let prop in obj) {\n      if (obj[prop] && typeof obj[prop] === 'object') {\n        cloneObj[prop] = clone(obj[prop]);\n      } else {\n        cloneObj[prop] = obj[prop];    \n      }\n    }\n    return cloneObj;\n  } else {\n    return obj;\n  }\n}\n```\n\n#### 要点\n\n1. 使用 `Object.prototype.toString.call()` 来判断数据是属于对象的哪一种子类型\n\n   ```\n   let a = [];\n   typeof a; // object\n   Object.prototype.toString.call(a) // \"[object, Array]\"\n   Object.prototype.toString.call(a).slice(8, -1) // \"Array\"\n   ```\n\n2. 在 js 中 `null` 代表假值, 并且 `typeof null` 为 `object`\n\n   检测类型为不为 `null`\n\n   ```javascript\n   if (typeof obj === 'object' && obj) {\n   }\n   // 对于如果检查到的类型为 null 的时候\n   if (obj === null) {\n   // do something      \n   }\n   ```\n\n3.  `null` 表示类型尚未定义，表示未定义的类型， `undefined` 表示值没有被声明\n\n#### 获取class\n\n使用原生的方法获取到 `class` 值的方法如下:\n\n```javascript\nfunction getClass(parent, sClass) {\n  let elements = parent.getElementsByTagName('*');\n  let eleResult = [];\n  // 使用 '\\\\b' 进行匹配一个单词的边界\n  let classReg = new RegExp('\\\\b' + sClass + '\\\\b', i);\n  for (let i = 0; i < elements.length; i++) {\n    if (classReg.test(elements[i].className)) {\n      eleResult.push(elements[i]);\n    }\n  }\n  return eleResult;\n}\n```\n\n","source":"_posts/对象复制.md","raw":"---\ntitle: 对象复制\ndate: 2017-11-04 12:39:37\ntags: 对象复制\ncategories: '代码集'\n---\n\n#### 复制对象\n\n对于变量进行复制的代码如下:\n\n```javascript\nfunction clone(obj) {\n  if (obj && typeof obj === 'object') {\n    let cloneObj = Object.prototype.toString.call(obj).slice(8, -1) === 'Array' ? [] : {};\n    for (let prop in obj) {\n      if (obj[prop] && typeof obj[prop] === 'object') {\n        cloneObj[prop] = clone(obj[prop]);\n      } else {\n        cloneObj[prop] = obj[prop];    \n      }\n    }\n    return cloneObj;\n  } else {\n    return obj;\n  }\n}\n```\n\n#### 要点\n\n1. 使用 `Object.prototype.toString.call()` 来判断数据是属于对象的哪一种子类型\n\n   ```\n   let a = [];\n   typeof a; // object\n   Object.prototype.toString.call(a) // \"[object, Array]\"\n   Object.prototype.toString.call(a).slice(8, -1) // \"Array\"\n   ```\n\n2. 在 js 中 `null` 代表假值, 并且 `typeof null` 为 `object`\n\n   检测类型为不为 `null`\n\n   ```javascript\n   if (typeof obj === 'object' && obj) {\n   }\n   // 对于如果检查到的类型为 null 的时候\n   if (obj === null) {\n   // do something      \n   }\n   ```\n\n3.  `null` 表示类型尚未定义，表示未定义的类型， `undefined` 表示值没有被声明\n\n#### 获取class\n\n使用原生的方法获取到 `class` 值的方法如下:\n\n```javascript\nfunction getClass(parent, sClass) {\n  let elements = parent.getElementsByTagName('*');\n  let eleResult = [];\n  // 使用 '\\\\b' 进行匹配一个单词的边界\n  let classReg = new RegExp('\\\\b' + sClass + '\\\\b', i);\n  for (let i = 0; i < elements.length; i++) {\n    if (classReg.test(elements[i].className)) {\n      eleResult.push(elements[i]);\n    }\n  }\n  return eleResult;\n}\n```\n\n","slug":"对象复制","published":1,"updated":"2017-12-02T08:15:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohah0044s33gacyoqu5u","content":"<h4 id=\"复制对象\"><a href=\"#复制对象\" class=\"headerlink\" title=\"复制对象\"></a>复制对象</h4><p>对于变量进行复制的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneObj = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[prop] &amp;&amp; <span class=\"keyword\">typeof</span> obj[prop] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        cloneObj[prop] = clone(obj[prop]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[prop] = obj[prop];    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><ol>\n<li><p>使用 <code>Object.prototype.toString.call()</code> 来判断数据是属于对象的哪一种子类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [];</span><br><span class=\"line\">typeof a; // object</span><br><span class=\"line\">Object.prototype.toString.call(a) // &quot;[object, Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(a).slice(8, -1) // &quot;Array&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 js 中 <code>null</code> 代表假值, 并且 <code>typeof null</code> 为 <code>object</code></p>\n<p>检测类型为不为 <code>null</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 对于如果检查到的类型为 null 的时候</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something      </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>null</code> 表示类型尚未定义，表示未定义的类型， <code>undefined</code> 表示值没有被声明</p>\n</li>\n</ol>\n<h4 id=\"获取class\"><a href=\"#获取class\" class=\"headerlink\" title=\"获取class\"></a>获取class</h4><p>使用原生的方法获取到 <code>class</code> 值的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClass</span>(<span class=\"params\">parent, sClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elements = parent.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleResult = [];</span><br><span class=\"line\">  <span class=\"comment\">// 使用 '\\\\b' 进行匹配一个单词的边界</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> classReg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span> + sClass + <span class=\"string\">'\\\\b'</span>, i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classReg.test(elements[i].className)) &#123;</span><br><span class=\"line\">      eleResult.push(elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eleResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"复制对象\"><a href=\"#复制对象\" class=\"headerlink\" title=\"复制对象\"></a>复制对象</h4><p>对于变量进行复制的代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cloneObj = <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Array'</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[prop] &amp;&amp; <span class=\"keyword\">typeof</span> obj[prop] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        cloneObj[prop] = clone(obj[prop]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cloneObj[prop] = obj[prop];    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h4><ol>\n<li><p>使用 <code>Object.prototype.toString.call()</code> 来判断数据是属于对象的哪一种子类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [];</span><br><span class=\"line\">typeof a; // object</span><br><span class=\"line\">Object.prototype.toString.call(a) // &quot;[object, Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(a).slice(8, -1) // &quot;Array&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 js 中 <code>null</code> 代表假值, 并且 <code>typeof null</code> 为 <code>object</code></p>\n<p>检测类型为不为 <code>null</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 对于如果检查到的类型为 null 的时候</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">// do something      </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>null</code> 表示类型尚未定义，表示未定义的类型， <code>undefined</code> 表示值没有被声明</p>\n</li>\n</ol>\n<h4 id=\"获取class\"><a href=\"#获取class\" class=\"headerlink\" title=\"获取class\"></a>获取class</h4><p>使用原生的方法获取到 <code>class</code> 值的方法如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClass</span>(<span class=\"params\">parent, sClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> elements = parent.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eleResult = [];</span><br><span class=\"line\">  <span class=\"comment\">// 使用 '\\\\b' 进行匹配一个单词的边界</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> classReg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span> + sClass + <span class=\"string\">'\\\\b'</span>, i);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classReg.test(elements[i].className)) &#123;</span><br><span class=\"line\">      eleResult.push(elements[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> eleResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"排序算法","date":"2017-10-12T03:57:30.000Z","_content":"\n***\n\n补充关于空间复制度和时间复杂度的概念。\n\n### 冒泡排序\n\n使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。\n\n```javascript\nfunction bubbleSort (arr) {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    // 保证一轮循环之后 arr[i] 是 i 之后数组的最小值\n    for (let j = i + 1; j < len; j++) {\n    // 比较相邻两个的大小, 将较大的那个排到后面去\n    // 始终保证\n      if (arr[j] < arr[i]) {\n        // 使用 es6 结构赋值进行交换\n\t\tlet t = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = t;\n      }\n    }\n  }\n}\n```\n\n### 快速排序\n\n使用快速排序的基本原理是:\n\n算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。\n\n```javascript\n/*\n* @description quickSort 用于进行快速排序\n* @return {Array} 经过排序之后的数组\n*/\nfunction quicksort(arr) {\n  if (arr.length <= 1) {\n    return arr;    \n  }\n  let first = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < first) {\n      leftArr.push(arr[i]);  \n    }\n    if (arr[i] > first) {\n      rightArr.push(arr[i]);    \n    }\n  }\n  // 一层一层剥开我的心\n  // 一直一直进行递归~~\n  return [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);\n}\n```\n\n### 插入排序\n\n使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。\n\n```javascript\n/*\n* @description insertSort 用于进行插入排序\n* @param {Array} arr 进行排序的数组\n* @return {Array} arr 返回进过排序之后的数组\n*/\nfunction insertSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > temp) {\n        // 将大于 temp 的元素向后推一位\n        // 这些元素是之前已经被排好序的\n        arr[j + 1] = arr[j];\n        // 将元素插入到 arr[j] 的位置\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n\n\n","source":"_posts/排序算法.md","raw":"---\ntitle: 排序算法\ndate: 2017-10-12 11:57:30\ntags: 算法\ncategories: '代码集'\n---\n\n***\n\n补充关于空间复制度和时间复杂度的概念。\n\n### 冒泡排序\n\n使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。\n\n```javascript\nfunction bubbleSort (arr) {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    // 保证一轮循环之后 arr[i] 是 i 之后数组的最小值\n    for (let j = i + 1; j < len; j++) {\n    // 比较相邻两个的大小, 将较大的那个排到后面去\n    // 始终保证\n      if (arr[j] < arr[i]) {\n        // 使用 es6 结构赋值进行交换\n\t\tlet t = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = t;\n      }\n    }\n  }\n}\n```\n\n### 快速排序\n\n使用快速排序的基本原理是:\n\n算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。\n\n```javascript\n/*\n* @description quickSort 用于进行快速排序\n* @return {Array} 经过排序之后的数组\n*/\nfunction quicksort(arr) {\n  if (arr.length <= 1) {\n    return arr;    \n  }\n  let first = arr[0];\n  let leftArr = [];\n  let rightArr = [];\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < first) {\n      leftArr.push(arr[i]);  \n    }\n    if (arr[i] > first) {\n      rightArr.push(arr[i]);    \n    }\n  }\n  // 一层一层剥开我的心\n  // 一直一直进行递归~~\n  return [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);\n}\n```\n\n### 插入排序\n\n使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。\n\n```javascript\n/*\n* @description insertSort 用于进行插入排序\n* @param {Array} arr 进行排序的数组\n* @return {Array} arr 返回进过排序之后的数组\n*/\nfunction insertSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] > temp) {\n        // 将大于 temp 的元素向后推一位\n        // 这些元素是之前已经被排好序的\n        arr[j + 1] = arr[j];\n        // 将元素插入到 arr[j] 的位置\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n```\n\n\n\n","slug":"排序算法","published":1,"updated":"2017-12-10T09:01:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohak0048s33gohhpizg9","content":"<hr>\n<p>补充关于空间复制度和时间复杂度的概念。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证一轮循环之后 arr[i] 是 i 之后数组的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比较相邻两个的大小, 将较大的那个排到后面去</span></span><br><span class=\"line\">    <span class=\"comment\">// 始终保证</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 es6 结构赋值进行交换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>使用快速排序的基本原理是:</p>\n<p>算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description quickSort 用于进行快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; 经过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; first) &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; first) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 一层一层剥开我的心</span></span><br><span class=\"line\">  <span class=\"comment\">// 一直一直进行递归~~</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description insertSort 用于进行插入排序</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Array&#125; arr 进行排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; arr 返回进过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将大于 temp 的元素向后推一位</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些元素是之前已经被排好序的</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        <span class=\"comment\">// 将元素插入到 arr[j] 的位置</span></span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>补充关于空间复制度和时间复杂度的概念。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>使用 冒泡排序最重要的思想是: 将一个数和数组中右边的数依次进行比较，如果找到了有左边的数大于右边的数，进行互换，最终一次循环之后，放在左边的数是右边中的最小值，这样依次进行排列，最后得到的左边的数组是已经被排好序之后的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证一轮循环之后 arr[i] 是 i 之后数组的最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比较相邻两个的大小, 将较大的那个排到后面去</span></span><br><span class=\"line\">    <span class=\"comment\">// 始终保证</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arr[i]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 es6 结构赋值进行交换</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> t = arr[j];</span><br><span class=\"line\">\t\tarr[j] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>使用快速排序的基本原理是:</p>\n<p>算法参考某一个值，遍历一个数组，将数组中小于参考值的元素放在左边的数组中，将数组中大于参考值的元素放在右边的数组中，递归左右数组，返回合并之后的数组。合并之后的数组是已经被排好序的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description quickSort 用于进行快速排序</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; 经过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> leftArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; first) &#123;</span><br><span class=\"line\">      leftArr.push(arr[i]);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &gt; first) &#123;</span><br><span class=\"line\">      rightArr.push(arr[i]);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 一层一层剥开我的心</span></span><br><span class=\"line\">  <span class=\"comment\">// 一直一直进行递归~~</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].concat(quicksort(leftArr), [first], [quicksort(rightArr)]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>使用 插入排序的基本原理是: 想象一个数组分为两部分，对于整个数组进行遍历的时候，被遍历到的数组元素的左边是已经排好序的，实现的过程是，遍历数组元素左边的元素，和遍历到的元素进行对比，最终将这个新的元素插入到左边元素的合适的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @description insertSort 用于进行插入排序</span></span><br><span class=\"line\"><span class=\"comment\">* @param &#123;Array&#125; arr 进行排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">* @return &#123;Array&#125; arr 返回进过排序之后的数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &gt; temp) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将大于 temp 的元素向后推一位</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些元素是之前已经被排好序的</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">        <span class=\"comment\">// 将元素插入到 arr[j] 的位置</span></span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"日历","date":"2017-08-31T15:02:53.000Z","_content":"\n#### 使用面向对象的 js 代码写法，写了一个日历，代码如下\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    单个时间<input type=\"text\" id=\"startTime\">\n    时间段<input type=\"text\" id=\"longTime\">\n</div>\n<div id=\"content\">\n</div>\n<script>\n\n    (function (window){\n        function $(tag, parent) {\n            var children = [];\n            if (tag.indexOf('#') !== -1) {\n                children = document.getElementById(tag.slice(1));\n            } else if (tag.indexOf('.') !== -1) {\n                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n            } else {\n                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n            }\n            return children;\n        }\n\n        function listenEvent(dom,event,fn) {\n            \n            if (dom.attachEvent) {\n                dom.attachEvent('on' + event, fn);\n            } else {\n                dom.addEventListener(event, fn);\n            }\n        }\n\n        function dateUI (isSingle ,inputIdName, callBack) {\n            this.isSingle = isSingle;\n            this.inputIdName = inputIdName;\n            this.callBack = callBack;\n            \n            var date = new Date();\n\n            this.data = {\n                weekDay: ['日', '一', '二', '三', '四', '五', '六'],\n                minDate: '',\n                maxData: '',\n                year: 2017,\n                month: 8,\n                selectDays: []\n            }\n            this.data.year = 2017;\n            this.data.month = 8;\n\n        }\n\n        dateUI.prototype = {\n            $ : function (tag, parent) {\n                var children = [];\n                if (tag.indexOf('#') !== -1) {\n                    children = document.getElementById(tag.slice(1));\n                } else if (tag.indexOf('.') !== -1) {\n                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n                } else {\n                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n                }\n                return children;\n            },\n            listenEvent: function (dom, event, fn) {\n                if (dom.attachEvent) {\n                    dom.attachEvent('on' + event, fn);\n                } else {\n                    dom.addEventListener(event, fn);\n                }\n            },\n            initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n            },\n            reactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n            dateAct: function () {\n                var that = this;\n                var inputAdd = ['#month', '#year'];\n                that.listenEvent(that.$('#back') ,'click', function () {\n                    that.data.month++;\n                    that.initDate();\n                });\n                that.listenEvent(that.$('#pre') ,'click', function () {\n                    that.data.month--;\n                    that.initDate();\n                });\n                inputAdd.map(function (item) {\n                    that.listenEvent($(item) ,'change', function () {\n                        if (item === '#month') {\n                            that.data.month = $(item).value;\n                        } else {\n                            that.data.year = $(item).value;\n                        }\n                        that.initDate();\n                    })\n                });\n            },\n            initDate: function () {\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                var startDate = date.getDay();\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                for (let i = 0 ; i < 42; i++) {\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {\n                                // 这里有bug\n\n                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {\n                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                that.callBack();\n                            };\n                        } else {\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n            initColor: function (year, month, day) {\n                \n                    var that = this;\n                    var _minDate;\n                    var _maxDate;\n                    if (year) {\n                        var obj = {};\n                        obj.year = year;\n                        obj.month = month;\n                        obj.day = day;\n                        if (that.isSingle) {\n                            that.data.selectDays[0] = obj;\n                        } else {\n                            that.data.selectDays.push(obj);\n                            if (that.data.selectDays.length >= 2) {\n                                that.data.selectDays[1] = obj;\n                                that.data.selectDays.length = 2;\n                            }\n                        }\n                    } else {\n                        that.tds.map(function (item) {\n                            item.className = '';\n                        });\n                        \n                        that.data.selectDays.map(function (key) {\n                \n                            ((key.year === that.data.year) && (key.month === that.data.month)) ? that.tds[key.day].className = 'tdActive'  : '' ;\n                        });\n\n                        if (that.data.selectDays.length === 2) {\n                            if (that.data.selectDays.length === 2) {\n                                if (that.data.selectDays[0].day < that.data.selectDays[1].day) {\n                                    _minDate = that.data.selectDays[0].day;\n                                    _maxDate = that.data.selectDays[1].day;\n                                } else {\n                                    _maxDate = that.data.selectDays[0].day;\n                                    _minDate = that.data.selectDays[1].day;\n                                }\n                            }\n                            for (var j = _minDate + 1; j < _maxDate; j++) {\n                                if (that.data.selectDays[0].month === that.data.selectDays[1].month && that.data.selectDays[0].month === that.data.month) {\n                                    that.tds[j].className = 'timeBar';\n                                } else {\n                                    that.tds[j].className = '';\n                                }\n                            }\n                        }\n                    }\n            }\n\n        };\n        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素\n        // data.year // data.month 表示真实的年和月\n        // data 对象， 用来集中管理数据信息\n\n        // initTable 用于初始化表格，构建日期选择框\n\n\n        // initData 将data 内的数据和 input 输入框内的数据进行同步，\n        // 自动同步\n        if (window.dateCanlender !== 'undefined') {\n            listenEvent(document.getElementById('startTime'), 'click', function () {\n                $('#content').style.display = 'block'\n            });\n            var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n                dateCanlender.initTable();\n                dateCanlender.tds = document.getElementsByTagName('td');\n                dateCanlender.tds = [].slice.call(dateCanlender.tds);\n                dateCanlender.reactData();\n                var date = new Date();\n                dateCanlender.data.year = date.getFullYear();\n                dateCanlender.data.month = date.getMonth() + 1;\n               \n                dateCanlender.initDate();\n                dateCanlender.dateAct();\n        }\n    }(window))\n</script>\n<style>\n    #content {\n        display: none;\n        border: 2px solid darkgray;\n        padding: 10px;\n        margin: 50px auto;\n        width: 300px;\n    }\n    #title {\n        margin: 10px 0;\n        display: flex;\n        justify-content: space-between;\n    }\n    #title span, #title input {\n        display: inline-block;\n        width: 25%;\n        text-align: center;\n        flex: 1;\n    }\n    #title input {\n        margin: 0 10px;\n    }\n    #main {\n        width: 300px;\n    }\n    table, table thead {\n        width: 100%;\n    }\n    table thead tr {\n        width: 100%;\n        margin: 10px 0;\n        /*\n        display: flex;\n        justify-content: space-between;\n        */\n    }\n    table td {\n        text-align: center;\n    }\n    .tdActive {\n        color: white;\n        background-color: skyblue;\n    }\n\n    .timeBar {\n        background-color: gray;\n    }\n    .notClick{\n        color: lightgray;\n    }\n</style>\n</body>\n</html>\n```\n\n#### 思路\n\n这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。\n\n代码如下:\n\n```\nfunction person () {\n    }\nperson.prototype.eye = 2;\nvar he = new person();\nhe.eye // 2\n```\n\n上面的代码中，通过使用 `new` 操作符创建了 `person` 构造函数的一个实例，在构造函数中定义了一个属性 `eye` ，根据在原型链中的继承的特性，使用 `new` 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。\n\n>在通过 `new ` 操作符的过程中发生了什么？\n>\n>1.创建一个新对象\n>\n>2.将构造函数的作用域赋给新对象，（这时候 `this` 指向这个新对象）\n>\n>3.执行构造函数的代码 （这个新对象添加属性）\n>\n>4.返回新对象\n\n在上面的代码中\n\n```\n var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n```\n\n这段代码创建了构造函数 `dateUI` 的一个新实例。\n\n在构造函数的原型上，给原型添加方法 : `initTable`   `reactData`  `initDate`     ` initColor`     `dateAct`\n\n`initTable`  用来初始化表格，生成表格\n\n```\n initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n```\n\n上面中的代码 `[].slice.call(that.tds)` 将类数组对象 `tds` 转化为数组，从而可以使用数组的方法\n\n>数组中 `slice` 的方法\n\n`reactData`: 将数据变为可以跟踪变化的形式，类似于在 `vue` 中的，将  `data` 数据变为可响应式的，使用的是 \n\n`Object.defineProperty()` 方法, `getter`  `setter` 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。\n\n代码如下:\n\n```\nreactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n```\n\n`initDate` 用来像表格中填入数据：\n\n代码如下：\n\n```\n initDate: function () {\n \t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                // startDate 得到的是当月 1 号的星期几\n                var startDate = date.getDay();\n                // allDates 得到的是当前月全部的日期\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                // 下面的程序用来向表格内填入天的号数\n                for (let i = 0 ; i < 42; i++) {\n                \t// 判断开始时间，即判断表格中位于 1 号之前的表格\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        // 定义位于中间的表格可以点击区域\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {                                         \n                                // 将当前的年 月 表格输存入数组                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                // 清空input 框内的数据\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                // 点击事件完成之后调用回调函数\n                                that.callBack();\n                            };\n                        } else {\n                        // 使用 onclick = null 回收点击事件\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n                                \n```\n\n在上段代码中使用的日期对象的一些方法；\n\n`initColor` ：用来重置表格的颜色\n\n`dateAct` 用来定义日历的一些行为\n\n#### 代码总结:\n\n1.使用面向对象的写法进行编写的，而非之前的面向过程编写\n\n2.熟悉 js 中关于使用日期事件的一些方法\n\n#### 在代码中的一些问题:\n\n1.代码逻辑混乱，这一部分需要加强\n\n2.代码中需要规范，包括注释，变量的定义\n\n3.使用面向对象的写法的时候，需要知道使用 使用 `property` 构建函数的时候发生了什么，以及代码中 `this` 的指向值\n\n#### little  Tips\n\n1. `addEventListener`  `attachEvent`\n\n   ```\n   <div id='btn'>\n   </div>\n   <script>\n   \twindow.onload = function () {\n         var button = document.getElementById('btn');\n         Good.addEventListener('click', function () {\n   \t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素\n   \t\t})\n   \t}\n   </script>\n   ```\n\n   > `addEventistener` 用于监听事件\n   >\n   > `target.addEventListenter(event, fn , [userCapture])`\n   >\n   > `event` : 表示要进行监听的事件 [string]\n   >\n   > `fn` :表示 监听到事件之后的回调函数\n   >\n   > `userCapture` : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]\n\n   **在 `addEventListener`中定义的 `this` 值指向的是 tartget 对象**\n\n   在 IE 下 使用 `attachEvent` 来实现类似 `addEventListener` 的行为:\n\n   实现兼容性：\n\n   ```\n   function listenEvent(dom,event,fn) {\n               \n               if (dom.attachEvent) {\n                   dom.attachEvent('on' + event, fn);\n               } else {\n                   dom.addEventListener(event, fn);\n               }\n           }\n   ```\n\n\n2.使用 `Date`对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的\n\n","source":"_posts/日历.md","raw":"---\ntitle: 日历\ndate: 2017-08-31 23:02:53\ntags: '日历'\ncategories: 代码集\n---\n\n#### 使用面向对象的 js 代码写法，写了一个日历，代码如下\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<div>\n    单个时间<input type=\"text\" id=\"startTime\">\n    时间段<input type=\"text\" id=\"longTime\">\n</div>\n<div id=\"content\">\n</div>\n<script>\n\n    (function (window){\n        function $(tag, parent) {\n            var children = [];\n            if (tag.indexOf('#') !== -1) {\n                children = document.getElementById(tag.slice(1));\n            } else if (tag.indexOf('.') !== -1) {\n                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n            } else {\n                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n            }\n            return children;\n        }\n\n        function listenEvent(dom,event,fn) {\n            \n            if (dom.attachEvent) {\n                dom.attachEvent('on' + event, fn);\n            } else {\n                dom.addEventListener(event, fn);\n            }\n        }\n\n        function dateUI (isSingle ,inputIdName, callBack) {\n            this.isSingle = isSingle;\n            this.inputIdName = inputIdName;\n            this.callBack = callBack;\n            \n            var date = new Date();\n\n            this.data = {\n                weekDay: ['日', '一', '二', '三', '四', '五', '六'],\n                minDate: '',\n                maxData: '',\n                year: 2017,\n                month: 8,\n                selectDays: []\n            }\n            this.data.year = 2017;\n            this.data.month = 8;\n\n        }\n\n        dateUI.prototype = {\n            $ : function (tag, parent) {\n                var children = [];\n                if (tag.indexOf('#') !== -1) {\n                    children = document.getElementById(tag.slice(1));\n                } else if (tag.indexOf('.') !== -1) {\n                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));\n                } else {\n                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);\n                }\n                return children;\n            },\n            listenEvent: function (dom, event, fn) {\n                if (dom.attachEvent) {\n                    dom.attachEvent('on' + event, fn);\n                } else {\n                    dom.addEventListener(event, fn);\n                }\n            },\n            initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n            },\n            reactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n            dateAct: function () {\n                var that = this;\n                var inputAdd = ['#month', '#year'];\n                that.listenEvent(that.$('#back') ,'click', function () {\n                    that.data.month++;\n                    that.initDate();\n                });\n                that.listenEvent(that.$('#pre') ,'click', function () {\n                    that.data.month--;\n                    that.initDate();\n                });\n                inputAdd.map(function (item) {\n                    that.listenEvent($(item) ,'change', function () {\n                        if (item === '#month') {\n                            that.data.month = $(item).value;\n                        } else {\n                            that.data.year = $(item).value;\n                        }\n                        that.initDate();\n                    })\n                });\n            },\n            initDate: function () {\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                var startDate = date.getDay();\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                for (let i = 0 ; i < 42; i++) {\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {\n                                // 这里有bug\n\n                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {\n                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                that.callBack();\n                            };\n                        } else {\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n            initColor: function (year, month, day) {\n                \n                    var that = this;\n                    var _minDate;\n                    var _maxDate;\n                    if (year) {\n                        var obj = {};\n                        obj.year = year;\n                        obj.month = month;\n                        obj.day = day;\n                        if (that.isSingle) {\n                            that.data.selectDays[0] = obj;\n                        } else {\n                            that.data.selectDays.push(obj);\n                            if (that.data.selectDays.length >= 2) {\n                                that.data.selectDays[1] = obj;\n                                that.data.selectDays.length = 2;\n                            }\n                        }\n                    } else {\n                        that.tds.map(function (item) {\n                            item.className = '';\n                        });\n                        \n                        that.data.selectDays.map(function (key) {\n                \n                            ((key.year === that.data.year) && (key.month === that.data.month)) ? that.tds[key.day].className = 'tdActive'  : '' ;\n                        });\n\n                        if (that.data.selectDays.length === 2) {\n                            if (that.data.selectDays.length === 2) {\n                                if (that.data.selectDays[0].day < that.data.selectDays[1].day) {\n                                    _minDate = that.data.selectDays[0].day;\n                                    _maxDate = that.data.selectDays[1].day;\n                                } else {\n                                    _maxDate = that.data.selectDays[0].day;\n                                    _minDate = that.data.selectDays[1].day;\n                                }\n                            }\n                            for (var j = _minDate + 1; j < _maxDate; j++) {\n                                if (that.data.selectDays[0].month === that.data.selectDays[1].month && that.data.selectDays[0].month === that.data.month) {\n                                    that.tds[j].className = 'timeBar';\n                                } else {\n                                    that.tds[j].className = '';\n                                }\n                            }\n                        }\n                    }\n            }\n\n        };\n        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素\n        // data.year // data.month 表示真实的年和月\n        // data 对象， 用来集中管理数据信息\n\n        // initTable 用于初始化表格，构建日期选择框\n\n\n        // initData 将data 内的数据和 input 输入框内的数据进行同步，\n        // 自动同步\n        if (window.dateCanlender !== 'undefined') {\n            listenEvent(document.getElementById('startTime'), 'click', function () {\n                $('#content').style.display = 'block'\n            });\n            var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n                dateCanlender.initTable();\n                dateCanlender.tds = document.getElementsByTagName('td');\n                dateCanlender.tds = [].slice.call(dateCanlender.tds);\n                dateCanlender.reactData();\n                var date = new Date();\n                dateCanlender.data.year = date.getFullYear();\n                dateCanlender.data.month = date.getMonth() + 1;\n               \n                dateCanlender.initDate();\n                dateCanlender.dateAct();\n        }\n    }(window))\n</script>\n<style>\n    #content {\n        display: none;\n        border: 2px solid darkgray;\n        padding: 10px;\n        margin: 50px auto;\n        width: 300px;\n    }\n    #title {\n        margin: 10px 0;\n        display: flex;\n        justify-content: space-between;\n    }\n    #title span, #title input {\n        display: inline-block;\n        width: 25%;\n        text-align: center;\n        flex: 1;\n    }\n    #title input {\n        margin: 0 10px;\n    }\n    #main {\n        width: 300px;\n    }\n    table, table thead {\n        width: 100%;\n    }\n    table thead tr {\n        width: 100%;\n        margin: 10px 0;\n        /*\n        display: flex;\n        justify-content: space-between;\n        */\n    }\n    table td {\n        text-align: center;\n    }\n    .tdActive {\n        color: white;\n        background-color: skyblue;\n    }\n\n    .timeBar {\n        background-color: gray;\n    }\n    .notClick{\n        color: lightgray;\n    }\n</style>\n</body>\n</html>\n```\n\n#### 思路\n\n这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。\n\n代码如下:\n\n```\nfunction person () {\n    }\nperson.prototype.eye = 2;\nvar he = new person();\nhe.eye // 2\n```\n\n上面的代码中，通过使用 `new` 操作符创建了 `person` 构造函数的一个实例，在构造函数中定义了一个属性 `eye` ，根据在原型链中的继承的特性，使用 `new` 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。\n\n>在通过 `new ` 操作符的过程中发生了什么？\n>\n>1.创建一个新对象\n>\n>2.将构造函数的作用域赋给新对象，（这时候 `this` 指向这个新对象）\n>\n>3.执行构造函数的代码 （这个新对象添加属性）\n>\n>4.返回新对象\n\n在上面的代码中\n\n```\n var dateCanlender = new dateUI(true, 'startTime', function () {\n               \n            })\n```\n\n这段代码创建了构造函数 `dateUI` 的一个新实例。\n\n在构造函数的原型上，给原型添加方法 : `initTable`   `reactData`  `initDate`     ` initColor`     `dateAct`\n\n`initTable`  用来初始化表格，生成表格\n\n```\n initTable: function () {\n                var that = this;\n                var title = document.createElement('div');\n                title.setAttribute('id', 'title');\n                title.innerHTML = '<span id=\"pre\">back</span><input type=\"number\" id=\"month\"><input type=\"number\" id=\"year\"><span id=\"back\">pre</span>'\n                var main = document.createElement('div');\n                main.setAttribute('id', 'main');\n                var table = document.createElement('table');\n                table.innerHTML = '<thead><tr></tr></thead><tbody></tbody>';\n                main.appendChild(table);\n                that.$('#content').appendChild(title);\n                that.$('#content').appendChild(main);\n                for (let i = 0; i < that.data.weekDay.length; i++) {\n                    that.$('tr', that.$('thead')[0])[0].innerHTML += '<th>' + that.data.weekDay[i] + '</th>';\n                }\n                var _ROW = 6;\n                var _COL = 7;\n                for (var i = 0; i < _ROW; i++) {\n                    that.$('tbody')[0].innerHTML += '<tr></tr>';\n                    for (var j = 0; j < _COL; j++) {\n                        that.$('tr', that.$('tbody')[0])[i].innerHTML += '<td></td>';\n                    }\n                }\n                that.tds = document.getElementsByTagName('td');\n                that.tds = [].slice.call(that.tds);\n               \n```\n\n上面中的代码 `[].slice.call(that.tds)` 将类数组对象 `tds` 转化为数组，从而可以使用数组的方法\n\n>数组中 `slice` 的方法\n\n`reactData`: 将数据变为可以跟踪变化的形式，类似于在 `vue` 中的，将  `data` 数据变为可响应式的，使用的是 \n\n`Object.defineProperty()` 方法, `getter`  `setter` 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。\n\n代码如下:\n\n```\nreactData: function () {\n                var that = this;\n                var props = ['year', 'month'];\n                props.map(function (item) {\n                    var dom = null;\n                    item === 'year' ? dom = that.$('#year') : dom = that.$('#month');\n                    Object.defineProperty(that.data, item, {\n                        get: function () {\n                            return dom.value; // 绑定dom, 自动获取到value值\n                        },\n                        set: function (newVal) {\n                            if (item === 'month') {\n                                if (newVal > 12) {\n                                    newVal = 1;\n                                    that.data.year++;\n                                } else if (newVal <= 0) {\n                                    newVal = 12;\n                                    that.data.year--;\n                                }\n                            }\n                            dom.value = newVal;\n                        }\n                    })\n                });\n            },\n```\n\n`initDate` 用来像表格中填入数据：\n\n代码如下：\n\n```\n initDate: function () {\n \t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况\n                var that = this;\n                var date = new Date(that.data.year,  that.$('#month').value - 1, 1);\n                // startDate 得到的是当月 1 号的星期几\n                var startDate = date.getDay();\n                // allDates 得到的是当前月全部的日期\n                var allDates =  new Date(that.data.year, that.$('#month').value, 0).getDate();\n                var tds = document.getElementsByTagName('td');\n                that.initColor();\n                var j = 0;\n                startDate = (startDate ? startDate : 7);\n                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始\n                // 下面的程序用来向表格内填入天的号数\n                for (let i = 0 ; i < 42; i++) {\n                \t// 判断开始时间，即判断表格中位于 1 号之前的表格\n                    if (i >= startDate) {\n                        j >= allDates ? j = 1 : j++;\n                        tds[i].innerHTML = j;\n                        // 定义位于中间的表格可以点击区域\n                        if(i < allDates + startDate ) {\n                            tds[i].onclick = function () {                                         \n                                // 将当前的年 月 表格输存入数组                                \n                                that.initColor(that.data.year, that.data.month, i);\n                                that.initColor();\n                                // 清空input 框内的数据\n                                that.$('#' + that.inputIdName).value = '';\n                                that.data.selectDays.map(function (item, index, array) {                                    \n                                    that.$('#' + that.inputIdName).value = item.year + '-' + item.month + '-' + that.tds[item.day].innerHTML;\n                                    if (!that.isSingle) {\n                                        var min;\n                                        that.data.selectDays.map(function (item, index, array) {\n                                                if (item.day < that.data.selectDays[0].day) {\n                                                    min = item;\n                                                } else {\n                                                    min = that.data.selectDays[0];\n                                                }\n                                            }\n                                        );\n                                    }\n                                });\n                                // 点击事件完成之后调用回调函数\n                                that.callBack();\n                            };\n                        } else {\n                        // 使用 onclick = null 回收点击事件\n                            tds[i].onclick = null;\n                            tds[i].className = 'notClick';\n                             }\n                    } else {\n                        tds[i].className = 'notClick';\n                        document.getElementsByTagName('td')[i].onclick = null; // 回收 click 事件\n                        tds[i].innerHTML = new Date(that.data.year, that.$('#month').value - 1, 0).getDate() + 1 -startDate + i ;\n                    }\n                }\n            },\n                                \n```\n\n在上段代码中使用的日期对象的一些方法；\n\n`initColor` ：用来重置表格的颜色\n\n`dateAct` 用来定义日历的一些行为\n\n#### 代码总结:\n\n1.使用面向对象的写法进行编写的，而非之前的面向过程编写\n\n2.熟悉 js 中关于使用日期事件的一些方法\n\n#### 在代码中的一些问题:\n\n1.代码逻辑混乱，这一部分需要加强\n\n2.代码中需要规范，包括注释，变量的定义\n\n3.使用面向对象的写法的时候，需要知道使用 使用 `property` 构建函数的时候发生了什么，以及代码中 `this` 的指向值\n\n#### little  Tips\n\n1. `addEventListener`  `attachEvent`\n\n   ```\n   <div id='btn'>\n   </div>\n   <script>\n   \twindow.onload = function () {\n         var button = document.getElementById('btn');\n         Good.addEventListener('click', function () {\n   \t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素\n   \t\t})\n   \t}\n   </script>\n   ```\n\n   > `addEventistener` 用于监听事件\n   >\n   > `target.addEventListenter(event, fn , [userCapture])`\n   >\n   > `event` : 表示要进行监听的事件 [string]\n   >\n   > `fn` :表示 监听到事件之后的回调函数\n   >\n   > `userCapture` : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]\n\n   **在 `addEventListener`中定义的 `this` 值指向的是 tartget 对象**\n\n   在 IE 下 使用 `attachEvent` 来实现类似 `addEventListener` 的行为:\n\n   实现兼容性：\n\n   ```\n   function listenEvent(dom,event,fn) {\n               \n               if (dom.attachEvent) {\n                   dom.attachEvent('on' + event, fn);\n               } else {\n                   dom.addEventListener(event, fn);\n               }\n           }\n   ```\n\n\n2.使用 `Date`对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的\n\n","slug":"日历","published":1,"updated":"2017-09-10T15:16:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23oham004bs33grg89wvun","content":"<h4 id=\"使用面向对象的-js-代码写法，写了一个日历，代码如下\"><a href=\"#使用面向对象的-js-代码写法，写了一个日历，代码如下\" class=\"headerlink\" title=\"使用面向对象的 js 代码写法，写了一个日历，代码如下\"></a>使用面向对象的 js 代码写法，写了一个日历，代码如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    单个时间&lt;input type=&quot;text&quot; id=&quot;startTime&quot;&gt;</span><br><span class=\"line\">    时间段&lt;input type=&quot;text&quot; id=&quot;longTime&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    (function (window)&#123;</span><br><span class=\"line\">        function $(tag, parent) &#123;</span><br><span class=\"line\">            var children = [];</span><br><span class=\"line\">            if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">            &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return children;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function dateUI (isSingle ,inputIdName, callBack) &#123;</span><br><span class=\"line\">            this.isSingle = isSingle;</span><br><span class=\"line\">            this.inputIdName = inputIdName;</span><br><span class=\"line\">            this.callBack = callBack;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var date = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">            this.data = &#123;</span><br><span class=\"line\">                weekDay: [&apos;日&apos;, &apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;],</span><br><span class=\"line\">                minDate: &apos;&apos;,</span><br><span class=\"line\">                maxData: &apos;&apos;,</span><br><span class=\"line\">                year: 2017,</span><br><span class=\"line\">                month: 8,</span><br><span class=\"line\">                selectDays: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.data.year = 2017;</span><br><span class=\"line\">            this.data.month = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dateUI.prototype = &#123;</span><br><span class=\"line\">            $ : function (tag, parent) &#123;</span><br><span class=\"line\">                var children = [];</span><br><span class=\"line\">                if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">                &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return children;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            listenEvent: function (dom, event, fn) &#123;</span><br><span class=\"line\">                if (dom.attachEvent) &#123;</span><br><span class=\"line\">                    dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    dom.addEventListener(event, fn);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initTable: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">                title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">                var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">                var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">                table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">                main.appendChild(table);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">                for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var _ROW = 6;</span><br><span class=\"line\">                var _COL = 7;</span><br><span class=\"line\">                for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                    for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                        that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.tds = [].slice.call(that.tds);</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            dateAct: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var inputAdd = [&apos;#month&apos;, &apos;#year&apos;];</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#back&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month++;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#pre&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month--;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                inputAdd.map(function (item) &#123;</span><br><span class=\"line\">                    that.listenEvent($(item) ,&apos;change&apos;, function () &#123;</span><br><span class=\"line\">                        if (item === &apos;#month&apos;) &#123;</span><br><span class=\"line\">                            that.data.month = $(item).value;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.year = $(item).value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        that.initDate();</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initDate: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">                var startDate = date.getDay();</span><br><span class=\"line\">                var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">                var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.initColor();</span><br><span class=\"line\">                var j = 0;</span><br><span class=\"line\">                startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">                for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">                    if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                        j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                        tds[i].innerHTML = j;</span><br><span class=\"line\">                        if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                            tds[i].onclick = function () &#123;</span><br><span class=\"line\">                                // 这里有bug</span><br><span class=\"line\"></span><br><span class=\"line\">                                </span><br><span class=\"line\">                                that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                                that.initColor();</span><br><span class=\"line\">                                that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                                that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                    if (!that.isSingle) &#123;</span><br><span class=\"line\">                                        var min;</span><br><span class=\"line\">                                        that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                                if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                    min = item;</span><br><span class=\"line\">                                                &#125; else &#123;</span><br><span class=\"line\">                                                    min = that.data.selectDays[0];</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        );</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                that.callBack();</span><br><span class=\"line\">                            &#125;;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            tds[i].onclick = null;</span><br><span class=\"line\">                            tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                        document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                        tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initColor: function (year, month, day) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                    var that = this;</span><br><span class=\"line\">                    var _minDate;</span><br><span class=\"line\">                    var _maxDate;</span><br><span class=\"line\">                    if (year) &#123;</span><br><span class=\"line\">                        var obj = &#123;&#125;;</span><br><span class=\"line\">                        obj.year = year;</span><br><span class=\"line\">                        obj.month = month;</span><br><span class=\"line\">                        obj.day = day;</span><br><span class=\"line\">                        if (that.isSingle) &#123;</span><br><span class=\"line\">                            that.data.selectDays[0] = obj;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.selectDays.push(obj);</span><br><span class=\"line\">                            if (that.data.selectDays.length &gt;= 2) &#123;</span><br><span class=\"line\">                                that.data.selectDays[1] = obj;</span><br><span class=\"line\">                                that.data.selectDays.length = 2;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        that.tds.map(function (item) &#123;</span><br><span class=\"line\">                            item.className = &apos;&apos;;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        that.data.selectDays.map(function (key) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                            ((key.year === that.data.year) &amp;&amp; (key.month === that.data.month)) ? that.tds[key.day].className = &apos;tdActive&apos;  : &apos;&apos; ;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                            if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].day &lt; that.data.selectDays[1].day) &#123;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            for (var j = _minDate + 1; j &lt; _maxDate; j++) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].month === that.data.selectDays[1].month &amp;&amp; that.data.selectDays[0].month === that.data.month) &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;timeBar&apos;;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素</span><br><span class=\"line\">        // data.year // data.month 表示真实的年和月</span><br><span class=\"line\">        // data 对象， 用来集中管理数据信息</span><br><span class=\"line\"></span><br><span class=\"line\">        // initTable 用于初始化表格，构建日期选择框</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // initData 将data 内的数据和 input 输入框内的数据进行同步，</span><br><span class=\"line\">        // 自动同步</span><br><span class=\"line\">        if (window.dateCanlender !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">            listenEvent(document.getElementById(&apos;startTime&apos;), &apos;click&apos;, function () &#123;</span><br><span class=\"line\">                $(&apos;#content&apos;).style.display = &apos;block&apos;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">                dateCanlender.initTable();</span><br><span class=\"line\">                dateCanlender.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                dateCanlender.tds = [].slice.call(dateCanlender.tds);</span><br><span class=\"line\">                dateCanlender.reactData();</span><br><span class=\"line\">                var date = new Date();</span><br><span class=\"line\">                dateCanlender.data.year = date.getFullYear();</span><br><span class=\"line\">                dateCanlender.data.month = date.getMonth() + 1;</span><br><span class=\"line\">               </span><br><span class=\"line\">                dateCanlender.initDate();</span><br><span class=\"line\">                dateCanlender.dateAct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(window))</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    #content &#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">        border: 2px solid darkgray;</span><br><span class=\"line\">        padding: 10px;</span><br><span class=\"line\">        margin: 50px auto;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title &#123;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title span, #title input &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title input &#123;</span><br><span class=\"line\">        margin: 0 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #main &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table, table thead &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table thead tr &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table td &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .tdActive &#123;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background-color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .timeBar &#123;</span><br><span class=\"line\">        background-color: gray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .notClick&#123;</span><br><span class=\"line\">        color: lightgray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">person.prototype.eye = 2;</span><br><span class=\"line\">var he = new person();</span><br><span class=\"line\">he.eye // 2</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，通过使用 <code>new</code> 操作符创建了 <code>person</code> 构造函数的一个实例，在构造函数中定义了一个属性 <code>eye</code> ，根据在原型链中的继承的特性，使用 <code>new</code> 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。</p>\n<blockquote>\n<p>在通过 <code>new</code> 操作符的过程中发生了什么？</p>\n<p>1.创建一个新对象</p>\n<p>2.将构造函数的作用域赋给新对象，（这时候 <code>this</code> 指向这个新对象）</p>\n<p>3.执行构造函数的代码 （这个新对象添加属性）</p>\n<p>4.返回新对象</p>\n</blockquote>\n<p>在上面的代码中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码创建了构造函数 <code>dateUI</code> 的一个新实例。</p>\n<p>在构造函数的原型上，给原型添加方法 : <code>initTable</code>   <code>reactData</code>  <code>initDate</code>     <code>initColor</code>     <code>dateAct</code></p>\n<p><code>initTable</code>  用来初始化表格，生成表格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTable: function () &#123;</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">               title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">               var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">               var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">               table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">               main.appendChild(table);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">               for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               var _ROW = 6;</span><br><span class=\"line\">               var _COL = 7;</span><br><span class=\"line\">               for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                   for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                       that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.tds = [].slice.call(that.tds);</span><br></pre></td></tr></table></figure>\n<p>上面中的代码 <code>[].slice.call(that.tds)</code> 将类数组对象 <code>tds</code> 转化为数组，从而可以使用数组的方法</p>\n<blockquote>\n<p>数组中 <code>slice</code> 的方法</p>\n</blockquote>\n<p><code>reactData</code>: 将数据变为可以跟踪变化的形式，类似于在 <code>vue</code> 中的，将  <code>data</code> 数据变为可响应式的，使用的是 </p>\n<p><code>Object.defineProperty()</code> 方法, <code>getter</code>  <code>setter</code> 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p><code>initDate</code> 用来像表格中填入数据：</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initDate: function () &#123;</span><br><span class=\"line\">\t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">               // startDate 得到的是当月 1 号的星期几</span><br><span class=\"line\">               var startDate = date.getDay();</span><br><span class=\"line\">               // allDates 得到的是当前月全部的日期</span><br><span class=\"line\">               var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">               var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.initColor();</span><br><span class=\"line\">               var j = 0;</span><br><span class=\"line\">               startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">               // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">               // 下面的程序用来向表格内填入天的号数</span><br><span class=\"line\">               for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">               \t// 判断开始时间，即判断表格中位于 1 号之前的表格</span><br><span class=\"line\">                   if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                       j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                       tds[i].innerHTML = j;</span><br><span class=\"line\">                       // 定义位于中间的表格可以点击区域</span><br><span class=\"line\">                       if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                           tds[i].onclick = function () &#123;                                         </span><br><span class=\"line\">                               // 将当前的年 月 表格输存入数组                                </span><br><span class=\"line\">                               that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                               that.initColor();</span><br><span class=\"line\">                               // 清空input 框内的数据</span><br><span class=\"line\">                               that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                               that.data.selectDays.map(function (item, index, array) &#123;                                    </span><br><span class=\"line\">                                   that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                   if (!that.isSingle) &#123;</span><br><span class=\"line\">                                       var min;</span><br><span class=\"line\">                                       that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                               if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                   min = item;</span><br><span class=\"line\">                                               &#125; else &#123;</span><br><span class=\"line\">                                                   min = that.data.selectDays[0];</span><br><span class=\"line\">                                               &#125;</span><br><span class=\"line\">                                           &#125;</span><br><span class=\"line\">                                       );</span><br><span class=\"line\">                                   &#125;</span><br><span class=\"line\">                               &#125;);</span><br><span class=\"line\">                               // 点击事件完成之后调用回调函数</span><br><span class=\"line\">                               that.callBack();</span><br><span class=\"line\">                           &#125;;</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                       // 使用 onclick = null 回收点击事件</span><br><span class=\"line\">                           tds[i].onclick = null;</span><br><span class=\"line\">                           tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                       document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                       tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;,</span><br></pre></td></tr></table></figure>\n<p>在上段代码中使用的日期对象的一些方法；</p>\n<p><code>initColor</code> ：用来重置表格的颜色</p>\n<p><code>dateAct</code> 用来定义日历的一些行为</p>\n<h4 id=\"代码总结\"><a href=\"#代码总结\" class=\"headerlink\" title=\"代码总结:\"></a>代码总结:</h4><p>1.使用面向对象的写法进行编写的，而非之前的面向过程编写</p>\n<p>2.熟悉 js 中关于使用日期事件的一些方法</p>\n<h4 id=\"在代码中的一些问题\"><a href=\"#在代码中的一些问题\" class=\"headerlink\" title=\"在代码中的一些问题:\"></a>在代码中的一些问题:</h4><p>1.代码逻辑混乱，这一部分需要加强</p>\n<p>2.代码中需要规范，包括注释，变量的定义</p>\n<p>3.使用面向对象的写法的时候，需要知道使用 使用 <code>property</code> 构建函数的时候发生了什么，以及代码中 <code>this</code> 的指向值</p>\n<h4 id=\"little-Tips\"><a href=\"#little-Tips\" class=\"headerlink\" title=\"little  Tips\"></a>little  Tips</h4><ol>\n<li><p><code>addEventListener</code>  <code>attachEvent</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;btn&apos;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.onload = function () &#123;</span><br><span class=\"line\">      var button = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\">      Good.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">\t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>addEventistener</code> 用于监听事件</p>\n<p><code>target.addEventListenter(event, fn , [userCapture])</code></p>\n<p><code>event</code> : 表示要进行监听的事件 [string]</p>\n<p><code>fn</code> :表示 监听到事件之后的回调函数</p>\n<p><code>userCapture</code> : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]</p>\n</blockquote>\n<p><strong>在 <code>addEventListener</code>中定义的 <code>this</code> 值指向的是 tartget 对象</strong></p>\n<p>在 IE 下 使用 <code>attachEvent</code> 来实现类似 <code>addEventListener</code> 的行为:</p>\n<p>实现兼容性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>Date</code>对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"使用面向对象的-js-代码写法，写了一个日历，代码如下\"><a href=\"#使用面向对象的-js-代码写法，写了一个日历，代码如下\" class=\"headerlink\" title=\"使用面向对象的 js 代码写法，写了一个日历，代码如下\"></a>使用面向对象的 js 代码写法，写了一个日历，代码如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    单个时间&lt;input type=&quot;text&quot; id=&quot;startTime&quot;&gt;</span><br><span class=\"line\">    时间段&lt;input type=&quot;text&quot; id=&quot;longTime&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    (function (window)&#123;</span><br><span class=\"line\">        function $(tag, parent) &#123;</span><br><span class=\"line\">            var children = [];</span><br><span class=\"line\">            if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">            &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return children;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function dateUI (isSingle ,inputIdName, callBack) &#123;</span><br><span class=\"line\">            this.isSingle = isSingle;</span><br><span class=\"line\">            this.inputIdName = inputIdName;</span><br><span class=\"line\">            this.callBack = callBack;</span><br><span class=\"line\">            </span><br><span class=\"line\">            var date = new Date();</span><br><span class=\"line\"></span><br><span class=\"line\">            this.data = &#123;</span><br><span class=\"line\">                weekDay: [&apos;日&apos;, &apos;一&apos;, &apos;二&apos;, &apos;三&apos;, &apos;四&apos;, &apos;五&apos;, &apos;六&apos;],</span><br><span class=\"line\">                minDate: &apos;&apos;,</span><br><span class=\"line\">                maxData: &apos;&apos;,</span><br><span class=\"line\">                year: 2017,</span><br><span class=\"line\">                month: 8,</span><br><span class=\"line\">                selectDays: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.data.year = 2017;</span><br><span class=\"line\">            this.data.month = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        dateUI.prototype = &#123;</span><br><span class=\"line\">            $ : function (tag, parent) &#123;</span><br><span class=\"line\">                var children = [];</span><br><span class=\"line\">                if (tag.indexOf(&apos;#&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = document.getElementById(tag.slice(1));</span><br><span class=\"line\">                &#125; else if (tag.indexOf(&apos;.&apos;) !== -1) &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByClassName(tag.slice(1)) : document.getElementsByClassName(tag.slice(1));</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    children = parent ? parent.getElementsByTagName(tag) : document.getElementsByTagName(tag);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return children;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            listenEvent: function (dom, event, fn) &#123;</span><br><span class=\"line\">                if (dom.attachEvent) &#123;</span><br><span class=\"line\">                    dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    dom.addEventListener(event, fn);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initTable: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">                title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">                var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">                main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">                var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">                table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">                main.appendChild(table);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">                that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">                for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var _ROW = 6;</span><br><span class=\"line\">                var _COL = 7;</span><br><span class=\"line\">                for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                    that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                    for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                        that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.tds = [].slice.call(that.tds);</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            dateAct: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var inputAdd = [&apos;#month&apos;, &apos;#year&apos;];</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#back&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month++;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                that.listenEvent(that.$(&apos;#pre&apos;) ,&apos;click&apos;, function () &#123;</span><br><span class=\"line\">                    that.data.month--;</span><br><span class=\"line\">                    that.initDate();</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                inputAdd.map(function (item) &#123;</span><br><span class=\"line\">                    that.listenEvent($(item) ,&apos;change&apos;, function () &#123;</span><br><span class=\"line\">                        if (item === &apos;#month&apos;) &#123;</span><br><span class=\"line\">                            that.data.month = $(item).value;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.year = $(item).value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        that.initDate();</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initDate: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">                var startDate = date.getDay();</span><br><span class=\"line\">                var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">                var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                that.initColor();</span><br><span class=\"line\">                var j = 0;</span><br><span class=\"line\">                startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">                // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">                for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">                    if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                        j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                        tds[i].innerHTML = j;</span><br><span class=\"line\">                        if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                            tds[i].onclick = function () &#123;</span><br><span class=\"line\">                                // 这里有bug</span><br><span class=\"line\"></span><br><span class=\"line\">                                </span><br><span class=\"line\">                                that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                                that.initColor();</span><br><span class=\"line\">                                that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                                that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                    if (!that.isSingle) &#123;</span><br><span class=\"line\">                                        var min;</span><br><span class=\"line\">                                        that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                                if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                    min = item;</span><br><span class=\"line\">                                                &#125; else &#123;</span><br><span class=\"line\">                                                    min = that.data.selectDays[0];</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        );</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                that.callBack();</span><br><span class=\"line\">                            &#125;;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            tds[i].onclick = null;</span><br><span class=\"line\">                            tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                        document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                        tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            initColor: function (year, month, day) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                    var that = this;</span><br><span class=\"line\">                    var _minDate;</span><br><span class=\"line\">                    var _maxDate;</span><br><span class=\"line\">                    if (year) &#123;</span><br><span class=\"line\">                        var obj = &#123;&#125;;</span><br><span class=\"line\">                        obj.year = year;</span><br><span class=\"line\">                        obj.month = month;</span><br><span class=\"line\">                        obj.day = day;</span><br><span class=\"line\">                        if (that.isSingle) &#123;</span><br><span class=\"line\">                            that.data.selectDays[0] = obj;</span><br><span class=\"line\">                        &#125; else &#123;</span><br><span class=\"line\">                            that.data.selectDays.push(obj);</span><br><span class=\"line\">                            if (that.data.selectDays.length &gt;= 2) &#123;</span><br><span class=\"line\">                                that.data.selectDays[1] = obj;</span><br><span class=\"line\">                                that.data.selectDays.length = 2;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        that.tds.map(function (item) &#123;</span><br><span class=\"line\">                            item.className = &apos;&apos;;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        that.data.selectDays.map(function (key) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                            ((key.year === that.data.year) &amp;&amp; (key.month === that.data.month)) ? that.tds[key.day].className = &apos;tdActive&apos;  : &apos;&apos; ;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                            if (that.data.selectDays.length === 2) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].day &lt; that.data.selectDays[1].day) &#123;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    _maxDate = that.data.selectDays[0].day;</span><br><span class=\"line\">                                    _minDate = that.data.selectDays[1].day;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            for (var j = _minDate + 1; j &lt; _maxDate; j++) &#123;</span><br><span class=\"line\">                                if (that.data.selectDays[0].month === that.data.selectDays[1].month &amp;&amp; that.data.selectDays[0].month === that.data.month) &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;timeBar&apos;;</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    that.tds[j].className = &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 使用 $() 类似于 jQuery 中的调用写法，用来调用 dom 元素</span><br><span class=\"line\">        // data.year // data.month 表示真实的年和月</span><br><span class=\"line\">        // data 对象， 用来集中管理数据信息</span><br><span class=\"line\"></span><br><span class=\"line\">        // initTable 用于初始化表格，构建日期选择框</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // initData 将data 内的数据和 input 输入框内的数据进行同步，</span><br><span class=\"line\">        // 自动同步</span><br><span class=\"line\">        if (window.dateCanlender !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">            listenEvent(document.getElementById(&apos;startTime&apos;), &apos;click&apos;, function () &#123;</span><br><span class=\"line\">                $(&apos;#content&apos;).style.display = &apos;block&apos;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">                dateCanlender.initTable();</span><br><span class=\"line\">                dateCanlender.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">                dateCanlender.tds = [].slice.call(dateCanlender.tds);</span><br><span class=\"line\">                dateCanlender.reactData();</span><br><span class=\"line\">                var date = new Date();</span><br><span class=\"line\">                dateCanlender.data.year = date.getFullYear();</span><br><span class=\"line\">                dateCanlender.data.month = date.getMonth() + 1;</span><br><span class=\"line\">               </span><br><span class=\"line\">                dateCanlender.initDate();</span><br><span class=\"line\">                dateCanlender.dateAct();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(window))</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    #content &#123;</span><br><span class=\"line\">        display: none;</span><br><span class=\"line\">        border: 2px solid darkgray;</span><br><span class=\"line\">        padding: 10px;</span><br><span class=\"line\">        margin: 50px auto;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title &#123;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title span, #title input &#123;</span><br><span class=\"line\">        display: inline-block;</span><br><span class=\"line\">        width: 25%;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        flex: 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #title input &#123;</span><br><span class=\"line\">        margin: 0 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #main &#123;</span><br><span class=\"line\">        width: 300px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table, table thead &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table thead tr &#123;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 10px 0;</span><br><span class=\"line\">        /*</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: space-between;</span><br><span class=\"line\">        */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    table td &#123;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .tdActive &#123;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">        background-color: skyblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .timeBar &#123;</span><br><span class=\"line\">        background-color: gray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .notClick&#123;</span><br><span class=\"line\">        color: lightgray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>这段代码是使用面向对象的语法写的，面向对象程序设计的主要使用了构造函数和原型的语法。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person () &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">person.prototype.eye = 2;</span><br><span class=\"line\">var he = new person();</span><br><span class=\"line\">he.eye // 2</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，通过使用 <code>new</code> 操作符创建了 <code>person</code> 构造函数的一个实例，在构造函数中定义了一个属性 <code>eye</code> ，根据在原型链中的继承的特性，使用 <code>new</code> 操作符创建的实例，会继承构造函数上定义的属性和方法，因此，我们可以在构造函数上定义公共属性和方法。</p>\n<blockquote>\n<p>在通过 <code>new</code> 操作符的过程中发生了什么？</p>\n<p>1.创建一个新对象</p>\n<p>2.将构造函数的作用域赋给新对象，（这时候 <code>this</code> 指向这个新对象）</p>\n<p>3.执行构造函数的代码 （这个新对象添加属性）</p>\n<p>4.返回新对象</p>\n</blockquote>\n<p>在上面的代码中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dateCanlender = new dateUI(true, &apos;startTime&apos;, function () &#123;</span><br><span class=\"line\">              </span><br><span class=\"line\">           &#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码创建了构造函数 <code>dateUI</code> 的一个新实例。</p>\n<p>在构造函数的原型上，给原型添加方法 : <code>initTable</code>   <code>reactData</code>  <code>initDate</code>     <code>initColor</code>     <code>dateAct</code></p>\n<p><code>initTable</code>  用来初始化表格，生成表格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTable: function () &#123;</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var title = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               title.setAttribute(&apos;id&apos;, &apos;title&apos;);</span><br><span class=\"line\">               title.innerHTML = &apos;&lt;span id=&quot;pre&quot;&gt;back&lt;/span&gt;&lt;input type=&quot;number&quot; id=&quot;month&quot;&gt;&lt;input type=&quot;number&quot; id=&quot;year&quot;&gt;&lt;span id=&quot;back&quot;&gt;pre&lt;/span&gt;&apos;</span><br><span class=\"line\">               var main = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">               main.setAttribute(&apos;id&apos;, &apos;main&apos;);</span><br><span class=\"line\">               var table = document.createElement(&apos;table&apos;);</span><br><span class=\"line\">               table.innerHTML = &apos;&lt;thead&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tbody&gt;&apos;;</span><br><span class=\"line\">               main.appendChild(table);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(title);</span><br><span class=\"line\">               that.$(&apos;#content&apos;).appendChild(main);</span><br><span class=\"line\">               for (let i = 0; i &lt; that.data.weekDay.length; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tr&apos;, that.$(&apos;thead&apos;)[0])[0].innerHTML += &apos;&lt;th&gt;&apos; + that.data.weekDay[i] + &apos;&lt;/th&gt;&apos;;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               var _ROW = 6;</span><br><span class=\"line\">               var _COL = 7;</span><br><span class=\"line\">               for (var i = 0; i &lt; _ROW; i++) &#123;</span><br><span class=\"line\">                   that.$(&apos;tbody&apos;)[0].innerHTML += &apos;&lt;tr&gt;&lt;/tr&gt;&apos;;</span><br><span class=\"line\">                   for (var j = 0; j &lt; _COL; j++) &#123;</span><br><span class=\"line\">                       that.$(&apos;tr&apos;, that.$(&apos;tbody&apos;)[0])[i].innerHTML += &apos;&lt;td&gt;&lt;/td&gt;&apos;;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               that.tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.tds = [].slice.call(that.tds);</span><br></pre></td></tr></table></figure>\n<p>上面中的代码 <code>[].slice.call(that.tds)</code> 将类数组对象 <code>tds</code> 转化为数组，从而可以使用数组的方法</p>\n<blockquote>\n<p>数组中 <code>slice</code> 的方法</p>\n</blockquote>\n<p><code>reactData</code>: 将数据变为可以跟踪变化的形式，类似于在 <code>vue</code> 中的，将  <code>data</code> 数据变为可响应式的，使用的是 </p>\n<p><code>Object.defineProperty()</code> 方法, <code>getter</code>  <code>setter</code> 等方法构建响应式数据。通过这种方法创建的数据是可以响应式的。</p>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reactData: function () &#123;</span><br><span class=\"line\">                var that = this;</span><br><span class=\"line\">                var props = [&apos;year&apos;, &apos;month&apos;];</span><br><span class=\"line\">                props.map(function (item) &#123;</span><br><span class=\"line\">                    var dom = null;</span><br><span class=\"line\">                    item === &apos;year&apos; ? dom = that.$(&apos;#year&apos;) : dom = that.$(&apos;#month&apos;);</span><br><span class=\"line\">                    Object.defineProperty(that.data, item, &#123;</span><br><span class=\"line\">                        get: function () &#123;</span><br><span class=\"line\">                            return dom.value; // 绑定dom, 自动获取到value值</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        set: function (newVal) &#123;</span><br><span class=\"line\">                            if (item === &apos;month&apos;) &#123;</span><br><span class=\"line\">                                if (newVal &gt; 12) &#123;</span><br><span class=\"line\">                                    newVal = 1;</span><br><span class=\"line\">                                    that.data.year++;</span><br><span class=\"line\">                                &#125; else if (newVal &lt;= 0) &#123;</span><br><span class=\"line\">                                    newVal = 12;</span><br><span class=\"line\">                                    that.data.year--;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            dom.value = newVal;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure>\n<p><code>initDate</code> 用来像表格中填入数据：</p>\n<p>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initDate: function () &#123;</span><br><span class=\"line\">\t\t\t\t// 将 this 值存入 that,为了防止在 onclick  事件中 this  值改变的情况</span><br><span class=\"line\">               var that = this;</span><br><span class=\"line\">               var date = new Date(that.data.year,  that.$(&apos;#month&apos;).value - 1, 1);</span><br><span class=\"line\">               // startDate 得到的是当月 1 号的星期几</span><br><span class=\"line\">               var startDate = date.getDay();</span><br><span class=\"line\">               // allDates 得到的是当前月全部的日期</span><br><span class=\"line\">               var allDates =  new Date(that.data.year, that.$(&apos;#month&apos;).value, 0).getDate();</span><br><span class=\"line\">               var tds = document.getElementsByTagName(&apos;td&apos;);</span><br><span class=\"line\">               that.initColor();</span><br><span class=\"line\">               var j = 0;</span><br><span class=\"line\">               startDate = (startDate ? startDate : 7);</span><br><span class=\"line\">               // startDate 表示这一个月份的一号是星期几，当是星期天的时候，要从下一行开始</span><br><span class=\"line\">               // 下面的程序用来向表格内填入天的号数</span><br><span class=\"line\">               for (let i = 0 ; i &lt; 42; i++) &#123;</span><br><span class=\"line\">               \t// 判断开始时间，即判断表格中位于 1 号之前的表格</span><br><span class=\"line\">                   if (i &gt;= startDate) &#123;</span><br><span class=\"line\">                       j &gt;= allDates ? j = 1 : j++;</span><br><span class=\"line\">                       tds[i].innerHTML = j;</span><br><span class=\"line\">                       // 定义位于中间的表格可以点击区域</span><br><span class=\"line\">                       if(i &lt; allDates + startDate ) &#123;</span><br><span class=\"line\">                           tds[i].onclick = function () &#123;                                         </span><br><span class=\"line\">                               // 将当前的年 月 表格输存入数组                                </span><br><span class=\"line\">                               that.initColor(that.data.year, that.data.month, i);</span><br><span class=\"line\">                               that.initColor();</span><br><span class=\"line\">                               // 清空input 框内的数据</span><br><span class=\"line\">                               that.$(&apos;#&apos; + that.inputIdName).value = &apos;&apos;;</span><br><span class=\"line\">                               that.data.selectDays.map(function (item, index, array) &#123;                                    </span><br><span class=\"line\">                                   that.$(&apos;#&apos; + that.inputIdName).value = item.year + &apos;-&apos; + item.month + &apos;-&apos; + that.tds[item.day].innerHTML;</span><br><span class=\"line\">                                   if (!that.isSingle) &#123;</span><br><span class=\"line\">                                       var min;</span><br><span class=\"line\">                                       that.data.selectDays.map(function (item, index, array) &#123;</span><br><span class=\"line\">                                               if (item.day &lt; that.data.selectDays[0].day) &#123;</span><br><span class=\"line\">                                                   min = item;</span><br><span class=\"line\">                                               &#125; else &#123;</span><br><span class=\"line\">                                                   min = that.data.selectDays[0];</span><br><span class=\"line\">                                               &#125;</span><br><span class=\"line\">                                           &#125;</span><br><span class=\"line\">                                       );</span><br><span class=\"line\">                                   &#125;</span><br><span class=\"line\">                               &#125;);</span><br><span class=\"line\">                               // 点击事件完成之后调用回调函数</span><br><span class=\"line\">                               that.callBack();</span><br><span class=\"line\">                           &#125;;</span><br><span class=\"line\">                       &#125; else &#123;</span><br><span class=\"line\">                       // 使用 onclick = null 回收点击事件</span><br><span class=\"line\">                           tds[i].onclick = null;</span><br><span class=\"line\">                           tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       tds[i].className = &apos;notClick&apos;;</span><br><span class=\"line\">                       document.getElementsByTagName(&apos;td&apos;)[i].onclick = null; // 回收 click 事件</span><br><span class=\"line\">                       tds[i].innerHTML = new Date(that.data.year, that.$(&apos;#month&apos;).value - 1, 0).getDate() + 1 -startDate + i ;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;,</span><br></pre></td></tr></table></figure>\n<p>在上段代码中使用的日期对象的一些方法；</p>\n<p><code>initColor</code> ：用来重置表格的颜色</p>\n<p><code>dateAct</code> 用来定义日历的一些行为</p>\n<h4 id=\"代码总结\"><a href=\"#代码总结\" class=\"headerlink\" title=\"代码总结:\"></a>代码总结:</h4><p>1.使用面向对象的写法进行编写的，而非之前的面向过程编写</p>\n<p>2.熟悉 js 中关于使用日期事件的一些方法</p>\n<h4 id=\"在代码中的一些问题\"><a href=\"#在代码中的一些问题\" class=\"headerlink\" title=\"在代码中的一些问题:\"></a>在代码中的一些问题:</h4><p>1.代码逻辑混乱，这一部分需要加强</p>\n<p>2.代码中需要规范，包括注释，变量的定义</p>\n<p>3.使用面向对象的写法的时候，需要知道使用 使用 <code>property</code> 构建函数的时候发生了什么，以及代码中 <code>this</code> 的指向值</p>\n<h4 id=\"little-Tips\"><a href=\"#little-Tips\" class=\"headerlink\" title=\"little  Tips\"></a>little  Tips</h4><ol>\n<li><p><code>addEventListener</code>  <code>attachEvent</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&apos;btn&apos;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow.onload = function () &#123;</span><br><span class=\"line\">      var button = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\">      Good.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class=\"line\">\t\t\tconsole.log(this); // this 指向的是 id 为 good 的 dom 元素</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>addEventistener</code> 用于监听事件</p>\n<p><code>target.addEventListenter(event, fn , [userCapture])</code></p>\n<p><code>event</code> : 表示要进行监听的事件 [string]</p>\n<p><code>fn</code> :表示 监听到事件之后的回调函数</p>\n<p><code>userCapture</code> : 表示事件是应用到冒泡阶段还是应用到捕获阶段  [boolean]</p>\n</blockquote>\n<p><strong>在 <code>addEventListener</code>中定义的 <code>this</code> 值指向的是 tartget 对象</strong></p>\n<p>在 IE 下 使用 <code>attachEvent</code> 来实现类似 <code>addEventListener</code> 的行为:</p>\n<p>实现兼容性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function listenEvent(dom,event,fn) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if (dom.attachEvent) &#123;</span><br><span class=\"line\">                dom.attachEvent(&apos;on&apos; + event, fn);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                dom.addEventListener(event, fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.使用 <code>Date</code>对象对于得到月份的天数以及当前月第一天的星期几的求法是不同的</p>\n"},{"title":"正则表达式（二）：基础方法","date":"2019-01-20T06:33:08.000Z","_content":"\n下面是一些正则表达式的一些常用方法：\n\n# 正则表达式中的属性和方法\n\n创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。\n\n我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：\n\n例如：\n\n```\nlet pattern = /.at/g;\nlet str = 'bat, cat';\nlet matches = pattern.exec(str);\nconsole.log('lastIndex', pattern.lastIndex); // 3\n```\n\n###  一些属性\n\n| 属性            | 含义                                                         | 示例                                                         |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `lastIndex`     | 下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 `g` 的时候， 这个值始终是 0 | 上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 `,` 位置为 3 |\n| `flags`(es6)    | 获取当前正则的修饰符                                         | g                                                            |\n| `global`        | 布尔值， 表示是否设置了 g 标志                               | `pattern.global`: true                                       |\n| `ignoreCase`    | 布尔值， 表示是否设置了 i 标志                               |                                                              |\n| `multiline`     | 表示是否设置了 m                                             |                                                              |\n| `sticky`        | 表示是否这种了 y 标志                                        |                                                              |\n| `dotall` es2018 | 表示是否含有 s 修饰符                                        |                                                              |\n| `source`        | 表示当前的匹配字符串                                         | \".at\"                                                        |\n\nTips:\n\n-   使用 `lastIndex` 是可以改变的， 使用 `lastIndex` 可以决定需要进行开始匹配的位置\n\n  ```js\n  let pattern = new RegExp('.at', 'g');\n  let str = \"cat, bat\";\n  \n  pattern.lastIndex = 4;\n  let matches = pattern.exec(str);\n  // matches\n  // [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]\n  ```\n\n\n### 一些方法\n\n#### RegExp.prototype.test\n\n使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：\n\n示例：\n\n```javascript\nlet pattern = /test/g;\nlet str = 'test string';\npattern.test(str); // true\n```\n\n```javascript\nlet pattern = /[cb]at/g;\nlet str = \"cat, bat\";\npattern.test(str); // true\n```\n\n#### `RegExp.prototype.exec`\n\n 使用  `exec` 方法用于获取到匹配到的数组：\n\n```\nlet pattern = /.at/;\nlet str = \"cat, bat\";\n\nlet matches = pattern.exec(str);\n// [ 'cat', index: 0, input: 'cat, bat', groups: undefined ]\n// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 \n// 'cat, bat'\n```\n\n如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 `null`;\n\n使用 `exec` 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 `cat`  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 `index`, `input` 以及 `groups` ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：\n\n- `index`: index 表明匹配数组中第一个值在字符串中的位置。\n- `input`：input 表明当前匹配的字符串\n-  `groups`: groups 是 es2018 中提出的一个新的方法  \n\n> 注意： 当正则表达式中包含有全局匹配 `g` 的时候，每次调用 `exec` 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  `exec` 只会调用第一次匹配到的信息。\n\n```js\nlet pattern = new RegExp('.at', 'g');\nlet str = \"cat, bat, dat\";\nlet matches = pattern.exec(str);\n\nwhile(matches) {\n  console.log(pattern.lastIndex, matches[0]);\n  matches = pattern.exec(str);\n}\n// 3 'cat'\n// 8 'bat'\n// 13 'dat'\n```\n\n### 应用正则表达式的一些方法：\n\n#### `String.prototype.match`\n\n`str.match(regexp)`\n\n接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。\n\n> 注意， 在使用 `match` 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：\n>\n> 例如下面这个例子：\n>\n> ```as1\n> var regex = /(\\d{4})-(\\d{2})-(\\d{2})/g;\n> var string = \"2017-06-12\";\n> console.log( string.match(regex) );\n> // [\"2017-06-12\"] 没有获得到捕获组 括号内的匹配项\n> // 当正则表达式中不含有 g 标识符的时候\n> regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n> // [\"2017-06-12\", \"2017\", \"06\", \"12\"]`String.prototype.search`\n> // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t\n> ```\n\n\n\n#### `String.prototype.search`\n\n`str.search(regexp)`\n\n接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1\n\n```\nlet str = 'hello world';\nstr.search(/world/); // 6\n```\n\n使用 `indexOf` 方法也可以用来查找到字符串中的某一个字符， 相比 `indexOf` 方法， 个人认为 `search `\n\n 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：\n\n```js\nlet str = \"search Word\";\nstr.search(/word/i); // 6\n```\n\n**注意：**\n\n**当我们使用 `search` 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式**\n\n如下：\n\n ```js\nlet str = \"2019.02.05\";\nstr.search('.'); // 0\n// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0\n ```\n\n\n\n#### `String.prototype.replace`\n\n`str.replace(regexp, replaceStr)`\n\n使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。\n\n注意： 使用 `replace` 方法的时候 `replaceStr` 中使用 `$1`, `$2` 以及 `$3` 可以表示 `RegExp.$1`, `RegExp.$2`\n\n`RegExp.$3`  \n\n如下， 转换日期的格式问题：\n\n```\nlet str = '2018-02-02';\nlet regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nstr.replace(regex, '$3/$2/$1'); // 02/02/2018\n```\n\n如下， 隐藏手机号码中间四位的数字：\n\n```\nlet str = '15656568620';\nlet regex = /(\\d{3})(\\d{4})(\\d{4})/;\nstr.replace(regex, '$1****$3');\n// 156****8620\n```\n\n使用 `replace` 可以实现更为强大的功能， 因为第二个参数的 `replaceStr` 可以有多个具有特殊含义的字符：\n\n| 属性                | 描述符                                      |\n| ------------------- | ------------------------------------------- |\n| `$1` `$2` ... `$99` | 匹配地 `$1` , `$2` ... `$99` 分组捕获的文本 |\n| `$&`                | 匹配到的子串文本                            |\n| $`                  | 匹配到的子串的左边文本                      |\n| $'                  | 匹配到的子串的                              |\n| $$                  | 表示美元符号                                |\n| 其他符号            | 符号本身                                    |\n\n如下， 我们想要将一段金钱文字都添加上一个 `$` 符号：\n\n```js\nlet str = '100, 200, 300';\nlet regex = /(\\d+)/;\nstr.replace(regex, '$$ $&');\n// $100, $200, $300\n```\n\n>使用 `replace` 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 `replace` 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。\n\n\n\n### 其他\n\n1. 使用 `$1` `$2` .. 可以获取到被匹配到的捕获组中的数据， `$1` 获取到第一个捕获组数据， `$2` 获取到第二个捕获组数据， 依次类推\n\n   例如：\n\n   ```js\n   str = '2018-02-02';\n   regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n   regex.test(str);\n   RegExp.$1 // 2018\n   RegExp.$2 // 02\n   RegExp.$3 // 02\n   ```\n\n2. 可以在正则中使用 `\\1` 或者 `\\2` 之类的表示引用分组 `$1`  `$2` ....， 例如： \n\n   我们想要匹配如下的日期格式：\n\n   2019-02-05\n\n   2019.02.05\n\n   2019/02/05\n\n   我们注意到， 对于   `-` 或 `.` 或 `/` 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：\n\n   ```\n   let regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\n   let str = '2019-02-05';\n   regex.test(str); // true\n   ```\n\n   但是上面的正则也可以匹配到 2019-02.05 这样的格式；\n\n   当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：\n\n   ```\n   let regex = /\\d{4}(-|/\\|\\.)\\d{2}\\1\\d{2}/;\n   ```\n\n   如下： 匹配 html 中的匹配标签：\n\n   ```js\n   let html = \"<p>我是一段文字</p>\";\n   let regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\n   regex.test(html); // true\n   // 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符\n   // 匹配含有 class 的元素属性\n   html = \"<p class=\"content\">我是一段文字</p>\";\n   regex = /<([^>]+).*>[\\d\\D]*<\\/\\1>/;\n   regex.test(html) // true\n   ```\n","source":"_posts/正则表达式（二）：基础方法.md","raw":"---\ntitle: 正则表达式（二）：基础方法\ndate: 2019-01-20 14:33:08\ntags: 正则表达式\ncategories: js\n---\n\n下面是一些正则表达式的一些常用方法：\n\n# 正则表达式中的属性和方法\n\n创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。\n\n我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：\n\n例如：\n\n```\nlet pattern = /.at/g;\nlet str = 'bat, cat';\nlet matches = pattern.exec(str);\nconsole.log('lastIndex', pattern.lastIndex); // 3\n```\n\n###  一些属性\n\n| 属性            | 含义                                                         | 示例                                                         |\n| --------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `lastIndex`     | 下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 `g` 的时候， 这个值始终是 0 | 上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 `,` 位置为 3 |\n| `flags`(es6)    | 获取当前正则的修饰符                                         | g                                                            |\n| `global`        | 布尔值， 表示是否设置了 g 标志                               | `pattern.global`: true                                       |\n| `ignoreCase`    | 布尔值， 表示是否设置了 i 标志                               |                                                              |\n| `multiline`     | 表示是否设置了 m                                             |                                                              |\n| `sticky`        | 表示是否这种了 y 标志                                        |                                                              |\n| `dotall` es2018 | 表示是否含有 s 修饰符                                        |                                                              |\n| `source`        | 表示当前的匹配字符串                                         | \".at\"                                                        |\n\nTips:\n\n-   使用 `lastIndex` 是可以改变的， 使用 `lastIndex` 可以决定需要进行开始匹配的位置\n\n  ```js\n  let pattern = new RegExp('.at', 'g');\n  let str = \"cat, bat\";\n  \n  pattern.lastIndex = 4;\n  let matches = pattern.exec(str);\n  // matches\n  // [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]\n  ```\n\n\n### 一些方法\n\n#### RegExp.prototype.test\n\n使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：\n\n示例：\n\n```javascript\nlet pattern = /test/g;\nlet str = 'test string';\npattern.test(str); // true\n```\n\n```javascript\nlet pattern = /[cb]at/g;\nlet str = \"cat, bat\";\npattern.test(str); // true\n```\n\n#### `RegExp.prototype.exec`\n\n 使用  `exec` 方法用于获取到匹配到的数组：\n\n```\nlet pattern = /.at/;\nlet str = \"cat, bat\";\n\nlet matches = pattern.exec(str);\n// [ 'cat', index: 0, input: 'cat, bat', groups: undefined ]\n// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 \n// 'cat, bat'\n```\n\n如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 `null`;\n\n使用 `exec` 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 `cat`  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 `index`, `input` 以及 `groups` ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：\n\n- `index`: index 表明匹配数组中第一个值在字符串中的位置。\n- `input`：input 表明当前匹配的字符串\n-  `groups`: groups 是 es2018 中提出的一个新的方法  \n\n> 注意： 当正则表达式中包含有全局匹配 `g` 的时候，每次调用 `exec` 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  `exec` 只会调用第一次匹配到的信息。\n\n```js\nlet pattern = new RegExp('.at', 'g');\nlet str = \"cat, bat, dat\";\nlet matches = pattern.exec(str);\n\nwhile(matches) {\n  console.log(pattern.lastIndex, matches[0]);\n  matches = pattern.exec(str);\n}\n// 3 'cat'\n// 8 'bat'\n// 13 'dat'\n```\n\n### 应用正则表达式的一些方法：\n\n#### `String.prototype.match`\n\n`str.match(regexp)`\n\n接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。\n\n> 注意， 在使用 `match` 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：\n>\n> 例如下面这个例子：\n>\n> ```as1\n> var regex = /(\\d{4})-(\\d{2})-(\\d{2})/g;\n> var string = \"2017-06-12\";\n> console.log( string.match(regex) );\n> // [\"2017-06-12\"] 没有获得到捕获组 括号内的匹配项\n> // 当正则表达式中不含有 g 标识符的时候\n> regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n> // [\"2017-06-12\", \"2017\", \"06\", \"12\"]`String.prototype.search`\n> // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t\n> ```\n\n\n\n#### `String.prototype.search`\n\n`str.search(regexp)`\n\n接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1\n\n```\nlet str = 'hello world';\nstr.search(/world/); // 6\n```\n\n使用 `indexOf` 方法也可以用来查找到字符串中的某一个字符， 相比 `indexOf` 方法， 个人认为 `search `\n\n 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：\n\n```js\nlet str = \"search Word\";\nstr.search(/word/i); // 6\n```\n\n**注意：**\n\n**当我们使用 `search` 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式**\n\n如下：\n\n ```js\nlet str = \"2019.02.05\";\nstr.search('.'); // 0\n// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0\n ```\n\n\n\n#### `String.prototype.replace`\n\n`str.replace(regexp, replaceStr)`\n\n使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。\n\n注意： 使用 `replace` 方法的时候 `replaceStr` 中使用 `$1`, `$2` 以及 `$3` 可以表示 `RegExp.$1`, `RegExp.$2`\n\n`RegExp.$3`  \n\n如下， 转换日期的格式问题：\n\n```\nlet str = '2018-02-02';\nlet regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nstr.replace(regex, '$3/$2/$1'); // 02/02/2018\n```\n\n如下， 隐藏手机号码中间四位的数字：\n\n```\nlet str = '15656568620';\nlet regex = /(\\d{3})(\\d{4})(\\d{4})/;\nstr.replace(regex, '$1****$3');\n// 156****8620\n```\n\n使用 `replace` 可以实现更为强大的功能， 因为第二个参数的 `replaceStr` 可以有多个具有特殊含义的字符：\n\n| 属性                | 描述符                                      |\n| ------------------- | ------------------------------------------- |\n| `$1` `$2` ... `$99` | 匹配地 `$1` , `$2` ... `$99` 分组捕获的文本 |\n| `$&`                | 匹配到的子串文本                            |\n| $`                  | 匹配到的子串的左边文本                      |\n| $'                  | 匹配到的子串的                              |\n| $$                  | 表示美元符号                                |\n| 其他符号            | 符号本身                                    |\n\n如下， 我们想要将一段金钱文字都添加上一个 `$` 符号：\n\n```js\nlet str = '100, 200, 300';\nlet regex = /(\\d+)/;\nstr.replace(regex, '$$ $&');\n// $100, $200, $300\n```\n\n>使用 `replace` 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 `replace` 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。\n\n\n\n### 其他\n\n1. 使用 `$1` `$2` .. 可以获取到被匹配到的捕获组中的数据， `$1` 获取到第一个捕获组数据， `$2` 获取到第二个捕获组数据， 依次类推\n\n   例如：\n\n   ```js\n   str = '2018-02-02';\n   regex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n   regex.test(str);\n   RegExp.$1 // 2018\n   RegExp.$2 // 02\n   RegExp.$3 // 02\n   ```\n\n2. 可以在正则中使用 `\\1` 或者 `\\2` 之类的表示引用分组 `$1`  `$2` ....， 例如： \n\n   我们想要匹配如下的日期格式：\n\n   2019-02-05\n\n   2019.02.05\n\n   2019/02/05\n\n   我们注意到， 对于   `-` 或 `.` 或 `/` 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：\n\n   ```\n   let regex = /\\d{4}(-|\\/|\\.)\\d{2}(-|\\/|\\.)\\d{2}/;\n   let str = '2019-02-05';\n   regex.test(str); // true\n   ```\n\n   但是上面的正则也可以匹配到 2019-02.05 这样的格式；\n\n   当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：\n\n   ```\n   let regex = /\\d{4}(-|/\\|\\.)\\d{2}\\1\\d{2}/;\n   ```\n\n   如下： 匹配 html 中的匹配标签：\n\n   ```js\n   let html = \"<p>我是一段文字</p>\";\n   let regex = /<([^>]+)>[\\d\\D]*<\\/\\1>/;\n   regex.test(html); // true\n   // 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符\n   // 匹配含有 class 的元素属性\n   html = \"<p class=\"content\">我是一段文字</p>\";\n   regex = /<([^>]+).*>[\\d\\D]*<\\/\\1>/;\n   regex.test(html) // true\n   ```\n","slug":"正则表达式（二）：基础方法","published":1,"updated":"2019-04-02T15:35:30.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohao004fs33g0r20h23r","content":"<p>下面是一些正则表达式的一些常用方法：</p>\n<h1 id=\"正则表达式中的属性和方法\"><a href=\"#正则表达式中的属性和方法\" class=\"headerlink\" title=\"正则表达式中的属性和方法\"></a>正则表达式中的属性和方法</h1><p>创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。</p>\n<p>我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/g;</span><br><span class=\"line\">let str = &apos;bat, cat&apos;;</span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">console.log(&apos;lastIndex&apos;, pattern.lastIndex); // 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lastIndex</code></td>\n<td>下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 <code>g</code> 的时候， 这个值始终是 0</td>\n<td>上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 <code>,</code> 位置为 3</td>\n</tr>\n<tr>\n<td><code>flags</code>(es6)</td>\n<td>获取当前正则的修饰符</td>\n<td>g</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td>布尔值， 表示是否设置了 g 标志</td>\n<td><code>pattern.global</code>: true</td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>布尔值， 表示是否设置了 i 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>表示是否设置了 m</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>表示是否这种了 y 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>dotall</code> es2018</td>\n<td>表示是否含有 s 修饰符</td>\n<td></td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>表示当前的匹配字符串</td>\n<td>“.at”</td>\n</tr>\n</tbody>\n</table>\n<p>Tips:</p>\n<ul>\n<li><p>使用 <code>lastIndex</code> 是可以改变的， 使用 <code>lastIndex</code> 可以决定需要进行开始匹配的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern.lastIndex = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"><span class=\"comment\">// matches</span></span><br><span class=\"line\"><span class=\"comment\">// [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h3><h4 id=\"RegExp-prototype-test\"><a href=\"#RegExp-prototype-test\" class=\"headerlink\" title=\"RegExp.prototype.test\"></a>RegExp.prototype.test</h4><p>使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'test string'</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/[cb]at/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp-prototype-exec\"><a href=\"#RegExp-prototype-exec\" class=\"headerlink\" title=\"RegExp.prototype.exec\"></a><code>RegExp.prototype.exec</code></h4><p> 使用  <code>exec</code> 方法用于获取到匹配到的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/;</span><br><span class=\"line\">let str = &quot;cat, bat&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">// [ &apos;cat&apos;, index: 0, input: &apos;cat, bat&apos;, groups: undefined ]</span><br><span class=\"line\">// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 </span><br><span class=\"line\">// &apos;cat, bat&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 <code>null</code>;</p>\n<p>使用 <code>exec</code> 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 <code>cat</code>  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 <code>index</code>, <code>input</code> 以及 <code>groups</code> ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：</p>\n<ul>\n<li><code>index</code>: index 表明匹配数组中第一个值在字符串中的位置。</li>\n<li><code>input</code>：input 表明当前匹配的字符串</li>\n<li><code>groups</code>: groups 是 es2018 中提出的一个新的方法  </li>\n</ul>\n<blockquote>\n<p>注意： 当正则表达式中包含有全局匹配 <code>g</code> 的时候，每次调用 <code>exec</code> 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  <code>exec</code> 只会调用第一次匹配到的信息。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat, dat\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(matches) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(pattern.lastIndex, matches[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  matches = pattern.exec(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3 'cat'</span></span><br><span class=\"line\"><span class=\"comment\">// 8 'bat'</span></span><br><span class=\"line\"><span class=\"comment\">// 13 'dat'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用正则表达式的一些方法：\"><a href=\"#应用正则表达式的一些方法：\" class=\"headerlink\" title=\"应用正则表达式的一些方法：\"></a>应用正则表达式的一些方法：</h3><h4 id=\"String-prototype-match\"><a href=\"#String-prototype-match\" class=\"headerlink\" title=\"String.prototype.match\"></a><code>String.prototype.match</code></h4><p><code>str.match(regexp)</code></p>\n<p>接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。</p>\n<blockquote>\n<p>注意， 在使用 <code>match</code> 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;</span><br><span class=\"line\">&gt; var string = &quot;2017-06-12&quot;;</span><br><span class=\"line\">&gt; console.log( string.match(regex) );</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;] 没有获得到捕获组 括号内的匹配项</span><br><span class=\"line\">&gt; // 当正则表达式中不含有 g 标识符的时候</span><br><span class=\"line\">&gt; regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;]`String.prototype.search`</span><br><span class=\"line\">&gt; // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"String-prototype-search\"><a href=\"#String-prototype-search\" class=\"headerlink\" title=\"String.prototype.search\"></a><code>String.prototype.search</code></h4><p><code>str.search(regexp)</code></p>\n<p>接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello world&apos;;</span><br><span class=\"line\">str.search(/world/); // 6</span><br></pre></td></tr></table></figure>\n<p>使用 <code>indexOf</code> 方法也可以用来查找到字符串中的某一个字符， 相比 <code>indexOf</code> 方法， 个人认为 <code>search</code></p>\n<p> 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"search Word\"</span>;</span><br><span class=\"line\">str.search(<span class=\"regexp\">/word/i</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p><strong>当我们使用 <code>search</code> 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式</strong></p>\n<p>如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"2019.02.05\"</span>;</span><br><span class=\"line\">str.search(<span class=\"string\">'.'</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"String-prototype-replace\"><a href=\"#String-prototype-replace\" class=\"headerlink\" title=\"String.prototype.replace\"></a><code>String.prototype.replace</code></h4><p><code>str.replace(regexp, replaceStr)</code></p>\n<p>使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。</p>\n<p>注意： 使用 <code>replace</code> 方法的时候 <code>replaceStr</code> 中使用 <code>$1</code>, <code>$2</code> 以及 <code>$3</code> 可以表示 <code>RegExp.$1</code>, <code>RegExp.$2</code></p>\n<p><code>RegExp.$3</code>  </p>\n<p>如下， 转换日期的格式问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;2018-02-02&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$3/$2/$1&apos;); // 02/02/2018</span><br></pre></td></tr></table></figure>\n<p>如下， 隐藏手机号码中间四位的数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;15656568620&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$1****$3&apos;);</span><br><span class=\"line\">// 156****8620</span><br></pre></td></tr></table></figure>\n<p>使用 <code>replace</code> 可以实现更为强大的功能， 因为第二个参数的 <code>replaceStr</code> 可以有多个具有特殊含义的字符：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$1</code> <code>$2</code> … <code>$99</code></td>\n<td>匹配地 <code>$1</code> , <code>$2</code> … <code>$99</code> 分组捕获的文本</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>匹配到的子串文本</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>匹配到的子串的左边文本</td>\n</tr>\n<tr>\n<td>$’</td>\n<td>匹配到的子串的</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>表示美元符号</td>\n</tr>\n<tr>\n<td>其他符号</td>\n<td>符号本身</td>\n</tr>\n</tbody>\n</table>\n<p>如下， 我们想要将一段金钱文字都添加上一个 <code>$</code> 符号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'100, 200, 300'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(\\d+)/</span>;</span><br><span class=\"line\">str.replace(regex, <span class=\"string\">'$$ $&amp;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// $100, $200, $300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>replace</code> 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 <code>replace</code> 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。</p>\n</blockquote>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p>使用 <code>$1</code> <code>$2</code> .. 可以获取到被匹配到的捕获组中的数据， <code>$1</code> 获取到第一个捕获组数据， <code>$2</code> 获取到第二个捕获组数据， 依次类推</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'2018-02-02'</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\">regex.test(str);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span> <span class=\"comment\">// 2018</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span> <span class=\"comment\">// 02</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span> <span class=\"comment\">// 02</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以在正则中使用 <code>\\1</code> 或者 <code>\\2</code> 之类的表示引用分组 <code>$1</code>  <code>$2</code> ….， 例如： </p>\n<p>我们想要匹配如下的日期格式：</p>\n<p>2019-02-05</p>\n<p>2019.02.05</p>\n<p>2019/02/05</p>\n<p>我们注意到， 对于   <code>-</code> 或 <code>.</code> 或 <code>/</code> 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;(-|\\/|\\.)\\d&#123;2&#125;/;</span><br><span class=\"line\">let str = &apos;2019-02-05&apos;;</span><br><span class=\"line\">regex.test(str); // true</span><br></pre></td></tr></table></figure>\n<p>但是上面的正则也可以匹配到 2019-02.05 这样的格式；</p>\n<p>当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|/\\|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/;</span><br></pre></td></tr></table></figure>\n<p>如下： 匹配 html 中的匹配标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> html = <span class=\"string\">\"&lt;p&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/&lt;([^&gt;]+)&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配含有 class 的元素属性</span></span><br><span class=\"line\">html = <span class=\"string\">\"&lt;p class=\"</span>content<span class=\"string\">\"&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/&lt;([^&gt;]+).*&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>下面是一些正则表达式的一些常用方法：</p>\n<h1 id=\"正则表达式中的属性和方法\"><a href=\"#正则表达式中的属性和方法\" class=\"headerlink\" title=\"正则表达式中的属性和方法\"></a>正则表达式中的属性和方法</h1><p>创建了正则表达式之后， 返回的是一个正则表达式的实例，返回的实例中包含有正则的一些属性方法。</p>\n<p>我们可以在 控制台中打印正则实例， 可以看到其继承的所有的属性和方法如下：</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/g;</span><br><span class=\"line\">let str = &apos;bat, cat&apos;;</span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">console.log(&apos;lastIndex&apos;, pattern.lastIndex); // 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lastIndex</code></td>\n<td>下一次匹配在字符串中的起始位置,  当前匹配到字符串的下一个字符的位置 ， 注意， 当前缺少修饰符 <code>g</code> 的时候， 这个值始终是 0</td>\n<td>上面的例子中， 匹配完了  bat 之后， 后面将要进行匹配的是 <code>,</code> 位置为 3</td>\n</tr>\n<tr>\n<td><code>flags</code>(es6)</td>\n<td>获取当前正则的修饰符</td>\n<td>g</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td>布尔值， 表示是否设置了 g 标志</td>\n<td><code>pattern.global</code>: true</td>\n</tr>\n<tr>\n<td><code>ignoreCase</code></td>\n<td>布尔值， 表示是否设置了 i 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>multiline</code></td>\n<td>表示是否设置了 m</td>\n<td></td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>表示是否这种了 y 标志</td>\n<td></td>\n</tr>\n<tr>\n<td><code>dotall</code> es2018</td>\n<td>表示是否含有 s 修饰符</td>\n<td></td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>表示当前的匹配字符串</td>\n<td>“.at”</td>\n</tr>\n</tbody>\n</table>\n<p>Tips:</p>\n<ul>\n<li><p>使用 <code>lastIndex</code> 是可以改变的， 使用 <code>lastIndex</code> 可以决定需要进行开始匹配的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern.lastIndex = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"><span class=\"comment\">// matches</span></span><br><span class=\"line\"><span class=\"comment\">// [ 'bat', index: 5, input: 'cat, bat', groups: undefined ]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"一些方法\"><a href=\"#一些方法\" class=\"headerlink\" title=\"一些方法\"></a>一些方法</h3><h4 id=\"RegExp-prototype-test\"><a href=\"#RegExp-prototype-test\" class=\"headerlink\" title=\"RegExp.prototype.test\"></a>RegExp.prototype.test</h4><p>使用 test 方法用于判断在一个字符串中是含有能够匹配的到字符：</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/test/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'test string'</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/[cb]at/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat\"</span>;</span><br><span class=\"line\">pattern.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RegExp-prototype-exec\"><a href=\"#RegExp-prototype-exec\" class=\"headerlink\" title=\"RegExp.prototype.exec\"></a><code>RegExp.prototype.exec</code></h4><p> 使用  <code>exec</code> 方法用于获取到匹配到的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /.at/;</span><br><span class=\"line\">let str = &quot;cat, bat&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let matches = pattern.exec(str);</span><br><span class=\"line\">// [ &apos;cat&apos;, index: 0, input: &apos;cat, bat&apos;, groups: undefined ]</span><br><span class=\"line\">// 当前匹配到 字符串是 cat， 匹配的字符串在原字符串中的开始位置为 0， input： 当前被匹配的字符串为 </span><br><span class=\"line\">// &apos;cat, bat&apos;</span><br></pre></td></tr></table></figure>\n<p>如果有匹配到值的话， 返回一个数组， 如果没有匹配到值， 返回 <code>null</code>;</p>\n<p>使用 <code>exec</code> 方法返回的是一个数组，这个数组包含被匹配到的字符串，（在存在捕获组的情况下， 获取到的被匹配的字符串不止一个） 比如上面的代码中， 匹配到了 <code>cat</code>  但是这个数组实例上面还定义了一些属性, 例如上面的数组中包含了 <code>index</code>, <code>input</code> 以及 <code>groups</code> ， 这些属性表示的是被匹配到的字符串的相关信息， 这些属性的含义如下：</p>\n<ul>\n<li><code>index</code>: index 表明匹配数组中第一个值在字符串中的位置。</li>\n<li><code>input</code>：input 表明当前匹配的字符串</li>\n<li><code>groups</code>: groups 是 es2018 中提出的一个新的方法  </li>\n</ul>\n<blockquote>\n<p>注意： 当正则表达式中包含有全局匹配 <code>g</code> 的时候，每次调用 <code>exec</code> 都会在上一次匹配的位置之后继续进行匹配,  当没有设置全局匹配 g 的时候， 多次调用  <code>exec</code> 只会调用第一次匹配到的信息。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.at'</span>, <span class=\"string\">'g'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"cat, bat, dat\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> matches = pattern.exec(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(matches) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(pattern.lastIndex, matches[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  matches = pattern.exec(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3 'cat'</span></span><br><span class=\"line\"><span class=\"comment\">// 8 'bat'</span></span><br><span class=\"line\"><span class=\"comment\">// 13 'dat'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用正则表达式的一些方法：\"><a href=\"#应用正则表达式的一些方法：\" class=\"headerlink\" title=\"应用正则表达式的一些方法：\"></a>应用正则表达式的一些方法：</h3><h4 id=\"String-prototype-match\"><a href=\"#String-prototype-match\" class=\"headerlink\" title=\"String.prototype.match\"></a><code>String.prototype.match</code></h4><p><code>str.match(regexp)</code></p>\n<p>接收一个正则表达式， 如果有匹配到的字符串， 将会返回一个数组， 数组的第一项是进行匹配的字符串， 后面几项是获取到的捕获组的结果， 如果没有匹配到的字符串， 那么将会返回 null。</p>\n<blockquote>\n<p>注意， 在使用 <code>match</code> 方法的时候加不加标识符 g 是有区别的， 当正则中不含有 g 标识符的时候， 返回的结果是标准的匹配格式： 数组的第一个元素是整体匹配的内容，其他元素是分组捕获的内容， 如果加上了 g 符号， 那么返回的是包含有所有匹配的字符串内容：</p>\n<p>例如下面这个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/g;</span><br><span class=\"line\">&gt; var string = &quot;2017-06-12&quot;;</span><br><span class=\"line\">&gt; console.log( string.match(regex) );</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;] 没有获得到捕获组 括号内的匹配项</span><br><span class=\"line\">&gt; // 当正则表达式中不含有 g 标识符的时候</span><br><span class=\"line\">&gt; regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">&gt; // [&quot;2017-06-12&quot;, &quot;2017&quot;, &quot;06&quot;, &quot;12&quot;]`String.prototype.search`</span><br><span class=\"line\">&gt; // 返回内容为整体匹配以及分组匹配的内容. \tl;`\t</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"String-prototype-search\"><a href=\"#String-prototype-search\" class=\"headerlink\" title=\"String.prototype.search\"></a><code>String.prototype.search</code></h4><p><code>str.search(regexp)</code></p>\n<p>接收一个正则表达式， 返回在字符串中第一次被匹配到的位置， 如果没有匹配到， 返回 -1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello world&apos;;</span><br><span class=\"line\">str.search(/world/); // 6</span><br></pre></td></tr></table></figure>\n<p>使用 <code>indexOf</code> 方法也可以用来查找到字符串中的某一个字符， 相比 <code>indexOf</code> 方法， 个人认为 <code>search</code></p>\n<p> 方法的优点在于可以借助于正则表达式中的一些功能， 比如， 我们可以不区分大小写的进行查找字符串中的某一个单词：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"search Word\"</span>;</span><br><span class=\"line\">str.search(<span class=\"regexp\">/word/i</span>); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p><strong>当我们使用 <code>search</code> 方法的时候， 当向 search中传入字符串的参数的时候， 字符串参数会被转换为正则表达式</strong></p>\n<p>如下：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"2019.02.05\"</span>;</span><br><span class=\"line\">str.search(<span class=\"string\">'.'</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 因为上面的方法中转换为了 str.search(/./); 相当于匹配任意的字符， 从而匹配到第一个字符， 匹配到的位置为 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"String-prototype-replace\"><a href=\"#String-prototype-replace\" class=\"headerlink\" title=\"String.prototype.replace\"></a><code>String.prototype.replace</code></h4><p><code>str.replace(regexp, replaceStr)</code></p>\n<p>使用 replace 方法可以实现对于匹配到的字符串进行替换, 匹配过程中不会改变原来的进行匹配的字符串，返回值为进行匹配完成的字符串。</p>\n<p>注意： 使用 <code>replace</code> 方法的时候 <code>replaceStr</code> 中使用 <code>$1</code>, <code>$2</code> 以及 <code>$3</code> 可以表示 <code>RegExp.$1</code>, <code>RegExp.$2</code></p>\n<p><code>RegExp.$3</code>  </p>\n<p>如下， 转换日期的格式问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;2018-02-02&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$3/$2/$1&apos;); // 02/02/2018</span><br></pre></td></tr></table></figure>\n<p>如下， 隐藏手机号码中间四位的数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;15656568620&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;3&#125;)(\\d&#123;4&#125;)(\\d&#123;4&#125;)/;</span><br><span class=\"line\">str.replace(regex, &apos;$1****$3&apos;);</span><br><span class=\"line\">// 156****8620</span><br></pre></td></tr></table></figure>\n<p>使用 <code>replace</code> 可以实现更为强大的功能， 因为第二个参数的 <code>replaceStr</code> 可以有多个具有特殊含义的字符：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$1</code> <code>$2</code> … <code>$99</code></td>\n<td>匹配地 <code>$1</code> , <code>$2</code> … <code>$99</code> 分组捕获的文本</td>\n</tr>\n<tr>\n<td><code>$&amp;</code></td>\n<td>匹配到的子串文本</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>匹配到的子串的左边文本</td>\n</tr>\n<tr>\n<td>$’</td>\n<td>匹配到的子串的</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>表示美元符号</td>\n</tr>\n<tr>\n<td>其他符号</td>\n<td>符号本身</td>\n</tr>\n</tbody>\n</table>\n<p>如下， 我们想要将一段金钱文字都添加上一个 <code>$</code> 符号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'100, 200, 300'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(\\d+)/</span>;</span><br><span class=\"line\">str.replace(regex, <span class=\"string\">'$$ $&amp;'</span>);</span><br><span class=\"line\"><span class=\"comment\">// $100, $200, $300</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>replace</code> 我们不仅仅可以实现对于一串字符串中某个字符的替换， 更强大的作用在于， 使用 <code>replace</code> 可以实现对于匹配到的字符串进行统一处理， 这样， 我们就无需手动查找字符串中的某个值，然后逐个替换了。</p>\n</blockquote>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li><p>使用 <code>$1</code> <code>$2</code> .. 可以获取到被匹配到的捕获组中的数据， <code>$1</code> 获取到第一个捕获组数据， <code>$2</code> 获取到第二个捕获组数据， 依次类推</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'2018-02-02'</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\">regex.test(str);</span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span> <span class=\"comment\">// 2018</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span> <span class=\"comment\">// 02</span></span><br><span class=\"line\"><span class=\"built_in\">RegExp</span>.$<span class=\"number\">3</span> <span class=\"comment\">// 02</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以在正则中使用 <code>\\1</code> 或者 <code>\\2</code> 之类的表示引用分组 <code>$1</code>  <code>$2</code> ….， 例如： </p>\n<p>我们想要匹配如下的日期格式：</p>\n<p>2019-02-05</p>\n<p>2019.02.05</p>\n<p>2019/02/05</p>\n<p>我们注意到， 对于   <code>-</code> 或 <code>.</code> 或 <code>/</code> 是重复使用的， 因此， 我们可以在正则表达式中引用这个分组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|\\/|\\.)\\d&#123;2&#125;(-|\\/|\\.)\\d&#123;2&#125;/;</span><br><span class=\"line\">let str = &apos;2019-02-05&apos;;</span><br><span class=\"line\">regex.test(str); // true</span><br></pre></td></tr></table></figure>\n<p>但是上面的正则也可以匹配到 2019-02.05 这样的格式；</p>\n<p>当匹配的字符串中出现重复匹配的内容， 并且匹配规则相同的时候， 我们可以使用分组引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = /\\d&#123;4&#125;(-|/\\|\\.)\\d&#123;2&#125;\\1\\d&#123;2&#125;/;</span><br></pre></td></tr></table></figure>\n<p>如下： 匹配 html 中的匹配标签：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> html = <span class=\"string\">\"&lt;p&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/&lt;([^&gt;]+)&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 注： 这里的 [\\d\\D] 表示匹配 \\d 或 \\D, 也就是匹配任意的字符</span></span><br><span class=\"line\"><span class=\"comment\">// 匹配含有 class 的元素属性</span></span><br><span class=\"line\">html = <span class=\"string\">\"&lt;p class=\"</span>content<span class=\"string\">\"&gt;我是一段文字&lt;/p&gt;\"</span>;</span><br><span class=\"line\">regex = <span class=\"regexp\">/&lt;([^&gt;]+).*&gt;[\\d\\D]*&lt;\\/\\1&gt;/</span>;</span><br><span class=\"line\">regex.test(html) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"正则表达式（一）：理论基础部分","date":"2018-12-15T06:55:14.000Z","_content":"\n在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；\n\n正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。\n\n### 创建正则表达式的两种方式：\n\n创建两种正则表达式有两种方法：\n\n1. `let reg = new RegExp(pattern[, flags])`\n2. `let reg = /pattern/flags`\n\n上面两种方法创建正则除了包含有一个表达式 `pattern` 之外， 还包括一个可选的 `flags`  字段， 这个字段包含有几种字段：\n\n- g： 全局匹配正则表达式\n- i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。\n- m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值\n\n通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： `exec`, `match` `test` 等方法。\n\n###  元字符\n\n正则表达式中的元字符是用来匹配**一个位置**或者**字符集合**中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；\n\n匹配位置的元字符：\n\n| 元字符  | 含义                           |\n| ---- | ---------------------------- |\n| `^`  | 匹配行的开始位置                     |\n| `$`  | 匹配行的结束位置                     |\n| `\\b` | 可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处 |\n\n匹配字符的元字符：\n\n| 元字符  | 含义                         |\n| ---- | -------------------------- |\n| `.`  | 匹配除换行符之外的任意字符              |\n| `\\w` | 匹配单词字符（包括字母， 数字，下划线和汉字）    |\n| `\\W` | 匹配任意的非单词字符（和 `\\w`） 相反      |\n| `\\s` | 匹配任意的空白字符， 比如空格符， 制表符或者换行符 |\n| `\\S` | 匹配任意的非空白符                  |\n| `\\d` | 用于匹配任意的数字                  |\n| `\\D` | 用于匹配任意的非数字字符               |\n\n###  字符类\n\n字符类是一个字符集合， 使用方括号 `[]` 定义， 表示匹配到方括号中的任意一个：\n\n*注意： 除了 `-` 以及 `^` (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义*\n\n例如：\n\n```haskell\n/<H[123456]>/\n```\n\n表示匹配 `H1` `H2` ... `H6`  中的任意一个标签\n\n在方括号中可以使用 `-` 用作连接符表示字符的范围：\n\n`[0-9]` 表示匹配 0 到 9  范围类的数字\n\n`[a-z]` 表示匹配 a 到 z 范围内的小写字母\n\n`[a-zA-Z]` 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母\n\n在方括号中当 `^` 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：\n\n```javascript\n/[^0-8]/.test(9); // true\n```\n\n要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：\n\n```js\n/[a\\-c]/.test('-');\n// true\n```\n\n\n\n### 限定符\n\n使用字符类方括号 `[]` 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：\n\n限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 \n\n对于限定符有下面几种情况 ：\n\n对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 `?` 表示懒惰匹配；\n\n| 字符或者表达式  | 说明                    |\n| -------- | --------------------- |\n| `{n}`    | 重复 n 次                |\n| `{n, }`  | 表示至少重复 n 次            |\n| `{n, m}` | 重复至少n 次， 至多 m 次       |\n| `*`      | 重复至少0次， 等同于 `{0, }`   |\n| `+`      | 重复至少 1 次， 等同于 `{1, }` |\n| `?`      | 重复 0 次 或者 1           |\n\n例如：\n\n```javascript\nconst reg = /a.*b/;\n\"aabab\".match(reg); // aabab\n\nconst reg = /a.{0,1}b/;\n\"aabab\".match(reg); // aab\n```\n\n使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。\n\n例如：\n\n```javascript\nconst reg1 = /a.+b/;\nconst reg2 = /a.+?b/;\nconst str = \"avbaab\";\n\n// 贪婪匹配\nstr.match(reg1);  // avbaab\n// 懒惰匹配\nstr.match(reg2); // avb\n```\n\n\n\n### 替换\n\n在正则表达式中 `|` 用于表示当字符串匹配了 `|` 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，\n\n类似于 js 中的 `||` 操作符， 当 `|` 左边的正则不匹配， 那么进行右边的正则匹配。\n\n```javascript\nlet reg1 = \\d{5} - \\d{3} | d{5}; // 同时可以匹配 12345-678 或者 12345\n```\n\n> 注意： 使用 `|` 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。\n>\n> ```js\n> let str = 'goodbye';\n> // | 两边不能有空格\n> let regex = /goodbye|good/g;\n> str.match(regex); // ['goodbye']\n> ```\n\n### 分组\n\n使用 `()` 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配\n\n例如：\n\n```javascript\n// 匹配一个 ip 地址\nlet reg = /(\\d{1,3}\\.){3}/d{1,3}/;\n```\n\n### 总结\n\n在正则中使用 `[]` 以及 `|` 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：\n\n| 描述符 | 优点                                                         | 缺点                                                         |\n| ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `[]`   | 适合单个字符之间的匹配， 需要转义的特殊字符比较少（`^`  和 `-`） | 不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用`^`） 两种逻辑 |\n| 竖直   | 可以匹配多个字符的字符串                                     | 当匹配正则中的特殊字符的时候需要进行转义                     |\n\n\n\n","source":"_posts/正则表达式（一）：理论基础部分.md","raw":"---\ntitle: 正则表达式（一）：理论基础部分\ndate: 2018-12-15 14:55:14\ntags: 正则表达式\ncategories: js\n---\n\n在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；\n\n正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。\n\n### 创建正则表达式的两种方式：\n\n创建两种正则表达式有两种方法：\n\n1. `let reg = new RegExp(pattern[, flags])`\n2. `let reg = /pattern/flags`\n\n上面两种方法创建正则除了包含有一个表达式 `pattern` 之外， 还包括一个可选的 `flags`  字段， 这个字段包含有几种字段：\n\n- g： 全局匹配正则表达式\n- i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。\n- m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值\n\n通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： `exec`, `match` `test` 等方法。\n\n###  元字符\n\n正则表达式中的元字符是用来匹配**一个位置**或者**字符集合**中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；\n\n匹配位置的元字符：\n\n| 元字符  | 含义                           |\n| ---- | ---------------------------- |\n| `^`  | 匹配行的开始位置                     |\n| `$`  | 匹配行的结束位置                     |\n| `\\b` | 可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处 |\n\n匹配字符的元字符：\n\n| 元字符  | 含义                         |\n| ---- | -------------------------- |\n| `.`  | 匹配除换行符之外的任意字符              |\n| `\\w` | 匹配单词字符（包括字母， 数字，下划线和汉字）    |\n| `\\W` | 匹配任意的非单词字符（和 `\\w`） 相反      |\n| `\\s` | 匹配任意的空白字符， 比如空格符， 制表符或者换行符 |\n| `\\S` | 匹配任意的非空白符                  |\n| `\\d` | 用于匹配任意的数字                  |\n| `\\D` | 用于匹配任意的非数字字符               |\n\n###  字符类\n\n字符类是一个字符集合， 使用方括号 `[]` 定义， 表示匹配到方括号中的任意一个：\n\n*注意： 除了 `-` 以及 `^` (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义*\n\n例如：\n\n```haskell\n/<H[123456]>/\n```\n\n表示匹配 `H1` `H2` ... `H6`  中的任意一个标签\n\n在方括号中可以使用 `-` 用作连接符表示字符的范围：\n\n`[0-9]` 表示匹配 0 到 9  范围类的数字\n\n`[a-z]` 表示匹配 a 到 z 范围内的小写字母\n\n`[a-zA-Z]` 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母\n\n在方括号中当 `^` 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：\n\n```javascript\n/[^0-8]/.test(9); // true\n```\n\n要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：\n\n```js\n/[a\\-c]/.test('-');\n// true\n```\n\n\n\n### 限定符\n\n使用字符类方括号 `[]` 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：\n\n限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 \n\n对于限定符有下面几种情况 ：\n\n对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 `?` 表示懒惰匹配；\n\n| 字符或者表达式  | 说明                    |\n| -------- | --------------------- |\n| `{n}`    | 重复 n 次                |\n| `{n, }`  | 表示至少重复 n 次            |\n| `{n, m}` | 重复至少n 次， 至多 m 次       |\n| `*`      | 重复至少0次， 等同于 `{0, }`   |\n| `+`      | 重复至少 1 次， 等同于 `{1, }` |\n| `?`      | 重复 0 次 或者 1           |\n\n例如：\n\n```javascript\nconst reg = /a.*b/;\n\"aabab\".match(reg); // aabab\n\nconst reg = /a.{0,1}b/;\n\"aabab\".match(reg); // aab\n```\n\n使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。\n\n例如：\n\n```javascript\nconst reg1 = /a.+b/;\nconst reg2 = /a.+?b/;\nconst str = \"avbaab\";\n\n// 贪婪匹配\nstr.match(reg1);  // avbaab\n// 懒惰匹配\nstr.match(reg2); // avb\n```\n\n\n\n### 替换\n\n在正则表达式中 `|` 用于表示当字符串匹配了 `|` 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，\n\n类似于 js 中的 `||` 操作符， 当 `|` 左边的正则不匹配， 那么进行右边的正则匹配。\n\n```javascript\nlet reg1 = \\d{5} - \\d{3} | d{5}; // 同时可以匹配 12345-678 或者 12345\n```\n\n> 注意： 使用 `|` 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。\n>\n> ```js\n> let str = 'goodbye';\n> // | 两边不能有空格\n> let regex = /goodbye|good/g;\n> str.match(regex); // ['goodbye']\n> ```\n\n### 分组\n\n使用 `()` 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配\n\n例如：\n\n```javascript\n// 匹配一个 ip 地址\nlet reg = /(\\d{1,3}\\.){3}/d{1,3}/;\n```\n\n### 总结\n\n在正则中使用 `[]` 以及 `|` 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：\n\n| 描述符 | 优点                                                         | 缺点                                                         |\n| ------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `[]`   | 适合单个字符之间的匹配， 需要转义的特殊字符比较少（`^`  和 `-`） | 不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用`^`） 两种逻辑 |\n| 竖直   | 可以匹配多个字符的字符串                                     | 当匹配正则中的特殊字符的时候需要进行转义                     |\n\n\n\n","slug":"正则表达式（一）：理论基础部分","published":1,"updated":"2019-04-02T16:15:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohaq004is33gqs0z1nwn","content":"<p>在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；</p>\n<p>正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。</p>\n<h3 id=\"创建正则表达式的两种方式：\"><a href=\"#创建正则表达式的两种方式：\" class=\"headerlink\" title=\"创建正则表达式的两种方式：\"></a>创建正则表达式的两种方式：</h3><p>创建两种正则表达式有两种方法：</p>\n<ol>\n<li><code>let reg = new RegExp(pattern[, flags])</code></li>\n<li><code>let reg = /pattern/flags</code></li>\n</ol>\n<p>上面两种方法创建正则除了包含有一个表达式 <code>pattern</code> 之外， 还包括一个可选的 <code>flags</code>  字段， 这个字段包含有几种字段：</p>\n<ul>\n<li>g： 全局匹配正则表达式</li>\n<li>i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。</li>\n<li>m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值</li>\n</ul>\n<p>通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： <code>exec</code>, <code>match</code> <code>test</code> 等方法。</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>正则表达式中的元字符是用来匹配<strong>一个位置</strong>或者<strong>字符集合</strong>中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；</p>\n<p>匹配位置的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>匹配行的开始位置</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配行的结束位置</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处</td>\n</tr>\n</tbody>\n</table>\n<p>匹配字符的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符之外的任意字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配单词字符（包括字母， 数字，下划线和汉字）</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意的非单词字符（和 <code>\\w</code>） 相反</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任意的空白字符， 比如空格符， 制表符或者换行符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任意的非空白符</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>用于匹配任意的数字</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>用于匹配任意的非数字字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>字符类是一个字符集合， 使用方括号 <code>[]</code> 定义， 表示匹配到方括号中的任意一个：</p>\n<p><em>注意： 除了 <code>-</code> 以及 <code>^</code> (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义</em></p>\n<p>例如：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;<span class=\"type\">H</span>[<span class=\"number\">123456</span>]&gt;/</span><br></pre></td></tr></table></figure>\n<p>表示匹配 <code>H1</code> <code>H2</code> … <code>H6</code>  中的任意一个标签</p>\n<p>在方括号中可以使用 <code>-</code> 用作连接符表示字符的范围：</p>\n<p><code>[0-9]</code> 表示匹配 0 到 9  范围类的数字</p>\n<p><code>[a-z]</code> 表示匹配 a 到 z 范围内的小写字母</p>\n<p><code>[a-zA-Z]</code> 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母</p>\n<p>在方括号中当 <code>^</code> 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^<span class=\"number\">0</span><span class=\"number\">-8</span>]/.test(<span class=\"number\">9</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[a\\-c]/.test(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>使用字符类方括号 <code>[]</code> 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：</p>\n<p>限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 </p>\n<p>对于限定符有下面几种情况 ：</p>\n<p>对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 <code>?</code> 表示懒惰匹配；</p>\n<table>\n<thead>\n<tr>\n<th>字符或者表达式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{n}</code></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, }</code></td>\n<td>表示至少重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, m}</code></td>\n<td>重复至少n 次， 至多 m 次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>重复至少0次， 等同于 <code>{0, }</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复至少 1 次， 等同于 <code>{1, }</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复 0 次 或者 1</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.*b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aabab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.&#123;0,1&#125;b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aab</span></span><br></pre></td></tr></table></figure>\n<p>使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg1 = <span class=\"regexp\">/a.+b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/a.+?b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"avbaab\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 贪婪匹配</span></span><br><span class=\"line\">str.match(reg1);  <span class=\"comment\">// avbaab</span></span><br><span class=\"line\"><span class=\"comment\">// 懒惰匹配</span></span><br><span class=\"line\">str.match(reg2); <span class=\"comment\">// avb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>在正则表达式中 <code>|</code> 用于表示当字符串匹配了 <code>|</code> 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，</p>\n<p>类似于 js 中的 <code>||</code> 操作符， 当 <code>|</code> 左边的正则不匹配， 那么进行右边的正则匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg1 = \\d&#123;<span class=\"number\">5</span>&#125; - \\d&#123;<span class=\"number\">3</span>&#125; | d&#123;<span class=\"number\">5</span>&#125;; <span class=\"comment\">// 同时可以匹配 12345-678 或者 12345</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 使用 <code>|</code> 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'goodbye'</span>;</span><br><span class=\"line\">&gt; <span class=\"comment\">// | 两边不能有空格</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/goodbye|good/g</span>;</span><br><span class=\"line\">&gt; str.match(regex); <span class=\"comment\">// ['goodbye']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>使用 <code>()</code> 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配一个 ip 地址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;1,3&#125;\\.)&#123;3&#125;/</span>d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;/;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在正则中使用 <code>[]</code> 以及 <code>|</code> 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>适合单个字符之间的匹配， 需要转义的特殊字符比较少（<code>^</code>  和 <code>-</code>）</td>\n<td>不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用<code>^</code>） 两种逻辑</td>\n</tr>\n<tr>\n<td>竖直</td>\n<td>可以匹配多个字符的字符串</td>\n<td>当匹配正则中的特殊字符的时候需要进行转义</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>在 js 中，利用正则表达式进行验证是我们经常会遇到的功能需求， 今天就讲解一些正则表达式的理论基础；</p>\n<p>正则表达式是用来判断一段字符串是否匹配某一个规则， 通过正则表达式我们可以匹配到我们想要匹配的字符， 判断匹配字符是否存在， 一段字符串是否符合我们的匹配规则等等。</p>\n<h3 id=\"创建正则表达式的两种方式：\"><a href=\"#创建正则表达式的两种方式：\" class=\"headerlink\" title=\"创建正则表达式的两种方式：\"></a>创建正则表达式的两种方式：</h3><p>创建两种正则表达式有两种方法：</p>\n<ol>\n<li><code>let reg = new RegExp(pattern[, flags])</code></li>\n<li><code>let reg = /pattern/flags</code></li>\n</ol>\n<p>上面两种方法创建正则除了包含有一个表达式 <code>pattern</code> 之外， 还包括一个可选的 <code>flags</code>  字段， 这个字段包含有几种字段：</p>\n<ul>\n<li>g： 全局匹配正则表达式</li>\n<li>i： 表示不区分大小写， 匹配的时候忽略大小写的匹配。</li>\n<li>m: 表示多行匹配， 即到达某一行文本结束的时候还会继续查找下一行中是否包含有与模式匹配的值</li>\n</ul>\n<p>通过上面两种方法创建的正则表达式返回的都是一个正则对象， 这个正则对象中包含有正则表达式中的一些方法例如： <code>exec</code>, <code>match</code> <code>test</code> 等方法。</p>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>正则表达式中的元字符是用来匹配<strong>一个位置</strong>或者<strong>字符集合</strong>中的一个字符， 元字符可以分为两种类型， 匹配位置的元字符和匹配字符的元字符；</p>\n<p>匹配位置的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>匹配行的开始位置</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配行的结束位置</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>可以用来匹配单词的开始或者结尾位置， 也就是单词的分界处</td>\n</tr>\n</tbody>\n</table>\n<p>匹配字符的元字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符之外的任意字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配单词字符（包括字母， 数字，下划线和汉字）</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意的非单词字符（和 <code>\\w</code>） 相反</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配任意的空白字符， 比如空格符， 制表符或者换行符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任意的非空白符</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>用于匹配任意的数字</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>用于匹配任意的非数字字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><p>字符类是一个字符集合， 使用方括号 <code>[]</code> 定义， 表示匹配到方括号中的任意一个：</p>\n<p><em>注意： 除了 <code>-</code> 以及 <code>^</code> (只能用在开头， 表示否定) 这两个特殊字符之外， 其他的的特殊字符没有任何特殊的含义</em></p>\n<p>例如：</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;<span class=\"type\">H</span>[<span class=\"number\">123456</span>]&gt;/</span><br></pre></td></tr></table></figure>\n<p>表示匹配 <code>H1</code> <code>H2</code> … <code>H6</code>  中的任意一个标签</p>\n<p>在方括号中可以使用 <code>-</code> 用作连接符表示字符的范围：</p>\n<p><code>[0-9]</code> 表示匹配 0 到 9  范围类的数字</p>\n<p><code>[a-z]</code> 表示匹配 a 到 z 范围内的小写字母</p>\n<p><code>[a-zA-Z]</code> 表示匹配 a到 z 或者 A 到 Z 范围内的英文字母</p>\n<p>在方括号中当 <code>^</code> 符号位于开头的时候， 表示对于当前字符集表示否定， 匹配的是排除在当前字符集中的字符：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^<span class=\"number\">0</span><span class=\"number\">-8</span>]/.test(<span class=\"number\">9</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>要匹配上面的两个特殊符号， 那么需要我们使用反引号进行转义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[a\\-c]/.test(<span class=\"string\">'-'</span>);</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>使用字符类方括号 <code>[]</code> 或者 元字符只能表示匹配单个字符， 如果我们想要匹配多个字符的时候， 我们可以使用限定符进行范围的限定：</p>\n<p>限定符紧跟在单个字符后面，表示这个字符或者字符集重复的次数。 </p>\n<p>对于限定符有下面几种情况 ：</p>\n<p>对于限定符也可分为贪婪匹配以及懒惰匹配， 下面的六种限定符为贪婪匹配， 懒惰匹配为在贪婪匹配后面添加 <code>?</code> 表示懒惰匹配；</p>\n<table>\n<thead>\n<tr>\n<th>字符或者表达式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{n}</code></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, }</code></td>\n<td>表示至少重复 n 次</td>\n</tr>\n<tr>\n<td><code>{n, m}</code></td>\n<td>重复至少n 次， 至多 m 次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>重复至少0次， 等同于 <code>{0, }</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复至少 1 次， 等同于 <code>{1, }</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复 0 次 或者 1</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.*b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aabab</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/a.&#123;0,1&#125;b/</span>;</span><br><span class=\"line\"><span class=\"string\">\"aabab\"</span>.match(reg); <span class=\"comment\">// aab</span></span><br></pre></td></tr></table></figure>\n<p>使用贪婪匹配与懒惰匹配的区别在于， 使用贪婪匹配会尽可能多的匹配字符， 使用懒惰匹配则是查找到满足匹配条件的字符串中字符较少的字符。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg1 = <span class=\"regexp\">/a.+b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/a.+?b/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">\"avbaab\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 贪婪匹配</span></span><br><span class=\"line\">str.match(reg1);  <span class=\"comment\">// avbaab</span></span><br><span class=\"line\"><span class=\"comment\">// 懒惰匹配</span></span><br><span class=\"line\">str.match(reg2); <span class=\"comment\">// avb</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>在正则表达式中 <code>|</code> 用于表示当字符串匹配了 <code>|</code> 左边或者右边的规则的时候， 表示这个字符串匹配了当前的正则表达式，</p>\n<p>类似于 js 中的 <code>||</code> 操作符， 当 <code>|</code> 左边的正则不匹配， 那么进行右边的正则匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> reg1 = \\d&#123;<span class=\"number\">5</span>&#125; - \\d&#123;<span class=\"number\">3</span>&#125; | d&#123;<span class=\"number\">5</span>&#125;; <span class=\"comment\">// 同时可以匹配 12345-678 或者 12345</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 使用 <code>|</code> 进行匹配的时候， 如果当左边的元素被匹配到的时候， 右边的元素将不会进行匹配。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'goodbye'</span>;</span><br><span class=\"line\">&gt; <span class=\"comment\">// | 两边不能有空格</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/goodbye|good/g</span>;</span><br><span class=\"line\">&gt; str.match(regex); <span class=\"comment\">// ['goodbye']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h3><p>使用 <code>()</code> 包裹起来的表达式在正则表达式中表示一个整体， 我们可以对这个整体进行限定符限制， 重复匹配</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配一个 ip 地址</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;1,3&#125;\\.)&#123;3&#125;/</span>d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;/;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在正则中使用 <code>[]</code> 以及 <code>|</code> 都有 “或者” 的意思， 这两者可以根据不同的请求可以选择使用， 具体的对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>适合单个字符之间的匹配， 需要转义的特殊字符比较少（<code>^</code>  和 <code>-</code>）</td>\n<td>不能匹配多个字符结合的字符串，相对表达意思比较少， 只能表示匹配或者不匹配（使用<code>^</code>） 两种逻辑</td>\n</tr>\n<tr>\n<td>竖直</td>\n<td>可以匹配多个字符的字符串</td>\n<td>当匹配正则中的特殊字符的时候需要进行转义</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"实现mechine函数","date":"2019-04-01T09:54:06.000Z","_content":"\n机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。\n\n{% asset_img 图片 mechine.png %}\n\n实现一个类似于 `mechine` 的函数：\n\n```js\n/**\n * \n * @param {String} machineName 机器名称\n * @description 机器函数\n */\nfunction machine(machineName) {\n  let fnList = [];\n  fnList.push(() => {\n    console.log(`start ${machineName}`);\n  });\n  const doFnMap = {\n    do(doName) {\n      console.log(`do ${doName}`);\n    },\n    // 执行机器函数\n    execute() {\n      const handleFn = () => {\n        if (fnList.length > 0) {\n          const fnNow = fnList.shift();\n          const fnVal = fnNow();\n          if (fnVal instanceof Promise) {\n            fnVal.then(() => {\n              handleFn();\n            });\n          } else {\n            handleFn();\n          }\n        } else {\n          console.log(`end ${machineName}`);\n        }\n      };\n      handleFn();\n    },\n    // 执行机器前等待时间\n    waitFirst(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait first ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    waitEnd(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait end ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    // 执行过程中等待时间\n    wait: (time) => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          console.log(`wait ${time}s`);\n          resolve();\n        }, time * 1000)\n      })\n    }\n  };\n  let proxy;\n  // proxy 代理拦截\n  // 获取到需要执行的函数名之后，将其放入执行函数队列数组\n  proxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n  return proxy;\n}\n```\n\n执行效果如下：\n\n```js\n machine('machine').waitFirst(3).do('eat').do('run').wait(5).do('sleep').execute()\n```\n\n执行结果：\n\n{% asset_img 图片 imageconsole.png %}\n\n上面代码的主要思路是， 通过使用 `proxy` 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 `execute` 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 `wait`或者 `waitFirst` 函数的时候， 等待 `wait` 或者 `waitFirst` 函数执行完毕之后执行：\n\n```js\n// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise\nif (fnVal instanceof Promise) {\n  fnVal.then(() => {\n  \thandleFn();\n  });\n} else {\n  handleFn();\n}\n```\n\n在执行过程中， 当调用执行方法的时候， 在代码中通过使用 `proxy` 进行拦截处理：\n\n```js\nproxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n```\n\n使用 `Proxy` 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 `proxy` 中的 `get` 方法，设置了当调用 `doFnMap` 中的方法的时候， 调用`get` 方法，在 `get` 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。\n\n","source":"_posts/实现mechine函数.md","raw":"---\ntitle: 实现mechine函数\ndate: 2019-04-01 17:54:06\ntags: mechine 函数\ncategories: 代码集\n---\n\n机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。\n\n{% asset_img 图片 mechine.png %}\n\n实现一个类似于 `mechine` 的函数：\n\n```js\n/**\n * \n * @param {String} machineName 机器名称\n * @description 机器函数\n */\nfunction machine(machineName) {\n  let fnList = [];\n  fnList.push(() => {\n    console.log(`start ${machineName}`);\n  });\n  const doFnMap = {\n    do(doName) {\n      console.log(`do ${doName}`);\n    },\n    // 执行机器函数\n    execute() {\n      const handleFn = () => {\n        if (fnList.length > 0) {\n          const fnNow = fnList.shift();\n          const fnVal = fnNow();\n          if (fnVal instanceof Promise) {\n            fnVal.then(() => {\n              handleFn();\n            });\n          } else {\n            handleFn();\n          }\n        } else {\n          console.log(`end ${machineName}`);\n        }\n      };\n      handleFn();\n    },\n    // 执行机器前等待时间\n    waitFirst(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait first ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    waitEnd(time) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(`wait end ${time}s`);\n          resolve();\n        }, time * 1000);\n      });\n    },\n    // 执行过程中等待时间\n    wait: (time) => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          console.log(`wait ${time}s`);\n          resolve();\n        }, time * 1000)\n      })\n    }\n  };\n  let proxy;\n  // proxy 代理拦截\n  // 获取到需要执行的函数名之后，将其放入执行函数队列数组\n  proxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n  return proxy;\n}\n```\n\n执行效果如下：\n\n```js\n machine('machine').waitFirst(3).do('eat').do('run').wait(5).do('sleep').execute()\n```\n\n执行结果：\n\n{% asset_img 图片 imageconsole.png %}\n\n上面代码的主要思路是， 通过使用 `proxy` 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 `execute` 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 `wait`或者 `waitFirst` 函数的时候， 等待 `wait` 或者 `waitFirst` 函数执行完毕之后执行：\n\n```js\n// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise\nif (fnVal instanceof Promise) {\n  fnVal.then(() => {\n  \thandleFn();\n  });\n} else {\n  handleFn();\n}\n```\n\n在执行过程中， 当调用执行方法的时候， 在代码中通过使用 `proxy` 进行拦截处理：\n\n```js\nproxy = new Proxy(doFnMap, {\n    get: function (target, property) {\n      return (...args) => {\n        if (property !== 'execute') {\n          if (property === 'waitFirst') {\n            fnList.unshift(() => {\n              return target.waitFirst(args);\n            });\n          } else {\n            fnList.push(() => {\n              return target[property](args);\n            });\n          }\n          return proxy;\n        } else {\n          return doFnMap.execute();\n        }\n      };\n    }\n  });\n```\n\n使用 `Proxy` 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 `proxy` 中的 `get` 方法，设置了当调用 `doFnMap` 中的方法的时候， 调用`get` 方法，在 `get` 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。\n\n","slug":"实现mechine函数","published":1,"updated":"2019-04-01T14:38:30.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohas004ls33gctes7kok","content":"<p>机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。</p>\n<img src=\"/2019/04/01/实现mechine函数/mechine.png\" class=\"图片\">\n<p>实现一个类似于 <code>mechine</code> 的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; machineName 机器名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 机器函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">machine</span>(<span class=\"params\">machineName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fnList = [];</span><br><span class=\"line\">  fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`start <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doFnMap = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(doName) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`do <span class=\"subst\">$&#123;doName&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器函数</span></span><br><span class=\"line\">    execute() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fnList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnNow = fnList.shift();</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnVal = fnNow();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              handleFn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handleFn();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`end <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      handleFn();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器前等待时间</span></span><br><span class=\"line\">    waitFirst(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait first <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitEnd(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait end <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行过程中等待时间</span></span><br><span class=\"line\">    wait: <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy;</span><br><span class=\"line\">  <span class=\"comment\">// proxy 代理拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取到需要执行的函数名之后，将其放入执行函数队列数组</span></span><br><span class=\"line\">  proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine(<span class=\"string\">'machine'</span>).waitFirst(<span class=\"number\">3</span>).do(<span class=\"string\">'eat'</span>).do(<span class=\"string\">'run'</span>).wait(<span class=\"number\">5</span>).do(<span class=\"string\">'sleep'</span>).execute()</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<img src=\"/2019/04/01/实现mechine函数/imageconsole.png\" class=\"图片\">\n<p>上面代码的主要思路是， 通过使用 <code>proxy</code> 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 <code>execute</code> 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 <code>wait</code>或者 <code>waitFirst</code> 函数的时候， 等待 <code>wait</code> 或者 <code>waitFirst</code> 函数执行完毕之后执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">  fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  \thandleFn();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  handleFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行过程中， 当调用执行方法的时候， 在代码中通过使用 <code>proxy</code> 进行拦截处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Proxy</code> 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 <code>proxy</code> 中的 <code>get</code> 方法，设置了当调用 <code>doFnMap</code> 中的方法的时候， 调用<code>get</code> 方法，在 <code>get</code> 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>机器可以按照一定的顺序对于零件进行加工， 在程序中， 我们也可以实现一个机器函数， 这个函数可以按照我们调用函数的顺序进行执行。</p>\n<img src=\"/2019/04/01/实现mechine函数/mechine.png\" class=\"图片\">\n<p>实现一个类似于 <code>mechine</code> 的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; machineName 机器名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 机器函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">machine</span>(<span class=\"params\">machineName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fnList = [];</span><br><span class=\"line\">  fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`start <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doFnMap = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(doName) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`do <span class=\"subst\">$&#123;doName&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器函数</span></span><br><span class=\"line\">    execute() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> handleFn = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fnList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnNow = fnList.shift();</span><br><span class=\"line\">          <span class=\"keyword\">const</span> fnVal = fnNow();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">            fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              handleFn();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            handleFn();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`end <span class=\"subst\">$&#123;machineName&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      handleFn();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行机器前等待时间</span></span><br><span class=\"line\">    waitFirst(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait first <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitEnd(time) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait end <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 执行过程中等待时间</span></span><br><span class=\"line\">    wait: <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`wait <span class=\"subst\">$&#123;time&#125;</span>s`</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;, time * <span class=\"number\">1000</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proxy;</span><br><span class=\"line\">  <span class=\"comment\">// proxy 代理拦截</span></span><br><span class=\"line\">  <span class=\"comment\">// 获取到需要执行的函数名之后，将其放入执行函数队列数组</span></span><br><span class=\"line\">  proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行效果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">machine(<span class=\"string\">'machine'</span>).waitFirst(<span class=\"number\">3</span>).do(<span class=\"string\">'eat'</span>).do(<span class=\"string\">'run'</span>).wait(<span class=\"number\">5</span>).do(<span class=\"string\">'sleep'</span>).execute()</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<img src=\"/2019/04/01/实现mechine函数/imageconsole.png\" class=\"图片\">\n<p>上面代码的主要思路是， 通过使用 <code>proxy</code> 获取到每一次的动作， 将每一次的函数存放到一个函数list 数组中， 当执行 <code>execute</code> 的时候， 依次执行数组中的函数， 在执行过程中进行判断， 当判断为 <code>wait</code>或者 <code>waitFirst</code> 函数的时候， 等待 <code>wait</code> 或者 <code>waitFirst</code> 函数执行完毕之后执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于 wait 或者 waitFirst 函数执行完毕之后返回了一个 promise</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (fnVal <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">  fnVal.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  \thandleFn();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  handleFn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行过程中， 当调用执行方法的时候， 在代码中通过使用 <code>proxy</code> 进行拦截处理：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(doFnMap, &#123;</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (property !== <span class=\"string\">'execute'</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (property === <span class=\"string\">'waitFirst'</span>) &#123;</span><br><span class=\"line\">            fnList.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target.waitFirst(args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fnList.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> target[property](args);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> doFnMap.execute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>Proxy</code> 方法用于对一个对象的属性访问和获取进行拦截， 在上面的代码中， 使用 <code>proxy</code> 中的 <code>get</code> 方法，设置了当调用 <code>doFnMap</code> 中的方法的时候， 调用<code>get</code> 方法，在 <code>get</code> 方法中， 可以用来将将要执行的函数方法推入到函数数组列表中以及调整函数的执行顺序。</p>\n"},{"title":"正则表达式（三）：一些例子","date":"2019-01-27T04:05:57.000Z","_content":"\n### 下面是使用正则表达式的一些示例：\n\n1. 实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。\n\n   ```\n   let pattern = /^[a-zA-a]\\w{7, 15}/;\n   ```\n\n2. 验证是否含有^%&'',;=?$\"等字符\n\n   ```\n   let pattern = /[\\^%&$\".'=?]/;\n   // \"\\\" 用于转义 `^`\n   ```\n\n3. 整数正则\n\n4. ```\n   let pattern = /^-?\\d+$/;\n   ```\n\n4. 匹配数字， 小数点后最大两位小数\n\n   ```js\n   let pattern = /^\\d+/.?\\d{0, 2}$/;\n   ```\n\n5. 手机号码的匹配\n\n   ```\n   let pattern = /^1[34578]\\d{9}$/;\n   ```\n\n6. 匹配16进制颜色值\n\n   ```\n   // 比如匹配如下的颜色\n   // #ffbbad  #Fc01DF  #FFF  #ffE\n   let pattern = /[0-9a-fA-F]{6} | [0-9a-fA-F]{3}/;\n   // 使用 | 用来表示正则表达式中分支结构\n   ```\n\n7. 匹配 24 小时时间\n\n   ```\n   // 例如匹配 23:59 和 02:12\n   // 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容\n   let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;\n   ```\n\n8. 匹配日期\n\n   例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：\n\n   ```\n   let pattern = /^[0-9]{4}-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;\n   ```\n\n9. 匹配 innerHTML 中的类名\n\n   如果我们想要进行匹配这样一个innterHtml 中的类名：\n\n   ```js\n   let innerHtml = '<div class=\"content\"><div class=\"body\"></div></div>';\n   \n   pattern = /class=\".*?\"/i;\n   \n   test = innerHtml.match(pattern)[0];\n   // class=\"content\"\n   // 使用 ？进行的是贪婪匹配， 会匹配尽量少的字符\n   ```\n\n11. 对于字符串中的 `trim` 方法：使用正则表达式清除字符串两边的空格：\n\n    ```\n    let str = '  hello  ';\n    let regex = /^\\s+|\\s+$/g;\n    let res = str.replace(regex, ''); // hello\n    ```\n\n\n","source":"_posts/正则表达式（三）：一些例子.md","raw":"---\ntitle: 正则表达式（三）：一些例子\ndate: 2019-01-27 12:05:57\ntags: 正则表达式\ncategories: js\n---\n\n### 下面是使用正则表达式的一些示例：\n\n1. 实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。\n\n   ```\n   let pattern = /^[a-zA-a]\\w{7, 15}/;\n   ```\n\n2. 验证是否含有^%&'',;=?$\"等字符\n\n   ```\n   let pattern = /[\\^%&$\".'=?]/;\n   // \"\\\" 用于转义 `^`\n   ```\n\n3. 整数正则\n\n4. ```\n   let pattern = /^-?\\d+$/;\n   ```\n\n4. 匹配数字， 小数点后最大两位小数\n\n   ```js\n   let pattern = /^\\d+/.?\\d{0, 2}$/;\n   ```\n\n5. 手机号码的匹配\n\n   ```\n   let pattern = /^1[34578]\\d{9}$/;\n   ```\n\n6. 匹配16进制颜色值\n\n   ```\n   // 比如匹配如下的颜色\n   // #ffbbad  #Fc01DF  #FFF  #ffE\n   let pattern = /[0-9a-fA-F]{6} | [0-9a-fA-F]{3}/;\n   // 使用 | 用来表示正则表达式中分支结构\n   ```\n\n7. 匹配 24 小时时间\n\n   ```\n   // 例如匹配 23:59 和 02:12\n   // 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容\n   let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;\n   ```\n\n8. 匹配日期\n\n   例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：\n\n   ```\n   let pattern = /^[0-9]{4}-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;\n   ```\n\n9. 匹配 innerHTML 中的类名\n\n   如果我们想要进行匹配这样一个innterHtml 中的类名：\n\n   ```js\n   let innerHtml = '<div class=\"content\"><div class=\"body\"></div></div>';\n   \n   pattern = /class=\".*?\"/i;\n   \n   test = innerHtml.match(pattern)[0];\n   // class=\"content\"\n   // 使用 ？进行的是贪婪匹配， 会匹配尽量少的字符\n   ```\n\n11. 对于字符串中的 `trim` 方法：使用正则表达式清除字符串两边的空格：\n\n    ```\n    let str = '  hello  ';\n    let regex = /^\\s+|\\s+$/g;\n    let res = str.replace(regex, ''); // hello\n    ```\n\n\n","slug":"正则表达式（三）：一些例子","published":1,"updated":"2019-02-04T09:13:18.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohau004ps33g8f1752sp","content":"<h3 id=\"下面是使用正则表达式的一些示例：\"><a href=\"#下面是使用正则表达式的一些示例：\" class=\"headerlink\" title=\"下面是使用正则表达式的一些示例：\"></a>下面是使用正则表达式的一些示例：</h3><ol>\n<li><p>实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[a-zA-a]\\w&#123;7, 15&#125;/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否含有^%&amp;’’,;=?$”等字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /[\\^%&amp;$&quot;.&apos;=?]/;</span><br><span class=\"line\">// &quot;\\&quot; 用于转义 `^`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数正则</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^-?\\d+$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配数字， 小数点后最大两位小数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/^\\d+/</span>.?\\d&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手机号码的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^1[34578]\\d&#123;9&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配16进制颜色值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 比如匹配如下的颜色</span><br><span class=\"line\">// #ffbbad  #Fc01DF  #FFF  #ffE</span><br><span class=\"line\">let pattern = /[0-9a-fA-F]&#123;6&#125; | [0-9a-fA-F]&#123;3&#125;/;</span><br><span class=\"line\">// 使用 | 用来表示正则表达式中分支结构</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 24 小时时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如匹配 23:59 和 02:12</span><br><span class=\"line\">// 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容</span><br><span class=\"line\">let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配日期</p>\n<p>例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[0-9]&#123;4&#125;-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 innerHTML 中的类名</p>\n<p>如果我们想要进行匹配这样一个innterHtml 中的类名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> innerHtml = <span class=\"string\">'&lt;div class=\"content\"&gt;&lt;div class=\"body\"&gt;&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"regexp\">/class=\".*?\"/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test = innerHtml.match(pattern)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// class=\"content\"</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 ？进行的是贪婪匹配， 会匹配尽量少的字符</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于字符串中的 <code>trim</code> 方法：使用正则表达式清除字符串两边的空格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;  hello  &apos;;</span><br><span class=\"line\">let regex = /^\\s+|\\s+$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;&apos;); // hello</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"下面是使用正则表达式的一些示例：\"><a href=\"#下面是使用正则表达式的一些示例：\" class=\"headerlink\" title=\"下面是使用正则表达式的一些示例：\"></a>下面是使用正则表达式的一些示例：</h3><ol>\n<li><p>实现密码输入以英文字母开头， 密码长度为 8 到 16 位， 密码限为字符， 数字和下划线。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[a-zA-a]\\w&#123;7, 15&#125;/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证是否含有^%&amp;’’,;=?$”等字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /[\\^%&amp;$&quot;.&apos;=?]/;</span><br><span class=\"line\">// &quot;\\&quot; 用于转义 `^`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整数正则</p>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^-?\\d+$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配数字， 小数点后最大两位小数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pattern = <span class=\"regexp\">/^\\d+/</span>.?\\d&#123;<span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手机号码的匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^1[34578]\\d&#123;9&#125;$/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配16进制颜色值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 比如匹配如下的颜色</span><br><span class=\"line\">// #ffbbad  #Fc01DF  #FFF  #ffE</span><br><span class=\"line\">let pattern = /[0-9a-fA-F]&#123;6&#125; | [0-9a-fA-F]&#123;3&#125;/;</span><br><span class=\"line\">// 使用 | 用来表示正则表达式中分支结构</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 24 小时时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如匹配 23:59 和 02:12</span><br><span class=\"line\">// 使用 () 对于正则表达式进行分组使用， 在 （） 内使用 | 只会作用到括号内的正则内容</span><br><span class=\"line\">let pattern = /^([01][0-9] | [2][0-4]):[0-5][0-9]/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配日期</p>\n<p>例如： 我们想要匹配 “YYYY-mm-dd” 的日期格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pattern = /^[0-9]&#123;4&#125;-([0][0-9] | [1][0-2])-(0[1-9] | [12][0-9] | [3][01])/;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配 innerHTML 中的类名</p>\n<p>如果我们想要进行匹配这样一个innterHtml 中的类名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> innerHtml = <span class=\"string\">'&lt;div class=\"content\"&gt;&lt;div class=\"body\"&gt;&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"regexp\">/class=\".*?\"/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">test = innerHtml.match(pattern)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// class=\"content\"</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 ？进行的是贪婪匹配， 会匹配尽量少的字符</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于字符串中的 <code>trim</code> 方法：使用正则表达式清除字符串两边的空格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;  hello  &apos;;</span><br><span class=\"line\">let regex = /^\\s+|\\s+$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;&apos;); // hello</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"正则表达式（五）：括号与正则符号优先级","date":"2019-02-05T06:45:20.000Z","_content":"\n# 括号\n\n## 作用\n\n### 提供分组和分支结构\n\n分组和分支结构是括号中的基础使用， 作用是提供一个子表达式\n\n#### 分组\n\n使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：\n\n```js\nlet str = 'abababc ab';\nlet regex = /(ab)+/g;\nstr.match(regex); // Array(2) [\"ababab\", \"ab\"]\n```\n\n#### 分支结构\n\n我们在正则中使用 `|` 表明匹配 `|`  符号左边或者右边的正则， 使用括号包裹`|` 用来限定 `|` 的作用范围， 例如：\n\n```js\nlet str = 'ab ac';\nlet regex = /a(b|c)/g;\n// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c\n// 加上括号表明分支结构只有 b 和 c\nstr.match(regex); // ['ab', 'ac']\n```\n\n> 在使用 match 的时候，添加全局标识符 `g` 加不加是不同的：\n>\n> 上面的代码如果不用添加 `g` 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 `ab` 就会返回。\n>\n> ```js\n> let str = 'ab ac';\n> let regex = /a(b|c)/;\n> str.match(regex);\n> // ['ab', 'b']\n> ```\n\n\n\n### 分组引用\n\n在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。\n\n例如， 我们想要对于日期进行匹配：\n\n```\nlet date = '2019-02-05';\nlet regex = /(\\d{4}-(\\d{2})-(\\d{2}))/;\ndate.match(regex); //  [\"2018-02-02\", \"2018\", \"02\", \"02\"]\n```\n\n> 这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。\n\n# 符号的优先级\n\n在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：\n\n从上到下：\n\n| 描述符       | 操作符                                        |\n| ------------ | --------------------------------------------- |\n| 转义符       | `\\`                                           |\n| 括号与方括号 | `(...)` `(?:...)` `(?=...)` `(?!...)` `[...]` |\n| 量词限定符   | `{m}` `{m, n}` `{m, }` `?`  `*` `+`           |\n| 位置和序列   | `^`  `$`  `\\元字符`  `一般字符`               |\n| 管道符       | `|`                                           |\n\n上面的操作符从上到下， 优先级从高到低；\n\n示例： `/ab?(c|de*)+|fg/`\n\n上面的操作过程如下：\n\n因为在正则中存在管道符 `|` 用于分割为 `ab?(c|de*)+`  和 `fg` 两个部分， 先执行这两个部分：\n\n执行 `ab?(c|de*)+`: 在这个过程中，先执行括号内的正则， 然后执行字符 `a`, `b` `?` 以及 `+`, 在括号内\n\n`c|de*` 的执行顺序中， 先执行 `c`, `de*`,  其中 `*` 是和 `e` 在一起的， 因此 `*` 限定的量词是 `e`;\n\n如下：  匹配一个字符串， 字符串中的字符为  `a` , `b`, `c` 中的一个， 并且， 字符串的长度为 3 的倍数；\n\n```js\nlet regexp = /([abc]{3})+/;\n```\n\n 这里是将量词 3 使用括号进行包裹\n\n如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：\n\n3位数.3位数.3位数.3位数\n\n其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：\n\n```js\n/0{0,2}\\d+/ // 匹配 000 - 009\n```\n\n对于两位数而言， 进行匹配：\n\n```js\n/0?\\d{2}/\n```\n\n对于三位数而言， 需要进行匹配：\n\n```js\n/1\\d{2}/ // 匹配 100 - 199\n```\n\n```js\n/2[0-4]\\d/ // 匹配 200 - 249\n```\n\n```js\n/25[0-5]/ // 匹配 250 -255\n```\n\n上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 `|` 进行连接：\n\n```js\n(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\n```\n\n匹配`.` 号：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/\n```\n\n上面的也可以第二部分可以使用 `\\2`  进行代替：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)\\2$/\n```\n\n\n\n\n\n","source":"_posts/正则表达式（五）：括号.md","raw":"---\ntitle: 正则表达式（五）：括号与正则符号优先级\ndate: 2019-02-05 14:45:20\ntags: 正则表达式\ncategories: js\n---\n\n# 括号\n\n## 作用\n\n### 提供分组和分支结构\n\n分组和分支结构是括号中的基础使用， 作用是提供一个子表达式\n\n#### 分组\n\n使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：\n\n```js\nlet str = 'abababc ab';\nlet regex = /(ab)+/g;\nstr.match(regex); // Array(2) [\"ababab\", \"ab\"]\n```\n\n#### 分支结构\n\n我们在正则中使用 `|` 表明匹配 `|`  符号左边或者右边的正则， 使用括号包裹`|` 用来限定 `|` 的作用范围， 例如：\n\n```js\nlet str = 'ab ac';\nlet regex = /a(b|c)/g;\n// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c\n// 加上括号表明分支结构只有 b 和 c\nstr.match(regex); // ['ab', 'ac']\n```\n\n> 在使用 match 的时候，添加全局标识符 `g` 加不加是不同的：\n>\n> 上面的代码如果不用添加 `g` 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 `ab` 就会返回。\n>\n> ```js\n> let str = 'ab ac';\n> let regex = /a(b|c)/;\n> str.match(regex);\n> // ['ab', 'b']\n> ```\n\n\n\n### 分组引用\n\n在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。\n\n例如， 我们想要对于日期进行匹配：\n\n```\nlet date = '2019-02-05';\nlet regex = /(\\d{4}-(\\d{2})-(\\d{2}))/;\ndate.match(regex); //  [\"2018-02-02\", \"2018\", \"02\", \"02\"]\n```\n\n> 这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。\n\n# 符号的优先级\n\n在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：\n\n从上到下：\n\n| 描述符       | 操作符                                        |\n| ------------ | --------------------------------------------- |\n| 转义符       | `\\`                                           |\n| 括号与方括号 | `(...)` `(?:...)` `(?=...)` `(?!...)` `[...]` |\n| 量词限定符   | `{m}` `{m, n}` `{m, }` `?`  `*` `+`           |\n| 位置和序列   | `^`  `$`  `\\元字符`  `一般字符`               |\n| 管道符       | `|`                                           |\n\n上面的操作符从上到下， 优先级从高到低；\n\n示例： `/ab?(c|de*)+|fg/`\n\n上面的操作过程如下：\n\n因为在正则中存在管道符 `|` 用于分割为 `ab?(c|de*)+`  和 `fg` 两个部分， 先执行这两个部分：\n\n执行 `ab?(c|de*)+`: 在这个过程中，先执行括号内的正则， 然后执行字符 `a`, `b` `?` 以及 `+`, 在括号内\n\n`c|de*` 的执行顺序中， 先执行 `c`, `de*`,  其中 `*` 是和 `e` 在一起的， 因此 `*` 限定的量词是 `e`;\n\n如下：  匹配一个字符串， 字符串中的字符为  `a` , `b`, `c` 中的一个， 并且， 字符串的长度为 3 的倍数；\n\n```js\nlet regexp = /([abc]{3})+/;\n```\n\n 这里是将量词 3 使用括号进行包裹\n\n如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：\n\n3位数.3位数.3位数.3位数\n\n其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：\n\n```js\n/0{0,2}\\d+/ // 匹配 000 - 009\n```\n\n对于两位数而言， 进行匹配：\n\n```js\n/0?\\d{2}/\n```\n\n对于三位数而言， 需要进行匹配：\n\n```js\n/1\\d{2}/ // 匹配 100 - 199\n```\n\n```js\n/2[0-4]\\d/ // 匹配 200 - 249\n```\n\n```js\n/25[0-5]/ // 匹配 250 -255\n```\n\n上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 `|` 进行连接：\n\n```js\n(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\n```\n\n匹配`.` 号：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)(0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])$/\n```\n\n上面的也可以第二部分可以使用 `\\2`  进行代替：\n\n```js\n/^((0{0,2}\\d|0?\\d{2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.)\\2$/\n```\n\n\n\n\n\n","slug":"正则表达式（五）：括号","published":1,"updated":"2019-04-02T12:18:26.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohav004ss33g3hmgyifp","content":"<h1 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><h3 id=\"提供分组和分支结构\"><a href=\"#提供分组和分支结构\" class=\"headerlink\" title=\"提供分组和分支结构\"></a>提供分组和分支结构</h3><p>分组和分支结构是括号中的基础使用， 作用是提供一个子表达式</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abababc ab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(ab)+/g</span>;</span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// Array(2) [\"ababab\", \"ab\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h4><p>我们在正则中使用 <code>|</code> 表明匹配 <code>|</code>  符号左边或者右边的正则， 使用括号包裹<code>|</code> 用来限定 <code>|</code> 的作用范围， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号表明分支结构只有 b 和 c</span></span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// ['ab', 'ac']</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用 match 的时候，添加全局标识符 <code>g</code> 加不加是不同的：</p>\n<p>上面的代码如果不用添加 <code>g</code> 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 <code>ab</code> 就会返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/</span>;</span><br><span class=\"line\">&gt; str.match(regex);</span><br><span class=\"line\">&gt; <span class=\"comment\">// ['ab', 'b']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组引用\"><a href=\"#分组引用\" class=\"headerlink\" title=\"分组引用\"></a>分组引用</h3><p>在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。</p>\n<p>例如， 我们想要对于日期进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let date = &apos;2019-02-05&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;-(\\d&#123;2&#125;)-(\\d&#123;2&#125;))/;</span><br><span class=\"line\">date.match(regex); //  [&quot;2018-02-02&quot;, &quot;2018&quot;, &quot;02&quot;, &quot;02&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。</p>\n</blockquote>\n<h1 id=\"符号的优先级\"><a href=\"#符号的优先级\" class=\"headerlink\" title=\"符号的优先级\"></a>符号的优先级</h1><p>在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：</p>\n<p>从上到下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>转义符</td>\n<td><code>\\</code></td>\n</tr>\n<tr>\n<td>括号与方括号</td>\n<td><code>(...)</code> <code>(?:...)</code> <code>(?=...)</code> <code>(?!...)</code> <code>[...]</code></td>\n</tr>\n<tr>\n<td>量词限定符</td>\n<td><code>{m}</code> <code>{m, n}</code> <code>{m, }</code> <code>?</code>  <code>*</code> <code>+</code></td>\n</tr>\n<tr>\n<td>位置和序列</td>\n<td><code>^</code>  <code>$</code>  <code>\\元字符</code>  <code>一般字符</code></td>\n</tr>\n<tr>\n<td>管道符</td>\n<td>`</td>\n<td>`</td>\n</tr>\n</tbody>\n</table>\n<p>上面的操作符从上到下， 优先级从高到低；</p>\n<p>示例： <code>/ab?(c|de*)+|fg/</code></p>\n<p>上面的操作过程如下：</p>\n<p>因为在正则中存在管道符 <code>|</code> 用于分割为 <code>ab?(c|de*)+</code>  和 <code>fg</code> 两个部分， 先执行这两个部分：</p>\n<p>执行 <code>ab?(c|de*)+</code>: 在这个过程中，先执行括号内的正则， 然后执行字符 <code>a</code>, <code>b</code> <code>?</code> 以及 <code>+</code>, 在括号内</p>\n<p><code>c|de*</code> 的执行顺序中， 先执行 <code>c</code>, <code>de*</code>,  其中 <code>*</code> 是和 <code>e</code> 在一起的， 因此 <code>*</code> 限定的量词是 <code>e</code>;</p>\n<p>如下：  匹配一个字符串， 字符串中的字符为  <code>a</code> , <code>b</code>, <code>c</code> 中的一个， 并且， 字符串的长度为 3 的倍数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/([abc]&#123;3&#125;)+/</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里是将量词 3 使用括号进行包裹</p>\n<p>如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：</p>\n<p>3位数.3位数.3位数.3位数</p>\n<p>其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d+<span class=\"regexp\">/ /</span><span class=\"regexp\">/ 匹配 000 - 009</span></span><br></pre></td></tr></table></figure>\n<p>对于两位数而言， 进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;/</span><br></pre></td></tr></table></figure>\n<p>对于三位数而言， 需要进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;/ <span class=\"comment\">// 匹配 100 - 199</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d/ <span class=\"comment\">// 匹配 200 - 249</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]/ <span class=\"comment\">// 匹配 250 -255</span></span><br></pre></td></tr></table></figure>\n<p>上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 <code>|</code> 进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])</span><br></pre></td></tr></table></figure>\n<p>匹配<code>.</code> 号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])$/</span><br></pre></td></tr></table></figure>\n<p>上面的也可以第二部分可以使用 <code>\\2</code>  进行代替：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)\\<span class=\"number\">2</span>$/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><h3 id=\"提供分组和分支结构\"><a href=\"#提供分组和分支结构\" class=\"headerlink\" title=\"提供分组和分支结构\"></a>提供分组和分支结构</h3><p>分组和分支结构是括号中的基础使用， 作用是提供一个子表达式</p>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><p>使用括号进行分组， 用来表明括号内的所有字符是一个组合， 从而对于括号内的字符组合进行范围限定， 可以对于整个括号添加量词， 表明匹配括号内的元素进行整体量词限定：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'abababc ab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(ab)+/g</span>;</span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// Array(2) [\"ababab\", \"ab\"]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h4><p>我们在正则中使用 <code>|</code> 表明匹配 <code>|</code>  符号左边或者右边的正则， 使用括号包裹<code>|</code> 用来限定 <code>|</code> 的作用范围， 例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果不加上括号 regex = /ab | c/g 那么匹配的是 ab 或者 c</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号表明分支结构只有 b 和 c</span></span><br><span class=\"line\">str.match(regex); <span class=\"comment\">// ['ab', 'ac']</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在使用 match 的时候，添加全局标识符 <code>g</code> 加不加是不同的：</p>\n<p>上面的代码如果不用添加 <code>g</code> 标识符， 那么返回结果如下：不会进行全局匹配， 只会匹配到 <code>ab</code> 就会返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">let</span> str = <span class=\"string\">'ab ac'</span>;</span><br><span class=\"line\">&gt; <span class=\"keyword\">let</span> regex = <span class=\"regexp\">/a(b|c)/</span>;</span><br><span class=\"line\">&gt; str.match(regex);</span><br><span class=\"line\">&gt; <span class=\"comment\">// ['ab', 'b']</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"分组引用\"><a href=\"#分组引用\" class=\"headerlink\" title=\"分组引用\"></a>分组引用</h3><p>在正则中使用括号进行包裹正则表达式时， 正则引擎会对于正则表达式进行分组，正则引擎会在匹配过程中， 给每一个分组都开辟一个内存空间， 用来存储每一个分组匹配到的数据。</p>\n<p>例如， 我们想要对于日期进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let date = &apos;2019-02-05&apos;;</span><br><span class=\"line\">let regex = /(\\d&#123;4&#125;-(\\d&#123;2&#125;)-(\\d&#123;2&#125;))/;</span><br><span class=\"line\">date.match(regex); //  [&quot;2018-02-02&quot;, &quot;2018&quot;, &quot;02&quot;, &quot;02&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里使用 match 进行匹配的正则表达式中没有包含有标识符 g， 因此使用 match 与使用 exec 的返回结果是一样的。</p>\n</blockquote>\n<h1 id=\"符号的优先级\"><a href=\"#符号的优先级\" class=\"headerlink\" title=\"符号的优先级\"></a>符号的优先级</h1><p>在正则表达式中， 使用操作符进行操作的时候， 需要规定操作符的优先级， 用来表示操作符是谁先操作， 谁后操作， 在正则表达式中， 各种操作符的优先级如下：</p>\n<p>从上到下：</p>\n<table>\n<thead>\n<tr>\n<th>描述符</th>\n<th>操作符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>转义符</td>\n<td><code>\\</code></td>\n</tr>\n<tr>\n<td>括号与方括号</td>\n<td><code>(...)</code> <code>(?:...)</code> <code>(?=...)</code> <code>(?!...)</code> <code>[...]</code></td>\n</tr>\n<tr>\n<td>量词限定符</td>\n<td><code>{m}</code> <code>{m, n}</code> <code>{m, }</code> <code>?</code>  <code>*</code> <code>+</code></td>\n</tr>\n<tr>\n<td>位置和序列</td>\n<td><code>^</code>  <code>$</code>  <code>\\元字符</code>  <code>一般字符</code></td>\n</tr>\n<tr>\n<td>管道符</td>\n<td>`</td>\n<td>`</td>\n</tr>\n</tbody>\n</table>\n<p>上面的操作符从上到下， 优先级从高到低；</p>\n<p>示例： <code>/ab?(c|de*)+|fg/</code></p>\n<p>上面的操作过程如下：</p>\n<p>因为在正则中存在管道符 <code>|</code> 用于分割为 <code>ab?(c|de*)+</code>  和 <code>fg</code> 两个部分， 先执行这两个部分：</p>\n<p>执行 <code>ab?(c|de*)+</code>: 在这个过程中，先执行括号内的正则， 然后执行字符 <code>a</code>, <code>b</code> <code>?</code> 以及 <code>+</code>, 在括号内</p>\n<p><code>c|de*</code> 的执行顺序中， 先执行 <code>c</code>, <code>de*</code>,  其中 <code>*</code> 是和 <code>e</code> 在一起的， 因此 <code>*</code> 限定的量词是 <code>e</code>;</p>\n<p>如下：  匹配一个字符串， 字符串中的字符为  <code>a</code> , <code>b</code>, <code>c</code> 中的一个， 并且， 字符串的长度为 3 的倍数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regexp = <span class=\"regexp\">/([abc]&#123;3&#125;)+/</span>;</span><br></pre></td></tr></table></figure>\n<p> 这里是将量词 3 使用括号进行包裹</p>\n<p>如下： 匹配一个 ipv4 的地址：IP4 的地址的结构为这种形式：</p>\n<p>3位数.3位数.3位数.3位数</p>\n<p>其中 3 位数的数字范围为 0 - 255， 因此， 对于一位数而言， 可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d+<span class=\"regexp\">/ /</span><span class=\"regexp\">/ 匹配 000 - 009</span></span><br></pre></td></tr></table></figure>\n<p>对于两位数而言， 进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;/</span><br></pre></td></tr></table></figure>\n<p>对于三位数而言， 需要进行匹配：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;/ <span class=\"comment\">// 匹配 100 - 199</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d/ <span class=\"comment\">// 匹配 200 - 249</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]/ <span class=\"comment\">// 匹配 250 -255</span></span><br></pre></td></tr></table></figure>\n<p>上面的这几种匹配结构为或的关系， 因此， 上面几种结构使用管道符 <code>|</code> 进行连接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])</span><br></pre></td></tr></table></figure>\n<p>匹配<code>.</code> 号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)(<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])$/</span><br></pre></td></tr></table></figure>\n<p>上面的也可以第二部分可以使用 <code>\\2</code>  进行代替：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((<span class=\"number\">0</span>&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>&#125;\\d|<span class=\"number\">0</span>?\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">1</span>\\d&#123;<span class=\"number\">2</span>&#125;|<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>])\\.)\\<span class=\"number\">2</span>$/</span><br></pre></td></tr></table></figure>\n"},{"title":"浏览器渲染过程","date":"2018-03-12T16:11:34.000Z","_content":"\n## 浏览器渲染过程以及原理\n\n### 浏览器渲染的过程\n\n对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:\n\n1. DNS 查询（DNS 根据服务器地址查找到IP地址）\n2. TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）\n3. HTTP 请求以及响应（请求响应数据）\n4. 服务器响应（后端响应数据）\n5. 客户端渲染  \n\n对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：\n\n1.  处理 HTML 标记并且构建 DOM 树。\n2.  处理 CSS 标记并且构建 CSSOM 树。\n3.  将 DOM 以及 CSSOM 合并为一个渲染树。\n4.  根据渲染树进行布局,以计算每个节点的几何信息。\n5.  将各个节点绘制到屏幕上去。\n\n在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。\n\n### 阻塞渲染\n\n在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 `javascript` 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。\n\n使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。\n\n在实际使用的时候应该遵循下面两个原则：\n\n1. CSS资源要优于JavaScript 资源进行加载。\n2. 尽量避免使用 JavaScript 进行DOM 的操作。\n\n### 解决渲染阻塞的几种方法\n\n#### CSS\n\n对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：\n\n1. 提高CSS页面的加载速度\n\n   提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。\n\n   少用 `@import ` 用于引入 CSS 文件, 使用 `@import` 会影响 CSS 文件的加载速度。\n\n2. 加快解析速度， 提高解析性能。\n\n   减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。","source":"_posts/浏览器渲染过程.md","raw":"---\ntitle: 浏览器渲染过程\ndate: 2018-03-13 00:11:34\ntags: 浏览器渲染\n---\n\n## 浏览器渲染过程以及原理\n\n### 浏览器渲染的过程\n\n对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:\n\n1. DNS 查询（DNS 根据服务器地址查找到IP地址）\n2. TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）\n3. HTTP 请求以及响应（请求响应数据）\n4. 服务器响应（后端响应数据）\n5. 客户端渲染  \n\n对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：\n\n1.  处理 HTML 标记并且构建 DOM 树。\n2.  处理 CSS 标记并且构建 CSSOM 树。\n3.  将 DOM 以及 CSSOM 合并为一个渲染树。\n4.  根据渲染树进行布局,以计算每个节点的几何信息。\n5.  将各个节点绘制到屏幕上去。\n\n在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。\n\n### 阻塞渲染\n\n在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 `javascript` 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。\n\n使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。\n\n在实际使用的时候应该遵循下面两个原则：\n\n1. CSS资源要优于JavaScript 资源进行加载。\n2. 尽量避免使用 JavaScript 进行DOM 的操作。\n\n### 解决渲染阻塞的几种方法\n\n#### CSS\n\n对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：\n\n1. 提高CSS页面的加载速度\n\n   提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。\n\n   少用 `@import ` 用于引入 CSS 文件, 使用 `@import` 会影响 CSS 文件的加载速度。\n\n2. 加快解析速度， 提高解析性能。\n\n   减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。","slug":"浏览器渲染过程","published":1,"updated":"2018-03-13T15:27:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohax004ws33g7bv73w6y","content":"<h2 id=\"浏览器渲染过程以及原理\"><a href=\"#浏览器渲染过程以及原理\" class=\"headerlink\" title=\"浏览器渲染过程以及原理\"></a>浏览器渲染过程以及原理</h2><h3 id=\"浏览器渲染的过程\"><a href=\"#浏览器渲染的过程\" class=\"headerlink\" title=\"浏览器渲染的过程\"></a>浏览器渲染的过程</h3><p>对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:</p>\n<ol>\n<li>DNS 查询（DNS 根据服务器地址查找到IP地址）</li>\n<li>TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）</li>\n<li>HTTP 请求以及响应（请求响应数据）</li>\n<li>服务器响应（后端响应数据）</li>\n<li>客户端渲染  </li>\n</ol>\n<p>对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：</p>\n<ol>\n<li>处理 HTML 标记并且构建 DOM 树。</li>\n<li>处理 CSS 标记并且构建 CSSOM 树。</li>\n<li>将 DOM 以及 CSSOM 合并为一个渲染树。</li>\n<li>根据渲染树进行布局,以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上去。</li>\n</ol>\n<p>在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。</p>\n<h3 id=\"阻塞渲染\"><a href=\"#阻塞渲染\" class=\"headerlink\" title=\"阻塞渲染\"></a>阻塞渲染</h3><p>在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 <code>javascript</code> 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。</p>\n<p>使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。</p>\n<p>在实际使用的时候应该遵循下面两个原则：</p>\n<ol>\n<li>CSS资源要优于JavaScript 资源进行加载。</li>\n<li>尽量避免使用 JavaScript 进行DOM 的操作。</li>\n</ol>\n<h3 id=\"解决渲染阻塞的几种方法\"><a href=\"#解决渲染阻塞的几种方法\" class=\"headerlink\" title=\"解决渲染阻塞的几种方法\"></a>解决渲染阻塞的几种方法</h3><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：</p>\n<ol>\n<li><p>提高CSS页面的加载速度</p>\n<p>提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。</p>\n<p>少用 <code>@import</code> 用于引入 CSS 文件, 使用 <code>@import</code> 会影响 CSS 文件的加载速度。</p>\n</li>\n<li><p>加快解析速度， 提高解析性能。</p>\n<p>减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浏览器渲染过程以及原理\"><a href=\"#浏览器渲染过程以及原理\" class=\"headerlink\" title=\"浏览器渲染过程以及原理\"></a>浏览器渲染过程以及原理</h2><h3 id=\"浏览器渲染的过程\"><a href=\"#浏览器渲染的过程\" class=\"headerlink\" title=\"浏览器渲染的过程\"></a>浏览器渲染的过程</h3><p>对于浏览器而言， 浏览器请求， 加载， 渲染一个页面的时候，所要花费的时间主要在下面几个过程中:</p>\n<ol>\n<li>DNS 查询（DNS 根据服务器地址查找到IP地址）</li>\n<li>TCP 连接（用于连接客户端与服务器， 包含三次握手，四次挥手的过程）</li>\n<li>HTTP 请求以及响应（请求响应数据）</li>\n<li>服务器响应（后端响应数据）</li>\n<li>客户端渲染  </li>\n</ol>\n<p>对于第五个部分客户端渲染的过程中， 这一部分过程主要是渲染树的构建，布局，以及绘制， 具体而言， 主要是下面几个过程：</p>\n<ol>\n<li>处理 HTML 标记并且构建 DOM 树。</li>\n<li>处理 CSS 标记并且构建 CSSOM 树。</li>\n<li>将 DOM 以及 CSSOM 合并为一个渲染树。</li>\n<li>根据渲染树进行布局,以计算每个节点的几何信息。</li>\n<li>将各个节点绘制到屏幕上去。</li>\n</ol>\n<p>在上面的过程中，如果DOM或者CSSOM被修改,那个这个过程需要重复执行，重新在屏幕上进行渲染。</p>\n<h3 id=\"阻塞渲染\"><a href=\"#阻塞渲染\" class=\"headerlink\" title=\"阻塞渲染\"></a>阻塞渲染</h3><p>在一个网页中， CSS被视为阻塞性的资源， 当 CSSOM 被构建的时候， 其他的内容将不会被处理， 因此， 只有当 CSSOM 构建完毕之后其他内容才可能被加载。对于 <code>javascript</code> 也是类似的效果， 当浏览器遇到一个 script 标记的时候，DOM 构建将会暂停，知道脚本完成执行。</p>\n<p>使用 javascript 可以改变 DOM 以及 CSSOM， 而当 DOM 或者 CSSOM 被改变的时候， 这两个树均会重新进行绘制， 对于 CSSOM 因为是阻塞性资源, 在构建的时候， JavaScript 将会延迟执行， 直到CSSOM 构建完毕。</p>\n<p>在实际使用的时候应该遵循下面两个原则：</p>\n<ol>\n<li>CSS资源要优于JavaScript 资源进行加载。</li>\n<li>尽量避免使用 JavaScript 进行DOM 的操作。</li>\n</ol>\n<h3 id=\"解决渲染阻塞的几种方法\"><a href=\"#解决渲染阻塞的几种方法\" class=\"headerlink\" title=\"解决渲染阻塞的几种方法\"></a>解决渲染阻塞的几种方法</h3><h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>对于 CSS 而言， 浏览器解析 CSS 用于创建  CSSOM 树， 因此在 CSS 编写的过程中要注意对于 CSS 解析速度的影响：</p>\n<ol>\n<li><p>提高CSS页面的加载速度</p>\n<p>提高页面的加载速度主要是通过将样式尽量写在单独的文件里面， 将 CSS样式作为单独的文件进行引入， 这样做的目的不仅仅是减少页面体积， 并且可以利用 CSS 文件的缓存以及重用， 提高文件的加载速度。</p>\n<p>少用 <code>@import</code> 用于引入 CSS 文件, 使用 <code>@import</code> 会影响 CSS 文件的加载速度。</p>\n</li>\n<li><p>加快解析速度， 提高解析性能。</p>\n<p>减少css 样式的嵌套层数， 对于 CSS 的嵌套层数尽量不要超过三层, 过多的嵌套层数会影响到CSS的解析速度。</p>\n</li>\n</ol>\n"},{"title":"正则表达式（四）：匹配","date":"2019-02-04T06:33:08.000Z","_content":"\n正则表达式中的位置匹配：\n\n**正则表达式是匹配模式， 要么匹配字符， 要么匹配位置**\n\n对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：\n\n`^  `   `$`  `\\b`  `\\B`    `(?=p)` `(?!p)`\n\n|  字符   | 匹配含义                                                     |\n| :-----: | ------------------------------------------------------------ |\n|   `^`   | 匹配字符串的开头                                             |\n|   `$`   | 匹配字符串的结尾                                             |\n|  `\\b`   | 单词边界， 具体就是 `\\w` 与 `\\W` 之间的位置, 以及字符串的开始位置和结尾位置 |\n|  `\\B`   | 是 `/b` 之外的位置                                           |\n| `(?=P)` | `p` 是一个模式， 这个正则表达式匹配的是`P` 之前的位置， 或者当前位置之后的字符要匹配正则表达式 `P` |\n| `(?!P)` | 这个与 `(?=P)` 意思相反， 是除了 `(?=P)` 之外的位置          |\n\n#### `^` 以及 `$`\n\n用于匹配字符串开头或者字符串结尾的位置：\n\n如下例子：将字符的开头和结尾添加特定的字符：\n\n```\nlet str = 'hello';\nlet regex = /^|$/g;\nlet res = str.replace(regex, '*');\nconsole.log(res); // '*hello*'\n```\n\n例如下面， 使用 `replace`  代替     `trim`  方法：\n\n```js\nlet str = '  hell o   ';\nlet regex = /^\\s+|\\s+$/g;\nlet res = str.replace(regex, '');\n// hell o\n```\n\n#### `\\b` 以及 `\\B`\n\n使用 `\\b` 的作用是匹配单词边界之间的位置， 具体而言是 `\\w` 以及 `\\W`   之间的位置：\n\n`\\w`: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字\n\n示例如下：\n\n```js\nlet str = 'hel lo';\nlet regex = /\\b/g;\nlet res = str.replace(regex, '#');\n// #hel# #lo#\n```\n\n使用 `\\B` 则和 `\\b`  相反， 匹配的位置是单词字符内的位置：\n\n```js\nregex = /\\B/g;\nres = str.replace(regex, '#');\n// h#e#l l#o;\n```\n\n#### `(?=P)` 以及 `(?!P)`\n\n使用 `(?=P)` 用来匹配特定字符前的位置, `P` 是一个正则表达式；\n\n如下： 给单词中的 l 字符前面添加字符 `#`:\n\n```js\nregex = /(?=l)/g;\nstr = 'hello';\nlet res = str.replace(regex, '#');\n// he#l#lo\n```\n\n给每一个单词字符前面添加一个字符 `*`\n\n```\nregex = /(?=\\w)/g;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*e*l *l*o\n```\n\n使用 `(?!P)` 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：\n\n例如上面的例子， 我们使用 `(?!P)` 来代替 `(?=P)`:\n\n```js\nregex = /(?!l)/;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*ell*o*\n// 当我们仅仅想匹配到单词内部的时候\nregex = /(?!l)(?!^)(?!$)/;\n// h*ell*o\n```\n\n这里的 `(?!^)(?!$)` 是匹配除了单词开头和结尾的位置， 这里可以使用 `/B` 来进行代替;  \n\n`regex = /(?!l)(\\B)/` \n\n如下， 给一个数字添加千位分隔符 ','  \n\n```js\nlet str = \"12345678\";\nlet regex = /(?!^)(?=(\\d{3})+$))/g;\nlet res = str.replace(regex, ','); // 12,345,678\n```\n\n分析：\n\n给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ' ,';  \n\n```javascript\n(\\d{3})+$ // 匹配结尾处向前 3 个或者多个 3 字符倍数的字符\n```\n\n```javascript\n(?=(\\d{3})+$) // 匹配 3 个字符或者 3 个字符倍数的字符前面的位置\n```\n\n```javascript\n(?!^) // 匹配非开头的位置\n```\n\n如下， 给钱数添加人民币符号 `¥`\n\n```js\nlet number = '1234';\nlet regex = /(?=^)/;\nlet res = number.replace(regex, '¥ ');\n// ¥ 1234\n```\n\n如下： 判断一段字符中必须包含有数字：\n\n```js\nlet str = 'str123';\nlet regex = /(?=.*[0-9])^/g;\n// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]\n// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字\nlet res = regex.test(str); // true\n```\n\n如下： 判断字符中不能全部为数字,  可以使用 `?!P` 进行判断\n\n判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：\n\n```\n// 判断6位字符串中全部为数字\nlet regex = /(?=[0-9]{6})/\n```\n\n因为 `?!` 和 `?=` 互为反义， 因此， 判断不能全部为数字的正则如下：\n\n```js\nlet regex = /(?![0-9]{6})/\nlet str = '123456';\nregex.test(str); // false\nstr = 'a23456';\nregex.test(str); // true\n```\n\n","source":"_posts/正则表达式（四）：正则表达式进阶，-匹配位置.md","raw":"---\ntitle: 正则表达式（四）：匹配\ndate: 2019-02-04 14:33:08\ntags: 正则表达式\ncategories: js\n---\n\n正则表达式中的位置匹配：\n\n**正则表达式是匹配模式， 要么匹配字符， 要么匹配位置**\n\n对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：\n\n`^  `   `$`  `\\b`  `\\B`    `(?=p)` `(?!p)`\n\n|  字符   | 匹配含义                                                     |\n| :-----: | ------------------------------------------------------------ |\n|   `^`   | 匹配字符串的开头                                             |\n|   `$`   | 匹配字符串的结尾                                             |\n|  `\\b`   | 单词边界， 具体就是 `\\w` 与 `\\W` 之间的位置, 以及字符串的开始位置和结尾位置 |\n|  `\\B`   | 是 `/b` 之外的位置                                           |\n| `(?=P)` | `p` 是一个模式， 这个正则表达式匹配的是`P` 之前的位置， 或者当前位置之后的字符要匹配正则表达式 `P` |\n| `(?!P)` | 这个与 `(?=P)` 意思相反， 是除了 `(?=P)` 之外的位置          |\n\n#### `^` 以及 `$`\n\n用于匹配字符串开头或者字符串结尾的位置：\n\n如下例子：将字符的开头和结尾添加特定的字符：\n\n```\nlet str = 'hello';\nlet regex = /^|$/g;\nlet res = str.replace(regex, '*');\nconsole.log(res); // '*hello*'\n```\n\n例如下面， 使用 `replace`  代替     `trim`  方法：\n\n```js\nlet str = '  hell o   ';\nlet regex = /^\\s+|\\s+$/g;\nlet res = str.replace(regex, '');\n// hell o\n```\n\n#### `\\b` 以及 `\\B`\n\n使用 `\\b` 的作用是匹配单词边界之间的位置， 具体而言是 `\\w` 以及 `\\W`   之间的位置：\n\n`\\w`: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字\n\n示例如下：\n\n```js\nlet str = 'hel lo';\nlet regex = /\\b/g;\nlet res = str.replace(regex, '#');\n// #hel# #lo#\n```\n\n使用 `\\B` 则和 `\\b`  相反， 匹配的位置是单词字符内的位置：\n\n```js\nregex = /\\B/g;\nres = str.replace(regex, '#');\n// h#e#l l#o;\n```\n\n#### `(?=P)` 以及 `(?!P)`\n\n使用 `(?=P)` 用来匹配特定字符前的位置, `P` 是一个正则表达式；\n\n如下： 给单词中的 l 字符前面添加字符 `#`:\n\n```js\nregex = /(?=l)/g;\nstr = 'hello';\nlet res = str.replace(regex, '#');\n// he#l#lo\n```\n\n给每一个单词字符前面添加一个字符 `*`\n\n```\nregex = /(?=\\w)/g;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*e*l *l*o\n```\n\n使用 `(?!P)` 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：\n\n例如上面的例子， 我们使用 `(?!P)` 来代替 `(?=P)`:\n\n```js\nregex = /(?!l)/;\nstr = 'hello';\nlet res = str.replace(regex, '*');\n// *h*ell*o*\n// 当我们仅仅想匹配到单词内部的时候\nregex = /(?!l)(?!^)(?!$)/;\n// h*ell*o\n```\n\n这里的 `(?!^)(?!$)` 是匹配除了单词开头和结尾的位置， 这里可以使用 `/B` 来进行代替;  \n\n`regex = /(?!l)(\\B)/` \n\n如下， 给一个数字添加千位分隔符 ','  \n\n```js\nlet str = \"12345678\";\nlet regex = /(?!^)(?=(\\d{3})+$))/g;\nlet res = str.replace(regex, ','); // 12,345,678\n```\n\n分析：\n\n给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ' ,';  \n\n```javascript\n(\\d{3})+$ // 匹配结尾处向前 3 个或者多个 3 字符倍数的字符\n```\n\n```javascript\n(?=(\\d{3})+$) // 匹配 3 个字符或者 3 个字符倍数的字符前面的位置\n```\n\n```javascript\n(?!^) // 匹配非开头的位置\n```\n\n如下， 给钱数添加人民币符号 `¥`\n\n```js\nlet number = '1234';\nlet regex = /(?=^)/;\nlet res = number.replace(regex, '¥ ');\n// ¥ 1234\n```\n\n如下： 判断一段字符中必须包含有数字：\n\n```js\nlet str = 'str123';\nlet regex = /(?=.*[0-9])^/g;\n// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]\n// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字\nlet res = regex.test(str); // true\n```\n\n如下： 判断字符中不能全部为数字,  可以使用 `?!P` 进行判断\n\n判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：\n\n```\n// 判断6位字符串中全部为数字\nlet regex = /(?=[0-9]{6})/\n```\n\n因为 `?!` 和 `?=` 互为反义， 因此， 判断不能全部为数字的正则如下：\n\n```js\nlet regex = /(?![0-9]{6})/\nlet str = '123456';\nregex.test(str); // false\nstr = 'a23456';\nregex.test(str); // true\n```\n\n","slug":"正则表达式（四）：正则表达式进阶，-匹配位置","published":1,"updated":"2019-02-17T05:52:01.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohay004zs33g5qk9b10s","content":"<p>正则表达式中的位置匹配：</p>\n<p><strong>正则表达式是匹配模式， 要么匹配字符， 要么匹配位置</strong></p>\n<p>对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：</p>\n<p><code>^</code>   <code>$</code>  <code>\\b</code>  <code>\\B</code>    <code>(?=p)</code> <code>(?!p)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th>匹配含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td>匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td>匹配字符串的结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td>单词边界， 具体就是 <code>\\w</code> 与 <code>\\W</code> 之间的位置, 以及字符串的开始位置和结尾位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td>是 <code>/b</code> 之外的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?=P)</code></td>\n<td><code>p</code> 是一个模式， 这个正则表达式匹配的是<code>P</code> 之前的位置， 或者当前位置之后的字符要匹配正则表达式 <code>P</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?!P)</code></td>\n<td>这个与 <code>(?=P)</code> 意思相反， 是除了 <code>(?=P)</code> 之外的位置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"以及\"><a href=\"#以及\" class=\"headerlink\" title=\"^ 以及 $\"></a><code>^</code> 以及 <code>$</code></h4><p>用于匹配字符串开头或者字符串结尾的位置：</p>\n<p>如下例子：将字符的开头和结尾添加特定的字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello&apos;;</span><br><span class=\"line\">let regex = /^|$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">console.log(res); // &apos;*hello*&apos;</span><br></pre></td></tr></table></figure>\n<p>例如下面， 使用 <code>replace</code>  代替     <code>trim</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hell o   '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// hell o</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"b-以及-B\"><a href=\"#b-以及-B\" class=\"headerlink\" title=\"\\b 以及 \\B\"></a><code>\\b</code> 以及 <code>\\B</code></h4><p>使用 <code>\\b</code> 的作用是匹配单词边界之间的位置， 具体而言是 <code>\\w</code> 以及 <code>\\W</code>   之间的位置：</p>\n<p><code>\\w</code>: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字</p>\n<p>示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hel lo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/\\b/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// #hel# #lo#</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>\\B</code> 则和 <code>\\b</code>  相反， 匹配的位置是单词字符内的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/\\B/g</span>;</span><br><span class=\"line\">res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// h#e#l l#o;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"P-以及-P\"><a href=\"#P-以及-P\" class=\"headerlink\" title=\"(?=P) 以及 (?!P)\"></a><code>(?=P)</code> 以及 <code>(?!P)</code></h4><p>使用 <code>(?=P)</code> 用来匹配特定字符前的位置, <code>P</code> 是一个正则表达式；</p>\n<p>如下： 给单词中的 l 字符前面添加字符 <code>#</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?=l)/g</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// he#l#lo</span></span><br></pre></td></tr></table></figure>\n<p>给每一个单词字符前面添加一个字符 <code>*</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = /(?=\\w)/g;</span><br><span class=\"line\">str = &apos;hello&apos;;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">// *h*e*l *l*o</span><br></pre></td></tr></table></figure>\n<p>使用 <code>(?!P)</code> 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：</p>\n<p>例如上面的例子， 我们使用 <code>(?!P)</code> 来代替 <code>(?=P)</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?!l)/</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'*'</span>);</span><br><span class=\"line\"><span class=\"comment\">// *h*ell*o*</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们仅仅想匹配到单词内部的时候</span></span><br><span class=\"line\">regex = <span class=\"regexp\">/(?!l)(?!^)(?!$)/</span>;</span><br><span class=\"line\"><span class=\"comment\">// h*ell*o</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>(?!^)(?!$)</code> 是匹配除了单词开头和结尾的位置， 这里可以使用 <code>/B</code> 来进行代替;  </p>\n<p><code>regex = /(?!l)(\\B)/</code> </p>\n<p>如下， 给一个数字添加千位分隔符 ‘,’  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"12345678\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">','</span>); <span class=\"comment\">// 12,345,678</span></span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ‘ ,’;  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;<span class=\"number\">3</span>&#125;)+$ <span class=\"comment\">// 匹配结尾处向前 3 个或者多个 3 字符倍数的字符</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?=(\\d&#123;<span class=\"number\">3</span>&#125;)+$) <span class=\"comment\">// 匹配 3 个字符或者 3 个字符倍数的字符前面的位置</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^) <span class=\"comment\">// 匹配非开头的位置</span></span><br></pre></td></tr></table></figure>\n<p>如下， 给钱数添加人民币符号 <code>¥</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"string\">'1234'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=^)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = number.replace(regex, <span class=\"string\">'¥ '</span>);</span><br><span class=\"line\"><span class=\"comment\">// ¥ 1234</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断一段字符中必须包含有数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=.*[0-9])^/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]</span></span><br><span class=\"line\"><span class=\"comment\">// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断字符中不能全部为数字,  可以使用 <code>?!P</code> 进行判断</p>\n<p>判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断6位字符串中全部为数字</span><br><span class=\"line\">let regex = /(?=[0-9]&#123;6&#125;)/</span><br></pre></td></tr></table></figure>\n<p>因为 <code>?!</code> 和 <code>?=</code> 互为反义， 因此， 判断不能全部为数字的正则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?![0-9]&#123;6&#125;)/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// false</span></span><br><span class=\"line\">str = <span class=\"string\">'a23456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>正则表达式中的位置匹配：</p>\n<p><strong>正则表达式是匹配模式， 要么匹配字符， 要么匹配位置</strong></p>\n<p>对于位置匹配， 这里的位置是字符之间的间隙， 进行位置匹配时， 使用正则表达式中存在下面几个‘锚’：</p>\n<p><code>^</code>   <code>$</code>  <code>\\b</code>  <code>\\B</code>    <code>(?=p)</code> <code>(?!p)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th>匹配含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td>匹配字符串的开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td>匹配字符串的结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td>单词边界， 具体就是 <code>\\w</code> 与 <code>\\W</code> 之间的位置, 以及字符串的开始位置和结尾位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td>是 <code>/b</code> 之外的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?=P)</code></td>\n<td><code>p</code> 是一个模式， 这个正则表达式匹配的是<code>P</code> 之前的位置， 或者当前位置之后的字符要匹配正则表达式 <code>P</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?!P)</code></td>\n<td>这个与 <code>(?=P)</code> 意思相反， 是除了 <code>(?=P)</code> 之外的位置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"以及\"><a href=\"#以及\" class=\"headerlink\" title=\"^ 以及 $\"></a><code>^</code> 以及 <code>$</code></h4><p>用于匹配字符串开头或者字符串结尾的位置：</p>\n<p>如下例子：将字符的开头和结尾添加特定的字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &apos;hello&apos;;</span><br><span class=\"line\">let regex = /^|$/g;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">console.log(res); // &apos;*hello*&apos;</span><br></pre></td></tr></table></figure>\n<p>例如下面， 使用 <code>replace</code>  代替     <code>trim</code>  方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'  hell o   '</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/^\\s+|\\s+$/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"comment\">// hell o</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"b-以及-B\"><a href=\"#b-以及-B\" class=\"headerlink\" title=\"\\b 以及 \\B\"></a><code>\\b</code> 以及 <code>\\B</code></h4><p>使用 <code>\\b</code> 的作用是匹配单词边界之间的位置， 具体而言是 <code>\\w</code> 以及 <code>\\W</code>   之间的位置：</p>\n<p><code>\\w</code>: 匹配单词字符， 字符包括字母， 汉字， 下划线以及数字</p>\n<p>示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hel lo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/\\b/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// #hel# #lo#</span></span><br></pre></td></tr></table></figure>\n<p>使用 <code>\\B</code> 则和 <code>\\b</code>  相反， 匹配的位置是单词字符内的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/\\B/g</span>;</span><br><span class=\"line\">res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// h#e#l l#o;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"P-以及-P\"><a href=\"#P-以及-P\" class=\"headerlink\" title=\"(?=P) 以及 (?!P)\"></a><code>(?=P)</code> 以及 <code>(?!P)</code></h4><p>使用 <code>(?=P)</code> 用来匹配特定字符前的位置, <code>P</code> 是一个正则表达式；</p>\n<p>如下： 给单词中的 l 字符前面添加字符 <code>#</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?=l)/g</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'#'</span>);</span><br><span class=\"line\"><span class=\"comment\">// he#l#lo</span></span><br></pre></td></tr></table></figure>\n<p>给每一个单词字符前面添加一个字符 <code>*</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = /(?=\\w)/g;</span><br><span class=\"line\">str = &apos;hello&apos;;</span><br><span class=\"line\">let res = str.replace(regex, &apos;*&apos;);</span><br><span class=\"line\">// *h*e*l *l*o</span><br></pre></td></tr></table></figure>\n<p>使用 <code>(?!P)</code> 用来匹配除了匹配到的正则表达式 P 之前位置之外的其他位置：</p>\n<p>例如上面的例子， 我们使用 <code>(?!P)</code> 来代替 <code>(?=P)</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regex = <span class=\"regexp\">/(?!l)/</span>;</span><br><span class=\"line\">str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">'*'</span>);</span><br><span class=\"line\"><span class=\"comment\">// *h*ell*o*</span></span><br><span class=\"line\"><span class=\"comment\">// 当我们仅仅想匹配到单词内部的时候</span></span><br><span class=\"line\">regex = <span class=\"regexp\">/(?!l)(?!^)(?!$)/</span>;</span><br><span class=\"line\"><span class=\"comment\">// h*ell*o</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>(?!^)(?!$)</code> 是匹配除了单词开头和结尾的位置， 这里可以使用 <code>/B</code> 来进行代替;  </p>\n<p><code>regex = /(?!l)(\\B)/</code> </p>\n<p>如下， 给一个数字添加千位分隔符 ‘,’  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">\"12345678\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$))/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = str.replace(regex, <span class=\"string\">','</span>); <span class=\"comment\">// 12,345,678</span></span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<p>给一个数字添加一个千位字符的时候， 我们需要在字符尾部向前查找三位字符， 在三位字符前面的位置处添加分隔符 ‘ ,’;  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;<span class=\"number\">3</span>&#125;)+$ <span class=\"comment\">// 匹配结尾处向前 3 个或者多个 3 字符倍数的字符</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?=(\\d&#123;<span class=\"number\">3</span>&#125;)+$) <span class=\"comment\">// 匹配 3 个字符或者 3 个字符倍数的字符前面的位置</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?!^) <span class=\"comment\">// 匹配非开头的位置</span></span><br></pre></td></tr></table></figure>\n<p>如下， 给钱数添加人民币符号 <code>¥</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number = <span class=\"string\">'1234'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=^)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = number.replace(regex, <span class=\"string\">'¥ '</span>);</span><br><span class=\"line\"><span class=\"comment\">// ¥ 1234</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断一段字符中必须包含有数字：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'str123'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?=.*[0-9])^/g</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里的 ^ 表示开头， 这个正则表达式表示开头的位置， 也就是开头之后的字符需要匹配 .*[0-9]</span></span><br><span class=\"line\"><span class=\"comment\">// .*[0-9] 表示任意字符长度后面都需要一个数字， 也就是需要匹配到的字符串必须包含有数字</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>如下： 判断字符中不能全部为数字,  可以使用 <code>?!P</code> 进行判断</p>\n<p>判断字符中不能全部为数字的反义为全部为数字：那么判断全部为数字的正则表达式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断6位字符串中全部为数字</span><br><span class=\"line\">let regex = /(?=[0-9]&#123;6&#125;)/</span><br></pre></td></tr></table></figure>\n<p>因为 <code>?!</code> 和 <code>?=</code> 互为反义， 因此， 判断不能全部为数字的正则如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> regex = <span class=\"regexp\">/(?![0-9]&#123;6&#125;)/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// false</span></span><br><span class=\"line\">str = <span class=\"string\">'a23456'</span>;</span><br><span class=\"line\">regex.test(str); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"生活","date":"2017-08-26T11:29:06.000Z","_content":"\n####   圣经\n\n> `你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗”`\n>\n> ​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)\n\n前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。\n\n\n\n人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。\n\n每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。\n\n世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。\n\n脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。\n\n你太懒了，也太怂了，你能否可以克服自己？\n\n饮冰十年，难凉热血。\n\n不要想着战胜困难，先要战胜自己。","source":"_posts/生活.md","raw":"---\ntitle: 生活\ndate: 2017-08-26 19:29:06\ncategories: '生活'\n---\n\n####   圣经\n\n> `你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗”`\n>\n> ​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)\n\n前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。\n\n\n\n人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。\n\n每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。\n\n世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。\n\n脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。\n\n你太懒了，也太怂了，你能否可以克服自己？\n\n饮冰十年，难凉热血。\n\n不要想着战胜困难，先要战胜自己。","slug":"生活","published":1,"updated":"2019-04-04T08:01:04.851Z","_id":"cju23ohb00053s33g411x5tso","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"圣经\"><a href=\"#圣经\" class=\"headerlink\" title=\"圣经\"></a>圣经</h4><blockquote>\n<p><code>你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗”</code></p>\n<p>​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)</p>\n</blockquote>\n<p>前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。</p>\n<p>人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。</p>\n<p>每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。</p>\n<p>世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。</p>\n<p>脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。</p>\n<p>你太懒了，也太怂了，你能否可以克服自己？</p>\n<p>饮冰十年，难凉热血。</p>\n<p>不要想着战胜困难，先要战胜自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"圣经\"><a href=\"#圣经\" class=\"headerlink\" title=\"圣经\"></a>圣经</h4><blockquote>\n<p><code>你们看那天上的飞鸟，也不种，也不收，也不积蓄在仓里，你们的天父尚且养活它。你们不比飞鸟贵重得多吗”</code></p>\n<p>​                                                                                                                    (耶稣所讲的比喻，载于 马太福音 6:26)</p>\n</blockquote>\n<p>前两天心里面有些焦虑，就想到了这句话。这句话在知乎里面看到过，当时记了下来，现在想一想，这句话挺适合现在的我的心态的。这句话在圣经书上看到过，当时还比较小，只是那圣经书当作故事书来读的，一来那时候家里没有什么书，父亲是农民，也没有给我买过什么书，那本圣经看的挺有趣。二来，其实那本书还挺不错的，家里的圣经书是带插画的，从上帝创造天地开始到耶稣基督升天结束，大约五十几章，每一章都是一个故事，配有插图。故事讲的生动有趣。自己看的津津有味的。现在回头想想，圣经的故事连小孩子都能吸引，基督教成为三大宗教之一也不是没有道理的。</p>\n<p>人生哪里有这么多的挫折与逆境，不如意这十之八九，可与人言着不过二三，你自认为的困苦，只是一辈子的常态。</p>\n<p>每天保持向上的力量，努力工作，认真学习，不要想遥远的未来，未来如何，你怎么也想不到，不要幻想将来，将来不是来自于幻想，来自于每天一点一滴的积累。</p>\n<p>世上的工作无非苦与累，想要安逸，没有错，你是否为了安逸去努力。</p>\n<p>脚踏实地，才能一步步的走的更远，不要想将来，不要想过去，把自己每天的事情做好。</p>\n<p>你太懒了，也太怂了，你能否可以克服自己？</p>\n<p>饮冰十年，难凉热血。</p>\n<p>不要想着战胜困难，先要战胜自己。</p>\n"},{"title":"由目录搜索想到的多叉树向二叉树的转换","date":"2018-04-21T13:29:15.000Z","_content":"\n## 目录搜索\n\n在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：\n\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：\n\n```javascript\n{\n    children: [\n        children: [...],\n      \ttitle: ...,\n        ...\n    ],\n    title: ...,\n    ...\n}\n```\n\n这里 `title` 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 `children` 属性就不会存在。\n\n`html` 部分：\n\n```html\n<el-input v-model=\"searchContent\"></el-input>\n```\n\n`vue ` 部分\n\n```javascript\nexport default {\n  data () {\n      searchContent: \"\",\n      originMenus: \"\"\n  },\n  watch： {\n    \"route\": function () {\n  \t\t// 这里用来保存原始数组\n  \t\tthis.originMenus = Util.clone(this.menus);\n\t},\n    \"searchContent\": function (val) {\n        if (val.trim().length === 0) {\n        \tthis.menus = this.originMenus;\n        } else {\n            this.filterMenus(val, this.orginMenus);\n        }\n    },\n    methods: {\n      filterMenus(val, menus) {\n        const filterVal = val;\n        // 深拷贝对象\n        const filterMenus = Util.clone(menus);\n        const filterFn = theMenus => {\n          if (theMenus.children) {\n            let spliceIndex = 0;\n            // 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作\n            while (spliceIndex < theMenus.children.length) {\n              if (Array.isArray(theMenus.children[spliceIndex].children) &&theMenus.children[spliceIndex].children.length !== 0) {\n                // 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的\n                filterFn(theMenus.children[spliceIndex]);\n                // 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环\n                if (theMenus.children[spliceIndex].children.length !== 0) {\n                  spliceIndex++;\n                  continue;\n                }\n              }\n              // 这一部分， 如何实现有选择性的删除的？\n              // 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除\n              if (theMenus.children[spliceIndex] && theMenus.children[spliceIndex].title && theMenus.children[spliceIndex].title.indexOf(val) > -1) {\n                spliceIndex++;\n              } else {\n                theMenus.children.splice(spliceIndex, 1);\n              }\n            }\n          }\n        };\n        filterFn(filterMenus);\n        return filterMenus;\n      }\n    }\n  }\n}\n```\n\n在上面的代码中， 使用到了 `while` 循环以及一些递归的东西。\n\n## 由多叉树向二叉树的转换\n\n在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。\n\n### 二叉树\n\n二叉树是这样的一种树：\n\n> 二叉树是 n ( n >=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。\n\n#### 二叉树的特点\n\n每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。\n\n![](https://segmentfault.com/img/bVdgFE)\n\n二叉树节点的代码定义：\n\n```javascript\n node {\n   value: \"\",\n   // 左孩子\n   left: {\n     left : {\n       ...\n     },\n     right ： {\n       ...\n     }\n   },\n   // 右孩子\n   right: {\n     ...\n   }\n }\n```\n\n#### 二叉树的遍历\n\n对于二叉树而言， 存在三种遍历方式：\n\n1. 前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。\n2. 中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。\n3. 后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。\n\n下面是三种遍历的示意图：\n\n前序遍历：\n\n​\t\t\t    ![](https://segmentfault.com/img/bVdgIK)\n\n代码实现：\n\n```javascript\nfunction preOrder (node) {\n    if (node !== null) {\n      getNode(node);\n      preOrder(node.left);\n      preOrder(node.right);\n    }\n}\n```\n\n\n\n中序遍历：\n\n![](https://segmentfault.com/img/bVdgIM)\n\n代码实现：\n\n```javascript\nfunction inOrder (node) {\n  if (node !== null) {\n    // 先访问左子树\n    inOrder(node.left);\n    // 访问根节点\n    getNode(node);\n    // 访问右子树\n    inOrder(node.right);\n  }\n}\n```\n\n\n\n后序遍历：\n\n![](https://segmentfault.com/img/bVdgJs)\n\n代码实现：\n\n```javascript\nfunction postOrder (node) {\n  if (node !== null) {\n    // 先访问左节点\n    postOrder(node.left);\n    // 再访问右节点\n    postOrder(node.right);\n    getNode(node);\n  }\n}\n```\n\n\n\n#### 使用二叉树的目的\n\n上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？\n\n> 对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。\n\n> 对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  \n\n####  二叉查找树\n\n二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。\n\n如下使用数组建立一个二叉查找树：\n\n```javascript\n// 构建左节点\nfunction setLeftNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.left = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.left = {\n      value: array[len / 2]\n    };\n  }\n}\n// 构建右节点\nfunction setRightNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.right = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.right = {\n      value: array[len / 2]\n    };\n  }\n}\n// 将数组转化为二叉树\nfunction arrayToTree(array, node) {\n  const len = array.length;\n  array.sort();\n  node.value = (len % 2) !== 0 ? array[(len - 1) / 2] : array[len / 2];\n  const leftArr = array.slice(0, (len % 2) !== 0 ? (len - 1) / 2 : len / 2);\n  const rightArr = array.slice(((len) % 2) !== 0 ? (len + 1) / 2 : ((len / 2) + 1), array.length);\n  setLeftNode(leftArr, node);\n  setRightNode(rightArr, node);\n  (leftArr.length !== 0) && arrayToTree(leftArr, node.left);\n  (rightArr.length !== 0) && arrayToTree(rightArr, node.right);\n  return node;\n}\n```\n\n\n\n```javascript\nconst arr = [1, 9, 2, 6, 3, 4, 7, 8];\nlet tree = {};\nconsole.log(arrayToTree(arr, tree));\n```\n\n最终结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png)\n\n#### 多叉树\n\n如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：\n\n例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：\n\n> 多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。\n\n转化示意图如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n转化代码：\n\n```javascript\nconst treeRight = (tree, fatherChild) => {\n  if (fatherChild && fatherChild.length !== 0) {\n    fatherChild.splice(0, 1);\n    tree.right = fatherChild[0];\n    treeLeft(tree.right, fatherChild);\n    treeRight(tree.right, fatherChild);\n  }\n};\nconst treeLeft = (tree) => {\n  if (tree && tree.children) {\n    tree.left = tree.children[0];\n    treeLeft(tree.left);\n    treeRight(tree.left, tree.children);\n  }\n};\n```\n\n","source":"_posts/由目录搜索想到的多叉树向二叉树的转换.md","raw":"---\ntitle: 由目录搜索想到的多叉树向二叉树的转换\ndate: 2018-04-21 21:29:15\ntags: 二叉树\n---\n\n## 目录搜索\n\n在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：\n\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：\n\n```javascript\n{\n    children: [\n        children: [...],\n      \ttitle: ...,\n        ...\n    ],\n    title: ...,\n    ...\n}\n```\n\n这里 `title` 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 `children` 属性就不会存在。\n\n`html` 部分：\n\n```html\n<el-input v-model=\"searchContent\"></el-input>\n```\n\n`vue ` 部分\n\n```javascript\nexport default {\n  data () {\n      searchContent: \"\",\n      originMenus: \"\"\n  },\n  watch： {\n    \"route\": function () {\n  \t\t// 这里用来保存原始数组\n  \t\tthis.originMenus = Util.clone(this.menus);\n\t},\n    \"searchContent\": function (val) {\n        if (val.trim().length === 0) {\n        \tthis.menus = this.originMenus;\n        } else {\n            this.filterMenus(val, this.orginMenus);\n        }\n    },\n    methods: {\n      filterMenus(val, menus) {\n        const filterVal = val;\n        // 深拷贝对象\n        const filterMenus = Util.clone(menus);\n        const filterFn = theMenus => {\n          if (theMenus.children) {\n            let spliceIndex = 0;\n            // 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作\n            while (spliceIndex < theMenus.children.length) {\n              if (Array.isArray(theMenus.children[spliceIndex].children) &&theMenus.children[spliceIndex].children.length !== 0) {\n                // 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的\n                filterFn(theMenus.children[spliceIndex]);\n                // 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环\n                if (theMenus.children[spliceIndex].children.length !== 0) {\n                  spliceIndex++;\n                  continue;\n                }\n              }\n              // 这一部分， 如何实现有选择性的删除的？\n              // 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除\n              if (theMenus.children[spliceIndex] && theMenus.children[spliceIndex].title && theMenus.children[spliceIndex].title.indexOf(val) > -1) {\n                spliceIndex++;\n              } else {\n                theMenus.children.splice(spliceIndex, 1);\n              }\n            }\n          }\n        };\n        filterFn(filterMenus);\n        return filterMenus;\n      }\n    }\n  }\n}\n```\n\n在上面的代码中， 使用到了 `while` 循环以及一些递归的东西。\n\n## 由多叉树向二叉树的转换\n\n在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。\n\n### 二叉树\n\n二叉树是这样的一种树：\n\n> 二叉树是 n ( n >=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。\n\n#### 二叉树的特点\n\n每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。\n\n![](https://segmentfault.com/img/bVdgFE)\n\n二叉树节点的代码定义：\n\n```javascript\n node {\n   value: \"\",\n   // 左孩子\n   left: {\n     left : {\n       ...\n     },\n     right ： {\n       ...\n     }\n   },\n   // 右孩子\n   right: {\n     ...\n   }\n }\n```\n\n#### 二叉树的遍历\n\n对于二叉树而言， 存在三种遍历方式：\n\n1. 前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。\n2. 中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。\n3. 后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。\n\n下面是三种遍历的示意图：\n\n前序遍历：\n\n​\t\t\t    ![](https://segmentfault.com/img/bVdgIK)\n\n代码实现：\n\n```javascript\nfunction preOrder (node) {\n    if (node !== null) {\n      getNode(node);\n      preOrder(node.left);\n      preOrder(node.right);\n    }\n}\n```\n\n\n\n中序遍历：\n\n![](https://segmentfault.com/img/bVdgIM)\n\n代码实现：\n\n```javascript\nfunction inOrder (node) {\n  if (node !== null) {\n    // 先访问左子树\n    inOrder(node.left);\n    // 访问根节点\n    getNode(node);\n    // 访问右子树\n    inOrder(node.right);\n  }\n}\n```\n\n\n\n后序遍历：\n\n![](https://segmentfault.com/img/bVdgJs)\n\n代码实现：\n\n```javascript\nfunction postOrder (node) {\n  if (node !== null) {\n    // 先访问左节点\n    postOrder(node.left);\n    // 再访问右节点\n    postOrder(node.right);\n    getNode(node);\n  }\n}\n```\n\n\n\n#### 使用二叉树的目的\n\n上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？\n\n> 对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。\n\n> 对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  \n\n####  二叉查找树\n\n二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。\n\n如下使用数组建立一个二叉查找树：\n\n```javascript\n// 构建左节点\nfunction setLeftNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.left = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.left = {\n      value: array[len / 2]\n    };\n  }\n}\n// 构建右节点\nfunction setRightNode(array, node) {\n  const len = array.length;\n  if (len % 2 !== 0) {\n    if (array[(len - 1) / 2]) {\n      node.right = {\n        value: array[(len - 1) / 2]\n      };\n    }\n    return;\n  }\n  if (array[len / 2]) {\n    node.right = {\n      value: array[len / 2]\n    };\n  }\n}\n// 将数组转化为二叉树\nfunction arrayToTree(array, node) {\n  const len = array.length;\n  array.sort();\n  node.value = (len % 2) !== 0 ? array[(len - 1) / 2] : array[len / 2];\n  const leftArr = array.slice(0, (len % 2) !== 0 ? (len - 1) / 2 : len / 2);\n  const rightArr = array.slice(((len) % 2) !== 0 ? (len + 1) / 2 : ((len / 2) + 1), array.length);\n  setLeftNode(leftArr, node);\n  setRightNode(rightArr, node);\n  (leftArr.length !== 0) && arrayToTree(leftArr, node.left);\n  (rightArr.length !== 0) && arrayToTree(rightArr, node.right);\n  return node;\n}\n```\n\n\n\n```javascript\nconst arr = [1, 9, 2, 6, 3, 4, 7, 8];\nlet tree = {};\nconsole.log(arrayToTree(arr, tree));\n```\n\n最终结果如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png)\n\n#### 多叉树\n\n如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：\n\n例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：\n\n> 多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。\n\n转化示意图如下：\n\n![](http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n转化代码：\n\n```javascript\nconst treeRight = (tree, fatherChild) => {\n  if (fatherChild && fatherChild.length !== 0) {\n    fatherChild.splice(0, 1);\n    tree.right = fatherChild[0];\n    treeLeft(tree.right, fatherChild);\n    treeRight(tree.right, fatherChild);\n  }\n};\nconst treeLeft = (tree) => {\n  if (tree && tree.children) {\n    tree.left = tree.children[0];\n    treeLeft(tree.left);\n    treeRight(tree.left, tree.children);\n  }\n};\n```\n\n","slug":"由目录搜索想到的多叉树向二叉树的转换","published":1,"updated":"2018-06-18T09:38:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohb20055s33gvobadflw","content":"<h2 id=\"目录搜索\"><a href=\"#目录搜索\" class=\"headerlink\" title=\"目录搜索\"></a>目录搜索</h2><p>在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：</p>\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\"><br>your browser does not support the video tag<br></video>\n\n<p>如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        children: [...],</span><br><span class=\"line\">      \ttitle: ...,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    title: ...,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>title</code> 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 <code>children</code> 属性就不会存在。</p>\n<p><code>html</code> 部分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>vue</code> 部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">      searchContent: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      originMenus: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch： &#123;</span><br><span class=\"line\">    <span class=\"string\">\"route\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">// 这里用来保存原始数组</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.originMenus = Util.clone(<span class=\"keyword\">this</span>.menus);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"searchContent\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.trim().length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.originMenus;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.filterMenus(val, <span class=\"keyword\">this</span>.orginMenus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      filterMenus(val, menus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterVal = val;</span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterMenus = Util.clone(menus);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterFn = <span class=\"function\"><span class=\"params\">theMenus</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (theMenus.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> spliceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (spliceIndex &lt; theMenus.children.length) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(theMenus.children[spliceIndex].children) &amp;&amp;theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的</span></span><br><span class=\"line\">                filterFn(theMenus.children[spliceIndex]);</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  spliceIndex++;</span><br><span class=\"line\">                  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 这一部分， 如何实现有选择性的删除的？</span></span><br><span class=\"line\">              <span class=\"comment\">// 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (theMenus.children[spliceIndex] &amp;&amp; theMenus.children[spliceIndex].title &amp;&amp; theMenus.children[spliceIndex].title.indexOf(val) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                spliceIndex++;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                theMenus.children.splice(spliceIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        filterFn(filterMenus);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterMenus;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 使用到了 <code>while</code> 循环以及一些递归的东西。</p>\n<h2 id=\"由多叉树向二叉树的转换\"><a href=\"#由多叉树向二叉树的转换\" class=\"headerlink\" title=\"由多叉树向二叉树的转换\"></a>由多叉树向二叉树的转换</h2><p>在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><p>二叉树是这样的一种树：</p>\n<blockquote>\n<p>二叉树是 n ( n &gt;=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。</p>\n</blockquote>\n<h4 id=\"二叉树的特点\"><a href=\"#二叉树的特点\" class=\"headerlink\" title=\"二叉树的特点\"></a>二叉树的特点</h4><p>每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。</p>\n<p><img src=\"https://segmentfault.com/img/bVdgFE\" alt=\"\"></p>\n<p>二叉树节点的代码定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 左孩子</span></span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    left : &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right ： &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 右孩子</span></span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h4><p>对于二叉树而言， 存在三种遍历方式：</p>\n<ol>\n<li>前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。</li>\n<li>中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。</li>\n<li>后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。</li>\n</ol>\n<p>下面是三种遍历的示意图：</p>\n<p>前序遍历：</p>\n<p>​                <img src=\"https://segmentfault.com/img/bVdgIK\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      getNode(node);</span><br><span class=\"line\">      preOrder(node.left);</span><br><span class=\"line\">      preOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgIM\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左子树</span></span><br><span class=\"line\">    inOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点</span></span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">    <span class=\"comment\">// 访问右子树</span></span><br><span class=\"line\">    inOrder(node.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgJs\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左节点</span></span><br><span class=\"line\">    postOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 再访问右节点</span></span><br><span class=\"line\">    postOrder(node.right);</span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用二叉树的目的\"><a href=\"#使用二叉树的目的\" class=\"headerlink\" title=\"使用二叉树的目的\"></a>使用二叉树的目的</h4><p>上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？</p>\n<blockquote>\n<p>对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。</p>\n</blockquote>\n<blockquote>\n<p>对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  </p>\n</blockquote>\n<h4 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h4><p>二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。</p>\n<p>如下使用数组建立一个二叉查找树：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建左节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.left = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.left = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 构建右节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.right = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.right = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将数组转化为二叉树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToTree</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  array.sort();</span><br><span class=\"line\">  node.value = (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] : array[len / <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftArr = array.slice(<span class=\"number\">0</span>, (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span> : len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightArr = array.slice(((len) % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len + <span class=\"number\">1</span>) / <span class=\"number\">2</span> : ((len / <span class=\"number\">2</span>) + <span class=\"number\">1</span>), array.length);</span><br><span class=\"line\">  setLeftNode(leftArr, node);</span><br><span class=\"line\">  setRightNode(rightArr, node);</span><br><span class=\"line\">  (leftArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(leftArr, node.left);</span><br><span class=\"line\">  (rightArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(rightArr, node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayToTree(arr, tree));</span><br></pre></td></tr></table></figure>\n<p>最终结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<h4 id=\"多叉树\"><a href=\"#多叉树\" class=\"headerlink\" title=\"多叉树\"></a>多叉树</h4><p>如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：</p>\n<p>例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：</p>\n<blockquote>\n<p>多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。</p>\n</blockquote>\n<p>转化示意图如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>转化代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeRight = <span class=\"function\">(<span class=\"params\">tree, fatherChild</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fatherChild &amp;&amp; fatherChild.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    fatherChild.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree.right = fatherChild[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.right, fatherChild);</span><br><span class=\"line\">    treeRight(tree.right, fatherChild);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> treeLeft = <span class=\"function\">(<span class=\"params\">tree</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree &amp;&amp; tree.children) &#123;</span><br><span class=\"line\">    tree.left = tree.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.left);</span><br><span class=\"line\">    treeRight(tree.left, tree.children);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目录搜索\"><a href=\"#目录搜索\" class=\"headerlink\" title=\"目录搜索\"></a>目录搜索</h2><p>在上个星期一轮迭代之后， 自己手上暂时还没有工作要做，在上一期迭代中， 需求表示目录太长了，用户不好操作，虽然这个问题通过添加滚动条解决了，但是我想着加一个搜索框实现对于目录的搜索， 效果如下：</p>\n<video src=\"http://ov3b9jngp.bkt.clouddn.com/menus.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\"><br>your browser does not support the video tag<br></video>\n\n<p>如上面所示我们想要进行一个对于目录的搜索，其中目录部分的结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        children: [...],</span><br><span class=\"line\">      \ttitle: ...,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    title: ...,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>title</code> 表示目录的名字， children 表示当前目录下的子目录，如果当前目录没有子目录， 那么 <code>children</code> 属性就不会存在。</p>\n<p><code>html</code> 部分：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>vue</code> 部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">      searchContent: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      originMenus: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch： &#123;</span><br><span class=\"line\">    <span class=\"string\">\"route\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  \t\t<span class=\"comment\">// 这里用来保存原始数组</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">this</span>.originMenus = Util.clone(<span class=\"keyword\">this</span>.menus);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"searchContent\"</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val.trim().length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.menus = <span class=\"keyword\">this</span>.originMenus;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.filterMenus(val, <span class=\"keyword\">this</span>.orginMenus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      filterMenus(val, menus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterVal = val;</span><br><span class=\"line\">        <span class=\"comment\">// 深拷贝对象</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterMenus = Util.clone(menus);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filterFn = <span class=\"function\"><span class=\"params\">theMenus</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (theMenus.children) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> spliceIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 当我们想要对于一个数组进行条件判断并且删除数组中的元素的时候， 可以使用 Array.splice 进行操作</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (spliceIndex &lt; theMenus.children.length) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(theMenus.children[spliceIndex].children) &amp;&amp;theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里使用递归， 因为对于children 下的各个目录， 判断条件也是基本上一样的</span></span><br><span class=\"line\">                filterFn(theMenus.children[spliceIndex]);</span><br><span class=\"line\">                <span class=\"comment\">// 如果当前目录下存在符合条件的， spliceIndex ++ 使用 continue 跳过当前的 while 循环</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (theMenus.children[spliceIndex].children.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  spliceIndex++;</span><br><span class=\"line\">                  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 这一部分， 如何实现有选择性的删除的？</span></span><br><span class=\"line\">              <span class=\"comment\">// 使用 splice 用于数组的删除，如果满足某一个条件， splice 跳过条件删除</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (theMenus.children[spliceIndex] &amp;&amp; theMenus.children[spliceIndex].title &amp;&amp; theMenus.children[spliceIndex].title.indexOf(val) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                spliceIndex++;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                theMenus.children.splice(spliceIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        filterFn(filterMenus);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterMenus;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 使用到了 <code>while</code> 循环以及一些递归的东西。</p>\n<h2 id=\"由多叉树向二叉树的转换\"><a href=\"#由多叉树向二叉树的转换\" class=\"headerlink\" title=\"由多叉树向二叉树的转换\"></a>由多叉树向二叉树的转换</h2><p>在上面的目录搜索中，其实自己想要将目录搜索转化为二叉树进行搜索的， 只不过后面发现没有必要，但是自己也是做了一个多叉树转化二叉树的函数。</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><p>二叉树是这样的一种树：</p>\n<blockquote>\n<p>二叉树是 n ( n &gt;=0 ) 个结点的有限集合， 该集合或者为空集( 空二叉树 ), 或者有一个根节点和两棵互不相交的， 分别称为根节点和左子树和右子树的二叉树组成。</p>\n</blockquote>\n<h4 id=\"二叉树的特点\"><a href=\"#二叉树的特点\" class=\"headerlink\" title=\"二叉树的特点\"></a>二叉树的特点</h4><p>每一个节点最多有两棵子树， 二叉树中每一个节点都是一个对象， 对于一个完整的二叉树而言， 每一个二叉树节点存在三个指针， 分别指向父母， 左孩子以及右孩子的指针， 每一个节点都是通过指针相互连接的， 连接指针的关系都是父子关系。</p>\n<p><img src=\"https://segmentfault.com/img/bVdgFE\" alt=\"\"></p>\n<p>二叉树节点的代码定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  value: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 左孩子</span></span><br><span class=\"line\">  left: &#123;</span><br><span class=\"line\">    left : &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    right ： &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 右孩子</span></span><br><span class=\"line\">  right: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h4><p>对于二叉树而言， 存在三种遍历方式：</p>\n<ol>\n<li>前序遍历： 首先访问根节点， 然后遍历左子树， 最后遍历右子树。</li>\n<li>中序遍历：首先遍历左子树， 然后访问根节点，最后遍历右子树。</li>\n<li>后序遍历：首先遍历左子树， 然后遍历右子树， 最后访问根节点。</li>\n</ol>\n<p>下面是三种遍历的示意图：</p>\n<p>前序遍历：</p>\n<p>​                <img src=\"https://segmentfault.com/img/bVdgIK\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      getNode(node);</span><br><span class=\"line\">      preOrder(node.left);</span><br><span class=\"line\">      preOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgIM\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左子树</span></span><br><span class=\"line\">    inOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 访问根节点</span></span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">    <span class=\"comment\">// 访问右子树</span></span><br><span class=\"line\">    inOrder(node.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历：</p>\n<p><img src=\"https://segmentfault.com/img/bVdgJs\" alt=\"\"></p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postOrder</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先访问左节点</span></span><br><span class=\"line\">    postOrder(node.left);</span><br><span class=\"line\">    <span class=\"comment\">// 再访问右节点</span></span><br><span class=\"line\">    postOrder(node.right);</span><br><span class=\"line\">    getNode(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用二叉树的目的\"><a href=\"#使用二叉树的目的\" class=\"headerlink\" title=\"使用二叉树的目的\"></a>使用二叉树的目的</h4><p>上面说了这么多， 那么我们为什么构建二叉树呢？二叉树相对于其它的数据结构而言具有什么优点呢？</p>\n<blockquote>\n<p>对于数组而言， 实现数组的搜索比较方便， 可以直接使用下标访问到， 但是如果对于数组进行删除和插入就比较麻烦了， 而对于链表而言， 插入和删除比较简单， 但是访问却相对来说慢了一些。</p>\n</blockquote>\n<blockquote>\n<p>对于有序数组而言， 对于有序数组在查找的时候有较高的效率。而无序链表在插入的时候具有较高的灵敏性。而对于二叉树而言， 二叉树综合了上面两种数据结构的优点。  </p>\n</blockquote>\n<h4 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h4><p>二叉查找数用来寻找到一组数组中的值的大小是非常有用的，因为二叉查找树在定义的时候定义到节点的左节点的值要小于右节点的值。</p>\n<p>如下使用数组建立一个二叉查找树：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建左节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLeftNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.left = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.left = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 构建右节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setRightNode</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      node.right = &#123;</span><br><span class=\"line\">        value: array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>]</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array[len / <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">    node.right = &#123;</span><br><span class=\"line\">      value: array[len / <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将数组转化为二叉树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToTree</span>(<span class=\"params\">array, node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length;</span><br><span class=\"line\">  array.sort();</span><br><span class=\"line\">  node.value = (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? array[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>] : array[len / <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftArr = array.slice(<span class=\"number\">0</span>, (len % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len - <span class=\"number\">1</span>) / <span class=\"number\">2</span> : len / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightArr = array.slice(((len) % <span class=\"number\">2</span>) !== <span class=\"number\">0</span> ? (len + <span class=\"number\">1</span>) / <span class=\"number\">2</span> : ((len / <span class=\"number\">2</span>) + <span class=\"number\">1</span>), array.length);</span><br><span class=\"line\">  setLeftNode(leftArr, node);</span><br><span class=\"line\">  setRightNode(rightArr, node);</span><br><span class=\"line\">  (leftArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(leftArr, node.left);</span><br><span class=\"line\">  (rightArr.length !== <span class=\"number\">0</span>) &amp;&amp; arrayToTree(rightArr, node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayToTree(arr, tree));</span><br></pre></td></tr></table></figure>\n<p>最终结果如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<h4 id=\"多叉树\"><a href=\"#多叉树\" class=\"headerlink\" title=\"多叉树\"></a>多叉树</h4><p>如果一个节点下面有多个节点， 那么可以称这样的数据结构为多叉树,这里可以类比二叉树中的两个子节点：</p>\n<p>例如上面中的目录部分就是一个多叉树，根目录下面有多个子目录， 子目录下面还有可能有别的目录，如果将这样的多叉树转换为二叉树呢？只要记住一个转换原则就可以了：</p>\n<blockquote>\n<p>多叉树向二叉树转换的原则是： 左孩子，右兄弟。也就是说，一颗转换完成的二叉树的任意一个节点的左节点都是在转换之前的多叉树中的子节点， 任意一个节点的右节点都是当前节点在转换之前的多叉树中的兄弟节点。</p>\n</blockquote>\n<p>转化示意图如下：</p>\n<p><img src=\"http://ov3b9jngp.bkt.clouddn.com/%E5%A4%9A%E5%8F%89%E6%A0%91%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>转化代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeRight = <span class=\"function\">(<span class=\"params\">tree, fatherChild</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fatherChild &amp;&amp; fatherChild.length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    fatherChild.splice(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree.right = fatherChild[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.right, fatherChild);</span><br><span class=\"line\">    treeRight(tree.right, fatherChild);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> treeLeft = <span class=\"function\">(<span class=\"params\">tree</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree &amp;&amp; tree.children) &#123;</span><br><span class=\"line\">    tree.left = tree.children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    treeLeft(tree.left);</span><br><span class=\"line\">    treeRight(tree.left, tree.children);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"移动端touch事件","date":"2017-08-19T00:40:01.000Z","_content":"\n####  touch事件\n\n当我们手指触摸屏幕的时候，touch事件有这几个事件:\n\ntouchstart : 当手指触摸手机屏幕的时候触发  \n\ntouchmove : 当手指当手机屏幕上移动的时候触发  \n\ntouchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 `touchend` 中定义调用。\n\ntouchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作\n\n<!--more-->\n\n#### touch 事件对象\n\ntouch事件对象返回了下面几个属性:  \n\ntouches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象\n\ntargetTouches: 当前对象上所有触摸点的集合  \n\nchangedTouched: 自从变化之后的所有touch对象数组  \n\n##### touch 事件返回的对象中的属性集合\n\n返回的触摸点对象如下：\n\n```\nTouchList {\nlength: 1\n0: Touch\nclientX: 57.36600112915039\nclientY: 31.8700008392334\nforce: 1\nidentifier: 0\npageX: 57.36600112915039\npageY: 31.8700008392334\nradiusX: 36.65040588378906\nradiusY: 36.65040588378906\nrotationAngle: 0\nscreenX: 547\nscreenY: 167\ntarget: div#demo\n__proto__: Touch\n__proto__: TouchList\n```\n\n各个触摸点的属性解释如下:  \n\nclientX，clientY: 触摸点在视口中的距离  \n\npageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  \n\nscreenX, screenY: 触摸点距离屏幕的距离  \n\ntarget: touch事件作用到的事件对象  \n\n####  在uc浏览器下遇到的问题\n\n使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:\n\n解决办法: 在touchmove的时候阻止默认行为，~~监听touchcancel 替代 touchend事件:~~\n\n```\ntouch(event) {\n  switch (event.type) {\n    case 'touchstart':\n    \t....\n    \tbreak;\n    case 'touchmove':\n    \t....\n    \tevent.preventDefault();\n    \tbreak;\n    case 'touchend':\n    \t....\n    \tbreak;\n  } \n}\n```\n\n情况并不像我之前想的那样，`touchcancel` 的行为并不是类似于 `touchend` \n\n#### touchcancel 事件\n\n`touchcancel` 从字面意思上来讲，是取消`touch` 操作的意思，在 MDN 上是这样解释的: \n\n>The `touchcancel` event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\\n>\n>`touchcancel` 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）\n\n我是这样理解的： `touchcancel` 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 `touchend` 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，`touchcancel` 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 `touchend` 事件，从`touchend` 事件中的方法不会被执行。\n\n当手指在按钮上下滑动的时候，`touchcancel` 事件是不会被调用的。可以把`touchcancel` 事件视为防止误操作事件。","source":"_posts/移动端touch事件.md","raw":"---\ntitle: 移动端touch事件\ndate: 2017-08-19 08:40:01\ntags: 移动端touch事件\n---\n\n####  touch事件\n\n当我们手指触摸屏幕的时候，touch事件有这几个事件:\n\ntouchstart : 当手指触摸手机屏幕的时候触发  \n\ntouchmove : 当手指当手机屏幕上移动的时候触发  \n\ntouchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 `touchend` 中定义调用。\n\ntouchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作\n\n<!--more-->\n\n#### touch 事件对象\n\ntouch事件对象返回了下面几个属性:  \n\ntouches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象\n\ntargetTouches: 当前对象上所有触摸点的集合  \n\nchangedTouched: 自从变化之后的所有touch对象数组  \n\n##### touch 事件返回的对象中的属性集合\n\n返回的触摸点对象如下：\n\n```\nTouchList {\nlength: 1\n0: Touch\nclientX: 57.36600112915039\nclientY: 31.8700008392334\nforce: 1\nidentifier: 0\npageX: 57.36600112915039\npageY: 31.8700008392334\nradiusX: 36.65040588378906\nradiusY: 36.65040588378906\nrotationAngle: 0\nscreenX: 547\nscreenY: 167\ntarget: div#demo\n__proto__: Touch\n__proto__: TouchList\n```\n\n各个触摸点的属性解释如下:  \n\nclientX，clientY: 触摸点在视口中的距离  \n\npageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  \n\nscreenX, screenY: 触摸点距离屏幕的距离  \n\ntarget: touch事件作用到的事件对象  \n\n####  在uc浏览器下遇到的问题\n\n使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:\n\n解决办法: 在touchmove的时候阻止默认行为，~~监听touchcancel 替代 touchend事件:~~\n\n```\ntouch(event) {\n  switch (event.type) {\n    case 'touchstart':\n    \t....\n    \tbreak;\n    case 'touchmove':\n    \t....\n    \tevent.preventDefault();\n    \tbreak;\n    case 'touchend':\n    \t....\n    \tbreak;\n  } \n}\n```\n\n情况并不像我之前想的那样，`touchcancel` 的行为并不是类似于 `touchend` \n\n#### touchcancel 事件\n\n`touchcancel` 从字面意思上来讲，是取消`touch` 操作的意思，在 MDN 上是这样解释的: \n\n>The `touchcancel` event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\\n>\n>`touchcancel` 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）\n\n我是这样理解的： `touchcancel` 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 `touchend` 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，`touchcancel` 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 `touchend` 事件，从`touchend` 事件中的方法不会被执行。\n\n当手指在按钮上下滑动的时候，`touchcancel` 事件是不会被调用的。可以把`touchcancel` 事件视为防止误操作事件。","slug":"移动端touch事件","published":1,"updated":"2017-08-20T08:34:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohb5005as33gyc3isxwr","content":"<h4 id=\"touch事件\"><a href=\"#touch事件\" class=\"headerlink\" title=\"touch事件\"></a>touch事件</h4><p>当我们手指触摸屏幕的时候，touch事件有这几个事件:</p>\n<p>touchstart : 当手指触摸手机屏幕的时候触发  </p>\n<p>touchmove : 当手指当手机屏幕上移动的时候触发  </p>\n<p>touchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 <code>touchend</code> 中定义调用。</p>\n<p>touchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作</p>\n<a id=\"more\"></a>\n<h4 id=\"touch-事件对象\"><a href=\"#touch-事件对象\" class=\"headerlink\" title=\"touch 事件对象\"></a>touch 事件对象</h4><p>touch事件对象返回了下面几个属性:  </p>\n<p>touches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象</p>\n<p>targetTouches: 当前对象上所有触摸点的集合  </p>\n<p>changedTouched: 自从变化之后的所有touch对象数组  </p>\n<h5 id=\"touch-事件返回的对象中的属性集合\"><a href=\"#touch-事件返回的对象中的属性集合\" class=\"headerlink\" title=\"touch 事件返回的对象中的属性集合\"></a>touch 事件返回的对象中的属性集合</h5><p>返回的触摸点对象如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchList &#123;</span><br><span class=\"line\">length: 1</span><br><span class=\"line\">0: Touch</span><br><span class=\"line\">clientX: 57.36600112915039</span><br><span class=\"line\">clientY: 31.8700008392334</span><br><span class=\"line\">force: 1</span><br><span class=\"line\">identifier: 0</span><br><span class=\"line\">pageX: 57.36600112915039</span><br><span class=\"line\">pageY: 31.8700008392334</span><br><span class=\"line\">radiusX: 36.65040588378906</span><br><span class=\"line\">radiusY: 36.65040588378906</span><br><span class=\"line\">rotationAngle: 0</span><br><span class=\"line\">screenX: 547</span><br><span class=\"line\">screenY: 167</span><br><span class=\"line\">target: div#demo</span><br><span class=\"line\">__proto__: Touch</span><br><span class=\"line\">__proto__: TouchList</span><br></pre></td></tr></table></figure>\n<p>各个触摸点的属性解释如下:  </p>\n<p>clientX，clientY: 触摸点在视口中的距离  </p>\n<p>pageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  </p>\n<p>screenX, screenY: 触摸点距离屏幕的距离  </p>\n<p>target: touch事件作用到的事件对象  </p>\n<h4 id=\"在uc浏览器下遇到的问题\"><a href=\"#在uc浏览器下遇到的问题\" class=\"headerlink\" title=\"在uc浏览器下遇到的问题\"></a>在uc浏览器下遇到的问题</h4><p>使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:</p>\n<p>解决办法: 在touchmove的时候阻止默认行为，<del>监听touchcancel 替代 touchend事件:</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch(event) &#123;</span><br><span class=\"line\">  switch (event.type) &#123;</span><br><span class=\"line\">    case &apos;touchstart&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchmove&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tevent.preventDefault();</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchend&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况并不像我之前想的那样，<code>touchcancel</code> 的行为并不是类似于 <code>touchend</code> </p>\n<h4 id=\"touchcancel-事件\"><a href=\"#touchcancel-事件\" class=\"headerlink\" title=\"touchcancel 事件\"></a>touchcancel 事件</h4><p><code>touchcancel</code> 从字面意思上来讲，是取消<code>touch</code> 操作的意思，在 MDN 上是这样解释的: </p>\n<blockquote>\n<p>The <code>touchcancel</code> event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\</p>\n<p><code>touchcancel</code> 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）</p>\n</blockquote>\n<p>我是这样理解的： <code>touchcancel</code> 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 <code>touchend</code> 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，<code>touchcancel</code> 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 <code>touchend</code> 事件，从<code>touchend</code> 事件中的方法不会被执行。</p>\n<p>当手指在按钮上下滑动的时候，<code>touchcancel</code> 事件是不会被调用的。可以把<code>touchcancel</code> 事件视为防止误操作事件。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"touch事件\"><a href=\"#touch事件\" class=\"headerlink\" title=\"touch事件\"></a>touch事件</h4><p>当我们手指触摸屏幕的时候，touch事件有这几个事件:</p>\n<p>touchstart : 当手指触摸手机屏幕的时候触发  </p>\n<p>touchmove : 当手指当手机屏幕上移动的时候触发  </p>\n<p>touchend: 当手指移开手机屏幕的时候触发  ，事件方法应该在 <code>touchend</code> 中定义调用。</p>\n<p>touchcancel: 这个事件在 uc 浏览器上，当我们在页面上进行左右滑动的时候会被触发  ,用于防止误操作</p>","more":"<h4 id=\"touch-事件对象\"><a href=\"#touch-事件对象\" class=\"headerlink\" title=\"touch 事件对象\"></a>touch 事件对象</h4><p>touch事件对象返回了下面几个属性:  </p>\n<p>touches: 当前屏幕上所有触摸点的集合 ,当只有一个触摸点的时候，使用 touches[0] 获得触摸对象</p>\n<p>targetTouches: 当前对象上所有触摸点的集合  </p>\n<p>changedTouched: 自从变化之后的所有touch对象数组  </p>\n<h5 id=\"touch-事件返回的对象中的属性集合\"><a href=\"#touch-事件返回的对象中的属性集合\" class=\"headerlink\" title=\"touch 事件返回的对象中的属性集合\"></a>touch 事件返回的对象中的属性集合</h5><p>返回的触摸点对象如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchList &#123;</span><br><span class=\"line\">length: 1</span><br><span class=\"line\">0: Touch</span><br><span class=\"line\">clientX: 57.36600112915039</span><br><span class=\"line\">clientY: 31.8700008392334</span><br><span class=\"line\">force: 1</span><br><span class=\"line\">identifier: 0</span><br><span class=\"line\">pageX: 57.36600112915039</span><br><span class=\"line\">pageY: 31.8700008392334</span><br><span class=\"line\">radiusX: 36.65040588378906</span><br><span class=\"line\">radiusY: 36.65040588378906</span><br><span class=\"line\">rotationAngle: 0</span><br><span class=\"line\">screenX: 547</span><br><span class=\"line\">screenY: 167</span><br><span class=\"line\">target: div#demo</span><br><span class=\"line\">__proto__: Touch</span><br><span class=\"line\">__proto__: TouchList</span><br></pre></td></tr></table></figure>\n<p>各个触摸点的属性解释如下:  </p>\n<p>clientX，clientY: 触摸点在视口中的距离  </p>\n<p>pageX, pageY:触摸点在html文档中的距离，当html文档的宽度超过视口的宽度的时候， pageX = clientX + 超出的那一部分距离  </p>\n<p>screenX, screenY: 触摸点距离屏幕的距离  </p>\n<p>target: touch事件作用到的事件对象  </p>\n<h4 id=\"在uc浏览器下遇到的问题\"><a href=\"#在uc浏览器下遇到的问题\" class=\"headerlink\" title=\"在uc浏览器下遇到的问题\"></a>在uc浏览器下遇到的问题</h4><p>使用uc浏览器的时候遇到了一个问题，我想要做导航栏随着手指移动而滑动的效果，在android 系统上chrome浏览器表现正常，但是在uc浏览器上出现bug, 手指滑动屏幕的时候导航栏不滑动，当手指离开的时候，导航栏出现滑动效果，貌似滑动效果只被触发了一次，touchend 事件消失，被touchcancel替代:</p>\n<p>解决办法: 在touchmove的时候阻止默认行为，<del>监听touchcancel 替代 touchend事件:</del></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch(event) &#123;</span><br><span class=\"line\">  switch (event.type) &#123;</span><br><span class=\"line\">    case &apos;touchstart&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchmove&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tevent.preventDefault();</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">    case &apos;touchend&apos;:</span><br><span class=\"line\">    \t....</span><br><span class=\"line\">    \tbreak;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>情况并不像我之前想的那样，<code>touchcancel</code> 的行为并不是类似于 <code>touchend</code> </p>\n<h4 id=\"touchcancel-事件\"><a href=\"#touchcancel-事件\" class=\"headerlink\" title=\"touchcancel 事件\"></a>touchcancel 事件</h4><p><code>touchcancel</code> 从字面意思上来讲，是取消<code>touch</code> 操作的意思，在 MDN 上是这样解释的: </p>\n<blockquote>\n<p>The <code>touchcancel</code> event is fired when a touch point has been disrupted in an implementation-specific manner (for example, too many touch points are created).\\</p>\n<p><code>touchcancel</code> 事件是这样被触发的：当触摸点被一种特殊的执行方法被破坏，（例如，创建了太多的触摸点）</p>\n</blockquote>\n<p>我是这样理解的： <code>touchcancel</code> 事件被触发是因为:当我们使用手机操作的时候，例如点击按钮操作，我们在 <code>touchend</code> 事件中定义了点击按钮后调用的方法，如果我们误操作，比如手指在按钮上左右滑动的时候，<code>touchcancel</code> 事件就会被紧跟着被调用（不同于点击事件，浏览器会认为在手机屏幕上的左右滑动是误操作），取消 <code>touchend</code> 事件，从<code>touchend</code> 事件中的方法不会被执行。</p>\n<p>当手指在按钮上下滑动的时候，<code>touchcancel</code> 事件是不会被调用的。可以把<code>touchcancel</code> 事件视为防止误操作事件。</p>"},{"title":"聊聊js中的类","date":"2018-05-15T15:17:09.000Z","_content":"\n对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。\n\n实现类的机制在 js 中有两种方法： `prototype` 以及   es6 中`class` 关键字， 下面分别就这两种探讨一下 `js` 中类的形成：\n\n###  使用 `prototype` 实现类\n\n#### 什么是 `prototype`\n\n在 `js` 中创建对象的时候，对象中默认存在一个 `prototype`（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 `_proto_`） 属性，这个属性是一个 `指针`，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：\n\n```javascript\nlet obj = {};\nobj._proto_ = { name: \"张宁宁\" };\nobj.name // 张宁宁\n```\n\n\n\n想要了解这个过程，我们需要知道当我们在使用 `.` 或者 `[]` 查找元素属性的时候，元素属性是如何被查找到的。\n\n**当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值**\n\n上面的例子中， 虽然我们没有在 `obj` 上面定义一个 `name` 属性，但是我们在 `obj` 对象的原型上定义了一个 `name` 属性，因此还是可以查找到的。同样， 对于定义在 `prototype` 上的属性，使用 `for in` 操作符也是可以访问到的。\n\n```javascript\nfor (let key in obj) {\n  console.log(key);\n}\n// name*\n```\n\n使用`hasOwnProperty` 方法可以判断定义的属性是在对象本身上面还是在原型上面。\n\n注意： 使用 `Object.keys` 是不能获得到定义在对象原型上面的属性的。\n\n```javascript\nObject.keys(obj); // []\n```\n\n\n\n#### 了解原型链\n\n##### 原型链的实现方式\n\n在 `javascript` 中，原型链是被用来实现继承的主要方法， 基本的原理如下：\n\n> 使用原型链实现在 `js` 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例\n\n我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。\n\n代码实现：\n\n```javascript\nfunction func1 () {\n  this.value = true;\n}\nfunction func2 () {\n}\nfunc2.prototype.getValue = function () {\n    return this.value;\n}\nfunc1.prototype = new func2()\nconst instance = new func1();\n// 或者 const instance = Object.create(func1.prototype);\n// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj\ninstance.getValue(); // true\n```\n\n上面的这个过程其实也可以说是我们重写了构造函数的原型;\n\n##### 原型链的终点\n\n对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。\n\n我们知道在 `javascript` 中， 存在下面几种基本类型：\n\n`undefined`, `null` , `Boolean` , `Number`, `String` 这五种基本类型和一种复杂的数据类型： `Object`.\n\n实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 `Object` 的实例。\n\n```javascript\nlet newObj = new Object();\n```\n\n\n\n这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： `Object.keys`, `Object.values` 这些方法实际上是定义在对象的原型上面的。\n\n```javascript\nlet obj = {};\nobj._proto_  // Object.prototype\n```\n\n而对于 `Object.prototype` 上面，实际上也是存在一个 `prototype` 属性， 只不过这个属性指向的是 `null`;\n\n###  `new` 操作符\n\n我们使用 `new` 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 `new` 标识符号将一个普通函数转变为一个构造函数:\n\n使用 `new` 操作符创造构造函数的实例的时候发生的过程如下：\n\n1. 创建一个新对象。\n2. 将这个新对象的原型对象指向构造函数的原型\n3. 返回这个新对象。\n\n在 `高级程序设计` 这本书中有这样一句话：\n\n> 这两个对象( `person` 的实例)都有一个`constructor(构造函数)`属性，这个属性指向 `person`.\n\n上面这句话第一次读的时候不好理解，看起来感觉像是 `constructor` 属性是定义在实例上面的，实际上， 这里在实例上能够获得 `constructor` 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 `constructor` 属性，这个属性指向构造函数。 \n\n","source":"_posts/聊聊js中的类.md","raw":"---\ntitle: 聊聊js中的类\ndate: 2018-05-15 23:17:09\ntags: js 类\ncategories: 笔记\n---\n\n对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。\n\n实现类的机制在 js 中有两种方法： `prototype` 以及   es6 中`class` 关键字， 下面分别就这两种探讨一下 `js` 中类的形成：\n\n###  使用 `prototype` 实现类\n\n#### 什么是 `prototype`\n\n在 `js` 中创建对象的时候，对象中默认存在一个 `prototype`（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 `_proto_`） 属性，这个属性是一个 `指针`，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：\n\n```javascript\nlet obj = {};\nobj._proto_ = { name: \"张宁宁\" };\nobj.name // 张宁宁\n```\n\n\n\n想要了解这个过程，我们需要知道当我们在使用 `.` 或者 `[]` 查找元素属性的时候，元素属性是如何被查找到的。\n\n**当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值**\n\n上面的例子中， 虽然我们没有在 `obj` 上面定义一个 `name` 属性，但是我们在 `obj` 对象的原型上定义了一个 `name` 属性，因此还是可以查找到的。同样， 对于定义在 `prototype` 上的属性，使用 `for in` 操作符也是可以访问到的。\n\n```javascript\nfor (let key in obj) {\n  console.log(key);\n}\n// name*\n```\n\n使用`hasOwnProperty` 方法可以判断定义的属性是在对象本身上面还是在原型上面。\n\n注意： 使用 `Object.keys` 是不能获得到定义在对象原型上面的属性的。\n\n```javascript\nObject.keys(obj); // []\n```\n\n\n\n#### 了解原型链\n\n##### 原型链的实现方式\n\n在 `javascript` 中，原型链是被用来实现继承的主要方法， 基本的原理如下：\n\n> 使用原型链实现在 `js` 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例\n\n我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。\n\n代码实现：\n\n```javascript\nfunction func1 () {\n  this.value = true;\n}\nfunction func2 () {\n}\nfunc2.prototype.getValue = function () {\n    return this.value;\n}\nfunc1.prototype = new func2()\nconst instance = new func1();\n// 或者 const instance = Object.create(func1.prototype);\n// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj\ninstance.getValue(); // true\n```\n\n上面的这个过程其实也可以说是我们重写了构造函数的原型;\n\n##### 原型链的终点\n\n对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。\n\n我们知道在 `javascript` 中， 存在下面几种基本类型：\n\n`undefined`, `null` , `Boolean` , `Number`, `String` 这五种基本类型和一种复杂的数据类型： `Object`.\n\n实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 `Object` 的实例。\n\n```javascript\nlet newObj = new Object();\n```\n\n\n\n这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： `Object.keys`, `Object.values` 这些方法实际上是定义在对象的原型上面的。\n\n```javascript\nlet obj = {};\nobj._proto_  // Object.prototype\n```\n\n而对于 `Object.prototype` 上面，实际上也是存在一个 `prototype` 属性， 只不过这个属性指向的是 `null`;\n\n###  `new` 操作符\n\n我们使用 `new` 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 `new` 标识符号将一个普通函数转变为一个构造函数:\n\n使用 `new` 操作符创造构造函数的实例的时候发生的过程如下：\n\n1. 创建一个新对象。\n2. 将这个新对象的原型对象指向构造函数的原型\n3. 返回这个新对象。\n\n在 `高级程序设计` 这本书中有这样一句话：\n\n> 这两个对象( `person` 的实例)都有一个`constructor(构造函数)`属性，这个属性指向 `person`.\n\n上面这句话第一次读的时候不好理解，看起来感觉像是 `constructor` 属性是定义在实例上面的，实际上， 这里在实例上能够获得 `constructor` 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 `constructor` 属性，这个属性指向构造函数。 \n\n","slug":"聊聊js中的类","published":1,"updated":"2018-12-04T03:46:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohb7005cs33gdyorc4mx","content":"<p>对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。</p>\n<p>实现类的机制在 js 中有两种方法： <code>prototype</code> 以及   es6 中<code>class</code> 关键字， 下面分别就这两种探讨一下 <code>js</code> 中类的形成：</p>\n<h3 id=\"使用-prototype-实现类\"><a href=\"#使用-prototype-实现类\" class=\"headerlink\" title=\"使用 prototype 实现类\"></a>使用 <code>prototype</code> 实现类</h3><h4 id=\"什么是-prototype\"><a href=\"#什么是-prototype\" class=\"headerlink\" title=\"什么是 prototype\"></a>什么是 <code>prototype</code></h4><p>在 <code>js</code> 中创建对象的时候，对象中默认存在一个 <code>prototype</code>（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 <code>_proto_</code>） 属性，这个属性是一个 <code>指针</code>，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_ = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span> &#125;;</span><br><span class=\"line\">obj.name <span class=\"comment\">// 张宁宁</span></span><br></pre></td></tr></table></figure>\n<p>想要了解这个过程，我们需要知道当我们在使用 <code>.</code> 或者 <code>[]</code> 查找元素属性的时候，元素属性是如何被查找到的。</p>\n<p><strong>当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值</strong></p>\n<p>上面的例子中， 虽然我们没有在 <code>obj</code> 上面定义一个 <code>name</code> 属性，但是我们在 <code>obj</code> 对象的原型上定义了一个 <code>name</code> 属性，因此还是可以查找到的。同样， 对于定义在 <code>prototype</code> 上的属性，使用 <code>for in</code> 操作符也是可以访问到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// name*</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>hasOwnProperty</code> 方法可以判断定义的属性是在对象本身上面还是在原型上面。</p>\n<p>注意： 使用 <code>Object.keys</code> 是不能获得到定义在对象原型上面的属性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"了解原型链\"><a href=\"#了解原型链\" class=\"headerlink\" title=\"了解原型链\"></a>了解原型链</h4><h5 id=\"原型链的实现方式\"><a href=\"#原型链的实现方式\" class=\"headerlink\" title=\"原型链的实现方式\"></a>原型链的实现方式</h5><p>在 <code>javascript</code> 中，原型链是被用来实现继承的主要方法， 基本的原理如下：</p>\n<blockquote>\n<p>使用原型链实现在 <code>js</code> 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例</p>\n</blockquote>\n<p>我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2.prototype.getValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1.prototype = <span class=\"keyword\">new</span> func2()</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> func1();</span><br><span class=\"line\"><span class=\"comment\">// 或者 const instance = Object.create(func1.prototype);</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj</span></span><br><span class=\"line\">instance.getValue(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的这个过程其实也可以说是我们重写了构造函数的原型;</p>\n<h5 id=\"原型链的终点\"><a href=\"#原型链的终点\" class=\"headerlink\" title=\"原型链的终点\"></a>原型链的终点</h5><p>对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。</p>\n<p>我们知道在 <code>javascript</code> 中， 存在下面几种基本类型：</p>\n<p><code>undefined</code>, <code>null</code> , <code>Boolean</code> , <code>Number</code>, <code>String</code> 这五种基本类型和一种复杂的数据类型： <code>Object</code>.</p>\n<p>实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 <code>Object</code> 的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： <code>Object.keys</code>, <code>Object.values</code> 这些方法实际上是定义在对象的原型上面的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_  <span class=\"comment\">// Object.prototype</span></span><br></pre></td></tr></table></figure>\n<p>而对于 <code>Object.prototype</code> 上面，实际上也是存在一个 <code>prototype</code> 属性， 只不过这个属性指向的是 <code>null</code>;</p>\n<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a><code>new</code> 操作符</h3><p>我们使用 <code>new</code> 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 <code>new</code> 标识符号将一个普通函数转变为一个构造函数:</p>\n<p>使用 <code>new</code> 操作符创造构造函数的实例的时候发生的过程如下：</p>\n<ol>\n<li>创建一个新对象。</li>\n<li>将这个新对象的原型对象指向构造函数的原型</li>\n<li>返回这个新对象。</li>\n</ol>\n<p>在 <code>高级程序设计</code> 这本书中有这样一句话：</p>\n<blockquote>\n<p>这两个对象( <code>person</code> 的实例)都有一个<code>constructor(构造函数)</code>属性，这个属性指向 <code>person</code>.</p>\n</blockquote>\n<p>上面这句话第一次读的时候不好理解，看起来感觉像是 <code>constructor</code> 属性是定义在实例上面的，实际上， 这里在实例上能够获得 <code>constructor</code> 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 <code>constructor</code> 属性，这个属性指向构造函数。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于js 中类的使用，自己平常工作的时候也有用到， 但是只是一些浅显的知识，实际上， 在 js 中如何使用类， 对于类的更深一步的理解，还是有很多的东西需要进行了解, 纸上得来终觉浅， 绝知此事要躬行，作为一名程序员更重要的还是要多写， 多练， 在练习中不断成长。</p>\n<p>实现类的机制在 js 中有两种方法： <code>prototype</code> 以及   es6 中<code>class</code> 关键字， 下面分别就这两种探讨一下 <code>js</code> 中类的形成：</p>\n<h3 id=\"使用-prototype-实现类\"><a href=\"#使用-prototype-实现类\" class=\"headerlink\" title=\"使用 prototype 实现类\"></a>使用 <code>prototype</code> 实现类</h3><h4 id=\"什么是-prototype\"><a href=\"#什么是-prototype\" class=\"headerlink\" title=\"什么是 prototype\"></a>什么是 <code>prototype</code></h4><p>在 <code>js</code> 中创建对象的时候，对象中默认存在一个 <code>prototype</code>（在 Chrome,  Safari, Firefox 中的对象上这个属性被称作 <code>_proto_</code>） 属性，这个属性是一个 <code>指针</code>，指向一个对象， 这个对象被称作原型对象， 原型对象上的属性是可以通过对象访问到的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_ = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"张宁宁\"</span> &#125;;</span><br><span class=\"line\">obj.name <span class=\"comment\">// 张宁宁</span></span><br></pre></td></tr></table></figure>\n<p>想要了解这个过程，我们需要知道当我们在使用 <code>.</code> 或者 <code>[]</code> 查找元素属性的时候，元素属性是如何被查找到的。</p>\n<p><strong>当在对象中查找某一个元素属性的时候， 会首先在对象本身上进行属性查找， 如果对象本身上没有查找到对象属性， 那么就会在对象的原型上进行查找。如果在对象本身上已经查找到了， 那么返回这个属性的值</strong></p>\n<p>上面的例子中， 虽然我们没有在 <code>obj</code> 上面定义一个 <code>name</code> 属性，但是我们在 <code>obj</code> 对象的原型上定义了一个 <code>name</code> 属性，因此还是可以查找到的。同样， 对于定义在 <code>prototype</code> 上的属性，使用 <code>for in</code> 操作符也是可以访问到的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// name*</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>hasOwnProperty</code> 方法可以判断定义的属性是在对象本身上面还是在原型上面。</p>\n<p>注意： 使用 <code>Object.keys</code> 是不能获得到定义在对象原型上面的属性的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"了解原型链\"><a href=\"#了解原型链\" class=\"headerlink\" title=\"了解原型链\"></a>了解原型链</h4><h5 id=\"原型链的实现方式\"><a href=\"#原型链的实现方式\" class=\"headerlink\" title=\"原型链的实现方式\"></a>原型链的实现方式</h5><p>在 <code>javascript</code> 中，原型链是被用来实现继承的主要方法， 基本的原理如下：</p>\n<blockquote>\n<p>使用原型链实现在 <code>js</code> 中继承的方式是让一个构造函数的原型对象等于另外一个构造函数的实例</p>\n</blockquote>\n<p>我们知道，对于一个构造函数而言，存在一个原型对象， 该构造函数形成的实例包含一个指向原型对象的指针， 如果我们将这个原型对象变为另外一个构造函数的实例，那个同样在这个原型对象中包含一个指向另外一个构造函数的原型对象的指针，这样层层递进，从而形成了一条原型链。</p>\n<p>代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2.prototype.getValue = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1.prototype = <span class=\"keyword\">new</span> func2()</span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> func1();</span><br><span class=\"line\"><span class=\"comment\">// 或者 const instance = Object.create(func1.prototype);</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Object.create(obj) 会创建一个新对象， 并且对象内部的 prototype 指向 obj</span></span><br><span class=\"line\">instance.getValue(); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的这个过程其实也可以说是我们重写了构造函数的原型;</p>\n<h5 id=\"原型链的终点\"><a href=\"#原型链的终点\" class=\"headerlink\" title=\"原型链的终点\"></a>原型链的终点</h5><p>对于一个原型链而言，是否原型链存在终点呢？实际上， 原型链的终点是存在的。</p>\n<p>我们知道在 <code>javascript</code> 中， 存在下面几种基本类型：</p>\n<p><code>undefined</code>, <code>null</code> , <code>Boolean</code> , <code>Number</code>, <code>String</code> 这五种基本类型和一种复杂的数据类型： <code>Object</code>.</p>\n<p>实际上， 例如我们创建一个新的对象的时候， 创建的这个新的对象实际上是 <code>Object</code> 的实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>这个时候， 这个对象的原型指向的是对象的原型； 例如我们在对象上经常使用的一些对象方法例如： <code>Object.keys</code>, <code>Object.values</code> 这些方法实际上是定义在对象的原型上面的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj._proto_  <span class=\"comment\">// Object.prototype</span></span><br></pre></td></tr></table></figure>\n<p>而对于 <code>Object.prototype</code> 上面，实际上也是存在一个 <code>prototype</code> 属性， 只不过这个属性指向的是 <code>null</code>;</p>\n<h3 id=\"new-操作符\"><a href=\"#new-操作符\" class=\"headerlink\" title=\"new 操作符\"></a><code>new</code> 操作符</h3><p>我们使用 <code>new</code> 操作符用来创造一个构造函数， 或者可以说， 我们通过使用 <code>new</code> 标识符号将一个普通函数转变为一个构造函数:</p>\n<p>使用 <code>new</code> 操作符创造构造函数的实例的时候发生的过程如下：</p>\n<ol>\n<li>创建一个新对象。</li>\n<li>将这个新对象的原型对象指向构造函数的原型</li>\n<li>返回这个新对象。</li>\n</ol>\n<p>在 <code>高级程序设计</code> 这本书中有这样一句话：</p>\n<blockquote>\n<p>这两个对象( <code>person</code> 的实例)都有一个<code>constructor(构造函数)</code>属性，这个属性指向 <code>person</code>.</p>\n</blockquote>\n<p>上面这句话第一次读的时候不好理解，看起来感觉像是 <code>constructor</code> 属性是定义在实例上面的，实际上， 这里在实例上能够获得 <code>constructor</code> 属性，其实这里是继承来自于构造函数的原型上面的，因为构造函数的原型上面有个 <code>constructor</code> 属性，这个属性指向构造函数。 </p>\n"},{"title":"详解js中的线程，进程","date":"2018-06-20T16:08:26.000Z","_content":"\n存在下面一段代码：\n\n```javascript\nsetTimeout(function() { console.log(1) }, 0);\nnew Promise(function(resolve){\n    console.log(2);\n    for(var i = 0; i < 10000; i++) {\n        i === 9999 && resolve()\n    }\n    console.log(3);\n}).then(function () {\n    console.log(4);\n});\nconsole.log(5);\n```\n上面的代码的执行顺序， 依次输出内容分别是什么？\n正确的答案是： 2， 3， 5 ，4， 1；\n在上面的代码中， 执行的代码顺序如下：\n1. 执行 `promise` 实例内部的代码， 输出 `2`;\n2. 顺序执行后面的代码 `console.log(3)`, 输出 `3`;\n3. 执行 `console.log(5)`， 代码输出 `5`;\n4. 执行 `resolve` 函数， 执行 `resolve` 函数中的代码  `console.log(4)`, 输出 `4`;\n5. 最后执行 `setTimeout` 中的代码， 代码执行 `console.log(1)` ， 输出 `1`;\n  为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  \n\n\n###  js 中的线程\n\n在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 而在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。\n> 虽然 js 是单线程的， 但并不是说 js 引擎就是单线程的， 实际上， js 引擎有多个线程， 一个主线程以及其他的后台配合主线程。    \n\n而在浏览器中， 还包括下面几类线程：\n- js 引擎线程（例如 v8 引擎）\n- UI 渲染线程\n- 浏览器事件触发线程\n- 定时触发器线程\n- http 请求线程\n\n\n\n**这些线程的作用分别是这样的：**\n- UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。\n- js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理\n- 浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。\n- 定时触发器线程用于对于 `setTimeout` 或者 `setInterval` 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。\n- http 请求线程， ajax 是委托给浏览器新开一个 http 线程\n\n在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。\n\n### `setTimeout`\n`setTimeout` 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 `setTimeout` 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：\n\n有如下代码：\n```javascript\nsetTimeout(function () { console.log(2) }, 0);\nconsole.log(1);\n```\n执行结果： 1， 2\n\n上面 `setTimeout` 中的函数会等到 `console.log(1)` 执行完成之后执行结果。\n\n### js 中的事件运行机制\n\n我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：\n\n* js 中分为同步任务和异步任务\n* 同步任务都是在主线程上面执行， 形成一个执行栈\n* 在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件\n* 当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  \n\n事件运行机制的详细图解如下：\n\n![img](https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800)\n\n### js 中的 `macrotask` 与 `microtask`\n\n在 js 中， 存在两种任务类型： `macrotask`(宏任务) 和 `microtash` (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。\n\n* `macrotask`: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，\n\n  ```\n  task ---> 渲染 ---> task\n  ```\n\n* `microtask`微任务会在宏任务执行完毕之后， 进行渲染之前执行  \n\n`macrotask` 与 `microtask` 中分别包含的几种任务类型：\n\n* `macrotask` : 代码块， `setTimeout`, `setInterval` 等\n* `microtask`: `Promise`  \n\n了解了上面 `macrotask` 与 `microtask` 的概念之后， 之前我们那个代码执行的问题就明白了， 因为 `setTimeout` 属于 `macrotask`, 而 `promise` 属于 `microtask`, 在执行时间上 `promise`部分代码要早于 `setTimeout`, 所以先执行的代码是先执行 `promise resove` 中的代码， 之后在执行 `setTimeout` 中的代码。\n\n### 参考链接\n\n[从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://funteas.com/topic/5a64e9482630e6f31583701d)\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)","source":"_posts/详解js中的线程，进程.md","raw":"---\ntitle: 详解js中的线程，进程\ndate: 2018-06-21 00:08:26\ntags: js运行机制，线程\ncategories: js理论基础\n---\n\n存在下面一段代码：\n\n```javascript\nsetTimeout(function() { console.log(1) }, 0);\nnew Promise(function(resolve){\n    console.log(2);\n    for(var i = 0; i < 10000; i++) {\n        i === 9999 && resolve()\n    }\n    console.log(3);\n}).then(function () {\n    console.log(4);\n});\nconsole.log(5);\n```\n上面的代码的执行顺序， 依次输出内容分别是什么？\n正确的答案是： 2， 3， 5 ，4， 1；\n在上面的代码中， 执行的代码顺序如下：\n1. 执行 `promise` 实例内部的代码， 输出 `2`;\n2. 顺序执行后面的代码 `console.log(3)`, 输出 `3`;\n3. 执行 `console.log(5)`， 代码输出 `5`;\n4. 执行 `resolve` 函数， 执行 `resolve` 函数中的代码  `console.log(4)`, 输出 `4`;\n5. 最后执行 `setTimeout` 中的代码， 代码执行 `console.log(1)` ， 输出 `1`;\n  为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  \n\n\n###  js 中的线程\n\n在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 而在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。\n> 虽然 js 是单线程的， 但并不是说 js 引擎就是单线程的， 实际上， js 引擎有多个线程， 一个主线程以及其他的后台配合主线程。    \n\n而在浏览器中， 还包括下面几类线程：\n- js 引擎线程（例如 v8 引擎）\n- UI 渲染线程\n- 浏览器事件触发线程\n- 定时触发器线程\n- http 请求线程\n\n\n\n**这些线程的作用分别是这样的：**\n- UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。\n- js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理\n- 浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。\n- 定时触发器线程用于对于 `setTimeout` 或者 `setInterval` 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。\n- http 请求线程， ajax 是委托给浏览器新开一个 http 线程\n\n在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。\n\n### `setTimeout`\n`setTimeout` 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 `setTimeout` 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：\n\n有如下代码：\n```javascript\nsetTimeout(function () { console.log(2) }, 0);\nconsole.log(1);\n```\n执行结果： 1， 2\n\n上面 `setTimeout` 中的函数会等到 `console.log(1)` 执行完成之后执行结果。\n\n### js 中的事件运行机制\n\n我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：\n\n* js 中分为同步任务和异步任务\n* 同步任务都是在主线程上面执行， 形成一个执行栈\n* 在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件\n* 当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  \n\n事件运行机制的详细图解如下：\n\n![img](https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800)\n\n### js 中的 `macrotask` 与 `microtask`\n\n在 js 中， 存在两种任务类型： `macrotask`(宏任务) 和 `microtash` (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。\n\n* `macrotask`: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，\n\n  ```\n  task ---> 渲染 ---> task\n  ```\n\n* `microtask`微任务会在宏任务执行完毕之后， 进行渲染之前执行  \n\n`macrotask` 与 `microtask` 中分别包含的几种任务类型：\n\n* `macrotask` : 代码块， `setTimeout`, `setInterval` 等\n* `microtask`: `Promise`  \n\n了解了上面 `macrotask` 与 `microtask` 的概念之后， 之前我们那个代码执行的问题就明白了， 因为 `setTimeout` 属于 `macrotask`, 而 `promise` 属于 `microtask`, 在执行时间上 `promise`部分代码要早于 `setTimeout`, 所以先执行的代码是先执行 `promise resove` 中的代码， 之后在执行 `setTimeout` 中的代码。\n\n### 参考链接\n\n[从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理](https://funteas.com/topic/5a64e9482630e6f31583701d)\n\n[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)","slug":"详解js中的线程，进程","published":1,"updated":"2018-12-04T03:45:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohb9005hs33gt8brjt4i","content":"<p>存在下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        i === <span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码的执行顺序， 依次输出内容分别是什么？<br>正确的答案是： 2， 3， 5 ，4， 1；<br>在上面的代码中， 执行的代码顺序如下：</p>\n<ol>\n<li>执行 <code>promise</code> 实例内部的代码， 输出 <code>2</code>;</li>\n<li>顺序执行后面的代码 <code>console.log(3)</code>, 输出 <code>3</code>;</li>\n<li>执行 <code>console.log(5)</code>， 代码输出 <code>5</code>;</li>\n<li>执行 <code>resolve</code> 函数， 执行 <code>resolve</code> 函数中的代码  <code>console.log(4)</code>, 输出 <code>4</code>;</li>\n<li>最后执行 <code>setTimeout</code> 中的代码， 代码执行 <code>console.log(1)</code> ， 输出 <code>1</code>;<br>为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  </li>\n</ol>\n<h3 id=\"js-中的线程\"><a href=\"#js-中的线程\" class=\"headerlink\" title=\"js 中的线程\"></a>js 中的线程</h3><p>在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 而在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。</p>\n<blockquote>\n<p>虽然 js 是单线程的， 但并不是说 js 引擎就是单线程的， 实际上， js 引擎有多个线程， 一个主线程以及其他的后台配合主线程。    </p>\n</blockquote>\n<p>而在浏览器中， 还包括下面几类线程：</p>\n<ul>\n<li>js 引擎线程（例如 v8 引擎）</li>\n<li>UI 渲染线程</li>\n<li>浏览器事件触发线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p><strong>这些线程的作用分别是这样的：</strong></p>\n<ul>\n<li>UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。</li>\n<li>js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理</li>\n<li>浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。</li>\n<li>定时触发器线程用于对于 <code>setTimeout</code> 或者 <code>setInterval</code> 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。</li>\n<li>http 请求线程， ajax 是委托给浏览器新开一个 http 线程</li>\n</ul>\n<p>在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。</p>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a><code>setTimeout</code></h3><p><code>setTimeout</code> 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 <code>setTimeout</code> 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：</p>\n<p>有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果： 1， 2</p>\n<p>上面 <code>setTimeout</code> 中的函数会等到 <code>console.log(1)</code> 执行完成之后执行结果。</p>\n<h3 id=\"js-中的事件运行机制\"><a href=\"#js-中的事件运行机制\" class=\"headerlink\" title=\"js 中的事件运行机制\"></a>js 中的事件运行机制</h3><p>我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：</p>\n<ul>\n<li>js 中分为同步任务和异步任务</li>\n<li>同步任务都是在主线程上面执行， 形成一个执行栈</li>\n<li>在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件</li>\n<li>当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  </li>\n</ul>\n<p>事件运行机制的详细图解如下：</p>\n<p><img src=\"https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800\" alt=\"img\"></p>\n<h3 id=\"js-中的-macrotask-与-microtask\"><a href=\"#js-中的-macrotask-与-microtask\" class=\"headerlink\" title=\"js 中的 macrotask 与 microtask\"></a>js 中的 <code>macrotask</code> 与 <code>microtask</code></h3><p>在 js 中， 存在两种任务类型： <code>macrotask</code>(宏任务) 和 <code>microtash</code> (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。</p>\n<ul>\n<li><p><code>macrotask</code>: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task ---&gt; 渲染 ---&gt; task</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>microtask</code>微任务会在宏任务执行完毕之后， 进行渲染之前执行  </p>\n</li>\n</ul>\n<p><code>macrotask</code> 与 <code>microtask</code> 中分别包含的几种任务类型：</p>\n<ul>\n<li><code>macrotask</code> : 代码块， <code>setTimeout</code>, <code>setInterval</code> 等</li>\n<li><code>microtask</code>: <code>Promise</code>  </li>\n</ul>\n<p>了解了上面 <code>macrotask</code> 与 <code>microtask</code> 的概念之后， 之前我们那个代码执行的问题就明白了， 因为 <code>setTimeout</code> 属于 <code>macrotask</code>, 而 <code>promise</code> 属于 <code>microtask</code>, 在执行时间上 <code>promise</code>部分代码要早于 <code>setTimeout</code>, 所以先执行的代码是先执行 <code>promise resove</code> 中的代码， 之后在执行 <code>setTimeout</code> 中的代码。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://funteas.com/topic/5a64e9482630e6f31583701d\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>存在下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">        i === <span class=\"number\">9999</span> &amp;&amp; resolve()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的代码的执行顺序， 依次输出内容分别是什么？<br>正确的答案是： 2， 3， 5 ，4， 1；<br>在上面的代码中， 执行的代码顺序如下：</p>\n<ol>\n<li>执行 <code>promise</code> 实例内部的代码， 输出 <code>2</code>;</li>\n<li>顺序执行后面的代码 <code>console.log(3)</code>, 输出 <code>3</code>;</li>\n<li>执行 <code>console.log(5)</code>， 代码输出 <code>5</code>;</li>\n<li>执行 <code>resolve</code> 函数， 执行 <code>resolve</code> 函数中的代码  <code>console.log(4)</code>, 输出 <code>4</code>;</li>\n<li>最后执行 <code>setTimeout</code> 中的代码， 代码执行 <code>console.log(1)</code> ， 输出 <code>1</code>;<br>为什么会按照上面的顺序执行代码， 下面将要进行详细的讲解：  </li>\n</ol>\n<h3 id=\"js-中的线程\"><a href=\"#js-中的线程\" class=\"headerlink\" title=\"js 中的线程\"></a>js 中的线程</h3><p>在 js 中的线程和浏览器中的线程是不同的， 在 js 中是单线程， 而在浏览器是多线程的。js 的单线程是指所有的 js 代码都是在 js 引擎上面的一个主线程上面运行的，js  同时只能执行一个任务， 其他的任务则会排队进行等待执行。</p>\n<blockquote>\n<p>虽然 js 是单线程的， 但并不是说 js 引擎就是单线程的， 实际上， js 引擎有多个线程， 一个主线程以及其他的后台配合主线程。    </p>\n</blockquote>\n<p>而在浏览器中， 还包括下面几类线程：</p>\n<ul>\n<li>js 引擎线程（例如 v8 引擎）</li>\n<li>UI 渲染线程</li>\n<li>浏览器事件触发线程</li>\n<li>定时触发器线程</li>\n<li>http 请求线程</li>\n</ul>\n<p><strong>这些线程的作用分别是这样的：</strong></p>\n<ul>\n<li>UI渲染线程用于渲染页面、解析 HTMl CSS， 创建 DOM 树。当页面元素发生重构或者回流的时候， 这个线程就会执行， 重新渲染页面。</li>\n<li>js引擎用于执行 js 脚本代码，等待任务队列中的任务到来， 并且加以处理</li>\n<li>浏览器事件触发线程用于控制用户， 响应交互，当 js 引擎执行代码遇到相关事件的时候， 会将对应的任务添加到事件线程中， 当任务符合触发条件被触发的时候， 触发的任务会被添加到任务队列的队尾， 等待 js 引擎执行完成主线程上面的任务之后执行。</li>\n<li>定时触发器线程用于对于 <code>setTimeout</code> 或者 <code>setInterval</code> 进行计数, 因为 js引擎是单线程的， 所以自然计数的任务就不能有 js 引擎来完成， 而是由浏览器单独开出一个定时触发器线程用于计数， 当计数完毕之后， 会将计数完成之后的函数添加到任务队列尾部， 等待 js引擎执行完成主线程上面的任务之后执行。</li>\n<li>http 请求线程， ajax 是委托给浏览器新开一个 http 线程</li>\n</ul>\n<p>在上面的这些线程中， js 引擎的线程和UI渲染的线程是互斥的， 因此， 当js执行代码的时候会出现阻塞页面渲染的情况， 这也就是许多前端性能优化中都有提到的将js代码在html代码尾部加载的原因， 同时， 在 js 中操作dom会引发页面的重构或者回流， 这个时候UI渲染线程就会开始工作， 重新渲染页面， js 引擎的主线程就会被挂起，暂停代码执行， 从而影响页面性能， 这也是前端性能优化的一种方式：尽量减少js中直接对于dom的操作。</p>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a><code>setTimeout</code></h3><p><code>setTimeout</code> 在 js 中的作用是用来延迟代码执行， 规定代码在延迟多少时间之后执行回调函数代码，在上面关于线程的讲解中， 我们知道浏览器的定时触发器线程会在延迟时间达到之后将回调事件添加到js引擎中的任务队列中， 而在 js 引擎中， 引擎会在执行完成主线程上面的任务之后执行任务队列中的事件， 因此，当代码中存在 <code>setTimeout</code> 的时候， 内部的回调函数会在其他代码执行完毕之后才执行，  尽管我们将延迟时间设为0的情况也是如此：</p>\n<p>有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>) &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果： 1， 2</p>\n<p>上面 <code>setTimeout</code> 中的函数会等到 <code>console.log(1)</code> 执行完成之后执行结果。</p>\n<h3 id=\"js-中的事件运行机制\"><a href=\"#js-中的事件运行机制\" class=\"headerlink\" title=\"js 中的事件运行机制\"></a>js 中的事件运行机制</h3><p>我们知道js是单线程运行的， 那么具体的运行机制是如何的？我们需要知道下面这些概念：</p>\n<ul>\n<li>js 中分为同步任务和异步任务</li>\n<li>同步任务都是在主线程上面执行， 形成一个执行栈</li>\n<li>在主线程之外， 事件触发线程管理着一个任务队列， 当异步任务有了运行结果时， 就在任务队列中添加一个事件</li>\n<li>当执行栈中的所有的同步任务执行完毕之后， 任务队列中的任务将会添加到执行栈中， 开始执行  </li>\n</ul>\n<p>事件运行机制的详细图解如下：</p>\n<p><img src=\"https://img.funteas.com/d39f926aa5d3d036a6d5e3bbe5695c45?imageView2/2/w/800\" alt=\"img\"></p>\n<h3 id=\"js-中的-macrotask-与-microtask\"><a href=\"#js-中的-macrotask-与-microtask\" class=\"headerlink\" title=\"js 中的 macrotask 与 microtask\"></a>js 中的 <code>macrotask</code> 与 <code>microtask</code></h3><p>在 js 中， 存在两种任务类型： <code>macrotask</code>(宏任务) 和 <code>microtash</code> (微任务)， 这两种任务类型的区别在于执行任务的时机是不同的。</p>\n<ul>\n<li><p><code>macrotask</code>: 宏任务可以理解为执行栈中执行的任务， 在执行任务期间不会中断任务， 浏览器为了能够使 js 内部task与 dom 能够有序的执行， 在执行完成任务之后会进行渲染，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task ---&gt; 渲染 ---&gt; task</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>microtask</code>微任务会在宏任务执行完毕之后， 进行渲染之前执行  </p>\n</li>\n</ul>\n<p><code>macrotask</code> 与 <code>microtask</code> 中分别包含的几种任务类型：</p>\n<ul>\n<li><code>macrotask</code> : 代码块， <code>setTimeout</code>, <code>setInterval</code> 等</li>\n<li><code>microtask</code>: <code>Promise</code>  </li>\n</ul>\n<p>了解了上面 <code>macrotask</code> 与 <code>microtask</code> 的概念之后， 之前我们那个代码执行的问题就明白了， 因为 <code>setTimeout</code> 属于 <code>macrotask</code>, 而 <code>promise</code> 属于 <code>microtask</code>, 在执行时间上 <code>promise</code>部分代码要早于 <code>setTimeout</code>, 所以先执行的代码是先执行 <code>promise resove</code> 中的代码， 之后在执行 <code>setTimeout</code> 中的代码。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://funteas.com/topic/5a64e9482630e6f31583701d\" target=\"_blank\" rel=\"noopener\">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">JavaScript 运行机制详解：再谈Event Loop</a></p>\n"},{"title":"获取数组中特定值的数组","date":"2018-06-11T15:49:38.000Z","_content":"\n有如下题目：\n\n根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。\n\n自己想了一下， 实现方法如下：\n\n```javascript\n/**\n** description 得到\n** arr 传入的数组\n** value 得到的类数组的值\n** maxLen 类数组的最大长度\n**/\nfunction compile(arr, value, maxLen = arr.length) {\n    if (!arr.length || !value) return;\n    let result = [];\n    let tempArr = [];\n    const len = arr.length;\n    let nowIndex = 0;\n    while (nowIndex < len) {\n        if (tempArr.length > 0) {\n            let temp = [];\n            for (let item of tempArr) {\n                temp.push([...item, arr[nowIndex]]);\n            }\n            tempArr = [...tempArr, ...temp];\n        }\n        tempArr.push([arr[nowIndex]]);\n        nowIndex++;\n    }\n    result = tempArr.filter(arr => (arr.reduce((pev, now) => (pev = pev + now) && pev, 0) === value) && (arr.length <= maxLen) );\n    return result;\n}\n```\n\n实现的效果如下：\n\n```javascript\ncompile([1, 2, 3], 5)  // [2, 3]\n```\n\n\n","source":"_posts/获取数组中特定值的数组.md","raw":"---\ntitle: 获取数组中特定值的数组\ndate: 2018-06-11 23:49:38\ntags: 数组\ncategories: 代码集\n---\n\n有如下题目：\n\n根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。\n\n自己想了一下， 实现方法如下：\n\n```javascript\n/**\n** description 得到\n** arr 传入的数组\n** value 得到的类数组的值\n** maxLen 类数组的最大长度\n**/\nfunction compile(arr, value, maxLen = arr.length) {\n    if (!arr.length || !value) return;\n    let result = [];\n    let tempArr = [];\n    const len = arr.length;\n    let nowIndex = 0;\n    while (nowIndex < len) {\n        if (tempArr.length > 0) {\n            let temp = [];\n            for (let item of tempArr) {\n                temp.push([...item, arr[nowIndex]]);\n            }\n            tempArr = [...tempArr, ...temp];\n        }\n        tempArr.push([arr[nowIndex]]);\n        nowIndex++;\n    }\n    result = tempArr.filter(arr => (arr.reduce((pev, now) => (pev = pev + now) && pev, 0) === value) && (arr.length <= maxLen) );\n    return result;\n}\n```\n\n实现的效果如下：\n\n```javascript\ncompile([1, 2, 3], 5)  // [2, 3]\n```\n\n\n","slug":"获取数组中特定值的数组","published":1,"updated":"2018-12-04T03:45:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohbd005js33gack9uyx9","content":"<p>有如下题目：</p>\n<p>根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。</p>\n<p>自己想了一下， 实现方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** description 得到</span></span><br><span class=\"line\"><span class=\"comment\">** arr 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">** value 得到的类数组的值</span></span><br><span class=\"line\"><span class=\"comment\">** maxLen 类数组的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">arr, value, maxLen = arr.length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length || !value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nowIndex &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempArr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> tempArr) &#123;</span><br><span class=\"line\">                temp.push([...item, arr[nowIndex]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tempArr = [...tempArr, ...temp];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempArr.push([arr[nowIndex]]);</span><br><span class=\"line\">        nowIndex++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = tempArr.filter(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> (arr.reduce(<span class=\"function\">(<span class=\"params\">pev, now</span>) =&gt;</span> (pev = pev + now) &amp;&amp; pev, <span class=\"number\">0</span>) === value) &amp;&amp; (arr.length &lt;= maxLen) );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)  <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有如下题目：</p>\n<p>根据指定元素，在数组里面找出类数组。比如数组 [2, 3, 5, 7] ，指定元素 5，则类数组是 [2,, 3] 和 [5]，因为上面两个数组的元素之和相加为5。</p>\n<p>自己想了一下， 实现方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** description 得到</span></span><br><span class=\"line\"><span class=\"comment\">** arr 传入的数组</span></span><br><span class=\"line\"><span class=\"comment\">** value 得到的类数组的值</span></span><br><span class=\"line\"><span class=\"comment\">** maxLen 类数组的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">arr, value, maxLen = arr.length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!arr.length || !value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nowIndex &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tempArr.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> tempArr) &#123;</span><br><span class=\"line\">                temp.push([...item, arr[nowIndex]]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tempArr = [...tempArr, ...temp];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tempArr.push([arr[nowIndex]]);</span><br><span class=\"line\">        nowIndex++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = tempArr.filter(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> (arr.reduce(<span class=\"function\">(<span class=\"params\">pev, now</span>) =&gt;</span> (pev = pev + now) &amp;&amp; pev, <span class=\"number\">0</span>) === value) &amp;&amp; (arr.length &lt;= maxLen) );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现的效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>)  <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"阅读函数式编程（一）","date":"2018-03-20T15:50:22.000Z","_content":"\n### 函数式编程的定义\n\n在 `javascript` 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。\n\n> 在 js 中， 存在下面几种内置对象：\n>\n> 1. `String` \n> 2. `Number`\n> 3. `Boolean`\n> 4. `Object`\n> 5. `Function`\n> 6. `Array`\n> 7. `Date`\n> 8. `Regexp`\n> 9. `Error`\n>\n> 这几种内置对象相当于语言中的类，可以通过使用 `new` 操作符进行调用。\n\n使用函数式编程的目的在于：\n\n>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组\n>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。\n\n### 使用纯函数\n\n什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：\n\n>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。\n\n对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：\n\n1. 外部状态发生了改变\n2. 读取文件\n3. console.log 数据\n4. 发送请求\n\n总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。\n\n***\n\n这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：\n\n> 函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出\n\n因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。\n\n###  使用纯函数的好处\n\n1. 可缓存性\n\n   简单的一段代码如下：\n\n   ```javascript\n   let squareNumber = memorize(function (x) return { x*x });\n   squareNumber(4) => 16;\n   squareNumber(4) => 16; // 从缓存中获取到的值\n\n   // memorize 函数如下\n   function memorize(f) {\n       let cacheData = {};\n       return function() {\n           let arg = JSON.stringify(arguments);\n           cacheData[arg] = cacheData[arg] || f.apply(f, arguments);\n           return cacheData[arg];\n       }\n   }\n   ```\n\n   上面的这种纯函数的可缓存性类似于在 `js` 中的闭包的效果， 可以将值保存在函数内部。\n\n2. 依赖明确， 易于调试\n\n   对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。\n\n3. 引用透明性\n\n   > 如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。\n\n例如对于类似下面这类的代码：\n\n```javascript\nfunction isNewUser() {\n    // 判断是否是新用户\n}\nfunction loginIn(user) {\n    // 用户登录\n}\nfunction register(user) {\n    // 注册新用户\n}\nfunction start(user) {\n    if (isNewUser(user)) {\n       register(user);\n       return;\n    }\n    loginIn(user);\n}\n```\n\n在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。\n\n","source":"_posts/阅读函数式编程（一）.md","raw":"---\ntitle: 阅读函数式编程（一）\ndate: 2018-03-20 23:50:22\ntags: 函数式编程\ncategories: 读书笔记\n---\n\n### 函数式编程的定义\n\n在 `javascript` 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。\n\n> 在 js 中， 存在下面几种内置对象：\n>\n> 1. `String` \n> 2. `Number`\n> 3. `Boolean`\n> 4. `Object`\n> 5. `Function`\n> 6. `Array`\n> 7. `Date`\n> 8. `Regexp`\n> 9. `Error`\n>\n> 这几种内置对象相当于语言中的类，可以通过使用 `new` 操作符进行调用。\n\n使用函数式编程的目的在于：\n\n>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组\n>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。\n\n### 使用纯函数\n\n什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：\n\n>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。\n\n对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：\n\n1. 外部状态发生了改变\n2. 读取文件\n3. console.log 数据\n4. 发送请求\n\n总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。\n\n***\n\n这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：\n\n> 函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出\n\n因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。\n\n###  使用纯函数的好处\n\n1. 可缓存性\n\n   简单的一段代码如下：\n\n   ```javascript\n   let squareNumber = memorize(function (x) return { x*x });\n   squareNumber(4) => 16;\n   squareNumber(4) => 16; // 从缓存中获取到的值\n\n   // memorize 函数如下\n   function memorize(f) {\n       let cacheData = {};\n       return function() {\n           let arg = JSON.stringify(arguments);\n           cacheData[arg] = cacheData[arg] || f.apply(f, arguments);\n           return cacheData[arg];\n       }\n   }\n   ```\n\n   上面的这种纯函数的可缓存性类似于在 `js` 中的闭包的效果， 可以将值保存在函数内部。\n\n2. 依赖明确， 易于调试\n\n   对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。\n\n3. 引用透明性\n\n   > 如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。\n\n例如对于类似下面这类的代码：\n\n```javascript\nfunction isNewUser() {\n    // 判断是否是新用户\n}\nfunction loginIn(user) {\n    // 用户登录\n}\nfunction register(user) {\n    // 注册新用户\n}\nfunction start(user) {\n    if (isNewUser(user)) {\n       register(user);\n       return;\n    }\n    loginIn(user);\n}\n```\n\n在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。\n\n","slug":"阅读函数式编程（一）","published":1,"updated":"2018-12-04T03:46:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohbf005os33gwderitr3","content":"<h3 id=\"函数式编程的定义\"><a href=\"#函数式编程的定义\" class=\"headerlink\" title=\"函数式编程的定义\"></a>函数式编程的定义</h3><p>在 <code>javascript</code> 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。</p>\n<blockquote>\n<p>在 js 中， 存在下面几种内置对象：</p>\n<ol>\n<li><code>String</code> </li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Object</code></li>\n<li><code>Function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>Regexp</code></li>\n<li><code>Error</code></li>\n</ol>\n<p>这几种内置对象相当于语言中的类，可以通过使用 <code>new</code> 操作符进行调用。</p>\n</blockquote>\n<p>使用函数式编程的目的在于：</p>\n<blockquote>\n<p>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组<br>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。</p>\n</blockquote>\n<h3 id=\"使用纯函数\"><a href=\"#使用纯函数\" class=\"headerlink\" title=\"使用纯函数\"></a>使用纯函数</h3><p>什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：</p>\n<blockquote>\n<p>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。</p>\n</blockquote>\n<p>对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：</p>\n<ol>\n<li>外部状态发生了改变</li>\n<li>读取文件</li>\n<li>console.log 数据</li>\n<li>发送请求</li>\n</ol>\n<p>总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。</p>\n<hr>\n<p>这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：</p>\n<blockquote>\n<p>函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出</p>\n</blockquote>\n<p>因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。</p>\n<h3 id=\"使用纯函数的好处\"><a href=\"#使用纯函数的好处\" class=\"headerlink\" title=\"使用纯函数的好处\"></a>使用纯函数的好处</h3><ol>\n<li><p>可缓存性</p>\n<p>简单的一段代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> squareNumber = memorize(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) <span class=\"title\">return</span> </span>&#123; x*x &#125;);</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>; <span class=\"comment\">// 从缓存中获取到的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// memorize 函数如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cacheData = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arg = <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        cacheData[arg] = cacheData[arg] || f.apply(f, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这种纯函数的可缓存性类似于在 <code>js</code> 中的闭包的效果， 可以将值保存在函数内部。</p>\n</li>\n<li><p>依赖明确， 易于调试</p>\n<p>对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。</p>\n</li>\n<li><p>引用透明性</p>\n<blockquote>\n<p>如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。</p>\n</blockquote>\n</li>\n</ol>\n<p>例如对于类似下面这类的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNewUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginIn</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNewUser(user)) &#123;</span><br><span class=\"line\">       register(user);</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loginIn(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数式编程的定义\"><a href=\"#函数式编程的定义\" class=\"headerlink\" title=\"函数式编程的定义\"></a>函数式编程的定义</h3><p>在 <code>javascript</code> 中， 函数被作为一等公民， 属于内置对象, 函数是对象中的一个子类型， 因此， 函数可以当作参数传递， 可以放到数组之中，本质上和普通的对象是一样的， 只不过相对于普通的对象而言， 函数可以被调用， 因此可以被称作可调用的对象。</p>\n<blockquote>\n<p>在 js 中， 存在下面几种内置对象：</p>\n<ol>\n<li><code>String</code> </li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Object</code></li>\n<li><code>Function</code></li>\n<li><code>Array</code></li>\n<li><code>Date</code></li>\n<li><code>Regexp</code></li>\n<li><code>Error</code></li>\n</ol>\n<p>这几种内置对象相当于语言中的类，可以通过使用 <code>new</code> 操作符进行调用。</p>\n</blockquote>\n<p>使用函数式编程的目的在于：</p>\n<blockquote>\n<p>我们希望去践行每一部分都能完美接合的理论，希望能以一种通用的、可组合的组<br>件来表示我们的特定问题，然后利用这些组件的特性来解决这些问题。</p>\n</blockquote>\n<h3 id=\"使用纯函数\"><a href=\"#使用纯函数\" class=\"headerlink\" title=\"使用纯函数\"></a>使用纯函数</h3><p>什么是纯函数， 在介绍纯函数之前， 我们先看下关于纯函数的概念：</p>\n<blockquote>\n<p>纯函数是这样一种函数，即相同的输入， 永远只能得到相同的输出，而且没有任何可以观察到的副作用。</p>\n</blockquote>\n<p>对于有些函数而言，在函数执行的过程中发生了一些可能会影响外部状态的副作用， 包括下面几种：</p>\n<ol>\n<li>外部状态发生了改变</li>\n<li>读取文件</li>\n<li>console.log 数据</li>\n<li>发送请求</li>\n</ol>\n<p>总而言之， 在函数执行的过程中， 函数与外部环境发生了交互的过程，代表这个函数存在副作用， 存在副作用的不纯函数容易产生 bug, 数据状态难以追踪， 并且增加我们的认知负荷， 因此， 在函数编写的过程中要尽量较少函数执行的时候对于外部环境的影响。</p>\n<hr>\n<p>这里对于纯函数而言， 相同的输入总会得到相同的输出， 这里类似于数学中的函数的概念， 在数学中的函数的概念中， 存在一个映射的改变：</p>\n<blockquote>\n<p>函数只是两种数值之间的关系， 尽管相同的输入只能得到相同的输出， 但是不同的输入也可以得到相同的输出</p>\n</blockquote>\n<p>因为在纯函数中，相同的输入只能得到相同的输出， 因此对于输入值是一定的情况下，对于输出的值则是一定的， 这样的情况下， 我们所要关心的只是这个函数做了什么，而不同尽力了解函数实现的具体细节， 这样能够增强我们调试代码的便利性。</p>\n<h3 id=\"使用纯函数的好处\"><a href=\"#使用纯函数的好处\" class=\"headerlink\" title=\"使用纯函数的好处\"></a>使用纯函数的好处</h3><ol>\n<li><p>可缓存性</p>\n<p>简单的一段代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> squareNumber = memorize(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) <span class=\"title\">return</span> </span>&#123; x*x &#125;);</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">squareNumber(<span class=\"number\">4</span>) =&gt; <span class=\"number\">16</span>; <span class=\"comment\">// 从缓存中获取到的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// memorize 函数如下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memorize</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cacheData = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arg = <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        cacheData[arg] = cacheData[arg] || f.apply(f, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheData[arg];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这种纯函数的可缓存性类似于在 <code>js</code> 中的闭包的效果， 可以将值保存在函数内部。</p>\n</li>\n<li><p>依赖明确， 易于调试</p>\n<p>对于纯函数而言， 函数的依赖都是写在函数参数之中的， 更便于我们理解与调试， 对于纯函数而言， 与外部函数发生作用的仅仅是定义中传入的参数，函数内部则不会涉及到关于外部环境的变量。</p>\n</li>\n<li><p>引用透明性</p>\n<blockquote>\n<p>如果一段代码可以替换成它执行之后得到的结果， 而且是在不改变整个程序行为的情况下被替换的， 那么， 我们说这段函数具有引用透明性。</p>\n</blockquote>\n</li>\n</ol>\n<p>例如对于类似下面这类的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNewUser</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginIn</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户登录</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册新用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">user</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNewUser(user)) &#123;</span><br><span class=\"line\">       register(user);</span><br><span class=\"line\">       <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loginIn(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 三个行为， 判断是否是新用户， 登录， 注册， 三个部分的逻辑封装在三个函数中， 从而更容易理解。</p>\n"},{"title":"阅读函数式编程（二）","date":"2018-05-23T15:49:38.000Z","_content":"\n在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；\n\n### 基本概念\n\n在 `Wikipedia` 上面， 这样解释函数式编程：\n\n>- In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)\n>\n>- Functional Programming treats computation as the evaluation of mathematical functions.\n>\n>- Functional Programming avoids changing-state and mutable data.\n>\n>  ​\n>\n>- 在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。\n>\n>- 函数式编程将计算视作数学上函数的评估。\n>\n>- 函数编程中避免改变状态以及变化的数据。\n\n 函数式编程与命令式编程最大的区别在于：\n\n函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  \n\n这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；\n\n> 函数的定义：\n>\n> 设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===> B 称为从集合 A 到 B 的一个映射\n\n同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。\n\n例如：如果我们想要对于数组中的每一个数加1:\n\n```javascript\nconst arr = [1, 2, 3];\nfor (let index in arr) {\n  arr[index] += 1;\n}\nconsole.log(\"arr\", arr); // [2, 3, 4]\n```\n\n或者使用 `forEach`, `map` 中数组中定义的方法：\n\n```javascript\n// forEach\narr.forEach(item => item += 1);\n// map\nconst newArr = arr.map(item => item += 1);\n```\n\n***\n\n注意：使用 `map` 以及 `forEach` 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，\n\n使用 `map` 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 `forEach` 而言， 使用 `forEach` 不会改变原来的数组，返回值为 `undefined`。\n\n从函数式编程的角度而言，使用 `map` 更能体现函数式编程的特点： 不会产生副作用；\n\n***\n\n在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。\n\n### 几大特性\n\n对于函数式编程而言，存在下面几种特性：\n\n* 高阶函数\n* 没有副作用\n* 函数柯里化\n* 闭包\n\n#### 高阶函数\n\n高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；\n\n例如下面一段 `polifill` `es6` 中 `promise` 的代码中， 对于`promise` 返回成功状态或者失败状态的调用函数中是下面这样调用的：\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n在上面的代码中， 这个 `executor` 函数是被作为参数传入到 `Promise` 函数中的， 同时这个  `executor` 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。\n\n例如计算下面代码：\n\n```javascript\nfunction getSum(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSum(a + 1, b, sum + a + 1);\n    } else {\n        return sum;\n    }\n}\nfunction getSquare(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSquare(a + 1, b, sum + Math.pow(a + 1, 2));\n    } else {\n        return sum;\n    }\n}\nconst sums = getSum(1, 4);\nconst squareSums = getSquare(1, 4);\n```\n\n上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）\n\n实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：\n\n```javascript\nfunction sumFn(a, b, cb, sum = 0) {\n    if (a < b -1) {\n        return sumFn(a + 1, b, cb, cb(sum, a));\n    } else {\n        return sum;\n    }\n}\nconst addSum = sumFn(1, 4, (sum, a) => sum + 1 + a);\nconst squareSum = sumFn(1, 4, (sum, a) => sum + Math.pow(a + 1, 2));\n```\n\n在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 `cb` 中传入一个函数进行求取。\n\n我们可以看到， 在 `sumFn` 这个函数中， 函数的逻辑取决于传入的参数`cb`的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。\n\n","source":"_posts/阅读函数式编程（二）.md","raw":"---\ntitle: 阅读函数式编程（二）\ndate: 2018-05-23 23:49:38\ntags: 函数式编程\ncategories: 读书笔记\n---\n\n在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；\n\n### 基本概念\n\n在 `Wikipedia` 上面， 这样解释函数式编程：\n\n>- In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)\n>\n>- Functional Programming treats computation as the evaluation of mathematical functions.\n>\n>- Functional Programming avoids changing-state and mutable data.\n>\n>  ​\n>\n>- 在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。\n>\n>- 函数式编程将计算视作数学上函数的评估。\n>\n>- 函数编程中避免改变状态以及变化的数据。\n\n 函数式编程与命令式编程最大的区别在于：\n\n函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  \n\n这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；\n\n> 函数的定义：\n>\n> 设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===> B 称为从集合 A 到 B 的一个映射\n\n同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。\n\n例如：如果我们想要对于数组中的每一个数加1:\n\n```javascript\nconst arr = [1, 2, 3];\nfor (let index in arr) {\n  arr[index] += 1;\n}\nconsole.log(\"arr\", arr); // [2, 3, 4]\n```\n\n或者使用 `forEach`, `map` 中数组中定义的方法：\n\n```javascript\n// forEach\narr.forEach(item => item += 1);\n// map\nconst newArr = arr.map(item => item += 1);\n```\n\n***\n\n注意：使用 `map` 以及 `forEach` 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，\n\n使用 `map` 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 `forEach` 而言， 使用 `forEach` 不会改变原来的数组，返回值为 `undefined`。\n\n从函数式编程的角度而言，使用 `map` 更能体现函数式编程的特点： 不会产生副作用；\n\n***\n\n在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。\n\n### 几大特性\n\n对于函数式编程而言，存在下面几种特性：\n\n* 高阶函数\n* 没有副作用\n* 函数柯里化\n* 闭包\n\n#### 高阶函数\n\n高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；\n\n例如下面一段 `polifill` `es6` 中 `promise` 的代码中， 对于`promise` 返回成功状态或者失败状态的调用函数中是下面这样调用的：\n\n```javascript\nfunction Promise (executor) {\n  let that = this;\n  that.status = PENDDING;\n  that.value = void 0;\n  that.handlerQueue = [];\n  // 执行函数， 传递进入 value\n  // executor(成功函数， 失败函数);\n  executor(function (value) {\n    // 成功函数执行，传递进入 transition 状态: FULFILLED\n    that.transition(FULFILLED, value);\n  }, function (value) {\n    // 失败函数执行， 传递进入 transition 状态: REJECTED\n    that.transition(REJECTED, value);\n  })\n}\n```\n\n在上面的代码中， 这个 `executor` 函数是被作为参数传入到 `Promise` 函数中的， 同时这个  `executor` 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。\n\n例如计算下面代码：\n\n```javascript\nfunction getSum(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSum(a + 1, b, sum + a + 1);\n    } else {\n        return sum;\n    }\n}\nfunction getSquare(a, b, sum = 0) {\n    if (a < b - 1) {\n        return getSquare(a + 1, b, sum + Math.pow(a + 1, 2));\n    } else {\n        return sum;\n    }\n}\nconst sums = getSum(1, 4);\nconst squareSums = getSquare(1, 4);\n```\n\n上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）\n\n实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：\n\n```javascript\nfunction sumFn(a, b, cb, sum = 0) {\n    if (a < b -1) {\n        return sumFn(a + 1, b, cb, cb(sum, a));\n    } else {\n        return sum;\n    }\n}\nconst addSum = sumFn(1, 4, (sum, a) => sum + 1 + a);\nconst squareSum = sumFn(1, 4, (sum, a) => sum + Math.pow(a + 1, 2));\n```\n\n在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 `cb` 中传入一个函数进行求取。\n\n我们可以看到， 在 `sumFn` 这个函数中， 函数的逻辑取决于传入的参数`cb`的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。\n\n","slug":"阅读函数式编程（二）","published":1,"updated":"2018-06-16T15:20:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohbh005qs33g1vim9bgt","content":"<p>在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>在 <code>Wikipedia</code> 上面， 这样解释函数式编程：</p>\n<blockquote>\n<ul>\n<li><p>In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)</p>\n</li>\n<li><p>Functional Programming treats computation as the evaluation of mathematical functions.</p>\n</li>\n<li><p>Functional Programming avoids changing-state and mutable data.</p>\n<p>​</p>\n</li>\n<li><p>在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。</p>\n</li>\n<li><p>函数式编程将计算视作数学上函数的评估。</p>\n</li>\n<li><p>函数编程中避免改变状态以及变化的数据。</p>\n</li>\n</ul>\n</blockquote>\n<p> 函数式编程与命令式编程最大的区别在于：</p>\n<p>函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  </p>\n<p>这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；</p>\n<blockquote>\n<p>函数的定义：</p>\n<p>设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===&gt; B 称为从集合 A 到 B 的一个映射</p>\n</blockquote>\n<p>同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。</p>\n<p>例如：如果我们想要对于数组中的每一个数加1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  arr[index] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"arr\"</span>, arr); <span class=\"comment\">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <code>forEach</code>, <code>map</code> 中数组中定义的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：使用 <code>map</code> 以及 <code>forEach</code> 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，</p>\n<p>使用 <code>map</code> 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 <code>forEach</code> 而言， 使用 <code>forEach</code> 不会改变原来的数组，返回值为 <code>undefined</code>。</p>\n<p>从函数式编程的角度而言，使用 <code>map</code> 更能体现函数式编程的特点： 不会产生副作用；</p>\n<hr>\n<p>在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。</p>\n<h3 id=\"几大特性\"><a href=\"#几大特性\" class=\"headerlink\" title=\"几大特性\"></a>几大特性</h3><p>对于函数式编程而言，存在下面几种特性：</p>\n<ul>\n<li>高阶函数</li>\n<li>没有副作用</li>\n<li>函数柯里化</li>\n<li>闭包</li>\n</ul>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；</p>\n<p>例如下面一段 <code>polifill</code> <code>es6</code> 中 <code>promise</code> 的代码中， 对于<code>promise</code> 返回成功状态或者失败状态的调用函数中是下面这样调用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 这个 <code>executor</code> 函数是被作为参数传入到 <code>Promise</code> 函数中的， 同时这个  <code>executor</code> 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。</p>\n<p>例如计算下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(a + <span class=\"number\">1</span>, b, sum + a + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSquare</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSquare(a + <span class=\"number\">1</span>, b, sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sums = getSum(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSums = getSquare(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）</p>\n<p>实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumFn</span>(<span class=\"params\">a, b, cb, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumFn(a + <span class=\"number\">1</span>, b, cb, cb(sum, a));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> addSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"number\">1</span> + a);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 <code>cb</code> 中传入一个函数进行求取。</p>\n<p>我们可以看到， 在 <code>sumFn</code> 这个函数中， 函数的逻辑取决于传入的参数<code>cb</code>的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇文章中，我们了解了关于纯函数的概念， 纯函数的好处体现了函数式编程的一大优点： 没有副作用， 那么什么是函数式编程， 与命令式编程有什么不同， 函数式编程有什么优点，这篇文章想要深入了解下函数式编程的基本概念以及特点；</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>在 <code>Wikipedia</code> 上面， 这样解释函数式编程：</p>\n<blockquote>\n<ul>\n<li><p>In computer science, functional programming is a programming paradigm or pattern (a style of building the structure and elements of computer programs)</p>\n</li>\n<li><p>Functional Programming treats computation as the evaluation of mathematical functions.</p>\n</li>\n<li><p>Functional Programming avoids changing-state and mutable data.</p>\n<p>​</p>\n</li>\n<li><p>在计算机中， 函数式编程是是一种编程范例或者模式（一种构建计算机程序的结构和元素的类型）。</p>\n</li>\n<li><p>函数式编程将计算视作数学上函数的评估。</p>\n</li>\n<li><p>函数编程中避免改变状态以及变化的数据。</p>\n</li>\n</ul>\n</blockquote>\n<p> 函数式编程与命令式编程最大的区别在于：</p>\n<p>函数式编程关心数据的映射， 命令式编程关心解决问题的步骤。  </p>\n<p>这里的函数式编程之所以被称作函数，实际上类似于数学上函数的概念；</p>\n<blockquote>\n<p>函数的定义：</p>\n<p>设A，B是非空的数集，如果按照某种确定的对应关系f，使对于集合A中的任意一个数x，在集合B中都有唯一确定的数 y 和 x 对应，那么变称映射 f: A ===&gt; B 称为从集合 A 到 B 的一个映射</p>\n</blockquote>\n<p>同样在函数式编程中， 函数式编程中的函数中， 每一个输入值都有一个唯一确定的输出值和输出值对应， 但是不同的输入值可以得到相同的输出值， 这种关系是一种映射关系。当然，对于函数编程而言，它不仅仅可以实现数据的映射， 还可以实现函数之间的映射。</p>\n<p>例如：如果我们想要对于数组中的每一个数加1:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  arr[index] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"arr\"</span>, arr); <span class=\"comment\">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>或者使用 <code>forEach</code>, <code>map</code> 中数组中定义的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// forEach</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item += <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>注意：使用 <code>map</code> 以及 <code>forEach</code> 的方法都是对于一个数组进行遍历，接收的参数也是相同的， 但是， 这两个方法之间还是存在着一些区别的，</p>\n<p>使用 <code>map</code> 不会改变原数组，但是会返回经过函数运算之后的新数组。对于使用 <code>forEach</code> 而言， 使用 <code>forEach</code> 不会改变原来的数组，返回值为 <code>undefined</code>。</p>\n<p>从函数式编程的角度而言，使用 <code>map</code> 更能体现函数式编程的特点： 不会产生副作用；</p>\n<hr>\n<p>在上面实现数组中每项加一的操作中， 使用两种代码实现的， 第一个代码中我们将想要计算机运行的步骤通过命令的方式写了下来，告诉计算机， 通过 for 循环循环这个数组，然后数组中的每一项进行加一操作， 而在第二种代码中， 我们通过类似于函数式编程的方式实现，我们不用关心这个过程是怎么实现的， 我们只要将这个数据转换的关系告诉函数就可以了，换句话说， 我们这里关心的是数据之间的映射。</p>\n<h3 id=\"几大特性\"><a href=\"#几大特性\" class=\"headerlink\" title=\"几大特性\"></a>几大特性</h3><p>对于函数式编程而言，存在下面几种特性：</p>\n<ul>\n<li>高阶函数</li>\n<li>没有副作用</li>\n<li>函数柯里化</li>\n<li>闭包</li>\n</ul>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>高阶函数是这样一种函数： 函数被作为参数传入或者被作为返回值被返回的一类函数被称作高阶函数；</p>\n<p>例如下面一段 <code>polifill</code> <code>es6</code> 中 <code>promise</code> 的代码中， 对于<code>promise</code> 返回成功状态或者失败状态的调用函数中是下面这样调用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span> (<span class=\"params\">executor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  that.status = PENDDING;</span><br><span class=\"line\">  that.value = <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  that.handlerQueue = [];</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数， 传递进入 value</span></span><br><span class=\"line\">  <span class=\"comment\">// executor(成功函数， 失败函数);</span></span><br><span class=\"line\">  executor(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功函数执行，传递进入 transition 状态: FULFILLED</span></span><br><span class=\"line\">    that.transition(FULFILLED, value);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败函数执行， 传递进入 transition 状态: REJECTED</span></span><br><span class=\"line\">    that.transition(REJECTED, value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 这个 <code>executor</code> 函数是被作为参数传入到 <code>Promise</code> 函数中的， 同时这个  <code>executor</code> 也是接受两个函数作为参数， 一个是作为函数返回值为成功状态的函数， 另一个是作为函数返回值为失败状态的函数。</p>\n<p>例如计算下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSum(a + <span class=\"number\">1</span>, b, sum + a + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSquare</span>(<span class=\"params\">a, b, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSquare(a + <span class=\"number\">1</span>, b, sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sums = getSum(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSums = getSquare(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<p>上面两段代码分别是求两个数之间的整数和以及平方和;（不包括这两个数）</p>\n<p>实际上， 上面的两种方法都是进行函数求和的运算， 只是求和的过程是不一样的，上面的代码我们可以重写如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumFn</span>(<span class=\"params\">a, b, cb, sum = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &lt; b <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumFn(a + <span class=\"number\">1</span>, b, cb, cb(sum, a));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> addSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"number\">1</span> + a);</span><br><span class=\"line\"><span class=\"keyword\">const</span> squareSum = sumFn(<span class=\"number\">1</span>, <span class=\"number\">4</span>, (sum, a) =&gt; sum + <span class=\"built_in\">Math</span>.pow(a + <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中， 我们抽取出了求和的函数， 通过向求和函数中的参数 <code>cb</code> 中传入一个函数进行求取。</p>\n<p>我们可以看到， 在 <code>sumFn</code> 这个函数中， 函数的逻辑取决于传入的参数<code>cb</code>的逻辑， 通过传入函数为参数的这种形式， 将程序的粒度控制在函数的层面上面。</p>\n"},{"title":"谈谈 window.location 对象","date":"2019-01-20T06:27:20.000Z","_content":"\n## 谈谈 `window.location` 对象\n\n`window.location` 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：\n\n以我们在 页面 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location 下获取 `window.location` 为例：\n\n```\nancestorOrigins: DOMStringList {length: 0}\nassign: ƒ ()\nhash: \"\"\nhost: \"developer.mozilla.org\"\nhostname: \"developer.mozilla.org\"\nhref: \"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\"\norigin: \"https://developer.mozilla.org\"\npathname: \"/zh-CN/docs/Web/API/Window/location\"\nport: \"\"\nprotocol: \"https:\"\nreload: ƒ reload()\nreplace: ƒ ()\nsearch: \"\"\ntoString: ƒ toString()\nvalueOf: ƒ valueOf()\nSymbol(Symbol.toPrimitive): undefined\n__proto__: Location\n```\n\n上面的这些值表明了在 `window.location` 中的一些属性和方法：\n\n| 属性名   | 含义                                                      | 示例                                                      |\n| -------- | --------------------------------------------------------- | --------------------------------------------------------- |\n| href     | 当前页面的url                                             | https://example.com:8080/page/childpage?pageId=1#identify |\n| host     | host  包含端口名                                          | example.com:8080                                          |\n| hostname | 不包含端口名                                              | example.com                                               |\n| pathname | 路径名                                                    | /page/childpage                                           |\n| origin   | 源网址                                                    | https://example.com:8080 是 网址在第一个 '/' 之前的部分   |\n| port     | 端口号                                                    | 8080                                                      |\n| protocol | 协议名                                                    | https                                                     |\n| search   | 截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容 | ?pageId=1                                                 |\n| hash     | 标识符                                                    | `#identify`                                               |\n\n除了上面几种属性之外， 还包括一些方法：\n\n```\nwindow.location.reload() // 对于当前页面进行重载操作\nwindow.location.replace(rul) // 对于当前页面进行替换\nwindow.location.assign(url) // 会触发页面重载并且跳转到指定的 url\n```\n\ntips：\n\n- 使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。\n\n","source":"_posts/谈谈-window-location-对象.md","raw":"---\ntitle: 谈谈 window.location 对象\ndate: 2019-01-20 14:27:20\ntags: window.location\ncategories: html5\n---\n\n## 谈谈 `window.location` 对象\n\n`window.location` 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：\n\n以我们在 页面 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location 下获取 `window.location` 为例：\n\n```\nancestorOrigins: DOMStringList {length: 0}\nassign: ƒ ()\nhash: \"\"\nhost: \"developer.mozilla.org\"\nhostname: \"developer.mozilla.org\"\nhref: \"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\"\norigin: \"https://developer.mozilla.org\"\npathname: \"/zh-CN/docs/Web/API/Window/location\"\nport: \"\"\nprotocol: \"https:\"\nreload: ƒ reload()\nreplace: ƒ ()\nsearch: \"\"\ntoString: ƒ toString()\nvalueOf: ƒ valueOf()\nSymbol(Symbol.toPrimitive): undefined\n__proto__: Location\n```\n\n上面的这些值表明了在 `window.location` 中的一些属性和方法：\n\n| 属性名   | 含义                                                      | 示例                                                      |\n| -------- | --------------------------------------------------------- | --------------------------------------------------------- |\n| href     | 当前页面的url                                             | https://example.com:8080/page/childpage?pageId=1#identify |\n| host     | host  包含端口名                                          | example.com:8080                                          |\n| hostname | 不包含端口名                                              | example.com                                               |\n| pathname | 路径名                                                    | /page/childpage                                           |\n| origin   | 源网址                                                    | https://example.com:8080 是 网址在第一个 '/' 之前的部分   |\n| port     | 端口号                                                    | 8080                                                      |\n| protocol | 协议名                                                    | https                                                     |\n| search   | 截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容 | ?pageId=1                                                 |\n| hash     | 标识符                                                    | `#identify`                                               |\n\n除了上面几种属性之外， 还包括一些方法：\n\n```\nwindow.location.reload() // 对于当前页面进行重载操作\nwindow.location.replace(rul) // 对于当前页面进行替换\nwindow.location.assign(url) // 会触发页面重载并且跳转到指定的 url\n```\n\ntips：\n\n- 使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。\n\n","slug":"谈谈-window-location-对象","published":1,"updated":"2019-04-01T10:32:42.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju23ohbj005vs33gaikbs3d8","content":"<h2 id=\"谈谈-window-location-对象\"><a href=\"#谈谈-window-location-对象\" class=\"headerlink\" title=\"谈谈 window.location 对象\"></a>谈谈 <code>window.location</code> 对象</h2><p><code>window.location</code> 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：</p>\n<p>以我们在 页面 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</a> 下获取 <code>window.location</code> 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ancestorOrigins: DOMStringList &#123;length: 0&#125;</span><br><span class=\"line\">assign: ƒ ()</span><br><span class=\"line\">hash: &quot;&quot;</span><br><span class=\"line\">host: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">hostname: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">href: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">origin: &quot;https://developer.mozilla.org&quot;</span><br><span class=\"line\">pathname: &quot;/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">port: &quot;&quot;</span><br><span class=\"line\">protocol: &quot;https:&quot;</span><br><span class=\"line\">reload: ƒ reload()</span><br><span class=\"line\">replace: ƒ ()</span><br><span class=\"line\">search: &quot;&quot;</span><br><span class=\"line\">toString: ƒ toString()</span><br><span class=\"line\">valueOf: ƒ valueOf()</span><br><span class=\"line\">Symbol(Symbol.toPrimitive): undefined</span><br><span class=\"line\">__proto__: Location</span><br></pre></td></tr></table></figure>\n<p>上面的这些值表明了在 <code>window.location</code> 中的一些属性和方法：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>当前页面的url</td>\n<td><a href=\"https://example.com:8080/page/childpage?pageId=1#identify\" target=\"_blank\" rel=\"noopener\">https://example.com:8080/page/childpage?pageId=1#identify</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>host  包含端口名</td>\n<td>example.com:8080</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>不包含端口名</td>\n<td>example.com</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>路径名</td>\n<td>/page/childpage</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>源网址</td>\n<td><a href=\"https://example.com:8080\" target=\"_blank\" rel=\"noopener\">https://example.com:8080</a> 是 网址在第一个 ‘/‘ 之前的部分</td>\n</tr>\n<tr>\n<td>port</td>\n<td>端口号</td>\n<td>8080</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>协议名</td>\n<td>https</td>\n</tr>\n<tr>\n<td>search</td>\n<td>截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容</td>\n<td>?pageId=1</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>标识符</td>\n<td><code>#identify</code></td>\n</tr>\n</tbody>\n</table>\n<p>除了上面几种属性之外， 还包括一些方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.reload() // 对于当前页面进行重载操作</span><br><span class=\"line\">window.location.replace(rul) // 对于当前页面进行替换</span><br><span class=\"line\">window.location.assign(url) // 会触发页面重载并且跳转到指定的 url</span><br></pre></td></tr></table></figure>\n<p>tips：</p>\n<ul>\n<li>使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"谈谈-window-location-对象\"><a href=\"#谈谈-window-location-对象\" class=\"headerlink\" title=\"谈谈 window.location 对象\"></a>谈谈 <code>window.location</code> 对象</h2><p><code>window.location</code> 是一个只读属性， 用于获取到页面文档的位置信息， 如果我们在浏览器控制台中打印， 那么打印出来的结果如下：</p>\n<p>以我们在 页面 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location</a> 下获取 <code>window.location</code> 为例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ancestorOrigins: DOMStringList &#123;length: 0&#125;</span><br><span class=\"line\">assign: ƒ ()</span><br><span class=\"line\">hash: &quot;&quot;</span><br><span class=\"line\">host: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">hostname: &quot;developer.mozilla.org&quot;</span><br><span class=\"line\">href: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">origin: &quot;https://developer.mozilla.org&quot;</span><br><span class=\"line\">pathname: &quot;/zh-CN/docs/Web/API/Window/location&quot;</span><br><span class=\"line\">port: &quot;&quot;</span><br><span class=\"line\">protocol: &quot;https:&quot;</span><br><span class=\"line\">reload: ƒ reload()</span><br><span class=\"line\">replace: ƒ ()</span><br><span class=\"line\">search: &quot;&quot;</span><br><span class=\"line\">toString: ƒ toString()</span><br><span class=\"line\">valueOf: ƒ valueOf()</span><br><span class=\"line\">Symbol(Symbol.toPrimitive): undefined</span><br><span class=\"line\">__proto__: Location</span><br></pre></td></tr></table></figure>\n<p>上面的这些值表明了在 <code>window.location</code> 中的一些属性和方法：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>href</td>\n<td>当前页面的url</td>\n<td><a href=\"https://example.com:8080/page/childpage?pageId=1#identify\" target=\"_blank\" rel=\"noopener\">https://example.com:8080/page/childpage?pageId=1#identify</a></td>\n</tr>\n<tr>\n<td>host</td>\n<td>host  包含端口名</td>\n<td>example.com:8080</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>不包含端口名</td>\n<td>example.com</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>路径名</td>\n<td>/page/childpage</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>源网址</td>\n<td><a href=\"https://example.com:8080\" target=\"_blank\" rel=\"noopener\">https://example.com:8080</a> 是 网址在第一个 ‘/‘ 之前的部分</td>\n</tr>\n<tr>\n<td>port</td>\n<td>端口号</td>\n<td>8080</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>协议名</td>\n<td>https</td>\n</tr>\n<tr>\n<td>search</td>\n<td>截取到的链接的 ？ 之后的字符串, 不包含标识符 # 之后的内容</td>\n<td>?pageId=1</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>标识符</td>\n<td><code>#identify</code></td>\n</tr>\n</tbody>\n</table>\n<p>除了上面几种属性之外， 还包括一些方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.reload() // 对于当前页面进行重载操作</span><br><span class=\"line\">window.location.replace(rul) // 对于当前页面进行替换</span><br><span class=\"line\">window.location.assign(url) // 会触发页面重载并且跳转到指定的 url</span><br></pre></td></tr></table></figure>\n<p>tips：</p>\n<ul>\n<li>使用 replace 和 assign 不同的区别在于： 使用 replace 替换的当前页面不会保存到页面浏览会话历史中，因此当跳转完成之后， 点击浏览器的后退按钮， 是不会进入到使用 replace 的那个页面资源的。而使用 assign 会回到之前跳转的页面。</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/实现mechine函数/imageconsole.png","slug":"imageconsole.png","post":"cju23ohas004ls33gctes7kok","modified":0,"renderable":0},{"_id":"source/_posts/实现mechine函数/mechine.png","slug":"mechine.png","post":"cju23ohas004ls33gctes7kok","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cju23oh610001s33g8x3tnqlw","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23oh6z000es33gjxu7dvh1"},{"post_id":"cju23oh6w000cs33gqnrabo6v","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh78000ks33gmofpg7r9"},{"post_id":"cju23oh6c0003s33ghgzib9ah","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh7d000os33g3io5nc5v"},{"post_id":"cju23oh73000hs33gk66qnrvz","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh7f000rs33gqrzwgz9c"},{"post_id":"cju23oh6n0006s33gk9rcthn4","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh7i000vs33gz2rtlx0z"},{"post_id":"cju23oh6q0007s33gbqxyt2c7","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh7j000ys33gu49fr8ps"},{"post_id":"cju23oh6s0008s33g9d0upc6p","category_id":"cju23oh7g000ss33gllzryx9z","_id":"cju23oh7m0014s33gix07jwwq"},{"post_id":"cju23oh7k0010s33g1e430yo0","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh7p0019s33gtz463bep"},{"post_id":"cju23oh6x000ds33g1evay035","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23oh7s001cs33ghmtvhkw4"},{"post_id":"cju23oh7o0018s33gulv885d5","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23oh80001is33g85i4x0fl"},{"post_id":"cju23oh76000js33gzi6stecw","category_id":"cju23oh7m0015s33g4zplcfbv","_id":"cju23oh82001ms33g7yxjkl39"},{"post_id":"cju23oh7c000ns33ghwfv9d9y","category_id":"cju23oh7s001ds33g54svwq37","_id":"cju23oh84001qs33g7rk41907"},{"post_id":"cju23oh7e000qs33gybxbs6i7","category_id":"cju23oh7m0015s33g4zplcfbv","_id":"cju23oh88001ws33gsnurbjr3"},{"post_id":"cju23oh83001os33g2xcpc8v4","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23oh8b001ys33gaqlic4nt"},{"post_id":"cju23oh85001rs33glh603p3q","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23oh8k0023s33gb2nc3rg9"},{"post_id":"cju23oh7h000us33gv5vydnze","category_id":"cju23oh7m0015s33g4zplcfbv","_id":"cju23oh8p0025s33gapofevde"},{"post_id":"cju23oh87001us33gx5nlve0o","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23oh8s0029s33guto27zlh"},{"post_id":"cju23oh89001xs33gv36p0l3f","category_id":"cju23oh7s001ds33g54svwq37","_id":"cju23oh8t002cs33gp6cvwhr2"},{"post_id":"cju23oh7i000xs33g8fap6o25","category_id":"cju23oh7s001ds33g54svwq37","_id":"cju23oh8x002fs33gx57sgdny"},{"post_id":"cju23oh7l0013s33g23f7ug13","category_id":"cju23oh7m0015s33g4zplcfbv","_id":"cju23oh96002js33gh9xcudny"},{"post_id":"cju23oh7n0016s33gt6afujfk","category_id":"cju23oh8r0028s33gso1yt0lq","_id":"cju23oh98002ms33gncebqihw"},{"post_id":"cju23oh7r001bs33glspix6v9","category_id":"cju23oh8x002gs33gbvbwjvfc","_id":"cju23oh9c002ts33gvux72z9w"},{"post_id":"cju23oh7v001fs33gyol1kdoo","category_id":"cju23oh8x002gs33gbvbwjvfc","_id":"cju23oh9f002zs33goj8ntlni"},{"post_id":"cju23oh82001ls33ggqjpbslr","category_id":"cju23oh8x002gs33gbvbwjvfc","_id":"cju23oh9i0033s33gh4d1ej4u"},{"post_id":"cju23oh9h0032s33g9ss4qo50","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oh9r003as33gr5peeqva"},{"post_id":"cju23oh8c0020s33gk2fe8r3w","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oh9x003fs33g5vc1u3ap"},{"post_id":"cju23oh9j0035s33ghk7qm0zn","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oha0003hs33g130c4fyu"},{"post_id":"cju23oh9o0038s33g4zw6n525","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oha3003ls33g84ktzuzr"},{"post_id":"cju23oh8l0024s33gpjee5bwd","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oha7003os33gi3et20q8"},{"post_id":"cju23oh9q0039s33geix5a239","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23oha9003ss33g0155b041"},{"post_id":"cju23oh9t003es33gh74symjg","category_id":"cju23oh6t0009s33gx6tlgkdb","_id":"cju23ohaa003vs33g1pzmrybi"},{"post_id":"cju23oh8q0027s33go7y4kwid","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohae003zs33gqexrj54r"},{"post_id":"cju23oha2003ks33gfz6emg2e","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohag0042s33gwp85160d"},{"post_id":"cju23oh8s002bs33gq53fygby","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohai0045s33g68sglocy"},{"post_id":"cju23oh8u002es33gpcta3wbt","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohak0049s33gi8dxt0bt"},{"post_id":"cju23ohaa003us33ged935a2j","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohan004cs33gw6qbzvmi"},{"post_id":"cju23oh8y002is33gph4qc1xa","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohap004gs33gxdvxeo3d"},{"post_id":"cju23ohaf0041s33gsmeloart","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohar004js33g0j7qz22u"},{"post_id":"cju23ohah0044s33gacyoqu5u","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohat004ms33g54yvgyj8"},{"post_id":"cju23oh96002ks33g1fqmnqd9","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohau004qs33guqo08yfn"},{"post_id":"cju23ohak0048s33gohhpizg9","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohaw004ts33gmhtbfpmj"},{"post_id":"cju23oham004bs33grg89wvun","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohax004xs33gn7v2eyss"},{"post_id":"cju23oh98002ps33g5ax3idgw","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohaz0050s33g61og1ycw"},{"post_id":"cju23ohao004fs33g0r20h23r","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohb20054s33gngb8zjc7"},{"post_id":"cju23ohaq004is33gqs0z1nwn","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohb40056s33g4eznko3v"},{"post_id":"cju23oh9a002qs33gxukuhyyn","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohb6005bs33gv9j63vh2"},{"post_id":"cju23ohas004ls33gctes7kok","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohb8005ds33g548v2teq"},{"post_id":"cju23ohau004ps33g8f1752sp","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohba005is33glsghc1th"},{"post_id":"cju23oh9c002us33gzml89m0e","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohbe005ks33gestq1993"},{"post_id":"cju23ohav004ss33g3hmgyifp","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohbg005ps33g287pb9dk"},{"post_id":"cju23oh9e002ws33gijjr8hyv","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohbi005rs33gioockkov"},{"post_id":"cju23ohay004zs33g5qk9b10s","category_id":"cju23oh6g0004s33gahnbfwtz","_id":"cju23ohbk005ws33gwkd5pfv3"},{"post_id":"cju23oh9f0030s33g76ev4pyi","category_id":"cju23oh9f002ys33gj9ruvrdg","_id":"cju23ohbl005ys33genbkzjlk"},{"post_id":"cju23oh9y003gs33gtk7ppnv1","category_id":"cju23ohb40057s33gsxqm8zen","_id":"cju23ohbn0062s33gfsliddrs"},{"post_id":"cju23oha5003ns33gbmupbh30","category_id":"cju23ohb8005fs33gs39sqtt9","_id":"cju23ohbn0064s33g3v3zp7zo"},{"post_id":"cju23ohbd005js33gack9uyx9","category_id":"cju23oh7j000zs33gvu9u0598","_id":"cju23ohbo0067s33gpk1leg2d"},{"post_id":"cju23oha8003rs33g52dmaj20","category_id":"cju23ohb8005fs33gs39sqtt9","_id":"cju23ohbq0069s33gxbtnh3lx"},{"post_id":"cju23ohac003ys33gbhd0jftm","category_id":"cju23ohbj005ts33gatowcerb","_id":"cju23ohbr006cs33g0bfwi5eq"},{"post_id":"cju23ohb00053s33g411x5tso","category_id":"cju23ohbn0061s33gb5j9loau","_id":"cju23ohbr006es33gshtqs52p"},{"post_id":"cju23ohb7005cs33gdyorc4mx","category_id":"cju23ohb8005fs33gs39sqtt9","_id":"cju23ohbs006hs33gibbb5gxb"},{"post_id":"cju23ohb9005hs33gt8brjt4i","category_id":"cju23ohbr006ds33gfngw1eb8","_id":"cju23ohbu006ls33gtwj58jh6"},{"post_id":"cju23ohbf005os33gwderitr3","category_id":"cju23ohbs006is33gkot9jo7o","_id":"cju23ohbw006qs33g3bp8j2x6"},{"post_id":"cju23ohbh005qs33g1vim9bgt","category_id":"cju23ohbs006is33gkot9jo7o","_id":"cju23ohbx006ts33gsenngneg"},{"post_id":"cju23ohbj005vs33gaikbs3d8","category_id":"cju23ohbv006ps33gvhfjfcts","_id":"cju23ohby006ws33gloc9f6ri"}],"PostTag":[{"post_id":"cju23oh610001s33g8x3tnqlw","tag_id":"cju23oh6l0005s33ggh0loixx","_id":"cju23oh6v000bs33g3ma12z1z"},{"post_id":"cju23oh6c0003s33ghgzib9ah","tag_id":"cju23oh6u000as33g4u1j9nl4","_id":"cju23oh75000is33gpxt4k8lm"},{"post_id":"cju23oh6n0006s33gk9rcthn4","tag_id":"cju23oh6z000gs33gvz8frmbh","_id":"cju23oh7d000ps33ganfotj6l"},{"post_id":"cju23oh6q0007s33gbqxyt2c7","tag_id":"cju23oh7b000ms33gelhj7ctt","_id":"cju23oh7i000ws33gzvpdwjed"},{"post_id":"cju23oh6s0008s33g9d0upc6p","tag_id":"cju23oh7h000ts33gvnatntpy","_id":"cju23oh7l0012s33gq9bm62ip"},{"post_id":"cju23oh6w000cs33gqnrabo6v","tag_id":"cju23oh7l0011s33geekb2khn","_id":"cju23oh7p001as33gtd2b1j94"},{"post_id":"cju23oh6x000ds33g1evay035","tag_id":"cju23oh7o0017s33gk9ozjftv","_id":"cju23oh7y001gs33gwv8mo3a8"},{"post_id":"cju23oh73000hs33gk66qnrvz","tag_id":"cju23oh7t001es33gygqgoow3","_id":"cju23oh83001ns33g356b8afc"},{"post_id":"cju23oh76000js33gzi6stecw","tag_id":"cju23oh81001ks33gnkclh6fe","_id":"cju23oh87001ts33gqjuzywu7"},{"post_id":"cju23oh7c000ns33ghwfv9d9y","tag_id":"cju23oh86001ss33gdrkfy5qq","_id":"cju23oh8e0021s33g1vqls7cc"},{"post_id":"cju23oh7e000qs33gybxbs6i7","tag_id":"cju23oh8b001zs33g1nlatulz","_id":"cju23oh8s002as33gs9h7sflm"},{"post_id":"cju23oh7h000us33gv5vydnze","tag_id":"cju23oh8p0026s33g8z999l5i","_id":"cju23oh8x002hs33g476o1j1x"},{"post_id":"cju23oh7i000xs33g8fap6o25","tag_id":"cju23oh8t002ds33g5ehchq75","_id":"cju23oh98002os33gj39w9m7r"},{"post_id":"cju23oh7k0010s33g1e430yo0","tag_id":"cju23oh97002ls33gb6xrvhe2","_id":"cju23oh9d002vs33g0qcxxaav"},{"post_id":"cju23oh7l0013s33g23f7ug13","tag_id":"cju23oh9b002rs33gjs7jwwzt","_id":"cju23oh9g0031s33gef0e2efa"},{"post_id":"cju23oh7n0016s33gt6afujfk","tag_id":"cju23oh9f002xs33gyw831cwr","_id":"cju23oh9o0037s33gvh95n8uj"},{"post_id":"cju23oh7o0018s33gulv885d5","tag_id":"cju23oh9i0034s33gab1fvgf1","_id":"cju23oh9t003ds33g47wyiyy1"},{"post_id":"cju23oh7r001bs33glspix6v9","tag_id":"cju23oh9s003cs33gfyoilon1","_id":"cju23oha3003ms33g2eih2chh"},{"post_id":"cju23oh7v001fs33gyol1kdoo","tag_id":"cju23oha1003js33gc28biwnm","_id":"cju23oha9003ts33gh565jf0k"},{"post_id":"cju23oh7z001hs33gmueuy9kw","tag_id":"cju23oha8003qs33geiq14zu4","_id":"cju23ohaf0040s33g9rkmrm2h"},{"post_id":"cju23oh82001ls33ggqjpbslr","tag_id":"cju23ohac003xs33g656tkigu","_id":"cju23ohaj0047s33ghwl5z852"},{"post_id":"cju23oh83001os33g2xcpc8v4","tag_id":"cju23oh8p0026s33g8z999l5i","_id":"cju23ohao004es33g5kv7o67p"},{"post_id":"cju23oh85001rs33glh603p3q","tag_id":"cju23ohan004ds33galdx1icp","_id":"cju23ohat004os33gff5thlas"},{"post_id":"cju23oh87001us33gx5nlve0o","tag_id":"cju23ohar004ks33g3f76ywvu","_id":"cju23ohaw004vs33gw7ndfk1p"},{"post_id":"cju23oh89001xs33gv36p0l3f","tag_id":"cju23ohav004rs33gnd38czb1","_id":"cju23ohb00052s33gojvco1yt"},{"post_id":"cju23oh8c0020s33gk2fe8r3w","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohb50059s33gq0807bp0"},{"post_id":"cju23oh8l0024s33gpjee5bwd","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohb8005gs33gvf1ezj36"},{"post_id":"cju23oh8q0027s33go7y4kwid","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbf005ns33gu9pczrfr"},{"post_id":"cju23ohbf005os33gwderitr3","tag_id":"cju23oh7h000ts33gvnatntpy","_id":"cju23ohbj005us33grebikbs6"},{"post_id":"cju23oh8s002bs33gq53fygby","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbl005xs33gu86tizr3"},{"post_id":"cju23ohbh005qs33g1vim9bgt","tag_id":"cju23oh7h000ts33gvnatntpy","_id":"cju23ohbn0060s33gorebmser"},{"post_id":"cju23oh8u002es33gpcta3wbt","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbn0063s33gy6kdo1qm"},{"post_id":"cju23oh8y002is33gph4qc1xa","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbo0066s33gx5d9zp02"},{"post_id":"cju23oh96002ks33g1fqmnqd9","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbr006bs33g4gaxahdq"},{"post_id":"cju23oh98002ps33g5ax3idgw","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbs006gs33gcajgy2f4"},{"post_id":"cju23oh9a002qs33gxukuhyyn","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbu006ks33gtv8xpge0"},{"post_id":"cju23oh9c002us33gzml89m0e","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbv006os33g1orkl7yb"},{"post_id":"cju23oh9e002ws33gijjr8hyv","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbw006ss33g082ied0e"},{"post_id":"cju23oh9f0030s33g76ev4pyi","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohbx006vs33gqusy9y23"},{"post_id":"cju23oh9h0032s33g9ss4qo50","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohby006ys33gbulofxmv"},{"post_id":"cju23oh9j0035s33ghk7qm0zn","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohc00070s33gqc4t580r"},{"post_id":"cju23oh9o0038s33g4zw6n525","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohc10072s33gbqhun9sh"},{"post_id":"cju23oh9q0039s33geix5a239","tag_id":"cju23ohay004ys33gakxkpr70","_id":"cju23ohc20074s33geu0239lv"},{"post_id":"cju23oh9t003es33gh74symjg","tag_id":"cju23ohc10073s33gr6wprzq4","_id":"cju23ohc20076s33g5nnh9gv4"},{"post_id":"cju23oh9y003gs33gtk7ppnv1","tag_id":"cju23ohc20075s33goxqzxd3o","_id":"cju23ohc30078s33gjgzfnsi9"},{"post_id":"cju23oha2003ks33gfz6emg2e","tag_id":"cju23ohc20077s33g5xteryi8","_id":"cju23ohc4007as33geqqczer1"},{"post_id":"cju23oha5003ns33gbmupbh30","tag_id":"cju23ohc40079s33gfvqra06e","_id":"cju23ohc5007cs33gw33rhmin"},{"post_id":"cju23oha8003rs33g52dmaj20","tag_id":"cju23ohc4007bs33gj212q3me","_id":"cju23ohc5007es33gawv55ikr"},{"post_id":"cju23ohaa003us33ged935a2j","tag_id":"cju23ohc5007ds33ghrbsn9wd","_id":"cju23ohc6007gs33gr7c0uqj0"},{"post_id":"cju23ohac003ys33gbhd0jftm","tag_id":"cju23ohc4007bs33gj212q3me","_id":"cju23ohc6007is33gdepjcvne"},{"post_id":"cju23ohaf0041s33gsmeloart","tag_id":"cju23ohc6007hs33g8xhmik6i","_id":"cju23ohc7007ks33gi68nab5q"},{"post_id":"cju23ohah0044s33gacyoqu5u","tag_id":"cju23ohc7007js33glch2y9xi","_id":"cju23ohc9007ms33g18dw7vl6"},{"post_id":"cju23ohak0048s33gohhpizg9","tag_id":"cju23ohc7007ls33g4f5xx6dw","_id":"cju23ohc9007os33ga49mdw4r"},{"post_id":"cju23oham004bs33grg89wvun","tag_id":"cju23ohc9007ns33g4qu5985s","_id":"cju23ohca007qs33gr2wcxo9f"},{"post_id":"cju23ohao004fs33g0r20h23r","tag_id":"cju23ohca007ps33gsvcy4cp1","_id":"cju23ohcb007ss33gbpf7vs8w"},{"post_id":"cju23ohaq004is33gqs0z1nwn","tag_id":"cju23ohca007ps33gsvcy4cp1","_id":"cju23ohcb007us33g2ail4tgj"},{"post_id":"cju23ohas004ls33gctes7kok","tag_id":"cju23ohcb007ts33gize8o65b","_id":"cju23ohcc007ws33gqxqq616d"},{"post_id":"cju23ohau004ps33g8f1752sp","tag_id":"cju23ohca007ps33gsvcy4cp1","_id":"cju23ohcc007ys33ggrtunnd6"},{"post_id":"cju23ohav004ss33g3hmgyifp","tag_id":"cju23ohca007ps33gsvcy4cp1","_id":"cju23ohcc0080s33gbfggc8fd"},{"post_id":"cju23ohax004ws33g7bv73w6y","tag_id":"cju23ohcc007zs33gvrmosl0d","_id":"cju23ohcd0082s33gw057jrw4"},{"post_id":"cju23ohay004zs33g5qk9b10s","tag_id":"cju23ohca007ps33gsvcy4cp1","_id":"cju23ohcd0084s33ggm1v0c85"},{"post_id":"cju23ohb20055s33gvobadflw","tag_id":"cju23ohcd0083s33gcvkf3od9","_id":"cju23ohcd0086s33g9o3sx01w"},{"post_id":"cju23ohb5005as33gyc3isxwr","tag_id":"cju23ohcd0085s33g60n88oft","_id":"cju23ohce0088s33go2cl3od0"},{"post_id":"cju23ohb7005cs33gdyorc4mx","tag_id":"cju23ohce0087s33gwsoj12gr","_id":"cju23ohce008as33g7d4ylbg6"},{"post_id":"cju23ohb9005hs33gt8brjt4i","tag_id":"cju23ohce0089s33grtu165im","_id":"cju23ohce008cs33gagzf7byh"},{"post_id":"cju23ohbd005js33gack9uyx9","tag_id":"cju23ohce008bs33g5xb1z13o","_id":"cju23ohcf008es33g7ck8tp0f"},{"post_id":"cju23ohbj005vs33gaikbs3d8","tag_id":"cju23ohce008ds33gmel8wxpx","_id":"cju23ohcf008fs33giqgv78a9"}],"Tag":[{"name":"blob","_id":"cju23oh6l0005s33ggh0loixx"},{"name":"bfc","_id":"cju23oh6u000as33g4u1j9nl4"},{"name":"垂直居中","_id":"cju23oh6z000gs33gvz8frmbh"},{"name":"CSS 居中","_id":"cju23oh7b000ms33gelhj7ctt"},{"name":"函数式编程","_id":"cju23oh7h000ts33gvnatntpy"},{"name":"CSS层叠","_id":"cju23oh7l0011s33geekb2khn"},{"name":"ajax","_id":"cju23oh7o0017s33gk9ozjftv"},{"name":"css modules","_id":"cju23oh7t001es33gygqgoow3"},{"name":"Map Set","_id":"cju23oh81001ks33gnkclh6fe"},{"name":"组件通信","_id":"cju23oh86001ss33gdrkfy5qq"},{"name":"变量解构赋值","_id":"cju23oh8b001zs33g1nlatulz"},{"name":"promise","_id":"cju23oh8p0026s33g8z999l5i"},{"name":"vue 响应原理","_id":"cju23oh8t002ds33g5ehchq75"},{"name":"grid 布局","_id":"cju23oh97002ls33gb6xrvhe2"},{"name":"对象扩展","_id":"cju23oh9b002rs33gjs7jwwzt"},{"name":"js 链表","_id":"cju23oh9f002xs33gyw831cwr"},{"name":"fileReader","_id":"cju23oh9i0034s33gab1fvgf1"},{"name":"EventEmitter","_id":"cju23oh9s003cs33gfyoilon1"},{"name":"node.js 基础","_id":"cju23oha1003js33gc28biwnm"},{"name":"0","_id":"cju23oha8003qs33geiq14zu4"},{"name":"Timers","_id":"cju23ohac003xs33g656tkigu"},{"name":"toolTip","_id":"cju23ohan004ds33galdx1icp"},{"name":"transform","_id":"cju23ohar004ks33g3f76ywvu"},{"name":"this.nextTick","_id":"cju23ohav004rs33gnd38czb1"},{"name":"underscore.js源码","_id":"cju23ohay004ys33gakxkpr70"},{"name":"vertical-align && line-height","_id":"cju23ohc10073s33gr6wprzq4"},{"name":"vue 知识总结（一）","_id":"cju23ohc20075s33goxqzxd3o"},{"name":"事件监听","_id":"cju23ohc20077s33g5xteryi8"},{"name":"whileordo","_id":"cju23ohc40079s33gfvqra06e"},{"name":"作用域","_id":"cju23ohc4007bs33gj212q3me"},{"name":"节流","_id":"cju23ohc5007ds33ghrbsn9wd"},{"name":"route","_id":"cju23ohc6007hs33g8xhmik6i"},{"name":"对象复制","_id":"cju23ohc7007js33glch2y9xi"},{"name":"算法","_id":"cju23ohc7007ls33g4f5xx6dw"},{"name":"日历","_id":"cju23ohc9007ns33g4qu5985s"},{"name":"正则表达式","_id":"cju23ohca007ps33gsvcy4cp1"},{"name":"mechine 函数","_id":"cju23ohcb007ts33gize8o65b"},{"name":"浏览器渲染","_id":"cju23ohcc007zs33gvrmosl0d"},{"name":"二叉树","_id":"cju23ohcd0083s33gcvkf3od9"},{"name":"移动端touch事件","_id":"cju23ohcd0085s33g60n88oft"},{"name":"js 类","_id":"cju23ohce0087s33gwsoj12gr"},{"name":"js运行机制，线程","_id":"cju23ohce0089s33grtu165im"},{"name":"数组","_id":"cju23ohce008bs33g5xb1z13o"},{"name":"window.location","_id":"cju23ohce008ds33gmel8wxpx"}]}}